{"version":3,"sources":["types/index.tsx","redux/actions/index.ts","redux/reducers/addOrg.ts","redux/reducers/editOrg.ts","redux/reducers/viewOrg.ts","redux/reducers/browseOrgs.ts","redux/reducers/auth.ts","redux/reducers/app.ts","redux/reducers/manageOrganizationRequests.ts","redux/reducers/viewMembers.ts","data/apis/groups.ts","data/models/requests.ts","data/models/organization/model.ts","data/models/organization/validation.ts","redux/reducers/inviteUser.ts","redux/reducers/manageMembership.ts","redux/reducers/requestAddNarrative.ts","redux/reducers/dashboard.ts","redux/reducers/entities.ts","redux/reducers/organizationCentric.ts","redux/reducers/global.ts","redux/reducers/index.tsx","components/entities/Owner.tsx","components/entities/Avatar.tsx","data/apis/userProfile.ts","data/models/user.ts","data/apis/genericClient.ts","data/apis/serviceWizard.ts","data/apis/serviceClient.ts","data/apis/dynamicServiceClient.ts","data/models/narrative.ts","data/apis/narrativeService.ts","data/apis/workspaceUtils.ts","redux/actions/entities.ts","components/entities/OwnerContainer.tsx","components/OrgAvatar.tsx","components/organizations/component.tsx","components/organizations/container.tsx","components/Header.tsx","components/views/browseOrgs/component.tsx","redux/actions/browseOrgs.ts","components/views/browseOrgs/container.tsx","components/views/browseOrgs/loader.tsx","redux/actions/addOrg.ts","components/views/newOrganization/component.tsx","components/views/newOrganization/container.tsx","components/views/newOrganization/loader.tsx","data/models/uber.ts","redux/actions/viewOrg.ts","components/entities/Member.tsx","components/entities/MemberContainer.tsx","components/views/organizationHeader/component.tsx","components/views/organizationHeader/container.tsx","redux/actions/organizationCentric.ts","components/views/organizationHeader/loader.tsx","data/models/feeds.ts","components/OrganizationNarrative.tsx","data/apis/feeds.ts","redux/actions/dashboard.ts","data/formatters.ts","components/views/dashboard/OrganizationCompact.tsx","components/views/dashboard/OrganizationCompactContainer.tsx","components/entities/Narrative.tsx","components/entities/NarrativeContainer.tsx","components/entities/User.tsx","components/entities/UserContainer.tsx","components/views/dashboard/InboxRequest.tsx","components/views/dashboard/InboxRequestContainer.tsx","components/views/dashboard/OutboxRequest.tsx","components/views/dashboard/OutboxRequestContainer.tsx","components/views/viewOrganization/component.tsx","components/views/viewOrganization/container.tsx","components/views/viewOrganization/loader.tsx","redux/actions/editOrg.ts","components/views/editOrganization/component.tsx","components/views/editOrganization/container.tsx","components/views/editOrganization/loader.tsx","components/Auth.tsx","data/auth.ts","redux/actions/auth.ts","containers/Auth.tsx","lib/windowChannel.ts","lib/IFrameSimulator.ts","lib/IFrameIntegration.ts","redux/actions/app.ts","components/KBaseIntegration.tsx","containers/KBaseIntegration.tsx","redux/actions/manageOrganizationRequests.ts","components/views/manageOrganizationRequests/component.tsx","components/views/manageOrganizationRequests/container.tsx","components/views/manageOrganizationRequests/loader.tsx","redux/actions/viewMembers.ts","components/views/viewMembers/MemberRow.tsx","components/views/viewMembers/component.tsx","components/views/viewMembers/container.ts","components/views/viewMembers/loader.tsx","redux/actions/inviteUser.ts","components/User.tsx","components/views/inviteUser/component.tsx","components/views/inviteUser/container.tsx","components/views/inviteUser/loader.tsx","components/views/manageMembership/component.tsx","components/views/manageMembership/container.tsx","components/views/manageMembership/loader.tsx","components/views/requestAddNarrative/component.tsx","redux/actions/manageMembership.ts","redux/actions/requestAddNarrative.ts","components/views/requestAddNarrative/container.tsx","components/views/requestAddNarrative/loader.tsx","components/entities/UserLoader.tsx","components/views/dashboard/Organization.tsx","components/notifications/component.tsx","components/notifications/storeAdapter.tsx","components/views/dashboard/component.tsx","components/views/dashboard/container.tsx","components/views/dashboard/loader.tsx","redux/state.tsx","App.tsx","index.tsx"],"names":["UIErrorType","MemberType","RequestType","RequestResourceType","RequestStatus","AuthState","EditOrgState","SyncState","EditState","SaveState","ValidationState","FieldState","ViewOrgState","AppState","SortDirection","ComponentLoadingState","BrowseOrgsState","InviteUserViewState","NarrativeState","ProcessingState","RequestNarrativeState","ActionFlag","AppException","_Error","_ref","_this","code","message","detail","info","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","name","Error","captureStackTrace","assertThisInitialized","stack","indexOf","trace","split","inherits","wrapNativeSuper","reducer","state","action","type","ADD_ORG_SAVE","views","addOrgView","viewModel","objectSpread","saveState","SAVING","console","warn","saveStart","ADD_ORG_SAVE_SUCCESS","editState","UNEDITED","SAVED","saveSuccess","ADD_ORG_SAVE_ERROR","SAVE_ERROR","error","saveError","ADD_ORG_LOAD_START","loadingState","LOADING","loadStart","ADD_ORG_LOAD_SUCCESS","SUCCESS","validationState","NONE","NEW","newOrganization","loadSuccess","ADD_ORG_LOAD_ERROR","loadError","ADD_ORG_UNLOAD","unload","ADD_ORG_UPDATE_NAME_SUCCESS","EDITED","value","VALID","validatedAt","Date","updateNameSuccess","ADD_ORG_UPDATE_NAME_ERROR","INVALID","updateNameError","ADD_ORG_UPDATE_GRAVATAR_HASH_SUCCESS","gravatarHash","updateGravatarHashSuccess","ADD_ORG_UPDATE_GRAVATAR_HASH_ERROR","updateGravatarHashError","ADD_ORG_UPDATE_ID_SUCCESS","id","updateIdSuccess","ADD_ORG_UPDATE_ID_ERROR","updateIdError","ADD_ORG_UPDATE_ID_PASS","updateIdPass","ADD_ORG_UPDATE_DESCRIPTION_SUCCESS","description","updateDescriptionSuccess","ADD_ORG_UPDATE_DESCRIPTION_ERROR","updateDescriptionError","ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS","isPrivate","updateIsPrivateSuccess","ADD_ORG_EVALUATE_OK","addOrgEvaluateOk","ADD_ORG_EVALUATE_ERRORS","addOrgEvaluateErrors","EDIT_ORG_LOAD_START","editOrgView","EDIT_ORG_LOAD_SUCCESS","organization","editedOrganization","EDIT_ORG_LOAD_ERROR","ERROR","EDIT_ORG_SAVE_START","editOrgSaveStart","EDIT_ORG_SAVE_SUCCESS","editOrgSaveSuccess","EDIT_ORG_SAVE_ERROR","editOrgSaveError","EDIT_ORG_UPDATE_NAME_SUCCESS","editOrgUpdateNameSuccess","EDIT_ORG_UPDATE_NAME_ERROR","editOrgUpdateNameError","EDIT_ORG_UPDATE_GRAVATAR_HASH_SUCCESS","editOrgUpdateGravatarHashSuccess","EDIT_ORG_UPDATE_GRAVATAR_HASH_ERROR","editOrgUpdateGravatarHashError","EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS","editOrgUpdateDescriptionSuccess","EDIT_ORG_UPDATE_DESCRIPTION_ERROR","editOrgUpdateDescriptionError","EDIT_ORG_EVALUATE_OK","editOrgEvaluateOk","EDIT_ORG_EVALUATE_ERRORS","editOrgEvaluateErrors","VIEW_ORG_LOAD_START","viewOrgView","types","VIEW_ORG_LOAD_SUCCESS","relation","groupRequests","groupInvitations","requestInbox","requestOutbox","VIEW_ORG_LOAD_ERROR","VIEW_ORG_UNLOAD","VIEW_ORG_REMOVE_NARRATIVE_SUCCESS","newNarratives","narratives","filter","narrative","workspaceId","removeNarrativeSuccess","VIEW_ORG_ACCESS_NARRATIVE_SUCCESS","accessNarrativeSuccess","BROWSE_ORGS_LOAD_SUCCESS","_action$defaultViewMo","defaultViewModel","rawOrganizations","organizations","searchTerms","sortBy","sortDirection","totalCount","filteredCount","selectedOrganizationId","searching","browseOrgsView","BROWSE_ORGS_SEARCH","_state$views$browseOr","searchOrgs","BROWSE_ORGS_SEARCH_START","searchOrgsStart","BROWSE_ORGS_SEARCH_SUCCESS","length","searchOrgsSuccess","BROWSE_ORGS_SEARCH_ERROR","searchOrgsError","BROWSE_ORGS_SORT_START","_state$views$browseOr2","auth","authorization","username","sortOrgsStart","BROWSE_ORGS_FILTER_START","filterOrgsStart","AUTH_CHECK_START","status","CHECKING","token","realname","roles","authCheckStart","AUTH_AUTHORIZED","AUTHORIZED","authAuthorized","AUTH_UNAUTHORIZED","UNAUTHORIZED","authUnauthorized","AUTH_CHECK_ERROR","authCheckError","APP_SUCCESS","app","READY","config","appSuccess","ADMIN_MANAGE_REQUESTS_LOAD_START","ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS","manageOrganizationRequestsView","requests","invitations","ADMIN_MANAGE_REQUESTS_LOAD_ERROR","ADMIN_MANAGE_REQUESTS_UNLOAD","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS","newRequests","map","request","getViewAccessSuccess","VIEW_MEMBERS_LOAD_START","viewMembersView","VIEW_MEMBERS_LOAD_SUCCESS","VIEW_MEMBERS_LOAD_ERROR","VIEW_MEMBERS_UNLOAD","VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","members","member","memberUsername","ADMIN","promoteToAdminSuccess","VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","MEMBER","demoteToMemberSuccess","GroupException","_AppException","apperror","Map","httpcode","httpstatus","appcode","callid","time","originalError","ServerException","_AppException2","_this2","GroupsClient","url","createClass","key","fetch","headers","Authorization","Accept","mode","then","response","json","result","exists","_this3","getTime","Promise","all","group","getGroupById","path","body","concat","join","Content-Type","method","JSON","stringify","statusText","get","text","_post","asyncToGenerator","regenerator_default","a","mark","_callee","errorText","wrap","_context","prev","next","sent","t0","abrupt","stop","_x","_x2","apply","arguments","_get","_callee2","_context2","_x3","newGroup","payload","private","custom","gravatarhash","put","groupUpdate","_getRequest","_callee3","requestId","_context3","_x4","groupId","params","query","URLSearchParams","includeClosed","append","DESCENDING","startAt","String","toString","complete","_grantResourceAccess","_callee4","resourceType","resourceId","_context4","post","_x5","_x6","_x7","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","groupRequestToOrgRequest","requestType","INVITATION","REQUEST","stringToRequestType","USER","WORKSPACE","APP","stringToResourceType","resourcetype","requestStatus","OPEN","organizationId","groupid","requester","user","resource","createdAt","createdate","expireAt","expiredate","modifiedAt","moddate","narrativeId","appId","UserRelationToOrganization","UserWorkspacePermission","RequestsModel","groupsClient","groupsApi","groupsServiceURL","cache","grequest","has","getRequest","set","_getOutboundRequests","grequests","getCreatedRequests","forEach","_getUserRequestForOrg","find","r","_getPendingRequestsForOrg","_getRequestInboxForOrg","_callee5","_context5","getTargetedRequests","_getRequestOutboxForOrg","_callee6","_context6","_getOrganizationInvitations","_callee7","_context7","_getOrganizationInvitationsForOrg","_callee8","_context8","getOrganizationInvitations","invitation","_getInboundRequests","_callee9","_context9","_getUserInvitationForOrg","_callee10","_context10","_getPendingOrganizationRequestsForOrg","_callee11","_context11","getGroupRequests","_x8","_getPendingOrganizationRequests","_callee12","groupIds","allRequests","_context12","reduce","_x9","_cancelRequest","_callee13","_context13","cancelRequest","_x10","_acceptRequest","_callee14","_context14","acceptRequest","_x11","_denyRequest","_callee15","_context15","denyRequest","_x12","_acceptJoinInvitation","_callee16","_context16","_x13","_rejectJoinInvitation","_callee17","_context17","_x14","_inviteUserToJoinOrg","_callee18","_context18","inviteUserToGroup","_x15","_x16","Validation","s","firstNonPrintable","search","nonPrintableRe","beforeStart","before","slice","after","match","test","determineRelation","org","owner","OWNER","MEMBER_REQUEST_PENDING","MEMBER_INVITATION_PENDING","groupToOrganization","currentUser","joinedAt","joined","admins","admin","resources","workspace","parseInt","rid","title","narrname","isPublic","public","permission","groupsPermission","VIEW","EDIT","groupPermissionToWorkspacePermission","perm","isMember","ismember","apps","applyOrgSearch","orgs","searchTermsRe","term","RegExp","every","termRe","applySort","direction","ASCENDING","sort","b","localeCompare","applyFilter","log","findIndex","OrganizationModel","_getOrg","_getOrgs","ids","getOrg","_getAllOrgs","groups","getGroups","getOrgs","_getOwnOrgs","getAllOrgs","_queryOrgs","filtered","searched","sorted","total","_ownOrgs","ownGroups","ownOrganizations","_grantViewAccess","req","grantReadAccessToRequestedResource","requestModel","_addOrg","newOrg","reject","createGroup","_orgExists","groupExists","_updateOrg","orgUpdate","updateGroup","validateOrgId","validateOrgName","validateOrgDescription","_removeNarrativeFromOrg","deleteResource","_grantNarrativeAccess","grantResourceAccess","_requestMembershipToGroup","requestMembership","_addOrRequestNarrativeToGroup","addOrRequestNarrative","_x17","memberToAdmin","adminToMember","removeMember","userPermissionToWorkspacePermission","userPermission","isOwner","INVITE_USER_LOAD_START","inviteUserView","INVITE_USER_LOAD_SUCCESS","EDITING","users","selectedUser","INVITE_USER_LOAD_ERROR","INVITE_USER_UNLOAD","INVITE_USER_SEARCH_USERS_SUCCESS","searchUsersSuccess","INVITE_USER_SELECT_USER_SUCCESS","selectUserSuccess","INVITE_USER_SEND_INVITATION_START","SENDING","sendInvitationStart","INVITE_USER_SEND_INVITATION_SUCCESS","_state$views$inviteUs","orgModel","newUsers","sendInvitationSuccess","INVITE_USER_SEND_INVITATION_ERROR","sendInvitationError","MANAGE_MEMBERSHIP_LOAD_START","manageMembershipView","MANAGE_MEMBERSHIP_LOAD_SUCCESS","MANAGE_MEMBERSHIP_LOAD_ERROR","MANAGE_MEMBERSHIP_UNLOAD","sendRequestStart","requestNarrativeView","REQUEST_ADD_NARRATIVE_LOAD_START","REQUEST_ADD_NARRATIVE_LOAD_SUCCESS","selectedNarrative","REQUEST_ADD_NARRATIVE_LOAD_ERROR","REQUEST_ADD_NARRATIVE_SEND_START","REQUEST_ADD_NARRATIVE_SEND_SUCCESS","newState","ASSOCIATED","REQUESTED","sendRequestSuccess","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS","selectNarrativeSuccess","REQUEST_ADD_NARRATIVE_UNLOAD","DASHBOARD_LOAD_START","dashboardView","DASHBOARD_LOAD_SUCCESS","notifications","pendingAdminRequests","pendingGroupRequests","DASHBOARD_LOAD_ERROR","DASHBOARD_UNLOAD","DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS","cancelOutboxRequest","DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS","acceptInboxRequest","DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS","rejectInboxRequest","ENTITY_USER_LOADER_SUCCESS","entities","byId","userLoaderSuccess","ENTITY_ORGANIZATION_LOADER_SUCCESS","orgsMap","organizationLoaderSuccess","ENTITY_NARRATIVE_LOAD_SUCCESS","loadNarrativeSuccess","ORGANIZATION_CENTRIC_VIEW_LOAD_START","organizationCentricView","ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS","pendingJoinRequest","pendingJoinInvitation","ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR","ORGANIZATION_CENTRIC_VIEW_UNLOAD","GLOBAL_ACCESS_NARRATIVE_SUCCESS","narrativesById","View","addOrgReducer","editOrgReducer","browseOrgsReducer","viewOrgReducer","authReducer","appReducer","manageOrganizatiopRequests","viewMembers","inviteUser","manageMembership","requestAddNarrative","dashboard","organizationCentric","global","Avatar","_React$Component","props","avatarOption","gravatarDefault","avatarUrl","getAvatarUrl","react","src","style","width","size","React","Owner","view","COMPACT","setState","v","NORMAL","reverseView","icon","className","components_entities_Avatar","avatarSize","href","target","onClick","onToggleView","bind","renderRole","Intl","DateTimeFormat","month","day","year","format","city","country","x","renderCompact","renderNormal","UserProfileClient","param","version","Math","random","makeEmptyPayload","_getUserProfile","profileCache","resolve","makePayload","usernames","profileToUser","profile","jobTitle","userdata","jobTitleOther","synced","UserModel","userProfileClient","userProfileServiceURL","_getUser","userProfile","getUserProfile","_getUsers","toFetch","userProfiles","push","getUserProfiles","_searchUsers","searchUsers","excludedUsers","AuthorizedGenericClient","_GenericClient","_callFunc2","func","processResponse","GenericClient","module","_processResponse","_error","_error2","_callFunc","ServiceWizardClient","_AuthorizedServiceCli","callFunc","theResult","_ServiceClient","AuthorizedServiceClient","ServiceClient","constructor","NarrativeAccess","moduleCache","Cache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cacheLifetime","isMonitoring","window","setTimeout","newCache","cacheRenewed","keys","item","isExpired","runMonitor","cacheItem","reserved","undefined","cached","delete","Bluebird","started","waiter","reserveAndFetch","fetcher","catch","err","elapsed","reserveItem","fetchPromise","setItem","finally","isCancelled","isReserved","reserveWaiter","NarrativeServiceClient","_DynamicServiceClient","_listNarratives","slicedToArray","DynamicServiceClient","timeout","rpcContext","moduleId","getModule","getItemWithWait","_this4","getCached","client","getServiceStatus","module_name","funcName","_this5","lookupModule","serviceStatus","iso8601ToDate","dateString","dateParts","exec","TypeError","offset","newDateString","workspaceInfoToObject","wsInfo","objectCount","globalReadPermission","lockStatus","metadata","objectInfoToObject","data","majorVersion","minorVersion","savedAt","savedBy","workspaceName","checksum","ref","NarrativeModel","_getOwnNarratives","narrativeServiceClient","requestClient","narrativesResult","pendingRequests","workspacesInOrg","serviceWizardURL","listNarratives","getPendingRequestsForOrg","nar","workspaceInfo","workspaceApi","ws","objectInfo","is_temporary","objectId","narrative_nice_name","_workspaceToNarrative","workspaceClient","_ref4$","_ref4$$","rawObjectInfoError","_ref4$2","_ref4$2$","rawWorkspaceInfo","rawWorkspaceInfoError","workspaceServiceURL","objects","wsid","objid","includeMetadata","ignoreErrors","_getNarrative","_ref6$","rawObjectInfo","_ref6$2","_access","access","infos","lastSavedAt","lastSavedBy","t1","userLoader","userId","dispatch","getState","_getState","_getState$auth$author","model","_user","ENTITY_USER_LOADER_START","userModel","services","UserProfile","getUser","ENTITY_USER_LOADER_ERROR","Loader","Owner_Owner","onLoad","connect","actions","OrgAvatar","renderDefault","height","md5","initial","organizationName","substr","toUpperCase","color","border","y","dy","textAnchor","dominantBaseline","fontSize","fill","fontFamily","renderGravatar","renderDefaultInitial","Organizations","OrgAvatar_OrgAvatar","count","singular","plural","pluralize","index","NavLink","to","renderOrgAvatar","OwnerContainer","renderOrg","es_alert","maxWidth","margin","overflowY","display","flexDirection","renderOrgs","Header","breadcrumbs","verticalAlign","marginLeft","marginRight","data-test","buildSeparator","buttons","OrganizationsBrowser","searchInput","searchButton","showInfo","onSearchOrgs","Modal","content","current","currentSearchInputValue","e","preventDefault","doSearch","onSortOrgs","onFilterOrgs","onSearchInputChange","onSubmit","placeholder","onChange","autoFocus","es_button","disabled","haveSearchInput","form","htmlType","renderSearchIcon","onClearSearch","fontWeight","fontStyle","renderSearchFeedback","shape","onShowInfo","src_components_Header","es_select","onSortByChange2","defaultValue","dropdownMatchSelectWidth","Option","onSortDirectionChange2","onFilterChange2","container","renderHeader","renderSearchBar","renderSearchFilter","renderOrganizations","load","BROWSE_ORGS_LOAD_START","_browseOrgsView$viewM","Groups","queryOrgs","sortOrgs","_getState2","_getState2$auth$autho","orgClient","_browseOrgsView$viewM2","filterOrgs","_getState3","_getState3$auth$autho","_browseOrgsView$viewM3","storeState","_storeState$views$bro","renderLoading","renderError","browseOrgs_container","onUnload","BROWSE_ORGS_UNLOAD","AddOrgEvaluateErrors","addOrgEvaluate","addOrg","ADD_ORG_SAVE_START","_state$auth$authoriza","exception","_state$views$addOrgVi","_Validation$validateO","validateOrgGravatarHash","_Validation$validateO2","orgModelFromState","_state$auth$authoriza2","updateName","_Validation$validateO3","_Validation$validateO4","validatedName","updateGravatarHash","_Validation$validateO5","_Validation$validateO6","validatedGravatarHash","Debouncer","delay","fun","canceled","timer","startWaiting","clearTimeout","activeDebouncer","updateId","_Validation$validateO7","_Validation$validateO8","validatedId","lastValidatedAt","now","_Validation$validateO9","_Validation$validateO10","orgExists","cancel","updateDescription","_model$validateOrgDes","_model$validateOrgDes2","validatedDescription","NewOrganization","cancelToBrowser","showError","gravatarEmail","origin","document","location","email","hashed","toLowerCase","onUpdateGravatarHash","isModified","confirm","onOk","onCancel","okText","cancelText","onSave","persist","onUpdateName","onUpdateDescription","onUpdateId","onUpdateIsPrivate","checked","input","onNameChange","es_checkbox","onIsPrivateChange","marginBottom","flex","onGravatarEmailSync","onGravatarHashChange","onIdChange","minHeight","maxHeight","onDescriptionChange","renderIsPrivate","dangerouslySetInnerHTML","__html","marked","_this$props","label","errorButton","orgName","toggleError","canSave","line","modal","visible","okType","Redirect","renderForm","renderPreview","renderLoadingHeader","updateIsPrivate","Component","newOrganization_container","UberModel","_getOrganizationForUser","getUserRequestForOrg","getUserInvitationForOrg","getPendingOrganizationRequestsForOrg","_getOrganizationsForUser","getOwnOrgs","getOutboundRequests","getInboundRequests","removeNarrativeError","VIEW_ORG_REMOVE_NARRATIVE_ERROR","accessNarrativeError","VIEW_ORG_ACCESS_NARRATIVE_ERROR","viewOrgJoinRequestError","VIEW_ORG_JOIN_REQUEST_ERROR","acceptJoinInvitationStart","VIEW_ORG_ACCEPT_JOIN_INVITATION_START","uberClient","_organization","_relation","orgRequests","orgInvitations","_requestInbox","_requestOutbox","uberModel","ServiceWizard","Workspace","getOrganizationForUser","getOrganizationInvitationsForOrg","getRequestInboxForOrg","getRequestOutboxForOrg","viewOrgJoinRequest","_state$auth$authoriza3","requestMembershipToGroup","VIEW_ORG_JOIN_REQUEST_SUCCESS","viewOrgCancelJoinRequest","_state$auth$authoriza4","newRequest","VIEW_ORG_JOIN_REQUEST_START","VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS","VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR","acceptJoinInvitation","_state$auth$authoriza5","VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS","VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR","rejectJoinInvitation","_state$auth$authoriza6","VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS","VIEW_ORG_REJECT_JOIN_INVITATION_ERROR","Member","components_entities_Member","NavigateTo","OrganizationHeader","navigateTo","getUserRelation","currentUsername","onJoinOrg","success","onCancelJoinRequest","onAcceptInvitation","onRejectInvitation","MANAGE_MEMBERSHIP","VIEW_MEMBERS","MANAGE_REQUESTS","EDIT_ORGANIZATION","INVITE_USER","VIEW_ORGANIZATION","tooltip","placement","mouseEnterDelay","textAlign","onJoinClick","spin","menu","es_menu","onMenuClick","Item","dropdown","overlay","trigger","theme","adminMenu","ownerMenu","renderOrgInfo","getRelationClass","renderRelation","organizationHeader_container","Level","OrganizationNarrative","requestAccess","onGetViewAccess","shareButton","permissionTooltip","buttonTooltip","onRequestAccess","cursor","renderPublicPermission","renderNarrativePermission","accessModal","drawer","closable","onClose","onCloseRequestAccess","renderNarrative","FeedsClient","textResult","_getNotifications","convertLevel","level","ALERT","WARNING","feedsClient","feedsApi","feedsServiceURL","getNotifications","feed","notification","actor","verb","object","source","seen","created","expires","external_key","context","expiresAt","externalKey","outbox","DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR","DASHBOARD_CANCEL_OUTBOX_REQUEST_START","niceElapsed","someDate","measure","measureAbs","unit","nowDate","round","elapsedAbs","abs","prefix","suffix","getFullYear","OrganizationCompact","renderAvatar","OrganizationCompact_OrganizationCompact","ENTITY_ORGANIZATION_LOADER_START","ENTITY_ORGANIZATION_LOADER_ERROR","Narrative","narrativeModel","renderUserPermission","Narrative_Narrative","narrativeClient","_narrative","ENTITY_NARRATIVE_LOAD_START","getNarrative","ENTITY_NARRATIVE_LOAD_ERROR","User","components_entities_User","Request","onAcceptInboxRequest","onRejectInboxRequest","NarrativeContainer","UserContainer","OrganizationCompactContainer","renderRequestRequester","renderRequestOptions","Group","marginTop","onAcceptRequest","onRejectRequest","renderRequestReceivedSubject","renderJoinRequest","renderWorkspaceRequest","renderUserInvitation","formatters","renderBody","DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR","DASHBOARD_ACCEPT_INBOX_REQUEST_START","getOrganizationsForUser","DASHBOARD_REJECT_INBOX_REQUEST_ERROR","DASHBOARD_REJECT_INBOX_REQUEST_START","InboxRequest","onCancelOutboxRequest","alert","onCancelRequest","OutboxRequest","ViewOrganization","REQUEST_ADD_NARRATIVE","onRemoveNarrative","renderEditRow","organizationHeader_loader","MemberContainer","card","headStyle","backgroundColor","inner","twoToneColor","renderGroupRequestsRow","renderGroupRequests","renderEditButton","renderJoinButton","memberCount","extras","onViewMembers","extra","renderMembers","inbox","InboxRequestContainer","OutboxRequestContainer","onNarrativeMenu","onRequestAddNarrative","narrativesTable","OrganizationNarrative_OrganizationNarrative","renderNarrativeMenu","narrativeCount","renderOrgHeader","renderNarratives","renderAdminTasks","renderInfo","renderInboxCard","renderOutboxCard","renderMembersCard","ownProps","_state$views$viewOrgV","onViewOrg","VIEW_ORG_REMOVE_NARRATIVE_START","removeNarrativeFromOrg","VIEW_ORG_ACCESS_NARRATIVE_START","grantNarrativeAccess","viewOrganization_container","editableOrg","editOrgSave","_state$views$editOrgV","update","updateOrg","editOrgEvaluate","editOrgUpdateName","editOrgUpdateGravatarHash","validateGravatarHash","editOrgUpdateDescription","_orgClient$validateOr","_orgClient$validateOr2","EditOrganization","cancelToViewer","onEditOrgSave","editedOrg","renderOrgName","onClickCancelToViewer","editOrganization_container","EDIT_ORG_UNLOAD","Auth","tokenRef","checkAuth","onRemoveAuthorization","onAddAuthorization","onLoginClick","onLogoutClick","buildAuthToolbar","children","buildAuthForm","hosted","buildAuthProd","buildAuthDev","endpoints","AuthClient","makePath","Cookies","getTokenInfo","getMe","account","desc","Listener","onSuccess","onError","WaitingListener","Message","channel","uuidv4","envelope","Channel","host","channelId","awaitingResponse","waitingListeners","listeners","lastId","sentCount","receivedCount","unwelcomeReceivedCount","unwelcomeReceivedCountThreshhold","unwelcomeReceiptWarning","unwelcomeReceiptWarningCount","currentListener","messageEvent","handler","ex","awaiting","listener","messageId","listen","postMessage","getMessage","sendMessage","sendRequest","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_iterator","entries","Symbol","iterator","done","return","startMonitor","listenOnce","received","receiveMessage","addEventListener","removeEventListener","IFrameSimulator","frameId","uuid","parentHost","IFrameIntegration","frameElement","hasAttribute","getAttribute","parse","decodeURIComponent","KBaseIntegration","onAppStart","iframeParams","getParamsFromIFrame","baseUrl","Feeds","fakeIframeParams","_requests","_invitations","ManageGroupRequests","onAcceptJoinRequest","onDenyJoinRequest","onCancelJoinInvitation","open","hoverable","narrativeAccess","renderRequestJoinRequest","renderRequestNarrativeRequest","renderRequestAppRequest","renderRequestJoinInvitation","_this6","showIcon","minWidth","renderRequest","_this7","es_Redirect","invitationCount","requestCount","renderRequests","renderInvitations","_request2","ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS","ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR","_getState4","_getState4$auth$autho","_request3","ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS","ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR","_getState5","_getState5$auth$autho","ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR","_request","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START","grantViewAccess","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR","manageOrganizationRequests_container","promoteToAdmin","VIEW_MEMBERS_PROMOTE_TO_ADMIN_START","VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR","demoteToMember","VIEW_MEMBERS_DEMOTE_TO_MEMBER_START","VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR","VIEW_MEMBERS_REMOVE_MEMBER_START","VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS","VIEW_MEMBERS_REMOVE_MEMBER_ERROR","MemberRow","over","onPromoteMemberToAdmin","onDemoteAdminToMember","onRemoveMember","renderPromoteButton","onMemberMenu","onAdminMenu","renderOwnerMenu","renderAdminMenu","renderMemberMenu","onMouseEnter","onMouseOver","onMouseLeave","onMouseOut","renderMemberOptions","ViewMembers","adminUsername","viewMembers_MemberRow","onViewMembersUnload","renderOrganizationHeader","renderMembersToolbar","renderAdminsToolbar","_state$views$viewMemb","ViewMembersLoader","onViewMembersLoad","viewMembers_container","selectUserError","INVITE_USER_SELECT_USER_ERROR","selectUser","selectedUsername","INVITE_USER_SELECT_USER_START","sendInvitation","_getState4$views$invi","inviteUserToJoinOrg","InviteUser","lastSearchAt","cancelToViewMembers","autocompleteMessage","onSendInvitation","doSearchUsers","searchDebounce","onSearchUsers","onSelectUser","onClickCancelToViewMembers","button","SENDABLE","src_components_User","renderSearchButton","renderUsers","renderSelectedUser","renderInvitationForm","renderFooter","userClient","adminUsers","invited","requested","_users","orgUsers","INVITE_USER_SEARCH_USERS_START","INVITE_USER_SEARCH_USERS_ERROR","InviteUserLoader","onInviteUserLoad","inviteUser_container","ManageMembership","doCancelToViewer","doShowInfo","manageMembership_container","RequestAddNarrative","BROWSER","VIEWER","doSelectNarrative","doSendRequest","classNames","onSearchSubmit","onSortByChange","onSortDirectionChange","renderFilterSortBar","buttonLabel","canSendRequest","renderNarrativeSelector","renderSelectedNarrative","renderSelectedNarrativeButton","selectNarrative","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START","_state$views$requestN","addOrRequestNarrativeToGroup","REQUEST_ADD_NARRATIVE_SEND_ERROR","requestAddNarrative_container","_narratives","getOwnNarratives","render","OrganizationBlock","renderMemberCount","requestsPending","UserLoader","renderPrivate","renderRelationInfo","renderAdminInfo","renderMemberCompact","Notifications","renderNotification","renderNotifications","values","db","Array","from","Dashboard","NEW_ORG","onNavigateToNewOrg","onNavigateToBrowser","Organization_OrganizationBlock","bodyStyle","overflow","renderPendingNotifications","renderPendingRequestsSent","renderPendingRequestsReceived","some","isAdmin","renderPendingAdminRequests","storeAdapter","renderOrganizationsCard","renderNotificationsCard","renderPendingRequestsReceivedCard","renderPendingRequestsSentCard","renderPendingAdminTasksCard","dashboard_container","requestModelClient","adminOrgIds","_pendingGroupRequests","getPendingOrganizationRequests","StateInstances","collections","byGroup","pending","library","add","faSpinner","faSearch","faGlobe","faUserLock","initialState","makeInitialState","store","createStore","theReducer","compose","applyMiddleware","thunk","App","react_default","createElement","es","containers_Auth","containers_KBaseIntegration","HashRouter","basename","Switch","Route","exact","component","DashboardView","viewOrganization_loader","editOrganization_loader","manageOrganizationRequests_loader","viewMembers_loader","inviteUser_loader","manageMembership_loader","requestAddNarrative_loader","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.42969c87.chunk.js","sourcesContent":["import * as userProfile from \"../data/apis/userProfile\"\nimport * as groups from \"../data/apis/groups\"\nimport * as orgModel from '../data/models/organization/model'\nimport * as userModel from \"../data/models/user\"\nimport * as requestModel from '../data/models/requests'\nimport * as narrativeModel from '../data/models/narrative'\nimport * as uberModel from '../data/models/uber'\nimport * as feedsModel from '../data/models/feeds'\n\n/* Types from the organization service (approximately) */\n\n/*\n    Organization\n*/\n\n\n\nexport enum UIErrorType {\n    NONE = 0,\n    INFO,\n    WARNING,\n    ERROR\n}\n\nexport interface UIError {\n    type: UIErrorType,\n    message?: string\n}\n\nexport interface EditableOrganization {\n    id: {\n        value: string\n        editState: EditState\n        validationState: ValidationState\n        validatedAt: Date | null\n        error: UIError\n    }\n    name: {\n        value: string\n        editState: EditState\n        validationState: ValidationState\n        validatedAt: Date | null\n        error: UIError\n    }\n    gravatarHash: {\n        value: string | null\n        editState: EditState\n        validationState: ValidationState\n        validatedAt: Date | null\n        error: UIError\n    }\n    description: {\n        value: string\n        editState: EditState\n        validationState: ValidationState\n        validatedAt: Date | null\n        error: UIError\n    }\n    isPrivate: {\n        value: boolean\n        editState: EditState\n        validationState: ValidationState\n        validatedAt: Date | null\n        error: UIError\n    }\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    user: User,\n    type: MemberType\n}\n\n\n\n// export interface User extends UserBase {\n\n// }\n\n// export interface Owner extends UserBase {\n\n// }\n\n// export interface Member extends UserBase {\n\n// }\n\n// export interface Admin extends UserBase {\n\n// }\n\n// export enum UserRelationToOrganization {\n//     NONE = 0,\n//     VIEW,\n//     MEMBER_REQUEST_PENDING,\n//     MEMBER_INVITATION_PENDING,\n//     MEMBER,\n//     ADMIN,\n//     OWNER\n// }\n\n// export interface UserOrgRelation {\n//     type: UserRelationToOrganization\n// }\n\n// export interface NoRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.NONE\n// }\n\n// export interface ViewRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.VIEW\n// }\n\n// export interface MembershipRequestPendingRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n//     requestId: string\n// }\n\n// export interface MembershipInvitationPendingRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n//     requestId: string\n// }\n\n// export interface MemberRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER\n// }\n\n// export interface AdminRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.ADMIN\n// }\n\n// export interface OwnerRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.OWNER\n// }\n\nexport interface BriefOrganization {\n    id: string\n    name: string\n    gravatarHash: string | null\n    owner: {\n        username: string\n        realname: string\n    },\n    relation: orgModel.UserRelationToOrganization,\n    createdAt: Date\n    modifiedAt: Date\n}\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport type Username = string\n\n\n// export type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\nexport interface App {\n    id: string,\n    module: string,\n    func: string,\n    version: string,\n    title: string,\n    category: string\n}\n\nexport interface AppResource {\n    id: string\n}\n\n// REVIVE in a different form? Or not? This is the old Organization\n// export interface Organization {\n//     id: string\n//     name: string\n//     gravatarHash: string | null\n//     description: string\n//     owner: Member\n//     relation: UserOrgRelation\n//     createdAt: Date\n//     modifiedAt: Date,\n//     members: Array<Member>,\n//     // admins: Array<Admin>,\n//     adminRequests: Array<requestModel.Request>,\n//     narratives: Array<NarrativeResource>,\n//     apps: Array<AppResource>\n// }\n\nexport interface EditedOrganization {\n    id: {\n        value: string,\n        error?: UIError\n    }\n    name: {\n        value: string,\n        error?: UIError\n    }\n    description: {\n        value: string,\n        error?: UIError\n    }\n}\n\n/*\n    Collection of organizations\n*/\n\n/* REDUX */\n\nexport enum AuthState {\n    NONE = 0,\n    CHECKING,\n    AUTHORIZED,\n    UNAUTHORIZED,\n    ERROR\n}\n\nexport interface UserAuthorization {\n    token: string,\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\n\nexport interface Authorization {\n    status: AuthState,\n    message: string,\n    authorization: UserAuthorization\n}\n\nexport enum EditOrgState {\n    NONE = 0,\n    FETCHING,\n    READY,\n    EDITING_CAN_SAVE,\n    EDITING_ERRORS,\n    SAVING,\n    SAVED,\n    ERROR\n}\n\nexport enum SyncState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    DIRTY = 'DIRTY',\n    CLEAN = 'CLEAN'\n}\n\nexport enum EditState {\n    NONE = 'NONE',\n    UNEDITED = 'UNEDITED',\n    EDITED = 'EDITED'\n}\n\n// TODO: or CLEAN to replace new and saved\nexport enum SaveState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    READY = 'READY',\n    SAVING = 'SAVING',\n    SAVED = 'SAVED',\n    SAVE_ERROR = 'SAVE_ERROR'\n}\n\nexport enum ValidationState {\n    NONE = 'NONE',\n    VALID = 'VALID',\n    INVALID = 'INVALID',\n    DIRTY = 'DIRTY'\n}\n\nexport enum FieldState {\n    NONE = 0,\n    UNEDITED_OK,\n    UNEDITED_ERROR,\n    EDITED_OK,\n    EDITED_ERROR,\n    EDITED_WARNING\n}\n\nexport enum ViewOrgState {\n    NONE = 0,\n    INITIAL,\n    FETCHING,\n    READY,\n    ERROR\n}\n\nexport enum AppState {\n    NONE = 0,\n    LOADING,\n    READY,\n    ERROR\n}\n\nexport enum SortDirection {\n    ASCENDING = 'asc',\n    DESCENDING = 'desc'\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface ManageOrganizationRequestsViewModel {\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface ManageOrganizationRequestsView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageOrganizationRequestsViewModel | null\n}\n\nexport interface ViewMembersViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface ViewMembersView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: ViewMembersViewModel | null\n}\n\nexport enum BrowseOrgsState {\n    NONE = 0,\n    SEARCHING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface BrowseOrgsViewModel {\n    rawOrganizations: Array<orgModel.Organization>\n    organizations: Array<orgModel.Organization>\n    totalCount: number\n    filteredCount: number\n    sortBy: string\n    sortDirection: SortDirection\n    filter: string\n    searchTerms: Array<string>\n    selectedOrganizationId: string | null,\n    // TODO: let's make a new interface for running operations...\n    searching: boolean\n    error: AppError | null\n}\n\nexport interface BrowseOrgsView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: BrowseOrgsViewModel | null\n}\n\nexport enum InviteUserViewState {\n    NONE = 0,\n    EDITING,\n    SENDABLE,\n    SENDING,\n    SUCCESS,\n    ERROR\n}\n\n// user info we get out of user profile search\n\n\n// a user who may or may not be in an org, with org relation info\n// todo: fetch more profile info.\nexport interface OrganizationUser {\n    username: string\n    realname: string\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface InviteUserViewModel {\n    organization: orgModel.Organization\n    users: Array<OrganizationUser> | null\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState\n}\n\nexport interface InviteUserView {\n    loadingState: ComponentLoadingState\n    viewModel: InviteUserViewModel | null\n    error: AppError | null\n    // viewState: AppError | InviteUserValue | null\n}\n\nexport interface ManageMembershipViewModel {\n    organization: orgModel.Organization\n}\n\nexport interface ManageMembershipView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageMembershipViewModel | null\n}\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport interface Narrative {\n    workspaceId: number,\n    objectId: number,\n    title: string,\n    status: NarrativeState,\n    // inOrganization: boolean,\n    // createdAt: Date,\n    modifiedAt: Date\n}\n\n// export enum UserWorkspacePermission {\n//     NONE = 0,\n//     READ,\n//     WRITE,\n//     ADMIN,\n//     OWN\n// }\n\n\nexport enum ProcessingState {\n    NONE = 0,\n    PROCESSING,\n    SUCCESS,\n    ERROR\n}\n\n\nexport enum RequestNarrativeState {\n    NONE = 0,\n    LOADING,\n    ERROR,\n    LOADED,\n    SENDING,\n    SENT\n}\n\n\nexport interface RequestNarrativeViewModel {\n    organization: orgModel.Organization\n    narratives: Array<Narrative>\n    selectedNarrative: Narrative | null\n    relation: orgModel.Relation\n    error: AppError | null\n    saveState: SaveState\n}\n\nexport interface RequestNarrativeView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: RequestNarrativeViewModel | null\n}\n\nexport interface AddOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    error: AppError | null\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n}\n\nexport interface AddOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: AddOrgViewModel | null\n}\n\nexport interface Notification {\n\n}\n\nexport interface DashboardViewModel {\n    organizations: Array<uberModel.UberOrganization>\n    // users: Map<userModel.Username, userModel.User>\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    pendingAdminRequests: Array<requestModel.Request>\n    notifications: Array<Notification>\n}\n\nexport interface DashboardView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: DashboardViewModel | null\n}\n\nexport interface UserEntity {\n    userId: string\n    profile: userProfile.UserProfile\n}\n\nexport interface OrganizationEntity {\n    groupId: string\n    group: groups.Group\n}\n\nexport interface RequestEntity {\n    requestId: string\n    request: groups.Request\n}\n\nexport interface OrganizationCentricView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: OrganizationCentricViewModel | null\n}\nexport interface OrganizationCentricViewModel {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation\n}\n\nexport interface ViewOrgViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n}\n\nexport interface ViewOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ViewOrgViewModel | null\n}\n\nexport interface EditOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    saveError: AppError | null\n}\n\nexport interface EditOrgView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: EditOrgViewModel | null\n}\n\nexport interface StoreState {\n    // new!!\n    entities: {\n        users: {\n            byId: Map<userModel.Username, userModel.User>\n            all: Array<string>\n        }\n        orgs: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization>\n            all: Array<string>\n        }\n        requests: {\n            byId: Map<requestModel.RequestID, requestModel.Request>\n            all: Array<string>\n        }\n        narratives: {\n            byId: Map<narrativeModel.WorkspaceID, narrativeModel.Narrative>\n        }\n        // notifications: {\n        //     byId: <Map<\n        // }\n    }\n\n    db: {\n        notifications: {\n            byId: Map<feedsModel.NotificationID, feedsModel.Notification>\n            collections: {\n                byGroup: Map<orgModel.OrganizationID, Array<feedsModel.NotificationID>>\n            }\n        }\n    }\n\n\n\n    auth: Authorization\n    error: AppError | null\n\n    app: {\n        status: AppState\n        config: AppConfig\n        error?: AppError\n    }\n\n    views: {\n        browseOrgsView: BrowseOrgsView\n        addOrgView: AddOrgView\n        viewOrgView: ViewOrgView\n        editOrgView: EditOrgView\n        manageOrganizationRequestsView: ManageOrganizationRequestsView\n        viewMembersView: ViewMembersView\n        inviteUserView: InviteUserView\n        manageMembershipView: ManageMembershipView\n        requestNarrativeView: RequestNarrativeView\n        dashboardView: DashboardView\n        organizationCentricView: OrganizationCentricView\n    }\n    updateOrg: {\n        pending: boolean\n    }\n}\n\n/* COMPONENT PROPS */\n\nexport interface AppError {\n    code: string\n    message: string\n    trace?: Array<string>\n    errors?: Array<AppError>\n    exception?: AppException\n}\n\nexport class AppException extends Error {\n    code: string\n    message: string\n    detail?: string\n    trace?: Array<string>\n    errors?: Array<AppException>\n    info?: Map<string, any>\n    constructor({ code, message, detail, info }: { code: string, message: string, detail?: string, info?: Map<string, any> }) {\n        super(message)\n        this.name = 'AppException'\n        this.code = code\n        this.message = message\n        this.detail = detail\n        this.info = info\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppException)\n        }\n\n        if (this.stack) {\n            if (this.stack.indexOf('\\n') >= 0) {\n                this.trace = this.stack.split('\\n')\n            } else {\n                this.trace = [this.stack]\n            }\n        }\n    }\n}\n\nexport interface AppConfig {\n    baseUrl: string\n    services: {\n        Groups: {\n            url: string\n        }\n        UserProfile: {\n            url: string\n        }\n        Workspace: {\n            url: string\n        }\n        ServiceWizard: {\n            url: string\n        }\n        Feeds: {\n            url: string\n        }\n    }\n}\n\nexport interface AuthProps {\n    authorization: Authorization,\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n    hosted: boolean,\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\n","export enum ActionFlag {\n    APP = 1,\n    APP_START,\n    APP_SUCCESS,\n    // APP_SUCCESS_IFRAME,\n    // APP_SUCCESS_SOLO,\n    APP_ERROR,\n\n    BROWSE_ORGS_LOAD,\n    BROWSE_ORGS_LOAD_START,\n    BROWSE_ORGS_LOAD_SUCCESS,\n    BROWSE_ORGS_LOAD_ERROR,\n    BROWSE_ORGS_UNLOAD,\n\n    BROWSE_ORGS_SORT,\n    BROWSE_ORGS_SORT_START,\n    BROWSE_ORGS_SORT_SUCCESS,\n    BROWSE_ORGS_SORT_ERROR,\n\n    BROWSE_ORGS_FILTER,\n    BROWSE_ORGS_FILTER_START,\n    BROWSE_ORGS_FILTER_SUCCESS,\n    BROWSE_ORGS_FILTER_ERROR,\n\n    BROWSE_ORGS_SEARCH,\n    BROWSE_ORGS_SEARCH_START,\n    BROWSE_ORGS_SEARCH_SUCCESS,\n    BROWSE_ORGS_SEARCH_ERROR,\n\n    UPDATE_ORG,\n    UPDATE_ORG_START,\n    UPDATE_ORG_SUCCESS,\n    UPDATE_ORG_ERROR,\n\n    // viewing org\n    VIEW_ORG_LOAD,\n    VIEW_ORG_LOAD_START,\n    VIEW_ORG_LOAD_SUCCESS,\n    VIEW_ORG_LOAD_ERROR,\n    VIEW_ORG_UNLOAD,\n\n    // Joining and Such\n    VIEW_ORG_JOIN_REQUEST,\n    VIEW_ORG_JOIN_REQUEST_START,\n    VIEW_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_CANCEL_JOIN_REQUEST,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_START,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_ACCEPT_JOIN_INVITATION,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_START,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n\n\n    VIEW_ORG_REJECT_JOIN_INVITATION,\n    VIEW_ORG_REJECT_JOIN_INVITATION_START,\n    VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_REMOVE_NARRATIVE,\n    VIEW_ORG_REMOVE_NARRATIVE_START,\n    VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n\n    VIEW_ORG_ACCESS_NARRATIVE,\n    VIEW_ORG_ACCESS_NARRATIVE_START,\n    VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n\n    // add org fields\n\n    ADD_ORG_LOAD,\n    ADD_ORG_LOAD_START,\n    ADD_ORG_LOAD_SUCCESS,\n    ADD_ORG_LOAD_ERROR,\n    ADD_ORG_UNLOAD,\n\n    ADD_ORG_UPDATE_NAME,\n    ADD_ORG_UPDATE_NAME_SUCCESS,\n    ADD_ORG_UPDATE_NAME_ERROR,\n\n    ADD_ORG_UPDATE_GRAVATAR_HASH,\n    ADD_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n    ADD_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n\n    ADD_ORG_UPDATE_ID,\n    ADD_ORG_UPDATE_ID_SUCCESS,\n    ADD_ORG_UPDATE_ID_ERROR,\n    ADD_ORG_UPDATE_ID_PASS,\n    ADD_ORG_EVALUATE_ID,\n\n    ADD_ORG_UPDATE_DESCRIPTION,\n    ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    ADD_ORG_UPDATE_IS_PRIVATE,\n    ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    ADD_ORG_EVALUATE,\n    ADD_ORG_EVALUATE_OK,\n    ADD_ORG_EVALUATE_ERRORS,\n\n    ADD_ORG_SAVE,\n    ADD_ORG_SAVE_START,\n    ADD_ORG_SAVE_SUCCESS,\n    ADD_ORG_SAVE_ERROR,\n\n\n    // editing org\n    EDIT_ORG_LOAD,\n    EDIT_ORG_LOAD_START,\n    EDIT_ORG_LOAD_SUCCESS,\n    EDIT_ORG_LOAD_ERROR,\n    EDIT_ORG_UNLOAD,\n\n    EDIT_ORG_SAVE,\n    EDIT_ORG_SAVE_START,\n    EDIT_ORG_SAVE_SUCCESS,\n    EDIT_ORG_SAVE_ERROR,\n\n    // edit org, field level updates\n    EDIT_ORG_UPDATE_NAME,\n    EDIT_ORG_UPDATE_NAME_SUCCESS,\n    EDIT_ORG_UPDATE_NAME_ERROR,\n\n    EDIT_ORG_UPDATE_GRAVATAR_HASH,\n    EDIT_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n    EDIT_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n\n    EDIT_ORG_UPDATE_DESCRIPTION,\n    EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    EDIT_ORG_UPDATE_IS_PRIVATE,\n    EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    EDIT_ORG_EVALUATE,\n    EDIT_ORG_EVALUATE_OK,\n    EDIT_ORG_EVALUATE_ERRORS,\n\n    // Auth\n    AUTH_CHECK,\n    AUTH_CHECK_START,\n    AUTH_CHECK_ERROR,\n    AUTH_AUTHORIZED,\n    AUTH_UNAUTHORIZED,\n    AUTH_REMOVE_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_LOAD,\n    ADMIN_MANAGE_REQUESTS_LOAD_START,\n    ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    ADMIN_MANAGE_REQUESTS_UNLOAD,\n\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n\n    // MEMBERS\n    VIEW_MEMBERS_LOAD,\n    VIEW_MEMBERS_LOAD_START,\n    VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_MEMBERS_UNLOAD,\n\n    VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // INVITE USER\n    INVITE_USER_LOAD,\n    INVITE_USER_LOAD_START,\n    INVITE_USER_LOAD_SUCCESS,\n    INVITE_USER_LOAD_ERROR,\n    INVITE_USER_UNLOAD,\n\n    INVITE_USER_SEARCH_USERS,\n    INVITE_USER_SEARCH_USERS_START,\n    INVITE_USER_SEARCH_USERS_SUCCESS,\n    INVITE_USER_SEARCH_USERS_ERROR,\n\n    INVITE_USER_SELECT_USER,\n    INVITE_USER_SELECT_USER_START,\n    INVITE_USER_SELECT_USER_SUCCESS,\n    INVITE_USER_SELECT_USER_ERROR,\n\n    INVITE_USER_SEND_INVITATION,\n    INVITE_USER_SEND_INVITATION_START,\n    INVITE_USER_SEND_INVITATION_SUCCESS,\n    INVITE_USER_SEND_INVITATION_ERROR,\n\n    // Manage Membership\n    MANAGE_MEMBERSHIP_LOAD,\n    MANAGE_MEMBERSHIP_LOAD_START,\n    MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    MANAGE_MEMBERSHIP_LOAD_ERROR,\n    MANAGE_MEMBERSHIP_UNLOAD,\n\n    // Narrative add requests\n    REQUEST_ADD_NARRATIVE_LOAD,\n    REQUEST_ADD_NARRATIVE_LOAD_START,\n    REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n    REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n    REQUEST_ADD_NARRATIVE_UNLOAD,\n\n    REQUEST_ADD_NARRATIVE_SEND,\n    REQUEST_ADD_NARRATIVE_SEND_START,\n    REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SEND_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n\n    DASHBOARD_LOAD,\n    DASHBOARD_LOAD_START,\n    DASHBOARD_LOAD_SUCCESS,\n    DASHBOARD_LOAD_ERROR,\n    DASHBOARD_UNLOAD,\n\n    DASHBOARD_CANCEL_OUTBOX_REQUEST,\n    DASHBOARD_CANCEL_OUTBOX_REQUEST_START,\n    DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS,\n    DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR,\n\n    DASHBOARD_ACCEPT_INBOX_REQUEST,\n    DASHBOARD_ACCEPT_INBOX_REQUEST_START,\n    DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS,\n    DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR,\n\n    DASHBOARD_REJECT_INBOX_REQUEST,\n    DASHBOARD_REJECT_INBOX_REQUEST_START,\n    DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS,\n    DASHBOARD_REJECT_INBOX_REQUEST_ERROR,\n\n    // VIEWS\n\n    ORGANIZATION_CENTRIC_VIEW_LOAD,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_START,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    ORGANIZATION_CENTRIC_VIEW_UNLOAD,\n\n    // ENTITIES\n\n    ENTITY_USER_LOADER,\n    ENTITY_USER_LOADER_START,\n    ENTITY_USER_LOADER_SUCCESS,\n    ENTITY_USER_LOADER_ERROR,\n\n    ENTITY_ORGANIZATION_LOADER,\n    ENTITY_ORGANIZATION_LOADER_START,\n    ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    ENTITY_ORGANIZATION_LOADER_ERROR,\n\n    ENTITY_NARRATIVE_LOAD,\n    ENTITY_NARRATIVE_LOAD_START,\n    ENTITY_NARRATIVE_LOAD_SUCCESS,\n    ENTITY_NARRATIVE_LOAD_ERROR,\n\n    // GLOBAL ACTIONS\n    GLOBAL_ACCESS_NARRATIVE,\n    GLOBAL_ACCESS_NARRATIVE_START,\n    GLOBAL_ACCESS_NARRATIVE_SUCCESS,\n    GLOBAL_ACCESS_NARRATIVE_ERROR\n}\n","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, UIErrorType, FieldState, ValidationState, ComponentLoadingState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, Unload,\n    SaveError, SaveStart, SaveSuccess, AddOrgEvaluateOK, AddOrgEvaluateErrors,\n    LoadSuccess, UpdateNameSuccess, UpdateNameError, UpdateGravatarHashSuccess,\n    UpdateGravatarHashError, UpdateIdSuccess, UpdateIdError, UpdateDescriptionSuccess,\n    UpdateDescriptionError,\n    LoadError,\n    UpdateIdPass,\n    UpdateIsPrivateSuccess\n} from '../actions/addOrg'\n\n// ADD ORG\n\nexport function saveStart(state: StoreState, action: SaveStart): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveStart without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: SaveSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function saveError(state: StoreState, action: SaveError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateOk(state: StoreState, action: AddOrgEvaluateOK): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: ValidationState.VALID\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateErrors(state: StoreState, action: AddOrgEvaluateErrors): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: ValidationState.INVALID\n                }\n            }\n        }\n    }\n}\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: ValidationState.NONE,\n                    saveState: SaveState.NEW,\n                    error: null,\n                    newOrganization: action.newOrganization\n                }\n            }\n        }\n    }\n}\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// Name\nexport function updateNameSuccess(state: StoreState, action: UpdateNameSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            value: action.name,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            // status: FieldState.EDITED_OK,\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateNameError(state: StoreState, action: UpdateNameError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            value: action.name,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Gravatar hash\nexport function updateGravatarHashSuccess(state: StoreState, action: UpdateGravatarHashSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateGravatarHashSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        gravatarHash: {\n                            value: action.gravatarHash,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateGravatarHashError(state: StoreState, action: UpdateGravatarHashError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateGravatarHashError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        gravatarHash: {\n                            value: action.gravatarHash,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\nexport function updateIdSuccess(state: StoreState, action: UpdateIdSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            value: action.id,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdError(state: StoreState, action: UpdateIdError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            value: action.id,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdPass(state: StoreState, action: UpdateIdPass): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            editState: EditState.EDITED\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: UpdateDescriptionSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            value: action.description,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionError(state: StoreState, action: UpdateDescriptionError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            value: action.description,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        isPrivate: {\n                            value: action.isPrivate,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.ADD_ORG_SAVE:\n            return saveStart(state, action as SaveStart)\n        case ActionFlag.ADD_ORG_SAVE_SUCCESS:\n            return saveSuccess(state, action as SaveSuccess)\n        case ActionFlag.ADD_ORG_SAVE_ERROR:\n            return saveError(state, action as SaveError)\n\n        case ActionFlag.ADD_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.ADD_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.ADD_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.ADD_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS:\n            return updateNameSuccess(state, action as UpdateNameSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_NAME_ERROR:\n            return updateNameError(state, action as UpdateNameError)\n\n        case ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_SUCCESS:\n            return updateGravatarHashSuccess(state, action as UpdateGravatarHashSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_ERROR:\n            return updateGravatarHashError(state, action as UpdateGravatarHashError)\n\n        case ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS:\n            return updateIdSuccess(state, action as UpdateIdSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_ID_ERROR:\n            return updateIdError(state, action as UpdateIdError)\n        case ActionFlag.ADD_ORG_UPDATE_ID_PASS:\n            return updateIdPass(state, action as UpdateIdPass)\n\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as UpdateDescriptionSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR:\n            return updateDescriptionError(state, action as UpdateDescriptionError)\n\n        case ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        case ActionFlag.ADD_ORG_EVALUATE_OK:\n            return addOrgEvaluateOk(state, action as AddOrgEvaluateOK)\n        case ActionFlag.ADD_ORG_EVALUATE_ERRORS:\n            return addOrgEvaluateErrors(state, action as AddOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, UIErrorType, ValidationState, ComponentLoadingState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, LoadSuccess, LoadError,\n    EditOrgEvaluateOK, EditOrgEvaluateErrors,\n    EditOrgSave, EditOrgSaveStart, EditOrgSaveError, EditOrgSaveSuccess,\n    EditOrgUpdateNameSuccess, EditOrgUpdateNameError,\n    // EditOrgUpdateIdSuccess, EditOrgUpdateIdError,\n    EditOrgUpdateDescriptionSuccess, EditOrgUpdateDescriptionError,\n    EditOrgUpdateGravatarHashError, EditOrgUpdateGravatarHashSuccess, UpdateIsPrivateSuccess\n} from '../actions/editOrg'\nimport { StateInstances } from '../state';\n\n\n\n// EDIT ORG\n\n// Edit session loading\n\nexport function loadStart(state: StoreState, action: LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: ValidationState.NONE,\n                    saveState: SaveState.NEW,\n                    // TODO: get rid of this...\n                    // organizationId: action.id,\n                    organization: action.organization,\n                    saveError: null,\n                    editedOrganization: action.editedOrganization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: LoadError) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\n// save\n\nexport function editOrgSaveStart(state: StoreState, action: EditOrgSaveStart): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveSuccess(state: StoreState, action: EditOrgSaveSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveError(state: StoreState, action: EditOrgSaveError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    saveError: action.error\n                }\n            }\n        }\n    }\n}\n\n// Evaluate edit session\n\nexport function editOrgEvaluateOk(state: StoreState, action: EditOrgEvaluateOK): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: ValidationState.VALID\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgEvaluateErrors(state: StoreState, action: EditOrgEvaluateErrors): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: ValidationState.INVALID\n                }\n            }\n        }\n    }\n}\n\n\n\n// Name\nexport function editOrgUpdateNameSuccess(state: StoreState, action: EditOrgUpdateNameSuccess) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            value: action.name,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateNameError(state: StoreState, action: EditOrgUpdateNameError) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            value: action.name,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Gravatar hash\nexport function editOrgUpdateGravatarHashSuccess(state: StoreState, action: EditOrgUpdateGravatarHashSuccess) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        gravatarHash: {\n                            value: action.gravatarHash,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateGravatarHashError(state: StoreState, action: EditOrgUpdateGravatarHashError) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        gravatarHash: {\n                            value: action.gravatarHash,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\n// export function editOrgUpdateIdSuccess(state: StoreState, action: EditOrgUpdateIdSuccess) {\n//     return {\n//         ...state, editOrg: {\n//             ...state.editOrg,\n//             editState: EditState.EDITED,\n//             editedOrganization: {\n//                 ...state.editOrg.editedOrganization!,\n//                 id: {\n//                     value: action.id,\n//                     status: FieldState.EDITED_OK,\n//                     error: {\n//                         type: UIErrorType.NONE\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// export function editOrgUpdateIdError(state: StoreState, action: EditOrgUpdateIdError) {\n//     return {\n//         ...state, editOrg: {\n//             ...state.editOrg,\n//             editState: EditState.EDITED,\n//             editedOrganization: {\n//                 ...state.editOrg.editedOrganization!,\n//                 id: {\n//                     value: action.id,\n//                     status: FieldState.EDITED_ERROR,\n//                     error: action.error\n//                 }\n//             }\n//         }\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(state: StoreState, action: EditOrgUpdateDescriptionSuccess) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            value: action.description,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateDescriptionError(state: StoreState, action: EditOrgUpdateDescriptionError) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            value: action.description,\n                            validationState: ValidationState.INVALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess) {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        isPrivate: {\n                            value: action.isPrivate,\n                            validationState: ValidationState.VALID,\n                            editState: EditState.EDITED,\n                            validatedAt: new Date(),\n                            error: {\n                                type: UIErrorType.NONE\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.EDIT_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.EDIT_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.EDIT_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.EDIT_ORG_SAVE_START:\n            return editOrgSaveStart(state, action as EditOrgSaveStart)\n        case ActionFlag.EDIT_ORG_SAVE_SUCCESS:\n            return editOrgSaveSuccess(state, action as EditOrgSaveSuccess)\n        case ActionFlag.EDIT_ORG_SAVE_ERROR:\n            return editOrgSaveError(state, action as EditOrgSaveError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS:\n            return editOrgUpdateNameSuccess(state, action as EditOrgUpdateNameSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR:\n            return editOrgUpdateNameError(state, action as EditOrgUpdateNameError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_SUCCESS:\n            return editOrgUpdateGravatarHashSuccess(state, action as EditOrgUpdateGravatarHashSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_ERROR:\n            return editOrgUpdateGravatarHashError(state, action as EditOrgUpdateGravatarHashError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS:\n        //     return editOrgUpdateIdSuccess(state, action as EditOrgUpdateIdSuccess)\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_ERROR:\n        //     return editOrgUpdateIdError(state, action as EditOrgUpdateIdError)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return editOrgUpdateDescriptionSuccess(state, action as EditOrgUpdateDescriptionSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR:\n            return editOrgUpdateDescriptionError(state, action as EditOrgUpdateDescriptionError)\n        case ActionFlag.EDIT_ORG_EVALUATE_OK:\n            return editOrgEvaluateOk(state, action as EditOrgEvaluateOK)\n        case ActionFlag.EDIT_ORG_EVALUATE_ERRORS:\n            return editOrgEvaluateErrors(state, action as EditOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewOrg'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function removeNarrativeSuccess(state: types.StoreState, action: actions.RemoveNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    const newNarratives = state.views.viewOrgView.viewModel.organization.narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrative.workspaceId)\n    })\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        narratives: newNarratives\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function accessNarrativeSuccess(state: types.StoreState, action: actions.AccessNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: action.organization\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS:\n            return removeNarrativeSuccess(state, action as actions.RemoveNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/browseOrgs'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function applyOrgSearch(orgs: Array<orgModel.Organization>, searchTerms: Array<string>) {\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTerms.every((term) => {\n            // todo : make more efficient!!!\n            return (new RegExp(term, 'i').test(org.name));\n        })\n    })\n\n    return {\n        organizations: filteredOrgs,\n        totalCount: orgs.length,\n        filteredCount: filteredOrgs.length\n    }\n}\n\n// TODO:\n// dispatch the start of the request\n// do the request\n// dispatch the success (will be same for all queries?)\n// dispatch the error\n// FOR NOW:\n// do it here...\nexport function searchOrgs(state: types.StoreState, action: actions.SearchOrgs): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { views: { browseOrgsView: { viewModel: { filter, sortBy, sortDirection } } } } = state\n\n    // const query: Query = {\n    //     searchTerms: action.searchTerms,\n    //     filter: filter,\n    //     sortBy: sortBy,\n    //     sortDirection: sortDirection,\n    //     username: state.auth.authorization.username\n    // }\n    // const result = queryOrgs(state.rawOrganizations, query)\n    // rawOrganizations: Array<Organization>\n    // organizations: Array<Organization>\n    // totalCount: number\n    // filteredCount: number\n    // sortBy: string\n    // sortDirection: SortDirection\n    // filter: string\n    // searchTerms: Array<string>\n    // selectedOrganizationId: string | null\n    return {\n        ...state,\n        // organizations: result.organizations, \n        // totalCount: result.total, \n        // filteredCount: result.organizations.length,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                error: null,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    selectedOrganizationId: null,\n                    searchTerms: action.searchTerms,\n                    searching: true\n                }\n            }\n        }\n    }\n}\n\nexport function searchOrgsStart(state: types.StoreState, action: actions.SearchOrgsStart): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    searching: true\n                }\n            }\n        }\n    }\n}\n\nexport function searchOrgsSuccess(state: types.StoreState, action: actions.SearchOrgsSuccess): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    organizations: action.organizations,\n                    totalCount: action.totalCount,\n                    filteredCount: action.organizations.length,\n                    searching: false\n                }\n            }\n        }\n    }\n}\n\n// TODO: hmm, uses the global error -- this was early in the development of this (a whole two weeks ago!)\n// and this should now go in the \"browseOrgs\" (or better named \"searchOrgs\") branch.\nexport function searchOrgsError(state: types.StoreState, action: actions.SearchOrgsError): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    searching: false,\n                    error: action.error\n                }\n            }\n        }\n    }\n\n    // if (state.browseOrgs.view) {\n    //     return {\n    //         ...state,\n    //         browseOrgs: {\n    //             ...state.browseOrgs,\n    //             error: action.error,\n    //             state: types.BrowseOrgsState.ERROR,\n    //             view: {\n    //                 ...state.browseOrgs.view,\n    //                 searching: false\n    //             }\n    //         }\n    //     }\n    // } else {\n    //     return {\n    //         ...state,\n    //         browseOrgs: {\n    //             ...state.browseOrgs,\n    //             error: action.error\n    //         }\n    //     }\n    // }\n}\n\n\nexport function sortOrgsStart(state: types.StoreState, action: actions.SortOrgsStart): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    const {\n        views: { browseOrgsView: { viewModel: { searchTerms, filter } } },\n        auth: { authorization: { username } }\n    } = state\n\n    // const query: Query = {\n    //     searchTerms: searchTerms,\n    //     filter: filter,\n    //     sortBy: action.sortBy,\n    //     sortDirection: action.sortDirection,\n    //     username: username\n    // }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    sortBy: action.sortBy,\n                    sortDirection: action.sortDirection,\n                    searching: true\n                }\n            }\n        }\n    }\n}\n\n\ninterface Query {\n    searchTerms: Array<string>,\n    username: string,\n    sortBy: string,\n    sortDirection: types.SortDirection,\n    filter: string\n}\n\ninterface QueryResults {\n    organizations: Array<orgModel.Organization>,\n    total: number\n}\n\nfunction filterOrgsStart(state: types.StoreState, action: actions.FilterOrgsStart): types.StoreState {\n    if (state.views.browseOrgsView === null || state.views.browseOrgsView.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { filter } = action\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                ...state.views.browseOrgsView,\n                viewModel: {\n                    ...state.views.browseOrgsView.viewModel,\n                    filter,\n                    searching: true\n                }\n            }\n        }\n    }\n}\n\nfunction loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    const { defaultViewModel: {\n        rawOrganizations, organizations, searchTerms, sortBy, sortDirection, filter,\n        totalCount, filteredCount, selectedOrganizationId, error, searching\n    } } = action\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    rawOrganizations, organizations, searchTerms, sortBy, sortDirection, filter,\n                    totalCount, filteredCount, selectedOrganizationId, error, searching\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.BROWSE_ORGS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH:\n            return searchOrgs(state, action as actions.SearchOrgs)\n        case ActionFlag.BROWSE_ORGS_SEARCH_START:\n            return searchOrgsStart(state, action as actions.SearchOrgsStart)\n        case ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS:\n            return searchOrgsSuccess(state, action as actions.SearchOrgsSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH_ERROR:\n            return searchOrgsError(state, action as actions.SearchOrgsError)\n        // case ActionFlag.SORT_ORGS_STAR:\n        //     return sortOrgs(state, action as actions.SortOrgs)\n        case ActionFlag.BROWSE_ORGS_SORT_START:\n            return sortOrgsStart(state, action as actions.SortOrgsStart)\n        case ActionFlag.BROWSE_ORGS_FILTER_START:\n            return filterOrgsStart(state, action as actions.FilterOrgsStart)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\nimport { StoreState, AuthState } from '../../types'\nimport { AuthCheckStart, AuthAuthorized, AuthUnauthorized, AuthCheckError } from '../actions/auth';\n\nexport function authCheckStart(state: StoreState, action: AuthCheckStart): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.CHECKING,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authCheckError(state: StoreState, action: AuthCheckError): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.ERROR,\n            message: action.error.message,\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authAuthorized(state: StoreState, action: AuthAuthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.AUTHORIZED,\n            message: '',\n            authorization: {\n                token: action.token,\n                username: action.username,\n                realname: action.realname,\n                roles: action.roles\n            }\n        }\n    }\n}\n\nexport function authUnauthorized(state: StoreState, action: AuthUnauthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.UNAUTHORIZED,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.AUTH_CHECK_START:\n            return authCheckStart(state, action as AuthCheckStart)\n        case ActionFlag.AUTH_AUTHORIZED:\n            return authAuthorized(state, action as AuthAuthorized)\n        case ActionFlag.AUTH_UNAUTHORIZED:\n            return authUnauthorized(state, action as AuthUnauthorized)\n        case ActionFlag.AUTH_CHECK_ERROR:\n            return authCheckError(state, action as AuthCheckError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { ActionFlag } from '../actions'\nimport { AppSuccess } from '../actions/app';\nimport { StoreState, AppState } from '../../types';\n\nexport function appSuccess(state: StoreState, action: AppSuccess): StoreState {\n    return {\n        ...state,\n        app: {\n            status: AppState.READY,\n            config: action.config\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.APP_SUCCESS:\n            return appSuccess(state, action as AppSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageOrganizationRequests'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(\n    state: StoreState,\n    action: actions.LoadStart): StoreState {\n    return state\n}\n\nexport function loadSuccess(\n    state: StoreState,\n    action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    requests: action.requests,\n                    invitations: action.invitations\n                },\n            }\n        }\n    }\n}\n\nexport function loadError(\n    state: StoreState,\n    action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function getViewAccessSuccess(state: StoreState, action: actions.GetViewAccessSuccess): StoreState {\n    // Note: we use the state object rather than peeling off the viewModel because\n    // TS can't trace the assertion (not falsy) of the variable back to the object \n    // property it was taken from.\n    if (!state.views.manageOrganizationRequestsView.viewModel) {\n        return state\n    }\n    const requests = state.views.manageOrganizationRequestsView.viewModel.requests\n    const newRequests = requests.map((request) => {\n        if (request.id = action.request.id) {\n            return action.request\n        }\n        return request\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                ...state.views.manageOrganizationRequestsView,\n                viewModel: {\n                    // TODO: below, \n                    ...state.views.manageOrganizationRequestsView.viewModel,\n                    requests: newRequests\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS:\n            return getViewAccessSuccess(state, action as actions.GetViewAccessSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.LOADING,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.NONE,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation\n                },\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.ERROR,\n                viewModel: null,\n                error: action.error\n            }\n        }\n    }\n}\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.ADMIN\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.MEMBER\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_MEMBERS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_MEMBERS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { AppError, AppException } from \"../../types\";\n\nexport interface GroupsServiceInfo {\n    servname: string;\n    version: string;\n    servertime: number;\n    gitcommithash: string\n}\n\nexport interface BriefGroup {\n    id: string;\n    name: string;\n    custom: {\n        gravatarhash?: string\n    }\n    owner: Member;\n    // createdAt: number;\n    // modifiedAt: number\n}\n\nexport type GroupList = Array<BriefGroup>\n\nexport type Username = string;\n\nexport interface Member {\n    name: Username,\n    joined: number,\n    // TODO: this needs to match the config of the groups service.\n    // ARGH: why do we need custom fields????????\n    custom: {}\n}\n\nexport interface WorkspaceInfo {\n    rid: string\n    name: string\n    narrname: string\n    public: boolean\n    perm: string\n}\n\nexport interface AppInfo {\n    rid: string\n}\n\nexport interface Group {\n    id: string\n    private: boolean\n    ismember: boolean\n    name: string\n    owner: Member\n    admins: Array<Member>\n    members: Array<Member>\n    createdate: number\n    moddate: number\n    resources: {\n        workspace: Array<WorkspaceInfo>,\n        catalogmethod: Array<AppInfo>\n    }\n    custom: {\n        gravatarhash?: string\n        description: string\n    }\n}\n\nexport interface NewGroup {\n    id: string\n    name: string\n    gravatarhash: string | null\n    description: string\n    isPrivate: boolean\n}\n\nexport interface GroupUpdate {\n    name: string\n    gravatarhash: string | null\n    description: string\n    private: boolean\n}\n\nexport interface Request {\n    id: string\n    groupid: string\n    requester: Username\n    type: string\n    status: string\n    resource: string\n    resourcetype: string\n    createdate: number\n    expiredate: number\n    moddate: number\n}\n\nexport interface RequestWithCompletion extends Request {\n    complete: false\n}\n\nexport interface Completion {\n    complete: true\n}\n\nexport interface ErrorInfo {\n    appcode: number\n    apperror: string\n    callid: string\n    httpcode: number\n    httpstatus: string\n    message: string\n    time: number\n}\n\nexport interface ErrorResult {\n    error: ErrorInfo\n}\n\n// Error types: (appcode)\n// 10000\tAuthentication failed\n// 10010\tNo authentication token\n// 10020\tInvalid token\n// 20000\tUnauthorized\n// 30000\tMissing input parameter\n// 30001\tIllegal input parameter\n// 30010\tIllegal user name\n// 40000\tGroup already exists\n// 40010\tRequest already exists\n// 40020\tUser already group member\n// 40030\tWorkspace already in group\n// 50000\tNo such group\n// 50010\tNo such request\n// 50020\tNo such user\n// 50030\tNo such workspace\n// 60000\tUnsupported operation\n\nexport interface GroupExists {\n    exists: boolean\n}\n\n// export interface GroupRequest {\n//     id: string,\n//     groupid: string,\n//     requester: Username,\n//     type: string,\n//     status: string,\n//     resource: string\n//     resourcetype: string\n//     createdate: number,\n//     expiredate: number,\n//     moddate: number\n// }\n\nexport enum SortDirection {\n    ASCENDING = 0,\n    DESCENDING\n}\n\nexport interface GetRequestsParams {\n    includeClosed?: boolean,\n    sortDirection?: SortDirection,\n    startAt?: Date\n}\n\nexport interface RequestMemebershipParams {\n    groupId: string\n}\n\nexport interface RequestNarrativeParams {\n    workspaceId: number\n    groupId: string\n}\n\nfunction promiseTry<T>(fun: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        try {\n            return resolve(fun())\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n}\n\nexport interface GroupError {\n    httpcode: number\n    httpstatus: string\n    appcode: number\n    apperror: string\n    message: string\n    callid: string\n    time: number\n}\n\nexport class Exception extends Error {\n\n}\n\nexport class GroupException extends AppException {\n    originalError: GroupError\n    constructor(error: GroupError) {\n        super({\n            code: 'group-exception',\n            message: error.apperror,\n            detail: error.message,\n            info: new Map<string, any>([\n                ['httpcode', error.httpcode],\n                ['httpstatus', error.httpstatus],\n                ['appcode', error.appcode],\n                ['apperror', error.apperror],\n                ['message', error.message],\n                ['callid', error.callid],\n                ['time', error.time]\n            ])\n        })\n        this.name = 'GroupException'\n        this.originalError = error\n    }\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport class GroupsClient {\n    token: string;\n    url: string;\n\n    constructor({ token, url }: { token: string, url: string }) {\n        this.token = token\n        this.url = url\n    }\n\n    getInfo(): Promise<GroupsServiceInfo> {\n        return fetch(this.url + '/', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((result) => {\n                return result as GroupsServiceInfo;\n            });\n    }\n\n    groupExists(id: string): Promise<GroupExists> {\n        return fetch(this.url + '/group/' + id + '/exists')\n            .then((response) => {\n                return response.json()\n            })\n            .then((exists) => {\n                return exists as GroupExists\n            })\n    }\n\n    // getGroups(): Promise<GroupList> {\n    //     return fetch(this.url + '/group', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json()\n    //         })\n    //         .then((result: GroupList) => {\n    //             return result.filter(({ type }) => type === 'Organization')\n    //         })\n    // }\n\n\n    getGroups(): Promise<Array<Group>> {\n        let start = new Date().getTime()\n        return fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    console.error('error fetching groups', response)\n                    throw new Error('Error fetching groups')\n                }\n                return response.json()\n            })\n            .then((result: GroupList) => {\n                return Promise.all(result.map((group) => (this.getGroupById(group.id))))\n            })\n            .then((result) => {\n                return result;\n            })\n    }\n\n    getGroupById(id: string): Promise<Group> {\n        return fetch(this.url + '/group/' + id, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status === 404) {\n                    return null\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Group\n            })\n    }\n\n    put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new GroupException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                } else {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    createGroup(newGroup: NewGroup): Promise<Group> {\n        // argh!! description should be mandatory, but now it is a custom \n        // field and it is not yet defined in the service.\n        // TODO: we need the groups service to have default custom fields.\n        // At that point, what IS the point of custom fields ... oh, I know that\n        // there are internal reasons for this due to re-using \"group\" for \n        // organization, project, etc., but that should not leak through the \n        // api.\n\n        // mandatory fields.\n        const payload: any = {\n            name: newGroup.name,\n            private: newGroup.isPrivate,\n            custom: {\n                gravatarhash: newGroup.gravatarhash\n            }\n        }\n\n        // optional fields\n        if (newGroup.description.length > 0) {\n            payload.custom.description = newGroup.description\n        }\n\n        return this.put<Group>(['group', newGroup.id], payload)\n    }\n\n    updateGroup(id: string, groupUpdate: GroupUpdate): Promise<void> {\n        const payload: any = {\n            name: groupUpdate.name,\n            custom: {\n                gravatarhash: groupUpdate.gravatarhash\n            },\n            private: groupUpdate.private\n        }\n        // TODO: remove this when we have descriptions restored to the\n        // groups service.\n        if (groupUpdate.description) {\n            payload.custom.description = groupUpdate.description\n        }\n        return fetch(this.url + '/group/' + id + '/update', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n\n            // TODO: build more intelligently\n            body: JSON.stringify(payload)\n        })\n            .then((response) => {\n                // response is an empty body.\n                if (response.status === 204) {\n                    return\n                }\n                throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n            })\n    }\n\n    async getRequest(requestId: string): Promise<Request> {\n        const path = ['request', 'id', requestId]\n        return await this.get<Request>(path)\n    }\n\n    getGroupRequests(groupId: string, params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n\n        return fetch(this.url + '/group/' + groupId + '/requests?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getTargetedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/targeted?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getCreatedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/created?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'appcliation/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    addOrRequestNarrative(params: RequestNarrativeParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            'workspace',\n            String(params.workspaceId)\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    async grantResourceAccess(groupId: string, resourceType: string, resourceId: string): Promise<null> {\n        const path = [\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId,\n            'getperm'\n        ]\n        return this.post<null>(path, null)\n    }\n\n    deleteResource(groupId: string, resourceType: string, resourceId: string): Promise<void> {\n        const url = [\n            this.url,\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    cancelRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/cancel', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    acceptRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/accept', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    grantReadAccessToRequestedResource({ requestId }: { requestId: string }): Promise<null> {\n        const path = ['request', 'id', requestId, 'getperm']\n        return this.post<null>(path, null)\n    }\n\n\n    denyRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/deny', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    memberToAdmin({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    adminToMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    removeMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    requestMembership(params: RequestMemebershipParams): Promise<Request> {\n        return fetch(this.url + '/group/' + params.groupId + '/requestmembership', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    inviteUserToGroup({ groupId, username }: { groupId: string, username: string }): Promise<Request> {\n        const url = [\n            this.url, 'group', groupId, 'user', username\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n}","import * as groupsApi from '../apis/groups'\nimport * as orgModel from './organization/model'\n\nexport type Username = string\n\nexport type RequestID = string\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport interface BaseRequest {\n    id: string\n    organizationId: string\n    requester: Username\n    type: RequestType\n    status: RequestStatus\n    resourceType: RequestResourceType\n    createdAt: Date\n    expireAt: Date\n    modifiedAt: Date\n}\n\nexport interface UserRequest extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.REQUEST\n    user: Username\n}\n\nexport interface UserInvitation extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.INVITATION\n    user: Username\n}\n\nexport interface WorkspaceRequest extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.REQUEST\n    narrativeId: string,\n}\n\nexport interface WorkspaceInvitation extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.INVITATION\n    narrativeId: string\n}\n\nexport interface AppRequest extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.REQUEST\n    appId: string\n}\n\nexport interface AppInvitation extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.INVITATION\n    appId: string\n}\n\nexport type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\n\nfunction stringToRequestType(type: string): RequestType {\n    switch (type) {\n        case 'Invite':\n            return RequestType.INVITATION\n        case 'Request':\n            return RequestType.REQUEST\n        default:\n            throw new Error('unknown request type: ' + type)\n    }\n}\n\nfunction stringToResourceType(type: string) {\n    switch (type) {\n        case 'user':\n            return RequestResourceType.USER\n        case 'workspace':\n            return RequestResourceType.WORKSPACE\n        case 'catalogmethod':\n            return RequestResourceType.APP\n        default:\n            throw new Error('unknown resource type: ' + type)\n    }\n}\n\nfunction stringToRequestStatus(status: string): RequestStatus {\n    return RequestStatus.OPEN\n}\n\nexport function groupRequestToOrgRequest(request: groupsApi.Request): Request {\n\n    const requestType = stringToRequestType(request.type)\n    const resourceType = stringToResourceType(request.resourcetype)\n    const requestStatus = stringToRequestStatus(request.status)\n\n    switch (resourceType) {\n        case RequestResourceType.USER:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserInvitation\n            }\n\n        case RequestResourceType.WORKSPACE:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceInvitation\n            }\n\n        case RequestResourceType.APP:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppInvitation\n            }\n        default:\n            throw new Error('resource type not handled yet: ' + request.resourcetype)\n    }\n}\n\ninterface RequestsModelParams {\n    groupsServiceURL: string\n    token: string\n    username: Username\n}\n\nexport class RequestsModel {\n\n    params: RequestsModelParams\n    groupsClient: groupsApi.GroupsClient\n    cache: Map<RequestID, Request>\n\n    constructor(params: RequestsModelParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map()\n    }\n\n    async getRequest(requestId: RequestID): Promise<Request> {\n        if (this.cache.has(requestId)) {\n            return this.cache.get(requestId)!\n        }\n\n        const grequest = await this.groupsClient.getRequest(requestId)\n        const request = groupRequestToOrgRequest(grequest)\n\n        this.cache.set(request.id, request)\n        return request\n    }\n\n    async getOutboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserRequestForOrg(organizationId: orgModel.OrganizationID): Promise<UserRequest | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return r.groupid === organizationId\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserRequest\n    }\n\n    async getPendingRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestOutboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n\n    async getOrganizationInvitations(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        }).filter((request) => {\n            return (request.type === RequestType.INVITATION)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getOrganizationInvitationsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const invitations = await this.getOrganizationInvitations()\n        return invitations.filter((invitation) => {\n            return (invitation.organizationId === organizationId)\n        })\n    }\n\n    async getInboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserInvitationForOrg(organizationId: orgModel.OrganizationID): Promise<UserInvitation | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return (r.groupid === organizationId)\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserInvitation\n    }\n\n    async getPendingOrganizationRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await groupsClient.getGroupRequests(organizationId, {\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        return groupRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        // const [groupRequests, adminRequests] = await Promise.all([\n        //     groupsClient.getGroupRequests(groupId, {\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     }),\n        //     groupsClient.getCreatedRequests({\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     })\n        // ])\n        // const groupAdminRequests = adminRequests.filter((request) => {\n        //     return (request.groupid === groupId)\n        // })\n\n        // return Promise.all(groupRequests.concat(groupAdminRequests).map((request) => {\n        //     return groupRequestToOrgRequest(request)\n        // }))\n    }\n\n    async getPendingOrganizationRequests(groupIds: Array<string>): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await Promise.all(groupIds.map((groupId) => {\n            return groupsClient.getGroupRequests(groupId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            })\n        }))\n\n        const allRequests = groupRequests.reduce((allRequests, requests) => {\n            return allRequests.concat(requests)\n        }, [])\n\n        return allRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n    }\n\n    async cancelRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.cancelRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async denyRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async rejectJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async inviteUserToJoinOrg(groupId: string, username: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.inviteUserToGroup({\n            groupId,\n            username\n        })\n            .then((request) => {\n                return groupRequestToOrgRequest(request)\n            })\n    }\n}","import * as groupsApi from '../../apis/groups'\nimport { SortDirection, EditableOrganization, UIErrorType, UIError } from '../../../types';\nimport * as requestModel from '../requests'\nimport * as userModel from '../user';\nimport Validation from './validation'\n\n// import Member from '../../../components/entities/Member';\n\n\nexport interface OrganizationUpdate {\n    name: string\n    gravatarHash: string | null\n    description: string\n    isPrivate: boolean\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    username: groupsApi.Username,\n    joinedAt: Date\n    type: MemberType\n}\n\nexport enum UserRelationToOrganization {\n    NONE = 0,\n    VIEW,\n    MEMBER_REQUEST_PENDING,\n    MEMBER_INVITATION_PENDING,\n    MEMBER,\n    ADMIN,\n    OWNER\n}\n\nexport interface UserOrgRelation {\n    type: UserRelationToOrganization\n}\n\nexport interface NoRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.NONE\n}\n\nexport interface ViewRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.VIEW\n}\n\nexport interface MembershipRequestPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n    requestId: string\n}\n\nexport interface MembershipInvitationPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n    requestId: string\n}\n\nexport interface MemberRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER\n}\n\nexport interface AdminRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.ADMIN\n}\n\nexport interface OwnerRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.OWNER\n}\n\nexport type Relation = NoRelation | ViewRelation | MembershipRequestPendingRelation | MembershipInvitationPendingRelation | MemberRelation | AdminRelation | OwnerRelation\n\nexport type username = string\n\nexport interface Member {\n    username: username\n    type: MemberType\n}\n\nexport enum UserWorkspacePermission {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport type WorkspaceID = number\n\nexport interface NarrativeInfo {\n    workspaceId: WorkspaceID,\n    title: string,\n    isPublic: boolean,\n    permission: UserWorkspacePermission\n}\n\nexport type AppID = string\n\nexport interface AppInfo {\n    appId: AppID\n}\n\nexport interface Organization {\n    id: string\n    name: string\n    isPrivate: boolean\n    isMember: boolean\n    gravatarHash: string | null\n    description: string\n    owner: Member\n    members: Array<Member>\n    // relation: UserOrgRelation\n    createdAt: Date\n    modifiedAt: Date,\n    narratives: Array<NarrativeInfo>,\n    apps: Array<AppInfo>\n}\n\nexport function determineRelation(\n    org: Organization,\n    username: userModel.Username,\n    request: requestModel.UserRequest | null,\n    invitation: requestModel.UserInvitation | null): Relation {\n    if (username === org.owner.username) {\n        return {\n            type: UserRelationToOrganization.OWNER\n        } as OwnerRelation\n    } else {\n        const member = org.members.find((member) => {\n            return (member.username === username)\n        })\n        if (member) {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    return {\n                        type: UserRelationToOrganization.MEMBER\n                    } as MemberRelation\n                case MemberType.ADMIN:\n                    return {\n                        type: UserRelationToOrganization.ADMIN\n                    } as AdminRelation\n                case MemberType.OWNER:\n                    return {\n                        type: UserRelationToOrganization.OWNER\n                    } as OwnerRelation\n                default:\n                    return {\n                        type: UserRelationToOrganization.NONE\n                    } as NoRelation\n            }\n        } else if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n}\n\nfunction groupPermissionToWorkspacePermission(groupsPermission: string): UserWorkspacePermission {\n    switch (groupsPermission) {\n        case 'None':\n            return UserWorkspacePermission.NONE\n        case 'Read':\n            return UserWorkspacePermission.VIEW\n        case 'Write':\n            return UserWorkspacePermission.EDIT\n        case 'Admin':\n            return UserWorkspacePermission.ADMIN\n        case 'Own':\n            return UserWorkspacePermission.OWNER\n        default:\n            throw new Error('Invalid groups user permission: ' + groupsPermission)\n    }\n}\n\nexport function groupToOrganization(group: groupsApi.Group, currentUser: username): Organization {\n\n    const owner = {\n        username: group.owner.name,\n        joinedAt: new Date(group.owner.joined),\n        type: MemberType.OWNER\n    }\n\n    // We join admins and members, since they are all members, just different privileges in the org\n    const members: Array<Member> = (<Array<Member>>[\n        // owner\n    ]).concat(group.admins.map((admin) => {\n        return {\n            username: admin.name,\n            joinedAt: new Date(admin.joined),\n            type: MemberType.ADMIN\n        }\n    })).concat(group.members.map((member) => {\n        return {\n            username: member.name,\n            joinedAt: new Date(member.joined),\n            type: MemberType.MEMBER\n        }\n    }))\n\n    const narratives: Array<NarrativeInfo> = group.resources.workspace.map((info) => {\n        return {\n            workspaceId: parseInt(info.rid, 10),\n            title: info.narrname,\n            isPublic: info.public,\n            permission: groupPermissionToWorkspacePermission(info.perm)\n        }\n    })\n    const apps: Array<AppInfo> = []\n\n    return {\n        id: group.id,\n        name: group.name,\n        isPrivate: group.private,\n        isMember: group.ismember,\n        gravatarHash: group.custom.gravatarhash || null,\n        description: group.custom.description,\n        owner: owner,\n        members: members,\n        modifiedAt: new Date(group.moddate),\n        createdAt: new Date(group.createdate),\n        narratives: narratives,\n        apps: []\n    }\n}\n\n// export function determineRelation(group: Group, username: userModel.Username) {\n//     let relation: UserOrgRelation\n//     // TODO: when we have access to members, admins, and group publication status, we can \n//     // flesh out all user relations.\n//     // const orgMembers: Array<username> = this.membersAndAdminsToMembers(members, admins, profileMap)\n\n//     if (username === group.owner) {\n//         relation = {\n//             type: UserRelationToOrganization.OWNER\n//         } as OwnerRelation\n//     } else if (group.admins.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.ADMIN\n//         } as AdminRelation\n//     } else if (group.members.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER\n//         } as MemberRelation\n//     } else if (pendingRequests.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n//             requestId: pendingRequests.get(group.id)!.id\n//         } as MembershipRequestPendingRelation\n//     } else if (pendingInvites.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n//             requestId: pendingInvites.get(group.id)!.id\n//         } as MembershipInvitationPendingRelation\n//     } else {\n//         relation = {\n//             type: UserRelationToOrganization.VIEW\n//         } as ViewRelation\n//     }\n// }\n\nexport type GroupID = string\nexport type OrganizationID = GroupID\n\n\nexport interface ConstructorParams {\n    groupsServiceURL: string\n    token: string\n    username: groupsApi.Username\n}\n\nexport interface QueryResults {\n    organizations: Array<Organization>\n    total: number\n}\n\nexport interface Query {\n    searchTerms: Array<string>\n    username: groupsApi.Username\n    sortBy: string\n    sortDirection: SortDirection\n    filter: string\n}\n\n\nexport interface NarrativeResource {\n    workspaceId: number\n    title: string\n    permission: UserWorkspacePermission\n    isPublic: boolean\n}\n\nexport function applyOrgSearch(orgs: Array<Organization>, searchTerms: Array<string>): Array<Organization> {\n    const searchTermsRe = searchTerms.map((term) => {\n        return new RegExp(term, 'i')\n    })\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTermsRe.every((termRe) => {\n            return termRe.test(org.name) ||\n                termRe.test(org.owner.username) ||\n                termRe.test(org.owner.username)\n        })\n    })\n\n    return filteredOrgs\n}\n\nfunction applySort(organizations: Array<Organization>, sortBy: string, sortDirection: SortDirection): Array<Organization> {\n    const direction = sortDirection === SortDirection.ASCENDING ? 1 : -1\n    switch (sortBy) {\n        case 'created':\n            return organizations.slice().sort((a, b) => {\n                return direction * (a.createdAt.getTime() - b.createdAt.getTime())\n            })\n        // case 'modifiedAt':\n        //     return organizations.slice().sort((a, b) => {\n        //         return direction * (a.modifiedAt.getTime() - b.modifiedAt.getTime())\n        //     })\n        case 'name':\n            return organizations.slice().sort((a, b) => {\n                return direction * a.name.localeCompare(b.name)\n            })\n        case 'owner':\n            return organizations.slice().sort((a, b) => {\n                return direction * a.owner.username.localeCompare(b.owner.username)\n            })\n        default:\n            console.warn('unimplemented sort field: ' + sortBy)\n            return organizations;\n    }\n}\n\n\n\nfunction applyFilter(organizations: Array<Organization>, filter: string, username: groupsApi.Username): Array<Organization> {\n    switch (filter) {\n        case 'all':\n            return organizations\n        case 'notMemberOf':\n            console.log('not member of?', organizations, username)\n            return organizations.filter((org) => {\n                // return !org.isMember\n                if (org.members.findIndex((member) => (member.username === username)) >= 0) {\n                    return false\n                }\n                if (org.owner.username === username) {\n                    return false\n                }\n                return true\n            })\n        case 'memberOf':\n            return organizations.filter((org) => {\n                // return org.isMember\n                if ((org.members.findIndex((member) => (member.username === username)) >= 0) ||\n                    (org.owner.username === username)) {\n                    return true\n                }\n                return false\n            })\n        case 'owned':\n            return organizations.filter((org) => (org.owner.username === username))\n        case 'notOwned':\n            return organizations.filter((org) => (org.owner.username !== username))\n        // TODO: re-enable when have relation again...\n        // case 'pending':\n        //     return organizations.filter((org) => (\n        //         org.relation.type === UserRelationToOrganization.MEMBER_INVITATION_PENDING ||\n        //         org.relation.type === UserRelationToOrganization.MEMBER_REQUEST_PENDING\n        //     ))\n        // case 'groupPending':\n        //     return organizations.filter((org) => (\n        //         (org.relation.type === UserRelationToOrganization.ADMIN ||\n        //             org.relation.type === UserRelationToOrganization.OWNER) &&\n        //         (org.adminRequests && org.adminRequests.length > 0)\n        //     ))\n        default:\n            console.warn('unknown filter : ' + filter)\n            return organizations\n    }\n}\n\nexport class OrganizationModel {\n\n    params: ConstructorParams\n    groupsClient: groupsApi.GroupsClient\n    organizations: Map<OrganizationID, Organization>\n\n    constructor(params: ConstructorParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.organizations = new Map<OrganizationID, Organization>()\n    }\n\n    async getOrg(id: OrganizationID): Promise<Organization> {\n        if (this.organizations.has(id)) {\n            return this.organizations.get(id)!\n        }\n        return this.groupsClient.getGroupById(id)\n            .then((group) => {\n                const org = groupToOrganization(group, this.params.username)\n                this.organizations.set(id, org)\n                return org\n            })\n    }\n\n    async getOrgs(ids: Array<OrganizationID>): Promise<Array<Organization>> {\n        return Promise.all(ids.map((id) => {\n            return this.getOrg(id)\n        }))\n    }\n\n    async getAllOrgs(): Promise<Array<Organization>> {\n        const groups = await this.groupsClient.getGroups()\n        const ids = groups.map((group) => {\n            return group.id\n        })\n        return this.getOrgs(ids)\n    }\n\n    async getOwnOrgs(): Promise<Array<Organization>> {\n        const orgs = await this.getAllOrgs()\n\n        return orgs.filter((org: Organization) => {\n            if (org.owner.username === this.params.username) {\n                return true\n            }\n            if (org.members.find(({ username }) => {\n                return (username === this.params.username)\n            })) {\n                return true\n            }\n            return false\n        })\n    }\n\n    async queryOrgs(query: Query): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs()\n\n        const filtered = applyFilter(orgs, query.filter, query.username)\n        const searched = applyOrgSearch(filtered, query.searchTerms)\n        const sorted = applySort(searched, query.sortBy, query.sortDirection)\n\n        return {\n            organizations: sorted,\n            total: orgs.length\n        }\n    }\n\n    async ownOrgs(username: groupsApi.Username): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs()\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groups = await groupsClient.getGroups()\n\n        const ownGroups = groups.filter((group: groupsApi.Group) => {\n            if (group.owner.name === username) {\n                return true\n            }\n            if (group.members.find((member) => {\n                return (member.name === username)\n            })) {\n                return true\n            }\n            if (group.admins.find((member) => {\n                return (member.name === username)\n            })) {\n                return true\n            }\n            return false\n        })\n\n\n        const ownOrganizations = ownGroups.map((group) => {\n            return groupToOrganization(group, username)\n        })\n\n        return {\n            organizations: ownOrganizations,\n            total: ownOrganizations.length\n        }\n    }\n\n    async grantViewAccess(requestId: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantReadAccessToRequestedResource({ requestId })\n        const req = await groupsClient.getRequest(requestId)\n        return requestModel.groupRequestToOrgRequest(req)\n    }\n\n    async addOrg(newOrg: EditableOrganization, username: groupsApi.Username): Promise<Organization> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n        if ((newOrg.id.error && newOrg.id.error.type === UIErrorType.ERROR) ||\n            (newOrg.name.error && newOrg.name.error.type === UIErrorType.ERROR) ||\n            (newOrg.gravatarHash.error && newOrg.gravatarHash.error.type === UIErrorType.ERROR) ||\n            (newOrg.description.error && newOrg.description.error.type === UIErrorType.ERROR) ||\n            (newOrg.isPrivate.error && newOrg.isPrivate.error.type === UIErrorType.ERROR)\n        ) {\n            return Promise.reject(new Error('One or more fields are invalid'))\n        }\n\n        return groupsClient.createGroup({\n            id: newOrg.id.value,\n            name: newOrg.name.value,\n            gravatarhash: newOrg.gravatarHash.value,\n            description: newOrg.description.value,\n            isPrivate: newOrg.isPrivate.value\n        })\n            .then((group) => {\n                return groupToOrganization(group, username)\n            })\n    }\n\n    async orgExists(id: string): Promise<boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.groupExists(id)\n            .then(({ exists }) => {\n                return exists\n            })\n    }\n\n    async updateOrg(id: string, orgUpdate: OrganizationUpdate): Promise<void> {\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n\n\n        return groupsClient.updateGroup(id, {\n            name: orgUpdate.name,\n            gravatarhash: orgUpdate.gravatarHash,\n            description: orgUpdate.description,\n            private: orgUpdate.isPrivate\n        })\n    }\n\n    validateOrgId(id: string): [string, UIError] {\n        return Validation.validateOrgId(id);\n    }\n\n    validateOrgName(name: string): [string, UIError] {\n        return Validation.validateOrgName(name)\n    }\n\n    validateOrgDescription(description: string): [string, UIError] {\n        return Validation.validateOrgDescription(description);\n    }\n\n    async removeNarrativeFromOrg(organizationId: OrganizationID, workspaceId: number): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'workspace',\n            String(workspaceId)\n        )\n    }\n\n    async grantNarrativeAccess(groupId: string, resourceId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // TODO: yuck. need to \n        await groupsClient.grantResourceAccess(groupId, 'workspace', resourceId)\n        return\n    }\n\n    async requestMembershipToGroup(id: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.requestMembership({\n            groupId: id\n        })\n        return requestModel.groupRequestToOrgRequest(request)\n    }\n\n    async addOrRequestNarrativeToGroup(groupId: string, workspaceId: WorkspaceID): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestNarrative({\n            groupId: groupId,\n            workspaceId: workspaceId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    memberToAdmin(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.memberToAdmin({\n            groupId,\n            member\n        })\n    }\n\n    adminToMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.adminToMember({\n            groupId,\n            member\n        })\n    }\n    removeMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.removeMember({\n            groupId,\n            member\n        })\n    }\n\n}\n\n\n\nexport function userPermissionToWorkspacePermission(userPermission: string, isOwner: boolean) {\n    if (isOwner) {\n        return UserWorkspacePermission.OWNER\n    }\n    switch (userPermission) {\n        case 'r':\n            return UserWorkspacePermission.VIEW\n        case 'w':\n            return UserWorkspacePermission.EDIT\n        case 'a':\n            return UserWorkspacePermission.ADMIN\n        default:\n            throw new Error('Invalid workspace user permission: ' + userPermission)\n    }\n}","import { UIError, UIErrorType } from \"../../../types\";\n\nexport default class Validation {\n    static nonPrintableRe = /[\\000-\\031]/\n\n    static testNonPrintableCharacters(s: string) {\n        const firstNonPrintable = s.search(Validation.nonPrintableRe)\n        if (firstNonPrintable === -1) {\n            return false\n        }\n        const beforeStart = firstNonPrintable - 5 < 0 ? 0 : firstNonPrintable - 5\n        const before = s.slice(beforeStart, firstNonPrintable)\n        const after = s.slice(firstNonPrintable + 1, firstNonPrintable + 6)\n        return `Non-printable character at position ${firstNonPrintable}: \"${before}___${after}`\n    }\n    static validateOrgId(id: string): [string, UIError] {\n        // May not be empty\n        if (id.length === 0) {\n            return [\n                id, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization id may not be empty'\n                }]\n        }\n        // No spaces\n        if (id.match(/\\s/)) {\n            return [\n                id, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization id may not contain a space'\n                }]\n        }\n        // May not exceed maximum size\n        // todo: what is the real limit?\n        if (id.length > 100) {\n            return [\n                id, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization id may not be longer than 100 characters'\n                }]\n        }\n\n        // May only consist if lower case alphanumeric\n        const alphaRe = /^[a-z0-9-]+$/\n        if (!id.match(alphaRe)) {\n            return [\n                id, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization ID may only contain lower case letters (a-z), numeric digits (0-9) and the dash \"-\"'\n                }\n            ]\n        }\n\n        return [id, {\n            type: UIErrorType.NONE\n        }]\n    }\n\n    static validateOrgName(name: string): [string, UIError] {\n        if (name.length === 0) {\n            return [\n                name, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization name may not be empty'\n                }]\n        }\n        if (name.length > 256) {\n            return [\n                name, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization name may not be longer than 256 characters'\n                }]\n        }\n        return [\n            name, {\n                type: UIErrorType.NONE\n            }]\n    }\n\n    static validateOrgGravatarHash(gravatarHash: string | null): [string | null, UIError] {\n        if (!gravatarHash) {\n            return [\n                null, {\n                    type: UIErrorType.NONE\n                }]\n        }\n        if (gravatarHash.length === 0) {\n            return [\n                gravatarHash, {\n                    type: UIErrorType.NONE\n                }]\n        }\n        if (gravatarHash.length > 32) {\n            return [\n                gravatarHash, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization gravatar hash may not be longer than 32 characters'\n                }]\n        }\n        if (gravatarHash.length < 32) {\n            return [\n                gravatarHash, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization gravatar hash may not be shorter than 32 characters'\n                }]\n        }\n        const acceptedChars = /^[a-f0-9]+$/\n        if (!acceptedChars.test(gravatarHash)) {\n            return [\n                gravatarHash, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization gravatar hash must consist only of the lower case hexadecimal characters a-f and 0-9'\n                }\n            ]\n        }\n\n        return [\n            gravatarHash, {\n                type: UIErrorType.NONE\n            }]\n    }\n\n    static validateOrgDescription(description: string): [string, UIError] {\n        if (description.length === 0) {\n            return [name, {\n                type: UIErrorType.NONE\n            }]\n            // return [name, {\n            //     type: UIErrorType.ERROR,\n            //     message: 'Organization description may not be empty'\n            // }]\n        }\n        // TODO: Is there really a limit?\n        // const nonPrintable = Validation.testNonPrintableCharacters(description)\n        // if (nonPrintable) {\n        //     return [\n        //         description, {\n        //             type: UIErrorType.ERROR,\n        //             message: nonPrintable\n        //         }\n        //     ]\n        // }\n        if (description.length > 4096) {\n            return [\n                description, {\n                    type: UIErrorType.ERROR,\n                    message: 'Organization description may not be longer than 4,096 characters'\n                }]\n        }\n        return [\n            description, {\n                type: UIErrorType.NONE\n            }\n        ]\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../actions/inviteUser'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.LOADING\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: types.InviteUserViewState.EDITING,\n                    users: action.users,\n                    organization: action.organization,\n                    selectedUser: null\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function searchUsersSuccess(state: types.StoreState, action: actions.SearchUsersSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    users: action.users\n                }\n            }\n        }\n    }\n}\n\nexport function selectUserSuccess(state: types.StoreState, action: actions.SelectUserSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    selectedUser: {\n                        user: action.user,\n                        relation: action.relation\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationStart(state: types.StoreState, action: actions.SendInvitationStart): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.SENDING\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationSuccess(state: types.StoreState, action: actions.SendInvitationSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n\n    const { views: { inviteUserView: { viewModel: { selectedUser, users } } } } = state\n\n    // const selectedUser = state.inviteUserView.value.selectedUser\n    if (!selectedUser) {\n        throw new Error('selected user is null')\n    }\n    selectedUser.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n\n    if (!users) {\n        throw new Error('users is null')\n    }\n    const newUsers = users.map((user) => {\n        if (user.username === selectedUser.user.username) {\n            user.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n        }\n        return user\n    })\n\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.SUCCESS,\n                    selectedUser: selectedUser,\n                    users: newUsers\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationError(state: types.StoreState, action: actions.SendInvitationError): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.ERROR\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return searchUsersSuccess(state, action as actions.SearchUsersSuccess)\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return selectUserSuccess(state, action as actions.SelectUserSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return sendInvitationStart(state, action as actions.SendInvitationStart)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return sendInvitationSuccess(state, action as actions.SendInvitationSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return sendInvitationError(state, action as actions.SendInvitationError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageMembership'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    switch (action.type) {\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.MANAGE_MEMBERSHIP_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/requestAddNarrative'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport { OrganizationModel } from '../../data/models/organization/model';\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    narratives: action.narratives,\n                    selectedNarrative: null,\n                    relation: action.relation,\n                    error: null,\n                    saveState: types.SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function sendRequestStart(state: types.StoreState, action: actions.SendRequestStart): types.StoreState {\n\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: types.SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function sendRequestSuccess(state: types.StoreState, action: actions.SendRequestSuccess): types.StoreState {\n\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const newState: types.StoreState = {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: types.SaveState.SAVED\n                }\n            }\n        }\n    }\n\n    const viewModel = newState.views.requestNarrativeView.viewModel\n\n    if (!viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const selectedNarrative = viewModel.selectedNarrative\n\n    // If the request is by an admin, it will be returned as true, not the request\n    // (the api returns {complete: true})\n    if (action.request === true) {\n        viewModel.narratives = viewModel.narratives.map((narrative) => {\n            if (narrative.workspaceId === selectedNarrative!.workspaceId) {\n                narrative.status = types.NarrativeState.ASSOCIATED\n            }\n            return narrative\n        })\n    } else {\n        viewModel.narratives = viewModel.narratives.map((narrative) => {\n            if (narrative.workspaceId === selectedNarrative!.workspaceId) {\n                narrative.status = types.NarrativeState.REQUESTED\n            }\n            return narrative\n        })\n    }\n\n    return newState\n}\n\nexport function sendRequestError(state: types.StoreState, action: actions.SendRequestError): types.StoreState {\n\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: types.SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function selectNarrativeSuccess(state: types.StoreState, action: actions.SelectNarrativeSuccess): types.StoreState {\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                // TODO: a selected state?\n                error: null,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    selectedNarrative: action.narrative\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n            return sendRequestSuccess(state, action as actions.SendRequestSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n            return selectNarrativeSuccess(state, action as actions.SelectNarrativeSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\n\nimport { LoadStart, LoadSuccess, LoadError, DashboardAction, Unload, CancelOutboxRequest, CancelOutboxRequestSuccess, AcceptInboxRequestSuccess, RejectInboxRequestSuccess } from '../actions/dashboard'\nimport { StoreState, ComponentLoadingState } from '../../types';\n\nfunction loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organizations: action.organizations,\n                    // users: action.users,\n                    notifications: [],\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    pendingAdminRequests: action.pendingGroupRequests\n                }\n            }\n        }\n    }\n}\n\nfunction loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction cancelOutboxRequest(state: StoreState, action: CancelOutboxRequestSuccess): StoreState {\n    if (!state.views.dashboardView.viewModel) {\n        throw new Error('view model mysteriously missing in dashboard')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                ...state.views.dashboardView,\n                viewModel: {\n                    ...state.views.dashboardView.viewModel,\n                    // TODO: rename to requestOutbox, requestInbox\n                    requestOutbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nfunction acceptInboxRequest(state: StoreState, action: AcceptInboxRequestSuccess): StoreState {\n    if (!state.views.dashboardView.viewModel) {\n        throw new Error('view model mysteriously missing in dashboard')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                ...state.views.dashboardView,\n                viewModel: {\n                    ...state.views.dashboardView.viewModel,\n                    // TODO: rename to requestOutbox, requestInbox\n                    requestInbox: action.requests,\n                    organizations: action.organizations\n                }\n            }\n        }\n    }\n}\n\nfunction rejectInboxRequest(state: StoreState, action: RejectInboxRequestSuccess): StoreState {\n    if (!state.views.dashboardView.viewModel) {\n        throw new Error('view model mysteriously missing in dashboard')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            dashboardView: {\n                ...state.views.dashboardView,\n                viewModel: {\n                    ...state.views.dashboardView.viewModel,\n                    // TODO: rename to requestOutbox, requestInbox\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: DashboardAction<any>): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.DASHBOARD_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.DASHBOARD_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.DASHBOARD_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.DASHBOARD_UNLOAD:\n            return unload(state, action as Unload)\n        case ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS:\n            return cancelOutboxRequest(state, action as CancelOutboxRequestSuccess)\n        case ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS:\n            return acceptInboxRequest(state, action as AcceptInboxRequestSuccess)\n        case ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS:\n            return rejectInboxRequest(state, action as RejectInboxRequestSuccess)\n        default:\n            return null\n    }\n}","\nimport * as actions from '../actions/entities'\nimport { StoreState } from '../../types';\nimport { ActionFlag } from '../actions';\n\nfunction userLoaderSuccess(state: StoreState, action: actions.UserLoaderSuccess) {\n    const users = state.entities.users\n    // mutation ... horrible ;)\n    users.byId.set(action.user.username, action.user)\n    // return state\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            users: {\n                ...state.entities.users,\n                byId: new Map(users.byId)\n            }\n        }\n    }\n}\n\nfunction organizationLoaderSuccess(state: StoreState, action: actions.OrganizationLoaderSuccess) {\n    const orgsMap = state.entities.orgs.byId\n    orgsMap.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            orgs: {\n                ...state.entities.orgs,\n                byId: new Map(orgsMap)\n            }\n        }\n    }\n}\n\nfunction loadNarrativeSuccess(state: StoreState, action: actions.LoadNarrativeSuccess) {\n    const narratives = state.entities.narratives\n    narratives.byId.set(action.narrative.workspaceId, action.narrative)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                byId: new Map(narratives.byId)\n            }\n        }\n    }\n}\n\n// TODO: start and error\n\nfunction reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n            return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n        case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n            return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n        case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n            return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/organizationCentric'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                ...state.views.organizationCentricView,\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                ...state.views.organizationCentricView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    pendingJoinRequest: action.pendingJoinRequest,\n                    pendingJoinInvitation: action.pendingJoinInvitation,\n                    relation: action.relation\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import * as actions from '../actions/global'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport { Action } from 'redux';\nimport { access } from 'fs';\n\nexport function accessNarrativeSuccess(state: StoreState, action: actions.AccessNarrativeSuccess): StoreState {\n    const narrativesById = state.entities.narratives.byId\n    narrativesById.set(action.narrative.workspaceId, action.narrative)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                ...state.entities.narratives,\n                byId: narrativesById\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.GLOBAL_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        default:\n            return null\n    }\n}\n\n// function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n//     switch (action.type) {\n//         case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n//             return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n//         case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n//             return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n//         case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n//             return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n//         default:\n//             return null\n//     }\n// }\n\n// export default reducer","import { Action } from 'redux'\nimport { StoreState } from '../../types'\nimport addOrgReducer from './addOrg'\nimport editOrgReducer from './editOrg'\nimport viewOrgReducer from './viewOrg'\nimport browseOrgsReducer from './browseOrgs'\nimport authReducer from './auth'\nimport appReducer from './app'\nimport manageOrganizatiopRequests from './manageOrganizationRequests'\nimport viewMembers from './viewMembers'\nimport inviteUser from './inviteUser'\nimport manageMembership from './manageMembership'\nimport requestAddNarrative from './requestAddNarrative'\nimport dashboard from './dashboard'\nimport entities from './entities'\nimport organizationCentric from './organizationCentric'\nimport global from './global'\n\n\nexport function reducer(state: StoreState, action: Action): StoreState {\n    return addOrgReducer(state, action) ||\n        editOrgReducer(state, action) ||\n        browseOrgsReducer(state, action) ||\n        viewOrgReducer(state, action) ||\n        authReducer(state, action) ||\n        appReducer(state, action) ||\n        manageOrganizatiopRequests(state, action) ||\n        viewMembers(state, action) ||\n        inviteUser(state, action) ||\n        manageMembership(state, action) ||\n        requestAddNarrative(state, action) ||\n        dashboard(state, action) ||\n        entities(state, action) ||\n        organizationCentric(state, action) ||\n        global(state, action) ||\n        state;\n}\n\nexport default reducer","import * as React from 'react'\nimport './Owner.css'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport User from './UserContainer'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface OwnerProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface OwnerState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class Owner extends React.Component<OwnerProps, OwnerState> {\n    constructor(props: OwnerProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        return (\n            <div className=\"Owner View-COMPACT\" >\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Owner View-NORMAL\" >\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n                    <div className=\"role\">\n                        {this.renderRole()}\n                    </div>\n                    <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div>\n                    <div className=\"title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n\n    // render() {\n    //     return (\n    //         <div className=\"Member\" >\n    //             <div className=\"role\">\n    //                 {this.renderRole()}\n    //             </div>\n\n    //             <User userId={this.props.member.username} avatarSize={this.props.avatarSize || 30} />\n\n    //             {/* <div className=\"avatarCol\">\n    //                 <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n    //             </div>\n    //             <div className=\"infoCol\">\n    //                 <div className=\"name\">\n    //                     <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n    //                     {' '}\n    //                     ❨{this.props.user.username}❩\n    //                 </div>\n\n    //                 <div className=\"title\">\n    //                     {this.props.user.title || <i>no title in user profile</i>}\n    //                 </div>\n    //                 <div className=\"organization\">\n    //                     {this.props.user.organization || <i>no organization in user profile</i>}\n    //                 </div>\n    //                 <div className=\"location\">\n    //                     {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n    //                 </div>\n    //             </div> */}\n    //         </div>\n    //     )\n    // }\n}\n\n","import * as React from 'react'\nimport './Avatar.css'\n\nimport { User } from '../../types'\n\nexport interface AvatarProps {\n    user: User,\n    size: number\n}\n\ninterface AvatarState {\n\n}\n\nexport class Avatar extends React.Component<AvatarProps, AvatarState> {\n    constructor(props: AvatarProps) {\n        super(props)\n    }\n\n    getAvatarUrl(user: User) {\n        switch (user.avatarOption || 'gravatar') {\n            case 'gravatar':\n                const gravatarDefault = user.gravatarDefault || 'identicon';\n                const gravatarHash = user.gravatarHash;\n                if (gravatarHash) {\n                    return 'https://www.gravatar.com/avatar/' + gravatarHash + '?s=60&amp;r=pg&d=' + gravatarDefault;\n                } else {\n                    return './nouserpic.png';\n                }\n            case 'silhouette':\n            case 'mysteryman':\n            default:\n                return './nouserpic.png';\n        }\n    }\n\n    render() {\n        const avatarUrl = this.getAvatarUrl(this.props.user)\n        return (\n            <img\n                src={avatarUrl}\n                style={{ width: this.props.size }}\n            />\n        )\n    }\n\n}\n\nexport default Avatar","export interface User {\n    username: string,\n    realname: string,\n    thumbnail: string\n}\n\nexport interface UserProfile {\n    user: User,\n    profile: {\n        synced: {\n            gravatarHash: string\n        },\n        userdata: {\n            jobTitle: string,\n            jobTitleOther: string,\n            organization: string\n            city: string\n            state: string\n            country: string\n            avatarOption: string\n            gravatarDefault: string\n        }\n    }\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport class UserProfileClient {\n    url: string;\n    token: string\n\n    static profileCache: Map<string, UserProfile> = new Map()\n\n    constructor({ url, token }: { url: string, token: string }) {\n        this.url = url\n        this.token = token\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: 'UserProfile.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: 'UserProfile.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    getVersion(): Promise<any> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makeEmptyPayload('version'))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    async getUserProfile(username: string): Promise<UserProfile> {\n\n        if (UserProfileClient.profileCache.has(username)) {\n            return Promise.resolve(UserProfileClient.profileCache.get(username)!)\n        }\n\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload('get_user_profile', [username]))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result.result[0][0] as UserProfile\n            })\n    }\n\n    getUserProfiles(usernames: Array<string>): Promise<Array<UserProfile>> {\n\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload('get_user_profile', usernames))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result.result[0] as Array<UserProfile>\n            })\n    }\n\n    getAllUsers(): Promise<Array<User>> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload('filter_users', { filter: '' }))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n\n    searchUsers(query: string): Promise<Array<User>> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload('filter_users', { filter: query }))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n}","import { UserProfileClient, UserProfile } from '../apis/userProfile'\n\n\nexport type Username = string\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\n\nfunction profileToUser(profile: UserProfile): User {\n    let jobTitle\n    if (!profile.profile.userdata) {\n        return {\n            username: profile.user.username,\n            realname: profile.user.realname,\n            city: null,\n            state: null,\n            country: null,\n            title: null,\n            organization: null,\n            avatarOption: null,\n            gravatarHash: null,\n            gravatarDefault: null\n        }\n    }\n    if (profile.profile.userdata.jobTitle === 'Other') {\n        jobTitle = profile.profile.userdata.jobTitleOther\n    } else {\n        jobTitle = profile.profile.userdata.jobTitle\n    }\n\n    return {\n        username: profile.user.username,\n        realname: profile.user.realname,\n        city: profile.profile.userdata.city,\n        state: profile.profile.userdata.state,\n        country: profile.profile.userdata.country,\n        title: jobTitle,\n        organization: profile.profile.userdata.organization,\n        avatarOption: profile.profile.userdata.avatarOption,\n        gravatarHash: profile.profile.synced.gravatarHash,\n        gravatarDefault: profile.profile.userdata.gravatarDefault\n    }\n}\n\nexport interface UserQuery {\n    query: string\n    excludedUsers: Array<string>\n}\n\nexport interface BriefUser {\n    username: string\n    realname: string\n}\n\n\n\n\ninterface UserModelParams {\n    userProfileServiceURL: string\n    token: string\n}\n\nexport class UserModel {\n\n    params: UserModelParams\n    userProfileClient: UserProfileClient\n\n    cache: Map<Username, User>\n\n    constructor(params: UserModelParams) {\n        this.params = params\n        this.userProfileClient = new UserProfileClient({\n            url: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map<Username, User>()\n    }\n\n    async getUser(username: Username): Promise<User> {\n        if (this.cache.has(username)) {\n            return this.cache.get(username)!\n        }\n\n        const userProfile = await this.userProfileClient.getUserProfile(username)\n        const user = profileToUser(userProfile)\n        this.cache.set(username, user)\n        return user\n    }\n\n    async getUsers(usernames: Array<Username>): Promise<Map<Username, User>> {\n        const result: Map<Username, User> = new Map()\n\n        const toFetch: Array<Username> = []\n\n        usernames.forEach((username) => {\n            if (this.cache.has(username)) {\n                result.set(username, this.cache.get(username)!)\n            } else {\n                toFetch.push(username)\n            }\n        })\n\n        const userProfiles = await this.userProfileClient.getUserProfiles(toFetch)\n        const users = userProfiles.map((profile) => {\n            return profileToUser(profile)\n        })\n\n        userProfiles.forEach((userProfile) => {\n            const user = profileToUser(userProfile)\n            this.cache.set(user.username, user)\n            result.set(user.username, user)\n        })\n\n        return result\n    }\n\n    async searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n        const users = await this.userProfileClient.searchUsers(query.query)\n        return users\n            .filter(({ username }) => {\n                return (query.excludedUsers.indexOf(username) === -1)\n            })\n            .map(({ username, realname }) => {\n                return {\n                    username, realname\n                }\n            })\n    }\n\n    // searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.searchUsers(query.query)\n    //         .then((users) => {\n    //             return users\n    //                 .filter(({ username }) => {\n    //                     return (query.excludedUsers.indexOf(username) === -1)\n    //                 })\n    //                 .map(({ username, realname }) => {\n    //                     return {\n    //                         username, realname\n    //                     }\n    //                 })\n\n    //         })\n    // }\n\n    // getUser(username: string): Promise<User> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.getUserProfile(username)\n    //         .then((userProfile) => {\n    //             return this.profileToUser(userProfile)\n    //         })\n    // }\n}","export interface GenericClientParams {\n    url: string\n    module: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface ErrorResult {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport type JSONRPCResponse = [any, ErrorResult | null]\n\nexport class GenericClient {\n    url: string;\n    token: string | null\n    module: string\n\n    constructor({ url, token, module }: GenericClientParams) {\n        this.url = url\n        this.token = token || null\n        this.module = module\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: param\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse(response: Response): Promise<JSONRPCResponse> {\n        if (response.status === 200) {\n            const { result, error } = await response.json()\n            if (result) {\n                return [result, null]\n            } else {\n                return [null, error]\n            }\n\n        } else if (response.status === 204) {\n            return [null, null]\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                return [null, error]\n            } else {\n                const text = await response.text()\n                return [null, {\n                    code: 0,\n                    name: 'Internal Server Error (for real)',\n                    message: 'The service experienced an internal error',\n                    error: text\n                }]\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                return this.processResponse(response)\n            })\n    }\n}\n\nexport class AuthorizedGenericClient extends GenericClient {\n    token: string;\n\n    constructor(params: GenericClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        return this.processResponse(response)\n    }\n}\n\n","import { AuthorizedServiceClient, ServiceClientParams } from './serviceClient'\n\n// types from module\n\nexport interface Service {\n    module_name: string\n    version: string | null\n}\n\nexport interface ServiceStatus {\n    module_name: string\n    version: string\n    git_commit_hash: string\n    release_tags: Array<string>\n    hash: string\n    url: string\n    up: number // aka boolean\n    status: string\n    health: string\n}\n\n// impl\n\nexport interface ServiceWizardClientParams extends ServiceClientParams {\n\n}\n\nexport interface GetServiceStatusParams extends Service { }\n\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\nexport class ServiceWizardClient extends AuthorizedServiceClient {\n\n    static module: string = 'ServiceWizard'\n\n    constructor(params: ServiceWizardClientParams) {\n        super(params)\n    }\n\n\n    getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        return this.callFunc('get_service_status', params)\n            .then((result) => {\n                if (result.result &&\n                    result.result.length > 0) {\n                    const theResult = result.result[0]\n                    if (!theResult) {\n                        throw new Error('Crazy at it seems, no result')\n                    }\n                    return theResult as GetServiceStatusResult\n                } else {\n                    throw new Error('Crazy at it seems, no result')\n                }\n            })\n    }\n\n}","export interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONResponse {\n    id: string\n    version: string\n    result: any\n    error: any\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null;\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: ServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    callFunc(func: string, param: any): Promise<JSONResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Request error: ' + response.status + ', ' + response.statusText)\n                }\n                return <unknown>response.json() as JSONResponse\n            })\n    }\n}\n\n","import Bluebird from 'bluebird'\nimport { AuthorizedServiceClient } from './serviceClient'\n\nimport { ServiceWizardClient } from './serviceWizard'\nimport { GenericClient, AuthorizedGenericClient } from './genericClient'\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Bluebird<T>\n\nexport interface CacheParams {\n    itemLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n}\n\nexport interface CacheItem<T> {\n    id: string\n    value: T | null\n    createdAt: number\n    fetcher: () => Bluebird<T>\n    reserved: boolean\n}\n\nexport class Cache<T> {\n\n    cache: Map<string, CacheItem<T>>\n    cacheLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n    isMonitoring: boolean\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>()\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        window.setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item)\n                    cacheRenewed = true\n                }\n            });\n            this.cache = newCache\n            this.isMonitoring = false\n            if (cacheRenewed) {\n                this.runMonitor()\n            }\n        }, this.monitoringFrequency)\n    }\n\n    isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return (elapsed > this.cacheLifetime);\n    }\n\n    isReserved(cacheItem: any) {\n        return cacheItem.reserved;\n    }\n\n    getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null\n        }\n        const cached = this.cache.get(id)\n        if (this.isExpired(cached)) {\n            this.cache.delete(id)\n            return;\n        }\n        return cached;\n    }\n\n    reserveWaiter(item: CacheItem<T>): Bluebird<CacheItem<T>> {\n        return new Bluebird<CacheItem<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const waiting = true;\n\n            const waiter = () => {\n                if (!waiting) {\n                    return;\n                }\n                window.setTimeout(() => {\n                    if (this.cache.has(item.id)) {\n                        // If on a wait-loop cycle we discover that the\n                        // cache item has been deleted, we volunteer\n                        // to attempt to fetch it ourselves.\n                        // The only case now for this is a cancellation\n                        // of the first request to any dynamic service,\n                        // which may cancel the initial service wizard\n                        // call rather than the service call.\n                        return this.reserveAndFetch({\n                            id: item.id,\n                            fetcher: item.fetcher\n                        })\n                            .then(() => {\n                                // resolve(result);\n                                // we resolve with the cache item just\n                                // as if we had waited for it.\n                                resolve(this.cache.get(item.id))\n                            })\n                            .catch((err: Error) => {\n                                reject(err);\n                            });\n                    }\n                    if (!item.reserved) {\n                        resolve(item);\n                    } else {\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed > this.waiterTimeout) {\n                            this.cache.delete(item.id)\n                            reject(new Error(\n                                'Timed-out waiting for cache item to become available; timeout '\n                                + this.waiterTimeout + ', waited ' + elapsed));\n                        } else {\n                            waiter();\n                        }\n                    }\n                }, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    reserveAndFetch({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        // now, reserve it.\n        this.reserveItem(id, fetcher)\n\n        // and then fetch it.\n        const fetchPromise = fetcher()\n            .then((result: any) => {\n                this.setItem(id, result, fetcher)\n                return result\n            })\n            .finally(() => {\n                // If the fetch was cancelled, we need to remove\n                // the reserved item. This should signal any queued waiters\n                // to spawn their own fetch.\n                if (fetchPromise.isCancelled()) {\n                    this.cache.get(id)\n                }\n            });\n        return fetchPromise;\n    }\n\n    getItemWithWait({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        const cached = this.cache.get(id)\n        if (cached) {\n            if (this.isExpired(cached)) {\n                this.cache.delete(id)\n            } else if (this.isReserved(cached)) {\n                return this.reserveWaiter(cached)\n                    .then((cached) => {\n                        return cached.value;\n                    });\n            } else {\n                return Bluebird.resolve(cached.value)\n            }\n        }\n\n        return this.reserveAndFetch({ id, fetcher });\n    }\n\n    reserveItem(id: string, fetcher: () => Bluebird<T>) {\n        this.cache.set(id, {\n            id: id,\n            createdAt: new Date().getTime(),\n            reserved: true,\n            value: null,\n            fetcher: fetcher\n        });\n    }\n\n    setItem(id: string, value: T, fetcher: () => Bluebird<T>) {\n        if (this.cache.has(id)) {\n            const item = this.cache.get(id)\n            if (item && item.reserved) {\n                item.reserved = false\n                item.value = value\n                item.fetcher = fetcher\n            } else {\n                // overwriting? should we allow this?\n                this.cache.set(id, {\n                    id: id,\n                    createdAt: new Date().getTime(),\n                    fetcher: fetcher,\n                    reserved: false,\n                    value: value\n                })\n            }\n        } else {\n            this.cache.set(id, {\n                id: id,\n                createdAt: new Date().getTime(),\n                fetcher: fetcher,\n                reserved: false,\n                value: value\n            })\n        }\n        this.runMonitor();\n    }\n}\nvar moduleCache = new Cache<any>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n})\n\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams {\n    token: string\n    url: string\n    version?: string\n    timeout?: number\n    rpcContext?: any\n}\n\nexport class DynamicServiceClient {\n    token: string\n    timeout: number\n    rpcContext: any\n    url: string\n    version: string | null\n\n    static module: string\n\n    constructor({ token, url, version, timeout, rpcContext }: DynamicServiceClientParams) {\n        // Establish an auth object which has properties token and user_id.\n        this.token = token;\n        this.timeout = timeout || 10000;\n        this.rpcContext = rpcContext || null;\n\n        if (!url) {\n            throw new Error('The service discovery url was not provided');\n        }\n        this.url = url;\n\n        this.version = version || null;\n        if (version === 'auto') {\n            this.version = null;\n        }\n    }\n\n    options() {\n        return {\n            timeout: this.timeout,\n            authorization: this.token,\n            rpcContext: this.rpcContext\n        };\n    }\n\n    getModule() {\n        return (<typeof DynamicServiceClient>this.constructor).module\n    }\n\n    moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.getModule() + ':auto';\n        } else {\n            moduleId = this.getModule() + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    getCached(fetcher: () => Bluebird<any>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    lookupModule() {\n        return this.getCached((): Bluebird<any> => {\n            const func = 'get_service_status';\n            const params = [{\n                module_name: this.getModule(),\n                version: this.version\n            }];\n            // NB: pass null for numRets (number of return values) so we get the\n            // full return structure.\n            const client = new ServiceWizardClient({\n                url: this.url,\n                token: this.token\n            })\n\n            return Bluebird.resolve(\n                client.getServiceStatus({\n                    module_name: this.getModule(),\n                    version: this.version\n                })\n            )\n        })\n    }\n\n    callFunc(funcName: string, params: any) {\n        return this.lookupModule()\n            .then((serviceStatus) => {\n                const client = new AuthorizedGenericClient({\n                    module: serviceStatus.module_name,\n                    url: serviceStatus.url,\n                    token: this.token\n                })\n                return Bluebird.resolve(\n                    client.callFunc(funcName, params)\n                )\n            })\n            .catch((err) => {\n                console.error('ERROR: ' + err.name + \" = \" + err.message, err)\n                throw err\n            })\n    }\n}\n","import { AuthorizedGenericClient } from '../apis/genericClient'\nimport { NarrativeServiceClient } from '../apis/narrativeService'\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport * as workspaceApi from '../apis/workspaceUtils'\nimport * as userModel from './user'\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport type NarrativeID = number\n\nexport type WorkspaceID = number\nexport type ObjectID = number\n\nexport enum NarrativeAccess {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport interface NarrativeBase {\n    workspaceId: WorkspaceID,\n    access: NarrativeAccess\n}\n\nexport interface InaccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.NONE\n}\n\nexport interface AccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n    isPublic: boolean\n    objectId: ObjectID\n    title: string\n    // description?: string\n    owner: userModel.Username\n    // creator: userModel.Username\n    // createdAt: Date\n    lastSavedAt: Date\n    lastSavedBy: userModel.Username\n}\n\nexport type Narrative = AccessibleNarrative | InaccessibleNarrative\n\nexport interface OrganizationNarrative {\n    workspaceId: WorkspaceID\n    objectId: ObjectID\n    title: string\n    status: NarrativeState\n    // inOrganization: boolean\n    // createdAt: Date\n    modifiedAt: Date\n}\n\nexport interface NarrativeWorkspaceInfo extends workspaceApi.WorkspaceInfo {\n    metadata: {\n        narrative_nice_name: string\n        version: string\n        is_temporary: string\n    }\n}\n// export interface GetOwnNarrativesResult {\n//     workspaceInfo: WorkspaceInfo\n//     objectInfo: ObjectInfo\n// }\n\ninterface NarrativeModelParams {\n    workspaceServiceURL: string\n    serviceWizardURL: string\n    groupsServiceURL: string\n    username: string\n    token: string\n}\n\nexport class NarrativeModel {\n\n    params: NarrativeModelParams\n\n    constructor(params: NarrativeModelParams) {\n        this.params = params\n    }\n\n    // Narratives\n\n    async getOwnNarratives(organizationId: string): Promise<Array<OrganizationNarrative>> {\n        const narrativeServiceClient = new NarrativeServiceClient({\n            url: this.params.serviceWizardURL,\n            token: this.params.token,\n            timeout: 10000,\n        })\n\n        const groupsClient = new orgModel.OrganizationModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const [narrativesResult, organization, pendingRequests] = await Promise.all([\n            narrativeServiceClient.listNarratives('mine'),\n            groupsClient.getOrg(organizationId),\n            requestClient.getPendingRequestsForOrg(organizationId)\n        ])\n\n        const workspacesInOrg = organization.narratives.map((narrative) => {\n            return narrative.workspaceId\n        })\n\n        return narrativesResult.narratives\n            .map((nar) => {\n                return {\n                    workspaceInfo: <unknown>workspaceApi.workspaceInfoToObject(nar.ws) as NarrativeWorkspaceInfo,\n                    objectInfo: workspaceApi.objectInfoToObject(nar.nar)\n                }\n            })\n            .filter((nar) => {\n                return (nar.workspaceInfo.metadata.is_temporary === 'false')\n            })\n            .map((narrative) => {\n                let status: NarrativeState\n\n                if (workspacesInOrg.indexOf(narrative.workspaceInfo.id) !== -1) {\n                    status = NarrativeState.ASSOCIATED\n                } else if (pendingRequests.find((request) => {\n                    // TODO: these requests should have already been converted to \n                    // model-friendly requests (typed!)\n                    return (request.resourceType === requestModel.RequestResourceType.WORKSPACE &&\n                        request.narrativeId === String(narrative.workspaceInfo.id))\n                })) {\n                    status = NarrativeState.REQUESTED\n                } else {\n                    status = NarrativeState.NONE\n                }\n                return {\n                    workspaceId: narrative.workspaceInfo.id,\n                    objectId: narrative.objectInfo.id,\n                    title: narrative.workspaceInfo.metadata.narrative_nice_name,\n                    status: status,\n                    modifiedAt: narrative.workspaceInfo.modifiedAt\n                }\n            })\n            .sort((a, b) => {\n                return (a.title.localeCompare(b.title))\n            })\n    }\n\n    async workspaceToNarrative(workspaceId: WorkspaceID): Promise<orgModel.NarrativeResource | null> {\n        const workspaceClient = new AuthorizedGenericClient({\n            module: 'Workspace',\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n        try {\n            const [[[rawObjectInfo], rawObjectInfoError], [[rawWorkspaceInfo], rawWorkspaceInfoError]] = await Promise.all([\n                workspaceClient.callFunc('get_object_info3', [{\n                    objects: [{\n                        wsid: workspaceId,\n                        // TODO: fix this!!\n                        objid: 1\n                    }],\n                    includeMetadata: 1,\n                    ignoreErrors: 0\n                }]),\n                workspaceClient.callFunc('get_workspace_info', [{\n                    id: workspaceId\n                }])\n            ])\n\n            if (rawObjectInfoError || rawWorkspaceInfoError) {\n                console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n                return null\n            }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n            return {\n                workspaceId: workspaceInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                permission: orgModel.userPermissionToWorkspacePermission(workspaceInfo.userPermission, workspaceInfo.owner === this.params.username),\n                isPublic: workspaceInfo.globalReadPermission\n            }\n\n        } catch (ex) {\n            // assume it is an inaccessible workspace\n            console.warn('narrative not accessible', ex)\n            return null\n        }\n    }\n\n    /*\n    getNarrative fetches the requested narrative and returns a Narrative object if found \n    and null otherwise. Note that this ignores the narrative state vis-a-vis any organization.\n    It also caches narratives.\n    */\n    async getNarrative(workspaceId: WorkspaceID): Promise<Narrative> {\n        const workspaceClient = new AuthorizedGenericClient({\n            module: 'Workspace',\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n        try {\n            const [[rawObjectInfo, rawObjectInfoError], [rawWorkspaceInfo, rawWorkspaceInfoError]] = await Promise.all([\n                workspaceClient.callFunc('get_object_info3', [{\n                    objects: [{\n                        wsid: workspaceId,\n                        // TODO: fix this!!\n                        objid: 1\n                    }],\n                    includeMetadata: 1,\n                    ignoreErrors: 0\n                }]),\n                workspaceClient.callFunc('get_workspace_info', [{\n                    id: workspaceId\n                }])\n            ])\n\n            if (rawObjectInfoError || rawWorkspaceInfoError) {\n                console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo[0]) as NarrativeWorkspaceInfo\n            const objectInfo: workspaceApi.ObjectInfo = workspaceApi.objectInfoToObject(rawObjectInfo[0].infos[0])\n\n            let access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n            switch (workspaceInfo.userPermission) {\n                case 'n':\n                    if (workspaceInfo.globalReadPermission) {\n                        access = NarrativeAccess.VIEW\n                        break\n                    } else {\n                        throw new Error('Cannot have no access and no global read permission!')\n                    }\n                case 'r':\n                    access = NarrativeAccess.VIEW\n                    break\n                case 'w':\n                    access = NarrativeAccess.EDIT\n                    break\n                case 'a':\n                    if (workspaceInfo.owner === this.params.username) {\n                        access = NarrativeAccess.OWNER\n                    } else {\n                        access = NarrativeAccess.ADMIN\n                    }\n                    break\n                default:\n                    throw new Error('Unknown workspace permission: ' + workspaceInfo.userPermission)\n            }\n\n            return {\n                workspaceId: workspaceInfo.id,\n                access: access,\n                isPublic: workspaceInfo.globalReadPermission,\n                objectId: objectInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                owner: workspaceInfo.owner,\n                lastSavedAt: objectInfo.savedAt,\n                lastSavedBy: objectInfo.savedBy\n            }\n        } catch (ex) {\n\n            console.error('Error fetching narrative!', ex)\n            throw ex\n        }\n    }\n}\n","// import { AuthorizedServiceClient, ServiceClientParams, JSONPayload } from './serviceClient'\n\nimport { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nimport { RawObjectInfo, RawWorkspaceInfo, WorkspaceInfo, ObjectInfo, workspaceInfoToObject, objectInfoToObject } from './workspaceUtils'\n\nexport interface NarrativeServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface ListNarrativesParams {\n    type: string\n}\n\ntype Metadata = {}\n\n/* Information about an object, including user provided metadata.\n\n       obj_id objid - the numerical id of the object.\n       obj_name name - the name of the object.\n       type_string type - the type of the object.\n       timestamp save_date - the save date of the object.\n       obj_ver ver - the version of the object.\n       username saved_by - the user that saved or copied the object.\n       ws_id wsid - the workspace containing the object.\n       ws_name workspace - the workspace containing the object.\n       string chsum - the md5 checksum of the object.\n       int size - the size of the object in bytes.\n       usermeta meta - arbitrary user-supplied metadata about\n           the object.\n   */\n\n\n\n\nexport interface ListNarrativesResponseResult {\n    narratives: Array<{\n        ws: RawWorkspaceInfo\n        nar: RawObjectInfo\n    }>\n}\n\nexport interface ServiceResponse<T> {\n    id: string\n    version: string\n    result?: [T] | null\n    error?: any\n}\n\n\n\n// export type ListNarrativesResponse = ServiceResponse<ListNarrativesResponseResult>\n\n\n\nexport class NarrativeServiceClient extends DynamicServiceClient {\n\n    static module: string = 'NarrativeService'\n\n    constructor(params: NarrativeServiceClientParams) {\n        super(params)\n    }\n\n\n    async listNarratives(type: string): Promise<ListNarrativesResponseResult> {\n        // note usage of unknown below -- Bluebird and native Promise!\n        const [result, error] = await this.callFunc('list_narratives', [{\n            type: type\n        }])\n        // as Promise<ServiceResponse<ListNarrativesResponseResult>>\n\n        // should check id and version, or should call func do that?\n        if (result && result[0]) {\n            return result[0]\n            // return result[0].narratives.map((nar) => {\n            //     return {\n            //         workspaceInfo: workspaceInfoToObject(nar.ws),\n            //         objectInfo: objectInfoToObject(nar.nar)\n            //     }\n            // })\n        } else {\n            // TODO: handle error\n            // console.error('Result is missing', id, version, result, error)\n            throw new Error('Result is missing!')\n        }\n    }\n\n}","export type Metadata = {}\n\nexport type RawObjectInfo = [\n    number, // objid - object id\n    string, // name - object name\n    string, // type - object type\n    string, // save_date - iso8601 timestamp when last saved\n    number, // ver - object version\n    string, // saved_by - username who saved it last\n    number, // wsid - workspace id\n    string, // workspace - workspace name,\n    string, // chsum - checksum of the object\n    number, // size - size of the object (bytes)\n    Metadata   // meta - string to string object of stuff\n]\n\nexport type RawWorkspaceInfo = [\n    number, // id - workspace id\n    string, // workspace - workspace name\n    string, // owner - username who owns it\n    string, // moddate - iso8601 timestamp when last modified\n    number, // max_objid - last object id assigned to object in workspace\n    string, // user_permission - permission of user who made reqeust wrt workspace\n    number, // globalread - int bool whether this workspace is shared globally\n    string, // lockstat - status of the workspace lock\n    Metadata // metadata\n]\n\nexport interface WorkspaceInfo {\n    id: number\n    name: string\n    owner: string\n    modifiedAt: Date\n    objectCount: number\n    userPermission: string\n    globalReadPermission: boolean\n    lockStatus: string\n    metadata: Metadata\n}\n\nexport interface ObjectInfo {\n    id: number\n    name: string\n    type: {\n        module: string\n        name: string\n        majorVersion: number\n        minorVersion: number\n        id: string\n    }\n    version: number\n    savedAt: Date\n    savedBy: string\n    workspaceId: number\n    workspaceName: string\n    checksum: string\n    size: number\n    ref: string\n    metadata: Metadata\n}\n\nfunction iso8601ToDate(dateString: string) {\n    const isoRE = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)([\\+\\-])(\\d\\d)(:?[\\:]*)(\\d\\d)/;\n    const dateParts = isoRE.exec(dateString);\n    if (!dateParts) {\n        throw new TypeError('Invalid Date Format for ' + dateString);\n    }\n    // This is why we do this -- JS insists on the colon in the tz offset.\n    const offset = dateParts[7] + dateParts[8] + ':' + dateParts[10];\n    const newDateString = dateParts[1] + '-' + dateParts[2] + '-' + dateParts[3] + 'T' + dateParts[4] + ':' + dateParts[5] + ':' + dateParts[6] + offset;\n    return new Date(newDateString);\n}\n\nexport function workspaceInfoToObject(wsInfo: RawWorkspaceInfo): WorkspaceInfo {\n    return {\n        id: wsInfo[0],\n        name: wsInfo[1],\n        owner: wsInfo[2],\n        modifiedAt: iso8601ToDate(wsInfo[3]),\n        objectCount: wsInfo[4],\n        userPermission: wsInfo[5],\n        globalReadPermission: wsInfo[6] === 1 ? true : false,\n        lockStatus: wsInfo[7],\n        metadata: wsInfo[8]\n    }\n}\n\nexport function objectInfoToObject(data: RawObjectInfo): ObjectInfo {\n    const type = data[2].split(/[-.]/)\n\n    return {\n        id: data[0],\n        name: data[1],\n        // type: data[2],\n        type: {\n            id: data[2],\n            module: type[0],\n            name: type[1],\n            majorVersion: parseInt(type[2], 10),\n            minorVersion: parseInt(type[3], 10)\n        },\n        savedAt: iso8601ToDate(data[3]),\n        version: data[4],\n        savedBy: data[5],\n        workspaceId: data[6],\n        workspaceName: data[7],\n        checksum: data[8],\n        size: data[9],\n        metadata: data[10],\n        ref: data[6] + '/' + data[0] + '/' + data[4]\n    }\n}\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as userModel from '../../data/models/user'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { AppError, StoreState } from '../../types'\n\nexport interface EntityAction extends Action {\n\n}\n\nexport interface UserLoader extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER,\n    userId: userModel.Username\n}\n\nexport interface UserLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_START\n}\n\nexport interface UserLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n    user: userModel.User\n}\n\nexport interface UserLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function userLoaderStart(): UserLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_START\n    }\n}\n\nexport function userLoaderSuccess(user: userModel.User): UserLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n        user: user\n    }\n}\n\nexport function userLoaderError(error: AppError): UserLoaderError {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function userLoader(userId: userModel.Username) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await model.getUser(userId)\n            dispatch(userLoaderSuccess(user))\n        } catch (ex) {\n            dispatch(userLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\n\n\n\nexport interface OrganizationLoader extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface OrganizationLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n}\n\nexport interface OrganizationLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface OrganizationLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function organizationLoaderStart(): OrganizationLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n    }\n}\n\nexport function organizationLoaderSuccess(organization: orgModel.Organization): OrganizationLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function organizationLoaderError(error: AppError): OrganizationLoaderError {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function organizationLoader(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(organizationLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const organization = await model.getOrg(organizationId)\n            dispatch(organizationLoaderSuccess(organization))\n        } catch (ex) {\n            dispatch(organizationLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Narratives\n\nexport interface LoadNarrative {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD\n}\n\ninterface LoadNarrativeStart {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n}\n\nexport interface LoadNarrativeSuccess {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS\n    narrative: narrativeModel.Narrative\n}\n\ninterface LoadNarrativeError {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadNarrative(workspaceId: narrativeModel.WorkspaceID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            workspaceServiceURL: config.services.Workspace.url,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url\n        })\n\n        try {\n            const narrative = await narrativeClient.getNarrative(workspaceId)\n            dispatch({\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS,\n                narrative: narrative\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n    }\n}\n\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n\n","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Owner from './Owner'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Owner member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            this.props.onLoad(this.props.member.username)\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport md5 from 'md5'\n\nexport interface OrgAvatarProps {\n    gravatarHash: string | null\n    size: number\n    organizationName: string\n    organizationId: string\n}\n\nexport interface OrgAvatarState {\n\n}\n\nexport default class OrgAvatar extends React.Component<OrgAvatarProps, OrgAvatarState> {\n    constructor(props: OrgAvatarProps) {\n        super(props)\n    }\n\n    renderGravatar() {\n        if (!this.props.gravatarHash) {\n            return this.renderDefault()\n        }\n        const gravatarDefault = 'identicon';\n\n        const url = 'https://www.gravatar.com/avatar/' + this.props.gravatarHash + '?s=' + this.props.size + '&amp;r=pg&d=' + gravatarDefault;\n\n        return (\n            <img style={{ width: this.props.size, height: this.props.size }}\n                src={url} />\n        )\n    }\n\n    renderDefault() {\n        const url = 'unicorn-64.png'\n        // const url = 'orgs-64.png'\n        return (\n            <img style={{ width: this.props.size, height: this.props.size }}\n                src={url} />\n        )\n    }\n\n    renderUnicornify() {\n        const hash = md5(this.props.organizationId)\n        const url = 'https://unicornify.pictures/avatar/' + hash + '?s=' + this.props.size\n        return (\n            <img style={{ width: this.props.size, height: this.props.size }}\n                src={url} />\n        )\n    }\n\n    renderDefaultInitial() {\n        const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.organizationId)\n        const color = hash.substr(0, 6)\n        // return (\n        //     <span style={{ color: '\"#' + color + '\"', width: this.props.size, height: this.props.size, fontSize: this.props.size - 6 }}\n        //     >{initial}</span>\n        // )\n        return (\n            <svg width={this.props.size} height={this.props.size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={this.props.size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    render() {\n        if (this.props.gravatarHash) {\n            return this.renderGravatar()\n        } else {\n            return this.renderDefaultInitial()\n        }\n    }\n}","import * as React from 'react';\nimport './component.css';\nimport { NavLink } from 'react-router-dom';\nimport { Alert } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport Owner from '../entities/OwnerContainer';\nimport OrgAvatar from '../OrgAvatar';\n\n// TODO: need more ergonomic way to resolve the common issue of data types interfering with \n// component types.\n\nexport interface OrganizationsProps {\n    organizations: Array<orgModel.Organization>\n}\n\nexport interface OrganizationsState {\n    searchTerms: Array<string>\n}\n\nexport class Organizations extends React.Component<OrganizationsProps, OrganizationsState> {\n\n    constructor(props: OrganizationsProps) {\n        super(props)\n\n        this.state = {\n            searchTerms: []\n        }\n    }\n\n    renderOrgAvatar(org: orgModel.Organization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash} size={64} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderRelation(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    // renderRelation(org: orgModel.Organization) {\n    //     switch (org.relation.type) {\n    //         case (types.UserRelationToOrganization.NONE):\n    //             return (\n    //                 <span><Icon type=\"stop\" />None</span>\n    //             )\n    //         case (types.UserRelationToOrganization.VIEW):\n    //             return (\n    //                 <Tooltip\n    //                     placement=\"bottomRight\"\n    //                     mouseEnterDelay={0.5}\n    //                     title=\"You are not a member of this org, but you may access it; you may request membership\"\n    //                 >\n    //                     <span><Icon type=\"stop\" /> You are not a member - view organization to join</span>\n    //                 </Tooltip>\n    //             )\n    //         case (types.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending</span>)\n    //         case (types.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> You have been <b>invited</b> to join</span>)\n    //         case (types.UserRelationToOrganization.MEMBER):\n    //             return (<span><Icon type=\"user\" /> You are a <b>member</b> of this organization</span>)\n    //         case (types.UserRelationToOrganization.ADMIN):\n    //             return (<span><Icon type=\"unlock\" />Admin</span>)\n    //         case (types.UserRelationToOrganization.OWNER):\n    //             return (\n    //                 <Tooltip\n    //                     placement=\"bottomRight\"\n    //                     mouseEnterDelay={0.5}\n    //                     title=\"You own this org\"\n    //                 >\n    //                     <span><Icon type=\"crown\" /> You are the <b>owner</b> of this Organization</span>\n    //                 </Tooltip>\n    //             )\n    //     }\n    // }\n\n    renderAdminInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    // renderAdminInfo(org: orgModel.Organization) {\n    //     if (!(org.relation.type === types.UserRelationToOrganization.OWNER ||\n    //         org.relation.type === types.UserRelationToOrganization.ADMIN)) {\n    //         return\n    //     }\n    //     let requestsPending\n    //     if (org.adminRequests.length > 0) {\n    //         requestsPending = (\n    //             <div>\n    //                 <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" />\n    //                 {' '}\n    //                 there\n    //                 {' '}\n    //                 {org.adminRequests.length > 1 ? 'are' : 'is'}\n    //                 {' '}\n    //                 <b>{org.adminRequests.length} pending request{org.adminRequests.length > 1 ? 's' : ''}</b>\n    //             </div>\n    //         )\n    //     }\n\n    //     return (\n    //         <div className=\"admin\">\n    //             {requestsPending}\n    //         </div>\n    //     )\n    // }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderMemberCount(org: orgModel.Organization) {\n        return (\n            <div className=\"memberCount\">\n                {org.members.length > 0 ? org.members.length : 'no'} {this.pluralize(org.members.length, 'member', 'members')}\n            </div>\n        )\n    }\n\n    renderRelationInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    // renderRelationInfo(org: orgModel.Organization) {\n    //     switch (org.relation.type) {\n    //         case types.UserRelationToOrganization.NONE:\n    //             return (\n    //                 <div>\n    //                     Only members may view membership information\n    //                 </div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.VIEW:\n    //             return (\n    //                 <div>Only members may view membership information</div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.MEMBER:\n    //             return (\n    //                 <div>\n    //                     {this.renderMemberCount(org)}\n    //                 </div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.MEMBER_REQUEST_PENDING:\n    //             return (\n    //                 <div>Only members may view membership information</div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.MEMBER_INVITATION_PENDING:\n    //             return (\n    //                 <div>\n    //                     Only members may view membership information\n    //                 </div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.ADMIN:\n    //             return (\n    //                 <div>\n    //                     {this.renderMemberCount(org)}\n    //                 </div>\n    //             )\n    //             break\n    //         case types.UserRelationToOrganization.OWNER:\n    //             return (\n    //                 <div>\n    //                     {this.renderMemberCount(org)}\n    //                 </div>\n    //             )\n    //             break\n    //     }\n    // }\n\n    renderOrg(org: orgModel.Organization, index: Number) {\n        return (\n            <div className=\"row organizationCard\" key={String(index)}>\n                <div className=\"col2\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderOrgAvatar(org)}\n                    </NavLink>\n                </div>\n                <div className=\"col1\">\n                    <div className=\"infoTable\">\n                        <div className=\"orgName infoTableRow\">\n                            <NavLink to={`/viewOrganization/${org.id}`}>\n                                {org.name}\n                            </NavLink>\n                        </div>\n                        <div className=\"orgOwner infoTableRow\">\n                            <div className=\"infoTableCol1\">\n                                <span className=\"field-label\">owner</span>\n                            </div>\n                            <div className=\"infoTableCol2\">\n                                {/* TODO: render as Member or Owner component */}\n                                <Owner member={org.owner} avatarSize={30} />\n                                {/* <a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username} ❨{org.owner.username}❩</a> */}\n                            </div>\n                        </div>\n                        <div className=\"orgCreated infoTableRow\">\n                            <div className=\"infoTableCol1\">\n                                <span className=\"field-label\">established</span>\n                            </div>\n                            <div className=\"infoTableCol2\">\n                                <span className=\"field-value\">{Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* <div className=\"relation\">\n                        {this.renderRelation(org)}\n                    </div>\n                    {this.renderRelationInfo(org)} */}\n\n                    {/* {this.renderAdminInfo(org)} */}\n                </div>\n            </div>\n        )\n    }\n\n    renderOrgs() {\n        if (this.props.organizations.length > 0) {\n            return (\n                this.props.organizations.map((org: orgModel.Organization, index) => {\n                    return (\n                        this.renderOrg(org, index)\n                    )\n                })\n            )\n        } else {\n            return (\n                <Alert type=\"warning\"\n                    style={{ maxWidth: '20em', margin: '20px auto 0 auto' }}\n                    message=\"Sorry, no organizations were found.\" />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Organizations\">\n                <div style={{ overflowY: 'auto', display: 'flex', flexDirection: 'column' }}>\n                    {this.renderOrgs()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Organizations;","import { Organizations, OrganizationsProps } from './component';\nimport { StoreState } from '../../types';\nimport { connect } from 'react-redux';\n\nexport function mapStateToProps(state: StoreState): OrganizationsProps {\n    // TODO: wow, should not do this here\n    if (state.views.browseOrgsView.viewModel === null) {\n        throw new Error('view not ready')\n    }\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: { organizations }\n            }\n        }\n    } = state;\n    return {\n        organizations\n    }\n}\n\nexport default connect(mapStateToProps)(Organizations);","import * as React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Header.css'\nimport { FaUsers, FaChevronRight } from 'react-icons/fa'\nimport { Icon } from 'antd';\n\nexport interface HeaderProps {\n    breadcrumbs: JSX.Element\n    buttons?: JSX.Element\n}\n\nclass Header extends React.Component<HeaderProps, object> {\n    // <FaChevronRight style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n    buildSeparator() {\n        if (this.props.breadcrumbs) {\n            return (\n                <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"defaultCrumbs\">\n                    <NavLink to=\"/\">\n                        <Icon type=\"team\" style={{ verticalAlign: 'middle' }} />\n                        {' '}\n                        <span data-test=\"orgs-label\">Orgs</span>\n                    </NavLink>\n                    {this.buildSeparator()}\n                    {/* {this.buildSeparator()}\n                    <NavLink to=\"/organizations\">\n                        <FaUsers style={{ verticalAlign: 'middle' }} />\n                        {' '}\n                        <span data-test=\"orgs-label\">Orgs</span>\n                    </NavLink> */}\n                </div>\n                <div className=\"userColumn\">\n\n                    <div className=\"breadcrumbs\">\n                        {this.props.breadcrumbs}\n                    </div>\n                    <div className=\"buttons\">\n                        {this.props.buttons}\n                    </div>\n\n                    {/* {this.props.children} */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import * as React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nimport Organizations from '../../organizations/container';\nimport { SortDirection, AppError } from '../../../types';\n\nimport './component.css';\nimport { Button, Icon, Radio, Select, Modal, Alert } from 'antd'\nimport Header from '../../Header';\nimport { RadioChangeEvent } from 'antd/lib/radio';\n\nexport interface OrganizationsBrowserProps {\n    totalCount: number;\n    filteredCount: number;\n    sortBy: string;\n    sortDirection: SortDirection;\n    filter: string;\n    searching: boolean;\n    error: AppError | null;\n    onSearchOrgs: (searchTerms: Array<string>) => void;\n    onSortOrgs: (sortBy: string, sortDirection: SortDirection) => void;\n    onFilterOrgs: (filter: string) => void;\n}\n\nexport interface OrganizationsBrowserState {\n    searchInput: string\n    showInfo: boolean\n}\nclass OrganizationsBrowser extends React.Component<OrganizationsBrowserProps, OrganizationsBrowserState> {\n\n    searchInput: React.RefObject<HTMLInputElement>;\n    searchButton: React.RefObject<Button>;\n\n    constructor(props: OrganizationsBrowserProps) {\n        super(props)\n\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            searchInput: '',\n            showInfo: false\n        }\n\n        this.props.onSearchOrgs([])\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organizations Browser Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations browser...</p>\n                </div>\n            )\n        })\n    }\n\n    doSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        const searchTerms = this.searchInput.current.value.split(/[\\s+]/)\n        // dispatch the search event\n        this.props.onSearchOrgs(searchTerms);\n    }\n\n    haveSearchInput() {\n        if (this.state.searchInput && this.state.searchInput.length > 0) {\n            return true\n        }\n        return false\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.setState({ searchInput: currentSearchInputValue })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.doSearch()\n    }\n\n    onSortByChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(e.target.value, this.props.sortDirection)\n    }\n\n    onSortByChange2(value: string) {\n        this.props.onSortOrgs(value, this.props.sortDirection)\n    }\n\n\n    onSortDirectionChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(this.props.sortBy, e.target.value)\n    }\n\n    onSortDirectionChange2(value: string) {\n        this.props.onSortOrgs(this.props.sortBy, value as SortDirection)\n    }\n\n    onFilterChange(e: RadioChangeEvent) {\n        this.props.onFilterOrgs(e.target.value)\n    }\n\n    onFilterChange2(value: string) {\n        this.props.onFilterOrgs(value)\n    }\n\n    onClearSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        this.searchInput.current.value = ''\n        this.onSearchInputChange()\n        // this.searchButton.current!.handleClick(new MouseEvent<HTMLButtonElement>('click'))\n        // const event = new Event('change', { bubbles: true })\n        // this.searchInput.current.dispatchEvent(event)\n        this.doSearch()\n    }\n\n    renderSearchFeedback() {\n        if (this.props.totalCount === 0) {\n            return (\n                <span>\n                    No organizations in the system\n                </span>\n            )\n        }\n        if (this.props.filteredCount === 0) {\n            return (\n                <span>\n                    No organizations found out of\n                    {' '}\n                    {this.props.totalCount}\n                    {' '}\n                    available.\n                </span>\n            )\n\n        }\n        if (this.props.totalCount === this.props.filteredCount) {\n            return (\n                <span>\n                    Showing all\n                {' '}\n                    {this.props.totalCount}\n                    {' '}\n                    organizations\n                </span>\n            )\n        }\n\n        return (\n            <span>\n                Showing\n                {' '}\n                {this.props.filteredCount}\n                {' '}\n                out of\n                {' '}\n                {this.props.totalCount}\n                {' '}\n                organizations\n            </span>\n        )\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\" className=\"OrganizationsBrowser-searchBar\" onSubmit={this.onSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search Organizations\"\n                    onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                    ref={this.searchInput}></input>\n                {/* <Tooltip\n                    title=\"Enter one or more words to search organizations by name or owner\">\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{ alignSelf: 'end' }} />\n                </Tooltip> */}\n                <Button\n                    disabled={!this.haveSearchInput()}\n                    ref={this.searchButton}\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                    {/* Search */}\n                </Button>\n                <Button\n                    onClick={this.onClearSearch.bind(this)}\n                    disabled={!this.haveSearchInput()}\n                    icon=\"close\"\n                >\n\n                    {/* Show all */}\n                </Button>\n                {/* <div className=\"message\">\n                    {this.renderSearchFeedback()}\n                </div> */}\n            </form>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    Browse and Search Organizations\n                        </span>\n                <Icon type=\"right\" style={{ margin: '0 4px' }} />\n                <span style={{ fontWeight: 'normal', fontStyle: 'italic' }}>\n                    {this.renderSearchFeedback()}\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <NavLink to=\"/newOrganization\"><Button icon=\"plus-circle\">Create Organization</Button></NavLink>\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderSearchFilter() {\n        return (\n            <div>\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange2.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"name\" key=\"name\">Org name</Select.Option>\n                    <Select.Option value=\"owner\" key=\"owner\">Owner</Select.Option>\n                    <Select.Option value=\"created\" key=\"created\">Date created</Select.Option>\n                </Select>\n                <Select onChange={this.onSortDirectionChange2.bind(this)}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortDirection}>\n                    <Select.Option value={SortDirection.ASCENDING} key=\"name\"><Icon type=\"sort-ascending\" />Ascending</Select.Option>\n                    <Select.Option value={SortDirection.DESCENDING} key=\"owner\"><Icon type=\"sort-descending\" />Descending</Select.Option>\n                </Select>\n                <span className=\"field-label\" style={{ marginLeft: '10px' }}>filter</span>\n                <Select onChange={this.onFilterChange2.bind(this)}\n                    defaultValue={this.props.filter}\n                    style={{ width: '16em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"all\" key=\"all\">All</Select.Option>\n                    <Select.Option value=\"memberOf\" key=\"memberOf\">You are a member of</Select.Option>\n                    <Select.Option value=\"notMemberOf\" key=\"memberOf\">You are not a member of</Select.Option>\n                    <Select.Option value=\"owned\" key=\"owned\">Owned by you</Select.Option>\n                    <Select.Option value=\"notOwned\" key=\"notOwned\">Not owned by you</Select.Option>\n                    {/* <Select.Option value=\"pending\" key=\"pending\">Pending request or invitation</Select.Option>\n                    <Select.Option value=\"groupPending\" key=\"groupPending\">Pending group requests</Select.Option> */}\n                </Select>\n            </div>\n        )\n    }\n\n    renderOrganizations() {\n        if (this.props.error) {\n            return (\n                <Alert\n                    type=\"error\"\n                    message={this.props.error.code}\n                    description={this.props.error.message} />\n            )\n        } else {\n            return (\n                <Organizations />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationsBrowser scrollable-flex-column\">\n                {this.renderHeader()}\n                <div className=\"searchBarRow\">\n                    <div className=\"searchBarCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"sortCol\">\n                        {this.renderSearchFilter()}\n                    </div>\n                </div>\n                <div className=\"bodyRow scrollable-flex-column\">\n\n                    <div className=\"col2 scrollable-flex-column\">\n                        {this.renderOrganizations()}\n                    </div>\n                    {/* <div className=\"col1\">\n                        {this.renderControlArea()}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default OrganizationsBrowser","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, SortDirection, BrowseOrgsViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as uberModel from '../../data/models/uber'\n\n\nexport interface Load extends Action<ActionFlag.BROWSE_ORGS_LOAD> {\n    type: ActionFlag.BROWSE_ORGS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.BROWSE_ORGS_LOAD_START> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.BROWSE_ORGS_LOAD_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS\n    defaultViewModel: BrowseOrgsViewModel\n}\n\nexport interface LoadError extends Action<ActionFlag.BROWSE_ORGS_LOAD_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.BROWSE_ORGS_UNLOAD> {\n    type: ActionFlag.BROWSE_ORGS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_START\n    }\n}\n\nfunction loadSuccess(defaultViewModel: BrowseOrgsViewModel): LoadSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS,\n        defaultViewModel: defaultViewModel\n    }\n}\n\nfunction loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.BROWSE_ORGS_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface SortOrgs extends Action<ActionFlag.BROWSE_ORGS_SORT> {\n    type: ActionFlag.BROWSE_ORGS_SORT,\n    sortBy: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SORT_START> {\n    type: ActionFlag.BROWSE_ORGS_SORT_START,\n    sortBy: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SORT_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SORT_SUCCESS\n}\n\nexport interface SortOrgsError extends Action<ActionFlag.BROWSE_ORGS_SORT_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SORT_ERROR,\n    error: AppError\n}\n\n\nexport function sortOrgsStart(sortBy: string, sortDirection: SortDirection): SortOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SORT_START,\n        sortBy: sortBy,\n        sortDirection: sortDirection\n    }\n}\n\n// SEARCHING\n\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\n// Called upon the start of a search call\n// Sets the ui state to enable a spinner\n// and also search query data to be reflected in the ui\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\nexport interface SearchOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SEARCH_START> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_START\n}\n\n// Called upon successful completion of a search\n// Sets the organizations found\nexport interface SearchOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n    organizations: Array<orgModel.Organization>,\n    totalCount: number\n}\n\n// Called upon a search error\n// Sets error state\nexport interface SearchOrgsError extends Action<ActionFlag.BROWSE_ORGS_SEARCH_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n    error: AppError\n}\n\n\n// searchTerms: Array<string>\nfunction searchOrgsStart(): SearchOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_START\n    }\n}\n\nfunction searchOrgsSuccess(organizations: Array<orgModel.Organization>, totalCount: number): SearchOrgsSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n        organizations: organizations,\n        totalCount: totalCount\n    }\n}\n\nfunction searchOrgsError(error: AppError): SearchOrgsError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n        error: error\n    }\n}\n\n// FILTER \n\n// Filter orgs\nexport interface FilterOrgs extends Action<ActionFlag.BROWSE_ORGS_FILTER> {\n    type: ActionFlag.BROWSE_ORGS_FILTER,\n    filter: string\n}\n\nexport interface FilterOrgsStart extends Action<ActionFlag.BROWSE_ORGS_FILTER_START> {\n    type: ActionFlag.BROWSE_ORGS_FILTER_START,\n    filter: string\n}\n\n\nexport function filterOrgsStart(filter: string): FilterOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_FILTER_START,\n        filter: filter\n    }\n}\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        // populate default browse orgs props\n        const defaultViewModel: BrowseOrgsViewModel = {\n            rawOrganizations: [],\n            organizations: [],\n            totalCount: 0,\n            filteredCount: 0,\n            sortBy: 'name',\n            sortDirection: SortDirection.ASCENDING,\n            filter: 'all',\n            searchTerms: [],\n            selectedOrganizationId: null,\n            searching: false,\n            error: null\n        }\n        // done!\n        dispatch(loadSuccess(defaultViewModel))\n    }\n}\n\n\n\n// TODO: proper typing here \nexport function searchOrgs(searchTerms: Array<string>) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchOrgsStart())\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { sortBy, sortDirection, filter } } = browseOrgsView\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        return orgClient.queryOrgs({\n            searchTerms: searchTerms,\n            sortBy, sortDirection, filter, username\n        })\n            .then(({ organizations, total }) => {\n                // TODO: also total.\n                dispatch(searchOrgsSuccess(organizations, total))\n            })\n            .catch((error) => {\n                console.error('Error querying orgs', error.name, error.message)\n                dispatch(searchOrgsError({\n                    code: error.name,\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function sortOrgs(sortBy: string, sortDirection: SortDirection) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sortOrgsStart(sortBy, sortDirection))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, filter } } = browseOrgsView\n\n        return orgClient.queryOrgs({\n            searchTerms,\n            sortBy, sortDirection, filter, username\n        })\n            .then(({ organizations, total }) => {\n                // TODO: also total.\n                dispatch(searchOrgsSuccess(organizations, total))\n            })\n            .catch((error) => {\n                dispatch(searchOrgsError({\n                    code: error.name,\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function filterOrgs(filter: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(filterOrgsStart(filter))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, sortBy, sortDirection } } = browseOrgsView\n\n        return orgClient.queryOrgs({\n            searchTerms,\n            sortBy, sortDirection, filter, username\n        })\n            .then(({ organizations, total }) => {\n                // TODO: also total.\n                dispatch(searchOrgsSuccess(organizations, total))\n            })\n            .catch((error) => {\n                dispatch(searchOrgsError({\n                    code: error.name,\n                    message: error.message\n                }))\n            })\n    }\n}\n\n\n\n\n\n","import OrganizationsBrowser from './component'\nimport { StoreState, SortDirection, BrowseOrgsState, AppError } from '../../../types'\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as orgModel from '../../../data/models/organization/model'\n//\n// Typing for the mapState and mapDispatch\n//\nexport interface LinkStateProps {\n    organizations: Array<orgModel.Organization>\n    totalCount: number\n    filteredCount: number\n    sortBy: string\n    sortDirection: SortDirection\n    filter: string\n    searching: boolean,\n    error: AppError | null\n}\n\nexport interface LinkDispatchProps {\n    onSearchOrgs: (searchTerms: Array<string>) => void,\n    onSortOrgs: (sortBy: string, sortDirection: SortDirection) => void,\n    onFilterOrgs: (filter: string) => void\n}\n\n// note second arg is the component props, but we don't have any component props to merge in.\nexport function mapStateToProps(storeState: StoreState): LinkStateProps {\n    if (!storeState.views.browseOrgsView.viewModel) {\n        throw new Error('No view model!')\n    }\n\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: {\n                    organizations, error, searchTerms, selectedOrganizationId,\n                    totalCount, filteredCount, sortBy, sortDirection, filter, searching }\n            }\n        }\n    } = storeState\n\n    return {\n        organizations,\n        totalCount,\n        filteredCount,\n        sortBy,\n        sortDirection,\n        filter,\n        error,\n        searching: searching\n    }\n\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.SearchOrgs | actions.SortOrgs | actions.FilterOrgs>): LinkDispatchProps {\n    return {\n        onSearchOrgs: (searchTerms: Array<string>) => {\n            // TODO proper typing here\n            dispatch(actions.searchOrgs(searchTerms) as any)\n        },\n        onSortOrgs: (sortBy: string, sortDirection: SortDirection) => {\n            // TODO proper typing here\n            dispatch(actions.sortOrgs(sortBy, sortDirection) as any)\n        },\n        onFilterOrgs: (filter: string) => {\n            dispatch(actions.filterOrgs(filter) as any)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationsBrowser)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, BrowseOrgsView } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: BrowseOrgsView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Fetching your orgs and other stuff...\n            </div>\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/browseOrgs'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: BrowseOrgsView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.browseOrgsView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, EditState, ValidationState } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport Validation from '../../data/models/organization/validation'\n\n// ACTIONS\n\nexport interface Save extends Action<ActionFlag.ADD_ORG_SAVE> {\n    type: ActionFlag.ADD_ORG_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.ADD_ORG_SAVE_START> {\n    type: ActionFlag.ADD_ORG_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.ADD_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface SaveError extends Action<ActionFlag.ADD_ORG_SAVE_ERROR> {\n    type: ActionFlag.ADD_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Editing\n\nexport interface Load extends Action<ActionFlag.ADD_ORG_LOAD> {\n    type: ActionFlag.ADD_ORG_LOAD;\n}\n\nexport interface LoadStart {\n    type: ActionFlag.ADD_ORG_LOAD_START\n}\n\nexport interface LoadSuccess {\n    type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n    newOrganization: EditableOrganization\n}\n\nexport interface LoadError {\n    type: ActionFlag.ADD_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload {\n    type: ActionFlag.ADD_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface AddOrgEvaluate extends Action<ActionFlag.ADD_ORG_EVALUATE> {\n    type: ActionFlag.ADD_ORG_EVALUATE\n}\n\nexport interface AddOrgEvaluateOK extends Action<ActionFlag.ADD_ORG_EVALUATE_OK> {\n    type: ActionFlag.ADD_ORG_EVALUATE_OK\n}\n\nexport interface AddOrgEvaluateErrors extends Action<ActionFlag.ADD_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n}\n\n// Updating name field\n\nexport interface UpdateName extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface UpdateNameSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface UpdateNameError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: UIError\n}\n\n// Updating gravatar hash field\n\nexport interface UpdateGravatarHash extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH,\n    name: string\n}\n\nexport interface UpdateGravatarHashSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n    gravatarHash: string | null\n}\n\nexport interface UpdateGravatarHashError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n    gravatarHash: string | null,\n    error: UIError\n}\n\n// Updating id Field\n\nexport interface UpdateId extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID,\n    id: string\n}\n\nexport interface UpdateIdSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n    id: string\n}\n\nexport interface UpdateIdError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n    id: string,\n    error: UIError\n}\n\nexport interface UpdateIdPass extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n    id: string\n}\n\n// Updating description field\n\nexport interface UpdateDescription extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface UpdateDescriptionSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface UpdateDescriptionError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: UIError\n}\n\n// Update is private field\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: UIError\n}\n\n\n// ACTION CREATORS\n\nexport function saveStart(): SaveStart {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_START\n    }\n}\n\nexport function saveSuccess(org: orgModel.Organization): SaveSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n        organization: org\n    }\n}\n\nexport function saveError(error: AppError): SaveError {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Eiditing\n\nfunction loadStart() {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_START\n    }\n}\n\nfunction loadSuccess(newOrganization: EditableOrganization) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n        newOrganization: newOrganization\n    }\n}\n\nfunction loadError(error: AppError) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.ADD_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function addOrgEvaluateOk(): AddOrgEvaluateOK {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_OK\n    }\n}\n\nexport function AddOrgEvaluateErrors(): AddOrgEvaluateErrors {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Update Name\n\nexport function updateNameSuccess(name: string): UpdateNameSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function updateNameError(name: string, error: UIError): UpdateNameError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\nexport function updateIdSuccess(id: string): UpdateIdSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n        id: id\n    }\n}\n\nexport function updateIdPass(id: string): UpdateIdPass {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n        id: id\n    }\n}\n\n// Update Gravatar Hash\n\nexport function updateGravatarHashSuccess(gravatarHash: string | null): UpdateGravatarHashSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n        gravatarHash: gravatarHash\n    }\n}\n\nexport function updateGravatarHashError(gravatarHash: string | null, error: UIError): UpdateGravatarHashError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n        gravatarHash: gravatarHash,\n        error: error\n    }\n}\n\n\n// Update Id\n\nexport function updateIdError(id: string, error: UIError): UpdateIdError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n        id: id,\n        error: error\n    }\n}\n\nexport function updateDescriptionSuccess(description: string): UpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function updateDescriptionError(description: string, error: UIError): UpdateDescriptionError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const newOrg: EditableOrganization = {\n            id: {\n                value: '',\n                editState: EditState.NONE,\n                validationState: ValidationState.NONE,\n                validatedAt: null,\n                error: {\n                    type: UIErrorType.NONE\n                }\n            },\n            name: {\n                value: '',\n                editState: EditState.NONE,\n                validationState: ValidationState.NONE,\n                validatedAt: null,\n                error: {\n                    type: UIErrorType.NONE\n                }\n            },\n            gravatarHash: {\n                value: '',\n                editState: EditState.NONE,\n                validationState: ValidationState.NONE,\n                validatedAt: null,\n                error: {\n                    type: UIErrorType.NONE\n                }\n            },\n            description: {\n                value: '',\n                editState: EditState.NONE,\n                validationState: ValidationState.NONE,\n                validatedAt: null,\n                error: {\n                    type: UIErrorType.NONE\n                }\n            },\n            isPrivate: {\n                value: false,\n                editState: EditState.NONE,\n                validationState: ValidationState.NONE,\n                validatedAt: null,\n                error: {\n                    type: UIErrorType.NONE\n                }\n            }\n        }\n        dispatch(loadSuccess(newOrg))\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function addOrg() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n\n        // This check is to satisfy TS. Since viewModel is nullable, it has no way \n        // of knowing that our app flow ensures that it is populated.\n        // In terms of generalized usage of the redux store, though, there is no\n        // way to ensure this! So we really should perform our state checks before \n        // handling any event\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        // TODO: other validations!!!\n\n        dispatch(saveStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                addOrgView: { viewModel: { newOrganization } },\n            },\n            app: { config }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!newOrganization) {\n            dispatch(saveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        orgClient.addOrg(newOrganization, username)\n            .then((org: orgModel.Organization) => {\n                dispatch(saveSuccess(org))\n            })\n            .catch((error) => {\n                console.error('error adding', newOrganization, error)\n\n                // note that we dispatch an AppError compliant object,\n                // which wraps the original exception object.\n                dispatch(saveError({\n                    code: error.code || error.name,\n                    message: error.message,\n                    exception: error\n                }))\n            })\n    }\n}\n\nexport function addOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n\n        const {\n            views: {\n                addOrgView: {\n                    viewModel: { editState, newOrganization } }\n            }\n        } = state\n\n        if (!newOrganization) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.name.validationState !== ValidationState.VALID) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.id.validationState !== ValidationState.VALID) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: quick hack to allow unmodified fields to evaluate to true.\n\n        if (newOrganization.gravatarHash.validationState === ValidationState.NONE) {\n            if (newOrganization.gravatarHash.value) {\n                const [validGravatarHash, error] = Validation.validateOrgGravatarHash(name)\n                if (error) {\n                    dispatch(AddOrgEvaluateErrors())\n                    return\n                }\n            }\n        } else {\n            if (newOrganization.gravatarHash.validationState !== ValidationState.VALID) {\n                dispatch(AddOrgEvaluateErrors())\n                return\n            }\n        }\n\n        if (newOrganization.description.validationState !== ValidationState.VALID) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: just remove this; there is no validation task for isPrivate atm.\n        // if (newOrganization.isPrivate.validationState !== ValidationState.VALID) {\n        //     dispatch(AddOrgEvaluateErrors())\n        //     return\n        // }\n\n        dispatch(addOrgEvaluateOk())\n    }\n}\n\nfunction orgModelFromState(state: StoreState) {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config } } = state\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url\n    })\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(updateNameError(validatedName, error))\n        } else {\n            dispatch(updateNameSuccess(validatedName))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateGravatarHash(name: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedGravatarHash, error] = Validation.validateOrgGravatarHash(name)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(updateGravatarHashError(validatedGravatarHash, error))\n        } else {\n            dispatch(updateGravatarHashSuccess(validatedGravatarHash))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // no validation for now ... what is there to validate?\n\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate\n        })\n        dispatch(addOrgEvaluate())\n    }\n}\n\nclass Debouncer {\n\n    delay: number\n    fun: () => void\n    canceled: boolean\n    timer: number | null\n\n    constructor(delay: number, fun: () => void) {\n        this.delay = delay\n        this.fun = fun\n        this.canceled = false\n        this.timer = null\n        this.startWaiting()\n    }\n\n    startWaiting() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(() => {\n            this.fun()\n        }, this.delay)\n    }\n\n    cancel() {\n        this.canceled = true\n    }\n}\n\nlet activeDebouncer: Debouncer | null = null\n\nexport function updateId(id: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const [validatedId, error] = Validation.validateOrgId(id)\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        const lastValidatedAt = viewModel.newOrganization.id.validatedAt\n        const now = new Date().getTime()\n        const debounce = 500 // ms\n        if (lastValidatedAt) {\n\n            const elapsed = now - lastValidatedAt.getTime()\n            if (elapsed < debounce) {\n                dispatch(updateIdPass(validatedId))\n                if (!activeDebouncer) {\n                    activeDebouncer = new Debouncer(500, () => {\n                        dispatch(evaluateId())\n                    })\n                }\n                return\n            }\n        }\n\n        if (activeDebouncer) {\n            activeDebouncer.cancel()\n        }\n        activeDebouncer = null\n\n\n        const model = orgModelFromState(getState())\n        model.orgExists(validatedId)\n            .then((exists) => {\n                if (exists) {\n                    dispatch(updateIdError(validatedId, {\n                        type: UIErrorType.ERROR,\n                        message: 'This org id is already in use'\n                    }))\n                } else {\n                    dispatch(updateIdSuccess(validatedId))\n                }\n\n                dispatch(addOrgEvaluate())\n            })\n    }\n}\n\nexport function evaluateId() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        const id = viewModel.newOrganization.id\n\n        const [validatedId, error] = Validation.validateOrgId(id.value)\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        const model = orgModelFromState(getState())\n        model.orgExists(validatedId)\n            .then((exists) => {\n                if (exists) {\n                    dispatch(updateIdError(validatedId, {\n                        type: UIErrorType.ERROR,\n                        message: 'This org id is already in use'\n                    }))\n                } else {\n                    dispatch(updateIdSuccess(validatedId))\n                }\n\n                dispatch(addOrgEvaluate())\n            })\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const model = orgModelFromState(getState())\n\n        const [validatedDescription, error] = model.validateOrgDescription(description)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(updateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(updateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}","import * as React from 'react'\nimport { Redirect } from 'react-router-dom';\nimport marked from 'marked';\nimport { Button, Icon, Modal, Input, Checkbox } from 'antd';\nimport md5 from 'md5'\n\nimport { EditableOrganization, SaveState, ValidationState, EditState, AppError } from '../../../types';\n\nimport './component.css'\n\nimport Header from '../../Header';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport OrgAvatar from '../../OrgAvatar';\n\nexport interface NewOrganizationProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    error: AppError | null,\n    newOrganization: EditableOrganization,\n    onSave: () => void,\n    onUpdateName: (name: string) => void,\n    onUpdateGravatarHash: (gravatarHash: string | null) => void;\n    onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n}\n\n\nexport interface NewOrganizationState {\n    cancelToBrowser: boolean\n    showError: boolean\n}\n\nclass NewOrganization extends React.Component<NewOrganizationProps, NewOrganizationState> {\n\n    origin: string;\n    gravatarEmail: React.RefObject<HTMLInputElement>\n\n    // idDebounceTime: number | null\n\n    constructor(props: NewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            showError: true\n        }\n\n        this.gravatarEmail = React.createRef()\n\n        this.origin = document.location!.origin\n\n        // this.idDebounceTime = null\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'New Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>\n                        As a KBase user, you may create your own organizations.\n                    </p>\n                    <p>\n                        Once you have created an Organization, you will be the sole owner of it, forever.\n                    </p>\n                    <p>\n                        In order to create an Org, you need to complete the following fields.\n                    </p>\n                    <dl>\n                        <dt>\n                            name\n                        </dt>\n                        <dd>\n                            The organization <i>name</i> is whatever you wish to have your Org known as. It may be\n                            composed of any text (including unicode characters) up to 200 characters in length. You\n                            may also change it at any time.\n                        </dd>\n                        <dt>\n                            gravatar\n                        </dt>\n                        <dd>\n                            You should associate your Organization with an avatar hosted with the Gravatar service. To do so,\n                            simply enter the email address associated with your gravatar into the first\n                        </dd>\n                        <dt>\n                            id\n                        </dt>\n                        <dd>\n                            <p>\n                                Your Org <i>id</i> forms a url endpoint for your org as well as the identifier used throughout\n                            KBase to, well, identify your organization uniquely among all current and future organizations.\n                            As such, the Org ID may not be changed once created.\n                            </p>\n                            <p>\n                                The id may only be composed of the restricted characters a-Z, A-Z, 0-9 and _, and is also\n                                restricted to 100 characters in length.\n                            </p>\n\n                        </dd>\n                        <dt>\n                            description\n                        </dt>\n                        <dd>\n                            <p>\n                                Up to 4000 characters, a description allows you to express to other KBase users the purpose,\n                            history, associations, and science domain of your Org.</p>\n                            <p>\n                                The description is in \"markdown\" format, and the editor will show you a preview of the\n                                rendered description.\n                            </p>\n                        </dd>\n                    </dl>\n                </div>\n            )\n        })\n    }\n\n    onGravatarEmailSync() {\n        let email\n        let hashed\n        if (this.gravatarEmail.current && this.gravatarEmail.current.value) {\n            email = this.gravatarEmail.current.value.toLowerCase()\n            hashed = md5(email)\n        } else {\n            hashed = null\n        }\n        this.props.onUpdateGravatarHash(hashed);\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have entered information for this new organization.</p>\n\n                    <p>If you leave the editor without first saving, the new organization <i>will not be created</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onGravatarHashChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        this.props.onUpdateGravatarHash(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateId(e.target.value)\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState === ValidationState.VALID &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.saveState === SaveState.NEW\n        )\n    }\n\n    renderForm() {\n        return (\n            <form id=\"newOrganizationForm\" className=\"editor\" onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">name</div>\n                    <div className=\"col2\">\n                        <Input value={this.props.newOrganization.name.value || ''}\n                            onChange={this.onNameChange.bind(this)} />\n                        {this.props.newOrganization.name.error ? (<span style={{ color: 'red' }}>{this.props.newOrganization.name.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">is private?</div>\n                    <div className=\"col2\">\n                        <Checkbox\n                            checked={this.props.newOrganization.isPrivate.value}\n                            onChange={this.onIsPrivateChange.bind(this)} />\n                        {this.props.newOrganization.isPrivate.error ? (<span style={{ color: 'red' }}>{this.props.newOrganization.id.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row gravatarHash\">\n                    <div className=\"col1 field-label\">gravatar hash</div>\n                    <div className=\"col2\">\n                        <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '4px' }}>\n                            <div style={{ flex: '1 1 0px' }}>\n                                <input\n                                    ref={this.gravatarEmail}\n                                    placeholder=\"Provide your gravatar-linked email address, if any\" />\n                            </div>\n                            <div style={{ flex: '0 0 auto' }}>\n                                <Button\n                                    icon=\"arrow-down\"\n                                    style={{ height: '100%' }}\n                                    onClick={this.onGravatarEmailSync.bind(this)} />\n                            </div>\n                        </div>\n                        <Input\n                            value={this.props.newOrganization.gravatarHash.value || ''}\n                            onChange={this.onGravatarHashChange.bind(this)} />\n                        {this.props.newOrganization.gravatarHash.error ? (<span style={{ color: 'red' }}>{this.props.newOrganization.gravatarHash.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">id</div>\n                    <div className=\"col2\">\n                        <Input\n                            value={this.props.newOrganization.id.value || ''}\n                            onChange={this.onIdChange.bind(this)} />\n                        {this.props.newOrganization.id.error ? (<span style={{ color: 'red' }}>{this.props.newOrganization.id.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\" style={{ flex: '1 1 0px', minHeight: '30em', maxHeight: '60em' }}>\n                    <div className=\"col1 field-label\">description</div>\n                    <div className=\"col2\">\n                        <textarea value={this.props.newOrganization.description.value || ''}\n                            onChange={this.onDescriptionChange.bind(this)} />\n                        {this.props.newOrganization.description.error ? (<div style={{ color: 'red' }}>{this.props.newOrganization.description.error.message}</div>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1\"></div>\n                    <div className=\"col2\">\n                        {/* <div className=\"footer\">\n                            <Button form=\"newOrganizationForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\">Save</Button>\n                            <Button type=\"danger\"\n                                onClick={this.onClickCancel.bind(this)}>Cancel</Button>\n                        </div> */}\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    renderOrgAvatar(org: EditableOrganization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash.value} size={64} organizationName={org.name.value} organizationId={org.id.value} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Private\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Public\n            </span>\n        )\n    }\n\n    renderPreview() {\n        return <form className=\"preview\">\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"name\">\n                        {this.props.newOrganization.name.value || ''}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"name\">\n                        {this.renderIsPrivate(this.props.newOrganization.isPrivate.value)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"gravatarHash\">\n                        {this.renderOrgAvatar(this.props.newOrganization)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"id\">\n                        <span style={{ color: 'silver' }}>{this.origin}/#orgs/organizations/</span>\n                        {this.props.newOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\" style={{ flex: '1 1 0px' }}>\n                <div className=\"col2\">\n                    <div className=\"description\"\n                        dangerouslySetInnerHTML={({ __html: marked(this.props.newOrganization.description.value || '') })}\n                    />\n                </div>\n            </div>\n        </form>\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    toggleError() {\n        this.setState({ showError: !this.state.showError })\n    }\n\n    renderHeader() {\n        const orgName = this.props.newOrganization!.name.value || (<span style={{ fontStyle: 'italic', color: 'gray' }}>org name will appear here when you edit the name field</span>)\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n            )\n        }\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    {/* <FaPlusCircle style={{ verticalAlign: 'middle' }} /> */}\n                    <Icon type=\"plus-circle\" />\n                    {' '}\n                    Adding a New Org \"\n                            {orgName}\n                    \"\n                        </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"save\"\n                    form=\"newOrganizationForm\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    {/* <Icon type=\"save\" /> */}\n                    {/* <FaSave style={{ verticalAlign: 'center' }} /> */}\n                    Save\n                        </Button>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n                {errorButton}\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading New Org Editor...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderError() {\n        if (this.props.error && this.state.showError) {\n            const onOk = () => {\n                this.setState({ showError: false })\n            }\n            const onCancel = () => {\n                this.setState({ showError: false })\n            }\n            let trace\n            if (this.props.error.trace) {\n                trace = this.props.error.trace.map((line, index) => {\n                    return (\n                        <div key={\"line_\" + index}>{line}</div>\n                    )\n                })\n            }\n            if (trace) {\n                trace = (\n                    <div>\n                        <div>trace</div>\n                        {trace}\n                    </div>\n                )\n            }\n            return (\n                <Modal visible={true}\n                    title=\"Error\"\n                    okType=\"danger\"\n                    okText=\"Close\"\n                    cancelText=\"Clear Error\"\n                    onCancel={onCancel}\n                    onOk={onOk}>\n                    <div style={{ fontWeight: 'bold' }}>\n                        {this.props.error.code}\n                    </div>\n                    <div>\n                        {this.props.error.message}\n                    </div>\n                    {trace}\n\n                </Modal>\n            )\n        }\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        // TODO: this is just a prop for today.\n        if (this.props.saveState === SaveState.SAVED) {\n            return <Redirect push to={\"/editOrganization/\" + this.props.newOrganization.id.value} />\n        }\n\n        if (!this.props.newOrganization) {\n            return (\n                <div className=\"NewOrganization\">\n                    {this.renderLoadingHeader()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization\">\n                {this.renderHeader()}\n                <div className=\"mainRow\">\n                    <div className=\"editorColumn\">\n                        <h3>Editor</h3>\n                        {this.renderForm()}\n                    </div>\n                    <div className=\"previewColumn\">\n                        <h3>Preview</h3>\n                        {this.renderPreview()}\n                    </div>\n                </div>\n                {this.renderError()}\n            </div>\n        )\n    }\n}\n\nexport default NewOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditState, SaveState, ValidationState, EditableOrganization, AppError } from '../../../types';\nimport {\n    addOrg, updateName, updateGravatarHash, updateId, updateDescription, updateIsPrivate\n} from '../../../redux/actions/addOrg';\n\nimport Component from './component';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n    error: AppError | null\n}\n\nexport interface DispatchProps {\n    onSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateGravatarHash: (gravatarHash: string | null) => void\n    onUpdateId: (id: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.addOrgView.viewModel) {\n        throw new Error('View model missing in state')\n    }\n    const {\n        views: {\n            addOrgView: {\n                viewModel: { editState, saveState, validationState, newOrganization, error }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        newOrganization,\n        error\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSave: () => {\n            dispatch(addOrg() as any)\n        },\n        onUpdateName: (name) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateGravatarHash: (gravatarHash: string | null) => {\n            dispatch(updateGravatarHash(gravatarHash) as any)\n        },\n        onUpdateId: (id) => {\n            dispatch(updateId(id) as any)\n        },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { AppError, AddOrgView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\nimport './loader.css'\n\ninterface LoaderProps {\n    view: AddOrgView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading \"Add New Organization\" form...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                this.props.onLoad()\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case ComponentLoadingState.SUCCESS:\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// redux interface\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/addOrg'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.addOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.Load | actions.Unload>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as requestModel from './requests'\nimport * as orgModel from './organization/model'\nimport { RequestType } from '../../types';\n\nexport interface UberOrganization {\n    organization: orgModel.Organization\n    request: requestModel.UserRequest | null\n    invitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null\n}\n\ninterface UberModelParams {\n    token: string\n    username: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    workspaceServiceURL: string\n    serviceWizardURL: string\n}\n\nexport class UberModel {\n\n    params: UberModelParams\n\n    constructor(params: UberModelParams) {\n        this.params = params\n    }\n\n    async getOrganizationForUser(organizationId: string): Promise<UberOrganization> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        // get org\n        const organization = await orgClient.getOrg(organizationId)\n\n        // get pending requests\n        const request = await requestClient.getUserRequestForOrg(organizationId) as requestModel.UserRequest | null\n\n        const invitation = await requestClient.getUserInvitationForOrg(organizationId) as requestModel.UserInvitation | null\n\n        const relation = orgModel.determineRelation(organization, this.params.username, request, invitation)\n\n        let groupRequests\n        if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n        } else {\n            groupRequests = null\n        }\n\n        return {\n            organization, request, invitation, relation, groupRequests\n        }\n    }\n\n    async getOrganizationsForUser(): Promise<Array<UberOrganization>> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const orgs = await orgClient.getOwnOrgs()\n\n        const requestOutbox = await requestClient.getOutboundRequests()\n        const requestInbox = await requestClient.getInboundRequests()\n\n        return await Promise.all(orgs.map(async (organization) => {\n            const request = requestOutbox.find((request) => {\n                if (request.organizationId === organization.id) {\n                    if (request.type === RequestType.REQUEST &&\n                        request.resourceType === requestModel.RequestResourceType.USER) {\n                        return true\n                    }\n                }\n                return false\n            }) as requestModel.UserRequest\n\n            const invitation = requestInbox.find((request) => {\n                if (request.organizationId === organization.id) {\n                    if (request.type === RequestType.INVITATION &&\n                        request.resourceType === requestModel.RequestResourceType.USER) {\n                        return true\n                    }\n                }\n                return false\n            }) as requestModel.UserInvitation\n\n            const relation = orgModel.determineRelation(organization, this.params.username, request || null, invitation)\n\n            let groupRequests\n            if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n                relation.type === orgModel.UserRelationToOrganization.OWNER) {\n                groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organization.id)\n            } else {\n                groupRequests = null\n            }\n\n            return {\n                organization, request, invitation, relation, groupRequests\n            }\n        }))\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, UIError, UIErrorType\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\n\n\n// Action Types\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_UNLOAD\n}\n\n// Join Requests\n\nexport interface ViewOrgJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST\n    requestId: string\n}\n\nexport interface ViewOrgJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR\n    error: UIError\n}\n\n// Join Request cancellation\n\nexport interface ViewOrgCancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface ViewOrgCancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgCancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgCancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: UIError\n}\n\n// Join Invitation Acceptance\n\nexport interface AcceptJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION\n}\n\nexport interface AcceptJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n}\n\nexport interface AcceptJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface AcceptJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Join Invitation Denial\n\nexport interface RejectJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION\n}\n\nexport interface RejectJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n}\n\nexport interface RejectJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface RejectJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Delete Narrative\n\nexport interface RemoveNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE\n}\n\nexport interface RemoveNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n}\n\nexport interface RemoveNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface RemoveNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\n\nexport function removeNarrativeStart(): RemoveNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n    }\n}\n\nexport function removeNarrativeSuccess(narrative: orgModel.NarrativeResource): RemoveNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function removeNarrativeError(error: AppError): RemoveNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function removeNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeNarrativeStart())\n\n        // TODO: need to restructure this view -- this is crazy\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const groupId = organization.id\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n\n        try {\n            await orgClient.removeNarrativeFromOrg(groupId, narrative.workspaceId)\n            dispatch(removeNarrativeSuccess(narrative))\n        } catch (ex) {\n            dispatch(removeNarrativeError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_START\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_UNLOAD\n    }\n}\n\nexport function loadSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_SUCCESS,\n        organization, relation, groupRequests, groupInvitations,\n        requestInbox, requestOutbox\n    }\n}\n\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\n// Join requests\n\nexport function viewOrgJoinRequestStart(): ViewOrgJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgJoinRequestSuccess(): ViewOrgJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgJoinRequestError(error: UIError): ViewOrgJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Join Request Cancellation\n\nexport function viewOrgCancelJoinRequestStart(): ViewOrgCancelJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgCancelJoinRequestSuccess(): ViewOrgCancelJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgCancelJoinRequestError(error: UIError): ViewOrgCancelJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Invitation Acceptance\n\nexport function acceptJoinInvitationStart(): AcceptJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n    }\n}\n\nexport function acceptJoinInvitationSuccess(): AcceptJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function acceptJoinInvitationError(error: AppError): AcceptJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Invitation Rejection \n\nexport function rejectJoinInvitationStart(): RejectJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n    }\n}\n\nexport function rejectJoinInvitationSuccess(): RejectJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function rejectJoinInvitationError(error: AppError): RejectJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n\n// Join invitation acceptance\n\n// TODO\n\n// Thunks\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n            } else {\n                orgRequests = null\n                orgInvitations = null\n            }\n\n            let requestInbox: Array<requestModel.Request>\n            let requestOutbox: Array<requestModel.Request>\n            // if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            //     relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            //     relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n            requestOutbox = await requestClient.getRequestOutboxForOrg(organizationId)\n            // }\n\n            dispatch(loadSuccess(organization, relation, orgRequests, orgInvitations, requestInbox, requestOutbox))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgJoinRequest() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        //TODO: could do a start here...\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel: { organization } }\n            }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.requestMembershipToGroup(organization.id)\n            dispatch(viewOrgJoinRequestSuccess())\n            dispatch(load((organization.id)))\n        } catch (ex) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgCancelJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(viewOrgJoinRequestStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.cancelRequest(requestId)\n            dispatch(viewOrgCancelJoinRequestSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(viewOrgCancelJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.acceptJoinInvitation(requestId)\n            dispatch(acceptJoinInvitationSuccess())\n            // quick 'n easy\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(acceptJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n\nexport function rejectJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.rejectJoinInvitation(requestId)\n            dispatch(rejectJoinInvitationSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(rejectJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n","import * as React from 'react'\nimport './Member.css'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport User from './UserContainer'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface MemberProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface MemberState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nclass Member extends React.Component<MemberProps, MemberState> {\n    constructor(props: MemberProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        return (\n            <div className=\"Member View-COMPACT\" >\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n                    <div className=\"role\">\n                        {this.renderRole()}\n                    </div>\n                    <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Member View-NORMAL\" >\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n                    <div className=\"role\">\n                        {this.renderRole()}\n                    </div>\n                    <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div>\n                    <div className=\"title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n\n    // render() {\n    //     return (\n    //         <div className=\"Member\" >\n    //             <div className=\"role\">\n    //                 {this.renderRole()}\n    //             </div>\n\n    //             <User userId={this.props.member.username} avatarSize={this.props.avatarSize || 30} />\n\n    //             {/* <div className=\"avatarCol\">\n    //                 <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n    //             </div>\n    //             <div className=\"infoCol\">\n    //                 <div className=\"name\">\n    //                     <a href={\"#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n    //                     {' '}\n    //                     ❨{this.props.user.username}❩\n    //                 </div>\n\n    //                 <div className=\"title\">\n    //                     {this.props.user.title || <i>no title in user profile</i>}\n    //                 </div>\n    //                 <div className=\"organization\">\n    //                     {this.props.user.organization || <i>no organization in user profile</i>}\n    //                 </div>\n    //                 <div className=\"location\">\n    //                     {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n    //                 </div>\n    //             </div> */}\n    //         </div>\n    //     )\n    // }\n}\n\nexport default Member","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Member from './Member'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Member member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            this.props.onLoad(this.props.member.username)\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { MemberType } from '../../../types'\nimport { Icon, Tooltip, Button, message, Menu, Dropdown } from 'antd'\nimport { Redirect } from 'react-router-dom'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests'\nimport * as userModel from '../../../data/models/user'\n\nimport './component.css'\nimport OrgAvatar from '../../OrgAvatar';\nimport Owner from '../../entities/OwnerContainer';\n\n\nexport interface OrganizationHeaderProps {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    currentUsername: userModel.Username\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n    onJoinOrg: () => void\n}\n\ninterface OrganizationHeaderState {\n    navigateTo: NavigateTo\n}\n\nenum NavigateTo {\n    NONE = 0,\n    MANAGE_MEMBERSHIP,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    EDIT_ORGANIZATION,\n    INVITE_USER\n}\n\nexport class OrganizationHeader extends React.Component<OrganizationHeaderProps, OrganizationHeaderState> {\n\n    relation: orgModel.UserOrgRelation\n\n    constructor(props: OrganizationHeaderProps) {\n        super(props)\n\n        this.state = {\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.relation = this.getUserRelation()\n    }\n\n    getUserRelation(): orgModel.UserOrgRelation {\n        const currentUsername = this.props.currentUsername\n        const org = this.props.organization\n        if (currentUsername === org.owner.username) {\n            return {\n                type: orgModel.UserRelationToOrganization.OWNER\n            } as orgModel.OwnerRelation\n        } else {\n            const member = org.members.find(({ username }) => {\n                return (username === currentUsername)\n            })\n            if (member) {\n                switch (member.type) {\n                    case MemberType.MEMBER:\n                        return {\n                            type: orgModel.UserRelationToOrganization.MEMBER\n                        } as orgModel.MemberRelation\n                    case MemberType.ADMIN:\n                        return {\n                            type: orgModel.UserRelationToOrganization.ADMIN\n                        } as orgModel.AdminRelation\n                    case MemberType.OWNER:\n                        return {\n                            type: orgModel.UserRelationToOrganization.OWNER\n                        } as orgModel.OwnerRelation\n                    default:\n                        return {\n                            type: orgModel.UserRelationToOrganization.NONE\n                        } as orgModel.NoRelation\n                }\n            } else if (this.props.pendingJoinRequest && this.props.pendingJoinRequest.user === currentUsername) {\n                return {\n                    type: orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                    requestId: this.props.pendingJoinRequest.id\n                } as orgModel.MembershipRequestPendingRelation\n            } else if (this.props.pendingJoinInvitation && this.props.pendingJoinInvitation.user === currentUsername) {\n                return {\n                    type: orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                    requestId: this.props.pendingJoinInvitation.id\n                } as orgModel.MembershipInvitationPendingRelation\n            } else {\n                return {\n                    type: orgModel.UserRelationToOrganization.VIEW\n                } as orgModel.ViewRelation\n            }\n        }\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n        message.success('Join request has been submitted')\n    }\n\n    // LEFT OFF HERE... \n    // OK ... the relation should actually capture more info ... such as the request id\n    // but in reality don't we always have just one of request or invitation (or none)?\n    // in which case, we can just pick the appropriate one.\n    // but ... it also makes sense for the relation to carry information appropriate for the\n    // relation.\n\n    onCancelJoinRequest() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n        message.success('Submitted cancellation request')\n    }\n\n    onAcceptInvitation() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n        message.success('Invitation acceptance has been sent')\n    }\n\n    onRejectInvitation() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n        message.success('Invitation rejection has been sent')\n    }\n\n    onNavigateToMembership() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n    }\n\n    onNavigateToViewMembers() {\n        this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n    }\n\n    onNavigateToManageRequests() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n    }\n\n    onNavigateToEditOrganization() {\n        this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n    }\n\n    onNavigateToInviteUser() {\n        this.setState({ navigateTo: NavigateTo.INVITE_USER })\n    }\n\n    onNavigateToViewOrganization() {\n        this.setState({ navigateTo: NavigateTo.VIEW_ORGANIZATION })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ navigateTo: NavigateTo.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n        }\n    }\n\n\n    renderOrgAvatar(org: orgModel.Organization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash} size={64} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n\n    renderRelation() {\n        const org = this.props.organization\n        switch (this.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <div>\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title=\"You are not a member of this org, but you may access it, you may request membership\"\n                        >\n                            <div style={{ textAlign: 'center' }}>\n                                <Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization\n                            </div>\n                        </Tooltip>\n                        <div style={{ textAlign: 'center' }}>\n                            <Button\n                                type=\"primary\"\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </div>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title=\"You have requested membership in this Organization\"\n                        >   <div style={{ textAlign: 'center' }}>\n                                <span>\n                                    <Icon type=\"user\" style={{ color: 'orange' }} spin={true} />\n                                    Your membership <b>request</b> is pending\n                                {' '}\n                                    <Icon type=\"question-circle\" />\n                                </span>\n                            </div>\n                        </Tooltip>\n                        <div style={{ textAlign: 'center' }}>\n                            <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this Organization\"\n                    >\n                        <div style={{ textAlign: 'center' }}>\n                            <div>\n                                <Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization\n                            </div>\n                            <div>\n                                <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                                <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                            </div>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            Manage My Membership\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You are a member of this organization\"\n                            >\n                                <div><Icon type=\"user\" />You are a <b>member</b> of this Organization</div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={menu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                        {/* <div style={{ textAlign: 'center' }}>\n                            <Button type=\"default\">Manage your Profile</Button>\n                        </div> */}\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"viewMembers\">\n                            Members\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRequests\">\n                            Requests and Invitations\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            Invite User\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You are an Administrator for this organization\"\n                            >\n                                <div><Icon type=\"unlock\" />You are a <b>administrator</b> of this Organization</div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={adminMenu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                        {/* <div style={{ textAlign: 'center' }}>\n                            <Button type=\"default\">Manage your Profile</Button>\n                        </div> */}\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"viewMembers\" >\n                            Members\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRequests\">\n                            Requests and Invitations\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            Invite User\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You own this organization\"\n                            >\n                                <div>\n                                    <Icon type=\"crown\" style={{ color: 'gold' }} />\n                                    {' '}\n                                    You <b>own</b> this Organization\n                                    </div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={ownerMenu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                        {/* <div style={{ textAlign: 'center' }}>\n                        <Button type=\"default\">Manage your Profile</Button>\n                    </div> */}\n                    </div>\n                )\n        }\n    }\n\n    renderOrgInfo() {\n        const org = this.props.organization\n        return (\n            <React.Fragment>\n                <div className=\"name\">\n                    {org.name}\n                </div>\n                {/* <div className=\"id\">\n                    <span className=\"label\">permalink</span>{' '}\n                    <span className=\"permalinkBase\">https://narrative.kbase.us#orgs/</span>{org.id}\n                </div> */}\n                <div className=\"owner\">\n                    <Owner member={org.owner} avatarSize={20} />\n                </div>\n\n                {/* <div className=\"owner\">\n                    <span className=\"field-label\">owner</span>\n                    <a href={\"#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                    {' '}\n                    ❨{org.owner.username}❩\n                                </div> */}\n            </React.Fragment>\n        )\n    }\n\n    getRelationClass(org: orgModel.Organization) {\n        switch (this.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'relationRequest'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'relationRequest relationNonMember'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'relationRequest relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'relationRequest relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'relationRequest relationMember'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'relationRequest relationAdmin'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'relationRequest relationOwner'\n        }\n    }\n\n    render() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        switch (this.state.navigateTo) {\n            case NavigateTo.MANAGE_MEMBERSHIP:\n                return <Redirect push to={\"/membership/\" + this.props.organization.id} />\n            case NavigateTo.VIEW_MEMBERS:\n                return <Redirect push to={\"/viewMembers/\" + this.props.organization.id} />\n            case NavigateTo.EDIT_ORGANIZATION:\n                return <Redirect push to={\"/editOrganization/\" + this.props.organization.id} />\n            case NavigateTo.MANAGE_REQUESTS:\n                return <Redirect push to={\"/manageOrganizationRequests/\" + this.props.organization.id} />\n            case NavigateTo.INVITE_USER:\n                return <Redirect push to={\"/inviteUser/\" + this.props.organization.id} />\n            case NavigateTo.VIEW_ORGANIZATION:\n                return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n            default:\n            // nothing, fall through\n        }\n\n        return (\n            <div className=\"OrganizationHeader\">\n                <div className=\"avatar\">\n                    {this.renderOrgAvatar(this.props.organization)}\n                </div>\n                <div className=\"orgInfo\">\n                    {this.renderOrgInfo()}\n                </div>\n                <div className={\"yourRelation \" + this.getRelationClass(this.props.organization)}>\n                    {this.renderRelation()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationHeader","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\n// we steal the view org actions...\nimport * as actions from '../../../redux/actions/viewOrg'\n\nimport Component from './component'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests'\nimport * as userModel from '../../../data/models/user'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    currentUsername: userModel.Username\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            organizationCentricView: { viewModel }\n        },\n        auth: { authorization: { username } }\n    } = state\n\n    if (!viewModel) {\n        throw new Error('View model is unexpectedly missing')\n    }\n\n    return {\n        organization: viewModel.organization,\n        pendingJoinRequest: viewModel.pendingJoinRequest,\n        pendingJoinInvitation: viewModel.pendingJoinInvitation,\n        currentUsername: username\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as userModel from '../../data/models/user'\nimport { AppError, StoreState } from '../../types';\n\nexport interface OrganizationCentricAction<T> extends Action<T> {\n\n}\n\nexport interface Load extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD\n}\n\nexport interface LoadStart extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START\n    }\n}\n\nexport function loadSuccess({\n    organization,\n    pendingJoinRequest,\n    pendingJoinInvitation,\n    relation\n}: {\n        organization: orgModel.Organization,\n        pendingJoinRequest: requestModel.UserRequest | null,\n        pendingJoinInvitation: requestModel.UserInvitation | null,\n        relation: orgModel.Relation\n    }\n): LoadSuccess {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n        organization, pendingJoinRequest, pendingJoinInvitation, relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD\n    }\n}\n\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, ValidityState, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n\n        try {\n            // get org\n            const organization = await orgClient.getOrg(organizationId)\n\n            // get pending requests\n            const request = await requestClient.getUserRequestForOrg(organizationId)\n            const invitation = await requestClient.getUserInvitationForOrg(organizationId)\n\n            const relation = orgModel.determineRelation(organization, username, request, invitation)\n\n            // current username is already here.\n            dispatch(loadSuccess({\n                organization, relation,\n                pendingJoinRequest: request,\n                pendingJoinInvitation: invitation\n            }))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}","import * as React from 'react'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: types.OrganizationCentricView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading header...\n            </div>\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/organizationCentric'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.OrganizationCentricView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.organizationCentricView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as feedsApi from '../apis/feeds'\nimport { string } from 'prop-types';\n\nexport type NotificationID = string\n\nexport enum Level {\n    ALERT = 0,\n    ERROR,\n    WARNING,\n    REQUEST\n}\n\nexport interface Context { }\n\nexport interface Notification {\n    id: NotificationID\n    actor: string\n    verb: string\n    object: string\n    target: Array<string>\n    source: string\n    level: Level\n    seen: boolean\n    createdAt: Date\n    expiresAt: Date\n    externalKey?: string\n    context?: Context\n}\n\nfunction convertLevel(level: string) {\n    switch (level) {\n        case 'alert':\n            return Level.ALERT\n        case 'error':\n            return Level.ERROR\n        case 'warning':\n            return Level.WARNING\n        case 'request':\n            return Level.REQUEST\n        default:\n            throw new Error('Invalid level value: ' + level)\n    }\n}\n\nexport interface FeedsClientParams {\n    token: string\n    feedsServiceURL: string\n}\n\nexport class FeedsClient {\n    params: FeedsClientParams\n    feedsClient: feedsApi.FeedsClient\n    constructor(params: FeedsClientParams) {\n        this.params = params\n        this.feedsClient = new feedsApi.FeedsClient({\n            token: this.params.token,\n            url: this.params.feedsServiceURL\n        })\n    }\n\n    async getNotifications(): Promise<Array<Notification>> {\n        const notifications = await this.feedsClient.getNotifications()\n\n        return notifications.user.feed.map((notification) => {\n            const { id, actor, verb, object, target, source, level, seen,\n                created, expires, external_key, context } = notification\n            return {\n                id, actor, verb, object, target, source,\n                level: convertLevel(level),\n                seen,\n                createdAt: new Date(created), expiresAt: new Date(expires),\n                externalKey: external_key, context\n            }\n        })\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { Button, Tooltip, Icon, Drawer } from 'antd';\n\nexport interface Props {\n    narrative: orgModel.NarrativeResource\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\ninterface State {\n    requestAccess: boolean\n}\n\nexport default class OrganizationNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            requestAccess: false\n        }\n    }\n\n    onGetViewAccess() {\n        this.props.onGetViewAccess(this.props.narrative)\n    }\n\n    onRequestAccess() {\n        this.setState({ requestAccess: true })\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: false })\n    }\n\n    renderNarrativePermission(narrative: orgModel.NarrativeResource) {\n        let label\n        let shareButton\n        let permissionTooltip\n        let buttonTooltip\n        switch (narrative.permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                if (narrative.isPublic) {\n                    permissionTooltip = \"You have View access to this narrative narrative because it is shared publicly; you may view it, but not edit, run, or share it\"\n                    label = (\n                        <span>\n                            View Only (public)\n                            </span>\n                    )\n                    buttonTooltip = 'Although you have View-Only access to this Narrative due to it being shared globally, you can obtain personal View-Only access by clicking this button'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for Access\n                        </Button>\n                    )\n                } else {\n                    permissionTooltip = \"You have No access to this narrative narrative; you may not view, edit, run, or share it\"\n                    label = (\n                        <span>\n                            No Access\n                        </span>\n                    )\n                    buttonTooltip = 'You cannot access this Narrative; in order to immediately obtain View-Only access click this button.'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for Access\n                        </Button>\n                    )\n                }\n                break\n            case orgModel.UserWorkspacePermission.VIEW:\n                permissionTooltip = \"You have View access to this narrative narrative; you may view it, but not edit, run, or share it\"\n                label = (\n                    <span>\n                        View Only\n                        </span>\n                )\n                buttonTooltip = 'You already have View-Only access to this Narrative, but may request additional access'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Additional Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.EDIT:\n                permissionTooltip = \"You have Edit access to this Narrative; you may view, edit, and run, but not share it\"\n                label = (\n                    <span>\n                        Edit\n                        </span>\n                )\n                buttonTooltip = 'You already have Edit access to this Narrative, but may request additional access by clicking this button'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Admin Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.ADMIN:\n                permissionTooltip = \"You have Admin access to this narrative narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Admin\n                        </span>\n                )\n                break\n            case orgModel.UserWorkspacePermission.OWNER:\n                permissionTooltip = \"You are the Owner of this narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Owner\n                        </span>\n                )\n                break\n            default:\n                label = (\n                    <span>\n                        Unknown\n                    </span>\n                )\n        }\n\n        return (\n            <React.Fragment>\n                <Tooltip title={permissionTooltip} placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <span className=\"field-label\">your permission</span>\n                        {label}\n                    </span>\n                </Tooltip>\n                {' '}\n                <Tooltip title={buttonTooltip} placement=\"right\">\n                    {shareButton}\n                </Tooltip>\n            </React.Fragment>\n        )\n    }\n\n    renderPublicPermission(narrative: orgModel.NarrativeResource) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"globe\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderNarrative() {\n        const narrative = this.props.narrative\n        if (narrative.permission === orgModel.UserWorkspacePermission.NONE) {\n            return (\n                <React.Fragment>\n                    <div className=\"title\">{narrative.title}</div>\n                    <div>{this.renderPublicPermission(narrative)}</div>\n                    <div>{this.renderNarrativePermission(narrative)}</div>\n\n                    {/* <div><i>abstract here?</i></div> */}\n                    <div><i>One-liner abstract?</i></div>\n                    <div><i>created, saved info here?</i></div>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <div className=\"title\"><a href={'https://ci.kbase.us/narrative/ws.' + narrative.workspaceId + '.obj.' + '1'} target=\"_blank\">{narrative.title}</a></div>\n                    <div>{this.renderPublicPermission(narrative)}</div>\n                    <div>{this.renderNarrativePermission(narrative)}</div>\n\n                    {/* <div><i>abstract here?</i></div> */}\n                    <div><i>One-liner abstract?</i></div>\n                    <div><i>created, saved info here?</i></div>\n                </React.Fragment>\n            )\n        }\n    }\n\n    render() {\n        let accessModal\n        if (this.state.requestAccess) {\n            // TODO: replace with our own implementation...n\n            accessModal = (\n                <Drawer title=\"Request Access to Narrative\"\n                    placement=\"right\"\n                    closable={true}\n                    visible={true}\n                    onClose={() => { this.onCloseRequestAccess.call(this) }}\n                >\n                    Requesting access...\n                </Drawer>\n            )\n        }\n\n        return (\n            <div>\n                {this.renderNarrative()}\n                {accessModal}\n            </div>\n        )\n    }\n}","\n/*\n{\n    \"id\": string - a unique id for the notification,\n    \"actor\": string - the actor who triggered the notification,\n    \"verb\": string - the action represented by this notification (see list of verbs below),\n    \"object\": string - the object of the notification,\n    \"target\": list - the target(s) of the notification,\n    \"source\": string - the source service that created the notification,\n    \"level\": string, one of alert, error, warning, request,\n    \"seen\": boolean, if true, then this has been seen before,\n    \"created\": int - number of milliseconds since the epoch, when the notification was created,\n    \"expires\": int - number of milliseconds since the epoch, when the notification will expire, and will no longer be seen.\n    \"external_key\": string - (optional) a external key that has meaning for the service that created the notification. Meant for use by other services.\n    \"context\": structure - (optional) a (mostly) freely open structure with meaning for the service that created it. The special keys `text` and `link` are intended to be used by the front end viewers. A `link` becomes a hyperlink that would link to some relevant place. `text` gets interpreted as the intended text of the notification, instead of automatically generating it.\n}\n*/\n\nexport interface Notification {\n    id: string\n    actor: string\n    verb: string\n    object: string\n    target: Array<string>\n    source: string\n    level: string\n    seen: boolean\n    created: number\n    expires: number\n    external_key?: string\n    context?: {}\n}\n\nexport interface GetNotificationsResult {\n    group: {\n        feed: Array<Notification>\n        unseen: number\n    }\n    user: {\n        feed: Array<Notification>\n        unseen: number\n    }\n}\n\nexport interface FeedsClientParams {\n    token: string\n    url: string\n}\n\ninterface APIResponse { }\n\nexport class FeedsClient {\n    params: FeedsClientParams\n\n\n    constructor(params: FeedsClientParams) {\n        this.params = params\n    }\n\n    async get(path: Array<string>): Promise<APIResponse> {\n        const url = [this.params.url, 'api', 'V1'].concat(path).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.params.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n\n        if (response.headers.get('Content-Type') === 'application/json') {\n            if (response.status === 200) {\n                const result = await response.json()\n                return result\n            }\n            throw new Error('Non-success response: ' + response.status + ': ' + response.statusText)\n        } else {\n            const textResult = await response.text()\n            throw new Error('Non-JSON response' + textResult)\n        }\n    }\n\n    async getNotifications(): Promise<GetNotificationsResult> {\n        const notifications = await this.get(['notifications'])\n        return notifications as GetNotificationsResult\n    }\n}\n\nexport default FeedsClient","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState, MemberType, ViewOrgState } from '../../types'\nimport * as orgsModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\n// temp\nimport { FeedsClient } from '../../data/models/feeds'\n\nexport interface DashboardAction<T> extends Action<T> {\n\n}\n\nexport interface Load extends DashboardAction<ActionFlag.DASHBOARD_LOAD> {\n    type: ActionFlag.DASHBOARD_LOAD\n}\n\nexport interface LoadStart extends DashboardAction<ActionFlag.DASHBOARD_LOAD_START> {\n    type: ActionFlag.DASHBOARD_LOAD_START\n}\n\nexport interface LoadSuccess extends DashboardAction<ActionFlag.DASHBOARD_LOAD_SUCCESS> {\n    type: ActionFlag.DASHBOARD_LOAD_SUCCESS\n    organizations: Array<uberModel.UberOrganization>\n    // users: Map<userModel.Username, userModel.User>\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    pendingGroupRequests: Array<requestModel.Request>\n}\n\nexport interface LoadError extends DashboardAction<ActionFlag.DASHBOARD_LOAD_ERROR> {\n    type: ActionFlag.DASHBOARD_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends DashboardAction<ActionFlag.DASHBOARD_UNLOAD> {\n    type: ActionFlag.DASHBOARD_UNLOAD\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.DASHBOARD_LOAD_START\n    }\n}\n\nexport function loadSuccess(\n    organizations: Array<uberModel.UberOrganization>,\n    // users: Map<userModel.Username, userModel.User>,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    pendingGroupRequests: Array<requestModel.Request>): LoadSuccess {\n    return {\n        type: ActionFlag.DASHBOARD_LOAD_SUCCESS,\n        organizations: organizations,\n        // users: users,\n        requestInbox,\n        requestOutbox,\n        pendingGroupRequests: pendingGroupRequests\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.DASHBOARD_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.DASHBOARD_UNLOAD\n    }\n}\n\n// Thunks\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, DashboardAction<any>>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            views: {\n                dashboardView\n            },\n            entities,\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // if (dashboardView === null) {\n        //     dispatch(searchOrgsError({\n        //         code: 'invalid-state',\n        //         message: 'Search orgs may not be called without a defined view'\n        //     }))\n        //     return\n        // }\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            serviceWizardURL: config.services.ServiceWizard.url\n        })\n\n        // const orgModel = new organizationsModel.OrganizationModel({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url\n        // })\n\n        // const userModelClient = new userModel.UserModel({\n        //     token,\n        //     userProfileServiceURL: config.services.UserProfile.url\n        // })\n\n        const requestModelClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        // TODO:\n\n        // get the projection, or view:\n        // - orgs of current user\n        // - requests created by or targeting current user\n        try {\n            const orgs = await uberClient.getOrganizationsForUser()\n            // const orgs = await orgModel.getOwnOrgs()\n\n            const allUsers: Map<userModel.Username, boolean> = new Map()\n\n            // orgs.forEach((org) => {\n            //     allUsers.set(org.owner.username, true)\n            //     org.members.forEach((member) => {\n            //         allUsers.set(member.username, true)\n            //     })\n            // })\n\n            // const users = await userModelClient.getUsers(Array.from(allUsers.keys()))\n\n            const requestOutbox = await requestModelClient.getOutboundRequests()\n\n            const requestInbox = await requestModelClient.getInboundRequests()\n\n            const adminOrgIds = orgs\n                .filter(({ organization }) => {\n                    // TODO: why not have relation on org, again?   \n                    if (organization.owner.username === username) {\n                        return true\n                    }\n                    if (organization.members.find((member) => {\n                        return (member.username === username && member.type === MemberType.ADMIN)\n                    })) {\n                        return true\n                    }\n                    return false\n                })\n                .map(({ organization }) => {\n                    return organization.id\n                })\n\n            const pendingGroupRequests = await requestModelClient.getPendingOrganizationRequests(adminOrgIds)\n\n            // now notifications???\n            const feedsClient = new FeedsClient({\n                token,\n                feedsServiceURL: config.services.Feeds.url\n            })\n            const notifications = await feedsClient.getNotifications()\n\n            dispatch(loadSuccess(orgs, requestInbox, requestOutbox, pendingGroupRequests))\n        } catch (ex) {\n            dispatch(loadError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n\n        // resolve all data!\n        // - orgs\n        // - requests\n        // - users (org members, owner, request requester, resource)\n\n        // fetch current orgs for this user\n\n        // const groupsInStore: Array<groups.Group> = []\n        // const groupsNeeded: Array<string> = []\n        // orgs.organizations forEach((groupId) => {\n        //     const org = entities.orgs.byId.get(groupId)\n        //     if (org) {\n        //         groupsInStore.push(org.group)\n        //     } else {\n        //         groupsNeeded.push(groupId)\n        //     }\n        // })\n\n        // for each org\n        // look for org entity in store.\n        // if don't have fetch\n        // look for sub-entities\n        // - users (members, admins, owner)\n        //   - look for user entities\n        //   - if don't find, fetch \n        // \n        // fetch all requests for user\n        // do the lookup, fetch cycle\n        // subentities:\n        // - users\n        // - orgs (should be covered by above... but some requests may \n        //         reference orgs this user does not have access to ... sigh ...)\n\n        // try {\n        //     const [orgs, requests, invitations] = await Promise.all([\n        //         model.ownOrgs(username),\n        //         model.getUserRequests(),\n        //         model.getUserInvitations()\n        //     ])\n\n        //     // const orgs = await model.ownOrgs(username)\n        //     dispatch(loadSuccess(orgs.organizations, requests, invitations))\n        // } catch (ex) {\n        //     dispatch(loadError({\n        //         code: 'error',\n        //         message: ex.message\n        //     }))\n        // }\n    }\n}\n\n\n// Requests\n\n// Cancel outbox request\n\nexport interface CancelOutboxRequest extends DashboardAction<ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST> {\n    type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface CancelOutboxRequestStart extends DashboardAction<ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_START> {\n    type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_START\n}\n\nexport interface CancelOutboxRequestSuccess extends DashboardAction<ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n}\n\ninterface CancelOutboxRequestError extends DashboardAction<ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR> {\n    type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function cancelOutboxRequest(request: requestModel.Request) {\n    return async (dispatch: ThunkDispatch<StoreState, void, DashboardAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        if (!state.views.dashboardView.viewModel) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No dashboard view model'\n                }\n            })\n        }\n\n        dispatch({\n            type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            const newRequest = await requestClient.cancelRequest(request.id)\n\n            // refetch the inbox\n            const outbox = await requestClient.getOutboundRequests()\n\n            dispatch({\n                type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_SUCCESS,\n                requests: outbox\n            })\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_CANCEL_OUTBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}\n\n// Accept inbound request\n\nexport interface AcceptInboxRequest extends DashboardAction<ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST> {\n    type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface AcceptInboxRequestStart extends DashboardAction<ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_START> {\n    type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_START\n}\n\nexport interface AcceptInboxRequestSuccess extends DashboardAction<ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n    organizations: Array<uberModel.UberOrganization>\n}\n\ninterface AcceptInboxRequestError extends DashboardAction<ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptInboxRequest(request: requestModel.Request) {\n    return async (dispatch: ThunkDispatch<StoreState, void, DashboardAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        if (!state.views.dashboardView.viewModel) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No dashboard view model'\n                }\n            })\n        }\n\n        dispatch({\n            type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            serviceWizardURL: config.services.ServiceWizard.url\n        })\n\n\n        try {\n            const newRequest = await requestClient.acceptRequest(request.id)\n\n            // refetch the inbox\n            const outbox = await requestClient.getInboundRequests()\n\n            const orgs = await uberClient.getOrganizationsForUser()\n\n            dispatch({\n                type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_SUCCESS,\n                requests: outbox,\n                organizations: orgs\n            })\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}\n\n\n// Reject inbound request\n\nexport interface RejectInboxRequest extends DashboardAction<ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST> {\n    type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface RejectInboxRequestStart extends DashboardAction<ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_START> {\n    type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_START\n}\n\nexport interface RejectInboxRequestSuccess extends DashboardAction<ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\ninterface RejectInboxRequestError extends DashboardAction<ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function rejectInboxRequest(request: requestModel.Request) {\n    return async (dispatch: ThunkDispatch<StoreState, void, DashboardAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        if (!state.views.dashboardView.viewModel) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No dashboard view model'\n                }\n            })\n        }\n\n        dispatch({\n            type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.denyRequest(request.id)\n\n            // refetch the inbox\n            const outbox = await requestClient.getInboundRequests()\n\n            dispatch({\n                type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_SUCCESS,\n                requests: outbox\n            })\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.DASHBOARD_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}","export function niceElapsed(someDate: Date) {\n    const nowDate = new Date()\n\n    const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n    const elapsedAbs = Math.abs(elapsed);\n\n    let measure, measureAbs, unit;\n    const maxDays = 90\n    if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n        if (elapsedAbs === 0) {\n            return 'now';\n        } else if (elapsedAbs < 60) {\n            measure = elapsed;\n            measureAbs = elapsedAbs;\n            unit = 'second';\n        } else if (elapsedAbs < 60 * 60) {\n            measure = Math.round(elapsed / 60);\n            measureAbs = Math.round(elapsedAbs / 60);\n            unit = 'minute';\n        } else if (elapsedAbs < 60 * 60 * 24) {\n            measure = Math.round(elapsed / 3600);\n            measureAbs = Math.round(elapsedAbs / 3600);\n            unit = 'hour';\n        } else {\n            measure = Math.round(elapsed / (3600 * 24));\n            measureAbs = Math.round(elapsedAbs / (3600 * 24));\n            unit = 'day';\n        }\n\n        if (measureAbs > 1) {\n            unit += 's';\n        }\n\n        let prefix = null;\n        let suffix = null;\n        if (measure < 0) {\n            prefix = 'in';\n        } else if (measure > 0) {\n            suffix = 'ago';\n        }\n\n        return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n    } else {\n        // otherwise show the actual date, with or without the year.\n        if (nowDate.getFullYear() === nowDate.getFullYear()) {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric'\n            }).format(someDate)\n            // return shortMonths[date.getMonth()] + ' ' + date.getDate();\n        } else {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            }).format(someDate)\n            // return shortMonths[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n        }\n    }\n}\n","import * as React from 'react'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport { NavLink } from 'react-router-dom';\n\nimport './OrganizationCompact.css'\nimport { Icon } from 'antd';\nimport OrgAvatar from '../../OrgAvatar';\n\nexport interface OrganizationProps {\n    organization: orgModel.Organization\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\ninterface OrganizationState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class OrganizationCompact extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderAvatar(org: orgModel.Organization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash} size={32} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderMemberCount(org: orgModel.Organization) {\n        return (\n            <div className=\"memberCount\">\n                {org.members.length > 0 ? org.members.length : 'no'} {this.pluralize(org.members.length, 'member', 'members')}\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationCompact\" key={org.id}>\n                <div className=\"avatarCol\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderAvatar(org)}\n                    </NavLink>\n                </div>\n                <div className=\"bodyCol\">\n                    <div className=\"orgName\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n                    <div className=\"orgOwner\">\n                        <span className=\"field-label\">owner</span>\n                        <span className=\"field-value\"><a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username} ❨{org.owner.username}❩</a></span>\n\n                    </div>\n                    <div className=\"orgCreated\">\n                        <span className=\"field-label\">established</span>\n                        <span className=\"field-value\">{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(org.createdAt)}</span>\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    renderCompact() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationCompact\" key={org.id}>\n                <div className=\"avatarCol\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderAvatar(org)}\n                    </NavLink>\n                </div>\n                <div className=\"bodyCol\">\n                    <div className=\"orgName\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport OrganizationCompact from './OrganizationCompact'\n\ninterface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    organization: orgModel.Organization | undefined\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.organization) {\n            return (\n                <OrganizationCompact organization={this.props.organization} />\n            )\n        } else {\n            this.props.onLoad(this.props.organizationId)\n            return (\n                <div>\n                    Loading org...\n                </div>\n            )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types';\nimport * as actions from '../../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    organization: orgModel.Organization | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        organization: state.entities.orgs.byId.get(props.organizationId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.organizationLoader(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { Tooltip, Icon } from 'antd';\nimport './Narrative.css'\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"globe\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let label\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                label = 'View-Only'\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                label = 'Edit'\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                label = 'Admin'\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                label = 'Owner'\n                break\n            default:\n                label = 'Unknown'\n        }\n        return (\n            <span>\n                {label}\n            </span>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"title\">\n                        {narrative.title}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n        // const narrative = this.props.narrative\n        return (\n            <React.Fragment>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"title\">\n                        {narrative.title}\n                    </div>\n                    <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">owner</span>{narrative.owner}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">last saved</span>{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>{narrative.lastSavedBy}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact(narrative)}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal(narrative)}\n                    </div>\n                )\n        }\n\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as orgModel from '../../data/models/organization/model'\nimport Narrative from './Narrative'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            this.props.onLoad(this.props.workspaceId)\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types'\nimport * as actions from '../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport './User.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Button, Icon } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\ninterface UserState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nfunction viewLabel(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return 'Compact'\n        case View.NORMAL:\n            return 'Normal'\n    }\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderCompact() {\n        return (\n            <React.Fragment>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            this.props.onLoad(this.props.userId)\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as formatters from '../../../data/formatters'\nimport OrganizationCompact from './OrganizationCompactContainer';\nimport Narrative from '../../entities/NarrativeContainer';\nimport User from '../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './InboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    onAcceptRequest() {\n        this.props.onAcceptInboxRequest(this.props.request)\n    }\n\n    onRejectRequest() {\n        this.props.onRejectInboxRequest(this.props.request)\n    }\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                {/* <div className=\"requestType\">{this.renderRequestSentType(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requestSubject\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                {/* <div className=\"requestType\">{this.renderRequestReceivedType(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {/* <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">with organization</div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"default\" onClick={this.onAcceptRequest.bind(this)}>\n                        <Icon type=\"check\" />\n                        Accept\n                        </Button>\n                    <Button type=\"danger\" onClick={this.onRejectRequest.bind(this)}>\n                        <Icon type=\"cross\" />\n                        Reject\n                        </Button>\n                    {/* <Button>\n                            <Icon type=\"eye\" />\n                            Visit\n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                {/* <div className=\"requestType\">{this.renderRequestReceivedType(request)}</div> */}\n\n                <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    from\n                </div>\n                <User userId={request.requester} avatarSize={30} />\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"InboxRequest\">\n                <div className=\"requestHeader\">\n                    <div className=\"requestHeaderRow\">\n                        <div className=\"requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {formatters.niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"requestBody\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../data/models/requests'\nimport { StoreState } from '../../../types';\nimport * as actions from '../../../redux/actions/dashboard'\nimport InboxRequest from './InboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptInboxRequest: (request: requestModel.Request) => {\n            dispatch(actions.acceptInboxRequest(request) as any)\n        },\n        onRejectInboxRequest: (request: requestModel.Request) => {\n            dispatch(actions.rejectInboxRequest(request) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InboxRequest)","import * as React from 'react'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as formatters from '../../../data/formatters'\nimport OrganizationCompact from './OrganizationCompactContainer';\nimport Narrative from '../../entities/NarrativeContainer';\nimport User from '../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './OutboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    // renderRequestSentType(request: requestModel.Request) {\n    //     switch (request.type) {\n    //         case requestModel.RequestType.REQUEST:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.APP:\n    //                     return 'REQUEST to associate App'\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'REQUEST to join Organization'\n    //                 case requestModel.RequestResourceType.WORKSPACE:\n    //                     return 'REQUEST to associate Narrative'\n    //             }\n    //         case requestModel.RequestType.INVITATION:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'INVITATION to join Organization'\n    //             }\n    //     }\n    //     return 'unknown request'\n    // }\n\n    onCancelRequest() {\n        this.props.onCancelOutboxRequest(this.props.request)\n    }\n\n    onAcceptInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n    onAcceptRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <User userId={request.user} avatarSize={30} />\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                {/* <div className=\"requestType\">{this.renderRequestSentType(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                {/* <div className=\"requestType\">{this.renderRequestReceivedType(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {/* <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div> */}\n\n                <div className=\"cardSectionHeader\">with organization</div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"danger\" onClick={this.onCancelRequest.bind(this)}>\n                        <Icon type=\"cross\" />Cancel\n                        </Button>\n                    {/* <Button onClick={this.onVisitOrg.bind(this)}>\n                            <Icon type=\"eye\" />Visit \n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"miniDetail\">\n                    <OrganizationCompact organizationId={request.organizationId} />\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    sent to\n                </div>\n\n                <div className=\"miniDetail\">\n                    {this.renderRequestReceivedSubject(request)}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"OutboxRequest\">\n                <div className=\"requestHeader\">\n                    <div className=\"requestHeaderRow\">\n                        <div className=\"requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {formatters.niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"requestBody\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../data/models/requests'\nimport { StoreState } from '../../../types';\nimport * as actions from '../../../redux/actions/dashboard'\nimport OutboxRequest from './OutboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(actions.cancelOutboxRequest(request) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(OutboxRequest)","import * as React from 'react'\nimport marked from 'marked'\nimport { NavLink, Redirect } from 'react-router-dom'\n\nimport './component.css'\n\nimport { } from '../../../types'\nimport { Button, Modal, Icon, Tooltip, Card, Dropdown, Menu, Alert } from 'antd'\nimport Header from '../../Header'\nimport Member from '../../entities/MemberContainer';\nimport OrganizationHeader from '../organizationHeader/loader'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests';\nimport OrganizationNarrative from '../../OrganizationNarrative'\nimport InboxRequest from '../dashboard/InboxRequestContainer'\nimport OutboxRequest from '../dashboard/OutboxRequestContainer'\nimport OrgAvatar from '../../OrgAvatar';\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n}\n\nexport interface ViewOrganizationProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n    onViewOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            }\n        }\n    }\n\n    onViewMembers() {\n\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onRequestAddNarrative() {\n        this.setState({ navigateTo: NavigateTo.REQUEST_ADD_NARRATIVE })\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        this.props.onRemoveNarrative(narrative)\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.props.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations viewer...</p>\n                </div>\n            )\n        })\n    }\n\n    onRequestShare(narrative: orgModel.NarrativeResource) {\n        // Drawer.\n        // Drawer.open({\n        //     title: 'Request Access to Narrative',\n        //     content: 'Are you sure?'\n        // })\n        this.setState({ requestAccess: { narrative: narrative } })\n        // alert('not yet implemented')\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: { narrative: null } })\n    }\n\n    buildFooter() {\n        return (\n            <div>\n                {this.renderEditRow()}\n                {/* <p style={{ textAlign: 'center' }}>\n                    You may also  <NavLink to={`/organizations`}><Button type=\"danger\" icon=\"undo\">Return to Orgs</Button></NavLink> to the organizations browser.\n                </p> */}\n            </div>\n        )\n    }\n\n    renderEditRow() {\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <p style={{ textAlign: 'center' }}>\n                    As the owner of this group, you may <NavLink to={`/editOrganization/${this.props.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink> it.\n                </p>\n            )\n        }\n    }\n\n    renderEditButton() {\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <NavLink to={`/editOrganization/${this.props.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink>\n            )\n        }\n    }\n\n    renderOrg() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <div className=\"org\">\n                {/* <div className=\"nameAndLogo\">\n                    <div className=\"avatar\">\n                        {this.renderOrgAvatar(this.props.organization)}\n                    </div>\n                    <div className=\"nameAndLink\">\n                        <div className=\"name\">\n                            {this.props.organization.name}\n                        </div>\n                        <div className=\"id\">\n                            <span className=\"label\">permalink</span>{' '}\n                            <span className=\"permalinkBase\">https://narrative.kbase.us#orgs/</span>{this.props.organization.id}\n                        </div>\n                    </div>\n                </div> */}\n                <div className=\"description\"\n                    dangerouslySetInnerHTML={({ __html: marked(this.props.organization.description || '') })}\n                />\n\n            </div>\n        )\n    }\n\n    // TODO: this should be a component, so we can pick up all the good stuff, which is now commented out...\n    renderOwnerInfo(org: orgModel.Organization) {\n        return (\n            <div className=\"ownerTable\">\n                {/* <div className=\"avatarCol\">\n                    <Avatar user={org.owner.user} size={60} />\n                </div> */}\n                <div className=\"proprietorCol\">\n\n                    <div className=\"owner\">\n                        <a href={\"#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                        {' '}\n                        ❨{org.owner.username}❩\n                                </div>\n                    {/* <div className=\"profileOrganization\">\n                        {org.owner.user.organization}\n                    </div>\n                    <div className=\"profileOrganization\">\n                        {org.owner.user.city}, {org.owner.user.state}, {org.owner.user.country}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n        // return (\n        //     <div className=\"orgHeader\">\n        //         <div className=\"avatar\">\n        //             {this.renderOrgAvatar(this.props.organization)}\n        //         </div>\n        //         <div className=\"orgInfo\">\n        //             <div className=\"name\">\n        //                 {this.props.organization.name}\n        //             </div>\n        //             <div className=\"id\">\n        //                 <span className=\"label\">permalink</span>{' '}\n        //                 <span className=\"permalinkBase\">https://narrative.kbase.us#orgs/</span>{this.props.organization.id}\n        //             </div>\n        //         </div>\n        //         <div className=\"ownerInfo\">\n        //             {this.renderOwnerInfo(this.props.organization)}\n        //         </div>\n        //         <div className=\"yourRelation\">\n        //             {this.renderRelation(this.props.organization)}\n        //         </div>\n\n        //     </div>\n        // )\n    }\n\n\n    renderOrgAvatar(org: orgModel.Organization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash} size={64} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderRelation(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org, but you may access it; you may request membership\"\n                    >\n                        <div><Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'orange' }} spin={true} />Your membership <b>request</b> is pending</div>\n                        <div><Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button></div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                            <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" />Member</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"unlock\" theme=\"filled\" style={{ marginRight: '4px' }} />You own this organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    isMember(): boolean {\n        if (!this.props.organization) {\n            return false\n        }\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    renderMembers() {\n        if (!this.isMember()) {\n            return (\n                <p className=\"message\">\n                    Sorry, organization membership restricted to members only\n                </p>\n            )\n        }\n        let members: JSX.Element | Array<JSX.Element>\n        if (this.props.organization.members.length === 0) {\n            members = (\n                <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\n                    This organization has no members\n                </p>\n            )\n        } else {\n            members = this.props.organization.members.map((member) => {\n                return (\n                    <div className=\"row\" key={member.username}>\n                        <div className=\"col0\">\n                            <Member member={member} avatarSize={50} />\n                        </div>\n                    </div>\n                )\n            })\n        }\n        return (\n            <div className=\"infoTable\">\n                {members}\n            </div>\n        )\n    }\n\n    renderInfo() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <Card\n                title={<span><Icon type=\"info-circle\"></Icon> info</span>}\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard\">\n                <div>\n                    <div>\n                        <div className=\"label\">owner</div>\n                    </div>\n                    <div className=\"ownerTable\">\n                        <Member member={this.props.organization.owner} avatarSize={50} />\n                        {/* TODO: fix avatar component */}\n                        {/* <div className=\"avatarCol\">\n                            <Avatar user={this.props.organization.owner.username} size={60} />\n                        </div>\n                        <div className=\"proprietorCol\">\n                            <div className=\"owner\">\n                                <a href={\"#people/\" + this.props.organization.owner.user.username} target=\"_blank\">{this.props.organization.owner.user.realname}</a>\n                                {' '}\n                                ❨{this.props.organization.owner.user.username}❩\n                                        </div>\n                            <div className=\"profileOrganization\">\n                                {this.props.organization.owner.user.organization}\n                            </div>\n                            <div className=\"profileOrganization\">\n                                {this.props.organization.owner.user.city}, {this.props.organization.owner.user.state}, {this.props.organization.owner.user.country}\n                            </div>\n                        </div> */}\n                    </div>\n                    <div className='infoTable'>\n                        <div className=\"row\">\n                            <div className=\"col1\">\n                                <span className=\"label\">established</span>\n                            </div>\n                            <div className=\"col2\">\n                                <div className=\"createdAt\">\n                                    {Intl.DateTimeFormat('en-US', {\n                                        month: 'long',\n                                        day: 'numeric',\n                                        year: 'numeric'\n                                    }).format(this.props.organization.createdAt)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col1\">\n                                <span className=\"label\">last updated</span>\n                            </div>\n                            <div className=\"col2\">\n                                <div className=\"modifiedAt\">\n                                    {Intl.DateTimeFormat('en-US', {\n                                        month: 'long',\n                                        day: 'numeric',\n                                        year: 'numeric'\n                                    }).format(this.props.organization.modifiedAt)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n\n    renderGroupRequestsRow() {\n        const relation = this.props.relation\n        const requests = this.props.groupRequests\n        const invitations = this.props.groupInvitations\n\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: bad. should not get here in this case...\n        if (requests === null || invitations === null) {\n            return\n        }\n        let inner\n        if (requests.length) {\n            inner = (\n                <div>\n                    group has no pending requests\n                </div>\n            )\n        } else {\n            inner = (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending request{invitations.length > 1 ? 's' : ''}\n\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.organization.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"col1\">\n                    <span className=\"label\">admin</span>\n                </div>\n                <div className=\"col2\">\n                    <div className=\"relation\">\n                        {inner}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderGroupRequests(requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>) {\n        if (!requests.length) {\n            return (\n                <div>\n                    There are no pending group requests\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> There\n                        {' '}\n                        {requests.length > 1 ? 'are' : 'is'}\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending invitation{invitations.length > 1 ? 's' : ''}\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.organization!.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        // return (\n        //     <div className=\"row\">\n        //         <div className=\"col1\">\n        //             <span className=\"label\">admin</span>\n        //         </div>\n        //         <div className=\"col2\">\n        //             <div className=\"relation\">\n        //                 {inner}\n        //             </div>\n        //         </div>\n        //     </div>\n\n        // )\n\n        // return (\n        //     <div>\n        //         <div>\n        //             <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n        //             {' '}\n        //             <span style={{ fontWeight: 'bold' }}>{org.adminRequests.length}</span>\n        //             {' '}\n        //             pending request{org.adminRequests.length > 1 ? 's' : ''}\n        //         </div>\n        //         <div>\n        //             <NavLink to={\"/manageOrganizationRequests/\" + this.props.organization!.id}>\n        //                 <Button>Manage Requests</Button>\n        //             </NavLink>\n        //         </div>\n        //     </div>\n        // )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderUserRelationship() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        return (\n            <form className=\"infoTable\">\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <span className=\"label\">your relation</span>\n                    </div>\n                    <div className=\"col2\">\n                        <div className='relation'>\n                            {this.renderRelation(this.props.organization)}\n                        </div>\n                    </div>\n                </div> */}\n                {this.renderGroupRequestsRow()}\n            </form>\n        )\n    }\n\n    renderAdminTasks() {\n        const relation = this.props.relation\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: ditto -- silly to test both conditions (this is only to make TS happy btw)\n        const { groupRequests, groupInvitations } = this.props\n        if (groupInvitations === null || groupRequests === null) {\n            return\n        }\n        const count = groupRequests.length + groupInvitations.length\n        const title = (\n            <span><Icon type=\"unlock\" />\n                {' '}\n                group requests\n                {' '}\n                <span className=\"titleCount\">({count})</span>\n            </span>\n        )\n        return (\n            <div className=\"adminTasksBox\">\n                <Card\n                    className=\"slimCard adminTasksCard\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={title} >\n                    {this.renderGroupRequests(groupRequests, groupInvitations)}\n                </Card>\n            </div>\n        )\n    }\n\n    renderJoinButton() {\n        if (!this.props.organization) {\n            return\n        }\n        if (this.props.relation.type !== orgModel.UserRelationToOrganization.VIEW) {\n            return\n        }\n        return (\n            <Button\n                onClick={this.onJoinClick.bind(this)}\n            >\n                Join this Organization\n                </Button>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <div style={{ flex: '0 0 auto' }}>\n                <span>\n                    Viewing Org \"\n                    {this.props.organization && this.props.organization.name}\n                    \"\n                </span>\n            </div>\n        )\n        const buttons = (\n            <React.Fragment>\n                {this.renderEditButton()}\n                {this.renderJoinButton()}\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderMembersCard() {\n        const extras = [\n            (\n                <NavLink\n                    key=\"viewMembers\"\n                    to={`/viewMembers/${this.props.organization!.id}`}>\n                    <Button\n                        onClick={this.onViewMembers.bind(this)}\n                        icon=\"team\"></Button>\n                </NavLink>\n            )\n        ]\n        if (!this.props.organization) {\n            return\n        }\n        // if (this.props.organization.relation.type === UserRelationToOrganization.OWNER ||\n        //     this.props.organization.relation.type === UserRelationToOrganization.ADMIN) {\n        //     extras.push((\n        //         <Button icon=\"setting\"></Button>\n        //     ))\n        // }\n        let memberCount\n        if (this.isMember()) {\n            memberCount = (\n                <span className=\"titleCount\">({this.props.organization.members.length})</span>\n            )\n        } else {\n            memberCount = ''\n        }\n        return (\n            <Card\n                className=\"slimCard membersCard\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                title={<span><Icon type=\"team\" /> members {memberCount}</span>}\n                extra={extras}\n            >\n                {this.renderMembers()}\n            </Card>\n        )\n    }\n\n    renderInboxCard() {\n        const extras: Array<JSX.Element> = []\n        const count = this.props.requestInbox.length\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                inbox\n                {' '}\n                <span className=\"titleCount\">\n                    ({count})\n                </span>\n            </span>\n        )\n        const inbox = this.props.requestInbox.map((request) => {\n            return (\n                <React.Fragment key={request.id}>\n                    <InboxRequest request={request} />\n                </React.Fragment>\n            )\n        })\n        return (\n            <Card className=\"slimCard outboxCard\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                title={title}\n                extra={extras}>\n                {inbox}\n            </Card>\n        )\n\n    }\n\n    renderOutboxCard() {\n        const extras: Array<JSX.Element> = []\n        const count = this.props.requestOutbox.length\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                outbox\n                {' '}\n                <span className=\"titleCount\">\n                    ({count})\n                </span>\n            </span>\n        )\n        const outbox = this.props.requestOutbox.map((request) => {\n            return (\n                <React.Fragment key={request.id}>\n                    <OutboxRequest request={request} />\n                </React.Fragment>\n            )\n        })\n        return (\n            <Card className=\"slimCard outboxCard\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                title={title}\n                extra={extras}>\n                {outbox}\n            </Card>\n        )\n\n    }\n\n\n    renderNarrativeMenu(narrative: orgModel.NarrativeResource) {\n        const relation = this.props.relation\n        const isAdmin = (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            relation.type === orgModel.UserRelationToOrganization.ADMIN)\n        let menu\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // should never occur\n                break;\n            case (orgModel.UserRelationToOrganization.VIEW):\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                break;\n            case (orgModel.UserRelationToOrganization.ADMIN):\n            case (orgModel.UserRelationToOrganization.OWNER):\n                menu = (\n                    <Menu onClick={({ key }) => { this.onNarrativeMenu(key, narrative) }}>\n                        <Menu.Item key=\"removeNarrative\">\n                            <Icon type=\"delete\" /> Remove Narrative from Organization\n                        </Menu.Item>\n                    </Menu>\n                )\n        }\n        if (!menu) {\n            return\n        }\n        return (\n            <Dropdown overlay={menu} trigger={['click']}>\n                <Button shape=\"circle\">\n                    <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                </Button>\n            </Dropdown>\n        )\n    }\n\n    renderNarratives() {\n        if (!this.isMember()) {\n            return (\n                <Card\n                    className=\"slimCard  narratives\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={<span><Icon type=\"folder-open\" /> narratives</span>}\n                >\n                    <p style={{ textAlign: 'center', fontStyle: 'italic' }}>\n                        Sorry, Narratives are restricted to members only\n                </p>\n                </Card>\n            )\n        }\n        const extras = [\n            (\n                <NavLink\n                    key=\"requestAddNarrative\"\n                    to={`/requestAddNarrative/${this.props.organization!.id}`}>\n                    <Button\n                        onClick={this.onRequestAddNarrative.bind(this)}>\n                        <Icon type=\"plus\" /> Add a Narrative\n                    </Button>\n                </NavLink>\n            )\n        ]\n\n        if (this.props.organization.narratives.length === 0) {\n            const message = 'Sorry, no Narratives are yet associated with this Organization'\n            return (\n                <Card\n                    className=\"slimCard  narratives\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={<span><Icon type=\"folder-open\" /> narratives (none)</span>}\n                    extra={extras}\n                >\n                    <Alert type=\"info\" message={message} />\n                </Card>\n            )\n\n        }\n\n        const narrativesTable = this.props.organization.narratives.map((narrative) => {\n            // create buttons or not, depending on being an admin\n\n            return (\n                <div className=\"narrative\" key={String(narrative.workspaceId)}>\n                    <div className=\"dataCol\">\n                        <OrganizationNarrative\n                            narrative={narrative}\n                            onGetViewAccess={this.props.onGetViewAccess} />\n                    </div>\n                    <div className=\"buttonCol\">\n                        {this.renderNarrativeMenu(narrative)}\n                    </div>\n                </div>\n            )\n        })\n\n        const narrativeCount = this.props.organization.narratives.length\n        const title = (\n            <span>\n                <Icon type=\"folder-open\" />\n                {' '}\n                narratives\n                {' '}\n                <span className=\"titleCount\">({narrativeCount})</span>\n            </span>\n        )\n        return (\n            <Card\n                className=\"slimCard narratives narrativesCard scrollable-flex-column\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                title={title}\n                extra={extras}\n            >\n                <div className=\"narrativesTable\">\n                    {narrativesTable}\n                </div>\n            </Card>\n        )\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.REQUEST_ADD_NARRATIVE:\n                return (\n                    <Redirect to={\"/requestAddNarrative\"} />\n                )\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n        let accessModal\n        if (this.state.requestAccess.narrative && this.props.organization) {\n            // TODO: replace with our own implementation...n\n            // accessModal = (\n            //     <Drawer title=\"Request Access to Narrative\"\n            //         placement=\"right\"\n            //         closable={true}\n            //         visible={true}\n            //         onClose={() => { this.onCloseRequestAccess.call(this) }}\n            //     >\n            //         Requesting access...\n            //     </Drawer>\n            // )\n            const relation = this.props.relation\n            const isMember = relation.type === orgModel.UserRelationToOrganization.MEMBER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n                relation.type === orgModel.UserRelationToOrganization.OWNER\n\n            // another type narrowing hack \n            // TODO: restore this ... requestaccess component needs a container to load the username \n            // from the store\n            // if (isMember) {\n            //     accessModal = (\n            //         <RequestAccess\n            //             narrative={this.state.requestAccess.narrative}\n            //             organization={this.props.organization}\n            //             // member={member}\n            //             onClose={() => { this.onCloseRequestAccess.call(this) }} />\n            //     )\n            // }\n        }\n        if (typeof this.props.organization !== 'undefined') {\n            return (\n                <div className=\"ViewOrganization  scrollable-flex-column\">\n                    {this.renderHeader()}\n                    {this.renderOrgHeader()}\n                    <div className=\"mainRow  scrollable-flex-column\">\n                        <div className=\"mainColumn  scrollable-flex-column\">\n                            <div className=\"orgRow\">\n                                {this.renderOrg()}\n                            </div>\n                            <div className=\"narrativesRow scrollable-flex-column\">\n                                {this.renderNarratives()}\n                            </div>\n                        </div>\n                        <div className=\"infoColumn\">\n                            {/* <div className={this.renderRelationClass(this.props.organization)}>\n                                {this.renderAdminTasks()}\n                            </div> */}\n                            {this.renderAdminTasks()}\n                            <div className=\"infoBox\">\n                                {this.renderInfo()}\n                            </div>\n                            {this.renderInboxCard()}\n                            {this.renderOutboxCard()}\n                            {this.renderMembersCard()}\n\n                        </div>\n                    </div>\n                    {accessModal}\n                </div>\n            )\n        }\n        return (\n            <div className=\"ViewOrganization\">\n                {this.renderLoadingHeader()}\n                Loading...\n            </div>\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests';\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onViewOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    if (!state.views.viewOrgView.viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    const {\n        views: {\n            viewOrgView: {\n                viewModel: {\n                    organization, relation, groupRequests, groupInvitations, requestInbox, requestOutbox\n                }\n            }\n        }\n    } = state\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        organization, relation, groupRequests, groupInvitations, requestInbox, requestOutbox\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewOrg: (id: string) => {\n            dispatch(actions.load(id) as any)\n        },\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n        onRemoveNarrative: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.removeNarrative(narrative) as any)\n        },\n        onGetViewAccess: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.accessNarrative(narrative) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ViewOrganization) \n\n","import * as React from 'react'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: types.ViewOrgView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading Your Narratives...\n            </div>\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.ViewOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.viewOrgView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, ValidationState, EditState } from '../../types'\nimport Validation from '../../data/models/organization/validation'\nimport * as orgModel from '../../data/models/organization/model'\n\n// ACTIONS\n\n// Loading the editor\nexport interface Load extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action<ActionFlag.EDIT_ORG_LOAD_ERROR> {\n    type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.EDIT_ORG_UNLOAD> {\n    type: ActionFlag.EDIT_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface EditOrgEvaluate extends Action<ActionFlag.EDIT_ORG_EVALUATE> {\n    type: ActionFlag.EDIT_ORG_EVALUATE\n}\n\nexport interface EditOrgEvaluateOK extends Action<ActionFlag.EDIT_ORG_EVALUATE_OK> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_OK\n}\n\nexport interface EditOrgEvaluateErrors extends Action<ActionFlag.EDIT_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n}\n\n// Saving\n\nexport interface EditOrgSave extends Action<ActionFlag.EDIT_ORG_SAVE> {\n    type: ActionFlag.EDIT_ORG_SAVE\n}\n\nexport interface EditOrgSaveStart extends Action<ActionFlag.EDIT_ORG_SAVE_START> {\n    type: ActionFlag.EDIT_ORG_SAVE_START\n}\n\nexport interface EditOrgSaveSuccess extends Action<ActionFlag.EDIT_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n}\n\nexport interface EditOrgSaveError extends Action<ActionFlag.EDIT_ORG_SAVE_ERROR> {\n    type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Updating name field\n\nexport interface EditOrgUpdateName extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface EditOrgUpdateNameSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface EditOrgUpdateNameError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: UIError\n}\n\n// Updating gravatar hash field\n\nexport interface EditOrgUpdateGravatarHash extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH,\n    name: string | null\n}\n\nexport interface EditOrgUpdateGravatarHashSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n    gravatarHash: string | null\n}\n\nexport interface EditOrgUpdateGravatarHashError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n    gravatarHash: string | null,\n    error: UIError\n}\n\n// Updating id Field\n\n// export interface EditOrgUpdateId extends Action {\n//     type: ActionFlag.EDIT_ORG_UPDATE_ID,\n//     id: string\n// }\n\n// export interface EditOrgUpdateIdSuccess {\n//     type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//     id: string\n// }\n\n// export interface EditOrgUpdateIdError extends Action {\n//     type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//     id: string,\n//     error: UIError\n// }\n\n// Updating description field\n\nexport interface EditOrgUpdateDescription extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: UIError\n}\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n    erro: UIError\n}\n\n\n// ACTION CREATORS\n\n// export function editOrgStart(id: string): LoadStart {\n//     return {\n//         type: ActionFlag.EDIT_ORG_LOAD_START,\n//         id: id\n//     }\n// }\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_START\n    }\n}\n\nexport function loadSuccess(editedOrganization: EditableOrganization, organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n        editedOrganization: editedOrganization,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.EDIT_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function editOrgEvaluateOk(): EditOrgEvaluateOK {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_OK\n    }\n}\n\nexport function editOrgEvaluateErrors(): EditOrgEvaluateErrors {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Save\n\n// export function editOrgSave(): EditOrgSave {\n//     return {\n//         type: ActionFlag.EDIT_ORG_SAVE\n//     }\n// }\n\nexport function editOrgSaveStart(): EditOrgSaveStart {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_START\n    }\n}\n\nexport function editOrgSaveSuccess(): EditOrgSaveSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n    }\n}\n\nexport function editOrgSaveError(error: AppError): EditOrgSaveError {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Update Name\n\nexport function editOrgUpdateNameSuccess(name: string): EditOrgUpdateNameSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function editOrgUpdateNameError(name: string, error: UIError): EditOrgUpdateNameError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\n// export function editOrgUpdateIdSuccess(id: string): EditOrgUpdateIdSuccess {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//         id: id\n//     }\n// }\n\n// Update Gravatar Hash\n\nexport function editOrgUpdateGravatarHashSuccess(gravatarHash: string | null): EditOrgUpdateGravatarHashSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_SUCCESS,\n        gravatarHash: gravatarHash\n    }\n}\n\nexport function editOrgUpdateGravatarHashError(gravatarHash: string | null, error: UIError): EditOrgUpdateGravatarHashError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_GRAVATAR_HASH_ERROR,\n        gravatarHash: gravatarHash,\n        error: error\n    }\n}\n\n\n// Update Id\n\n// export function editOrgUpdateIdError(id: string, error: UIError): EditOrgUpdateIdError {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//         id: id,\n//         error: error\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(description: string): EditOrgUpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function editOrgUpdateDescriptionError(description: string, error: UIError): EditOrgUpdateDescriptionError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        // const model = new Model({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url,\n        //     userProfileServiceURL: config.services.UserProfile.url,\n        //     workspaceServiceURL: config.services.Workspace.url,\n        //     serviceWizardURL: config.services.ServiceWizard.url\n        // })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        return orgClient.getOrg(organizationId)\n            .then((org) => {\n                const editableOrg: EditableOrganization = {\n                    id: {\n                        value: org.id,\n                        validationState: ValidationState.VALID,\n                        editState: EditState.NONE,\n                        validatedAt: null,\n                        error: {\n                            type: UIErrorType.NONE,\n                            message: ''\n                        }\n                    },\n                    name: {\n                        value: org.name,\n                        validationState: ValidationState.VALID,\n                        editState: EditState.NONE,\n                        validatedAt: null,\n                        error: {\n                            type: UIErrorType.NONE,\n                            message: ''\n                        }\n                    },\n                    gravatarHash: {\n                        value: org.gravatarHash,\n                        validationState: ValidationState.VALID,\n                        editState: EditState.NONE,\n                        validatedAt: null,\n                        error: {\n                            type: UIErrorType.NONE,\n                            message: ''\n                        }\n                    },\n                    description: {\n                        value: org.description,\n                        validationState: ValidationState.VALID,\n                        editState: EditState.NONE,\n                        validatedAt: null,\n                        error: {\n                            type: UIErrorType.NONE,\n                            message: ''\n                        }\n                    },\n                    isPrivate: {\n                        value: org.isPrivate,\n                        validationState: ValidationState.VALID,\n                        editState: EditState.NONE,\n                        validatedAt: null,\n                        error: {\n                            type: UIErrorType.NONE,\n                            message: ''\n                        }\n                    }\n                }\n                dispatch(loadSuccess(editableOrg, org))\n            })\n            .catch((err) => {\n                console.error('load org error', err)\n                dispatch(loadError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n\nexport function editOrgSave() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(editOrgSaveStart())\n\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                editOrgView: {\n                    viewModel: { organization, editedOrganization }\n                }\n            },\n            app: { config } } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!editedOrganization) {\n            dispatch(editOrgSaveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        const update = {\n            name: editedOrganization.name.value,\n            gravatarHash: editedOrganization.gravatarHash.value,\n            description: editedOrganization.description.value,\n            isPrivate: editedOrganization.isPrivate.value\n        }\n\n        orgClient.updateOrg(organization.id, update)\n            .then(() => {\n                dispatch(editOrgSaveSuccess())\n            })\n            .catch((error) => {\n                console.error('error adding', editedOrganization, error)\n                dispatch(editOrgSaveError({\n                    code: 'invalid',\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function editOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                editOrgView: {\n                    viewModel: {\n                        editedOrganization\n                    }\n                }\n            }\n        } = state\n\n        if (!editedOrganization) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.name.validationState !== ValidationState.VALID) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        // if (editedOrganization.id.status !== FieldState.EDITED_OK) {\n        //     dispatch(EditOrgEvaluateErrors())\n        //     return\n        // }\n\n        if (editedOrganization.gravatarHash.validationState !== ValidationState.VALID) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.description.validationState !== ValidationState.VALID) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(editOrgEvaluateOk())\n    }\n}\n\nexport function editOrgUpdateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(editOrgUpdateNameError(validatedName, error))\n        } else {\n            dispatch(editOrgUpdateNameSuccess(validatedName))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function editOrgUpdateGravatarHash(name: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validateGravatarHash, error] = Validation.validateOrgGravatarHash(name)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(editOrgUpdateGravatarHashError(validateGravatarHash, error))\n        } else {\n            dispatch(editOrgUpdateGravatarHashSuccess(validateGravatarHash))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function editOrgUpdateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>,\n        getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        const [validatedDescription, error] = orgClient.validateOrgDescription(description)\n\n        if (error.type === UIErrorType.ERROR) {\n            dispatch(editOrgUpdateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(editOrgUpdateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // No validation for now.\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate: isPrivate\n        })\n        dispatch(editOrgEvaluate())\n    }\n} ","import * as React from 'react'\nimport { Redirect, NavLink } from 'react-router-dom';\nimport marked from 'marked';\nimport { Button, Icon, Modal, Checkbox } from 'antd';\nimport md5 from 'md5'\n\nimport { EditableOrganization, SaveState, ValidationState, EditState } from '../../../types';\n\nimport './component.css'\n\nimport Header from '../../Header';\nimport OrganizationHeader from '../organizationHeader/loader';\nimport * as orgModel from '../../../data/models/organization/model'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport OrgAvatar from '../../OrgAvatar'\n\nexport interface EditOrganizationProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateGravatarHash: (gravatarHash: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\nexport interface EditOrganizationState {\n    cancelToBrowser: boolean;\n    cancelToViewer: boolean;\n    navigateTo: NavigateTo;\n}\n\nclass EditOrganization extends React.Component<EditOrganizationProps, EditOrganizationState> {\n\n    origin: string;\n\n    gravatarEmail: React.RefObject<HTMLInputElement>\n\n    constructor(props: EditOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.gravatarEmail = React.createRef()\n\n        this.origin = document.location!.origin\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organization Editor Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations editor...</p>\n                </div>\n            )\n        })\n    }\n\n\n    onGravatarEmailSync() {\n        let email\n        let hashed\n        if (this.gravatarEmail.current && this.gravatarEmail.current.value) {\n            email = this.gravatarEmail.current.value.toLowerCase()\n            hashed = md5(email)\n        } else {\n            hashed = null\n        }\n        this.props.onUpdateGravatarHash(hashed);\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onClickCancelToViewer() {\n        if (!this.isModified()) {\n            this.setState({ cancelToViewer: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToViewer: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onEditOrgSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onGravatarHashChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        this.props.onUpdateGravatarHash(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        // this.props.onUpdateId(e.target.value);\n        console.warn('no updating id, naughty!')\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState === ValidationState.VALID &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY)\n        )\n    }\n\n    renderForm() {\n        return (\n            <form id=\"editOrganizationForm\" className=\"editor\" onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">name</div>\n                    <div className=\"col2\">\n                        <input value={this.props.editedOrganization.name.value || ''}\n                            onChange={this.onNameChange.bind(this)} />\n                        {this.props.editedOrganization.name.error ? (<span style={{ color: 'red' }}>{this.props.editedOrganization.name.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">is private?</div>\n                    <div className=\"col2\">\n                        <Checkbox\n                            checked={this.props.editedOrganization.isPrivate.value}\n                            onChange={this.onIsPrivateChange.bind(this)} />\n                        {this.props.editedOrganization.isPrivate.error ? (<span style={{ color: 'red' }}>{this.props.editedOrganization.isPrivate.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row gravatarHash\">\n                    <div className=\"col1 field-label\">gravatar hash</div>\n                    <div className=\"col2\">\n                        <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '4px' }}>\n                            <div style={{ flex: '1 1 0px' }}>\n                                <input ref={this.gravatarEmail} placeholder=\"Provide your gravatar-linked email address, if any\" />\n                            </div>\n                            <div style={{ flex: '0 0 auto' }}>\n                                <Button\n                                    icon=\"arrow-down\"\n                                    style={{ height: '100%' }}\n                                    onClick={this.onGravatarEmailSync.bind(this)} />\n                            </div>\n                        </div>\n\n                        <input value={this.props.editedOrganization.gravatarHash.value || ''}\n                            onChange={this.onGravatarHashChange.bind(this)} />\n                        {this.props.editedOrganization.gravatarHash.error ? (<span style={{ color: 'red' }}>{this.props.editedOrganization.gravatarHash.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1 field-label\">id</div>\n                    <div className=\"col2\">\n                        <input value={this.props.editedOrganization.id.value || ''}\n                            onChange={this.onIdChange.bind(this)} />\n                        {this.props.editedOrganization.id.error ? (<span style={{ color: 'red' }}>{this.props.editedOrganization.id.error.message}</span>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\" style={{ flex: '1 1 0px', minHeight: '30em', maxHeight: '60em' }}>\n                    <div className=\"col1 field-label\">description</div>\n                    <div className=\"col2\">\n                        <textarea value={this.props.editedOrganization.description.value || ''}\n                            onChange={this.onDescriptionChange.bind(this)} />\n                        {this.props.editedOrganization.description.error ? (<div style={{ color: 'red' }}>{this.props.editedOrganization.description.error.message}</div>) : ''}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1\"></div>\n                    <div className=\"col2\">\n                        {/* <div className=\"footer\">\n                            <Button form=\"newOrganizationForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\">Save</Button>\n                            <Button type=\"danger\"\n                                onClick={this.onClickCancel.bind(this)}>Cancel</Button>\n                        </div> */}\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    renderOrgAvatar(editedOrg: EditableOrganization) {\n        const org = this.props.organization\n        return (\n            <OrgAvatar gravatarHash={editedOrg.gravatarHash.value} size={64} organizationName={editedOrg.name.value} organizationId={org.id} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Private\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Public\n            </span>\n        )\n    }\n\n    renderPreview() {\n        return <form className=\"preview\">\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"name\">\n                        {this.props.editedOrganization.name.value || ''}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"isPrivate\">\n                        {this.renderIsPrivate(this.props.editedOrganization.isPrivate.value)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"gravatarHash\">\n                        {this.renderOrgAvatar(this.props.editedOrganization)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col2\">\n                    <div className=\"id\">\n                        <span style={{ color: 'silver' }}>{this.origin}/#orgs/organizations/</span>\n                        {this.props.editedOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\" style={{ flex: '1 1 0px' }}>\n                <div className=\"col2\">\n                    <div className=\"description\"\n                        dangerouslySetInnerHTML={({ __html: marked(this.props.editedOrganization.description.value || '') })}\n                    />\n                </div>\n            </div>\n        </form>\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.editedOrganization.name.value)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"tool\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Managing Org Requests</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"save\"\n                    form=\"editOrganizationForm\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    {/* <Icon type=\"save\" /> */}\n                    {/* <FaSave style={{ verticalAlign: 'center' }} /> */}\n                    Save\n                        </Button>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewer.bind(this)}>\n                    {/* <FaUndo style={{ verticalAlign: 'center' }} />  */}\n                    Return to this Org\n                        </Button>\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    // renderFooter() {\n    //     return (\n    //         <div className=\"footerRow\">\n    //             <div className=\"editorColumn\">\n    //                 <div className=\"row\">\n    //                     <div className=\"col1\">\n    //                     </div>\n    //                     <div className=\"col2\">\n    //                         <div className=\"footer\">\n    //                             <Button form=\"editOrganizationForm\"\n    //                                 key=\"submit\"\n    //                                 htmlType=\"submit\">Save</Button>\n    //                             <Button type=\"danger\"\n    //                                 onClick={this.onClickCancel.bind(this)}>Cancel</Button>\n    //                         </div>\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //             <div className=\"previewColumn\">\n\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    // renderHeader() {\n    //     let orgName: string\n    //     return (\n    //         <Header>\n    //             <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n    //                 <div style={{ flex: '0 0 auto' }}>\n    //                     <span>\n    //                         <Icon type=\"tool\" />\n    //                         {' '}\n    //                         Managing your membership in the Organization \"\n    //                         {this.props.organization.name}\n    //                         \"\n    //                     </span>\n    //                 </div>\n    //                 <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', alignItems: 'center' }}>\n    //                     <Button icon=\"undo\"\n    //                         type=\"danger\"\n    //                         onClick={this.doCancelToViewer.bind(this)}>\n    //                         Return to this Org\n    //                     </Button>\n    //                     <Button icon=\"undo\"\n    //                         type=\"danger\"\n    //                         onClick={this.doCancelToBrowser.bind(this)}>\n    //                         Return to Orgs Browser\n    //                     </Button>\n    //                     <Button\n    //                         shape=\"circle\"\n    //                         icon=\"info\"\n    //                         onClick={this.doShowInfo.bind(this)}>\n    //                     </Button>\n    //                 </div>\n    //             </div>\n    //         </Header>\n    //     )\n    // }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        // // TODO: this is just a prop for today.\n        // if (this.props.saveState === SaveState.SAVED) {\n        //     return <Redirect push to={\"/editOrganization/\" + this.props.editedOrganization.id.value} />\n        // }\n\n        if (!this.props.editedOrganization) {\n            return (\n                <div className=\"EditOrganization\">\n                    {this.renderLoadingHeader()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"EditOrganization\">\n                {this.renderHeader()}\n                {this.renderOrgHeader()}\n                <div className=\"mainRow\">\n                    <div className=\"editorColumn\">\n                        <h3>Editor</h3>\n                        {this.renderForm()}\n                    </div>\n                    <div className=\"previewColumn\">\n                        <h3>Preview</h3>\n                        {this.renderPreview()}\n                    </div>\n                </div>\n                {/* {this.renderFooter()} */}\n            </div>\n        )\n    }\n}\n\nexport default EditOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditableOrganization, EditState, SaveState, ValidationState } from '../../../types';\nimport {\n    editOrgSave,\n    editOrgUpdateName,\n    // editOrgUpdateId, \n    editOrgUpdateDescription, editOrgUpdateGravatarHash\n} from '../../../redux/actions/editOrg';\n\nimport EditOrganization from './component';\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport { updateIsPrivate } from '../../../redux/actions/editOrg';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface DispatchProps {\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateGravatarHash: (gravatarHash: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.editOrgView.viewModel) {\n        throw new Error('What, no view model??')\n    }\n    const {\n        views: {\n            editOrgView: {\n                viewModel: { editState, saveState, validationState, editedOrganization, organization }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        editedOrganization,\n        organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onEditOrgSave: () => {\n            dispatch(editOrgSave() as any)\n        },\n        onUpdateName: (name: string) => {\n            dispatch(editOrgUpdateName(name) as any)\n        },\n        onUpdateGravatarHash: (gravatarHash: string | null) => {\n            dispatch(editOrgUpdateGravatarHash(gravatarHash) as any)\n        },\n        // onUpdateId: (id) => {\n        //     dispatch(editOrgUpdateId(id) as any)\n        // },\n        onUpdateDescription: (description) => {\n            dispatch(editOrgUpdateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(EditOrganization)","import * as React from 'react'\nimport { ComponentLoadingState, DashboardView, StoreState, EditOrgView } from '../../../types';\nimport Container from './container'\nimport * as orgModel from '../../../data/models/organization/model'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    view: EditOrgView\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Fetching your orgs and other stuff...\n            </div>\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/editOrg'\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    view: EditOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.editOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './Auth.css'\n\nimport * as types from '../types'\nimport { Button } from 'antd';\n\n\nexport interface AuthState {\n\n}\n\nclass Auth extends React.Component<types.AuthProps, AuthState> {\n\n    tokenRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: types.AuthProps) {\n        super(props)\n\n        this.tokenRef = React.createRef()\n\n        this.props.checkAuth()\n    }\n\n    onLogoutClick() {\n        this.props.onRemoveAuthorization()\n    }\n\n    onLoginClick() {\n        if (this.tokenRef.current === null) {\n            return\n        }\n        const token = this.tokenRef.current.value\n        if (token.length === 0) {\n            return\n        }\n        this.props.onAddAuthorization(token)\n    }\n\n    buildAuthForm() {\n        return (\n            <div className=\"Auth-form\">\n                Token: <input ref={this.tokenRef} />\n                <Button\n                    icon=\"save\"\n                    htmlType=\"submit\"\n                    onClick={this.onLoginClick.bind(this)} >\n                    Assign Token\n                </Button>\n            </div>\n        )\n    }\n\n    buildAuthToolbar() {\n        return (\n            <div className=\"Auth-toolbar\">\n                Logged in as <b><span>{this.props.authorization.authorization.realname}</span> (<span>{this.props.authorization.authorization.username}</span></b>)\n                {' '}\n                <Button icon=\"logout\" onClick={this.onLogoutClick.bind(this)}></Button>\n            </div>\n        )\n    }\n\n    buildAuthDev() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.buildAuthToolbar()}\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized! Enter a user token below</p>\n                        {this.buildAuthForm()}\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Error</p>\n                        {this.props.authorization.message}\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n    }\n\n    buildAuthProd() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized!</p>\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-error scrollable-flex-column\">\n                        <p>Error: ??</p>\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"Auth scrollable-flex-column\">\n                {this.props.hosted ? this.buildAuthProd() : this.buildAuthDev()}\n            </div>\n        )\n\n    }\n}\n\nexport default Auth","\nexport interface RootInfo {\n    version: string,\n    servertime: number\n}\n\ninterface AuthEndpoints {\n    root: string,\n    tokenInfo: string,\n    apiMe: string,\n    me: string,\n    loginStart: string,\n    loginChoice: string,\n    loginCreate: string,\n    loginUsernameSuggest: string,\n    loginPick: string,\n    loginCancel: string,\n    logout: string,\n    linkStart: string,\n    linkCancel: string,\n    linkChoice: string,\n    linkPick: string,\n    linkRemove: string,\n    tokens: string,\n    tokensRevoke: string,\n    tokensRevokeAll: string,\n    userSearch: string,\n    adminUserSearch: string,\n    adminUser: string\n}\n\nconst endpoints: AuthEndpoints = {\n    root: '',\n    tokenInfo: 'api/V2/token',\n    apiMe: 'api/V2/me',\n    me: 'me',\n    loginStart: 'login/start',\n    logout: 'logout',\n    loginChoice: 'login/choice',\n    loginCreate: 'login/create',\n    loginUsernameSuggest: 'login/suggestname',\n    loginPick: 'login/pick',\n    loginCancel: 'login/cancel',\n    linkStart: 'link/start',\n    linkCancel: 'link/cancel',\n    linkChoice: 'link/choice',\n    linkPick: 'link/pick',\n    linkRemove: 'me/unlink',\n    tokens: 'tokens',\n    tokensRevoke: 'tokens/revoke',\n    tokensRevokeAll: 'tokens/revokeall',\n    userSearch: 'api/V2/users/search',\n    adminUserSearch: 'api/V2/admin/search',\n    adminUser: 'api/V2/admin/user'\n}\n\nexport interface TokenInfo {\n    created: number,\n    expires: number,\n    id: string,\n    name: string | null,\n    token: string,\n    type: string,\n    user: string,\n    cachefor: number\n}\n\nexport interface Identity {\n    id: string,\n    provider: string,\n    username: string\n}\n\nexport interface Role {\n    id: string,\n    desc: string\n}\n\nexport interface Account {\n    created: number,\n    customroles: Array<string>,\n    display: string,\n    email: string,\n    idents: Array<Identity>,\n    lastLogin: number,\n    local: boolean,\n    roles: Array<Role>,\n    user: string\n}\nexport class AuthClient {\n    url: string;\n\n    constructor({ url }: { url: string }) {\n        this.url = url\n    }\n\n    makePath(path: Array<string> | string): string {\n        if (typeof path === 'string') {\n            return [this.url].concat([path]).join('/');\n        }\n        return [this.url].concat(path).join('/');\n    }\n\n\n    root(): Promise<RootInfo> {\n        return fetch(this.makePath([endpoints.root]), {\n            headers: {\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                return result as RootInfo\n            })\n    }\n\n    getTokenInfo(token: string): Promise<TokenInfo> {\n        return fetch(this.makePath([endpoints.tokenInfo]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as TokenInfo\n            })\n    }\n\n    getMe(token: string): Promise<Account> {\n        return fetch(this.makePath([endpoints.apiMe]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Account\n            })\n    }\n\n\n    // getInfo() : Promise<GroupsServiceInfo> {\n    //     return fetch(this.url + '/', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json();\n    //         })\n    //         .then((result) => {\n    //             return result as GroupsServiceInfo;\n    //         });\n    // }\n\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport * as Cookies from 'es-cookie'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types';\nimport { AuthClient, TokenInfo, Account } from '../../data/auth';\n\n// Action Definitions\n\nexport interface AuthCheck extends Action {\n    type: ActionFlag.AUTH_CHECK\n}\n\nexport interface AuthCheckStart extends Action {\n    type: ActionFlag.AUTH_CHECK_START\n}\n\nexport interface AuthCheckError extends Action {\n    type: ActionFlag.AUTH_CHECK_ERROR,\n    error: AppError\n}\n\nexport interface AuthAuthorized extends Action {\n    type: ActionFlag.AUTH_AUTHORIZED,\n    token: string\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\nexport interface AuthUnauthorized extends Action {\n    type: ActionFlag.AUTH_UNAUTHORIZED\n}\n\nexport interface AuthRemoveAuthorization extends Action {\n    type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n}\n\nexport interface AuthAddAuthorization extends Action {\n    type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n    token: string\n}\n\n// Action Creators\n\n\nexport function authCheckStart(): AuthCheckStart {\n    return {\n        type: ActionFlag.AUTH_CHECK_START\n    }\n}\n\nexport function authCheckError(error: AppError): AuthCheckError {\n    return {\n        type: ActionFlag.AUTH_CHECK_ERROR,\n        error\n    }\n}\n\nexport function authAuthorized(token: string, username: string, realname: string, roles: Array<string>): AuthAuthorized {\n    return {\n        type: ActionFlag.AUTH_AUTHORIZED,\n        token, username, realname, roles\n    }\n}\n\nexport function authUnauthorized(): AuthUnauthorized {\n    return {\n        type: ActionFlag.AUTH_UNAUTHORIZED\n    }\n}\n\n// export function authRemoveAuthorization(): AuthRemoveAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n//     }\n// }\n\n// export function authAddAuthorization(token: string): AuthAddAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n//         token: token\n//     }\n// }\n\n// Action Thunks\n\nexport function checkAuth() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(authCheckStart())\n\n        // TODO: get the auth from the kbase-ui integration api, perhaps a postmessage call\n\n        const token = Cookies.get('kbase_session')\n        if (!token) {\n            dispatch(authUnauthorized())\n            return\n        }\n        const auth = new AuthClient({ url: '/services/auth' })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function authRemoveAuthorization() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // remove cookie\n        Cookies.remove('kbase_session')\n\n        // remove auth in state\n        dispatch(authUnauthorized())\n    }\n}\n\nexport function authAddAuthorization(token: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // add cookie\n        Cookies.set('kbase_session', token)\n\n        // TODO: get auth info\n        const auth = new AuthClient({ url: '/services/auth' })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, AuthState, Authorization } from '../types'\nimport Auth from '../components/Auth'\nimport * as actions from '../redux/actions/auth'\n\nexport interface OwnProps {\n    hosted: boolean\n}\n\ninterface StateProps {\n    authorization: Authorization\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n}\n\ninterface DispatchProps {\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const { auth } = state\n    return {\n        authorization: auth\n        // authStatus: status,\n        // token: authorization.token || null,\n        // username: authorization.username || null,\n        // realname: authorization.realname || null\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        checkAuth: () => {\n            dispatch(actions.checkAuth() as any)\n        },\n        onRemoveAuthorization: () => {\n            dispatch(actions.authRemoveAuthorization() as any)\n        },\n        onAddAuthorization: (token: string) => {\n            dispatch(actions.authAddAuthorization(token) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Auth)","\nimport uuidv4 from 'uuid/v4'\n\ninterface ListenerParams {\n    name: string,\n    onSuccess: (payload: Payload) => void,\n    onError: (error: Error) => void\n}\n\nclass Listener {\n    name: string;\n    onSuccess: (payload: Payload) => void;\n    onError: (error: Error) => void;\n\n    constructor({ name, onSuccess, onError }: ListenerParams) {\n        this.name = name;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n\ntype Payload = any;\n\ninterface WaitingListenerParams extends ListenerParams {\n    timeout?: number\n}\n\nclass WaitingListener extends Listener {\n    started: Date;\n    timeout: number;\n\n    constructor(params: WaitingListenerParams) {\n        super(params);\n        this.started = new Date();\n        this.timeout = params.timeout || 5000;\n    }\n}\n\ninterface Envelope {\n    channelId: string\n    id: string\n}\n\nclass Message {\n    name: string;\n    payload: any;\n    id: string;\n    created: Date;\n    channel: any\n    envelope: Envelope | null\n\n    constructor({ name, payload, channel }: { name: string, payload: any, channel: any }) {\n        this.name = name\n        this.payload = payload\n        this.id = uuidv4()\n        this.created = new Date()\n        this.channel = channel\n        this.envelope = null;\n    }\n\n    getMessage() {\n        return {\n            envelope: {\n                id: this.id,\n                created: this.created,\n                channel: this.channel\n            },\n            name: this.name,\n            payload: this.payload\n        };\n    }\n}\n\ninterface Handler {\n    started: Date,\n    handler: (response: any) => any\n}\n\ninterface ChannelParams {\n    window: Window,\n    host: string,\n    channelId?: string\n}\n\nexport class Channel {\n    window: Window\n    host: string\n    id: string\n    awaitingResponse: Map<string, Handler>\n    waitingListeners: Map<string, Array<Listener>>\n    listeners: Map<string, Array<Listener>>\n    lastId: number\n    sentCount: number\n    receivedCount: number\n    unwelcomeReceivedCount: number\n    unwelcomeReceivedCountThreshhold: number\n    unwelcomeReceiptWarning: boolean\n    unwelcomeReceiptWarningCount: number\n    currentListener: ((message: MessageEvent) => void) | null\n\n    constructor(params: ChannelParams) {\n        // The given window upon which we will listen for messages.\n        this.window = params.window;\n\n        // The host for the window; required for postmessage\n        if (this.window.document === null) {\n            throw new Error('No document')\n        }\n        if (this.window.document.location === null) {\n            throw new Error('No location')\n        }\n        this.host = params.host || this.window.document.location.origin;\n\n        // The channel id. Used to filter all messages received to\n        // this channel.\n        this.id = params.channelId || uuidv4()\n\n\n        this.awaitingResponse = new Map<string, Handler>()\n        this.waitingListeners = new Map<string, Array<Listener>>()\n        this.listeners = new Map<string, Array<Listener>>()\n\n        this.lastId = 0\n        this.sentCount = 0\n        this.receivedCount = 0\n\n        this.unwelcomeReceivedCount = 0\n        this.unwelcomeReceivedCountThreshhold = 100\n        this.unwelcomeReceiptWarning = true\n        this.unwelcomeReceiptWarningCount = 0\n        this.currentListener = null\n    }\n\n    genId() {\n        this.lastId += 1;\n        return 'msg_' + String(this.lastId);\n    }\n\n    receiveMessage(messageEvent: MessageEvent) {\n        const message = messageEvent.data as Message;\n        if (!message) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message data; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!message.envelope) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message envelope, not from KBase; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!(message.envelope.channelId === this.id)) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('Message envelope does not match this channel\\'s id', messageEvent);\n            }\n            return;\n        }\n        if (this.unwelcomeReceiptWarningCount > this.unwelcomeReceivedCountThreshhold) {\n            this.unwelcomeReceiptWarning = false;\n            console.warn('Unwelcome message warning disabled after ' + this.unwelcomeReceiptWarningCount + ' instances.');\n        }\n\n        // A message sent as a request will have registered a response handler\n        // in the awaitingResponse hash, using a generated id as the key.\n        // TODO: to to rethink using the message id here. Perhaps somehting like a\n        // chain of ids, the root of which is the origination id, which is the one\n        // known here when it it is sent; the message \"id\" should be assigned whenver\n        // a message is sent, but a response  message would include the original\n        // message in the \"chain\"...\n\n        // We can also have awaiting responses without an originating request.\n        // These are useful for, e.g., a promise which awaits a message to be sent\n        // within some window...\n        if (message.envelope.id && this.awaitingResponse.has(message.envelope.id)) {\n            try {\n                const response = this.awaitingResponse.get(message.envelope.id)\n                this.awaitingResponse.delete(message.envelope.id)\n                if (response) {\n                    response.handler(message.payload)\n                }\n            } catch (ex) {\n                console.error('Error handling response for message ', message, ex);\n            }\n        }\n\n        // and also awaiting by message name. Like a listener, but they are only used\n        // once.\n        if (this.waitingListeners.has(message.name)) {\n            const awaiting = this.waitingListeners.get(message.name)!\n            this.waitingListeners.delete(message.name)\n            awaiting.forEach((listener) => {\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n\n        // Otherwise, permanently registered handlers are found in the listeners for the\n        // message name.\n        if (this.listeners.has(message.name)) {\n            this.listeners.get(message.name)!.forEach((listener) => {\n                if (!listener.onSuccess) {\n                    console.warn('no handler for listener!', listener);\n                }\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n    }\n\n    listen(listener: Listener) {\n        if (!this.listeners.has(listener.name)) {\n            this.listeners.set(listener.name, [])\n        }\n        this.listeners.get(listener.name)!.push(listener)\n    }\n\n    on(messageId: string, success: (payload: any) => any, error: (error: Error) => void) {\n        this.listen(new Listener({\n            name: messageId,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    sendMessage(message: Message) {\n        this.window.postMessage(message.getMessage(), this.host);\n    }\n\n    send(name: string, payload: Payload) {\n        const message = new Message({ name, payload, channel: this.id });\n        this.sendMessage(message);\n    }\n\n    sendRequest(message: Message, handler: (response: any) => any) {\n        this.awaitingResponse.set('message.id', {\n            started: new Date(),\n            handler: handler\n        })\n\n        this.sendMessage(message);\n    }\n\n    request(name: string, payload: Payload) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.sendRequest(new Message({ name, payload, channel: this.id }), (response: any) => {\n                    resolve(response);\n                });\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    startMonitor() {\n        window.setTimeout(() => {\n            const now = new Date().getTime();\n\n            // first take care of listeners awaiting a message.\n            for (const [id, listeners] of this.waitingListeners.entries()) {\n                const newListeners = listeners.filter((listener) => {\n                    if (listener instanceof WaitingListener) {\n                        const elapsed = now - listener.started.getTime();\n                        if (elapsed > listener.timeout) {\n                            try {\n                                if (listener.onError) {\n                                    listener.onError(new Error('timout after ' + elapsed));\n                                }\n                            } catch (ex) {\n                                console.error('Error calling error handler', id, ex);\n                            }\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n                if (newListeners.length === 0) {\n                    this.waitingListeners.delete(id)\n                }\n            }\n\n            if (this.waitingListeners.size > 0) {\n                this.startMonitor()\n            }\n        }, 100);\n    }\n\n    listenOnce(listener: WaitingListener) {\n        if (!this.waitingListeners.has(listener.name)) {\n            this.waitingListeners.set(listener.name, [])\n        }\n        this.waitingListeners.get(listener.name)!.push(listener);\n        if (listener.timeout) {\n            this.startMonitor();\n        }\n    }\n\n    once(name: string, success: (payload: Payload) => void, error: (error: Error) => void) {\n        this.listenOnce(new WaitingListener({\n            name: name,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    when(name: string, timeout: number) {\n        return new Promise((resolve, reject) => {\n            return this.listenOnce(new WaitingListener({\n                name: name,\n                timeout: timeout,\n                onSuccess: (payload) => {\n                    resolve(payload);\n                },\n                onError: (error) => {\n                    reject(error);\n                }\n            }));\n        });\n    }\n\n    stats() {\n        return {\n            sent: this.sentCount,\n            received: this.receivedCount\n        };\n    }\n\n    attach(window: Window) {\n        this.window = window;\n    }\n\n    start() {\n        this.currentListener = (message: MessageEvent) => {\n            this.receiveMessage(message);\n        };\n        this.window.addEventListener('message', this.currentListener, false);\n    }\n\n    stop() {\n        if (this.currentListener) {\n            this.window.removeEventListener('message', this.currentListener, false);\n        }\n    }\n}\n","import uuid from 'uuid/v4'\nimport { Channel } from './windowChannel'\nimport { runInThisContext } from 'vm';\n\nexport interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        feedsServiceURL: string\n    },\n    parentHost: string\n}\n/*\n channelId: \"3b33179e-8a6d-4ae9-bc95-af4c0492eaa6\"\nframeId: \"frame_kb_html_be553ee5-645c-4737-80ba-dcb642632f0c\"\nhostId: \"host_kb_html_9a3b5d5d-bb92-43ff-a443-73267aa31323\"\nparams: {}\nparentHost: \"https://ci.kbase.us\"\n\n*/\n\n/*\nIFrameSimulator\nThis little doozey allows us to create a simulated iframe. We can query it for\n the params placed on the iframe, and talk to it via the window channel -- it has \n its own window channel.\n Good thing we designed the channel for multiple channels per window.\n*/\nclass IFrameSimulator {\n    params: IFrameParams | null\n    channel: Channel\n\n    constructor() {\n        this.params = null\n\n        // create a window channel.\n\n        this.channel = new Channel({\n            window: window,\n            host: document.location!.origin\n        })\n\n    }\n\n    getParamsFromIFrame(): IFrameParams {\n        return {\n            channelId: this.channel.id,\n            frameId: uuid(),\n            params: {\n                groupsServiceURL: 'services/groups',\n                userProfileServiceURL: 'services/user_profile/rpc',\n                workspaceServiceURL: 'services/ws',\n                serviceWizardURL: 'services/service_wizard',\n                feedsServiceURL: 'services/feeds'\n            },\n            parentHost: document.location!.origin\n        }\n    }\n}\n\n\n\nexport default IFrameSimulator","export interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        feedsServiceURL: string\n    },\n    parentHost: string\n}\n\nexport class IFrameIntegration {\n    getParamsFromIFrame() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-params')) {\n            // throw new Error('No params found in window!!');\n            return null\n        }\n        const params = window.frameElement.getAttribute('data-params');\n        if (params === null) {\n            // throw new Error('No params found in window!')\n            return null\n        }\n        return JSON.parse(decodeURIComponent(params)) as IFrameParams\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as types from '../../types'\nimport IFrameSimulator, { IFrameParams } from '../../lib/IFrameSimulator';\nimport { IFrameIntegration } from '../../lib/IFrameIntegration';\n\n// Action Definitions\n\n// export interface AppStart extends Action {\n//     type: ActionFlag.APP_START,\n\n// }\n\nexport interface AppSuccess extends Action {\n    type: ActionFlag.APP_SUCCESS,\n    config: types.AppConfig\n}\n\nexport interface AppError extends Action {\n    type: ActionFlag.APP_ERROR,\n    error: AppError\n}\n\n// Action Creators\n\nexport function appSuccess(config: types.AppConfig): AppSuccess {\n    return {\n        type: ActionFlag.APP_SUCCESS,\n        config: config\n    }\n}\n\nexport function appError(error: AppError): AppError {\n    return {\n        type: ActionFlag.APP_ERROR,\n        error: error\n    }\n}\n\n// Action Thunks\n\nexport function appStart() {\n    return (dispatch: ThunkDispatch<types.StoreState, void, Action>, getState: () => types.StoreState) => {\n        // check and see if we are in an iframe\n        const iframeParams = new IFrameIntegration().getParamsFromIFrame()\n\n        if (iframeParams) {\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Feeds: {\n                        url: iframeParams.params.feedsServiceURL\n                    }\n                }\n            }))\n        } else {\n            const fakeIframeParams = new IFrameSimulator().getParamsFromIFrame()\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: fakeIframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: fakeIframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: fakeIframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: fakeIframeParams.params.serviceWizardURL\n                    },\n                    Feeds: {\n                        url: fakeIframeParams.params.feedsServiceURL\n                    }\n                }\n            }))\n        }\n\n\n        // if so, get the params\n\n        // if not, use the fake to get it\n    }\n}\n","import * as React from 'react'\nimport './KBaseIntegration.css'\n\nimport { AppState } from '../types'\nimport { } from '../lib/IFrameSimulator'\n\nexport interface KBaseIntegrationProps {\n    status: AppState,\n    onAppStart: () => void\n}\nclass KBaseIntegration extends React.Component<KBaseIntegrationProps, object> {\n    constructor(props: KBaseIntegrationProps) {\n        super(props)\n\n        // const params = this.getParamsFromIFrame()\n\n        this.props.onAppStart()\n    }\n\n    render() {\n        // TODO: some test like \n        // {this.props.env === 'dev' ? this.buildAuthDev() : this.buildAuthProd()}\n\n        if (this.props.status === AppState.NONE) {\n            return (\n                <div className=\"KBaseIntegration\">\n                    Loading...\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"KBaseIntegration scrollable-flex-column\">\n                    {this.props.children}\n                </div>\n            )\n        }\n    }\n\n    // getParamsFromIFrame() {\n    //     if (!window.frameElement) {\n    //         return null\n    //     }\n    //     if (!window.frameElement.hasAttribute('data-params')) {\n    //         // throw new Error('No params found in window!!');\n    //         return null\n    //     }\n    //     const params = window.frameElement.getAttribute('data-params');\n    //     if (params === null) {\n    //         // throw new Error('No params found in window!')\n    //         return null\n    //     }\n    //     return JSON.parse(decodeURIComponent(params));\n    // }\n}\n\nexport default KBaseIntegration","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../types'\nimport * as actions from '../redux/actions/app'\n\nimport KBaseIntegration from '../components/KBaseIntegration'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    status: types.AppState\n}\n\ninterface DispatchProps {\n    onAppStart: () => void\n}\n\nexport function mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const { app: { status } } = state\n    return {\n        status\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAppStart: () => {\n            dispatch(actions.appStart() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(KBaseIntegration)","import { ActionFlag } from './index'\nimport { StoreState, AppError } from '../../types'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { Action } from 'redux'\nimport * as requestModel from '../../data/models/requests'\nimport * as orgModel from '../../data/models/organization/model'\n\n// Action types\n\n// Start up requests manager\n\nexport interface Load extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD\n}\n\n// Accept join requests\n\nexport interface AcceptJoinRequest extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    requestId: string\n}\n\nexport interface AcceptJoinRequestStart extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    requestId: string\n}\n\nexport interface AcceptJoinRequestSuccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    request: requestModel.Request\n}\n\nexport interface AcceptJoinRequestError extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptJoinRequestStart(requestId: string): AcceptJoinRequestStart {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n        requestId: requestId\n    }\n}\n\nexport function acceptJoinRequestSuccess(request: requestModel.Request): AcceptJoinRequestSuccess {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n        request: request\n    }\n}\n\nexport function acceptJoinRequestError(error: AppError): AcceptJoinRequestError {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Deny join requests\n\nexport interface DenyJoinRequest extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    requestId: string\n}\n\nexport interface DenyJoinRequestStart extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    requestId: string\n}\n\nexport interface DenyJoinRequestSuccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    request: requestModel.Request\n}\n\nexport interface DenyJoinRequestError extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n    error: AppError\n}\n\n\nexport function denyJoinRequestStart(requestId: string): DenyJoinRequestStart {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n        requestId: requestId\n    }\n}\n\nexport function denyJoinRequestSuccess(request: requestModel.Request): DenyJoinRequestSuccess {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n        request: request\n    }\n}\n\nexport function denyJoinRequestError(error: AppError): DenyJoinRequestError {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Cancel join invitations\n\nexport interface CancelJoinInvitation extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION\n    requestId: string\n}\n\nexport interface CancelJoinInvitationStart extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START\n}\n\nexport interface CancelJoinInvitationSuccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS\n    request: requestModel.Request\n}\n\nexport interface CancelJoinInvitationError extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n\nexport function cancelJoinInvitationStart(): CancelJoinInvitationStart {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START\n    }\n}\n\nexport function cancelJoinInvitationSuccess(request: requestModel.Request): CancelJoinInvitationSuccess {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n        request: request\n    }\n}\n\nexport function cancelJoinInvitationError(error: AppError): CancelJoinInvitationError {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Admin obtains view access\nexport interface GetViewAccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS\n    requestId: string\n}\n\nexport interface GetViewAccessStart extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START\n}\n\nexport interface GetViewAccessSuccess extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    request: requestModel.Request\n}\n\nexport interface GetViewAccessError extends Action {\n    type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n    error: AppError\n}\n\n\n\nexport function getViewAccessStart(): GetViewAccessStart {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START\n    }\n}\n\nexport function getViewAccessSuccess(request: requestModel.Request): GetViewAccessSuccess {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n        request: request\n    }\n}\n\nexport function getViewAccessError(error: AppError): GetViewAccessError {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n        error: error\n    }\n}\n\nexport function getViewAccess(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(getViewAccessStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        // get requests \n        try {\n            const request = await orgClient.grantViewAccess(requestId)\n            dispatch(getViewAccessSuccess(request))\n        } catch (ex) {\n            dispatch(getViewAccessError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Action generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>): LoadSuccess {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n        organization: organization,\n        requests: requests,\n        invitations: invitations\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD\n    }\n}\n\n// Action thunks\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username, groupsServiceURL: config.services.Groups.url\n        })\n\n        // get requests \n        try {\n            const [organization, requests, invitations] = await Promise.all([\n                orgClient.getOrg(organizationId),\n                requestClient.getPendingOrganizationRequestsForOrg(organizationId),\n                requestClient.getOrganizationInvitationsForOrg(organizationId)\n            ])\n            dispatch(loadSuccess(organization, requests, invitations))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            views: { manageOrganizationRequestsView },\n            app: { config }\n        } = getState()\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username, groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!manageOrganizationRequestsView) {\n            return\n        }\n\n        try {\n            const request = await requestClient.acceptRequest(requestId)\n            dispatch(acceptJoinRequestSuccess(request))\n        } catch (ex) {\n            dispatch(acceptJoinRequestError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function denyJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            views: { manageOrganizationRequestsView },\n            app: { config }\n        } = getState()\n\n        if (!manageOrganizationRequestsView) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username, groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.denyRequest(requestId)\n            dispatch(denyJoinRequestSuccess(request))\n            if (manageOrganizationRequestsView.viewModel) {\n                dispatch(load(manageOrganizationRequestsView.viewModel.organization.id))\n            }\n        } catch (ex) {\n            dispatch(denyJoinRequestError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function cancelJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            views: { manageOrganizationRequestsView },\n            app: { config }\n        } = getState()\n\n        if (!manageOrganizationRequestsView) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username, groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.cancelRequest(requestId)\n            if (manageOrganizationRequestsView.viewModel) {\n                dispatch(load(manageOrganizationRequestsView.viewModel.organization.id))\n            }\n        } catch (ex) {\n            dispatch(cancelJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n","import * as React from 'react'\n\nimport './component.css'\nimport * as types from '../../../types'\nimport Header from '../../Header'\nimport { Icon, Button, Modal, Card, Alert } from 'antd'\nimport { Redirect } from 'react-router'\nimport User from '../../entities/UserContainer'\nimport OrganizationHeader from '../organizationHeader/loader'\nimport Narrative from '../../entities/NarrativeContainer'\nimport * as requestModel from '../../../data/models/requests'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom';\n\nexport interface ManageGroupRequestsProps {\n    // organizationId: string,\n    viewModel: types.ManageOrganizationRequestsViewModel\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (requestId: string) => void\n    onDenyJoinRequest: (requestId: string) => void\n    onCancelJoinInvitation: (requestId: string) => void\n    onGetViewAccess: (requestId: string) => void\n}\n\nexport interface ManageGroupRequestsState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageGroupRequests extends React.Component<ManageGroupRequestsProps, ManageGroupRequestsState> {\n\n    constructor(props: ManageGroupRequestsProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n\n        // this.props.onStart(this.props.organizationId)\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n    onAcceptJoinRequest(requestId: string) {\n        this.props.onAcceptJoinRequest(requestId)\n    }\n    onDenyJoinRequest(requestId: string) {\n        this.props.onDenyJoinRequest(requestId)\n    }\n    onCancelJoinInvitation(requestId: string) {\n        this.props.onCancelJoinInvitation(requestId)\n    }\n    onGetViewAccess(requestId: string) {\n        this.props.onGetViewAccess(requestId)\n    }\n    onViewProfile(username: string) {\n        window.open('#people/' + username, '_blank')\n    }\n    onShowInfo() {\n        Modal.info({\n            title: 'Manage Requests Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the manage requests tool...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        let orgName: string\n        // if (this.props.manageOrganizationRequestsView && this.props.manageOrganizationRequestsView.viewState) {\n        //     orgName = this.props.manageOrganizationRequestsView.viewState.organization.name\n        // } else {\n        //     orgName = 'loading...'\n        // }\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.viewModel.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.viewModel.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"tool\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Managing Org Requests</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button>\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.onShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    // renderRequestType(type: types.RequestType) {\n\n    //     switch (type) {\n    //         case types.RequestType.JOIN_GROUP_REQUEST:\n    //             return 'Join Group Request'\n    //         case types.RequestType.JOIN_GROUP_INVITE:\n    //             return 'Join Group Invitation'\n    //         case types.RequestType.ADD_WORKSPACE_REQUEST:\n    //             return 'Add Workspace Request'\n    //         case types.RequestType.ADD_WORKSPACE_INVITE:\n    //             return 'Add Workspace Invitation'\n    //     }\n    // }\n\n    niceElapsed(someDate: Date) {\n        const nowDate = new Date()\n\n        const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n        const elapsedAbs = Math.abs(elapsed);\n\n        let measure, measureAbs, unit;\n        const maxDays = 90\n        if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n            if (elapsedAbs === 0) {\n                return 'now';\n            } else if (elapsedAbs < 60) {\n                measure = elapsed;\n                measureAbs = elapsedAbs;\n                unit = 'second';\n            } else if (elapsedAbs < 60 * 60) {\n                measure = Math.round(elapsed / 60);\n                measureAbs = Math.round(elapsedAbs / 60);\n                unit = 'minute';\n            } else if (elapsedAbs < 60 * 60 * 24) {\n                measure = Math.round(elapsed / 3600);\n                measureAbs = Math.round(elapsedAbs / 3600);\n                unit = 'hour';\n            } else {\n                measure = Math.round(elapsed / (3600 * 24));\n                measureAbs = Math.round(elapsedAbs / (3600 * 24));\n                unit = 'day';\n            }\n\n            if (measureAbs > 1) {\n                unit += 's';\n            }\n\n            let prefix = null;\n            let suffix = null;\n            if (measure < 0) {\n                prefix = 'in';\n            } else if (measure > 0) {\n                suffix = 'ago';\n            }\n\n            return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n        } else {\n            // otherwise show the actual date, with or without the year.\n            if (nowDate.getFullYear() === nowDate.getFullYear()) {\n                return Intl.DateTimeFormat('en-US', {\n                    month: 'short',\n                    day: 'numeric'\n                }).format(someDate)\n                // return shortMonths[date.getMonth()] + ' ' + date.getDate();\n            } else {\n                return Intl.DateTimeFormat('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                }).format(someDate)\n                // return shortMonths[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n            }\n        }\n    }\n\n    renderRequestJoinRequest(request: requestModel.UserRequest) {\n        const title = (\n            <span>\n                <Icon type=\"user\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request.id)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request.id)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({this.niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestJoinInvitation(request: requestModel.UserInvitation) {\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                <Icon type=\"mail\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"user\" />\n\n                {' '}\n                Invitation to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onCancelJoinInvitation.call(this, request.id)}>\n                Cancel\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>invitation to</th>\n                            <td className=\"requester\">\n                                <User userId={request.user} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({this.niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderNarrativePermission(permission: orgModel.UserWorkspacePermission) {\n        switch (permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                return 'None'\n            case orgModel.UserWorkspacePermission.VIEW:\n                return 'View Only'\n            // return 'View and Copy'\n            case orgModel.UserWorkspacePermission.EDIT:\n                return 'Edit'\n            // return 'View, Copy, Save, Run'\n            case orgModel.UserWorkspacePermission.ADMIN:\n                return 'Admin'\n            // return 'View, Copy, Save, Run, Manage Sharing'\n            case orgModel.UserWorkspacePermission.OWNER:\n                return 'Owner'\n            // return 'View, Copy, Save, Run, Manage Sharing, Own'\n        }\n    }\n\n    renderRequestNarrativeRequest(request: requestModel.WorkspaceRequest) {\n        const title = (\n            <span>\n                <Icon type=\"file\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add Narrative\n            </span>\n        )\n\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request.id)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request.id)}>\n                Deny\n            </Button>\n        ]\n\n        let narrativeAccess\n        narrativeAccess = (\n            <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n        )\n        // TODO: Revive me!!\n        // if (request.narrativeId) {\n        //     // TODO: note the '1' below -- we dont' get the object id from the groups service,\n        //     // and the narrative will soon accept just the workspace id (and will look up the object id by itself)\n        //     // but not yet, so we just use 1, which is INCORRECT.\n        //     narrativeAccess = (\n        //         <div>\n        //             <div>\n        //                 <a href={\"/narrative/ws.\" + request.narrativeId + '.obj.' + '1'} target=\"_blank\">{request.title}</a>\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">your access</span>{' '}{this.renderNarrativePermission(request.narrative.permission)}\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">public?</span>{' '}{request.isPublic ? 'yes' : 'no'}\n        //             </div>\n\n        //         </div>\n        //     )\n        // } else {\n        //     narrativeAccess = (\n        //         <span>\n        //             You don't have access to this narrative\n        //             {' '}\n        //             <Button\n        //                 onClick={() => { this.onGetViewAccess.call(this, request.id) }}>\n        //                 Click for View Access\n        //             </Button>\n        //         </span>\n        //     )\n        // }\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>narrative</th>\n                            <td className=\"narrative\">\n                                {narrativeAccess}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({this.niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestAppRequest(request: requestModel.AppRequest) {\n        const title = (\n            <span>\n                <Icon type=\"appstore\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add App\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request.id)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request.id)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>app</th>\n                            <td className=\"requester\">\n                                {request.appId}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({this.niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequest(request: requestModel.Request) {\n        switch (request.type) {\n            case types.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case types.RequestResourceType.USER:\n                        return this.renderRequestJoinRequest(request as requestModel.UserRequest)\n                    case types.RequestResourceType.WORKSPACE:\n                        return this.renderRequestNarrativeRequest(request as requestModel.WorkspaceRequest)\n                    case types.RequestResourceType.APP:\n                        return this.renderRequestAppRequest(request as requestModel.AppRequest)\n                    default:\n                        throw new Error('Unsupported resource type: ' + request.resourceType)\n                }\n            case types.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case types.RequestResourceType.USER:\n                        return this.renderRequestJoinInvitation(request as requestModel.UserInvitation)\n                    case types.RequestResourceType.WORKSPACE:\n                        throw new Error('Workspace invitations are not supported')\n                    // return this.renderRequestNarrativeInvitation(request as types.WorkspaceRequest)\n                    case types.RequestResourceType.APP:\n                        throw new Error('App invitations are not supported')\n                    // return this.renderRequestAppInvitation(request as types.AppRequest)\n                    default:\n                        throw new Error('Unsupported resource type: ' + request.resourceType)\n                }\n        }\n    }\n\n    renderRequests() {\n        const requests = this.props.viewModel.requests\n\n        if (requests.length === 0) {\n            return (\n                <Alert\n                    type=\"info\"\n                    showIcon\n                    style={{ minWidth: '5em', maxWidth: '20em', margin: '0 auto' }}\n                    message=\"No pending requests for this organization\" />\n            )\n        }\n        return requests\n            .map((request) => {\n                return this.renderRequest(request)\n            })\n    }\n\n    renderInvitations() {\n        const invitations = this.props.viewModel.invitations\n        if (invitations.length === 0) {\n            return (\n                <Alert\n                    type=\"info\"\n                    showIcon\n                    style={{ minWidth: '5em', maxWidth: '20em', margin: '0 auto' }}\n                    message=\"No pending invitations for this organization\" />\n            )\n        }\n        return invitations\n            .map((request) => {\n                return this.renderRequest(request)\n            })\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.viewModel.organization.id} />\n        }\n\n        const invitationCount = this.props.viewModel.invitations.length\n\n        const requestCount = this.props.viewModel.requests.length\n\n        return (\n            <div className=\"ManageGroupRequests\">\n                {this.renderHeader()}\n                <OrganizationHeader organizationId={this.props.viewModel.organization.id} />\n                <div className=\"row\">\n                    <div className=\"pendingCol\">\n                        <h2>Requests ({requestCount})</h2>\n                        <div className=\"pendingRequests\">\n                            {this.renderRequests()}\n                        </div>\n                    </div>\n                    <div className=\"historyCol\">\n                        <h2>Invitations ({invitationCount})</h2>\n                        {this.renderInvitations()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ManageGroupRequests","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/manageOrganizationRequests'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    // organizationId: string\n}\n\ninterface StateProps {\n    viewModel: types.ManageOrganizationRequestsViewModel\n}\n\ninterface DispatchProps {\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (requestId: string) => void\n    onDenyJoinRequest: (requestId: string) => void\n    onCancelJoinInvitation: (requestId: string) => void\n    onGetViewAccess: (requestId: string) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            manageOrganizationRequestsView\n        }\n    } = state\n    if (!manageOrganizationRequestsView.viewModel) {\n        throw new Error('view state not loaded!')\n    }\n    return {\n        viewModel: manageOrganizationRequestsView.viewModel\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        // onStart: (organizationId: string) => {\n        //     dispatch(actions.manageOrganizationRequests(organizationId) as any)\n        // },\n        onAcceptJoinRequest: (requestId: string) => {\n            dispatch(actions.acceptJoinRequest(requestId) as any)\n        },\n        onDenyJoinRequest: (requestId: string) => {\n            dispatch(actions.denyJoinRequest(requestId) as any)\n        },\n        onCancelJoinInvitation: (requestId: string) => {\n            dispatch(actions.cancelJoinInvitation(requestId) as any)\n        },\n        onGetViewAccess: (requestId: string) => {\n            dispatch(actions.getViewAccess(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n\n","import * as React from 'react'\n\nimport { ComponentLoadingState } from '../../../types'\nimport Container from './container'\n\nexport interface LoaderProps {\n    organizationId: string\n    loadingState: ComponentLoadingState\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading...\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.loadingState) {\n            case ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/manageOrganizationRequests'\n\n// org id fed from the url\nexport interface OwnProps {\n    organizationId: string\n}\n\n// we unpack the view state?\ninterface StateProps {\n    loadingState: types.ComponentLoadingState\n}\n\n// the loader can just load this view\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        loadingState: state.views.manageOrganizationRequestsView.loadingState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\n\nimport { AppError, StoreState, MemberType } from '../../types'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as uberModel from '../../data/models/uber'\n\n// LOADING\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_MEMBERS_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_MEMBERS_LOAD_START\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_MEMBERS_UNLOAD\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_MEMBERS_LOAD_ERROR\n    error: AppError\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS,\n        organization: organization,\n        relation: relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            dispatch(loadSuccess(organization, relation))\n\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Promoting member to admin\n\nexport interface PromoteToAdmin extends Action {\n    type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminStart extends Action {\n    type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n}\n\nexport interface PromoteToAdminSuccess extends Action {\n    type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminError extends Action {\n    type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n    error: AppError\n}\n\n\nexport function promoteToAdminStart(): PromoteToAdminStart {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n    }\n}\n\nexport function promoteToAdminSuccess(memberUsername: string): PromoteToAdminSuccess {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n        memberUsername\n    }\n}\n\nexport function promoteToAdminError(error: AppError): PromoteToAdminError {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n        error: error\n    }\n}\n\nexport function promoteToAdmin(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(promoteToAdminStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewMembersView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.memberToAdmin(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(promoteToAdminSuccess(memberUsername))\n\n                // Brute force, update the in-store organization\n                // const { viewMembersView: { view } } = getState()\n\n                // if (!view) {\n                //     dispatch(viewMembersPromoteToAdminError({\n                //         code: 'NoView',\n                //         message: 'No view for viewMembers'\n                //     }))\n                //     return\n                // }\n\n\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(promoteToAdminError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Demote admin to member\n\nexport interface DemoteToMember extends Action {\n    type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberStart extends Action {\n    type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n}\n\nexport interface DemoteToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberError extends Action {\n    type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n    error: AppError\n}\n\n\nexport function demoteToMemberStart(): DemoteToMemberStart {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n    }\n}\n\nexport function demoteToMemberSuccess(memberUsername: string): DemoteToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n        memberUsername: memberUsername\n    }\n}\n\nexport function demoteToMemberError(error: AppError): DemoteToMemberError {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteToMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewMembersView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(demoteToMemberSuccess(memberUsername))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteToMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Remove a member\n\nexport interface RemoveMember extends Action {\n    type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER,\n    memberUsername: string\n}\n\ninterface RemoveMemberStart extends Action {\n    type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_START\n}\n\ninterface RemoveMemberSuccess extends Action {\n    type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS\n}\n\ninterface RemoveMemberError extends Action {\n    type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n    error: AppError\n}\n\nfunction removeMemberStart(): RemoveMemberStart {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_START\n    }\n}\n\nfunction removeMemberSuccess(): RemoveMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS\n    }\n}\n\nfunction removeMemberError(error: AppError): RemoveMemberError {\n    return {\n        type: ActionFlag.VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function removeMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewMembersView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.removeMember(viewModel.organization.id, memberUsername)\n            .then(() => {\n                dispatch(removeMemberSuccess())\n                dispatch(load(viewModel.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(removeMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}","import * as React from 'react'\n\nimport './component.css'\n\nimport { Button, Icon, Menu, Dropdown } from 'antd';\nimport MemberComponent from '../../entities/MemberContainer';\nimport * as orgModel from '../../../data/models/organization/model'\n\ninterface MemberRowProps {\n    member: orgModel.Member,\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n}\n\ninterface MemberRowState {\n    over: boolean\n}\n\nclass MemberRow extends React.Component<MemberRowProps, MemberRowState> {\n    constructor(props: MemberRowProps) {\n        super(props)\n        this.state = {\n            over: false\n        }\n    }\n\n    renderPromoteButton() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <Button\n                        style={{ width: '100%' }}\n                        disabled={!this.state.over}\n                        onClick={() => { this.props.onPromoteMemberToAdmin(this.props.member.username) }}>\n                        <Icon type=\"unlock\" />Promote to Admin\n                    </Button>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <Button\n                        style={{ width: '100%' }}\n                        disabled={!this.state.over}\n                        onClick={() => { this.props.onDemoteAdminToMember(this.props.member.username) }}>\n                        <Icon type=\"user\" />Demote to Member\n                </Button>\n                )\n            case orgModel.MemberType.OWNER:\n                return\n        }\n\n    }\n\n    renderMemberButtons(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n        // if (!this.state.over) {\n        //     return\n        // }\n        return (\n            <div>\n                <div>\n                    <Button\n                        type=\"danger\"\n                        disabled={!this.state.over}\n                        style={{ width: '100%' }}\n                        onClick={() => { this.props.onRemoveMember(member.username) }}>\n                        <Icon type=\"delete\" />Remove from Org\n                    </Button>\n                </div>\n                <div>\n                    {this.renderPromoteButton()}\n                </div>\n            </div>\n        )\n    }\n\n    onMemberMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'promoteToAdmin':\n                this.props.onPromoteMemberToAdmin(member.username)\n                break\n            case 'removeMember':\n                this.props.onRemoveMember(member.username)\n                break\n        }\n    }\n\n    onAdminMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'demoteToMember':\n                this.props.onDemoteAdminToMember(member.username)\n                break\n        }\n    }\n\n    renderMemberMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onMemberMenu.call(this, key, member) }}>\n                <Menu.Item key=\"promoteToAdmin\" >\n                    <Icon type=\"unlock\" />Promote to Admin\n                </Menu.Item>\n                <Menu.Item key=\"removeMember\" >\n                    <Icon type=\"delete\" />Remove Member\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Button icon=\"ellipsis\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderAdminMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, member) }}>\n                <Menu.Item key=\"demoteToMember\">\n                    <Icon type=\"user\" />Demote to Member\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Button icon=\"ellipsis\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderOwnerMenu(member: orgModel.Member) {\n        return\n    }\n\n    renderMemberOptions(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return this.renderOwnerMenu(member)\n            case orgModel.MemberType.ADMIN:\n                return this.renderAdminMenu(member)\n            case orgModel.MemberType.MEMBER:\n                return this.renderMemberMenu(member)\n        }\n    }\n\n    onMouseOver() {\n        this.setState({ over: true })\n    }\n\n    onMouseOut() {\n        this.setState({ over: false })\n    }\n\n    render() {\n        return (\n            <div key={this.props.member.username}\n                className=\"memberRow\"\n                onMouseEnter={this.onMouseOver.bind(this)}\n                onMouseLeave={this.onMouseOut.bind(this)}>\n                <div style={{ flex: '1 1 0px' }}>\n                    <MemberComponent member={this.props.member} avatarSize={50} key={this.props.member.username} />\n                </div>\n                <div style={{ flex: '0 0 10em', textAlign: 'right' }}>\n                    {/* {this.renderMemberButtons(this.props.member)} */}\n                    {this.renderMemberOptions(this.props.member)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemberRow","import * as React from 'react'\n\nimport './component.css'\n\nimport { Member, MemberType, RequestResourceType } from '../../../types'\nimport Header from '../../Header'\nimport { Redirect } from 'react-router'\nimport { Button, Icon, Modal, Row, Col, Menu, Dropdown, Alert } from 'antd';\nimport MemberComponent from '../../entities/Member';\nimport MemberRowComponent from './MemberRow'\nimport { NavLink } from 'react-router-dom';\nimport OrganizationHeader from '../organizationHeader/loader';\nimport { Request } from '../../request/component'\nimport * as orgModel from '../../../data/models/organization/model'\n\nexport interface ViewMembersProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    onViewMembersUnload: () => void\n    onPromoteMemberToAdmin: (memberUsername: string) => void\n    onDemoteAdminToMember: (adminUsername: string) => void\n    onRemoveMember: (memberUsername: string) => void\n}\n\ninterface ViewMembersState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\n\n\nclass ViewMembers extends React.Component<ViewMembersProps, ViewMembersState> {\n    constructor(props: ViewMembersProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n\n    onPromoteMemberToAdmin(memberUsername: string) {\n        this.props.onPromoteMemberToAdmin(memberUsername)\n    }\n\n    onDemoteAdminToMember(adminUsername: string) {\n        this.props.onDemoteAdminToMember(adminUsername)\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'View Members Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the view members tool...</p>\n                </div>\n            )\n        })\n    }\n\n    isMember(): boolean {\n        if (!this.props.organization) {\n            return false\n        }\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    isAdmin(): boolean {\n        if (!this.props.organization) {\n            return false\n        }\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"team\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Viewing Org Members</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button>\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.onShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderMembersToolbar() {\n        switch (this.props.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return (\n                    <div className=\"toolbar\">\n                        <Button><Icon type=\"plus\" />Join</Button>\n                    </div>\n                )\n\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return (\n                    <div className=\"toolbar\">\n                    </div>\n                )\n\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"toolbar\">\n                        <NavLink to={\"/inviteUser/\" + this.props.organization.id}><Button><Icon type=\"mail\" /> Invite a User</Button></NavLink>\n                    </div>\n                )\n\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"toolbar\">\n                        <NavLink to={\"/inviteUser/\" + this.props.organization.id}><Button><Icon type=\"mail\" /> Invite a User</Button></NavLink>\n                    </div>\n                )\n\n        }\n    }\n\n    // renderMemberButtons(member: UserBase) {\n    //     if (!(this.props.organization.relation.type === UserRelationToOrganization.OWNER ||\n    //         this.props.organization.relation.type === UserRelationToOrganization.ADMIN)) {\n    //         return\n    //     }\n    //     return (\n    //         <div>\n    //             <div><Button type=\"danger\" style={{ width: '100%' }}><Icon type=\"delete\" />Remove from Org</Button></div>\n    //             <div><Button style={{ width: '100%' }} onClick={() => { this.onPromoteMemberToAdmin.call(this, member.username) }}><Icon type=\"unlock\" />Promote to Admin</Button></div>\n    //         </div>\n    //     )\n    // }\n\n    renderMembers() {\n        let members\n        if (!this.isMember()) {\n            return (\n                <p className=\"message\">\n                    Sorry, organization membership restricted to members only\n                </p>\n            )\n        }\n        if (this.props.organization.members.length === 0) {\n            members = (\n                <p className=\"message\">\n                    This organization has no members\n                </p>\n            )\n        } else {\n            members = this.props.organization.members.map((member) => (\n                <React.Fragment key={member.username}>\n                    <MemberRowComponent\n                        member={member}\n                        relation={this.props.relation}\n                        organization={this.props.organization}\n                        onPromoteMemberToAdmin={this.props.onPromoteMemberToAdmin}\n                        onDemoteAdminToMember={this.props.onDemoteAdminToMember}\n                        onRemoveMember={this.props.onRemoveMember}\n                    />\n                </React.Fragment>\n            ))\n        }\n        return (\n            <div className=\"table infoTable\">\n                <div className=\"row\">\n                    <div className=\"col0\" style={{ display: 'flex', flexDirection: 'column', overflowY: 'auto' }}>\n                        {members}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    // renderPendingMembers() {\n\n    //     if (!this.isAdmin()) {\n    //         return (\n    //             <Alert type=\"info\" showIcon message=\"Sorry, pending organization membership restricted to admin members only\" />\n    //         )\n    //     }\n    //     const pendingRequests = this.props.organization.adminRequests.filter((request) => {\n    //         return (request.resourceType === RequestResourceType.USER)\n    //     })\n    //     if (pendingRequests.length === 0) {\n    //         return (\n    //             <Alert type=\"info\" message=\"No pending member requests or invitations\" />\n    //         )\n    //     }\n    //     return pendingRequests.map((request) => {\n    //         return (\n    //             <div key={request.id}>\n    //                 <Request request={request} />\n    //             </div>\n    //         )\n    //     })\n    // }\n\n    renderAdminsToolbar() {\n        return (\n            <div className=\"toolbar\">\n\n            </div>\n        )\n    }\n    // renderAdminButtons(admin: Member) {\n    //     if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n    //         this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n    //         return\n    //     }\n    //     return (\n    //         <div>\n    //             <div><Button type=\"danger\" style={{ width: '100%' }}><Icon type=\"delete\" />Remove from Org</Button></div>\n    //             <div><Button style={{ width: '100%' }} onClick={() => { this.onDemoteAdminToMember.call(this, admin.user.username) }}><Icon type=\"user\" />Demote to Member</Button></div>\n    //         </div>\n    //     )\n    // }\n    // renderAdmins() {\n    //     const admins = this.props.organization.members.filter((member) => (member.type === MemberType.ADMIN))\n    //     let adminList\n    //     if (admins.length === 0) {\n    //         adminList = (\n    //             <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\n    //                 This organization has no admins\n    //             </p>\n    //         )\n    //     } else {\n    //         adminList = admins.map((member) => {\n    //             return (\n    //                 <div key={member.username} style={{ flex: '0 0 auto', display: 'flex', flexDirection: 'row' }}>\n    //                     <div style={{ flex: '1 1 0px' }}>\n    //                         <MemberComponent member={member} avatarSize={50} key={member.username} />\n    //                     </div>\n    //                     <div style={{ flex: '0 0 10em' }}>\n    //                         {this.renderAdminButtons(member)}\n    //                     </div>\n    //                 </div>\n\n    //             )\n    //         })\n    //     }\n    //     return (\n    //         <div className=\"table infoTable\">\n    //             <div className=\"row\">\n    //                 <div className=\"col0\" style={{ display: 'flex', flexDirection: 'column', overflowY: 'auto' }}>\n    //                     {adminList}\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderOrganizationHeader() {\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    componentWillUnmount() {\n        this.props.onViewMembersUnload()\n    }\n\n    render() {\n\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        return (\n            <div className=\"ViewMembers\">\n                {this.renderHeader()}\n                {this.renderOrganizationHeader()}\n                <div className=\"body\">\n                    <div className=\"membersCol\">\n                        <h2>Members</h2>\n                        {this.renderMembersToolbar()}\n                        {this.renderMembers()}\n                    </div>\n                    <div className=\"otherCol\">\n                        <h2>Pending Members</h2>\n                        {this.renderAdminsToolbar()}\n\n                        <p>\n                            This space to provide a list of user requests and invitations. This will allow this view\n                            to provide all user management tools in one place.\n                        </p>\n                        <p>\n                            In progress... currently renders the requests but does not provide actions (buttons).\n                        </p>\n                        {/* {this.renderPendingMembers()} */}\n\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ViewMembers","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/viewMembers'\nimport ViewMembers from './component'\nimport * as orgModel from '../../../data/models/organization/model'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\ninterface DispatchProps {\n    onViewMembersUnload: () => void,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    if (!state.views.viewMembersView || (state.views.viewMembersView.viewModel === null)) {\n        throw new Error('Runtime Error - view members view is not defined!')\n    }\n    const {\n        views: {\n            viewMembersView: {\n                viewModel: { organization, relation }\n            }\n        }\n    } = state\n    return {\n        organization, relation\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewMembersUnload: () => {\n            dispatch(actions.unload() as any)\n        },\n        onPromoteMemberToAdmin: (memberUsername: string) => {\n            dispatch(actions.promoteToAdmin(memberUsername) as any)\n        },\n        onDemoteAdminToMember: (adminUsername: string) => {\n            dispatch(actions.demoteToMember(adminUsername) as any)\n        },\n        onRemoveMember: (memberUsername: string) => {\n            dispatch(actions.removeMember(memberUsername) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembers)","import * as React from 'react'\n\nimport { ComponentLoadingState, StoreState } from '../../../types'\nimport ViewMembersContainer from './container'\n\nexport interface ViewMemberLoaderProps {\n    organizationId: string,\n    state: ComponentLoadingState,\n    onViewMembersLoad: (organizationId: string) => void\n}\n\ninterface ViewMemberLoaderState {\n\n}\n\nclass ViewMembersLoader extends React.Component<ViewMemberLoaderProps, ViewMemberLoaderState> {\n    constructor(props: ViewMemberLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading...\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.state) {\n            case ComponentLoadingState.NONE:\n                this.props.onViewMembersLoad(this.props.organizationId)\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <ViewMembersContainer />\n                )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/viewMembers'\n// import ViewMembers from './component'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    state: ComponentLoadingState\n}\n\ninterface DispatchProps {\n    onViewMembersLoad: (organizationId: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        state: state.views.viewMembersView.loadingState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onViewMembersLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembersLoader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\n\nimport { AppError, StoreState, User, InviteUserViewModel, ComponentLoadingState, RequestType, RequestResourceType, MemberType, OrganizationUser } from '../../types'\nimport { Model, UserQuery } from '../../data/model'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport * as requestModel from '../../data/models/requests'\n\n// View Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.INVITE_USER_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    users: Array<OrganizationUser> | null\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.INVITE_USER_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n        organization: organization,\n        users: null\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.INVITE_USER_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// User Selection\n\n\n\nexport interface InviteUserSearchUsers extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS,\n    query: UserQuery\n}\n\ninterface SearchUsersStart extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n}\n\nexport interface SearchUsersSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n    users: Array<OrganizationUser> | null\n}\n\ninterface SearchUsersError extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n    error: AppError\n}\n\nfunction searchUsersStart(): SearchUsersStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n    }\n}\n\nfunction searchUsersSuccess(users: Array<OrganizationUser> | null): SearchUsersSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n        users: users\n    }\n}\n\nfunction searchUsersError(error: AppError): SearchUsersError {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n        error: error\n    }\n}\n\nexport function inviteUserSearchUsers(query: UserQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchUsersStart())\n\n        if (query.query.length === 0) {\n            dispatch(searchUsersSuccess(null))\n            return\n        }\n\n        const {\n            views: {\n                inviteUserView: { viewModel }\n            },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: better form of type narrowing? \n        if (viewModel === null) {\n            return\n        }\n        const org = viewModel.organization\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        let excludedUsers: Array<string> = []\n\n        // excludedUsers.push(org.owner.user.username)\n\n        let owner: string = org.owner.username\n        let adminUsers: Array<string> = []\n        let members: Array<string> = []\n        let invited: Array<string> = []\n        let requested: Array<string> = []\n\n        org.members.forEach((member) => {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    members.push(member.username)\n                case MemberType.ADMIN:\n                    adminUsers.push(member.username)\n            }\n        })\n\n        // excludedUsers = excludedUsers.concat(org.members.map((member) => {\n        //     return member.\n        // }))\n\n        // TODO revive\n        // org.adminRequests.forEach((request) => {\n        //     if (request.resourceType === RequestResourceType.USER) {\n        //         switch (request.type) {\n        //             case RequestType.INVITATION:\n        //                 invited.push((<UserInvitation>request).user.username)\n        //                 // excludedUsers.push((<UserInvitation>request).user.username)\n        //                 break\n        //             case RequestType.REQUEST:\n        //                 requested.push((<UserRequest>request).requester.username)\n        //             // excludedUsers.push((<UserRequest>request).requester.username)\n        //         }\n        //     }\n        // })\n\n        try {\n            const users = await userClient.searchUsers(query)\n\n\n            // const filteredUsers = users.filter((user) => {\n            //     return (excludedUsers.indexOf(user.username) === -1)\n            // })\n            const orgUsers: Array<OrganizationUser> = users.map(({ username, realname }) => {\n                let relation: orgModel.UserRelationToOrganization\n                if (username === owner) {\n                    relation = orgModel.UserRelationToOrganization.OWNER\n                } else if (adminUsers.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.ADMIN\n                } else if (invited.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n                } else if (requested.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n                } else if (members.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER\n                } else {\n                    relation = orgModel.UserRelationToOrganization.NONE\n                }\n                return {\n                    username, realname,\n                    relation: relation\n                }\n            })\n            dispatch(searchUsersSuccess(orgUsers))\n        } catch (ex) {\n            dispatch(searchUsersError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Select a user\n\nexport interface SelectUser extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER,\n    username: string\n}\n\nexport interface SelectUserStart extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_START\n}\n\nexport interface SelectUserSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n    user: User,\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface SelectUserError extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n    error: AppError\n}\n\n\nfunction selectUserStart(): SelectUserStart {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_START\n    }\n}\n\nfunction selectUserSuccess(user: User, relation: orgModel.UserRelationToOrganization): SelectUserSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n        user: user,\n        relation: relation\n    }\n}\n\nfunction selectUserError(error: AppError): SelectUserError {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n        error: error\n    }\n}\n\nfunction isUserRequest(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserRequest = <requestModel.UserRequest>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.REQUEST &&\n        req.requester === username) {\n        return true\n    }\n    return false\n}\n\nfunction isUserInvitation(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserInvitation = <requestModel.UserInvitation>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.INVITATION &&\n        req.user &&\n        req.user === username) {\n        return true\n    }\n    return false\n}\n\nfunction getUserRelation(user: User, organization: orgModel.Organization): orgModel.UserRelationToOrganization {\n    if (user.username === organization.owner.username) {\n        return orgModel.UserRelationToOrganization.OWNER\n    }\n    const member = organization.members.find((member) => {\n        return member.username === user.username\n    })\n    if (member) {\n        switch (member.type) {\n            case MemberType.ADMIN:\n                return orgModel.UserRelationToOrganization.ADMIN\n            case MemberType.OWNER:\n                return orgModel.UserRelationToOrganization.OWNER\n            case MemberType.MEMBER:\n                return orgModel.UserRelationToOrganization.MEMBER\n        }\n    }\n\n    // TODO revive\n    // for (const request of organization.adminRequests) {\n    //     if (isUserInvitation(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    //     } else if (isUserRequest(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     }\n    // }\n\n    return orgModel.UserRelationToOrganization.VIEW\n}\n\nexport function selectUser(selectedUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectUserStart())\n\n        const {\n            views: {\n                inviteUserView: { viewModel }\n            },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        if (!viewModel) {\n            dispatch(selectUserError({\n                code: 'invalid state',\n                message: 'select user invalid state -- no view value'\n            }))\n            return\n        }\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        userClient.getUser(selectedUsername)\n            .then((user) => {\n                // TODO: use the new model getUserRelation, or even getUserWithRelation\n                const relation = getUserRelation(user, viewModel.organization)\n                dispatch(selectUserSuccess(user, relation))\n            })\n            .catch((err) => {\n                dispatch(selectUserError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Now send the invitation, whew!\n\nexport interface SendInvitation extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION\n}\n\nexport interface SendInvitationStart extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n}\n\nexport interface SendInvitationSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n}\n\nexport interface SendInvitationError extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n    error: AppError\n}\n\n\nexport function sendInvitationStart(): SendInvitationStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n    }\n}\n\nexport function sendInvitationSuccess(): SendInvitationSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n    }\n}\n\nexport function sendInvitationError(error: AppError): SendInvitationError {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n        error: error\n    }\n}\n\nexport function sendInvitation() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendInvitationStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                inviteUserView: { loadingState, viewModel, error }\n            }\n        } = getState()\n\n        if (loadingState !== ComponentLoadingState.SUCCESS) {\n            return\n        }\n\n        if (viewModel === null) {\n            return\n        }\n\n        const { selectedUser, organization: { id } } = viewModel as InviteUserViewModel\n\n        if (!selectedUser) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        requestClient.inviteUserToJoinOrg(id, selectedUser.user.username)\n            .then((request) => {\n                dispatch(sendInvitationSuccess())\n            })\n            .catch((err) => {\n                dispatch(sendInvitationError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}","import * as React from 'react'\nimport './User.css'\n\nimport Avatar from './entities/Avatar'\nimport * as types from '../types';\n\nexport interface UserProps {\n    user: types.User\n    avatarSize?: number\n}\n\ninterface UserState {\n\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                                </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\n\nimport './component.css'\nimport { User, InviteUserViewState, OrganizationUser } from '../../../types';\nimport { Button, Icon, Modal, Alert } from 'antd';\nimport Header from '../../Header';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport OrganizationHeader from '../organizationHeader/loader';\nimport UserComponent from '../../User'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nexport interface InviteUserProps {\n    organization: orgModel.Organization,\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState,\n    users: Array<OrganizationUser> | null\n    onSearchUsers: (query: userModel.UserQuery) => void,\n    onSelectUser: (username: string) => void,\n    onSendInvitation: () => void\n}\n\ninterface InviteUserState {\n    cancelToViewMembers: boolean\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n    autocompleteMessage: string\n}\n\nclass InviteUser extends React.Component<InviteUserProps, InviteUserState> {\n\n    lastSearchAt: Date | null\n\n    static searchDebounce: number = 200\n\n    searchInput: React.RefObject<HTMLInputElement>\n    searchButton: React.RefObject<Button>\n\n    constructor(props: InviteUserProps) {\n        super(props)\n\n        this.lastSearchAt = null\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            cancelToViewMembers: false,\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            autocompleteMessage: ''\n        }\n    }\n\n    onClickCancelToViewMembers() {\n        this.setState({ cancelToViewMembers: true })\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n\n    onSendInvitation() {\n        this.props.onSendInvitation()\n    }\n\n    canSave() {\n        if (this.props.selectedUser) {\n            return true\n        }\n        return false\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.doSearchUsers(currentSearchInputValue)\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        // this.doSearchUsers(currentSearchInputValue)\n    }\n\n    doSearchUsers(value: string) {\n        // if (value.length < 3) {\n        //     this.setState({ autocompleteMessage: 'Search begins after 3 or more characters' })\n        //     return\n        // }\n        // this.setState({ autocompleteMessage: '' })\n        // build up list of users already owning, members of, or with membership pending.\n        const excludedUsers: Array<string> = []\n\n        if (this.lastSearchAt === null ||\n            (new Date().getTime() - this.lastSearchAt.getTime() > InviteUser.searchDebounce)) {\n            this.lastSearchAt = new Date()\n            this.props.onSearchUsers({\n                query: value,\n                excludedUsers: []\n            })\n        }\n    }\n\n    onSelectUser(user: OrganizationUser) {\n        this.props.onSelectUser(user.username);\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Invite User Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the invite user tool...</p>\n                </div>\n            )\n        })\n    }\n\n    // foundUsers() {\n    //     const users = this.props.users.map(({ username, realname }) => {\n    //         return {\n    //             value: username,\n    //             text: realname + ' (' + username + ')'\n    //         }\n    //     })\n    //     return users\n    // }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        let orgName: string\n        // if (this.props.manageGroupRequestsView && this.props.manageGroupRequestsView.view) {\n        //     orgName = this.props.manageGroupRequestsView.view.organization.name\n        // } else {\n        //     orgName = 'loading...'\n        // }\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"tool\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Invite a User to Join Org</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewMembers.bind(this)}>\n                    Return to Org Members\n            </Button>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewer.bind(this)}>\n                    Return to this Org\n            </Button>\n\n\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.onShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderUsers() {\n        if (!this.props.users) {\n            const message = 'Search for users by name or username to display a list of available users in this space.'\n            return (\n                <Alert type=\"info\" message={message} showIcon />\n            )\n        }\n        if (this.props.users.length === 0) {\n            return (\n                <Alert type=\"warning\" message=\"No users found\" showIcon />\n            )\n        }\n        return this.props.users.map((user) => {\n            if (user.relation === orgModel.UserRelationToOrganization.NONE) {\n                return (\n                    <div\n                        className=\"user notInOrganization \"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div\n                        className=\"user inOrganization\"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            }\n        })\n    }\n\n    renderOrgInfo() {\n        return (\n            <div className=\"orgInfo\">\n                <div className=\"name\">\n                    <span className=\"field-label\">name</span>\n                    <span>{this.props.organization.name}</span>\n                </div>\n                <div className=\"description\">\n                    <span className=\"field-label\">description</span>\n                    <span>{this.props.organization.description}</span>\n                </div>\n            </div>\n        )\n    }\n\n\n\n    renderInvitationForm() {\n        let button\n        let message\n        if (this.props.selectedUser) {\n            if (this.props.selectedUser.relation === orgModel.UserRelationToOrganization.VIEW) {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onSendInvitation.bind(this)}>Send Invitation</Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        disabled\n                        type=\"primary\"\n                    >Send Invitation</Button>\n                )\n                // message = 'User is a member of this organization'\n                message = (\n                    <div>\n                        User may not be invited because:<br />\n                        {this.renderRelation(this.props.selectedUser.relation)}\n                    </div>\n                )\n                message = (\n                    <Alert\n                        type=\"warning\"\n                        message={message}\n                        showIcon\n                    />\n                )\n            }\n        } else {\n            button = (\n                <Button\n                    disabled\n                    type=\"primary\"\n                >Send Invitation</Button>\n            )\n            message = 'Please select a user'\n        }\n        return (\n            <div className=\"invitationForm\">\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {button}\n                </div>\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationStatus() {\n        switch (this.props.editState) {\n            case InviteUserViewState.NONE:\n                return (\n                    <div>NONE</div>\n                )\n            case InviteUserViewState.EDITING:\n                return (\n                    <div>EDITING</div>\n                )\n            case InviteUserViewState.SENDABLE:\n                return (\n                    <div>SENDABLE</div>\n                )\n            case InviteUserViewState.SENDING:\n                return (\n                    <div>SENDING</div>\n                )\n            case InviteUserViewState.SUCCESS:\n                return (\n                    <div>SENT SUCCESSFULLY</div>\n                )\n            case InviteUserViewState.ERROR:\n                return (\n                    <div>ERROR SENDING</div>\n                )\n            default:\n                return (\n                    <div>Bad State</div>\n                )\n        }\n\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    renderRelation(relation: orgModel.UserRelationToOrganization) {\n        switch (relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span><Icon type=\"stop\" /> Not a member</span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n\n                    <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n                )\n        }\n    }\n\n    // renderRelationText(relation: UserRelationToOrganization) {\n    //     switch (relation) {\n    //         case (UserRelationToOrganization.NONE):\n    //             return (\n    //                 <span><Icon type=\"stop\" />None</span>\n    //             )\n    //         case (UserRelationToOrganization.VIEW):\n    //             return (\n    //                 <span><Icon type=\"stop\" /> Not a member</span>\n    //             )\n    //         case (UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n    //         case (UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n    //         case (UserRelationToOrganization.MEMBER):\n    //             return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n    //         case (UserRelationToOrganization.ADMIN):\n    //             return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n    //         case (UserRelationToOrganization.OWNER):\n    //             return (\n    //                 <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n    //             )\n    //     }\n    // }\n\n    renderSelectedUser() {\n\n        if (this.props.selectedUser === null) {\n            return (\n                <div className=\"selectedUser\">\n                    <p className=\"noSelection\">\n                        No user yet selected\n                    </p>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"selectedUser\">\n                    <UserComponent user={this.props.selectedUser.user} />\n                    {this.renderRelation(this.props.selectedUser.relation)}\n                </div>\n            )\n        }\n    }\n\n    renderFooter() {\n        return (\n            <div className=\"footer\">\n            </div>\n        )\n    }\n\n    renderSearchButton() {\n        return (<Icon type=\"search\" />)\n    }\n\n    render() {\n\n        if (this.state.cancelToViewMembers) {\n            return <Redirect push to={\"/viewMembers/\" + this.props.organization.id} />\n        }\n\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        return (\n            <div className=\"InviteUser scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrgHeader()}\n                <div className=\"row scrollable-flex-column\">\n                    <div className=\"col1 firstCol users scrollable-flex-column\">\n                        <h3>Select User to Invite</h3>\n                        <form id=\"searchForm\" className=\"searchBar\"\n                            onSubmit={this.onSubmit.bind(this)}>\n                            <input\n                                ref={this.searchInput}\n                                autoFocus\n                                onChange={this.onSearchInputChange.bind(this)}\n                                placeholder=\"Search for a user\"\n                            />\n                            <Button\n                                className=\"searchButton\"\n                                form=\"searchForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\"\n                            >\n                                {this.renderSearchButton()}\n                            </Button>\n                        </form>\n                        <div className=\"usersTable\">\n                            {this.renderUsers()}\n                        </div>\n                        {/* <SelectUserComponent\n                            users={this.props.users}\n                            selectedUser={this.props.selectedUser}\n                            onSearchUsers={this.onSearchUsers.bind(this)}\n                            onSelectUser={this.onSelectUser.bind(this)}\n                        />\n                        {this.renderInvitationForm()}\n                        {this.renderInvitationStatus()} */}\n                    </div>\n                    <div className=\"col1 lastCol\">\n                        <h3>Selected User</h3>\n                        {this.renderSelectedUser()}\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <h3>Send Invitation</h3>\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1\">\n                        <h3>Status</h3>\n                        {this.renderInvitationStatus()}\n                    </div>\n                </div> */}\n                {/* {this.renderUsers()} */}\n                {this.renderFooter()}\n            </div>\n        )\n\n        // return (\n        //     <div className=\"InviteUser\">\n        //         {this.renderHeader()}\n        //         {this.renderOrgHeader()}\n        //         <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Select User to Invite</h3>\n        //                 <SelectUserComponent\n        //                     users={this.props.users}\n        //                     selectedUser={this.props.selectedUser}\n        //                     onSearchUsers={this.onSearchUsers.bind(this)}\n        //                     onSelectUser={this.onSelectUser.bind(this)}\n        //                 />\n        //                 {this.renderInvitationForm()}\n        //                 {this.renderInvitationStatus()}\n        //             </div>\n        //         </div>\n        //         {/* <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Send Invitation</h3>\n        //                 {this.renderInvitationForm()}\n        //             </div>\n        //         </div>\n        //         <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Status</h3>\n        //                 {this.renderInvitationStatus()}\n        //             </div>\n        //         </div> */}\n        //         {/* {this.renderUsers()} */}\n        //     </div>\n        // )\n    }\n}\n\nexport default InviteUser","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/inviteUser'\nimport InviteUser from './component'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    users: Array<types.OrganizationUser> | null\n    selectedUser: {\n        user: types.User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: types.InviteUserViewState\n}\n\ninterface DispatchProps {\n    onSearchUsers: (query: userModel.UserQuery) => void\n    onSelectUser: (username: string) => void\n    onSendInvitation: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    if (!state.views.inviteUserView || (state.views.inviteUserView.viewModel === null)) {\n        throw new Error('Runtime Error - invite members view is not defined!')\n    }\n\n\n    const {\n        views: {\n            inviteUserView: {\n                viewModel: { organization, users, selectedUser, editState }\n            }\n        }\n    } = state\n\n    return { organization, users, selectedUser, editState }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onSearchUsers: ({ query, excludedUsers }) => {\n            dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        },\n        onSelectUser: (username: string) => {\n            dispatch(actions.selectUser(username) as any)\n        },\n        onSendInvitation: () => {\n            dispatch(actions.sendInvitation() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(InviteUser)","import * as React from 'react'\n\nimport Container from './container'\nimport { ComponentLoadingState, StoreState } from '../../../types';\n\nexport interface InviteUserLoaderProps {\n    loadingState: ComponentLoadingState\n    organizationId: string\n    onInviteUserLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface InviteUserLoaderState {\n}\n\nclass InviteUserLoader extends React.Component<InviteUserLoaderProps, InviteUserLoaderState> {\n    constructor(props: InviteUserLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading Users...\n            </div>\n        )\n    }\n\n    renderError() {\n        return (\n            <div>\n                Error!\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.loadingState) {\n            case ComponentLoadingState.NONE:\n                this.props.onInviteUserLoad(this.props.organizationId)\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../redux/actions/inviteUser'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    loadingState: ComponentLoadingState\n}\n\ninterface DispatchProps {\n    onInviteUserLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        loadingState: state.views.inviteUserView.loadingState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onInviteUserLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InviteUserLoader)","import * as React from 'react'\nimport Header from '../../Header';\nimport { Icon, Button, Modal, Input } from 'antd';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport './component.css'\nimport OrganizationHeader from '../organizationHeader/loader';\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nexport interface ManageMembershipProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n}\n\ninterface MangeMembershipState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageMembership extends React.Component<ManageMembershipProps, MangeMembershipState> {\n    constructor(props: ManageMembershipProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n    }\n\n    doCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n\n    doCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    doShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'Manage My Membership Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the view to help you manage your membership...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"user\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Manage your membership</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.doCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button>\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.doShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    render() {\n\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        return (\n            <div className=\"ManageMembership\">\n                {this.renderHeader()}\n                {this.renderOrgHeader()}\n                <h3>\n                    Edit Organization Profile\n                </h3>\n                <div className=\"body\">\n                    <div className=\"col1\">\n                        <div className=\"editorTable\">\n                            <div className=\"editorTable-row\">\n                                <div className=\"editorTable-labelCol\">\n                                    <span className=\"field-label\">\n                                        title\n                                    </span>\n                                </div>\n                                <div className=\"editorTable-controlCol\">\n                                    <Input />\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"col2\">\n                        <div>\n                            org user profile here\n                        </div>\n                    </div>\n                </div>\n                <h3>\n                    User Profile\n                </h3>\n                <p>\n                    Your user profile is ...\n                </p>\n                <h3>\n                    Leave Org\n                </h3>\n                <Button>\n                    Leave This Org\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default ManageMembership","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../redux/actions/manageMembership'\n\nimport { StoreState } from '../../../types';\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nimport Component from './component'\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n}\n\ninterface DispatchProps {\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    if (!state.views.manageMembershipView.viewModel) {\n        throw new Error('View model missing')\n    }\n    const {\n        auth: { authorization: { username } },\n        views: {\n            manageMembershipView: {\n                viewModel: { organization }\n            }\n        }\n    } = state\n    return {\n        username, organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { ManageMembershipView, AppError, ComponentLoadingState, StoreState } from '../../../types'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: ManageMembershipView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading view...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\n\nimport * as actions from '../../../redux/actions/manageMembership'\nimport { types } from 'util';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: ManageMembershipView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.manageMembershipView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\n\nimport OrganizationHeader from '../organizationHeader/loader';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { Narrative, NarrativeState, SortDirection } from '../../../types';\nimport Header from '../../Header';\nimport { Icon, Button, Modal, Alert, Select } from 'antd';\nimport './component.css'\nimport * as orgModel from '../../../data/models/organization/model'\n\n\nexport interface Props {\n    organization: orgModel.Organization\n    narratives: Array<Narrative>\n    relation: orgModel.Relation\n    selectedNarrative: Narrative | null\n    searching: boolean\n    sortBy: string\n    sortDirection: string\n    filter: string\n    doSendRequest: (groupId: string, narrative: Narrative) => void\n    doSelectNarrative: (narrative: Narrative) => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\ninterface State {\n    navigateTo: NavigateTo,\n    // selectedNarrative: Narrative | null\n}\n\nexport class RequestAddNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            navigateTo: NavigateTo.NONE,\n            // selectedNarrative: null\n        }\n    }\n\n    doCancelToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    doCancelToViewer() {\n        this.setState({ navigateTo: NavigateTo.VIEWER })\n    }\n\n    doSelectNarrative(narrative: Narrative) {\n        this.props.doSelectNarrative(narrative)\n    }\n\n    doShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'Request to Add Narrative Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the view to help you request the addition of a narrative to this org...</p>\n                </div>\n            )\n        })\n    }\n\n    doSendRequest() {\n        if (this.props.selectedNarrative === null) {\n            console.warn('attempt to send request without selected narrative')\n            return\n        }\n        this.props.doSendRequest(this.props.organization.id, this.props.selectedNarrative)\n    }\n\n    canSendRequest() {\n        if (this.props.selectedNarrative) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        let orgName: string\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"plus\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Add Narrative to Org</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.doCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button>\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.doShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderNarratives() {\n        return this.props.narratives.map((narrative, index) => {\n            let isSelected\n            if (this.props.selectedNarrative &&\n                narrative.workspaceId === this.props.selectedNarrative.workspaceId) {\n                isSelected = true\n            } else {\n                isSelected = false\n            }\n            let classNames = ['narrative']\n            if (isSelected) {\n                classNames.push('selected')\n            }\n            if (narrative.status === NarrativeState.ASSOCIATED) {\n                classNames.push('narrativeInOrg')\n                return (\n                    <div\n                        className={classNames.join(' ')}\n                        onClick={() => { this.doSelectNarrative.call(this, narrative) }}\n                        key={String(index)}>\n                        <div className=\"title\">\n                            {narrative.title || 'n/a'} (associated)\n                        </div>\n                    </div>\n                )\n            } else if (narrative.status === NarrativeState.REQUESTED) {\n                classNames.push('narrativeInOrg')\n                return (\n                    <div\n                        className={classNames.join(' ')}\n                        onClick={() => { this.doSelectNarrative.call(this, narrative) }}\n                        key={String(index)}>\n                        <div className=\"title\">\n                            {narrative.title || 'n/a'} (request pending)\n                        </div>\n                    </div>\n                )\n            } else {\n                classNames.push('narrativeNotInOrg')\n                return (\n                    <div\n                        className={classNames.join(' ')}\n                        onClick={() => { this.doSelectNarrative.call(this, narrative) }}\n                        key={String(index)}>\n                        <div className=\"title\">\n                            {narrative.title || 'n/a'}\n                        </div>\n                    </div>\n                )\n            }\n\n        })\n    }\n\n    onSearchSubmit() {\n        console.log('searching...')\n        return\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\"\n                className=\"searchBar\"\n                onSubmit={this.onSearchSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search Organizations\"\n                    // onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                // ref={this.searchInput}\n                />\n                {/* <Tooltip\n                    title=\"Enter one or more words to search organizations by name or owner\">\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{ alignSelf: 'end' }} />\n                </Tooltip> */}\n                <Button\n                    // disabled={!this.haveSearchInput()}\n                    // ref={this.searchButton}\n                    className=\"button\"\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                    {/* Search */}\n                </Button>\n\n                {/* <div className=\"message\">\n                    {this.renderSearchFeedback()}\n                </div> */}\n            </form>\n        )\n    }\n\n    onSortByChange() {\n\n    }\n\n    onSortDirectionChange() {\n\n    }\n\n    onFilterChange() {\n\n    }\n\n    renderFilterSortBar() {\n        return (\n            <div className=\"filterSortBar\">\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"title\" key=\"title\">Title</Select.Option>\n                    <Select.Option value=\"savedAt\" key=\"savedAt\">Last saved</Select.Option>\n                </Select>\n                <Select onChange={this.onSortDirectionChange.bind(this)}\n                    style={{ width: '4em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortDirection}>\n                    <Select.Option value={SortDirection.ASCENDING} key=\"name\"><Icon type=\"sort-ascending\" /></Select.Option>\n                    <Select.Option value={SortDirection.DESCENDING} key=\"owner\"><Icon type=\"sort-descending\" /></Select.Option>\n                </Select>\n                {/* <span className=\"field-label\" style={{ marginLeft: '10px' }}>filter</span>\n                <Select onChange={this.onFilterChange.bind(this)}\n                    defaultValue={this.props.filter}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"all\" key=\"all\">All</Select.Option>\n                    <Select.Option value=\"notAssociatedPending\" key=\"notAssociatedPending\">Not Associated/Pending</Select.Option>\n                    <Select.Option value=\"associatedPending\" key=\"associatedPending\">Only Associated/Pending</Select.Option>\n                </Select> */}\n            </div>\n        )\n    }\n\n    renderNarrativeSelector() {\n        return (\n            <div className=\"narrativeSelector scrollable-flex-column\">\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    <div style={{ flex: '0 0 10em' }}>\n                        {this.renderSearchBar()}\n                    </div>\n                    <div style={{ flex: '1 1 0px' }}>\n                        {this.renderFilterSortBar()}\n                    </div>\n                </div>\n                <div className=\"narratives scrollable-flex-column\">\n                    <div className=\"narrativesTable\">\n                        {this.renderNarratives()}\n                    </div>\n\n                </div>\n            </div >\n        )\n    }\n\n    renderSelectedNarrativeButton() {\n        if (!this.props.selectedNarrative) {\n            return\n        }\n        if (this.props.selectedNarrative.status === NarrativeState.ASSOCIATED) {\n            return (\n                <Alert type=\"info\" message=\"This Narrative is associated with this Organization\" />\n            )\n        } else if (this.props.selectedNarrative.status === NarrativeState.REQUESTED) {\n            return (\n                <Alert type=\"warning\" message=\"You have requested to associate this Narrative with this Organization\" />\n            )\n        }\n        let buttonLabel\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            buttonLabel = 'Add Selected Narrative to Organization'\n        } else {\n            buttonLabel = 'Request Association of Selected Narrative to Organization'\n        }\n        return (\n            <Button\n                type=\"primary\"\n                onClick={this.doSendRequest.bind(this)}\n                disabled={!this.canSendRequest.call(this)}\n            >{buttonLabel}</Button>\n        )\n\n    }\n\n    renderSelectedNarrative() {\n        if (this.props.selectedNarrative) {\n            return (\n                <div className=\"selectedNarrative\">\n                    <div className=\"title\">\n                        {this.props.selectedNarrative.title}\n                    </div>\n                    <div>\n                        <i>last modified</i>\n                        {' '}\n                        {Intl.DateTimeFormat('en-US', {\n                            month: 'long',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.selectedNarrative.modifiedAt)}\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <Alert type=\"info\" message=\"Select a narrative on the left to show it here and be able to add it to this organization.\" />\n            )\n        }\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return <Redirect push to=\"/organizations\" />\n            case NavigateTo.VIEWER:\n                return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        // let buttonLabel\n        // if (this.props.organization.relation.type === UserRelationToOrganization.ADMIN ||\n        //     this.props.organization.relation.type === UserRelationToOrganization.OWNER) {\n        //     buttonLabel = 'Add Selected Narrative to Organization'\n        // } else {\n        //     buttonLabel = 'Request Addition of Selected Narrative to Organization'\n        // }\n\n        return (\n            <div className=\"RequestNarrative scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrgHeader()}\n                <div className=\"body scrollable-flex-column\">\n                    <div className=\"selectNarrativeCol scrollable-flex-column\">\n                        <h3>Select a Narrative</h3>\n                        {this.renderNarrativeSelector()}\n                    </div>\n                    <div className=\"selectedNarrativeCol\">\n                        <h3>Selected Narrative</h3>\n                        {this.renderSelectedNarrative()}\n                        <div className=\"selectedNarrativeButtonBar\">\n                            {this.renderSelectedNarrativeButton()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer\">\n                    {/* <Button\n                        type=\"primary\"\n                        onClick={this.doSendRequest.bind(this)}\n                        disabled={!this.canSendRequest.call(this)}\n                    >{buttonLabel}</Button> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RequestAddNarrative","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport { AppError, StoreState } from '../../types'\n\n// Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        // TODO: here is where we would hook into the store state entities for groups\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n\n}\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { Model } from '../../data/model'\nimport { AppError, StoreState, Narrative } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as requestModel from '../../data/models/requests'\n\nexport interface Load extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS\n    organization: orgModel.Organization\n    narratives: Array<Narrative>\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, narratives: Array<Narrative>, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n        organization, narratives, relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const [org, narratives, request, invitation] = await Promise.all([\n                orgClient.getOrg(organizationId),\n                narrativeClient.getOwnNarratives(organizationId),\n                requestClient.getUserRequestForOrg(organizationId),\n                requestClient.getUserInvitationForOrg(organizationId)\n            ])\n\n            const relation = orgModel.determineRelation(org, username, request, invitation)\n            dispatch(loadSuccess(org, narratives, relation))\n        } catch (ex) {\n            console.error('loading error', ex)\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Selecting narrative\nexport interface SelectNarrative {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n}\n\nexport interface SelectNarrativeSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR\n    error: AppError\n}\n\nexport function selectNarrativeStart(): SelectNarrativeStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n    }\n}\n\nexport function selectNarrativeSuccess(narrative: Narrative): SelectNarrativeSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function selectNarrativeError(error: AppError): SelectNarrativeError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\nexport function selectNarrative(narrative: Narrative) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectNarrativeStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: fetch narrative and populate the selected narrative accordingly...\n\n\n        dispatch(selectNarrativeSuccess(narrative))\n    }\n}\n\n// Sending Request\nexport interface SendRequest {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND\n}\n\nexport interface SendRequestStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n}\n\nexport interface SendRequestSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    request: requestModel.Request | boolean\n}\n\nexport interface SendRequestError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n    error: AppError\n}\n\n\nexport function sendRequestStart(): SendRequestStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n    }\n}\n\nexport function sendRequestSuccess(request: requestModel.Request | boolean): SendRequestSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n        request: request\n    }\n}\n\nexport function sendRequestError(error: AppError): SendRequestError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n        error: error\n    }\n}\n\nexport function sendRequest(groupId: string, narrative: Narrative) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendRequestStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await orgClient.addOrRequestNarrativeToGroup(groupId, narrative.workspaceId)\n            dispatch(sendRequestSuccess(request))\n        } catch (ex) {\n            dispatch(sendRequestError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Unloading\n\nexport interface Unload extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n    }\n}","import { Dispatch, Action } from 'redux'\n\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\n\nimport Component from './component'\nimport * as actions from '../../../redux/actions/requestAddNarrative'\nimport * as orgModel from '../../../data/models/organization/model'\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    narratives: Array<types.Narrative>\n    selectedNarrative: types.Narrative | null\n    searching: boolean\n    sortBy: string\n    sortDirection: types.SortDirection\n    filter: string\n}\n\ninterface DispatchProps {\n    doSendRequest: (groupId: string, narrative: types.Narrative) => void\n    doSelectNarrative: (narrative: types.Narrative) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    if (state.views.requestNarrativeView.viewModel === null) {\n        throw new Error('view value is not defined!')\n    }\n    const {\n        views: {\n            requestNarrativeView: {\n                viewModel: {\n                    organization, relation, narratives, selectedNarrative\n                }\n            }\n        }\n    } = state\n\n\n    return {\n        organization: organization,\n        relation: relation,\n        narratives: narratives,\n        selectedNarrative: selectedNarrative,\n        searching: false,\n        sortBy: 'title',\n        sortDirection: types.SortDirection.ASCENDING,\n        filter: ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        doSendRequest: (groupId: string, narrative: types.Narrative) => {\n            dispatch(actions.sendRequest(groupId, narrative) as any)\n        },\n        doSelectNarrative: (narrative: types.Narrative) => {\n            dispatch(actions.selectNarrative(narrative) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: types.RequestNarrativeView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading Your Narratives...\n            </div>\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/requestAddNarrative'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.RequestNarrativeView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.requestNarrativeView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    render: (user: userModel.User) => JSX.Element\n    userId: userModel.Username\n    user: userModel.User | undefined\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                this.props.render(this.props.user)\n                // <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            this.props.onLoad(this.props.userId)\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as uberModel from '../../../data/models/uber'\nimport { NavLink } from 'react-router-dom';\nimport { Tooltip, Icon } from 'antd';\nimport UserComponent from '../../entities/UserContainer'\nimport UserLoader from '../../entities/UserLoader'\n\nimport './Organization.css'\nimport OrgAvatar from '../../OrgAvatar';\n\nexport interface OrganizationProps {\n    organization: uberModel.UberOrganization\n    // users: Map<userModel.Username, userModel.User>\n}\n\ninterface OrganizationState {\n}\n\nexport default class OrganizationBlock extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    renderAvatar(org: orgModel.Organization) {\n        return (\n            <OrgAvatar gravatarHash={org.gravatarHash} size={64} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderRelation() {\n        switch (this.props.organization.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org, but you may access it; you may request membership\"\n                    >\n                        <span><Icon type=\"stop\" /> You are not a member - view organization to join</span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> You have been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> You are a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"crown\" /> You are the <b>owner</b> of this Organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderMemberCount() {\n        const org = this.props.organization.organization\n        return (\n            <div className=\"memberCount\">\n                {org.members.length > 0 ? org.members.length : 'no'} {this.pluralize(org.members.length, 'member', 'members')}\n            </div>\n        )\n    }\n\n    renderRelationInfo() {\n        switch (this.props.organization.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return (\n                    <div>\n                        Only members may view membership information\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.VIEW:\n                return (\n                    <div>Only members may view membership information</div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return (\n                    <div>\n                        {this.renderMemberCount()}\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING:\n                return (\n                    <div>Only members may view membership information</div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING:\n                return (\n                    <div>\n                        Only members may view membership information\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div>\n                        {this.renderMemberCount()}\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div>\n                        {this.renderMemberCount()}\n                    </div>\n                )\n                break\n        }\n    }\n\n    renderAdminInfo() {\n        if (!(this.props.organization.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.organization.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n        const requests = this.props.organization.groupRequests\n        let requestsPending\n        if (requests && requests.length > 0) {\n            requestsPending = (\n                <div>\n                    <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" />\n                    {' '}\n                    there\n                    {' '}\n                    {requests.length > 1 ? 'are' : 'is'}\n                    {' '}\n                    <b>{requests.length} pending request{requests.length > 1 ? 's' : ''}</b>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"admin\">\n                {requestsPending}\n            </div>\n        )\n    }\n\n    renderPrivate() {\n        const org = this.props.organization\n        if (org.organization.isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}private\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}public\n            </span>\n        )\n    }\n\n    renderMemberCompact(member: orgModel.Member) {\n        // Look! Render props!\n        return (\n            <UserLoader userId={member.username} render={(user) => {\n                return (\n                    <a href={\"/#people/\" + member.username} target=\"_blank\">\n                        {user.realname} ❨{member.username}❩\n                    </a>\n                )\n            }} />\n        )\n    }\n\n    render() {\n        const org = this.props.organization.organization\n        return (\n            <div className=\"OrganizationBlock\" key={org.id}>\n                <div className=\"avatarCol\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderAvatar(org)}\n                    </NavLink>\n                </div>\n                <div className=\"bodyCol\">\n                    <div className=\"orgName\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n                    <div>\n                        {this.renderPrivate()}\n                    </div>\n                    <div>\n                        {this.renderRelation()}\n                    </div>\n                    <div>\n                        {this.renderRelationInfo()}\n                    </div>\n                    <div>\n                        {this.renderAdminInfo()}\n                    </div>\n                    <div className=\"orgOwner\">\n                        <span className=\"field-label\">owner</span>\n                        <span className=\"field-value\">{this.renderMemberCompact(org.owner)}</span>\n                    </div>\n                    <div className=\"orgCreated\">\n                        <span className=\"field-label\">established</span>\n                        <span className=\"field-value\">{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(org.createdAt)}</span>\n                    </div>\n                    {/* {this.renderAdminInfo(org)} */}\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\nimport * as feedsModel from '../../data/models/feeds'\n\nexport interface NotificationsProps {\n    notifications: Array<feedsModel.Notification>\n}\n\ninterface NotificationsState {\n\n}\n\nexport class Notifications extends React.Component<NotificationsProps, NotificationsState> {\n    constructor(props: NotificationsProps) {\n        super(props)\n    }\n\n    renderNotification(notification: feedsModel.Notification) {\n        return (\n            <div className=\"notification\">\n                <div>\n                    {notification.actor}\n                </div>\n                <div>\n                    {notification.verb}\n                </div>\n                <div>\n                    {notification.source}\n                </div>\n            </div>\n        )\n    }\n\n    renderNotifications() {\n        if (this.props.notifications.length === 0) {\n            return (\n                <div className=\"message\">\n                    No unread notifications\n                </div>\n            )\n        }\n        return this.props.notifications.map((notification) => {\n            return this.renderNotification(notification)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Notifications\">\n                {this.renderNotifications()}\n            </div>\n        )\n    }\n}\n\nexport default Notifications","import * as React from 'react'\nimport { StoreState } from '../../types';\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './component'\nimport * as feedsModel from '../../data/models/feeds'\n\nexport interface OwnProps {\n\n}\n\nexport interface StateProps {\n    notifications: Array<feedsModel.Notification>\n}\n\nexport interface DispatchProps {\n\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    const { db: { notifications: { byId } } } = state\n\n    const values = byId.values()\n\n    // todo .. some processing\n\n    const notifications = Array.from(values)\n    return {\n        notifications\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {}\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n","import * as React from 'react'\nimport Header from '../../Header';\nimport { Icon, Card, Button, Alert, Modal } from 'antd';\nimport './component.css'\nimport { Redirect } from 'react-router-dom';\nimport { DashboardViewModel } from '../../../types';\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests'\nimport Organization from './Organization';\nimport User from '../../entities/UserContainer';\nimport Notifications from '../../notifications/storeAdapter'\nimport InboxRequest from './InboxRequestContainer'\nimport OutboxRequest from './OutboxRequestContainer'\nimport * as userModel from '../../../data/models/user'\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    NEW_ORG\n}\n\nexport interface DashboardProps {\n    viewModel: DashboardViewModel\n    currentUser: userModel.Username\n}\n\ninterface DashboardState {\n    navigateTo: NavigateTo\n}\n\nexport class Dashboard extends React.Component<DashboardProps, DashboardState> {\n    constructor(props: DashboardProps) {\n        super(props)\n\n        this.state = {\n            navigateTo: NavigateTo.NONE\n        }\n    }\n\n    onNavigateToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    onNavigateToNewOrg() {\n        this.setState({ navigateTo: NavigateTo.NEW_ORG })\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Dashboard',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the dashboard...</p>\n                </div>\n            )\n        })\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    Your Orgs Dashboard\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.onShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderOrganizations() {\n        const orgs = this.props.viewModel.organizations\n        if (orgs.length === 0) {\n            const message = (\n                <div>\n                    <p>\n                        You are not associated with any Organizations\n                    </p>\n                    <p>\n                        To get started, you can create a\n                        {' '}\n                        <Button onClick={this.onNavigateToNewOrg.bind(this)}><Icon type=\"plus\" />{' '}New</Button>\n                        {' '}\n                        Organization,\n                        or\n                        {' '}\n                        <Button onClick={this.onNavigateToBrowser.bind(this)}>Browse All</Button>\n                        {' '}\n                        organizations to find one to join.\n                    </p>\n                </div>\n            )\n            return (\n                <Alert type=\"info\"\n                    message={message} />\n            )\n        }\n        return this.props.viewModel.organizations.map((org) => {\n            return (\n                <div key={org.organization.id}>\n                    <Organization organization={org} />\n                </div>\n            )\n        })\n    }\n\n    renderOrganizationsCard() {\n        const extra = (\n            <div>\n                <Button key=\"newOrgButton\" onClick={this.onNavigateToNewOrg.bind(this)}><Icon type=\"plus\" />{' '}New</Button>\n                {' '}\n                <Button key=\"browseButton\" onClick={this.onNavigateToBrowser.bind(this)}>Browse All</Button>\n            </div>\n        )\n        return (\n            <Card title=\"Your Organizations\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                bodyStyle={{ minHeight: '0', flex: '1 1 0px', display: 'flex', flexDirection: 'column' }}\n                className=\"slimCard yourOrgsCard scrollable-flex-column\"\n                extra={extra}>\n                <div className=\"scrollable-flex-column\" style={{ overflow: 'auto' }}>\n                    {this.renderOrganizations()}\n                </div>\n            </Card>\n        )\n    }\n\n    renderNotificationsCard() {\n        return (\n            <Card title=\"Notifications\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard notificationsCard\">\n                {this.renderPendingNotifications()}\n            </Card>\n        )\n    }\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderPendingRequestsSentCard() {\n        return (\n            <Card title=\"Outbox\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard pendingRequestsCard\">\n                {this.renderPendingRequestsSent()}\n            </Card>\n        )\n    }\n\n    renderPendingRequestsReceivedCard() {\n        return (\n            <Card title=\"Inbox\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard pendingInvitationsCard\">\n                {this.renderPendingRequestsReceived()}\n            </Card>\n        )\n    }\n\n    isAdmin() {\n        return (this.props.viewModel.organizations.some(({ relation }) => {\n            return (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN)\n        }))\n    }\n\n    renderPendingAdminTasksCard() {\n        if (!this.isAdmin()) {\n            return\n        }\n        return (\n            <Card title=\"Organization Inbox\"\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard pendingAdminTasksCard\">\n                {this.renderPendingAdminRequests()}\n            </Card>\n        )\n    }\n\n    renderPendingNotifications() {\n        return (\n            <Notifications />\n        )\n    }\n\n    renderPendingRequestsSent() {\n        const requests = this.props.viewModel.requestOutbox\n        if (requests.length === 0) {\n            return (\n                <div className=\"message\">\n                    No pending requests\n                </div>\n            )\n        }\n        return this.props.viewModel.requestOutbox.map((request, index) => {\n            return (\n                <div key={index}>\n                    <OutboxRequest request={request} />\n                </div>\n            )\n        })\n    }\n\n    renderPendingAdminRequests() {\n        const requests = this.props.viewModel.pendingAdminRequests\n        if (requests.length === 0) {\n            return (\n                <div className=\"message\">\n                    No pending organization requests\n                </div>\n            )\n        }\n\n        return requests.map((request, index) => {\n            return (\n                <React.Fragment key={index}>\n                    <InboxRequest request={request} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    renderPendingRequestsReceived() {\n        const requests = this.props.viewModel.requestInbox\n        if (requests.length === 0) {\n            return (\n                <div className=\"message\">\n                    No pending invitations\n                </div>\n            )\n        }\n        return this.props.viewModel.requestInbox.map((request) => {\n            return (\n                <React.Fragment key={request.id}>\n                    <InboxRequest request={request} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    render() {\n\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return (\n                    <Redirect to=\"/organizations\" />\n                )\n            case NavigateTo.NEW_ORG:\n                return (\n                    <Redirect to=\"/newOrganization\" />\n                )\n        }\n\n        return (\n            <div className=\"Dashboard scrollable-flex-column\">\n                {this.renderHeader()}\n                <div className=\"body scrollable-flex-column\">\n                    <div className=\"col1 scrollable-flex-column\">\n                        {this.renderOrganizationsCard()}\n                    </div>\n                    <div className=\"col2\">\n\n                        {this.renderNotificationsCard()}\n\n                        {this.renderPendingRequestsReceivedCard()}\n\n                        {this.renderPendingRequestsSentCard()}\n\n                        {this.renderPendingAdminTasksCard()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Dashboard","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport Dashboard from './component'\nimport { StoreState, DashboardViewModel } from '../../../types';\nimport * as actions from '../../../redux/actions/dashboard';\nimport * as userModel from '../../../data/models/user'\nimport * as requestModel from '../../../data/models/requests'\n\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    viewModel: DashboardViewModel\n    currentUser: userModel.Username\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const view = state.views.dashboardView\n    const currentUser = state.auth.authorization.username\n    if (view.viewModel === null) {\n        throw new Error('view model is null!')\n    }\n    return {\n        viewModel: view.viewModel,\n        currentUser\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.DashboardAction<any>>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(actions.cancelOutboxRequest(request) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Dashboard)","import * as React from 'react'\nimport { ComponentLoadingState, AppError, DashboardViewModel, DashboardView, StoreState } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: DashboardView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Fetching your orgs and other stuff...\n            </div>\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/dashboard'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: DashboardView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.dashboardView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.DashboardAction<any>>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import {\n    StoreState, SortDirection, AuthState, AppState,\n    EditState, SaveState, ValidationState, BrowseOrgsState, ComponentLoadingState\n} from \"../types\";\n\n// rawOrganizations: [],\n//                         organizations: [],\n//                         totalCount: 0,\n//                         filteredCount: 0,\n//                         sortBy: 'name',\n//                         sortDirection: SortDirection.ASCENDING,\n//                         filter: 'all',\n//                         searchTerms: [],\n//                         selectedOrganizationId: null,\n//                         searching: false\nexport class StateInstances {\n    static makeInitialState(): StoreState {\n        return {\n            entities: {\n                users: {\n                    byId: new Map(),\n                    all: []\n                },\n                orgs: {\n                    byId: new Map(),\n                    all: []\n                },\n                requests: {\n                    byId: new Map(),\n                    all: []\n                },\n                narratives: {\n                    byId: new Map()\n                }\n            },\n            db: {\n                notifications: {\n                    byId: new Map(),\n                    collections: {\n                        byGroup: new Map()\n                    }\n                }\n            },\n            views: {\n                browseOrgsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                organizationCentricView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                addOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                editOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                    // organizationId: '',\n                    // editState: EditState.NONE,\n                    // saveState: SaveState.NONE,\n                    // validationState: ValidationState.NONE,\n                    // editedOrganization: StaticData.makeEmptyEditableOrganization(),\n                    // organization: null\n                },\n                manageOrganizationRequestsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewMembersView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                inviteUserView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                manageMembershipView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                requestNarrativeView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                dashboardView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n            },\n\n\n            auth: {\n                status: AuthState.NONE,\n                message: '',\n                authorization: {\n                    token: '',\n                    username: '',\n                    realname: '',\n                    roles: []\n                }\n            },\n            error: null,\n\n            app: {\n                status: AppState.NONE,\n                config: {\n                    baseUrl: '',\n                    services: {\n                        Groups: {\n                            url: ''\n                        },\n                        UserProfile: {\n                            url: ''\n                        },\n                        Workspace: {\n                            url: ''\n                        },\n                        ServiceWizard: {\n                            url: ''\n                        },\n                        Feeds: {\n                            url: ''\n                        }\n                    }\n                }\n            },\n\n            updateOrg: {\n                pending: false\n            },\n\n\n        }\n    }\n}","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router'\nimport { Redirect, HashRouter } from 'react-router-dom'\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport theReducer from './redux/reducers'\n\n// the app and subcomponents\nimport './App.css';\n\n// fontawesome setup\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSearch, faGlobe, faUserLock } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSpinner, faSearch, faGlobe, faUserLock)\n\nimport OrganizationsBrowser from './components/views/browseOrgs/loader'\nimport NewOrganization from './components/views/newOrganization/loader'\nimport ViewOrganization from './components/views/viewOrganization/loader'\nimport EditOrganization from './components/views/editOrganization/loader'\nimport Auth from './containers/Auth'\nimport KBaseIntegration from './containers/KBaseIntegration'\nimport ManageOrganizationRequests from './components/views/manageOrganizationRequests/loader'\nimport ViewMembers from './components/views/viewMembers/loader'\nimport InviteUser from './components/views/inviteUser/loader'\nimport ManageMembership from './components/views/manageMembership/loader'\nimport RequestAddNarrative from './components/views/requestAddNarrative/loader'\nimport DashboardView from './components/views/dashboard/loader'\nimport { StateInstances } from './redux/state';\n\n// Put the redux store together\n// Just for prototyping --- This is super naive and will change!\n// import {organizations} from './data/temp';\n\n// TODO: determine the environment\n\nconst hosted = window.frameElement ? true : false\n\n// Set up initial state \n// TODO: move to own file\nconst initialState = StateInstances.makeInitialState()\n\n\n// TODO: remove the cast of reducer to any...\n// const middleware = [thunk]\n// const store = createStore<StoreState, SortOrgs, null, null>(theReducer as any, initialState, applyMiddleware(thunk));\nconst store = createStore(theReducer as any, initialState as any, compose(applyMiddleware(thunk)))\n\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Auth hosted={hosted}>\n          <KBaseIntegration>\n            <HashRouter basename=\"/orgs/\">\n              <div className=\"App scrollable-flex-column\">\n                <div className=\"App-body scrollable-flex-column\">\n                  <Switch>\n                    <Route path=\"/\" exact={true} component={DashboardView} />\n                    <Route path=\"/organizations\" component={OrganizationsBrowser} />\n                    <Route path=\"/newOrganization\" component={NewOrganization} />\n                    {/* The destructuring below is ugly, but effective */}\n                    <Route path=\"/viewOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewOrganization organizationId={id} />} />\n                    <Route path=\"/editOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <EditOrganization organizationId={id} />} />\n                    <Route path=\"/manageOrganizationRequests/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ManageOrganizationRequests organizationId={id} />} />\n                    <Route path=\"/viewMembers/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewMembers organizationId={id} />} />\n                    <Route path=\"/inviteUser/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<InviteUser organizationId={id} />)} />\n                    <Route path=\"/membership/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<ManageMembership organizationId={id} />)} />\n                    <Route path=\"/requestAddNarrative/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<RequestAddNarrative organizationId={id} />)} />\n\n                    {/* <Redirect from=\"/\" to=\"/organizations\" exact={true} /> */}\n                  </Switch>\n                </div>\n              </div>\n            </HashRouter>\n          </KBaseIntegration>\n        </Auth>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport 'typeface-oxygen';\nimport 'normalize.css';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}