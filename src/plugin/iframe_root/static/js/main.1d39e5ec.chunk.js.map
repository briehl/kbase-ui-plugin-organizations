{"version":3,"sources":["components/entities/nouserpic.png","types/index.tsx","redux/actions/index.ts","redux/reducers/addOrg.ts","redux/reducers/editOrg.ts","redux/reducers/viewOrganization/acceptInboxRequest.ts","redux/reducers/viewOrganization/viewMembers.ts","redux/reducers/viewOrganization/denyInboxRequest.ts","redux/reducers/viewOrganization/cancelOutboxRequests.ts","data/apis/groups.ts","data/models/requests.ts","data/models/organization/model.ts","data/models/organization/validation.ts","combo/error/api.ts","redux/actions/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/relatedOrganizations.ts","redux/reducers/viewOrg.ts","redux/reducers/browseOrgs.ts","redux/reducers/auth.ts","redux/reducers/app.ts","redux/reducers/manageOrganizationRequests.ts","redux/reducers/viewMembers.ts","redux/reducers/viewOrganization/inviteUser.ts","redux/reducers/manageMembership.ts","redux/reducers/viewOrganization/requestAddNarrative.ts","redux/reducers/entities/organization.ts","redux/reducers/entities.ts","redux/reducers/dataServices.ts","redux/reducers/index.tsx","components/entities/Owner.tsx","components/OrgLogo.tsx","components/entities/Avatar.tsx","data/apis/serviceClient.ts","data/apis/userProfile.ts","data/models/user.ts","data/apis/genericClient.ts","data/apis/serviceWizard.ts","data/apis/dynamicServiceClient.ts","data/apis/narrativeService.ts","data/models/narrative.ts","data/apis/workspaceUtils.ts","redux/actions/entities.ts","components/entities/OwnerContainer.tsx","lib/time.ts","components/NiceElapsedTime.tsx","components/BriefOrganization.tsx","components/views/browseOrgs/organizations/component.tsx","components/views/browseOrgs/organizations/container.tsx","components/views/browseOrgs/component.tsx","redux/actions/browseOrgs.ts","components/views/browseOrgs/container.tsx","components/views/browseOrgs/loader.tsx","lib/DebouncingProcess.ts","redux/actions/addOrg.ts","components/views/newOrganization/component.tsx","components/views/newOrganization/container.tsx","components/views/newOrganization/loader.tsx","data/models/uber.ts","redux/actions/dataServices.ts","redux/actions/viewOrg.ts","redux/actions/viewOrganization/acceptInboxRequest.ts","components/Header.tsx","lib/error.ts","redux/actions/viewOrganization/viewMembers.ts","components/entities/Member.tsx","components/entities/MemberContainer.tsx","components/views/viewOrganization/accessible/members/component.tsx","components/views/viewOrganization/accessible/members/reduxAdapter.tsx","redux/actions/viewOrganization/denyInboxRequest.ts","redux/actions/viewOrganization/cancelOutboxRequest.ts","components/entities/User.tsx","components/entities/UserContainer.tsx","components/entities/Narrative.tsx","components/entities/NarrativeContainer.tsx","components/views/viewOrganization/accessible/requests/InboxRequest.tsx","components/views/viewOrganization/accessible/requests/InboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/OutboxRequest.tsx","components/views/viewOrganization/accessible/requests/OutboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/component.tsx","components/views/viewOrganization/accessible/requests/container.tsx","components/views/viewOrganization/accessible/BriefOrganizationHeader.tsx","components/entities/organization/component.tsx","components/entities/organization/Inaccessible.tsx","components/entities/organization/loader.tsx","redux/actions/entities/organization.ts","components/views/viewOrganization/accessible/relatedOrgs/component.tsx","components/views/viewOrganization/accessible/relatedOrgs/reduxAdapter.tsx","redux/actions/viewOrganization/relatedOrganizations.ts","components/views/viewOrganization/accessible/manageRelatedOrganizations/AvailableOrganization.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/component.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/reduxAdapter.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/loader.tsx","redux/actions/viewOrganization/inviteUser.ts","components/User.tsx","components/menu/component.tsx","components/views/viewOrganization/accessible/inviteUser/component.tsx","components/views/viewOrganization/accessible/inviteUser/container.tsx","components/views/viewOrganization/accessible/inviteUser/loader.tsx","components/entities/UserSimple.tsx","components/entities/UserSimpleContainer.tsx","components/entities/narrative/component.tsx","components/entities/narrative/reduxAdapter.tsx","components/OrganizationNarrative.tsx","components/views/viewOrganization/accessible/narratives/component.tsx","redux/actions/manageMembership.ts","components/views/viewOrganization/accessible/manageMembership/component.tsx","components/views/viewOrganization/accessible/manageMembership/container.tsx","combo/error/component.tsx","components/views/viewOrganization/accessible/manageMembership/loader.tsx","redux/actions/editOrg.ts","components/views/viewOrganization/accessible/editOrganization/component.tsx","components/views/viewOrganization/accessible/editOrganization/container.tsx","components/views/viewOrganization/accessible/editOrganization/loader.tsx","components/views/viewOrganization/accessible/requestAddNarrative/component.tsx","redux/actions/viewOrganization/requestAddNarrative.ts","components/views/viewOrganization/accessible/requestAddNarrative/container.tsx","components/views/viewOrganization/accessible/requestAddNarrative/loader.tsx","components/views/viewOrganization/accessible/component.tsx","components/views/viewOrganization/accessible/OrgMenu.tsx","components/views/viewOrganization/accessible/container.tsx","components/views/viewOrganization/inaccessible/component.tsx","components/views/viewOrganization/inaccessible/container.tsx","components/views/viewOrganization/loader.tsx","components/Auth.tsx","data/auth.ts","redux/actions/auth.ts","containers/Auth.tsx","lib/windowChannel.ts","lib/IFrameSimulator.ts","lib/IFrameIntegration.ts","redux/actions/app.ts","components/KBaseIntegration.tsx","containers/KBaseIntegration.tsx","redux/state.tsx","components/dataServices/component.tsx","components/dataServices/storeAdapter.tsx","AppContext.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","ComponentView","UIErrorType","SyncState","EditState","ValidationErrorType","SaveState","MemberType","RequestType","RequestResourceType","RequestStatus","AuthState","ViewOrgState","AppState","SortDirection","ComponentLoadingState","BrowseOrgsState","InviteUserViewState","NarrativeState","ProcessingState","RequestNarrativeState","SelectionState","ViewOrgViewModelKind","SubViews","ViewOrgSubViewKind","ViewState","ErrorCode","ActionFlag","AppException","_Error","_ref","_this","code","message","detail","info","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","trace","errors","name","Error","captureStackTrace","assertThisInitialized","stack","indexOf","split","inherits","wrapNativeSuper","reducer","state","action","type","ADD_ORG_SAVE","views","addOrgView","viewModel","objectSpread","saveState","SAVING","console","warn","saveStart","ADD_ORG_SAVE_SUCCESS","editState","UNEDITED","SAVED","saveSuccess","ADD_ORG_SAVE_ERROR","SAVE_ERROR","error","saveError","ADD_ORG_LOAD_START","loadingState","LOADING","loadStart","ADD_ORG_LOAD_SUCCESS","SUCCESS","validationState","OK","validatedAt","Date","NEW","newOrganization","loadSuccess","ADD_ORG_LOAD_ERROR","loadError","ADD_ORG_UNLOAD","NONE","unload","ADD_ORG_UPDATE_NAME_SUCCESS","EDITED","value","syncState","DIRTY","updateNameSuccess","ADD_ORG_UPDATE_NAME_ERROR","updateNameError","ADD_ORG_UPDATE_LOGO_URL_SUCCESS","logoUrl","updateLogoUrlSuccess","ADD_ORG_UPDATE_LOGO_URL_ERROR","updateLogoUrlError","ADD_ORG_UPDATE_HOME_URL_SUCCESS","homeUrl","updateHomeUrlSuccess","ADD_ORG_UPDATE_HOME_URL_ERROR","updateHomeUrlError","ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","researchInterests","updateResearchInterestsSuccess","ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","updateResearchInterestsError","ADD_ORG_UPDATE_ID_SUCCESS","id","updateIdSuccess","ADD_ORG_UPDATE_ID_ERROR","updateIdError","ADD_ORG_UPDATE_ID_PASS","updateIdPass","ADD_ORG_UPDATE_DESCRIPTION_SUCCESS","description","updateDescriptionSuccess","ADD_ORG_UPDATE_DESCRIPTION_ERROR","updateDescriptionError","ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS","isPrivate","updateIsPrivateSuccess","ADD_ORG_EVALUATE_OK","addOrgEvaluateOk","ADD_ORG_EVALUATE_ERRORS","ERROR","addOrgEvaluateErrors","validationStateOk","evaluateEditorState","editedOrganization","EDIT_ORG_LOAD_START","editOrgView","EDIT_ORG_LOAD_SUCCESS","organization","EDIT_ORG_LOAD_ERROR","EDIT_ORG_UNLOAD","EDIT_ORG_SAVE_START","editOrgSaveStart","EDIT_ORG_SAVE_SUCCESS","CLEAN","editOrgSaveSuccess","EDIT_ORG_SAVE_ERROR","editOrgSaveError","EDIT_ORG_UPDATE_NAME_SUCCESS","editedOrg","remoteValue","newState","editOrgUpdateNameSuccess","EDIT_ORG_UPDATE_NAME_ERROR","editOrgUpdateNameError","EDIT_ORG_UPDATE_LOGO_URL_SUCCESS","editOrgUpdateLogoUrlSuccess","EDIT_ORG_UPDATE_LOGO_URL_ERROR","editOrgUpdateLogoUrlError","EDIT_ORG_UPDATE_HOME_URL_SUCCESS","editOrgUpdateHomeUrlSuccess","EDIT_ORG_UPDATE_HOME_URL_ERROR","editOrgUpdateHomeUrlError","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_ERROR","editOrgUpdateDescriptionError","EDIT_ORG_EVALUATE_OK","editOrgEvaluateOk","EDIT_ORG_EVALUATE_ERRORS","editOrgEvaluateErrors","VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS","viewOrgView","kind","NORMAL","requestInbox","requests","acceptInboxRequestSuccess","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","members","map","member","username","memberUsername","ADMIN","sortedMembers","promoteToAdminSuccess","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","MEMBER","demoteToMemberSuccess","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS","filter","removeMemberSuccess","VIEW_ORG_SORT_MEMBERS_SUCCESS","sortMembersBy","sortBy","sortMembersSuccess","VIEW_ORG_SEARCH_MEMBERS_SUCCESS","searchMembersBy","searchBy","searchMembersSuccess","VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS","rejectInboxRequestSuccess","VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS","requestOutbox","cancelRequestSuccess","GroupException","_AppException","apperror","Map","httpcode","httpstatus","appcode","callid","time","originalError","ServerException","_AppException2","_this2","GroupsClient","token","url","createClass","key","fetch","headers","Authorization","Accept","mode","then","response","json","result","exists","_listGroups","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","status","abrupt","stop","apply","arguments","path","body","concat","join","Content-Type","method","JSON","stringify","statusText","get","text","_post","_callee2","errorText","_context2","t0","_x","_x2","_get","_callee3","_context3","_x3","newGroup","payload","private","custom","logourl","researchinterests","homeurl","length","put","groupUpdate","_addRelatedGroup","_callee4","groupId","relatedGroupId","group","relatedGroups","update","_context4","relatedgroups","includes","push","_x4","_x5","_removeRelatedGroup","_callee5","newRelatedGroups","_context5","_x6","_x7","_getRequest","_callee6","requestId","_context6","_x8","params","query","URLSearchParams","includeClosed","append","sortDirection","DESCENDING","startAt","String","getTime","toString","workspaceId","complete","_grantResourceAccess","_callee7","resourceType","resourceId","_context7","post","_x9","_x10","_x11","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_visitGroup","_callee8","_ref11","_context8","_x12","_getOpenRequests","_callee9","_ref12","groupIds","requestStatuses","_arr","_i","_ref15","_ref14","_groupId","requestStatus","_context9","entries","slicedToArray","set","_x13","groupRequestToOrgRequest","request","requestType","INVITATION","REQUEST","stringToRequestType","USER","WORKSPACE","APP","stringToResourceType","resourcetype","OPEN","organizationId","groupid","requester","user","resource","createdAt","createdate","expireAt","expiredate","modifiedAt","moddate","narrativeId","appId","UserRelationToOrganization","UserWorkspacePermission","OrganizationKind","RequestsModel","groupsClient","cache","groupsApi","groupsServiceURL","grequest","has","getRequest","_getOutboundRequests","grequests","getCreatedRequests","forEach","_getUserRequestForOrg","find","r","_getPendingRequestsForOrg","_getRequestInboxForOrg","getTargetedRequests","_getCombinedRequestInboxForOrg","getGroupRequests","t1","_getRequestOutboxForOrg","_getOrganizationInvitations","_getOrganizationInvitationsForOrg","invitations","getOrganizationInvitations","invitation","_getInboundRequests","_callee10","_this3","_context10","_getUserInvitationForOrg","_callee11","_context11","_getPendingOrganizationRequestsForOrg","_callee12","groupRequests","_context12","_getPendingOrganizationRequests","_callee13","allRequests","_context13","Promise","all","reduce","_cancelRequest","_callee14","_context14","cancelRequest","_acceptRequest","_callee15","_context15","acceptRequest","_denyRequest","_callee16","_context16","denyRequest","_acceptJoinInvitation","_callee17","_context17","_x14","_rejectJoinInvitation","_callee18","_context18","_x15","_inviteUserToJoinOrg","_callee19","_context19","inviteUserToGroup","_x16","_x17","Validation","s","firstNonPrintable","search","nonPrintableRe","beforeStart","before","slice","after","REQUIRED_MISSING","match","URL","protocol","ex","title","determineRelation","org","INACCESSIBLE_PRIVATE","MEMBER_REQUEST_PENDING","MEMBER_INVITATION_PENDING","owner","OWNER","groupPermissionToWorkspacePermission","groupsPermission","VIEW","EDIT","groupToOrganization","currentUser","joinedAt","joined","lastVisitedAt","lastvisit","admins","admin","narratives","resources","workspace","parseInt","rid","narrname","isPublic","public","permission","perm","narrcreate","updatedAt","addedAt","added","isMember","role","isAdmin","isOwner","relation","groupRoleToUserRelation","areMembersPrivate","privatemembers","apps","memberCount","memcount","narrativeCount","rescount","appCount","catalogmethod","relatedOrganizations","groupToPrivateOrganization","applySearch","orgs","searchTerms","searchTermsRe","term","RegExp","every","termRe","test","dateDays","d","t","Math","round","applySortComparison","sortField","direction","b","localeCompare","applySort","organizations","ASCENDING","sort","applyFilter","roleType","roles","privacy","applyRoleType","some","applyRole","applyPrivacy","narrativeSortByToComparator","queryNarratives","c1","applyNarrativeSort","tokens","narrative","applyNarrativeSearch","memberSortByToComparator","queryMembers","applyMembersSort","applyMembersSearch","OrganizationModel","_getOrg","getGroupById","_getOrganization","_getOrgs","ids","getOrg","_getOwnOrgs","ownOrgs","getAllOrgs2","_getAllOrgs","allGroups","groups","listGroups","listGroupToBriefOrganization","_queryOrgs","filtered","searched","sorted","total","_ownOrgs","_grantViewAccess","req","grantReadAccessToRequestedResource","requestModel","_addOrg","newOrg","reject","createGroup","_orgExists","groupExists","_updateOrg","orgUpdate","updateGroup","validateOrgId","validateOrgName","validateOrgDescription","_removeNarrativeFromOrg","deleteResource","_grantNarrativeAccess","grantResourceAccess","_requestMembership","requestMembership","_addOrRequestNarrativeToGroup","addOrRequestNarrative","_x18","_memberToAdmin","memberToAdmin","_x19","_x20","_adminToMember","adminToMember","_x21","_x22","_removeMember","removeMember","_x23","_x24","_updateMember","updateMember","_x25","_x26","_x27","_visitOrg","_callee20","_context20","visitGroup","_x28","_getOpenRequestsStatus","_callee21","organizationIds","openRequests","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context21","getOpenRequests","undefined","Symbol","iterator","done","stringToRequestStatus","return","finish","_x29","_getOpenRequestStatus","_callee22","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context22","_x30","_addRelatedOrganization","_callee23","relatedOrganizationId","_context23","addRelatedGroup","_x31","_removeRelatedOrganization","_callee24","_ref13","_context24","removeRelatedGroup","_x32","new","OLD","makeError","history","uuid","at","applyQuery","searchExp","re","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS","subViews","manageRelatedOrganizationsView","MANAGE_RELATED_ORGS","availableOrganizations","queried","selectedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION","availableOrgs","relatedOrg","isSelected","actions","selectOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS","newRelatedOrgs","newAvailableOrgs","isRelated","addOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","relatedOrgs","removeOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS","searchSuccess","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","VIEW_ORG_LOAD_START","types","VIEW_ORG_LOAD_NORMAL_SUCCESS","openRequest","groupInvitations","sortNarrativesBy","narrativesSortBy","searchNarrativesBy","inviteUserView","requestNarrativeView","loadNormalSuccess","VIEW_ORG_RELOAD_NORMAL_SUCCESS","reloadNormalSuccess","VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS","PRIVATE_INACCESSIBLE","loadInaccessiblePrivateSuccess","VIEW_ORG_LOAD_ERROR","VIEW_ORG_UNLOAD","VIEW_ORG_REMOVE_NARRATIVE_SUCCESS","newNarratives","newDisplayNarratives","removeNarrativeSuccess","VIEW_ORG_ACCESS_NARRATIVE_SUCCESS","accessNarrativeSuccess","VIEW_ORG_SORT_NARRATIVES_SUCCESS","sortNarrativesSuccess","VIEW_ORG_SEARCH_NARRATIVES_SUCCESS","searchNarrativesSuccess","acceptInboxRequest","denyInboxRequest","cancelOutboxRequest","viewMembers","manageRelatedOrganizations","localReducer","BROWSE_ORGS_LOAD_SUCCESS","_action$defaultViewMo","defaultViewModel","rawOrganizations","totalCount","filteredCount","selectedOrganizationId","searching","BROWSE_ORGS_SEARCH","searchOrgs","BROWSE_ORGS_SEARCH_START","searchOrgsStart","BROWSE_ORGS_SEARCH_SUCCESS","searchOrgsSuccess","BROWSE_ORGS_SEARCH_ERROR","searchOrgsError","BROWSE_ORGS_SORT_START","sortOrgsStart","BROWSE_ORGS_FILTER_START","filterOrgsStart","BROWSE_ORGS_UNLOAD","AUTH_CHECK_START","auth","CHECKING","authorization","realname","authCheckStart","AUTH_AUTHORIZED","AUTHORIZED","authAuthorized","AUTH_UNAUTHORIZED","UNAUTHORIZED","authUnauthorized","AUTH_CHECK_ERROR","authCheckError","APP_SUCCESS","app","READY","config","appSuccess","ADMIN_MANAGE_REQUESTS_LOAD_START","ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS","manageOrganizationRequestsView","ADMIN_MANAGE_REQUESTS_LOAD_ERROR","ADMIN_MANAGE_REQUESTS_UNLOAD","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS","newRequests","getViewAccessSuccess","VIEW_MEMBERS_LOAD_START","viewMembersView","VIEW_MEMBERS_LOAD_SUCCESS","VIEW_MEMBERS_LOAD_ERROR","VIEW_MEMBERS_UNLOAD","VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","INVITE_USER_LOAD_START","INVITE_USER_LOAD_SUCCESS","EDITING","users","selectedUser","INVITE_USER_LOAD_ERROR","INVITE_USER_UNLOAD","INVITE_USER_SEARCH_USERS_SUCCESS","searchUsersSuccess","INVITE_USER_SELECT_USER_SUCCESS","selectUserSuccess","INVITE_USER_SEND_INVITATION_START","SENDING","sendInvitationStart","INVITE_USER_SEND_INVITATION_SUCCESS","_state$viewModel","orgModel","newUsers","sendInvitationSuccess","INVITE_USER_SEND_INVITATION_ERROR","sendInvitationError","haveReducer","newViewState","editableMemberProfile","MANAGE_MEMBERSHIP_LOAD_START","manageMembershipView","MANAGE_MEMBERSHIP_LOAD_SUCCESS","MANAGE_MEMBERSHIP_LOAD_ERROR","MANAGE_MEMBERSHIP_UNLOAD","MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS","editedMember","updateTitleSuccess","MANAGE_MEMBERSHIP_EVALUATE_SUCCESS","evaluateSuccess","MANAGE_MEMBERSHIP_EVALUATE_ERROR","evaluateError","MANAGE_MEMBERSHIP_SAVE_SUCCESS","sendRequestStart","REQUEST_ADD_NARRATIVE_LOAD_START","REQUEST_ADD_NARRATIVE_LOAD_SUCCESS","selectedNarrative","selectionState","REQUEST_ADD_NARRATIVE_LOAD_ERROR","REQUEST_ADD_NARRATIVE_SEND_START","REQUEST_ADD_NARRATIVE_SEND_SUCCESS","orgNarrative","ASSOCIATED","REQUESTED","sendRequestSuccess","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START","selectNarrativeStart","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS","selectNarrativeSuccess","REQUEST_ADD_NARRATIVE_UNLOAD","REQUEST_ADD_NARRATIVE_SORT_SUCCESS","sortSuccess","ENTITY_ORGANIZATION_LOAD_SUCCESS","newOrgs","entities","byId","ENTITY_USER_LOADER_SUCCESS","userLoaderSuccess","ENTITY_ORGANIZATION_LOADER_SUCCESS","orgsMap","organizationLoaderSuccess","ENTITY_NARRATIVE_LOAD_SUCCESS","loadNarrativeSuccess","organizationsReducer","DATA_SERVICE_LOAD_SUCCESS","db","View","addOrgReducer","editOrgReducer","browseOrgsView","browseOrgsReducer","viewOrgReducer","authReducer","appReducer","manageOrganizatiopRequests","inviteUser","manageMembership","requestAddNarrative","dataServices","OrgLogo","props","react","src","width","size","inString","position","charCodeAt","c2","substring","initial","charAt","organizationName","toUpperCase","color","md5","substr","height","style","border","x","y","dy","textAnchor","dominantBaseline","fontSize","fill","fontFamily","renderLogoUrl","renderDefaultInitial","renderLogo","React","Avatar","_React$Component","avatarOption","gravatarDefault","gravatarHash","noUserPic","avatarUrl","getAvatarUrl","reverseView","v","COMPACT","Owner","view","setState","icon","showAvatar","className","components_entities_Avatar","avatarSize","tooltip","renderAvatar","es_tooltip","placement","href","target","onClick","onToggleView","bind","city","country","renderCompact","ServiceClient","param","version","constructor","random","AuthorizedServiceClient","_ServiceClient","func","makePayload","UserProfileClient","_AuthorizedServiceCli","makeEmptyPayload","_getUserProfile","profileCache","resolve","callFunc","_updateUserProfile","delete","profile","_getUserProfiles","usernames","_getAllUsers","_searchUsers","profileToUser","jobTitle","userdata","jobTitleOther","synced","UserModel","userProfileClient","userProfileServiceURL","_getUser","userProfile","getUserProfile","_getUsers","toFetch","userProfiles","getUserProfiles","searchUsers","excludedUsers","AuthorizedGenericClient","_GenericClient","_callFunc2","processResponse","GenericClient","_processResponse","_error","_error2","_callFunc","ServiceWizardClient","theResult","moduleCache","Cache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cacheLifetime","isMonitoring","window","setTimeout","newCache","cacheRenewed","keys","item","isExpired","runMonitor","cacheItem","reserved","cached","Bluebird","started","waiter","reserveAndFetch","fetcher","catch","err","elapsed","reserveItem","fetchPromise","setItem","finally","isCancelled","isReserved","reserveWaiter","DynamicServiceClient","timeout","rpcContext","moduleId","getModule","getItemWithWait","_this4","getCached","client","getServiceStatus","module_name","funcName","_this5","lookupModule","serviceStatus","NarrativeAccess","Sort","NarrativeServiceClient","_DynamicServiceClient","_listNarratives","iso8601ToDate","dateString","dateParts","exec","TypeError","offset","newDateString","workspaceInfoToObject","wsInfo","objectCount","userPermission","globalReadPermission","lockStatus","metadata","objectInfoToObject","data","majorVersion","minorVersion","savedAt","savedBy","workspaceName","checksum","ref","NarrativeModel","_getOwnNarratives","narrativeServiceClient","requestClient","narrativesResult","pendingRequests","workspacesInOrg","serviceWizardURL","listNarratives","getPendingRequestsForOrg","nar","workspaceInfo","workspaceApi","ws","objectInfo","is_temporary","access","objectId","narrative_nice_name","lastSavedAt","lastSavedBy","TITLE","LAST_SAVED","sorter","getSorter","_getNarrative","workspaceClient","rawWorkspaceInfo","_objectId","rawObjectInfo","_access","workspaceServiceURL","objects","wsid","objid","includeMetadata","ignoreErrors","infos","userLoader","userId","dispatch","getState","_getState","_getState$auth$author","model","_user","ENTITY_USER_LOADER_START","userModel","services","UserProfile","getUser","ENTITY_USER_LOADER_ERROR","loadNarrative","_getState3","_getState3$auth$autho","narrativeClient","_narrative","ENTITY_NARRATIVE_LOAD_START","narrativeModel","Workspace","Groups","ServiceWizard","getNarrative","ENTITY_NARRATIVE_LOAD_ERROR","Loader","times","Owner_Owner","onLoad","connect","niceElapsed","someDate","absoluteAfter","measure","measureAbs","unit","compactDate","nowDate","elapsedAbs","abs","prefix","suffix","getFullYear","Intl","DateTimeFormat","month","day","format","year","NiceElapsedTime","showTooltip","fullDate","hour","minute","timeZoneName","tooltipPrefix","BriefOrganization","OrgLogo_OrgLogo","mouseEnterDelay","newAlert","theme","requestsAlert","iconColor","openRequestsStatus","INAPPLICABLE","permalink","fontWeight","location","origin","menu","es_menu","Modal","content","Item","dropdown","overlay","trigger","NavLink","to","renderRelation","renderPrivacy","renderHomeUrl","renderOrgFreshness","renderRequests","renderPermalink","second","OwnerContainer","fullTimestamp","memberCountTooltip","renderMemberCount","count","renderNarrativeCount","NiceElapsedTime_NiceElapsedTime","renderMemberRow","renderNarrativeRow","renderModifiedRow","renderLogoColumn","renderInfoCol","renderStatsCol","renderNormal","Organizations","singular","plural","es_button","es_alert","maxWidth","margin","index","BriefOrganization_BriefOrganization","renderNoOrgs","overflowY","display","flexDirection","renderOrgs","_state$views$browseOr","OrganizationsBrowser","searchInput","searchButton","filterByRoleValues","label","filterByRoleType","filterByRole","filterByPrivacy","showAdvancedControls","onSearchOrgs","current","currentSearchInputValue","e","preventDefault","doSearch","onSortOrgs","newFilter","onFilterOrgs","checkedValues","onSearchInputChange","onSubmit","placeholder","onChange","autoFocus","disabled","haveSearchInput","form","htmlType","renderSearchIcon","onClearSearch","renderSearchFeedback","renderSearchForm","marginRight","es_select","onSortByChange","defaultValue","dropdownMatchSelectWidth","Option","_this$props$filter","onToggleAdvanced","radioStyle","lineHeight","es_radio","Group","onFilterByRoleTypeChange","renderAdvancedToggle","es_checkbox","options","onFilterByRoleChange","onFilterByPrivacyChange","container","renderSortByControl","marginTop","renderFilterByRole","renderFilterByPrivacy","textAlign","borderTop","renderSearchBar","renderOrganizations","renderFilterColumn","storeState","_storeState$views$bro","_getState2","_getState2$auth$autho","_browseOrgsView$viewM","orgClient","_organizations2","adminOrgs","_openRequests2","queryOrgs","getOpenRequestsStatus","_browseOrgsView$viewM2","_organizations3","_openRequests3","_getState4","_getState4$auth$autho","_browseOrgsView$viewM3","_organizations4","_openRequests4","spin","padding","renderLoading","renderError","browseOrgs_container","onUnload","defaultSearchTerms","defaultSortField","defaultSortDirection","defaultFilter","_organizations","_openRequests","_defaultViewModel","BROWSE_ORGS_LOAD_START","DebouncingProcess","delay","canceled","timer","clearTimeout","task","AddOrgEvaluateErrors","load","validateOrgLogoUrl","validateOrgHomeUrl","validateOrgResearchInterests","addOrgEvaluate","addOrg","ADD_ORG_SAVE_START","_state$auth$authoriza","exception","_state$views$addOrgVi","orgModelFromState","_state$auth$authoriza2","updateName","_Validation$validateO","_Validation$validateO2","validatedName","updateLogoUrl","_Validation$validateO3","_Validation$validateO4","validatedLogoUrl","checkIDProcess","CheckIfExistsProcess","orgExists","updateDescription","_Validation$validateO11","_Validation$validateO12","validatedDescription","NewOrganization","cancelToBrowser","showError","document","isModified","confirm","onOk","onCancel","okText","cancelText","onSave","persist","onUpdateName","onUpdateDescription","onUpdateId","onUpdateLogoUrl","onUpdateHomeUrl","onUpdateResearchInterests","onUpdateIsPrivate","checked","field","nameField","input","calcFieldClass","renderFieldError","idField","logoUrlField","onLogoUrlChange","renderLogoPreview","homeUrlField","renderHomeURLPreview","collapse","bordered","Panel","header","background","borderRadius","overflow","isPrivateField","renderIsPrivate","researchInterestsField","TextArea_default","autosize","minRows","maxRows","descriptionField","es_tabs","defaultActiveKey","animated","TabPane","tab","dangerouslySetInnerHTML","__html","Marked","parse","flex","renderEditorHeader","renderNameRow","onNameChange","renderIDRow","onIdChange","renderLogoURLRow","renderHomeURLRow","onHomeUrlChange","renderPrivatePublicRow","onIsPrivateChange","renderResearchInterestsRow","onResearchInterestsChange","renderDescriptionRow","onDescriptionChange","renderSaveButton","renderCancelButton","renderDefaultLogo","_this$props","line","modal","visible","okType","canSave","onClickCancelToBrowser","errorButton","shape","toggleError","es_Redirect","minWidth","renderEditor","_Validation$validateO9","_Validation$validateO10","validatedId","cancel","start","updateId","updateIsPrivate","_Validation$validateO5","_Validation$validateO6","validatedHomeUrl","updateHomeUrl","_Validation$validateO7","_Validation$validateO8","validatedResearchInterests","updateResearchInterests","Component","newOrganization_container","UberModel","_getOrganizationForUser","getUserRequestForOrg","getUserInvitationForOrg","getPendingOrganizationRequestsForOrg","DATA_SERVICE_LOAD_START","removeNarrativeError","VIEW_ORG_REMOVE_NARRATIVE_ERROR","accessNarrativeError","VIEW_ORG_ACCESS_NARRATIVE_ERROR","viewOrgJoinRequestError","VIEW_ORG_JOIN_REQUEST_ERROR","acceptJoinInvitationStart","VIEW_ORG_ACCEPT_JOIN_INVITATION_START","uberClient","_organization","_relation","_requestInbox2","_openRequest","orgRequests","orgInvitations","_requestInbox","_requestOutbox","_narratives2","_members","uberModel","getOrganizationForUser","getRequestInboxForOrg","getOrganizationInvitationsForOrg","getOpenRequestStatus","getCombinedRequestInboxForOrg","getRequestOutboxForOrg","reload","_organization2","_relation2","_requestInbox4","_openRequest2","_requestInbox3","_requestOutbox2","_narratives3","_members2","viewOrgJoinRequest","_state$auth$authoriza3","VIEW_ORG_JOIN_REQUEST_SUCCESS","viewOrgCancelJoinRequest","_state$auth$authoriza4","newRequest","VIEW_ORG_JOIN_REQUEST_START","VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR","acceptJoinInvitation","_state$auth$authoriza5","VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS","VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR","rejectJoinInvitation","_state$auth$authoriza6","VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS","VIEW_ORG_REJECT_JOIN_INVITATION_ERROR","_request","inbox","VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR","VIEW_ORG_ACCEPT_INBOX_REQUEST_START","viewOrgActions","Header","context","currentMenuItem","breadcrumbs","verticalAlign","marginLeft","buttons","promoteToAdmin","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR","demoteToMember","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START","reloadOrg","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR","Member","userTooltip","renderRole","components_entities_Member","Members","confirmMemberRemoval","marginBottom","MemberContainer","onRemoveMember","onPromoteMemberToAdmin","onConfirmRemoveMember","onDemoteAdminToMember","onMemberMenu","onAdminMenu","renderOwnerMenu","renderAdminMenu","renderMemberMenu","fontStyle","classNames","renderMemberOptions","_this6","paddingRight","onSearchMembers","_this7","onSortMembers","renderSortBar","renderConfirmMemberRemoval","renderHeader","renderMembers","onViewMembersUnload","VIEW_ORG_VIEW_MEMBERS_UNLOAD","adminUsername","VIEW_ORG_SORT_MEMBERS_START","VIEW_ORG_SORT_MEMBERS_ERROR","ViewMembers","VIEW_ORG_REJECT_INBOX_REQUEST_START","VIEW_ORG_REJECT_INBOX_REQUEST_ERROR","_requests","VIEW_ORG_CANCEL_JOIN_REQUEST_START","User","components_entities_User","Narrative","cursor","UserContainer","renderPublicPermission","renderUserPermission","Narrative_Narrative","Request","onAcceptInboxRequest","onRejectInboxRequest","NarrativeContainer","renderRequestRequester","renderRequestOptions","onAcceptRequest","onRejectRequest","renderRequestReceivedSubject","renderJoinRequest","renderWorkspaceRequest","renderUserInvitation","renderBody","acceptActions","rejectActions","InboxRequest","onCancelOutboxRequest","alert","onCancelRequest","cancelActions","OutboxRequest","ManageGroupRequests","cancelToViewer","onAcceptJoinRequest","onDenyJoinRequest","onCancelJoinInvitation","onGetViewAccess","open","src_components_Header","card","hoverable","headStyle","backgroundColor","narrativeAccess","InboxRequestContainer","outbox","OutboxRequestContainer","outboxCount","inboxCount","renderInbox","renderOutbox","cancelRequestActions","orgMenu","onNavigateToBrowser","renderBackButton","renderButtonsRow","Organization","component_Organization","Inaccessible_Organization","ENTITY_ORGANIZATION_LOAD_START","ENTITY_ORGANIZATION_LOAD_ERROR","RelatedOrganizations","onManageRelatedOrgs","onRemoveRelatedOrganization","Wrapped","withRouter","OrganizationEntity","renderControls","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","removeRelatedOrganization","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR","AvailableOrganization","selectableOrganization","renderRelated","ManageRelatedOrganizations","onAddOrganization","onRemoveOrganization","onSearch","onFilterChange","classes","onSelectOrganization","AvailableOrganization_AvailableOrganization","button","alertStyle","onRemoveSelectedOrganization","onAddSelectedOrganization","onFinish","renderAvailableToolbar","renderAvailableOrgs","renderSelectedOrg","_viewModel$subViews$m","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START","addRelatedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","vm","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR","manageRelatedOrganizations_reduxAdapter","vm1","selectableOrgs","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR","selectUserError","INVITE_USER_SELECT_USER_ERROR","getUserRelation","ensureView","sendInvitation","_view$viewModel","inviteUserToJoinOrg","MainMenu","es_Route","render","selectedKeys","pathname","renderMenu","InviteUser","lastSearchAt","autocompleteMessage","onSendInvitation","doSearchUsers","searchDebounce","onSearchUsers","onSelectUser","showIcon","SENDABLE","src_components_User","onClickCancelToViewer","components_menu_component","renderMenuButtons","renderSearchButton","renderUsers","renderSelectedUser","renderInvitationForm","renderFooter","userClient","adminUsers","invited","requested","_users","orgUsers","INVITE_USER_SEARCH_USERS_START","INVITE_USER_SEARCH_USERS_ERROR","selectedUsername","INVITE_USER_SELECT_USER_START","InviteUserLoader","inviteUser_container","entities_UserSimple","iconType","UserSimpleContainer","renderGlobalPermission","renderNiceElapsed","renderNarrative","component_Narrative","OrganizationNarrative","requestAccess","shareButton","permissionTooltip","buttonTooltip","onRequestAccess","narrative_reduxAdapter","renderNarrativePermission","accessModal","drawer","closable","onClose","onCloseRequestAccess","Narratives","onRequestAddNarrative","onRemoveNarrative","onNarrativeMenu","onSearchNarratives","onSortNarratives","narrativesTable","extras","lastOrgVisitAt","OrganizationNarrative_OrganizationNarrative","renderNarrativeMenu","narrativesToShow","hiddenNarrativeCount","renderMemberNarratives","renderNonMemberNarratives","evaluate","ManageMembership","confirmed","doLeaveOrgConfirmed","onLeaveOrganization","onUpdateTitle","onTitleChange","onDone","_state$views$manageMe","MANAGE_MEMBERSHIP_LEAVE_ORG_START","MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS","MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR","_Validation$validateM","validateMemberTitle","_Validation$validateM2","validatedTitle","MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR","MANAGE_MEMBERSHIP_SAVE_START","MANAGE_MEMBERSHIP_SAVE_ERROR","renderDetail","renderInfo","component_Error","manageMembership_container","thisMember","editableProfile","editableOrg","editOrgSave","_state$views$editOrgV","updateOrg","editOrgEvaluate","editOrgUpdateDescriptionSuccess","NavigateTo","EditOrganization","navigateTo","onEditOrgSave","editOrganization_container","RequestAddNarrative","doSelectNarrative","doSendRequest","flag","onSearchSubmit","NumberFormat","useGrouping","doSortBy","renderFilterSortBar","renderFeedbackBar","renderNarratives","buttonLabel","canSendRequest","warning","renderNarrativeSelector","renderSelectedNarrative","renderSelectedAlert","renderSelectedNarrativeButton","selectNarrative","subViewModel","_request2","addOrRequestNarrativeToGroup","REQUEST_ADD_NARRATIVE_SEND_ERROR","REQUEST_ADD_NARRATIVE_SORT_START","REQUEST_ADD_NARRATIVE_SORT_ERROR","sortOrganizationNarratives","requestAddNarrative_container","AccordionState","_narratives","getOrganization","getOwnNarratives","OrgMenu","onJoinOrg","onCancelJoinRequest","onAcceptInvitation","onRejectInvitation","onChangeSubView","MANAGE_MEMBERSHIP","EDIT_ORGANIZATION","INVITE_USER","ADD_NARRATIVE","onJoinClick","onMenuClick","adminMenu","ownerMenu","renderOrgMenu","ViewOrganization","showInfo","accordionState","UP","subView","renderEditRow","reduxAdapter","onReloadOrg","inner","twoToneColor","renderGroupRequestsRow","_this$props$viewModel","renderGroupRequests","renderMembersToolbar","onInviteUser","tabs","renderMembersTab","totalRequestCount","totalRequests","requests_container","titleCount","outboxSize","relatedOrgCount","relatedOrgTab","relatedOrgs_reduxAdapter","tabPosition","BROWSER","VIEW_MEMBERS","MANAGE_REQUESTS","DOWN","toggleAccordion","orgRowClass","narrativesRowClass","minHeight","renderOrg","renderAccordionControl","component_Narratives","renderCombo","manageRelatedOrganizations_loader","inviteUser_loader","manageMembership_loader","editOrganization_loader","requestAddNarrative_loader","renderManageRelatedOrgsView","renderInviteUsersView","renderManageMembership","renderEditOrganization","renderAddNarrative","renderNormalView","borg","OrgMenu_OrgMenu","BriefOrganizationHeader_BriefOrganization","getSubView","ownProps","onViewOrg","VIEW_ORG_REMOVE_NARRATIVE_START","removeNarrativeFromOrg","filteredNarratives","VIEW_ORG_ACCESS_NARRATIVE_START","grantNarrativeAccess","acceptInboxRequestActions","VIEW_ORG_SORT_NARRATIVES_START","renderMessage","renderJoinButton","onShowInfo","previousOrganizationId","inaccessible_container","accessible_container","previousProps","visitOrg","Auth","tokenRef","checkAuth","onRemoveAuthorization","onAddAuthorization","onLoginClick","onLogoutClick","buildAuthToolbar","children","buildAuthForm","hosted","buildAuthProd","buildAuthDev","endpoints","AuthClient","makePath","Cookies","getTokenInfo","getMe","account","desc","Listener","onSuccess","onError","WaitingListener","Message","channelId","created","envelope","uuidv4","Channel","host","awaitingResponse","waitingListeners","listeners","lastId","sentCount","receivedCount","unwelcomeReceivedCount","unwelcomeReceivedCountThreshhold","unwelcomeReceiptWarning","unwelcomeReceiptWarningCount","currentListener","messageEvent","handler","awaiting","listener","messageId","success","listen","postMessage","getMessage","sendMessage","sendRequest","now","_loop","startMonitor","listenOnce","received","receiveMessage","addEventListener","removeEventListener","IFrameSimulator","channel","frameId","authServiceURL","originalPath","viewParams","parentHost","IFrameIntegration","frameElement","hasAttribute","getAttribute","decodeURIComponent","KBaseIntegration","on","send","greeting","onAppStart","setupChannel","teardownChannel","_state$app","_state$app$config","defaultPath","iframeParams","getParamsFromIFrame","pushState","baseUrl","StateInstances","pending","DataServices","DATA_SERVICE_UNLOAD","AppContextProvider","Provider","Consumer","library","add","faSpinner","faSearch","faGlobe","faUserLock","DescriptionRenderer","sanitize","prot","unescape","replace","toLowerCase","out","Renderer","MarkedOptions","renderer","setOptions","initialState","makeInitialState","store","createStore","theReducer","compose","applyMiddleware","thunk","F","react_default","createElement","viewOrganization_loader","App","es","containers_KBaseIntegration","containers_Auth","storeAdapter","BrowserRouter","basename","Switch","Route","component","exact","Redirect","from","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.1d39e5ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import * as userProfile from \"../data/apis/userProfile\"\nimport * as groups from \"../data/apis/groups\"\nimport * as orgModel from '../data/models/organization/model'\nimport * as userModel from \"../data/models/user\"\nimport * as requestModel from '../data/models/requests'\nimport * as narrativeModel from '../data/models/narrative'\nimport { AnError } from \"../combo/error/api\";\n\n/* Types from the organization service (approximately) */\n\n/*\n    Organization\n*/\n\n\nexport enum ComponentView {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport enum UIErrorType {\n    NONE = 0,\n    INFO,\n    WARNING,\n    ERROR\n}\n\nexport interface UIError {\n    type: UIErrorType\n    message?: string\n}\n\nexport enum SyncState {\n    NONE = 0,\n    NEW,\n    DIRTY,\n    CLEAN\n}\n\nexport enum EditState {\n    NONE = 'NONE',\n    UNEDITED = 'UNEDITED',\n    EDITED = 'EDITED'\n}\n\n\n// export enum ValidationState {\n//     NONE = 0,\n//     VALID,\n//     INVALID,\n//     // DIRTY = 'DIRTY',\n//     MISSING\n// }\n\nexport enum ValidationErrorType {\n    OK = 0,\n    ERROR,\n    REQUIRED_MISSING\n}\n\nexport interface ValidationStateBase {\n    type: ValidationErrorType\n    validatedAt: Date\n}\n\nexport interface ValidationStateOk extends ValidationStateBase {\n    type: ValidationErrorType.OK\n}\n\nexport interface ValidationStateError extends ValidationStateBase {\n    type: ValidationErrorType.ERROR\n    message: string\n}\n\nexport interface ValidationStateRequiredMissing extends ValidationStateBase {\n    type: ValidationErrorType.REQUIRED_MISSING\n    message: string\n}\n\n// export interface ValidationStateAsyncError extends ValidationStateBase {\n//     type: ValidationErrorType.ASYNC_ERROR\n//     message: string\n//     \n// }\n\nexport type ValidationState = ValidationStateOk | ValidationStateError | ValidationStateRequiredMissing\n\nexport interface Editable {\n    value: any\n    remoteValue: any\n    syncState: SyncState\n    // editState: EditState\n    // validationState: ValidationState\n    validationState: ValidationState\n    // validatedAt: Date | null\n    // error: UIError\n}\nexport interface EditableString extends Editable {\n    value: string,\n    remoteValue: string | null\n}\n\nexport interface EditableNullableString extends Editable {\n    value: string | null\n    remoteValue: string | null\n}\n\nexport interface EditableBoolean extends Editable {\n    value: boolean\n    remoteValue: boolean | null\n}\n\nexport interface EditableOrganization {\n    id: EditableString\n    name: EditableString\n    description: EditableString\n    isPrivate: EditableBoolean\n    logoUrl: EditableNullableString\n    homeUrl: EditableNullableString\n    researchInterests: EditableString\n}\n\n\n// TODO: or CLEAN to replace new and saved\nexport enum SaveState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    READY = 'READY',\n    SAVING = 'SAVING',\n    SAVED = 'SAVED',\n    SAVE_ERROR = 'SAVE_ERROR'\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    user: User,\n    type: MemberType\n}\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport type Username = string\n\nexport interface App {\n    id: string,\n    module: string,\n    func: string,\n    version: string,\n    title: string,\n    category: string\n}\n\nexport interface AppResource {\n    id: string\n}\n\nexport interface EditedOrganization {\n    id: {\n        value: string,\n        error?: UIError\n    }\n    name: {\n        value: string,\n        error?: UIError\n    }\n    description: {\n        value: string,\n        error?: UIError\n    }\n}\n\n/*\n    Collection of organizations\n*/\n\n/* REDUX */\n\nexport enum AuthState {\n    NONE = 0,\n    CHECKING,\n    AUTHORIZED,\n    UNAUTHORIZED,\n    ERROR\n}\n\nexport interface UserAuthorization {\n    token: string,\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\n\nexport interface Authorization {\n    status: AuthState,\n    message: string,\n    authorization: UserAuthorization\n}\n\nexport enum ViewOrgState {\n    NONE = 0,\n    INITIAL,\n    FETCHING,\n    READY,\n    ERROR\n}\n\nexport enum AppState {\n    NONE = 0,\n    LOADING,\n    READY,\n    ERROR\n}\n\nexport enum SortDirection {\n    ASCENDING = 'asc',\n    DESCENDING = 'desc'\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface ManageOrganizationRequestsViewModel {\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface ManageOrganizationRequestsView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageOrganizationRequestsViewModel | null\n}\n\nexport interface ViewMembersViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface ViewMembersView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: ViewMembersViewModel | null\n}\n\nexport enum BrowseOrgsState {\n    NONE = 0,\n    SEARCHING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface BrowseOrgsViewModel {\n    rawOrganizations: Array<orgModel.BriefOrganization>\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    sortField: string\n    sortDirection: SortDirection\n    filter: orgModel.Filter\n    searchTerms: Array<string>\n    selectedOrganizationId: string | null,\n    // TODO: let's make a new interface for running operations...\n    searching: boolean\n    error: AppError | null\n}\n\nexport interface BrowseOrgsView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: BrowseOrgsViewModel | null\n}\n\nexport enum InviteUserViewState {\n    NONE = 0,\n    EDITING,\n    SENDABLE,\n    SENDING,\n    SUCCESS,\n    ERROR\n}\n\n// user info we get out of user profile search\n\n\n// a user who may or may not be in an org, with org relation info\n// todo: fetch more profile info.\nexport interface OrganizationUser {\n    username: string\n    realname: string\n    relation: orgModel.UserRelationToOrganization\n}\n\n// View Model / Invite User (for admins)\n\nexport interface InviteUserViewModel {\n    organization: orgModel.Organization\n    users: Array<OrganizationUser> | null\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState\n}\n\n\n\nexport interface ManageMembershipViewModel {\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\nexport interface ManageMembershipView {\n    loadingState: ComponentLoadingState\n    error: AnError | null\n    viewModel: ManageMembershipViewModel | null\n}\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport interface Narrative {\n    workspaceId: number\n    objectId: number\n    title: string\n    status: NarrativeState\n    owner: Username\n    modifiedAt: Date\n}\n\nexport enum ProcessingState {\n    NONE = 0,\n    PROCESSING,\n    SUCCESS,\n    ERROR\n}\n\n\nexport enum RequestNarrativeState {\n    NONE = 0,\n    LOADING,\n    ERROR,\n    LOADED,\n    SELECTING,\n    SELECTED,\n    SENDING,\n    SENT\n}\n\nexport enum SelectionState {\n    NONE = 0,\n    SELECTING,\n    SELECTED\n}\n\n// ViewModel / RequestAddNarrative\n\nexport interface RequestNarrativeViewModel {\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    relation: orgModel.Relation\n    error: AnError | null\n    selectionState: SelectionState\n    saveState: SaveState\n}\n\n// Add Org\n\nexport interface AddOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    error: AppError | null\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n}\n\nexport interface AddOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: AddOrgViewModel | null\n}\n\n// Entities\n\nexport interface UserEntity {\n    userId: string\n    profile: userProfile.UserProfile\n}\n\nexport interface OrganizationEntity {\n    groupId: string\n    group: groups.Group\n}\n\nexport interface RequestEntity {\n    requestId: string\n    request: groups.Request\n}\n\nexport enum ViewOrgViewModelKind {\n    NORMAL = 0,\n    PRIVATE_INACCESSIBLE\n}\n\n// TODO: just for view org view, should be namespaced or something.\nexport enum SubViews {\n    NORMAL = 0,\n    MANAGE_RELATED_ORGS,\n    INVITE_USER,\n    MANAGE_MEMBERSHIP,\n    EDIT_ORGANIZATION,\n    ADD_NARRATIVE\n}\n\nexport interface ViewOrgViewModel {\n    kind: ViewOrgViewModelKind.NORMAL,\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string\n    searchMembersBy: string\n    members: Array<orgModel.Member>\n\n    subViews: {\n        manageRelatedOrganizationsView: View<ManageRelatedOrgsViewModel>\n        inviteUserView: View<InviteUserViewModel>\n        requestNarrativeView: View<RequestNarrativeViewModel>\n    }\n}\n\nexport interface ViewInaccessiblePrivateOrgViewModel {\n    kind: ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface ViewOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ViewOrgViewModel | ViewInaccessiblePrivateOrgViewModel | null\n}\n\nexport enum ViewOrgSubViewKind {\n    NONE = 0,\n    MANAGE_RELATED_ORGS\n}\n\nexport interface NoneViewModel {\n    kind: ViewOrgSubViewKind.NONE\n}\n\nexport enum ViewState {\n    NONE = 0,\n    LOADING,\n    OK,\n    ERROR\n}\nexport interface View<T> {\n    state: ViewState\n    error: AnError | null\n    viewModel: T | null\n}\n\nexport interface SelectableRelatableOrganization {\n    organization: orgModel.BriefOrganization\n    isRelated: boolean\n    isSelected: boolean\n}\n\nexport interface ManageRelatedOrgsViewModel {\n    kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS\n    organization: orgModel.Organization\n    availableOrganizations: {\n        organizations: Array<SelectableRelatableOrganization>\n        queried: Array<SelectableRelatableOrganization>\n        searchBy: string\n    }\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\nexport type ViewOrgSubView = View<NoneViewModel> | View<ManageRelatedOrgsViewModel>\n\n\nexport interface EditOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    saveError: AppError | null\n}\n\nexport interface EditOrgView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: EditOrgViewModel | null\n}\n\nexport interface StoreState {\n    // new!!\n    entities: {\n        users: {\n            byId: Map<userModel.Username, userModel.User>\n            all: Array<string>\n        }\n        orgs: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n            all: Array<string>\n        }\n        requests: {\n            byId: Map<requestModel.RequestID, requestModel.Request>\n            all: Array<string>\n        }\n        narratives: {\n            byId: Map<narrativeModel.WorkspaceID, narrativeModel.Narrative>\n        }\n        organizations: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n        }\n    }\n\n    db: {\n    }\n\n    auth: Authorization\n    error: AppError | null\n\n    app: {\n        status: AppState\n        config: AppConfig\n        error?: AppError,\n    }\n\n    views: {\n        browseOrgsView: BrowseOrgsView\n        addOrgView: AddOrgView\n        viewOrgView: ViewOrgView\n        editOrgView: EditOrgView\n        manageOrganizationRequestsView: ManageOrganizationRequestsView\n        viewMembersView: ViewMembersView\n        // inviteUserView: InviteUserView\n        manageMembershipView: ManageMembershipView\n        // requestNarrativeView: RequestNarrativeView\n        // organizationCentricView: OrganizationCentricView\n    }\n    updateOrg: {\n        pending: boolean\n    }\n}\n\nexport enum ErrorCode {\n    NONE = 0,\n    ERROR\n}\n\n/* COMPONENT PROPS */\n\nexport interface SomeError {\n    code: ErrorCode\n    message: string\n    detail: string\n    id: string\n    at: Date\n\n    errorHistory?: Array<AppError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport interface AppError {\n    code: string\n    message: string\n    generatedAt?: Date\n    trace?: Array<string>\n    errors?: Array<AppError>\n    exception?: AppException\n}\n\nexport class AppException extends Error {\n    code: string\n    message: string\n    detail?: string\n    trace?: Array<string>\n    errors?: Array<AppException>\n    info?: Map<string, any>\n    constructor({ code, message, detail, info }: { code: string, message: string, detail?: string, info?: Map<string, any> }) {\n        super(message)\n        this.name = 'AppException'\n        this.code = code\n        this.message = message\n        this.detail = detail\n        this.info = info\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppException)\n        }\n\n        if (this.stack) {\n            if (this.stack.indexOf('\\n') >= 0) {\n                this.trace = this.stack.split('\\n')\n            } else {\n                this.trace = [this.stack]\n            }\n        }\n    }\n}\n\nexport interface AppConfig {\n    baseUrl: string\n    services: {\n        Groups: {\n            url: string\n        }\n        UserProfile: {\n            url: string\n        }\n        Workspace: {\n            url: string\n        }\n        ServiceWizard: {\n            url: string\n        }\n        Auth: {\n            url: string\n        }\n    }\n    defaultPath: string,\n    channelId: string | null\n}\n\nexport interface AuthProps {\n    authorization: Authorization,\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n    hosted: boolean,\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nexport interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        authServiceURL: string\n        originalPath: string | null,\n        view: string | null,\n        viewParams: any\n    },\n    parentHost: string\n}","export enum ActionFlag {\n    APP = 1,\n    APP_START,\n    APP_SUCCESS,\n    // APP_SUCCESS_IFRAME,\n    // APP_SUCCESS_SOLO,\n    APP_ERROR,\n\n    BROWSE_ORGS_LOAD,\n    BROWSE_ORGS_LOAD_START,\n    BROWSE_ORGS_LOAD_SUCCESS,\n    BROWSE_ORGS_LOAD_ERROR,\n    BROWSE_ORGS_UNLOAD,\n\n    BROWSE_ORGS_SORT,\n    BROWSE_ORGS_SORT_START,\n    BROWSE_ORGS_SORT_SUCCESS,\n    BROWSE_ORGS_SORT_ERROR,\n\n    BROWSE_ORGS_FILTER,\n    BROWSE_ORGS_FILTER_START,\n    BROWSE_ORGS_FILTER_SUCCESS,\n    BROWSE_ORGS_FILTER_ERROR,\n\n    BROWSE_ORGS_SEARCH,\n    BROWSE_ORGS_SEARCH_START,\n    BROWSE_ORGS_SEARCH_SUCCESS,\n    BROWSE_ORGS_SEARCH_ERROR,\n\n    UPDATE_ORG,\n    UPDATE_ORG_START,\n    UPDATE_ORG_SUCCESS,\n    UPDATE_ORG_ERROR,\n\n    // viewing org\n    VIEW_ORG_LOAD,\n    VIEW_ORG_LOAD_START,\n    VIEW_ORG_LOAD_SUCCESS,\n    VIEW_ORG_LOAD_ERROR,\n    VIEW_ORG_UNLOAD,\n    VIEW_ORG_RELOAD,\n    VIEW_ORG_ADD_NARRATIVE,\n\n    VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n    VIEW_ORG_LOAD_NORMAL_SUCCESS,\n    VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n\n    // Requests\n\n    VIEW_ORG_JOIN_REQUEST,\n    VIEW_ORG_JOIN_REQUEST_START,\n    VIEW_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_CANCEL_JOIN_REQUEST,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_START,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_ACCEPT_JOIN_INVITATION,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_START,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_ACCEPT_INBOX_REQUEST,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_START,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_INBOX_REQUEST,\n    VIEW_ORG_REJECT_INBOX_REQUEST_START,\n    VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_JOIN_INVITATION,\n    VIEW_ORG_REJECT_JOIN_INVITATION_START,\n    VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_REMOVE_NARRATIVE,\n    VIEW_ORG_REMOVE_NARRATIVE_START,\n    VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n\n    VIEW_ORG_ACCESS_NARRATIVE,\n    VIEW_ORG_ACCESS_NARRATIVE_START,\n    VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n\n    VIEW_ORG_SORT_NARRATIVES,\n    VIEW_ORG_SORT_NARRATIVES_START,\n    VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n    VIEW_ORG_SORT_NARRATIVES_ERROR,\n\n    VIEW_ORG_SEARCH_NARRATIVES,\n    VIEW_ORG_SEARCH_NARRATIVES_START,\n    VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n    VIEW_ORG_SEARCH_NARRATIVES_ERROR,\n\n    VIEW_ORG_SORT_MEMBERS,\n    VIEW_ORG_SORT_MEMBERS_START,\n    VIEW_ORG_SORT_MEMBERS_SUCCESS,\n    VIEW_ORG_SORT_MEMBERS_ERROR,\n\n    VIEW_ORG_SEARCH_MEMBERS,\n    VIEW_ORG_SEARCH_MEMBERS_START,\n    VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n    VIEW_ORG_SEARCH_MEMBERS_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD,\n\n    // keep these ones simple...\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n\n    // PRIVATE ORG\n\n    VIEW_PRIVATE_ORG_JOIN_REQUEST,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_START,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_ERROR,\n\n    // MEMBERS\n\n    VIEW_ORG_VIEW_MEMBERS_LOAD,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_START,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_ORG_VIEW_MEMBERS_UNLOAD,\n\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // add org fields\n\n    ADD_ORG_LOAD,\n    ADD_ORG_LOAD_START,\n    ADD_ORG_LOAD_SUCCESS,\n    ADD_ORG_LOAD_ERROR,\n    ADD_ORG_UNLOAD,\n\n    ADD_ORG_UPDATE_NAME,\n    ADD_ORG_UPDATE_NAME_SUCCESS,\n    ADD_ORG_UPDATE_NAME_ERROR,\n\n    ADD_ORG_UPDATE_LOGO_URL,\n    ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n    ADD_ORG_UPDATE_LOGO_URL_ERROR,\n\n    ADD_ORG_UPDATE_ID,\n    ADD_ORG_UPDATE_ID_SUCCESS,\n    ADD_ORG_UPDATE_ID_ERROR,\n    ADD_ORG_UPDATE_ID_PASS,\n    ADD_ORG_EVALUATE_ID,\n\n    ADD_ORG_UPDATE_DESCRIPTION,\n    ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    ADD_ORG_UPDATE_IS_PRIVATE,\n    ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    ADD_ORG_UPDATE_HOME_URL,\n    ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n    ADD_ORG_UPDATE_HOME_URL_ERROR,\n\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    ADD_ORG_EVALUATE,\n    ADD_ORG_EVALUATE_OK,\n    ADD_ORG_EVALUATE_ERRORS,\n\n    ADD_ORG_SAVE,\n    ADD_ORG_SAVE_START,\n    ADD_ORG_SAVE_SUCCESS,\n    ADD_ORG_SAVE_ERROR,\n\n\n    // editing org\n    EDIT_ORG_LOAD,\n    EDIT_ORG_LOAD_START,\n    EDIT_ORG_LOAD_SUCCESS,\n    EDIT_ORG_LOAD_ERROR,\n    EDIT_ORG_UNLOAD,\n\n    EDIT_ORG_SAVE,\n    EDIT_ORG_SAVE_START,\n    EDIT_ORG_SAVE_SUCCESS,\n    EDIT_ORG_SAVE_ERROR,\n\n    // edit org, field level updates\n    EDIT_ORG_UPDATE_NAME,\n    EDIT_ORG_UPDATE_NAME_SUCCESS,\n    EDIT_ORG_UPDATE_NAME_ERROR,\n\n    EDIT_ORG_UPDATE_LOGO_URL,\n    EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n\n    EDIT_ORG_UPDATE_DESCRIPTION,\n    EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    EDIT_ORG_UPDATE_IS_PRIVATE,\n    EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    EDIT_ORG_UPDATE_HOME_URL,\n    EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n    EDIT_ORG_UPDATE_HOME_URL_ERROR,\n\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    EDIT_ORG_EVALUATE,\n    EDIT_ORG_EVALUATE_OK,\n    EDIT_ORG_EVALUATE_ERRORS,\n\n    // Auth\n    AUTH_CHECK,\n    AUTH_CHECK_START,\n    AUTH_CHECK_ERROR,\n    AUTH_AUTHORIZED,\n    AUTH_UNAUTHORIZED,\n    AUTH_REMOVE_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_LOAD,\n    ADMIN_MANAGE_REQUESTS_LOAD_START,\n    ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    ADMIN_MANAGE_REQUESTS_UNLOAD,\n\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n\n    // MEMBERS\n    VIEW_MEMBERS_LOAD,\n    VIEW_MEMBERS_LOAD_START,\n    VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_MEMBERS_UNLOAD,\n\n    VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // INVITE USER\n    INVITE_USER_LOAD,\n    INVITE_USER_LOAD_START,\n    INVITE_USER_LOAD_SUCCESS,\n    INVITE_USER_LOAD_ERROR,\n    INVITE_USER_UNLOAD,\n\n    INVITE_USER_SEARCH_USERS,\n    INVITE_USER_SEARCH_USERS_START,\n    INVITE_USER_SEARCH_USERS_SUCCESS,\n    INVITE_USER_SEARCH_USERS_ERROR,\n\n    INVITE_USER_SELECT_USER,\n    INVITE_USER_SELECT_USER_START,\n    INVITE_USER_SELECT_USER_SUCCESS,\n    INVITE_USER_SELECT_USER_ERROR,\n\n    INVITE_USER_SEND_INVITATION,\n    INVITE_USER_SEND_INVITATION_START,\n    INVITE_USER_SEND_INVITATION_SUCCESS,\n    INVITE_USER_SEND_INVITATION_ERROR,\n\n    // Manage Membership\n    MANAGE_MEMBERSHIP_LOAD,\n    MANAGE_MEMBERSHIP_LOAD_START,\n    MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    MANAGE_MEMBERSHIP_LOAD_ERROR,\n    MANAGE_MEMBERSHIP_UNLOAD,\n\n    MANAGE_MEMBERSHIP_LEAVE_ORG,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_CONFIRMED,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_START,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n\n    MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_START,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n\n    MANAGE_MEMBERSHIP_SAVE,\n    MANAGE_MEMBERSHIP_SAVE_START,\n    MANAGE_MEMBERSHIP_SAVE_SUCCESS,\n    MANAGE_MEMBERSHIP_SAVE_ERROR,\n\n    MANAGE_MEMBERSHIP_EVALUATE,\n    MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n    MANAGE_MEMBERSHIP_EVALUATE_ERROR,\n\n    // Narrative add requests\n    REQUEST_ADD_NARRATIVE_LOAD,\n    REQUEST_ADD_NARRATIVE_LOAD_START,\n    REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n    REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n    REQUEST_ADD_NARRATIVE_UNLOAD,\n\n    REQUEST_ADD_NARRATIVE_SEND,\n    REQUEST_ADD_NARRATIVE_SEND_START,\n    REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SEND_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SORT,\n    REQUEST_ADD_NARRATIVE_SORT_START,\n    REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SORT_ERROR,\n\n    // VIEWS\n\n    ORGANIZATION_CENTRIC_VIEW_LOAD,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_START,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    ORGANIZATION_CENTRIC_VIEW_UNLOAD,\n\n    // ENTITIES\n\n    ENTITY_USER_LOADER,\n    ENTITY_USER_LOADER_START,\n    ENTITY_USER_LOADER_SUCCESS,\n    ENTITY_USER_LOADER_ERROR,\n\n    ENTITY_ORGANIZATION_LOADER,\n    ENTITY_ORGANIZATION_LOADER_START,\n    ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    ENTITY_ORGANIZATION_LOADER_ERROR,\n\n    ENTITY_NARRATIVE_LOAD,\n    ENTITY_NARRATIVE_LOAD_START,\n    ENTITY_NARRATIVE_LOAD_SUCCESS,\n    ENTITY_NARRATIVE_LOAD_ERROR,\n\n    ENTITY_ORGANIZATION_LOAD,\n    ENTITY_ORGANIZATION_LOAD_START,\n    ENTITY_ORGANIZATION_LOAD_SUCCESS,\n    ENTITY_ORGANIZATION_LOAD_ERROR,\n\n    // GLOBAL ACTIONS\n    // GLOBAL_ACCESS_NARRATIVE,\n    // GLOBAL_ACCESS_NARRATIVE_START,\n    // GLOBAL_ACCESS_NARRATIVE_SUCCESS,\n    // GLOBAL_ACCESS_NARRATIVE_ERROR,\n\n    // USER PROFILE\n    DATA_SERVICE_LOAD,\n    DATA_SERVICE_LOAD_START,\n    DATA_SERVICE_LOAD_SUCCESS,\n    DATA_SERVICE_LOAD_ERROR,\n    DATA_SERVICE_UNLOAD,\n\n    DATA_SERVICE_LOAD_REFRESH,\n    DATA_SERVICE_LOAD_REFRESH_START,\n    DATA_SERVICE_LOAD_REFRESH_SUCCESS,\n    DATA_SERVICE_LOAD_REFRESH_ERROR\n}\n","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, UIErrorType, ValidationState, ComponentLoadingState, SyncState, ValidationErrorType } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, Unload,\n    SaveError, SaveStart, SaveSuccess, AddOrgEvaluateOK, AddOrgEvaluateErrors,\n    LoadSuccess, UpdateNameSuccess, UpdateNameError,\n    UpdateIdSuccess, UpdateIdError, UpdateDescriptionSuccess,\n    UpdateDescriptionError,\n    LoadError,\n    UpdateIdPass,\n    UpdateIsPrivateSuccess,\n    UpdateLogoUrlSuccess,\n    UpdateLogoUrlError,\n    UpdateHomeUrlSuccess,\n    UpdateHomeUrlError,\n    UpdateResearchInterestsSuccess,\n    UpdateResearchInterestsError\n} from '../actions/addOrg'\nimport Validation from '../../data/models/organization/validation';\n\n// ADD ORG\n\nexport function saveStart(state: StoreState, action: SaveStart): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveStart without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: SaveSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function saveError(state: StoreState, action: SaveError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateOk(state: StoreState, action: AddOrgEvaluateOK): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateErrors(state: StoreState, action: AddOrgEvaluateErrors): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'TODO: form error',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    },\n                    saveState: SaveState.NEW,\n                    error: null,\n                    newOrganization: action.newOrganization\n                }\n            }\n        }\n    }\n}\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// Name\nexport function updateNameSuccess(state: StoreState, action: UpdateNameSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            },\n                            // editState: EditState.EDITED,\n                            // validatedAt: new Date(),\n                            // error: {\n                            //     type: UIErrorType.NONE\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateNameError(state: StoreState, action: UpdateNameError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                            // editState: EditState.EDITED,\n                            // validatedAt: new Date(),\n                            // error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo URL\nexport function updateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL error without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Home URL\nexport function updateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Home URL (success) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to home url without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Research Interests\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Research Interests without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to research interests (error) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\nexport function updateIdSuccess(state: StoreState, action: UpdateIdSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            // value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdError(state: StoreState, action: UpdateIdError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdPass(state: StoreState, action: UpdateIdPass): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY\n                            // validationState: {\n                            //     type: ValidationErrorType.OK,\n                            //     validatedAt: new Date()\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: UpdateDescriptionSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionError(state: StoreState, action: UpdateDescriptionError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        isPrivate: {\n                            ...state.views.addOrgView.viewModel.newOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.ADD_ORG_SAVE:\n            return saveStart(state, action as SaveStart)\n        case ActionFlag.ADD_ORG_SAVE_SUCCESS:\n            return saveSuccess(state, action as SaveSuccess)\n        case ActionFlag.ADD_ORG_SAVE_ERROR:\n            return saveError(state, action as SaveError)\n\n        case ActionFlag.ADD_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.ADD_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.ADD_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.ADD_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS:\n            return updateNameSuccess(state, action as UpdateNameSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_NAME_ERROR:\n            return updateNameError(state, action as UpdateNameError)\n\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return updateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR:\n            return updateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS:\n            return updateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR:\n            return updateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS:\n            return updateIdSuccess(state, action as UpdateIdSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_ID_ERROR:\n            return updateIdError(state, action as UpdateIdError)\n        case ActionFlag.ADD_ORG_UPDATE_ID_PASS:\n            return updateIdPass(state, action as UpdateIdPass)\n\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as UpdateDescriptionSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR:\n            return updateDescriptionError(state, action as UpdateDescriptionError)\n\n        case ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        case ActionFlag.ADD_ORG_EVALUATE_OK:\n            return addOrgEvaluateOk(state, action as AddOrgEvaluateOK)\n        case ActionFlag.ADD_ORG_EVALUATE_ERRORS:\n            return addOrgEvaluateErrors(state, action as AddOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, ComponentLoadingState, ValidationErrorType, SyncState, ValidationState, ValidationStateOk, EditOrgViewModel } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, LoadSuccess, LoadError,\n    EditOrgEvaluateOK, EditOrgEvaluateErrors,\n    EditOrgSave, EditOrgSaveStart, EditOrgSaveError, EditOrgSaveSuccess,\n    EditOrgUpdateNameSuccess, EditOrgUpdateNameError,\n    // EditOrgUpdateIdSuccess, EditOrgUpdateIdError,\n    EditOrgUpdateDescriptionSuccess, EditOrgUpdateDescriptionError,\n    UpdateIsPrivateSuccess, EditOrgUpdateLogoUrlSuccess, EditOrgUpdateLogoUrlError, UpdateHomeUrlSuccess, UpdateHomeUrlError, UpdateResearchInterestsError, UpdateResearchInterestsSuccess, Unload\n} from '../actions/editOrg'\nimport { StateInstances } from '../state';\n\n\n\n// EDIT ORG\n\n// Edit session loading\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: validationStateOk(),\n                    // validationState: {\n                    //     type: ValidationErrorType.OK,\n                    //     validatedAt: new Date()\n                    // },\n                    saveState: SaveState.NEW,\n                    // TODO: get rid of this...\n                    // organizationId: action.id,\n                    organization: action.organization,\n                    saveError: null,\n                    editedOrganization: action.editedOrganization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// save\n\nexport function editOrgSaveStart(state: StoreState, action: EditOrgSaveStart): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveSuccess(state: StoreState, action: EditOrgSaveSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editedOrganization: {\n                        id: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.id,\n                            syncState: SyncState.CLEAN\n                        },\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            syncState: SyncState.CLEAN\n                        },\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            syncState: SyncState.CLEAN\n                        },\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            syncState: SyncState.CLEAN\n                        },\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveError(state: StoreState, action: EditOrgSaveError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    saveError: action.error\n                }\n            }\n        }\n    }\n}\n\n// Evaluate edit session\n\nexport function editOrgEvaluateOk(state: StoreState, action: EditOrgEvaluateOK): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgEvaluateErrors(state: StoreState, action: EditOrgEvaluateErrors): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation errors',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateEditorState(viewModel: EditOrgViewModel): EditState {\n    if (viewModel.editedOrganization.name.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.id.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.logoUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.homeUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.researchInterests.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.isPrivate.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.description.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\n\n\n// Name\nexport function editOrgUpdateNameSuccess(state: StoreState, action: EditOrgUpdateNameSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.name !== editedOrg.name.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    // editState: editState,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateNameError(state: StoreState, action: EditOrgUpdateNameError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo url\nexport function editOrgUpdateLogoUrlSuccess(state: StoreState, action: EditOrgUpdateLogoUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(state: StoreState, action: EditOrgUpdateLogoUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Home Url\n\n// Logo url\nexport function editOrgUpdateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Research Interests\n\n// Logo url\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: EditOrgUpdateDescriptionSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.description !== editedOrg.description.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateDescriptionError(state: StoreState, action: EditOrgUpdateDescriptionError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.isPrivate !== editedOrg.isPrivate.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.EDIT_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.EDIT_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.EDIT_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n\n        case ActionFlag.EDIT_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.EDIT_ORG_SAVE_START:\n            return editOrgSaveStart(state, action as EditOrgSaveStart)\n        case ActionFlag.EDIT_ORG_SAVE_SUCCESS:\n            return editOrgSaveSuccess(state, action as EditOrgSaveSuccess)\n        case ActionFlag.EDIT_ORG_SAVE_ERROR:\n            return editOrgSaveError(state, action as EditOrgSaveError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS:\n            return editOrgUpdateNameSuccess(state, action as EditOrgUpdateNameSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR:\n            return editOrgUpdateNameError(state, action as EditOrgUpdateNameError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return editOrgUpdateLogoUrlSuccess(state, action as EditOrgUpdateLogoUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR:\n            return editOrgUpdateLogoUrlError(state, action as EditOrgUpdateLogoUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS:\n            return editOrgUpdateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR:\n            return editOrgUpdateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS:\n        //     return editOrgUpdateIdSuccess(state, action as EditOrgUpdateIdSuccess)\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_ERROR:\n        //     return editOrgUpdateIdError(state, action as EditOrgUpdateIdError)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as EditOrgUpdateDescriptionSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR:\n            return editOrgUpdateDescriptionError(state, action as EditOrgUpdateDescriptionError)\n        case ActionFlag.EDIT_ORG_EVALUATE_OK:\n            return editOrgEvaluateOk(state, action as EditOrgEvaluateOK)\n        case ActionFlag.EDIT_ORG_EVALUATE_ERRORS:\n            return editOrgEvaluateErrors(state, action as EditOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/acceptInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function acceptInboxRequestSuccess(state: StoreState, action: actions.AcceptRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS:\n            return acceptInboxRequestSuccess(state, action as actions.AcceptRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/viewMembers'\nimport { StoreState, MemberType, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n// export function loadStart(state: StoreState, action: actions.LoadStart) {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.LOADING,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function unload(state: StoreState, action: actions.Unload): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.NONE,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.SUCCESS,\n//                 viewModel: {\n//                     organization: action.organization,\n//                     relation: action.relation\n//                 },\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadError(state: StoreState, action: actions.LoadError): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.ERROR,\n//                 viewModel: null,\n//                 error: action.error\n//             }\n//         }\n//     }\n// }\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function removeMemberSuccess(state: StoreState, action: actions.RemoveMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    const sortedMembers = viewModel.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function sortMembersSuccess(state: StoreState, action: actions.SortMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortMembersBy: action.sortBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nexport function searchMembersSuccess(state: StoreState, action: actions.SearchMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchMembersBy: action.searchBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        // case ActionFlag.VIEW_MEMBERS_LOAD_START:\n        //     return loadStart(state, action as actions.LoadStart)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n        //     return loadSuccess(state, action as actions.LoadSuccess)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n        //     return loadError(state, action as actions.LoadError)\n        // case ActionFlag.VIEW_MEMBERS_UNLOAD:\n        //     return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS:\n            return removeMemberSuccess(state, action as actions.RemoveMemberSuccess)\n        case ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS:\n            return sortMembersSuccess(state, action as actions.SortMembersSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS:\n            return searchMembersSuccess(state, action as actions.SearchMembersSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/denyInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function rejectInboxRequestSuccess(state: StoreState, action: actions.RejectInboxRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS:\n            return rejectInboxRequestSuccess(state, action as actions.RejectInboxRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/cancelOutboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function cancelRequestSuccess(state: StoreState, action: actions.CancelJoinRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestOutbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS:\n            return cancelRequestSuccess(state, action as actions.CancelJoinRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { AppException } from \"../../types\";\n\nexport const MAX_GROUPS_PER_LIST_REQUEST = 100\n\nexport interface GroupsServiceInfo {\n    servname: string;\n    version: string;\n    servertime: number;\n    gitcommithash: string\n}\n\nexport type Username = string\nexport type GroupID = string\n\nexport interface Member {\n    name: Username,\n    joined: number,\n    lastvisit: number | null,\n    custom: {\n        title: string\n    }\n}\n\nexport interface Resource {\n    rid: string\n    added: number | null\n}\n\nexport interface WorkspaceInfo extends Resource {\n    name: string\n    narrname: string\n    narrcreate: number\n    public: boolean\n    perm: string\n    description: string\n    moddate: number\n}\n\nexport interface AppInfo extends Resource {\n}\n\nexport type Role = \"None\" | \"Member\" | \"Admin\" | \"Owner\"\n\nexport interface GroupCustomFields {\n    logourl?: string\n    description: string\n    researchinterests: string\n    homeurl?: string\n    relatedgroups?: string\n}\n\nexport interface BriefGroup {\n    id: GroupID\n    name: string\n    createdate: number\n    moddate: number\n    lastvisit: number | null\n    private: boolean\n    role: Role\n\n    custom: GroupCustomFields\n    // owner: Member\n    owner: Username\n\n    memcount: number\n    rescount: {\n        workspace: number\n    }\n}\n\nexport interface InaccessiblePrivateGroup {\n    id: GroupID\n    private: boolean\n    role: Role\n}\n\nexport interface Group {\n    id: GroupID\n    private: boolean\n    privatemembers: boolean\n    name: string\n    role: Role\n    owner: Member\n    admins: Array<Member>\n    members: Array<Member>\n    memcount: number\n    createdate: number\n    moddate: number\n    lastvisit: number\n    resources: {\n        workspace: Array<WorkspaceInfo>,\n        catalogmethod: Array<AppInfo>\n    }\n    rescount: {\n        workspace: number\n        catalogmethod: number\n    }\n    custom: GroupCustomFields\n}\n\nexport interface NewGroup {\n    id: string\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    isPrivate: boolean\n}\n\nexport interface GroupUpdate {\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    private: boolean\n}\n\nexport interface Request {\n    id: string\n    groupid: string\n    requester: Username\n    type: string\n    status: string\n    resource: string\n    resourcetype: string\n    createdate: number\n    expiredate: number\n    moddate: number\n}\n\nexport interface RequestWithCompletion extends Request {\n    complete: false\n}\n\nexport interface Completion {\n    complete: true\n}\n\nexport interface ErrorInfo {\n    appcode: number\n    apperror: string\n    callid: string\n    httpcode: number\n    httpstatus: string\n    message: string\n    time: number\n}\n\nexport interface ErrorResult {\n    error: ErrorInfo\n}\n\n// Error types: (appcode)\n// 10000\tAuthentication failed\n// 10010\tNo authentication token\n// 10020\tInvalid token\n// 20000\tUnauthorized\n// 30000\tMissing input parameter\n// 30001\tIllegal input parameter\n// 30010\tIllegal user name\n// 40000\tGroup already exists\n// 40010\tRequest already exists\n// 40020\tUser already group member\n// 40030\tWorkspace already in group\n// 50000\tNo such group\n// 50010\tNo such request\n// 50020\tNo such user\n// 50030\tNo such workspace\n// 60000\tUnsupported operation\n\nexport interface GroupExists {\n    exists: boolean\n}\n\n// export interface GroupRequest {\n//     id: string,\n//     groupid: string,\n//     requester: Username,\n//     type: string,\n//     status: string,\n//     resource: string\n//     resourcetype: string\n//     createdate: number,\n//     expiredate: number,\n//     moddate: number\n// }\n\nexport enum SortDirection {\n    ASCENDING = 0,\n    DESCENDING\n}\n\nexport interface GetRequestsParams {\n    includeClosed?: boolean,\n    sortDirection?: SortDirection,\n    startAt?: Date\n}\n\nexport interface RequestMemebershipParams {\n    groupId: string\n}\n\nexport interface RequestNarrativeParams {\n    workspaceId: number\n    groupId: string\n}\n\nfunction promiseTry<T>(fun: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        try {\n            return resolve(fun())\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n}\n\nexport interface GroupError {\n    httpcode: number\n    httpstatus: string\n    appcode: number\n    apperror: string\n    message: string\n    callid: string\n    time: number\n}\n\nexport class Exception extends Error {\n\n}\n\nexport class GroupException extends AppException {\n    originalError: GroupError\n    constructor(error: GroupError) {\n        super({\n            code: 'group-exception',\n            message: error.apperror,\n            detail: error.message,\n            info: new Map<string, any>([\n                ['httpcode', error.httpcode],\n                ['httpstatus', error.httpstatus],\n                ['appcode', error.appcode],\n                ['apperror', error.apperror],\n                ['message', error.message],\n                ['callid', error.callid],\n                ['time', error.time]\n            ])\n        })\n        this.name = 'GroupException'\n        this.originalError = error\n    }\n}\n\nexport interface RequestStatus {\n    new: 'None' | 'New' | 'Old'\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport class GroupsClient {\n    token: string;\n    url: string;\n\n    constructor({ token, url }: { token: string, url: string }) {\n        this.token = token\n        this.url = url\n    }\n\n    getInfo(): Promise<GroupsServiceInfo> {\n        return fetch(this.url + '/', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((result) => {\n                return result as GroupsServiceInfo;\n            });\n    }\n\n    groupExists(id: string): Promise<GroupExists> {\n        return fetch(this.url + '/group/' + id + '/exists')\n            .then((response) => {\n                return response.json()\n            })\n            .then((exists) => {\n                return exists as GroupExists\n            })\n    }\n\n    // getGroups(): Promise<GroupList> {\n    //     return fetch(this.url + '/group', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json()\n    //         })\n    //         .then((result: GroupList) => {\n    //             return result.filter(({ type }) => type === 'Organization')\n    //         })\n    // }\n\n    async listGroups(): Promise<Array<BriefGroup>> {\n        const response = await fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n        if (response.status !== 200) {\n            console.error('error fetching groups', response)\n            throw new Error('Error fetching groups')\n        }\n        return await response.json()\n    }\n\n    getGroupById(id: string): Promise<Group | InaccessiblePrivateGroup> {\n        return fetch(this.url + '/group/' + id, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status === 404) {\n                    return null\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Group\n            })\n    }\n\n    put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new GroupException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status === 200) {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                } else if (response.status === 204) {\n                    const result = null as unknown\n                    return result as T\n                } else {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    createGroup(newGroup: NewGroup): Promise<Group> {\n        // argh!! description should be mandatory, but now it is a custom \n        // field and it is not yet defined in the service.\n        // TODO: we need the groups service to have default custom fields.\n        // At that point, what IS the point of custom fields ... oh, I know that\n        // there are internal reasons for this due to re-using \"group\" for \n        // organization, project, etc., but that should not leak through the \n        // api.\n\n        // mandatory fields.\n        const payload: any = {\n            name: newGroup.name,\n            private: newGroup.isPrivate,\n            custom: {\n                logourl: newGroup.logoUrl,\n                researchinterests: newGroup.researchInterests,\n                homeurl: newGroup.homeUrl\n            }\n        }\n\n        // optional fields\n        if (newGroup.description.length > 0) {\n            payload.custom.description = newGroup.description\n        }\n\n        return this.put<Group>(['group', newGroup.id], payload)\n    }\n\n    updateGroup(id: string, groupUpdate: GroupUpdate): Promise<void> {\n        const payload: any = {\n            name: groupUpdate.name,\n            custom: {\n                logourl: groupUpdate.logoUrl,\n                homeurl: groupUpdate.homeUrl,\n                researchinterests: groupUpdate.researchInterests\n            },\n            private: groupUpdate.private\n        }\n        // TODO: remove this when we have descriptions restored to the\n        // groups service.\n        if (groupUpdate.description) {\n            payload.custom.description = groupUpdate.description\n        }\n        return fetch(this.url + '/group/' + id + '/update', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n\n            // TODO: build more intelligently\n            body: JSON.stringify(payload)\n        })\n            .then((response) => {\n                // response is an empty body.\n                if (response.status === 204) {\n                    return\n                }\n                throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n            })\n    }\n\n    async addRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is not already there\n        if (relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: relatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async removeRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is already there\n        if (!relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        const newRelatedGroups = relatedGroups.filter((groupId) => {\n            return groupId !== relatedGroupId\n        })\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: newRelatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async getRequest(requestId: string): Promise<Request> {\n        const path = ['request', 'id', requestId]\n        return await this.get<Request>(path)\n    }\n\n    getGroupRequests(groupId: string, params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n\n        return fetch(this.url + '/group/' + groupId + '/requests?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getTargetedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/targeted?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getCreatedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/created?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'appcliation/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    addOrRequestNarrative(params: RequestNarrativeParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            'workspace',\n            String(params.workspaceId)\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    async grantResourceAccess(groupId: string, resourceType: string, resourceId: string): Promise<null> {\n        const path = [\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId,\n            'getperm'\n        ]\n        return this.post<null>(path, null)\n    }\n\n    deleteResource(groupId: string, resourceType: string, resourceId: string): Promise<void> {\n        const url = [\n            this.url,\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    cancelRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/cancel', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    acceptRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/accept', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    grantReadAccessToRequestedResource({ requestId }: { requestId: string }): Promise<null> {\n        const path = ['request', 'id', requestId, 'getperm']\n        return this.post<null>(path, null)\n    }\n\n\n    denyRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/deny', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    memberToAdmin({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    adminToMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    updateMember({ groupId, memberUsername, update }: { groupId: string, memberUsername: string, update: any }): Promise<void> {\n        const path = [\n            'group', groupId, 'user', memberUsername, 'update'\n        ]\n\n        return this.put<void>(path, { custom: update })\n    }\n\n    removeMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n            })\n    }\n\n    requestMembership(params: RequestMemebershipParams): Promise<Request> {\n        return fetch(this.url + '/group/' + params.groupId + '/requestmembership', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    inviteUserToGroup({ groupId, username }: { groupId: string, username: string }): Promise<Request> {\n        const url = [\n            this.url, 'group', groupId, 'user', username\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    async visitGroup({ groupId }: { groupId: string }): Promise<void> {\n        const path = ['group', groupId, 'visit']\n        return this.put<void>(path, null)\n    }\n\n    async getOpenRequests({ groupIds }: { groupIds: Array<string> }): Promise<Map<GroupID, RequestStatus>> {\n        const path = ['request', 'groups', groupIds.join(','), 'new']\n        const result = await this.get<any>(path)\n        const requestStatuses = new Map<GroupID, RequestStatus>()\n        for (const [groupId, requestStatus] of Object.entries(result)) {\n            requestStatuses.set(groupId, <RequestStatus>requestStatus)\n        }\n        return requestStatuses\n    }\n}","import * as groupsApi from '../apis/groups'\nimport * as orgModel from './organization/model'\n\nexport type Username = string\n\nexport type RequestID = string\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport interface BaseRequest {\n    id: string\n    organizationId: string\n    requester: Username\n    type: RequestType\n    status: RequestStatus\n    resourceType: RequestResourceType\n    createdAt: Date\n    expireAt: Date\n    modifiedAt: Date\n}\n\nexport interface UserRequest extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.REQUEST\n    user: Username\n}\n\nexport interface UserInvitation extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.INVITATION\n    user: Username\n}\n\nexport interface WorkspaceRequest extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.REQUEST\n    narrativeId: string,\n}\n\nexport interface WorkspaceInvitation extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.INVITATION\n    narrativeId: string\n}\n\nexport interface AppRequest extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.REQUEST\n    appId: string\n}\n\nexport interface AppInvitation extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.INVITATION\n    appId: string\n}\n\nexport type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\n\nfunction stringToRequestType(type: string): RequestType {\n    switch (type) {\n        case 'Invite':\n            return RequestType.INVITATION\n        case 'Request':\n            return RequestType.REQUEST\n        default:\n            throw new Error('unknown request type: ' + type)\n    }\n}\n\nfunction stringToResourceType(type: string) {\n    switch (type) {\n        case 'user':\n            return RequestResourceType.USER\n        case 'workspace':\n            return RequestResourceType.WORKSPACE\n        case 'catalogmethod':\n            return RequestResourceType.APP\n        default:\n            throw new Error('unknown resource type: ' + type)\n    }\n}\n\nfunction stringToRequestStatus(status: string): RequestStatus {\n    return RequestStatus.OPEN\n}\n\nexport function groupRequestToOrgRequest(request: groupsApi.Request): Request {\n\n    const requestType = stringToRequestType(request.type)\n    const resourceType = stringToResourceType(request.resourcetype)\n    const requestStatus = stringToRequestStatus(request.status)\n\n    switch (resourceType) {\n        case RequestResourceType.USER:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserInvitation\n            }\n\n        case RequestResourceType.WORKSPACE:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceInvitation\n            }\n\n        case RequestResourceType.APP:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppInvitation\n            }\n        default:\n            throw new Error('resource type not handled yet: ' + request.resourcetype)\n    }\n}\n\ninterface RequestsModelParams {\n    groupsServiceURL: string\n    token: string\n    username: Username\n}\n\nexport class RequestsModel {\n\n    params: RequestsModelParams\n    groupsClient: groupsApi.GroupsClient\n    cache: Map<RequestID, Request>\n\n    constructor(params: RequestsModelParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map()\n    }\n\n    async getRequest(requestId: RequestID): Promise<Request> {\n        if (this.cache.has(requestId)) {\n            return this.cache.get(requestId)!\n        }\n\n        const grequest = await this.groupsClient.getRequest(requestId)\n        const request = groupRequestToOrgRequest(grequest)\n\n        this.cache.set(request.id, request)\n        return request\n    }\n\n    async getOutboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserRequestForOrg(organizationId: orgModel.OrganizationID): Promise<UserRequest | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return r.groupid === organizationId\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserRequest\n    }\n\n    async getPendingRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    /*\n        For a given organization (by id), return a list of all requests to that org \n    */\n    async getCombinedRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        let requests: Array<Request>\n\n        // const grequests = await groupsClient.getTargetedRequests({\n        //     includeClosed: false,\n        //     sortDirection: groupsApi.SortDirection.DESCENDING\n        // })\n\n        // // TODO should work in synchrony with above...\n        // return grequests\n        //     .filter((r) => {\n        //         return r.groupid === organizationId\n        //     })\n        //     .map((r) => {\n        //         return groupRequestToOrgRequest(r)\n        //     })\n\n        try {\n            requests = (await groupsClient.getGroupRequests(organizationId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            }))\n                .map((request) => {\n                    return groupRequestToOrgRequest(request)\n                })\n        } catch (ex) {\n            requests = []\n        }\n\n        return requests\n    }\n\n    async getRequestOutboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n\n    async getOrganizationInvitations(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        }).filter((request) => {\n            return (request.type === RequestType.INVITATION)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getOrganizationInvitationsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const invitations = await this.getOrganizationInvitations()\n        return invitations.filter((invitation) => {\n            return (invitation.organizationId === organizationId)\n        })\n    }\n\n    async getInboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserInvitationForOrg(organizationId: orgModel.OrganizationID): Promise<UserInvitation | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return (r.groupid === organizationId)\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserInvitation\n    }\n\n    async getPendingOrganizationRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await groupsClient.getGroupRequests(organizationId, {\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        return groupRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        // const [groupRequests, adminRequests] = await Promise.all([\n        //     groupsClient.getGroupRequests(groupId, {\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     }),\n        //     groupsClient.getCreatedRequests({\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     })\n        // ])\n        // const groupAdminRequests = adminRequests.filter((request) => {\n        //     return (request.groupid === groupId)\n        // })\n\n        // return Promise.all(groupRequests.concat(groupAdminRequests).map((request) => {\n        //     return groupRequestToOrgRequest(request)\n        // }))\n    }\n\n    async getPendingOrganizationRequests(groupIds: Array<string>): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await Promise.all(groupIds.map((groupId) => {\n            return groupsClient.getGroupRequests(groupId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            })\n        }))\n\n        const allRequests = groupRequests.reduce((allRequests, requests) => {\n            return allRequests.concat(requests)\n        }, [])\n\n        return allRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n    }\n\n    async cancelRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.cancelRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async denyRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async rejectJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async inviteUserToJoinOrg(groupId: string, username: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.inviteUserToGroup({\n            groupId,\n            username\n        })\n            .then((request) => {\n                return groupRequestToOrgRequest(request)\n            })\n    }\n}","import * as groupsApi from '../../apis/groups'\nimport {\n    SortDirection, EditableOrganization, ValidationState, EditableString, ValidationErrorType\n} from '../../../types';\nimport * as requestModel from '../requests'\nimport * as userModel from '../user'\nimport Validation from './validation'\n\n// import Member from '../../../components/entities/Member';\n\n\nexport interface OrganizationUpdate {\n    name: string\n    logoUrl: string | null\n    description: string\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport interface EditableMemberProfile {\n    title: EditableString\n}\nexport enum UserRelationToOrganization {\n    NONE = 'NONE',\n    VIEW = 'VIEW',\n    MEMBER_REQUEST_PENDING = 'MEMBER_REQUEST_PENDING',\n    MEMBER_INVITATION_PENDING = 'MEMBER_INVITATION_PENDING',\n    MEMBER = 'MEMBER',\n    ADMIN = 'ADMIN',\n    OWNER = 'OWNER'\n}\n\nexport interface UserOrgRelation {\n    type: UserRelationToOrganization\n}\n\nexport interface NoRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.NONE\n}\n\nexport interface ViewRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.VIEW\n}\n\nexport interface MembershipRequestPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n    requestId: string\n}\n\nexport interface MembershipInvitationPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n    requestId: string\n}\n\nexport interface MemberRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER\n}\n\nexport interface AdminRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.ADMIN\n}\n\nexport interface OwnerRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.OWNER\n}\n\nexport type Relation = NoRelation | ViewRelation | MembershipRequestPendingRelation | MembershipInvitationPendingRelation | MemberRelation | AdminRelation | OwnerRelation\n\nexport type Username = string\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    username: groupsApi.Username\n    joinedAt: Date\n    lastVisitedAt: Date | null\n    type: MemberType\n    title: string | null\n}\n\nexport interface MemberUpdate {\n    title?: string\n}\n\nexport enum UserWorkspacePermission {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport type WorkspaceID = number\n\nexport interface NarrativeResource {\n    workspaceId: number\n    title: string\n    permission: UserWorkspacePermission\n    isPublic: boolean\n    createdAt: Date\n    updatedAt: Date\n    addedAt: Date | null\n    description: string\n}\n\nexport type AppID = string\n\nexport interface AppInfo {\n    appId: AppID\n}\n\nexport interface BriefOrganization {\n    id: string\n    name: string\n    logoUrl: string | null\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string | null\n    // TODO: we need researchInterests here\n    owner: Member\n    relation: UserRelationToOrganization\n\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n\n    memberCount: number\n    narrativeCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\nexport enum OrganizationKind {\n    NORMAL = 0,\n    INACCESSIBLE_PRIVATE\n}\n\nexport interface InaccessiblePrivateOrganization {\n    kind: OrganizationKind.INACCESSIBLE_PRIVATE\n    id: string\n    isPrivate: boolean\n    relation: UserRelationToOrganization\n}\n\nexport interface Organization {\n    kind: OrganizationKind.NORMAL\n    id: string\n    name: string\n\n    isPrivate: boolean\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    relation: UserRelationToOrganization\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    owner: Member\n    areMembersPrivate: boolean\n    members: Array<Member>\n    // relation: UserOrgRelation\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n    narratives: Array<NarrativeResource>\n    apps: Array<AppInfo>\n    memberCount: number\n    narrativeCount: number\n    appCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\n// export interface RequestStatus {\n//     new: boolean,\n//     old: boolean\n// }\n\n// LEFT OF HERE - inapplicable should be set if the user is not an admin.\nexport enum RequestStatus {\n    INAPPLICABLE = 'INAPPLICABLE',\n    NONE = 'NONE',\n    OLD = 'OLD',\n    NEW = 'NEW'\n}\n\nexport function determineRelation(\n    org: Organization | InaccessiblePrivateOrganization,\n    username: userModel.Username,\n    request: requestModel.UserRequest | null,\n    invitation: requestModel.UserInvitation | null): Relation {\n\n    if (org.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n        if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n\n    if (username === org.owner.username) {\n        return {\n            type: UserRelationToOrganization.OWNER\n        } as OwnerRelation\n    } else {\n        const member = org.members.find((member) => {\n            return (member.username === username)\n        })\n        if (member) {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    return {\n                        type: UserRelationToOrganization.MEMBER\n                    } as MemberRelation\n                case MemberType.ADMIN:\n                    return {\n                        type: UserRelationToOrganization.ADMIN\n                    } as AdminRelation\n                case MemberType.OWNER:\n                    return {\n                        type: UserRelationToOrganization.OWNER\n                    } as OwnerRelation\n                default:\n                    return {\n                        type: UserRelationToOrganization.NONE\n                    } as NoRelation\n            }\n        } else if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n}\n\nfunction groupPermissionToWorkspacePermission(groupsPermission: string): UserWorkspacePermission {\n    switch (groupsPermission) {\n        case 'None':\n            return UserWorkspacePermission.NONE\n        case 'Read':\n            return UserWorkspacePermission.VIEW\n        case 'Write':\n            return UserWorkspacePermission.EDIT\n        case 'Admin':\n            return UserWorkspacePermission.ADMIN\n        case 'Own':\n            return UserWorkspacePermission.OWNER\n        default:\n            throw new Error('Invalid groups user permission: ' + groupsPermission)\n    }\n}\n\nexport function groupToOrganization(group: groupsApi.Group, currentUser: Username): Organization {\n\n    const owner: Member = {\n        username: group.owner.name,\n        joinedAt: new Date(group.owner.joined),\n        lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n        type: MemberType.OWNER,\n        title: group.owner.custom.title\n    }\n\n    // We join admins and members, since they are all members, just different privileges in the org\n    const members = (<Array<Member>>[\n        // owner\n    ]).concat(group.admins.map((admin) => {\n        return {\n            username: admin.name,\n            joinedAt: new Date(admin.joined),\n            lastVisitedAt: admin.lastvisit ? new Date(admin.lastvisit) : null,\n            type: MemberType.ADMIN,\n            title: admin.custom.title\n        }\n    })).concat(group.members.map((member) => {\n        return {\n            username: member.name,\n            joinedAt: new Date(member.joined),\n            lastVisitedAt: member.lastvisit ? new Date(member.lastvisit) : null,\n            type: MemberType.MEMBER,\n            title: member.custom.title\n        }\n    }))\n\n    const narratives: Array<NarrativeResource> = group.resources.workspace.map((info) => {\n        return {\n            workspaceId: parseInt(info.rid, 10),\n            title: info.narrname,\n            isPublic: info.public,\n            permission: groupPermissionToWorkspacePermission(info.perm),\n            createdAt: new Date(info.narrcreate),\n            updatedAt: new Date(info.moddate),\n            description: info.description,\n            addedAt: info.added === null ? null : new Date(info.added)\n        }\n    })\n    const apps: Array<AppInfo> = []\n\n\n    return {\n        kind: OrganizationKind.NORMAL,\n        id: group.id,\n        name: group.name,\n        isPrivate: group.private,\n        isMember: (group.role !== \"None\"),\n        isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n        isOwner: (group.role === \"Owner\"),\n        relation: groupRoleToUserRelation(group.role),\n        logoUrl: group.custom.logourl || null,\n        homeUrl: group.custom.homeurl || null,\n        researchInterests: group.custom.researchinterests || '',\n        description: group.custom.description,\n        owner: owner,\n        areMembersPrivate: group.privatemembers,\n        members: members,\n        modifiedAt: new Date(group.moddate),\n        createdAt: new Date(group.createdate),\n        lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n        narratives: narratives,\n        apps: [],\n        memberCount: group.memcount,\n        narrativeCount: group.rescount.workspace || 0,\n        appCount: group.rescount.catalogmethod || 0,\n        relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n    }\n}\n\nexport function groupToPrivateOrganization(group: groupsApi.InaccessiblePrivateGroup, currentUser: Username): InaccessiblePrivateOrganization {\n    return {\n        kind: OrganizationKind.INACCESSIBLE_PRIVATE,\n        id: group.id,\n        isPrivate: group.private,\n        // isMember: false,\n        relation: groupRoleToUserRelation(group.role)\n    }\n}\n\n// export function determineRelation(group: Group, username: userModel.Username) {\n//     let relation: UserOrgRelation\n//     // TODO: when we have access to members, admins, and group publication status, we can \n//     // flesh out all user relations.\n//     // const orgMembers: Array<username> = this.membersAndAdminsToMembers(members, admins, profileMap)\n\n//     if (username === group.owner) {\n//         relation = {\n//             type: UserRelationToOrganization.OWNER\n//         } as OwnerRelation\n//     } else if (group.admins.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.ADMIN\n//         } as AdminRelation\n//     } else if (group.members.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER\n//         } as MemberRelation\n//     } else if (pendingRequests.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n//             requestId: pendingRequests.get(group.id)!.id\n//         } as MembershipRequestPendingRelation\n//     } else if (pendingInvites.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n//             requestId: pendingInvites.get(group.id)!.id\n//         } as MembershipInvitationPendingRelation\n//     } else {\n//         relation = {\n//             type: UserRelationToOrganization.VIEW\n//         } as ViewRelation\n//     }\n// }\n\nexport type GroupID = string\nexport type OrganizationID = GroupID\n\n\nexport interface ConstructorParams {\n    groupsServiceURL: string\n    token: string\n    username: groupsApi.Username\n}\n\nexport interface QueryResults {\n    organizations: Array<BriefOrganization>\n    total: number\n}\n\nexport interface Query {\n    searchTerms: Array<string>\n    username: groupsApi.Username\n    sortField: string\n    sortDirection: SortDirection\n    filter: Filter\n}\n\nexport function applySearch(orgs: Array<BriefOrganization>, searchTerms: Array<string>): Array<BriefOrganization> {\n    const searchTermsRe = searchTerms.map((term) => {\n        return new RegExp(term, 'i')\n    })\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTermsRe.every((termRe) => {\n            return termRe.test(org.name) ||\n                termRe.test(org.researchInterests || '') ||\n                termRe.test(org.owner.username)\n        })\n    })\n    return filteredOrgs\n}\n\nfunction dateDays(d: Date) {\n    const t = d.getTime()\n    return Math.round(t / (1000 * 60 * 60 * 24))\n}\n\nfunction applySortComparison(sortField: string, direction: number, a: BriefOrganization, b: BriefOrganization) {\n    switch (sortField) {\n        case 'created':\n            return direction * (dateDays(a.createdAt) - dateDays(b.createdAt))\n        case 'modified':\n        case 'changed':\n            return direction * (dateDays(a.modifiedAt) - dateDays(b.modifiedAt))\n        case 'name':\n            return direction * a.name.localeCompare(b.name)\n        case 'owner':\n            // TODO: after the dust settles for org -> brief org conversion,\n            // we may need to convert the owner to a member via profile...\n            return direction * a.owner.username.localeCompare(b.owner.username)\n        case 'narrativeCount':\n            return direction * (a.narrativeCount - b.narrativeCount)\n        case 'memberCount':\n            return direction * (a.memberCount - b.memberCount)\n        default:\n            console.warn('unimplemented sort field: ' + sortField)\n            return 0;\n    }\n}\n\nfunction applySort(organizations: Array<BriefOrganization>, sortField: string, sortDirection: SortDirection): Array<BriefOrganization> {\n    const direction = sortDirection === SortDirection.ASCENDING ? 1 : -1\n    return organizations.slice().sort((a, b) => {\n        return applySortComparison(sortField, direction, a, b) || applySortComparison('name', 1, a, b)\n    })\n}\n\nfunction groupRoleToUserRelation(role: groupsApi.Role): UserRelationToOrganization {\n    switch (role) {\n        case 'None': return UserRelationToOrganization.NONE\n        case 'Member': return UserRelationToOrganization.MEMBER\n        case 'Admin': return UserRelationToOrganization.ADMIN\n        case 'Owner': return UserRelationToOrganization.OWNER\n        default: throw new Error('Unknown role: ' + role)\n    }\n}\n\nexport interface Filter {\n    roleType: string,\n    roles: Array<string>,\n    privacy: string\n}\n\nfunction applyFilter(organizations: Array<BriefOrganization>, { roleType, roles, privacy }: Filter, username: groupsApi.Username): Array<BriefOrganization> {\n    function applyRoleType(org: BriefOrganization) {\n        switch (roleType) {\n            case 'myorgs':\n                return [\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'notmyorgs':\n                return ![\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'all':\n            default:\n                return true\n        }\n    }\n    function applyRole(org: BriefOrganization) {\n        if (roles.length === 0) {\n            return true\n        }\n        return roles.some((role) => {\n            switch (role) {\n                case 'member':\n                    return (org.relation === UserRelationToOrganization.MEMBER)\n                case 'admin':\n                    return (org.relation === UserRelationToOrganization.ADMIN)\n                case 'owner':\n                    return (org.relation === UserRelationToOrganization.OWNER)\n                default:\n                    return false\n            }\n        })\n    }\n    function applyPrivacy(org: BriefOrganization) {\n        switch (privacy) {\n            case 'public':\n                return !org.isPrivate\n            case 'private':\n                return org.isPrivate\n            case 'any':\n                return true\n            default:\n                return false\n        }\n    }\n    return organizations.filter((org) => {\n        return applyRoleType(org) && applyRole(org) && applyPrivacy(org)\n    })\n\n    // switch (filter) {\n    //     case 'role:all':\n    //         return organizations\n    //     case 'notMemberOf':\n    //         return organizations.filter((org) => {\n    //             return (org.relation === UserRelationToOrganization.NONE)\n    //         })\n    //     case 'memberOf':\n    //         return organizations.filter((org) => {\n    //             return (org.relation !== UserRelationToOrganization.NONE)\n    //         })\n    //     case 'role:member':\n    //         return organizations.filter((org) => {\n    //             return (org.relation === UserRelationToOrganization.MEMBER)\n    //         })\n    //     case 'role:myorgs':\n    //         return organizations.filter((org) => {\n    //             return [\n    //                 UserRelationToOrganization.MEMBER,\n    //                 UserRelationToOrganization.ADMIN,\n    //                 UserRelationToOrganization.OWNER\n    //             ].includes(org.relation)\n    //         })\n    //     case 'role:notmyorgs':\n    //         return organizations.filter((org) => {\n    //             return ![\n    //                 UserRelationToOrganization.MEMBER,\n    //                 UserRelationToOrganization.ADMIN,\n    //                 UserRelationToOrganization.OWNER\n    //             ].includes(org.relation)\n    //         })\n\n    //     case 'role:owner':\n    //         return organizations.filter((org) => (org.relation === UserRelationToOrganization.OWNER))\n    //     case 'role:notowner':\n    //         return organizations.filter((org) => (org.relation !== UserRelationToOrganization.OWNER))\n    //     case 'role:admin':\n    //         return organizations.filter((org) => (org.relation === UserRelationToOrganization.OWNER ||\n    //             org.relation === UserRelationToOrganization.ADMIN))\n    //     case 'privacy:private':\n    //         return organizations.filter((org) => {\n    //             return org.private\n    //         })\n    //     case 'privacy:public':\n    //         return organizations.filter((org) => {\n    //             return !org.private\n    //         })\n\n    //     // TODO: re-enable when have relation again...\n    //     // case 'pending':\n    //     //     return organizations.filter((org) => (\n    //     //         org.relation.type === UserRelationToOrganization.MEMBER_INVITATION_PENDING ||\n    //     //         org.relation.type === UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     //     ))\n    //     // case 'groupPending':\n    //     //     return organizations.filter((org) => (\n    //     //         (org.relation.type === UserRelationToOrganization.ADMIN ||\n    //     //             org.relation.type === UserRelationToOrganization.OWNER) &&\n    //     //         (org.adminRequests && org.adminRequests.length > 0)\n    //     //     ))\n    //     default:\n    //         console.warn('unknown filter : ' + filter)\n    //         return organizations\n    // }\n}\n\n\n\n// Narrative Sort and Search\nfunction narrativeSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return a.title.localeCompare(b.title)\n            }\n        case 'updated':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return b.updatedAt.getTime() - a.updatedAt.getTime()\n            }\n        default:\n        case 'added':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                if (a.addedAt === null) {\n                    if (b.addedAt === null) {\n                        return 0\n                    } else {\n                        // nulls sort to bottom\n                        return 1\n                    }\n                } else {\n                    if (b.addedAt === null) {\n                        return -1\n                    } else {\n                        return b.addedAt.getTime() - a.addedAt.getTime()\n                    }\n                }\n\n            }\n    }\n}\n\nexport function applyNarrativeSort(narratives: Array<NarrativeResource>, sortBy: string) {\n    if (!sortBy) {\n        return narratives\n    }\n    return narratives.slice().sort((a: NarrativeResource, b: NarrativeResource) => {\n        const c1 = narrativeSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return narrativeSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyNarrativeSearch(narratives: Array<NarrativeResource>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return narratives\n    }\n    return narratives.slice().filter((narrative: NarrativeResource) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(narrative.title))\n        })\n    })\n}\n\nexport interface NarrativeQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryNarratives(narratives: Array<NarrativeResource>, query: NarrativeQuery) {\n    const searched = applyNarrativeSearch(narratives, query.searchBy)\n    const sorted = applyNarrativeSort(searched, query.sortBy)\n    return sorted\n}\n\n// Members Sort and Search\n\nfunction memberSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            // TODO: need to use user real name\n\n            return (a: Member, b: Member) => {\n                return a.username.localeCompare(b.username)\n            }\n        default:\n        case 'added':\n            return (a: Member, b: Member) => {\n                return b.joinedAt.getTime() - a.joinedAt.getTime()\n            }\n    }\n}\n\nexport function applyMembersSort(members: Array<Member>, sortBy: string) {\n    if (!sortBy) {\n        return members\n    }\n    return members.slice().sort((a: Member, b: Member) => {\n        const c1 = memberSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return memberSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyMembersSearch(members: Array<Member>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return members\n    }\n    return members.slice().filter((member: Member) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(member.username) ||\n                token.test(member.title || ''))\n        })\n    })\n}\n\nexport interface MembersQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryMembers(members: Array<Member>, query: MembersQuery) {\n    const searched = applyMembersSearch(members, query.searchBy)\n    const sorted = applyMembersSort(searched, query.sortBy)\n    return sorted\n}\n\n// function getCustomField(group: groupsApi.Group | groupsApi.BriefGroup, name: string): string | null {\n//     if (!group.custom) {\n//         return null\n//     }\n//     if (name in group.custom) {\n//         return group.custom[name]\n//     }\n//     return null\n// }\n\nexport class OrganizationModel {\n\n    params: ConstructorParams\n    groupsClient: groupsApi.GroupsClient\n    // organizations: Map<OrganizationID, Organization | InaccessiblePrivateOrganization>\n\n    constructor(params: ConstructorParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        // this.organizations = new Map<OrganizationID, Organization>()\n    }\n\n    async getOrg(id: OrganizationID): Promise<Organization | InaccessiblePrivateOrganization> {\n        return this.groupsClient.getGroupById(id)\n            .then((group) => {\n                if (group.role === \"None\" && group.private) {\n                    return groupToPrivateOrganization(group as groupsApi.InaccessiblePrivateGroup, this.params.username)\n                } else {\n                    return groupToOrganization(group as groupsApi.Group, this.params.username)\n                }\n            })\n    }\n\n    async getOrganization(id: OrganizationID): Promise<Organization> {\n        const group = await this.groupsClient.getGroupById(id)\n        if (group.role === \"None\" && group.private) {\n            throw new Error('Inaccessible Organization')\n        }\n        return groupToOrganization(group as groupsApi.Group, this.params.username)\n    }\n\n    async getOrgs(ids: Array<OrganizationID>): Promise<Array<Organization | InaccessiblePrivateOrganization>> {\n        return Promise.all(ids.map((id) => {\n            return this.getOrg(id)\n        }))\n    }\n\n    async getOwnOrgs(): Promise<Array<BriefOrganization>> {\n        const orgs = await this.getAllOrgs2()\n\n        const ownOrgs = orgs\n            .filter((org: BriefOrganization) => {\n                // ensure that user has some relationship to the org:\n                // member, admin, or owner\n                return (org.relation !== UserRelationToOrganization.NONE)\n            })\n\n        return ownOrgs\n    }\n\n    listGroupToBriefOrganization(group: groupsApi.BriefGroup): BriefOrganization {\n        return {\n            id: group.id,\n            name: group.name,\n            logoUrl: group.custom.logourl || null,\n            isPrivate: group.private,\n            homeUrl: group.custom.homeurl || null,\n            researchInterests: group.custom.researchinterests || null,\n            owner: {\n                username: group.owner,\n                lastVisitedAt: null,\n                type: MemberType.OWNER,\n                joinedAt: new Date(group.createdate),\n                title: 'Owner'\n            },\n\n            // owner: {\n            //     username: group.owner.name,\n            //     lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n            //     type: MemberType.OWNER,\n            //     joinedAt: new Date(group.owner.joined),\n            //     title: group.owner.custom ? group.owner.custom.title : null\n            // },\n            // fix these...\n            relation: groupRoleToUserRelation(group.role),\n            isMember: (group.role !== \"None\"),\n            isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n            isOwner: (group.role === \"Owner\"),\n            createdAt: new Date(group.createdate),\n            modifiedAt: new Date(group.moddate),\n            lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n            memberCount: group.memcount || 0,\n            narrativeCount: group.rescount.workspace || 0,\n            relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n        }\n    }\n\n    async getAllOrgs2(): Promise<Array<BriefOrganization>> {\n        let allGroups: Array<groupsApi.BriefGroup> = []\n        let groups: Array<groupsApi.BriefGroup>\n        do {\n            groups = await this.groupsClient.listGroups()\n            allGroups = allGroups.concat(groups)\n        } while (groups.length === groupsApi.MAX_GROUPS_PER_LIST_REQUEST)\n\n        return allGroups.map((group) => {\n            return this.listGroupToBriefOrganization(group)\n        })\n    }\n\n    async queryOrgs(query: Query): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n\n        const filtered = applyFilter(orgs, query.filter, query.username)\n        const searched = applySearch(filtered, query.searchTerms)\n        const sorted = applySort(searched, query.sortField, query.sortDirection)\n\n        return {\n            organizations: sorted,\n            total: orgs.length\n        }\n    }\n\n    async ownOrgs(username: groupsApi.Username): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n        const ownOrgs = orgs.filter((org: BriefOrganization) => {\n            return (org.relation !== UserRelationToOrganization.NONE)\n        })\n\n        return {\n            organizations: ownOrgs,\n            total: ownOrgs.length\n        }\n    }\n\n    async grantViewAccess(requestId: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantReadAccessToRequestedResource({ requestId })\n        const req = await groupsClient.getRequest(requestId)\n        return requestModel.groupRequestToOrgRequest(req)\n    }\n\n    async addOrg(newOrg: EditableOrganization, username: groupsApi.Username): Promise<Organization> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n        if ((newOrg.id.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.name.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.logoUrl.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.description.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.isPrivate.validationState.type !== ValidationErrorType.OK)\n        ) {\n            return Promise.reject(new Error('One or more fields are invalid'))\n        }\n\n        return groupsClient.createGroup({\n            id: newOrg.id.value,\n            name: newOrg.name.value,\n            logoUrl: newOrg.logoUrl.value,\n            homeUrl: newOrg.homeUrl.value,\n            researchInterests: newOrg.researchInterests.value,\n            description: newOrg.description.value,\n            isPrivate: newOrg.isPrivate.value\n        })\n            .then((group) => {\n                return groupToOrganization(group, username)\n            })\n    }\n\n    async orgExists(id: string): Promise<boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.groupExists(id)\n            .then(({ exists }) => {\n                return exists\n            })\n    }\n\n    async updateOrg(id: string, orgUpdate: OrganizationUpdate): Promise<void> {\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n\n\n        return groupsClient.updateGroup(id, {\n            name: orgUpdate.name,\n            logoUrl: orgUpdate.logoUrl,\n            homeUrl: orgUpdate.homeUrl,\n            researchInterests: orgUpdate.researchInterests,\n            description: orgUpdate.description,\n            private: orgUpdate.isPrivate\n        })\n    }\n\n    validateOrgId(id: string): [string, ValidationState] {\n        return Validation.validateOrgId(id);\n    }\n\n    validateOrgName(name: string): [string, ValidationState] {\n        return Validation.validateOrgName(name)\n    }\n\n    validateOrgDescription(description: string): [string, ValidationState] {\n        return Validation.validateOrgDescription(description);\n    }\n\n    async removeNarrativeFromOrg(organizationId: OrganizationID, workspaceId: number): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'workspace',\n            String(workspaceId)\n        )\n    }\n\n    async grantNarrativeAccess(groupId: string, resourceId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantResourceAccess(groupId, 'workspace', resourceId)\n    }\n\n    async requestMembership(id: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.requestMembership({\n            groupId: id\n        })\n        return requestModel.groupRequestToOrgRequest(request)\n    }\n\n    async addOrRequestNarrativeToGroup(groupId: string, workspaceId: WorkspaceID): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestNarrative({\n            groupId: groupId,\n            workspaceId: workspaceId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    async memberToAdmin(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.memberToAdmin({\n            groupId,\n            member\n        })\n    }\n\n    async adminToMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.adminToMember({\n            groupId,\n            member\n        })\n    }\n    async removeMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.removeMember({\n            groupId,\n            member\n        })\n    }\n\n    async updateMember(groupId: string, memberUsername: string, update: MemberUpdate) {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.updateMember({ groupId, memberUsername, update })\n    }\n\n    async visitOrg({ organizationId }: { organizationId: string }): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.visitGroup({ groupId: organizationId })\n    }\n\n    async getOpenRequestsStatus({ organizationIds }: { organizationIds: Array<OrganizationID> }): Promise<Map<OrganizationID, RequestStatus>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: organizationIds })\n        const result = new Map<OrganizationID, RequestStatus>()\n        for (const [groupId, status] of openRequests.entries()) {\n            const requestStatus: RequestStatus = stringToRequestStatus(status)\n            result.set(<OrganizationID>groupId, requestStatus)\n        }\n        return result\n    }\n\n    async getOpenRequestStatus({ organizationId }: { organizationId: OrganizationID }): Promise<RequestStatus> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: [organizationId] })\n        for (const [groupId, status] of openRequests.entries()) {\n            return stringToRequestStatus(status)\n        }\n        throw new Error('expected request status, got none')\n    }\n\n    async addRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.addRelatedGroup(organizationId, relatedOrganizationId)\n    }\n\n    async removeRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.removeRelatedGroup(organizationId, relatedOrganizationId)\n    }\n}\n\nfunction stringToRequestStatus(status: groupsApi.RequestStatus): RequestStatus {\n    switch (status.new) {\n        case 'None': return RequestStatus.NONE\n        case 'Old': return RequestStatus.OLD\n        case 'New': return RequestStatus.NEW\n        default: throw new Error('Invalid open request status: ' + status)\n    }\n}\n\nexport function userPermissionToWorkspacePermission(userPermission: string, isOwner: boolean) {\n    if (isOwner) {\n        return UserWorkspacePermission.OWNER\n    }\n    switch (userPermission) {\n        case 'r':\n            return UserWorkspacePermission.VIEW\n        case 'w':\n            return UserWorkspacePermission.EDIT\n        case 'a':\n            return UserWorkspacePermission.ADMIN\n        default:\n            throw new Error('Invalid workspace user permission: ' + userPermission)\n    }\n}","import { ValidationState, ValidationErrorType } from \"../../../types\"\n\nexport default class Validation {\n    static nonPrintableRe = /[\\000-\\031]/\n\n    static testNonPrintableCharacters(s: string) {\n        const firstNonPrintable = s.search(Validation.nonPrintableRe)\n        if (firstNonPrintable === -1) {\n            return false\n        }\n        const beforeStart = firstNonPrintable - 5 < 0 ? 0 : firstNonPrintable - 5\n        const before = s.slice(beforeStart, firstNonPrintable)\n        const after = s.slice(firstNonPrintable + 1, firstNonPrintable + 6)\n        return `Non-printable character at position ${firstNonPrintable}: \"${before}___${after}`\n    }\n\n    static validateOrgId(id: string): [string, ValidationState] {\n        // May not be empty\n        if (id.length === 0) {\n            return [\n                id, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization id may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        // No spaces\n        if (id.match(/\\s/)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not contain a space',\n                    validatedAt: new Date()\n                }]\n        }\n        // May not exceed maximum size\n        // todo: what is the real limit?\n        if (id.length > 100) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not be longer than 100 characters',\n                    validatedAt: new Date()\n                }]\n        }\n\n        // May only consist if lower case alphanumeric\n        const alphaRe = /^[a-z0-9-]+$/\n        if (!id.match(alphaRe)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization ID may only contain lower case letters (a-z), numeric digits (0-9) and the dash \"-\"',\n                    validatedAt: new Date()\n                }\n            ]\n        }\n\n        return [id, {\n            type: ValidationErrorType.OK,\n            validatedAt: new Date()\n        }]\n    }\n\n    static validateOrgName(name: string): [string, ValidationState] {\n        if (name.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization name may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        if (name.length > 256) {\n            return [\n                name, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization name may not be longer than 256 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            name, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgLogoUrl(logoUrl: string | null): [string | null, ValidationState] {\n        if (logoUrl === null || logoUrl === '') {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (logoUrl.length > 1000) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Logo url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(logoUrl)\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n            if (!url.protocol.match(/^https:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Only https (secure) urls are supported',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            logoUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgHomeUrl(homeUrl: string | null): [string | null, ValidationState] {\n        if (homeUrl === null || homeUrl === '') {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (homeUrl.length > 1000) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Home url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(homeUrl)\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    homeUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n            if (!url.protocol.match(/^https:$/)) {\n                return [\n                    homeUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Only https (secure) urls are supported',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            homeUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgResearchInterests(researchInterests: string): [string, ValidationState] {\n        if (researchInterests.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Research Interests may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n\n        if (researchInterests.length > 280) {\n            return [\n                researchInterests, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Research Interests may not be longer than 280 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            researchInterests, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgDescription(description: string): [string, ValidationState] {\n        if (description.length === 0) {\n            // return [name, {\n            //     type: ValidationErrorType.OK,\n            //     validatedAt: new Date()\n            // }]\n            return [name, {\n                type: ValidationErrorType.ERROR,\n                message: 'Organization description may not be empty',\n                validatedAt: new Date()\n            }]\n        }\n        // TODO: Is there really a limit?\n        // const nonPrintable = Validation.testNonPrintableCharacters(description)\n        // if (nonPrintable) {\n        //     return [\n        //         description, {\n        //             type: UIErrorType.ERROR,\n        //             message: nonPrintable\n        //         }\n        //     ]\n        // }\n        if (description.length > 4096) {\n            return [\n                description, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization description may not be longer than 4,096 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            description, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        ]\n    }\n\n    static validateMemberTitle(title: string): [string, ValidationState] {\n        const maxTitleLength = 100\n        if (title.length > maxTitleLength) {\n            return [\n                title, {\n                    type: ValidationErrorType.ERROR,\n                    message: `member title may not be longer than ${maxTitleLength} characters`,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            title, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n}","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\nexport interface Load extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n}\n\nexport interface LoadError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR\n    error: AnError\n}\n\nexport interface Unload extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n        } as LoadStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        const { organization } = viewModel\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const orgs = await orgClient.getAllOrgs2()\n            const selectableOrgs = orgs.map((org) => {\n                const isRelated = organization.relatedOrganizations.includes(org.id)\n                return {\n                    isRelated: isRelated,\n                    isSelected: false,\n                    organization: org\n                } as SelectableRelatableOrganization\n            })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n                organizations: selectableOrgs\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n    }\n}\n\nexport interface SelectOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    selectedOrganization: SelectableRelatableOrganization\n}\n\nexport function selectOrganization(org: SelectableRelatableOrganization): SelectOrganization {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n        selectedOrganization: org\n    }\n}\n\n// Add Org\n\nexport interface AddOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n}\n\nexport interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n        } as AddOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Search Orgs\n\nexport interface Search extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    query: string\n}\n\nexport interface SearchStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n}\n\nexport interface SearchSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n    searchBy: string\n}\n\nexport interface SearchError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n    error: AnError\n}\n\nexport function applyQuery(orgs: Array<SelectableRelatableOrganization>, query: string) {\n    const searchExp = query.split(/\\s+/).map((term) => {\n        return new RegExp(term, 'i')\n    })\n\n    return orgs.filter(({ organization }) => {\n        return searchExp.every((re) => {\n            return (\n                re.test(organization.name) ||\n                // TODO: realname\n                re.test(organization.owner.username)\n            )\n        })\n    })\n}\n\nexport function search(query: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n        } as SearchStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n\n        const vm = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n        if (vm === null) {\n            throw new Error('vm is null')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            const availableOrgs = applyQuery(vm.availableOrganizations.organizations, query)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n                organizations: availableOrgs,\n                searchBy: query\n            } as SearchSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageRelatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind, ViewOrgSubViewKind, ViewState, SelectableRelatableOrganization } from '../../../types';\nimport { ActionFlag } from '../../actions';\nimport { OrganizationModel } from '../../../data/models/organization/model';\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.OK,\n                            error: null,\n                            viewModel: {\n                                kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS,\n                                relatedOrganizations: state.views.viewOrgView.viewModel.organization.relatedOrganizations,\n                                organization: state.views.viewOrgView.viewModel.organization,\n                                availableOrganizations: {\n                                    organizations: action.organizations,\n                                    queried: action.organizations,\n                                    searchBy: ''\n                                },\n                                selectedOrganization: null\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.NONE,\n                            error: null,\n                            viewModel: null\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function selectOrganization(state: StoreState, action: actions.SelectOrganization): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations;\n\n    const organizations = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.selectedOrganization.organization.id) {\n            relatedOrg.isSelected = true\n        } else {\n            relatedOrg.isSelected = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                selectedOrganization: action.selectedOrganization,\n                                availableOrganizations: {\n                                    organizations: organizations,\n                                    queried: actions.applyQuery(organizations, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrganization(state: StoreState, action: actions.AddOrganizationSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n    const newRelatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.concat([action.organizationId])\n\n    const newAvailableOrgs = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (newRelatedOrgs.includes(relatedOrg.organization.id)) {\n            relatedOrg.isRelated = true\n        } else {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: newRelatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganizationSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    // Remove from the related orgs\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n\n    // Update the related status of the org in the management interface.\n    const newAvailableOrgs = availableOrgs.organizations.filter((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.organizationId) {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport function searchSuccess(state: StoreState, action: actions.SearchSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations,\n                                    queried: action.organizations,\n                                    searchBy: action.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION:\n            return selectOrganization(state, action as actions.SelectOrganization)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS:\n            return addOrganization(state, action as actions.AddOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as actions.SearchSuccess)\n        default:\n            return null\n    }\n}\n","import * as actions from '../../actions/viewOrganization/relatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { Action } from 'redux'\nimport { ActionFlag } from '../../actions'\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganization): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganization)\n        default:\n            return null\n    }\n}\n","import { Action } from 'redux'\nimport * as actions from '../actions/viewOrg'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport acceptInboxRequest from './viewOrganization/acceptInboxRequest'\nimport viewMembers from './viewOrganization/viewMembers'\nimport denyInboxRequest from './viewOrganization/denyInboxRequest'\nimport cancelOutboxRequest from './viewOrganization/cancelOutboxRequests'\nimport manageRelatedOrganizations from './viewOrganization/manageRelatedOrganizations'\nimport relatedOrganizations from './viewOrganization/relatedOrganizations'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\n\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadNormalSuccess(state: types.StoreState, action: actions.LoadNormalSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    sortNarrativesBy: action.narrativesSortBy,\n                    searchNarrativesBy: '',\n                    narratives: action.narratives,\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        manageRelatedOrganizationsView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        inviteUserView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        requestNarrativeView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        }\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function reloadNormalSuccess(state: types.StoreState, action: actions.ReloadNormalSuccess): types.StoreState {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (viewModel === null) {\n        return state\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    sortNarrativesBy: action.narrativesSortBy,\n                    searchNarrativesBy: '',\n                    narratives: action.narratives,\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        ...viewModel.subViews,\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(state: types.StoreState, action: actions.LoadInaccessiblePrivateSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n                    organization: action.organization,\n                    relation: action.relation,\n                    requestOutbox: action.requestOutbox\n                } as types.ViewInaccessiblePrivateOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function removeNarrativeSuccess(state: types.StoreState, action: actions.RemoveNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    // Argh!@\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const narratives = state.views.viewOrgView.viewModel.organization.narratives\n    const newNarratives = narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    const newDisplayNarratives = state.views.viewOrgView.viewModel.narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    // const filteredSortedNarratives = \n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        narratives: newNarratives,\n                        narrativeCount: newNarratives.length\n                    },\n                    narratives: newDisplayNarratives,\n                }\n            }\n        }\n    }\n}\n\nexport function accessNarrativeSuccess(state: types.StoreState, action: actions.AccessNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: action.organization,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nexport function sortNarrativesSuccess(state: types.StoreState, action: actions.SortNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortNarrativesBy: action.sortBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nexport function searchNarrativesSuccess(state: types.StoreState, action: actions.SearchNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchNarrativesBy: action.searchBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\n\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS:\n            return loadNormalSuccess(state, action as actions.LoadNormalSuccess)\n        case ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS:\n            return reloadNormalSuccess(state, action as actions.ReloadNormalSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS:\n            return loadInaccessiblePrivateSuccess(state, action as actions.LoadInaccessiblePrivateSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS:\n            return removeNarrativeSuccess(state, action as actions.RemoveNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS:\n            return sortNarrativesSuccess(state, action as actions.SortNarrativesSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS:\n            return searchNarrativesSuccess(state, action as actions.SearchNarrativesSuccess)\n    }\n\n    return acceptInboxRequest(state, action) ||\n        denyInboxRequest(state, action) ||\n        cancelOutboxRequest(state, action) ||\n        viewMembers(state, action) ||\n        manageRelatedOrganizations(state, action) ||\n        relatedOrganizations(state, action) ||\n        relatedOrganizations(state, action)\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/browseOrgs'\nimport { StoreState, SortDirection, ComponentLoadingState, BrowseOrgsView } from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function applyOrgSearch(orgs: Array<orgModel.Organization>, searchTerms: Array<string>) {\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTerms.every((term) => {\n            // todo : make more efficient!!!\n            return (new RegExp(term, 'i').test(org.name));\n        })\n    })\n\n    return {\n        organizations: filteredOrgs,\n        totalCount: orgs.length,\n        filteredCount: filteredOrgs.length\n    }\n}\n\n// TODO:\n// dispatch the start of the request\n// do the request\n// dispatch the success (will be same for all queries?)\n// dispatch the error\n// FOR NOW:\n// do it here...\nexport function searchOrgs(state: BrowseOrgsView, action: actions.SearchOrgs): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    // const { viewModel: { filter, sortBy, sortDirection } } = state\n\n    // const query: Query = {\n    //     searchTerms: action.searchTerms,\n    //     filter: filter,\n    //     sortBy: sortBy,\n    //     sortDirection: sortDirection,\n    //     username: state.auth.authorization.username\n    // }\n    // const result = queryOrgs(state.rawOrganizations, query)\n    // rawOrganizations: Array<Organization>\n    // organizations: Array<Organization>\n    // totalCount: number\n    // filteredCount: number\n    // sortBy: string\n    // sortDirection: SortDirection\n    // filter: string\n    // searchTerms: Array<string>\n    // selectedOrganizationId: string | null\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedOrganizationId: null,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsStart(state: BrowseOrgsView, action: actions.SearchOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsSuccess(state: BrowseOrgsView, action: actions.SearchOrgsSuccess): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            organizations: action.organizations,\n            openRequests: action.openRequests,\n            totalCount: action.totalCount,\n            filteredCount: action.organizations.length,\n            searching: false\n        }\n    }\n}\n\n// TODO: hmm, uses the global error -- this was early in the development of this (a whole two weeks ago!)\n// and this should now go in the \"browseOrgs\" (or better named \"searchOrgs\") branch.\nexport function searchOrgsError(state: BrowseOrgsView, action: actions.SearchOrgsError): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: false,\n            error: action.error\n        }\n    }\n}\n\n\nexport function sortOrgsStart(state: BrowseOrgsView, action: actions.SortOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            sortField: action.sortField,\n            sortDirection: action.sortDirection,\n            searching: true\n        }\n    }\n}\n\n\ninterface Query {\n    searchTerms: Array<string>,\n    username: string,\n    sortField: string,\n    sortDirection: SortDirection,\n    filter: string\n}\n\ninterface QueryResults {\n    organizations: Array<orgModel.Organization>,\n    total: number\n}\n\nfunction filterOrgsStart(state: BrowseOrgsView, action: actions.FilterOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { filter } = action\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            filter,\n            searching: true\n        }\n    }\n}\n\nfunction loadSuccess(state: BrowseOrgsView, action: actions.LoadSuccess): BrowseOrgsView {\n    const { defaultViewModel: {\n        rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n        totalCount, filteredCount, selectedOrganizationId, error, searching\n    } } = action\n\n    return {\n        ...state,\n        loadingState: ComponentLoadingState.SUCCESS,\n        error: null,\n        viewModel: {\n            rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n            totalCount, filteredCount, selectedOrganizationId, error, searching\n        }\n    }\n}\n\nfunction unload(state: BrowseOrgsView, action: actions.Unload): BrowseOrgsView {\n    return {\n        loadingState: ComponentLoadingState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction localReducer(state: BrowseOrgsView, action: Action): BrowseOrgsView | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.BROWSE_ORGS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH:\n            return searchOrgs(state, action as actions.SearchOrgs)\n        case ActionFlag.BROWSE_ORGS_SEARCH_START:\n            return searchOrgsStart(state, action as actions.SearchOrgsStart)\n        case ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS:\n            return searchOrgsSuccess(state, action as actions.SearchOrgsSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH_ERROR:\n            return searchOrgsError(state, action as actions.SearchOrgsError)\n        // case ActionFlag.SORT_ORGS_STAR:\n        //     return sortOrgs(state, action as actions.SortOrgs)\n        case ActionFlag.BROWSE_ORGS_SORT_START:\n            return sortOrgsStart(state, action as actions.SortOrgsStart)\n        case ActionFlag.BROWSE_ORGS_FILTER_START:\n            return filterOrgsStart(state, action as actions.FilterOrgsStart)\n        case ActionFlag.BROWSE_ORGS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action<any>): StoreState | null {\n    const browseOrgsView = localReducer(state.views.browseOrgsView, action)\n    if (!browseOrgsView) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView\n        }\n    }\n}\n","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\nimport { StoreState, AuthState } from '../../types'\nimport { AuthCheckStart, AuthAuthorized, AuthUnauthorized, AuthCheckError } from '../actions/auth';\n\nexport function authCheckStart(state: StoreState, action: AuthCheckStart): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.CHECKING,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authCheckError(state: StoreState, action: AuthCheckError): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.ERROR,\n            message: action.error.message,\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authAuthorized(state: StoreState, action: AuthAuthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.AUTHORIZED,\n            message: '',\n            authorization: {\n                token: action.token,\n                username: action.username,\n                realname: action.realname,\n                roles: action.roles\n            }\n        }\n    }\n}\n\nexport function authUnauthorized(state: StoreState, action: AuthUnauthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.UNAUTHORIZED,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.AUTH_CHECK_START:\n            return authCheckStart(state, action as AuthCheckStart)\n        case ActionFlag.AUTH_AUTHORIZED:\n            return authAuthorized(state, action as AuthAuthorized)\n        case ActionFlag.AUTH_UNAUTHORIZED:\n            return authUnauthorized(state, action as AuthUnauthorized)\n        case ActionFlag.AUTH_CHECK_ERROR:\n            return authCheckError(state, action as AuthCheckError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { ActionFlag } from '../actions'\nimport { AppSuccess } from '../actions/app';\nimport { StoreState, AppState } from '../../types';\n\nexport function appSuccess(state: StoreState, action: AppSuccess): StoreState {\n    return {\n        ...state,\n        app: {\n            status: AppState.READY,\n            config: action.config\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.APP_SUCCESS:\n            return appSuccess(state, action as AppSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageOrganizationRequests'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(\n    state: StoreState,\n    action: actions.LoadStart): StoreState {\n    return state\n}\n\nexport function loadSuccess(\n    state: StoreState,\n    action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    requests: action.requests,\n                    invitations: action.invitations\n                },\n            }\n        }\n    }\n}\n\nexport function loadError(\n    state: StoreState,\n    action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function getViewAccessSuccess(state: StoreState, action: actions.GetViewAccessSuccess): StoreState {\n    // Note: we use the state object rather than peeling off the viewModel because\n    // TS can't trace the assertion (not falsy) of the variable back to the object \n    // property it was taken from.\n    if (!state.views.manageOrganizationRequestsView.viewModel) {\n        return state\n    }\n    const requests = state.views.manageOrganizationRequestsView.viewModel.requests\n    const newRequests = requests.map((request) => {\n        if (request.id = action.request.id) {\n            return action.request\n        }\n        return request\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                ...state.views.manageOrganizationRequestsView,\n                viewModel: {\n                    // TODO: below, \n                    ...state.views.manageOrganizationRequestsView.viewModel,\n                    requests: newRequests\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS:\n            return getViewAccessSuccess(state, action as actions.GetViewAccessSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.LOADING,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.NONE,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation\n                },\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.ERROR,\n                viewModel: null,\n                error: action.error\n            }\n        }\n    }\n}\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.ADMIN\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.MEMBER\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_MEMBERS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_MEMBERS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/inviteUser'\nimport { ViewOrgViewModel, StoreState, InviteUserViewModel, ViewState, View, InviteUserViewState } from '../../../types'\nimport { ActionFlag } from '../../actions'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { ViewOrgViewModelKind } from '../../../types';\n\nexport function loadStart(state: View<InviteUserViewModel>, action: actions.LoadStart): View<InviteUserViewModel> {\n    return {\n        state: ViewState.LOADING,\n        viewModel: null,\n        error: null\n    }\n}\n\nexport function loadSuccess(state: View<InviteUserViewModel>, action: actions.LoadSuccess): View<InviteUserViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            editState: InviteUserViewState.EDITING,\n            users: action.users,\n            organization: action.organization,\n            selectedUser: null\n        }\n    }\n}\n\nexport function loadError(state: View<InviteUserViewModel>, action: actions.LoadError): View<InviteUserViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<InviteUserViewModel>, action: actions.Unload): View<InviteUserViewModel> {\n    return {\n\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function searchUsersSuccess(state: View<InviteUserViewModel>, action: actions.SearchUsersSuccess): View<InviteUserViewModel> {\n    // TODO: better guards!\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            users: action.users\n        }\n    }\n}\n\nexport function selectUserSuccess(state: View<InviteUserViewModel>, action: actions.SelectUserSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedUser: {\n                user: action.user,\n                relation: action.relation\n            }\n        }\n    }\n}\n\nexport function sendInvitationStart(state: View<InviteUserViewModel>, action: actions.SendInvitationStart): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SENDING\n        }\n    }\n}\n\nexport function sendInvitationSuccess(state: View<InviteUserViewModel>, action: actions.SendInvitationSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const { viewModel: { selectedUser, users } } = state\n\n    // const selectedUser = state.inviteUserView.value.selectedUser\n    if (!selectedUser) {\n        throw new Error('selected user is null')\n    }\n    selectedUser.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n\n    if (!users) {\n        throw new Error('users is null')\n    }\n    const newUsers = users.map((user) => {\n        if (user.username === selectedUser.user.username) {\n            user.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n        }\n        return user\n    })\n\n    return {\n        ...state,\n\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SUCCESS,\n            selectedUser: selectedUser,\n            users: newUsers\n        }\n    }\n}\n\nexport function sendInvitationError(state: View<InviteUserViewModel>, action: actions.SendInvitationError): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.ERROR\n        }\n    }\n}\n\nfunction localReducer(state: View<InviteUserViewModel>, action: Action): View<InviteUserViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return searchUsersSuccess(state, action as actions.SearchUsersSuccess)\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return selectUserSuccess(state, action as actions.SelectUserSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return sendInvitationStart(state, action as actions.SendInvitationStart)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return sendInvitationSuccess(state, action as actions.SendInvitationSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return sendInvitationError(state, action as actions.SendInvitationError)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return true\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return true\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return true\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return true\n        default:\n            return false\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<InviteUserViewModel> = state.views.viewOrgView.viewModel.subViews.inviteUserView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        inviteUserView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageMembership'\nimport { StoreState, ComponentLoadingState, SyncState, ValidationStateOk, ValidationState, ValidationErrorType, SaveState, EditState, ManageMembershipViewModel } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    editableMemberProfile: action.editableMemberProfile,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.NEW,\n                    validationState: validationStateOk()\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function updateTitleSuccess(state: StoreState, action: actions.UpdateTitleSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n\n    const editedMember = state.views.manageMembershipView.viewModel.editableMemberProfile\n    let syncState\n    if (action.title !== editedMember.title.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editableMemberProfile: {\n                        ...state.views.manageMembershipView.viewModel.editableMemberProfile,\n                        title: {\n                            value: action.title,\n                            remoteValue: action.title,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const editState = evaluateEditorState(newState.views.manageMembershipView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...newState.views.manageMembershipView,\n                viewModel: {\n                    ...newState.views.manageMembershipView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\nfunction evaluateEditorState(viewModel: ManageMembershipViewModel): EditState {\n    if (viewModel.editableMemberProfile.title.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\nfunction evaluateSuccess(state: StoreState, action: actions.EvaluateSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n\n    const editState = evaluateEditorState(state.views.manageMembershipView.viewModel)\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editState: editState,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateError(state: StoreState, action: actions.EvaluateError): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation error(s)',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: actions.SaveSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editableMemberProfile: {\n                        title: {\n                            ...state.views.manageMembershipView.viewModel.editableMemberProfile.title,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.MANAGE_MEMBERSHIP_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n            return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n            return evaluateSuccess(state, action as actions.EvaluateSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n            return evaluateError(state, action as actions.EvaluateError)\n        case ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            return saveSuccess(state, action as actions.SaveSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/requestAddNarrative'\nimport {\n    StoreState, SaveState, NarrativeState, View,\n    RequestNarrativeViewModel, ViewOrgViewModelKind,\n    ViewState,\n    SelectionState\n} from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nexport function loadStart(state: View<RequestNarrativeViewModel>, action: actions.LoadStart): View<RequestNarrativeViewModel> {\n    return {\n\n        state: ViewState.LOADING,\n        error: null,\n        viewModel: null\n    }\n\n}\n\nexport function loadSuccess(state: View<RequestNarrativeViewModel>, action: actions.LoadSuccess): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            organization: action.organization,\n            narratives: action.narratives,\n            selectedNarrative: null,\n            relation: action.relation,\n            error: null,\n            selectionState: SelectionState.NONE,\n            saveState: SaveState.SAVED\n        }\n    }\n}\n\nexport function loadError(state: View<RequestNarrativeViewModel>, action: actions.LoadError): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function sendRequestStart(state: View<RequestNarrativeViewModel>, action: actions.SendRequestStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVING\n        }\n    }\n}\n\nexport function sendRequestSuccess(state: View<RequestNarrativeViewModel>, action: actions.SendRequestSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const newState: View<RequestNarrativeViewModel> = {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVED\n        }\n    }\n\n    const viewModel = newState.viewModel\n\n    // hmm, TS can't trace this fact from the original state (which we proved\n    // at the top of this function.)\n    if (!viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const selectedNarrative = viewModel.selectedNarrative\n\n    // If the request is by an admin, it will be returned as true, not the request\n    // (the api returns {complete: true})\n    if (action.request === true) {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.ASSOCIATED\n            }\n            return orgNarrative\n        })\n    } else {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.REQUESTED\n            }\n            return orgNarrative\n        })\n    }\n\n    return newState\n}\n\nexport function sendRequestError(state: View<RequestNarrativeViewModel>, action: actions.SendRequestError): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVE_ERROR,\n            error: action.error\n        }\n    }\n}\n\nexport function selectNarrativeStart(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel\n        }\n    }\n}\n\nexport function selectNarrativeSuccess(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    const newState = {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel,\n            selectedNarrative: action.narrative\n        }\n    }\n    return newState\n}\n\nexport function unload(state: View<RequestNarrativeViewModel>, action: actions.Unload): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction sortSuccess(state: View<RequestNarrativeViewModel>, action: actions.SortSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            narratives: action.narratives\n        }\n    }\n}\n\nfunction localReducer(state: View<RequestNarrativeViewModel>, action: Action): View<RequestNarrativeViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n            return sendRequestSuccess(state, action as actions.SendRequestSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START:\n            return selectNarrativeStart(state, action as actions.SelectNarrativeStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n            return selectNarrativeSuccess(state, action as actions.SelectNarrativeSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return sortSuccess(state, action as actions.SortSuccess)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return true\n        default:\n            return false\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<RequestNarrativeViewModel> = state.views.viewOrgView.viewModel.subViews.requestNarrativeView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        requestNarrativeView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\n","import * as actions from '../../actions/entities/organization'\nimport { StoreState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess) {\n    const newOrgs = new Map(state.entities.organizations.byId)\n    newOrgs.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            organizations: {\n                ...state.entities.organizations.byId,\n                byId: newOrgs\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: actions.OrganizationEntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}\n","\nimport * as actions from '../actions/entities'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport organizationsReducer from './entities/organization'\n\nfunction userLoaderSuccess(state: StoreState, action: actions.UserLoaderSuccess) {\n    const users = state.entities.users\n    // mutation ... horrible ;)\n    users.byId.set(action.user.username, action.user)\n    // return state\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            users: {\n                ...state.entities.users,\n                byId: new Map(users.byId)\n            }\n        }\n    }\n}\n\nfunction organizationLoaderSuccess(state: StoreState, action: actions.OrganizationLoaderSuccess) {\n    const orgsMap = state.entities.orgs.byId\n    orgsMap.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            orgs: {\n                ...state.entities.orgs,\n                byId: new Map(orgsMap)\n            }\n        }\n    }\n}\n\nfunction loadNarrativeSuccess(state: StoreState, action: actions.LoadNarrativeSuccess) {\n    const narratives = state.entities.narratives\n    narratives.byId.set(action.narrative.workspaceId, action.narrative)\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                ...state.entities.narratives,\n                byId: new Map(narratives.byId)\n            }\n        }\n    }\n}\n\n// TODO: start and error\n\nexport default function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n            return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n        case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n            return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n        case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n            return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n    }\n\n    return organizationsReducer(state, action)\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../actions/dataServices'\nimport { StoreState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport * as userProfileModel from '../../data/models/profile'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        db: {\n            ...state.db,\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.DATA_SERVICE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport { StoreState } from '../../types'\nimport addOrgReducer from './addOrg'\nimport editOrgReducer from './editOrg'\nimport viewOrgReducer from './viewOrg'\nimport browseOrgsReducer from './browseOrgs'\nimport authReducer from './auth'\nimport appReducer from './app'\nimport manageOrganizatiopRequests from './manageOrganizationRequests'\nimport viewMembers from './viewMembers'\nimport inviteUser from './viewOrganization/inviteUser'\nimport manageMembership from './manageMembership'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\nimport entities from './entities'\nimport dataServices from './dataServices'\n\n\nexport function reducer(state: StoreState, action: Action): StoreState {\n    return addOrgReducer(state, action) ||\n        editOrgReducer(state, action) ||\n        browseOrgsReducer(state, action) ||\n        viewOrgReducer(state, action) ||\n        authReducer(state, action) ||\n        appReducer(state, action) ||\n        manageOrganizatiopRequests(state, action) ||\n        viewMembers(state, action) ||\n        inviteUser(state, action) ||\n        manageMembership(state, action) ||\n        requestAddNarrative(state, action) ||\n        entities(state, action) ||\n        dataServices(state, action) ||\n        state;\n}\n\nexport default reducer","import * as React from 'react'\nimport './Owner.css'\n\nimport Avatar from './Avatar'\nimport { Icon, Tooltip } from 'antd';\nimport * as userModel from '../../data/models/user'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface OwnerProps {\n    user: userModel.User\n    avatarSize?: number\n    showAvatar: boolean\n}\n\ninterface OwnerState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class Owner extends React.Component<OwnerProps, OwnerState> {\n    constructor(props: OwnerProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        return (\n            <span>\n                <Icon type=\"crown\" /> owner\n        </span>\n        )\n    }\n\n    renderAvatar() {\n        if (this.props.showAvatar) {\n            return (\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n            )\n        }\n    }\n\n    renderCompact() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"Owner-owner\" >\n                {/* <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div> */}\n                {this.renderAvatar()}\n\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            title={tooltip}>\n                            <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n\n                    </div>\n                    {/* <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Owner View-NORMAL\" >\n                <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div>\n                    {/* <div className=\"role\">\n                        {this.renderRole()}\n                    </div> */}\n                    {/* <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div> */}\n                    <div className=\"Owner-title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"Owner-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Owner-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    render() {\n        return this.renderCompact()\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return this.renderCompact()\n\n        //     case View.NORMAL:\n        //         return this.renderNormal()\n        // }\n    }\n}\n\n","import * as React from 'react'\nimport md5 from 'md5'\n\nexport interface OrgLogoProps {\n    logoUrl: string | null\n    size: number\n    organizationName: string\n    organizationId: string\n}\n\nexport interface OrgLogoState {\n\n}\n\nexport default class OrgLogo extends React.Component<OrgLogoProps, OrgLogoState> {\n    constructor(props: OrgLogoProps) {\n        super(props)\n    }\n\n    renderLogoUrl() {\n        if (!this.props.logoUrl) {\n            return (\n                <span>n/a</span>\n            )\n        }\n        return (\n            <img src={this.props.logoUrl} width={this.props.size} />\n        )\n    }\n\n    // see: https://github.com/lautis/unicode-substring/blob/master/index.js\n    charAt(inString: string, position: number) {\n        // const c1 = inString.charAt(position)\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderDefaultInitial() {\n        const initial = this.charAt(this.props.organizationName, 0).toUpperCase()\n        // const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.organizationId)\n\n        const color = hash.substr(0, 6)\n        // return (\n        //     <span style={{ color: '\"#' + color + '\"', width: this.props.size, height: this.props.size, fontSize: this.props.size - 6 }}\n        //     >{initial}</span>\n        // )\n        return (\n            <svg width={this.props.size} height={this.props.size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={this.props.size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogo() {\n        if (this.props.logoUrl) {\n            return this.renderLogoUrl()\n        }\n        return this.renderDefaultInitial();\n    }\n\n    render() {\n        return this.renderLogo()\n    }\n}","import * as React from 'react'\nimport './Avatar.css'\nimport noUserPic from './nouserpic.png'\n\nimport { User } from '../../types'\n\nexport interface AvatarProps {\n    user: User,\n    size: number\n}\n\ninterface AvatarState {\n\n}\n\nexport class Avatar extends React.Component<AvatarProps, AvatarState> {\n    constructor(props: AvatarProps) {\n        super(props)\n    }\n\n    getAvatarUrl(user: User) {\n        switch (user.avatarOption || 'gravatar') {\n            case 'gravatar':\n                const gravatarDefault = user.gravatarDefault || 'identicon';\n                const gravatarHash = user.gravatarHash;\n                if (gravatarHash) {\n                    return 'https://www.gravatar.com/avatar/' + gravatarHash + '?s=60&amp;r=pg&d=' + gravatarDefault;\n                } else {\n                    return noUserPic;\n                }\n            case 'silhouette':\n            case 'mysteryman':\n            default:\n                return noUserPic;\n        }\n    }\n\n    render() {\n        const avatarUrl = this.getAvatarUrl(this.props.user)\n        return (\n            <img\n                src={avatarUrl}\n                style={{ width: this.props.size }}\n            />\n        )\n    }\n\n}\n\nexport default Avatar","export interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONResponse {\n    id: string\n    version: string\n    result: any\n    error: any\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null;\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: ServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    callFunc(func: string, param: any): Promise<JSONResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Request error: ' + response.status + ', ' + response.statusText)\n                }\n                return <unknown>response.json() as JSONResponse\n            })\n    }\n}\n\n","import { ServiceClientParams, ServiceClient, AuthorizedServiceClient } from \"./serviceClient\";\n\nexport interface User {\n    username: string,\n    realname: string,\n    thumbnail: string\n}\n\nexport type OrganizationSetting = {\n    settings: {\n        lastVisitedAt: Date | null\n    }\n}\n\nexport type OrganizationsSettings = {\n    orgSettings: any //Map<string, OrganizationSetting>\n}\n\nexport interface UserProfile {\n    user: User,\n    profile: {\n        synced: {\n            gravatarHash: string\n        }\n        userdata: {\n            jobTitle: string,\n            jobTitleOther: string,\n            organization: string\n            city: string\n            state: string\n            country: string\n            avatarOption: string\n            gravatarDefault: string\n        }\n        metadata: {\n            createdBy: string\n            created: string\n        }\n        plugins: {\n            organizations?: OrganizationsSettings\n        }\n    }\n}\n\n// Note that we are only supporting updating of the orgs plugin settings, \n// so make this strict-ish.\nexport interface UserProfileUpdate {\n    user: User,\n    profile: {\n        plugins: {\n            organizations: OrganizationsSettings\n        }\n    }\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\n\nexport interface UserProfileClientParams extends ServiceClientParams {\n}\n\nexport class UserProfileClient extends AuthorizedServiceClient {\n    static module: string = 'UserProfile'\n    static profileCache: Map<string, UserProfile> = new Map()\n\n    constructor(params: UserProfileClientParams) {\n        super(params)\n    }\n\n    // makePayload(method: string, param: any): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: [param]\n    //     }\n    // }\n\n    // makeEmptyPayload(method: string): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: []\n    //     }\n    // }\n\n    getVersion(): Promise<any> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makeEmptyPayload('version'))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    async getUserProfile(username: string): Promise<UserProfile> {\n        if (UserProfileClient.profileCache.has(username)) {\n            return Promise.resolve(UserProfileClient.profileCache.get(username)!)\n        }\n\n        return this.callFunc('get_user_profile', [username])\n            .then((result) => {\n                return result.result[0][0] as UserProfile\n            })\n    }\n\n    async updateUserProfile(update: UserProfileUpdate): Promise<void> {\n        // TODO: update user profile cache here...\n        UserProfileClient.profileCache.delete(update.user.username)\n        return this.callFunc('update_user_profile', { profile: update })\n            .then(() => {\n                return\n            })\n    }\n\n    // async setUserProfile(username: string, profile: UserProfile): Promise<void> {\n    //     // TODO: update user profile cache here...\n    //     this.callFunc('update_user_profile', profile)\n    // }\n\n    async getUserProfiles(usernames: Array<string>): Promise<Array<UserProfile>> {\n        return this.callFunc('get_user_profile', usernames)\n            .then((result) => {\n                return result.result[0] as Array<UserProfile>\n            })\n    }\n\n    async getAllUsers(): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: '' })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n\n    async searchUsers(query: string): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: query })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n}","import { UserProfileClient, UserProfile } from '../apis/userProfile'\n\n\nexport type Username = string\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\n\nfunction profileToUser(profile: UserProfile): User {\n    let jobTitle\n    if (!profile.profile.userdata) {\n        return {\n            username: profile.user.username,\n            realname: profile.user.realname,\n            city: null,\n            state: null,\n            country: null,\n            title: null,\n            organization: null,\n            avatarOption: null,\n            gravatarHash: null,\n            gravatarDefault: null\n        }\n    }\n    if (profile.profile.userdata.jobTitle === 'Other') {\n        jobTitle = profile.profile.userdata.jobTitleOther\n    } else {\n        jobTitle = profile.profile.userdata.jobTitle\n    }\n\n    return {\n        username: profile.user.username,\n        realname: profile.user.realname,\n        city: profile.profile.userdata.city,\n        state: profile.profile.userdata.state,\n        country: profile.profile.userdata.country,\n        title: jobTitle,\n        organization: profile.profile.userdata.organization,\n        avatarOption: profile.profile.userdata.avatarOption,\n        gravatarHash: profile.profile.synced.gravatarHash,\n        gravatarDefault: profile.profile.userdata.gravatarDefault\n    }\n}\n\nexport interface UserQuery {\n    query: string\n    excludedUsers: Array<string>\n}\n\nexport interface BriefUser {\n    username: string\n    realname: string\n}\n\n\n\n\ninterface UserModelParams {\n    userProfileServiceURL: string\n    token: string\n}\n\nexport class UserModel {\n\n    params: UserModelParams\n    userProfileClient: UserProfileClient\n\n    cache: Map<Username, User>\n\n    constructor(params: UserModelParams) {\n        this.params = params\n        this.userProfileClient = new UserProfileClient({\n            url: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map<Username, User>()\n    }\n\n    async getUser(username: Username): Promise<User> {\n        if (this.cache.has(username)) {\n            return this.cache.get(username)!\n        }\n\n        const userProfile = await this.userProfileClient.getUserProfile(username)\n        const user = profileToUser(userProfile)\n        this.cache.set(username, user)\n        return user\n    }\n\n    async getUsers(usernames: Array<Username>): Promise<Map<Username, User>> {\n        const result: Map<Username, User> = new Map()\n\n        const toFetch: Array<Username> = []\n\n        usernames.forEach((username) => {\n            if (this.cache.has(username)) {\n                result.set(username, this.cache.get(username)!)\n            } else {\n                toFetch.push(username)\n            }\n        })\n\n        const userProfiles = await this.userProfileClient.getUserProfiles(toFetch)\n        const users = userProfiles.map((profile) => {\n            return profileToUser(profile)\n        })\n\n        userProfiles.forEach((userProfile) => {\n            const user = profileToUser(userProfile)\n            this.cache.set(user.username, user)\n            result.set(user.username, user)\n        })\n\n        return result\n    }\n\n    async searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n        const users = await this.userProfileClient.searchUsers(query.query)\n        return users\n            .filter(({ username }) => {\n                return (query.excludedUsers.indexOf(username) === -1)\n            })\n            .map(({ username, realname }) => {\n                return {\n                    username, realname\n                }\n            })\n    }\n\n    // searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.searchUsers(query.query)\n    //         .then((users) => {\n    //             return users\n    //                 .filter(({ username }) => {\n    //                     return (query.excludedUsers.indexOf(username) === -1)\n    //                 })\n    //                 .map(({ username, realname }) => {\n    //                     return {\n    //                         username, realname\n    //                     }\n    //                 })\n\n    //         })\n    // }\n\n    // getUser(username: string): Promise<User> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.getUserProfile(username)\n    //         .then((userProfile) => {\n    //             return this.profileToUser(userProfile)\n    //         })\n    // }\n}","export interface GenericClientParams {\n    url: string\n    module: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface ErrorResult {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport type JSONRPCResponse = [any, ErrorResult | null]\n\nexport class GenericClient {\n    url: string;\n    token: string | null\n    module: string\n\n    constructor({ url, token, module }: GenericClientParams) {\n        this.url = url\n        this.token = token || null\n        this.module = module\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: param\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse(response: Response): Promise<JSONRPCResponse> {\n        if (response.status === 200) {\n            const { result, error } = await response.json()\n            if (result) {\n                return [result, null]\n            } else {\n                return [null, error]\n            }\n\n        } else if (response.status === 204) {\n            return [null, null]\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                return [null, error]\n            } else {\n                const text = await response.text()\n                return [null, {\n                    code: 0,\n                    name: 'Internal Server Error (for real)',\n                    message: 'The service experienced an internal error',\n                    error: text\n                }]\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                return this.processResponse(response)\n            })\n    }\n}\n\nexport class AuthorizedGenericClient extends GenericClient {\n    token: string;\n\n    constructor(params: GenericClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        return this.processResponse(response)\n    }\n}\n\n","import { AuthorizedServiceClient, ServiceClientParams } from './serviceClient'\n\n// types from module\n\nexport interface Service {\n    module_name: string\n    version: string | null\n}\n\nexport interface ServiceStatus {\n    module_name: string\n    version: string\n    git_commit_hash: string\n    release_tags: Array<string>\n    hash: string\n    url: string\n    up: number // aka boolean\n    status: string\n    health: string\n}\n\n// impl\n\nexport interface ServiceWizardClientParams extends ServiceClientParams {\n\n}\n\nexport interface GetServiceStatusParams extends Service { }\n\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\nexport class ServiceWizardClient extends AuthorizedServiceClient {\n\n    static module: string = 'ServiceWizard'\n\n    constructor(params: ServiceWizardClientParams) {\n        super(params)\n    }\n\n\n    getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        return this.callFunc('get_service_status', params)\n            .then((result) => {\n                if (result.result &&\n                    result.result.length > 0) {\n                    const theResult = result.result[0]\n                    if (!theResult) {\n                        throw new Error('Crazy at it seems, no result')\n                    }\n                    return theResult as GetServiceStatusResult\n                } else {\n                    throw new Error('Crazy at it seems, no result')\n                }\n            })\n    }\n\n}","import Bluebird from 'bluebird'\nimport { AuthorizedServiceClient } from './serviceClient'\n\nimport { ServiceWizardClient } from './serviceWizard'\nimport { GenericClient, AuthorizedGenericClient } from './genericClient'\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Bluebird<T>\n\nexport interface CacheParams {\n    itemLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n}\n\nexport interface CacheItem<T> {\n    id: string\n    value: T | null\n    createdAt: number\n    fetcher: () => Bluebird<T>\n    reserved: boolean\n}\n\nexport class Cache<T> {\n\n    cache: Map<string, CacheItem<T>>\n    cacheLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n    isMonitoring: boolean\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>()\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        window.setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item)\n                    cacheRenewed = true\n                }\n            });\n            this.cache = newCache\n            this.isMonitoring = false\n            if (cacheRenewed) {\n                this.runMonitor()\n            }\n        }, this.monitoringFrequency)\n    }\n\n    isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return (elapsed > this.cacheLifetime);\n    }\n\n    isReserved(cacheItem: any) {\n        return cacheItem.reserved;\n    }\n\n    getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null\n        }\n        const cached = this.cache.get(id)\n        if (this.isExpired(cached)) {\n            this.cache.delete(id)\n            return;\n        }\n        return cached;\n    }\n\n    reserveWaiter(item: CacheItem<T>): Bluebird<CacheItem<T>> {\n        return new Bluebird<CacheItem<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const waiting = true;\n\n            const waiter = () => {\n                if (!waiting) {\n                    return;\n                }\n                window.setTimeout(() => {\n                    if (this.cache.has(item.id)) {\n                        // If on a wait-loop cycle we discover that the\n                        // cache item has been deleted, we volunteer\n                        // to attempt to fetch it ourselves.\n                        // The only case now for this is a cancellation\n                        // of the first request to any dynamic service,\n                        // which may cancel the initial service wizard\n                        // call rather than the service call.\n                        return this.reserveAndFetch({\n                            id: item.id,\n                            fetcher: item.fetcher\n                        })\n                            .then(() => {\n                                // resolve(result);\n                                // we resolve with the cache item just\n                                // as if we had waited for it.\n                                resolve(this.cache.get(item.id))\n                            })\n                            .catch((err: Error) => {\n                                reject(err);\n                            });\n                    }\n                    if (!item.reserved) {\n                        resolve(item);\n                    } else {\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed > this.waiterTimeout) {\n                            this.cache.delete(item.id)\n                            reject(new Error(\n                                'Timed-out waiting for cache item to become available; timeout '\n                                + this.waiterTimeout + ', waited ' + elapsed));\n                        } else {\n                            waiter();\n                        }\n                    }\n                }, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    reserveAndFetch({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        // now, reserve it.\n        this.reserveItem(id, fetcher)\n\n        // and then fetch it.\n        const fetchPromise = fetcher()\n            .then((result: any) => {\n                this.setItem(id, result, fetcher)\n                return result\n            })\n            .finally(() => {\n                // If the fetch was cancelled, we need to remove\n                // the reserved item. This should signal any queued waiters\n                // to spawn their own fetch.\n                if (fetchPromise.isCancelled()) {\n                    this.cache.get(id)\n                }\n            });\n        return fetchPromise;\n    }\n\n    getItemWithWait({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        const cached = this.cache.get(id)\n        if (cached) {\n            if (this.isExpired(cached)) {\n                this.cache.delete(id)\n            } else if (this.isReserved(cached)) {\n                return this.reserveWaiter(cached)\n                    .then((cached) => {\n                        return cached.value;\n                    });\n            } else {\n                return Bluebird.resolve(cached.value)\n            }\n        }\n\n        return this.reserveAndFetch({ id, fetcher });\n    }\n\n    reserveItem(id: string, fetcher: () => Bluebird<T>) {\n        this.cache.set(id, {\n            id: id,\n            createdAt: new Date().getTime(),\n            reserved: true,\n            value: null,\n            fetcher: fetcher\n        });\n    }\n\n    setItem(id: string, value: T, fetcher: () => Bluebird<T>) {\n        if (this.cache.has(id)) {\n            const item = this.cache.get(id)\n            if (item && item.reserved) {\n                item.reserved = false\n                item.value = value\n                item.fetcher = fetcher\n            } else {\n                // overwriting? should we allow this?\n                this.cache.set(id, {\n                    id: id,\n                    createdAt: new Date().getTime(),\n                    fetcher: fetcher,\n                    reserved: false,\n                    value: value\n                })\n            }\n        } else {\n            this.cache.set(id, {\n                id: id,\n                createdAt: new Date().getTime(),\n                fetcher: fetcher,\n                reserved: false,\n                value: value\n            })\n        }\n        this.runMonitor();\n    }\n}\nvar moduleCache = new Cache<any>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n})\n\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams {\n    token: string\n    url: string\n    version?: string\n    timeout?: number\n    rpcContext?: any\n}\n\nexport class DynamicServiceClient {\n    token: string\n    timeout: number\n    rpcContext: any\n    url: string\n    version: string | null\n\n    static module: string\n\n    constructor({ token, url, version, timeout, rpcContext }: DynamicServiceClientParams) {\n        // Establish an auth object which has properties token and user_id.\n        this.token = token;\n        this.timeout = timeout || 10000;\n        this.rpcContext = rpcContext || null;\n\n        if (!url) {\n            throw new Error('The service discovery url was not provided');\n        }\n        this.url = url;\n\n        this.version = version || null;\n        if (version === 'auto') {\n            this.version = null;\n        }\n    }\n\n    options() {\n        return {\n            timeout: this.timeout,\n            authorization: this.token,\n            rpcContext: this.rpcContext\n        };\n    }\n\n    getModule() {\n        return (<typeof DynamicServiceClient>this.constructor).module\n    }\n\n    moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.getModule() + ':auto';\n        } else {\n            moduleId = this.getModule() + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    getCached(fetcher: () => Bluebird<any>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    lookupModule() {\n        return this.getCached((): Bluebird<any> => {\n            const func = 'get_service_status';\n            const params = [{\n                module_name: this.getModule(),\n                version: this.version\n            }];\n            // NB: pass null for numRets (number of return values) so we get the\n            // full return structure.\n            const client = new ServiceWizardClient({\n                url: this.url,\n                token: this.token\n            })\n\n            return Bluebird.resolve(\n                client.getServiceStatus({\n                    module_name: this.getModule(),\n                    version: this.version\n                })\n            )\n        })\n    }\n\n    callFunc(funcName: string, params: any) {\n        return this.lookupModule()\n            .then((serviceStatus) => {\n                const client = new AuthorizedGenericClient({\n                    module: serviceStatus.module_name,\n                    url: serviceStatus.url,\n                    token: this.token\n                })\n                return Bluebird.resolve(\n                    client.callFunc(funcName, params)\n                )\n            })\n            .catch((err) => {\n                console.error('ERROR: ' + err.name + \" = \" + err.message, err)\n                throw err\n            })\n    }\n}\n","// import { AuthorizedServiceClient, ServiceClientParams, JSONPayload } from './serviceClient'\n\nimport { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nimport { RawObjectInfo, RawWorkspaceInfo, WorkspaceInfo, ObjectInfo, workspaceInfoToObject, objectInfoToObject } from './workspaceUtils'\n\nexport interface NarrativeServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface ListNarrativesParams {\n    type: string\n}\n\ntype Metadata = {}\n\n/* Information about an object, including user provided metadata.\n\n       obj_id objid - the numerical id of the object.\n       obj_name name - the name of the object.\n       type_string type - the type of the object.\n       timestamp save_date - the save date of the object.\n       obj_ver ver - the version of the object.\n       username saved_by - the user that saved or copied the object.\n       ws_id wsid - the workspace containing the object.\n       ws_name workspace - the workspace containing the object.\n       string chsum - the md5 checksum of the object.\n       int size - the size of the object in bytes.\n       usermeta meta - arbitrary user-supplied metadata about\n           the object.\n   */\n\n\n\n\nexport interface ListNarrativesResponseResult {\n    narratives: Array<{\n        ws: RawWorkspaceInfo\n        nar: RawObjectInfo\n    }>\n}\n\nexport interface ServiceResponse<T> {\n    id: string\n    version: string\n    result?: [T] | null\n    error?: any\n}\n\n\n\n// export type ListNarrativesResponse = ServiceResponse<ListNarrativesResponseResult>\n\n\n\nexport class NarrativeServiceClient extends DynamicServiceClient {\n\n    static module: string = 'NarrativeService'\n\n    constructor(params: NarrativeServiceClientParams) {\n        super(params)\n    }\n\n\n    async listNarratives(type: string): Promise<ListNarrativesResponseResult> {\n        // note usage of unknown below -- Bluebird and native Promise!\n        const [result, error] = await this.callFunc('list_narratives', [{\n            type: type\n        }])\n        // as Promise<ServiceResponse<ListNarrativesResponseResult>>\n\n        // should check id and version, or should call func do that?\n        if (result && result[0]) {\n            return result[0]\n            // return result[0].narratives.map((nar) => {\n            //     return {\n            //         workspaceInfo: workspaceInfoToObject(nar.ws),\n            //         objectInfo: objectInfoToObject(nar.nar)\n            //     }\n            // })\n        } else {\n            // TODO: handle error\n            // console.error('Result is missing', id, version, result, error)\n            throw new Error('Result is missing!')\n        }\n    }\n\n}","import { AuthorizedGenericClient } from '../apis/genericClient'\nimport { NarrativeServiceClient } from '../apis/narrativeService'\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport * as workspaceApi from '../apis/workspaceUtils'\nimport * as userModel from './user'\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport type NarrativeID = number\n\nexport type WorkspaceID = number\nexport type ObjectID = number\n\nexport enum NarrativeAccess {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport interface NarrativeBase {\n    workspaceId: WorkspaceID,\n    access: NarrativeAccess\n}\n\nexport interface InaccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.NONE\n}\n\nexport interface AccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n    isPublic: boolean\n    objectId: ObjectID\n    title: string\n    // description?: string\n    owner: userModel.Username\n    // creator: userModel.Username\n    // createdAt: Date\n    lastSavedAt: Date\n    lastSavedBy: userModel.Username\n}\n\nexport type Narrative = AccessibleNarrative | InaccessibleNarrative\n\n// export interface OrganizationNarrativex {\n//     workspaceId: WorkspaceID\n//     objectId: ObjectID\n//     title: string\n//     status: NarrativeState\n//     // inOrganization: boolean\n//     // createdAt: Date\n//     owner: userModel.Username\n//     modifiedAt: Date\n// }\n\nexport interface OrganizationNarrative {\n    status: NarrativeState\n    narrative: AccessibleNarrative\n}\n\nexport interface NarrativeWorkspaceInfo extends workspaceApi.WorkspaceInfo {\n    metadata: {\n        narrative_nice_name: string\n        narrative: string\n        is_temporary: string\n    }\n}\n// export interface GetOwnNarrativesResult {\n//     workspaceInfo: WorkspaceInfo\n//     objectInfo: ObjectInfo\n// }\n\nexport enum Sort {\n    TITLE = 'TITLE',\n    LAST_SAVED = 'LAST_SAVED'\n}\n\ninterface NarrativeModelParams {\n    workspaceServiceURL: string\n    serviceWizardURL: string\n    groupsServiceURL: string\n    username: string\n    token: string\n}\n\nexport class NarrativeModel {\n\n    params: NarrativeModelParams\n\n    constructor(params: NarrativeModelParams) {\n        this.params = params\n    }\n\n    // Narratives\n\n    async getOwnNarratives(organizationId: string): Promise<Array<OrganizationNarrative>> {\n        const narrativeServiceClient = new NarrativeServiceClient({\n            url: this.params.serviceWizardURL,\n            token: this.params.token,\n            timeout: 10000,\n        })\n\n        const groupsClient = new orgModel.OrganizationModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const [narrativesResult, organization, pendingRequests] = await Promise.all([\n            narrativeServiceClient.listNarratives('mine'),\n            groupsClient.getOrg(organizationId),\n            requestClient.getPendingRequestsForOrg(organizationId)\n        ])\n\n        if (organization.kind === orgModel.OrganizationKind.INACCESSIBLE_PRIVATE) {\n            throw new Error('Cannot get own narratives for private inaccessible organization')\n        }\n\n        const workspacesInOrg = organization.narratives.map((narrative) => {\n            return narrative.workspaceId\n        })\n\n        return narrativesResult.narratives\n            .map((nar) => {\n                return {\n                    workspaceInfo: <unknown>workspaceApi.workspaceInfoToObject(nar.ws) as NarrativeWorkspaceInfo,\n                    objectInfo: workspaceApi.objectInfoToObject(nar.nar)\n                }\n            })\n            .filter((nar) => {\n                return (nar.workspaceInfo.metadata.is_temporary === 'false')\n            })\n            .map((narrative) => {\n                let status: NarrativeState\n\n                if (workspacesInOrg.indexOf(narrative.workspaceInfo.id) !== -1) {\n                    status = NarrativeState.ASSOCIATED\n                } else if (pendingRequests.find((request) => {\n                    // TODO: these requests should have already been converted to \n                    // model-friendly requests (typed!)\n                    return (request.resourceType === requestModel.RequestResourceType.WORKSPACE &&\n                        request.narrativeId === String(narrative.workspaceInfo.id))\n                })) {\n                    status = NarrativeState.REQUESTED\n                } else {\n                    status = NarrativeState.NONE\n                }\n                return {\n                    status: status,\n                    narrative: {\n                        access: NarrativeAccess.OWNER,\n                        isPublic: narrative.workspaceInfo.globalReadPermission,\n                        workspaceId: narrative.workspaceInfo.id,\n                        objectId: narrative.objectInfo.id,\n                        title: narrative.workspaceInfo.metadata.narrative_nice_name,\n                        owner: narrative.workspaceInfo.owner,\n                        lastSavedAt: narrative.objectInfo.savedAt,\n                        lastSavedBy: narrative.objectInfo.savedBy\n                    } as AccessibleNarrative\n\n                }\n            })\n            .sort((a, b) => {\n                return (a.narrative.title.localeCompare(b.narrative.title))\n            })\n    }\n\n    // async workspaceToNarrative(workspaceId: WorkspaceID): Promise<orgModel.NarrativeResource | null> {\n    //     const workspaceClient = new AuthorizedGenericClient({\n    //         module: 'Workspace',\n    //         url: this.params.workspaceServiceURL,\n    //         token: this.params.token\n    //     })\n    //     try {\n    //         const [[[rawObjectInfo], rawObjectInfoError], [[rawWorkspaceInfo], rawWorkspaceInfoError]] = await Promise.all([\n    //             workspaceClient.callFunc('get_object_info3', [{\n    //                 objects: [{\n    //                     wsid: workspaceId,\n    //                     // TODO: fix this!!\n    //                     objid: 1\n    //                 }],\n    //                 includeMetadata: 1,\n    //                 ignoreErrors: 0\n    //             }]),\n    //             workspaceClient.callFunc('get_workspace_info', [{\n    //                 id: workspaceId\n    //             }])\n    //         ])\n\n    //         if (rawObjectInfoError || rawWorkspaceInfoError) {\n    //             // console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n    //             return null\n    //         }\n\n    //         const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n    //         return {\n    //             workspaceId: workspaceInfo.id,\n    //             title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n    //             permission: orgModel.userPermissionToWorkspacePermission(workspaceInfo.userPermission, workspaceInfo.owner === this.params.username),\n    //             isPublic: workspaceInfo.globalReadPermission\n    //         }\n\n    //     } catch (ex) {\n    //         // assume it is an inaccessible workspace\n    //         // console.warn('narrative not accessible', ex)\n    //         return null\n    //     }\n    // }\n\n    getSorter(sort: Sort) {\n        switch (sort) {\n            case Sort.TITLE:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return a.narrative.title.localeCompare(b.narrative.title)\n                }\n            case Sort.LAST_SAVED:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return b.narrative.lastSavedAt.getTime() - a.narrative.lastSavedAt.getTime()\n                }\n            default:\n                throw new Error('invalid sort spec')\n        }\n    }\n\n    // sortNarratives(narratives: Array<AccessibleNarrative>, sort: Sort): Array<AccessibleNarrative> {\n    //     let sorter = this.getSorter(sort)\n\n    //     return narratives.sort(sorter)\n    // }\n\n    sortOrganizationNarratives(narratives: Array<OrganizationNarrative>, sort: Sort): Array<OrganizationNarrative> {\n        let sorter = this.getSorter(sort)\n\n        return narratives.sort(sorter).slice(0)\n    }\n\n    /*\n    getNarrative fetches the requested narrative and returns a Narrative object if found \n    and null otherwise. Note that this ignores the narrative state vis-a-vis any organization.\n    It also caches narratives.\n    */\n    async getNarrative(workspaceId: WorkspaceID): Promise<Narrative> {\n        const workspaceClient = new AuthorizedGenericClient({\n            module: 'Workspace',\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n        try {\n            const [rawWorkspaceInfo, rawWorkspaceInfoError] = await workspaceClient.callFunc('get_workspace_info', [{\n                id: workspaceId\n            }])\n\n\n            if (rawWorkspaceInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo[0]) as NarrativeWorkspaceInfo\n\n            const narrativeId = workspaceInfo.metadata.narrative\n            if (!narrativeId) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n            const objectId = parseInt(narrativeId, 10)\n\n            const [rawObjectInfo, rawObjectInfoError] = await workspaceClient.callFunc('get_object_info3', [{\n                objects: [{\n                    wsid: workspaceId,\n                    objid: objectId\n                }],\n                includeMetadata: 1,\n                ignoreErrors: 0\n            }])\n\n            if (rawObjectInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const objectInfo: workspaceApi.ObjectInfo = workspaceApi.objectInfoToObject(rawObjectInfo[0].infos[0])\n\n            let access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n            switch (workspaceInfo.userPermission) {\n                case 'n':\n                    if (workspaceInfo.globalReadPermission) {\n                        access = NarrativeAccess.VIEW\n                        break\n                    } else {\n                        throw new Error('Cannot have no access and no global read permission!')\n                    }\n                case 'r':\n                    access = NarrativeAccess.VIEW\n                    break\n                case 'w':\n                    access = NarrativeAccess.EDIT\n                    break\n                case 'a':\n                    if (workspaceInfo.owner === this.params.username) {\n                        access = NarrativeAccess.OWNER\n                    } else {\n                        access = NarrativeAccess.ADMIN\n                    }\n                    break\n                default:\n                    throw new Error('Unknown workspace permission: ' + workspaceInfo.userPermission)\n            }\n\n            return {\n                workspaceId: workspaceInfo.id,\n                access: access,\n                isPublic: workspaceInfo.globalReadPermission,\n                objectId: objectInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                owner: workspaceInfo.owner,\n                lastSavedAt: objectInfo.savedAt,\n                lastSavedBy: objectInfo.savedBy\n            }\n        } catch (ex) {\n            console.error('Error fetching narrative!', ex)\n            throw ex\n        }\n    }\n}\n","export type Metadata = {}\n\nexport type RawObjectInfo = [\n    number, // objid - object id\n    string, // name - object name\n    string, // type - object type\n    string, // save_date - iso8601 timestamp when last saved\n    number, // ver - object version\n    string, // saved_by - username who saved it last\n    number, // wsid - workspace id\n    string, // workspace - workspace name,\n    string, // chsum - checksum of the object\n    number, // size - size of the object (bytes)\n    Metadata   // meta - string to string object of stuff\n]\n\nexport type RawWorkspaceInfo = [\n    number, // id - workspace id\n    string, // workspace - workspace name\n    string, // owner - username who owns it\n    string, // moddate - iso8601 timestamp when last modified\n    number, // max_objid - last object id assigned to object in workspace\n    string, // user_permission - permission of user who made reqeust wrt workspace\n    string, // globalread - int bool whether this workspace is shared globally\n    string, // lockstat - status of the workspace lock\n    Metadata // metadata\n]\n\nexport interface WorkspaceInfo {\n    id: number\n    name: string\n    owner: string\n    modifiedAt: Date\n    objectCount: number\n    userPermission: string\n    globalReadPermission: boolean\n    lockStatus: string\n    metadata: Metadata\n}\n\nexport interface ObjectInfo {\n    id: number\n    name: string\n    type: {\n        module: string\n        name: string\n        majorVersion: number\n        minorVersion: number\n        id: string\n    }\n    version: number\n    savedAt: Date\n    savedBy: string\n    workspaceId: number\n    workspaceName: string\n    checksum: string\n    size: number\n    ref: string\n    metadata: Metadata\n}\n\nfunction iso8601ToDate(dateString: string) {\n    const isoRE = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)([\\+\\-])(\\d\\d)(:?[\\:]*)(\\d\\d)/;\n    const dateParts = isoRE.exec(dateString);\n    if (!dateParts) {\n        throw new TypeError('Invalid Date Format for ' + dateString);\n    }\n    // This is why we do this -- JS insists on the colon in the tz offset.\n    const offset = dateParts[7] + dateParts[8] + ':' + dateParts[10];\n    const newDateString = dateParts[1] + '-' + dateParts[2] + '-' + dateParts[3] + 'T' + dateParts[4] + ':' + dateParts[5] + ':' + dateParts[6] + offset;\n    return new Date(newDateString);\n}\n\nexport function workspaceInfoToObject(wsInfo: RawWorkspaceInfo): WorkspaceInfo {\n    return {\n        id: wsInfo[0],\n        name: wsInfo[1],\n        owner: wsInfo[2],\n        modifiedAt: iso8601ToDate(wsInfo[3]),\n        objectCount: wsInfo[4],\n        userPermission: wsInfo[5],\n        globalReadPermission: wsInfo[6] === 'r' ? true : false,\n        lockStatus: wsInfo[7],\n        metadata: wsInfo[8]\n    }\n}\n\nexport function objectInfoToObject(data: RawObjectInfo): ObjectInfo {\n    const type = data[2].split(/[-.]/)\n\n    return {\n        id: data[0],\n        name: data[1],\n        // type: data[2],\n        type: {\n            id: data[2],\n            module: type[0],\n            name: type[1],\n            majorVersion: parseInt(type[2], 10),\n            minorVersion: parseInt(type[3], 10)\n        },\n        savedAt: iso8601ToDate(data[3]),\n        version: data[4],\n        savedBy: data[5],\n        workspaceId: data[6],\n        workspaceName: data[7],\n        checksum: data[8],\n        size: data[9],\n        metadata: data[10],\n        ref: data[6] + '/' + data[0] + '/' + data[4]\n    }\n}\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as userModel from '../../data/models/user'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { AppError, StoreState } from '../../types'\n\nexport interface EntityAction extends Action {\n}\n\nexport interface UserLoader extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER,\n    userId: userModel.Username\n}\n\nexport interface UserLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_START\n}\n\nexport interface UserLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n    user: userModel.User\n}\n\nexport interface UserLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function userLoaderStart(): UserLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_START\n    }\n}\n\nexport function userLoaderSuccess(user: userModel.User): UserLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n        user: user\n    }\n}\n\nexport function userLoaderError(error: AppError): UserLoaderError {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function userLoader(userId: userModel.Username) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await model.getUser(userId)\n            dispatch(userLoaderSuccess(user))\n        } catch (ex) {\n            dispatch(userLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport interface OrganizationLoader extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface OrganizationLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n}\n\nexport interface OrganizationLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n}\n\nexport interface OrganizationLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function organizationLoaderStart(): OrganizationLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n    }\n}\n\nexport function organizationLoaderSuccess(organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization): OrganizationLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function organizationLoaderError(error: AppError): OrganizationLoaderError {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function organizationLoader(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(organizationLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const organization = await model.getOrg(organizationId)\n            dispatch(organizationLoaderSuccess(organization))\n        } catch (ex) {\n            dispatch(organizationLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Narratives\n\nexport interface LoadNarrative {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD\n}\n\ninterface LoadNarrativeStart {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n}\n\nexport interface LoadNarrativeSuccess {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS\n    narrative: narrativeModel.Narrative\n}\n\ninterface LoadNarrativeError {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadNarrative(workspaceId: narrativeModel.WorkspaceID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(<LoadNarrativeStart>{\n            type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            workspaceServiceURL: config.services.Workspace.url,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url\n        })\n\n        try {\n            const narrative = await narrativeClient.getNarrative(workspaceId)\n            dispatch(<LoadNarrativeSuccess>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS,\n                narrative: narrative\n            })\n        } catch (ex) {\n            dispatch(<LoadNarrativeError>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'invalid state',\n                    message: 'Cannot access a Narrative for an inaccessible Organization'\n                }))\n                return\n            }\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n\n","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Owner from './Owner'\n\ninterface LoaderProps {\n    username: orgModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    showAvatar: boolean\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    times: number\n    constructor(props: LoaderProps) {\n        super(props)\n        this.times = 0\n    }\n\n    render() {\n        this.times += 1;\n        if (this.props.user) {\n            return (\n                <Owner user={this.props.user} avatarSize={this.props.avatarSize} showAvatar={this.props.showAvatar} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading owner...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    username: orgModel.Username\n    avatarSize: number\n    showAvatar: boolean\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","export function niceElapsed(someDate: Date, absoluteAfter?: number, compactDate: boolean = true) {\n    const nowDate = new Date()\n\n    const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n    const elapsedAbs = Math.abs(elapsed);\n\n    let measure, measureAbs, unit;\n    const maxDays = absoluteAfter || 90\n    if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n        if (elapsedAbs === 0) {\n            return 'now';\n        } else if (elapsedAbs < 60) {\n            measure = elapsed;\n            measureAbs = elapsedAbs;\n            unit = 'second';\n        } else if (elapsedAbs < 60 * 60) {\n            measure = Math.round(elapsed / 60);\n            measureAbs = Math.round(elapsedAbs / 60);\n            unit = 'minute';\n        } else if (elapsedAbs < 60 * 60 * 24) {\n            measure = Math.round(elapsed / 3600);\n            measureAbs = Math.round(elapsedAbs / 3600);\n            unit = 'hour';\n        } else {\n            measure = Math.round(elapsed / (3600 * 24));\n            measureAbs = Math.round(elapsedAbs / (3600 * 24));\n            unit = 'day';\n        }\n\n        if (measureAbs > 1) {\n            unit += 's';\n        }\n\n        let prefix = null;\n        let suffix = null;\n        if (measure < 0) {\n            prefix = 'in';\n        } else if (measure > 0) {\n            suffix = 'ago';\n        }\n\n        return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n    } else {\n        // otherwise show the actual date, with or without the year.\n        if (compactDate && nowDate.getFullYear() === someDate.getFullYear()) {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric'\n            }).format(someDate)\n        } else {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            }).format(someDate)\n        }\n    }\n}","import * as React from 'react'\nimport { niceElapsed } from '../lib/time'\nimport { Tooltip } from 'antd';\n\nexport interface NiceElapsedTimeProps {\n    time: Date\n    showTooltip?: boolean\n    tooltipPrefix?: string\n}\n\ninterface NiceElapsedTimeState {\n}\n\nexport default class NiceElapsedTime extends React.Component<NiceElapsedTimeProps, NiceElapsedTimeState> {\n    constructor(props: NiceElapsedTimeProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.showTooltip === false) {\n            return (\n                <span>\n                    {niceElapsed(this.props.time, 30)}\n                </span>\n            )\n        }\n\n        const fullDate = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        timeZoneName: 'short'\n                    }).format(this.props.time)\n                }\n            </span>\n        )\n        let tooltip\n        if (this.props.tooltipPrefix) {\n            tooltip = (\n                <span>\n                    {this.props.tooltipPrefix}\n                    {fullDate}\n                </span>\n            )\n        } else {\n            tooltip = fullDate\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(this.props.time, 30)}\n            </Tooltip>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from './OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal } from 'antd'\nimport Owner from './entities/OwnerContainer'\nimport { ComponentView } from '../types'\nimport './BriefOrganization.css'\nimport NiceElapsedTime from './NiceElapsedTime';\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganization-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganization-statusRow\">\n                    <div className=\"BriefOrganization-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganization-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganization-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-freshnessRow\">\n                    <div className=\"BriefOrganization-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganization-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganization-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-researchInterests BriefOrganization-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganization-orgOwner BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} key={org.owner.username} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                {this.renderMemberRow(org)}\n                {this.renderNarrativeRow(org)}\n                {this.renderModifiedRow(org)}\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganization-body\">\n                    {/* <div className=\"BriefOrganization-freshnessCol\">\n                        {this.renderFreshness(org)}\n                    </div> */}\n                    <div className=\"BriefOrganization-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganization-infoCol\">\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                <div className=\"BriefOrganization-orgName BriefOrganization-infoTableRow\">\n                                    <NavLink to={`/viewOrganization/${org.id}`}>\n                                        {org.name}\n                                    </NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganization-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react';\nimport './component.css';\nimport { Alert, Button } from 'antd';\nimport * as orgModel from '../../../../data/models/organization/model'\nimport BriefOrganization from '../../../BriefOrganization';\n\n// TODO: need more ergonomic way to resolve the common issue of data types interfering with \n// component types.\n\nexport interface OrganizationsProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\nexport interface OrganizationsState {\n    searchTerms: Array<string>\n}\n\nexport class Organizations extends React.Component<OrganizationsProps, OrganizationsState> {\n    constructor(props: OrganizationsProps) {\n        super(props)\n\n        this.state = {\n            searchTerms: []\n        }\n    }\n\n    renderAdminInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderNoOrgs() {\n        const browseButton = (\n            <Button size=\"small\" type=\"default\">browse</Button>\n        )\n        const createButton = (\n            <Button size=\"small\" type=\"default\">create</Button>\n        )\n        const message = (\n            <div>\n                <p>\n                    You neither own nor are a member of any Organizations, so there is nothing to show you here.\n                </p>\n                <p>\n                    You may use the <b>Create Organization</b> button on the upper right to\n                    create your own Organization, or use the <b>All Orgs</b> filter on the right\n                    to browse and search all public Organizations.\n                </p>\n                {/* <p>\n                    You can use the filter on the right to {browseButton} through existing public Organizations,\n                    or you may {createButton} your own Organization.\n                </p> */}\n            </div>\n        )\n        return (\n            <Alert type=\"warning\"\n                style={{ maxWidth: '50em', margin: '20px auto 0 auto' }}\n                message={message} />\n        )\n    }\n\n    renderOrgs() {\n        if (this.props.organizations.length > 0) {\n            return (\n                this.props.organizations.map((organization, index) => {\n                    const status = this.props.openRequests.get(organization.id) || null\n                    return (\n                        <div key={String(index)} className=\"simpleCard\">\n                            <BriefOrganization organization={organization} openRequestsStatus={status} />\n                        </div>\n                    )\n                })\n            )\n        } else {\n            return this.renderNoOrgs()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Organizations\">\n                <div style={{ overflowY: 'auto', display: 'flex', flexDirection: 'column' }}>\n                    {this.renderOrgs()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Organizations;","import { Organizations, OrganizationsProps } from './component';\nimport { StoreState } from '../../../../types';\nimport { connect } from 'react-redux';\n\nexport function mapStateToProps(state: StoreState): OrganizationsProps {\n    // TODO: wow, should not do this here\n    if (state.views.browseOrgsView.viewModel === null) {\n        throw new Error('view not ready')\n    }\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: { organizations, openRequests }\n            }\n        }\n    } = state;\n\n    // associate the last visited by id with the org.\n    // const updatedOrgs = organizations.map((org: BriefOrganization) => {\n    //     const lastVisitedAt = lastVisitedAtById.get(org.id) || null\n    //     if (lastVisitedAt && lastVisitedAt.lastVisitedAt) {\n    //         return {\n    //             organization: org,\n    //             lastVisitedAt: lastVisitedAt.lastVisitedAt\n    //         }\n    //     } else {\n    //         return {\n    //             organization: org,\n    //             lastVisitedAt: null\n    //         }\n    //     }\n    // })\n\n    return {\n        organizations, openRequests\n    }\n}\n\nexport default connect(mapStateToProps)(Organizations);","import * as React from 'react'\nimport Organizations from './organizations/container'\nimport { SortDirection, AppError } from '../../../types'\nimport { Button, Icon, Radio, Select, Modal, Alert, Checkbox } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group'\nimport { Filter } from '../../../data/models/organization/model'\nimport MainMenu from '../../menu/component'\nimport { NavLink } from 'react-router-dom'\nimport './component.css'\n\nexport interface OrganizationsBrowserProps {\n    totalCount: number;\n    filteredCount: number;\n    sortBy: string;\n    filter: Filter;\n    searching: boolean;\n    error: AppError | null;\n    onSearchOrgs: (searchTerms: Array<string>) => void;\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void;\n    onFilterOrgs: (filter: Filter) => void;\n}\n\nexport interface OrganizationsBrowserState {\n    searchInput: string\n    filterByRoleType: string\n    filterByRole: Array<CheckboxValueType>\n    filterByPrivacy: string\n    showAdvancedControls: boolean\n    // filterByPrivacyType: Array<CheckboxValueType>\n}\n\nclass OrganizationsBrowser extends React.Component<OrganizationsBrowserProps, OrganizationsBrowserState> {\n    searchInput: React.RefObject<HTMLInputElement>;\n    searchButton: React.RefObject<Button>;\n    filterByRoleValues: Array<any>\n\n    constructor(props: OrganizationsBrowserProps) {\n        super(props)\n\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.filterByRoleValues = [\n            {\n                label: 'Member',\n                value: 'member'\n            },\n            {\n                label: 'Admin',\n                value: 'admin'\n            },\n            {\n                label: 'Owner',\n                value: 'owner'\n            }\n        ]\n\n        this.state = {\n            searchInput: '',\n            filterByRoleType: 'myorgs',\n            filterByRole: [],\n            filterByPrivacy: 'any',\n            showAdvancedControls: false\n        }\n    }\n\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    componentDidMount() {\n        this.props.onSearchOrgs([])\n    }\n\n    doSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        const searchTerms = this.searchInput.current.value.split(/[\\s+]/)\n        // dispatch the search event\n        this.props.onSearchOrgs(searchTerms);\n    }\n\n    haveSearchInput() {\n        if (this.state.searchInput && this.state.searchInput.length > 0) {\n            return true\n        }\n        return false\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.setState({ searchInput: currentSearchInputValue })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.doSearch()\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'owner':\n                this.props.onSortOrgs('owner', SortDirection.ASCENDING)\n                break\n            case 'name':\n                this.props.onSortOrgs('name', SortDirection.ASCENDING)\n                break\n            case 'recentlyAdded':\n                this.props.onSortOrgs('created', SortDirection.DESCENDING)\n                break\n            case 'recentlyChanged':\n                this.props.onSortOrgs('changed', SortDirection.DESCENDING)\n                break\n            case 'memberCount':\n                this.props.onSortOrgs('memberCount', SortDirection.DESCENDING)\n                break\n            case 'narrativeCount':\n                this.props.onSortOrgs('narrativeCount', SortDirection.DESCENDING)\n                break\n        }\n    }\n\n    onSortDirectionChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(this.props.sortBy, e.target.value)\n    }\n\n    onFilterByRoleTypeChange(e: RadioChangeEvent) {\n        let newFilter: Filter\n        this.setState({ filterByRoleType: e.target.value })\n        if (e.target.value === 'select') {\n            this.setState({ filterByRole: [] })\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value\n            }\n        } else {\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value,\n                roles: []\n            }\n            this.setState({ filterByRole: [] })\n        }\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByRoleChange(checkedValues: CheckboxValueType[]) {\n        let newFilter: Filter\n        this.setState({ filterByRole: checkedValues })\n        if (checkedValues.length === 0) {\n            this.setState({ filterByRoleType: 'myorgs' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'myorgs',\n                roles: checkedValues\n            } as Filter\n        } else {\n            this.setState({ filterByRoleType: 'select' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'select',\n                roles: checkedValues\n            } as Filter\n        }\n\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByPrivacyChange(e: RadioChangeEvent) {\n        this.setState({ filterByPrivacy: e.target.value })\n        const newFilter = {\n            ...this.props.filter,\n            privacy: e.target.value\n        } as Filter\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onClearSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        this.searchInput.current.value = ''\n        this.onSearchInputChange()\n        this.doSearch()\n    }\n\n    renderSearchFeedback() {\n        if (this.props.totalCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    None available\n                </div>\n            )\n        }\n        if (this.props.filteredCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    Ø\n                    /\n                    {this.props.totalCount}\n                    {' '}\n                    orgs\n                </div>\n            )\n\n        }\n        if (this.props.totalCount === this.props.filteredCount) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    <b>{this.props.totalCount}</b>\n                    {' '}\n                    orgs\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationsBrowser-searchFeedback\">\n                <b>{this.props.filteredCount}</b>\n                /\n                {this.props.totalCount}\n                {' '}\n                orgs\n            </div>\n        )\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchForm() {\n        return (\n            <form id=\"searchForm\" className=\"OrganizationsBrowser-searchBar\" onSubmit={this.onSubmit.bind(this)}>\n                <input\n                    className=\"OrganizationsBrowser-searchInput\"\n                    placeholder=\"Search Organizations\"\n                    onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                    ref={this.searchInput}></input>\n                <Button\n                    disabled={!this.haveSearchInput()}\n                    ref={this.searchButton}\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n                <Button\n                    onClick={this.onClearSearch.bind(this)}\n                    disabled={!this.haveSearchInput()}\n                    icon=\"close\"\n                >\n                </Button>\n                {this.renderSearchFeedback()}\n            </form>\n        )\n    }\n\n    renderSearchBar() {\n        return (\n            <div className=\"OrganizationsBrowser-searchBarRow\">\n                <div className=\"OrganizationsBrowser-searchBarCol1\">\n                    {this.renderSearchForm()}\n                </div>\n                <div className=\"OrganizationsBrowser-searchBarCol2\">\n                    <NavLink to=\"/newOrganization\"><Button type=\"primary\" icon=\"plus-circle\" style={{ marginRight: '10px' }}>Create Organization</Button></NavLink>\n\n                </div>\n                {/* <div className=\"OrganizationsBrowser-searchBarCol3\">\n                </div> */}\n            </div>\n        )\n    }\n\n    renderSortByControl() {\n        return (\n            <Select\n                onChange={this.onSortByChange.bind(this)}\n                defaultValue={this.props.sortBy}\n                dropdownMatchSelectWidth={true}\n                style={{ width: '10em' }}>\n                <Select.Option value=\"recentlyChanged\" key=\"changed\">Date Changed</Select.Option>\n                <Select.Option value=\"recentlyAdded\" key=\"recent\">Date Established</Select.Option>\n                <Select.Option value=\"name\" key=\"name\">Org Name</Select.Option>\n                <Select.Option value=\"memberCount\" key=\"memberCount\"># members</Select.Option>\n                <Select.Option value=\"narrativeCount\" key=\"narrativeCount\"># narratives</Select.Option>\n            </Select>\n        )\n    }\n\n    onToggleAdvanced() {\n        // When switching back to basic filter mode, we need to ensure that advanced \n        // filtering is removed.\n        if (this.state.showAdvancedControls) {\n            this.setState({ showAdvancedControls: false })\n            let { roleType, roles, privacy } = this.props.filter\n            if (!['myorgs', 'all'].includes(roleType)) {\n                roleType = 'myorgs'\n                this.setState({ filterByRoleType: 'myorgs' })\n            }\n            this.setState({ filterByRole: [], filterByPrivacy: 'any' })\n            roles = []\n            privacy = 'any'\n            this.props.onFilterOrgs({\n                roleType, roles, privacy\n            })\n        } else {\n            this.setState({ showAdvancedControls: true })\n        }\n    }\n\n    renderAdvancedToggle() {\n        if (this.state.showAdvancedControls) {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover-pressed\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        } else {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        }\n    }\n\n    renderFilterByRole() {\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px'\n        }\n        if (this.state.showAdvancedControls) {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                        <Radio value=\"notmyorgs\" style={radioStyle}>Not My Orgs</Radio>\n                        <Radio value=\"select\" style={radioStyle}>Specific Role</Radio>\n                    </Radio.Group>\n\n                    <Checkbox.Group\n                        options={this.filterByRoleValues}\n                        value={this.state.filterByRole}\n                        className=\"OrganizationsBrowser-checkboxGroup\"\n                        onChange={this.onFilterByRoleChange.bind(this)} />\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                    </Radio.Group>\n                </React.Fragment>\n            )\n        }\n    }\n\n    renderFilterByPrivacy() {\n        if (!this.state.showAdvancedControls) {\n            return\n        }\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n            margin: '0px'\n        }\n        return (\n            <React.Fragment>\n                <Radio.Group\n                    onChange={this.onFilterByPrivacyChange.bind(this)}\n                    value={this.state.filterByPrivacy}>\n                    <Radio value=\"any\" style={radioStyle}>Any</Radio>\n                    <Radio value=\"public\" style={radioStyle}>Visible</Radio>\n                    <Radio value=\"private\" style={radioStyle}>Hidden</Radio>\n                </Radio.Group>\n            </React.Fragment>\n        )\n    }\n\n    renderOrganizations() {\n        if (this.props.error) {\n            return (\n                <Alert\n                    type=\"error\"\n                    message={this.props.error.code}\n                    description={this.props.error.message} />\n            )\n        } else {\n            return (\n                <Organizations />\n            )\n        }\n    }\n\n    renderFilterColumn() {\n        return (\n            <React.Fragment>\n                <div className=\"field-label\">sort by</div>\n                {this.renderSortByControl()}\n\n                <div className=\"field-label\" style={{ marginTop: '10px' }}>filter</div>\n\n                {this.renderFilterByRole()}\n\n                {this.state.showAdvancedControls ? (\n                    <div className=\"field-label\" style={{ marginTop: '10px' }}>visibility</div>\n                ) : (null)}\n                {this.renderFilterByPrivacy()}\n\n                <div style={{ marginTop: '20px', textAlign: 'center' }}>\n                    <hr style={{ border: 0, borderTop: '1px solid rgba(200, 200, 200, 0.4)', width: '80%' }} />\n                    <a href=\"https://docs.google.com/document/d/1xRpFjD3pqPIrHBjNDGht3hX-3y6A0eQRr_v51A5j2hk\" target=\"_blank\">FAQ</a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationsBrowser scrollable-flex-column\">\n                {this.renderSearchBar()}\n                <div className=\"OrganizationsBrowser-bodyRow\">\n                    <div className=\"OrganizationsBrowser-bodyCol scrollable-flex-column\">\n                        {this.renderOrganizations()}\n                    </div>\n                    <div className=\"OrganizationsBrowser-filterCol\">\n                        {this.renderFilterColumn()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationsBrowser","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, SortDirection, BrowseOrgsViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\n\nexport interface Load extends Action<ActionFlag.BROWSE_ORGS_LOAD> {\n    type: ActionFlag.BROWSE_ORGS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.BROWSE_ORGS_LOAD_START> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.BROWSE_ORGS_LOAD_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS\n    defaultViewModel: BrowseOrgsViewModel\n}\n\nexport interface LoadError extends Action<ActionFlag.BROWSE_ORGS_LOAD_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.BROWSE_ORGS_UNLOAD> {\n    type: ActionFlag.BROWSE_ORGS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_START\n    }\n}\n\nfunction loadSuccess(defaultViewModel: BrowseOrgsViewModel): LoadSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS,\n        defaultViewModel: defaultViewModel\n    }\n}\n\nfunction loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.BROWSE_ORGS_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface SortOrgs extends Action<ActionFlag.BROWSE_ORGS_SORT> {\n    type: ActionFlag.BROWSE_ORGS_SORT,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SORT_START> {\n    type: ActionFlag.BROWSE_ORGS_SORT_START,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SORT_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SORT_SUCCESS\n}\n\nexport interface SortOrgsError extends Action<ActionFlag.BROWSE_ORGS_SORT_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SORT_ERROR,\n    error: AppError\n}\n\n\nexport function sortOrgsStart(sortField: string, sortDirection: SortDirection): SortOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SORT_START,\n        sortField: sortField,\n        sortDirection: sortDirection\n    }\n}\n\n// SEARCHING\n\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\n// Called upon the start of a search call\n// Sets the ui state to enable a spinner\n// and also search query data to be reflected in the ui\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\nexport interface SearchOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SEARCH_START> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_START\n}\n\n// Called upon successful completion of a search\n// Sets the organizations found\nexport interface SearchOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS\n    organizations: Array<orgModel.BriefOrganization>\n    totalCount: number\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\n// Called upon a search error\n// Sets error state\nexport interface SearchOrgsError extends Action<ActionFlag.BROWSE_ORGS_SEARCH_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR\n    error: AppError\n}\n\n\n// searchTerms: Array<string>\nfunction searchOrgsStart(): SearchOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_START\n    }\n}\n\nfunction searchOrgsSuccess(organizations: Array<orgModel.BriefOrganization>, totalCount: number, openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>): SearchOrgsSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n        organizations: organizations,\n        totalCount: totalCount,\n        openRequests: openRequests\n    }\n}\n\nfunction searchOrgsError(error: AppError): SearchOrgsError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n        error: error\n    }\n}\n\n// FILTER \n\n// Filter orgs\nexport interface FilterOrgs extends Action<ActionFlag.BROWSE_ORGS_FILTER> {\n    type: ActionFlag.BROWSE_ORGS_FILTER,\n    filter: string\n}\n\nexport interface FilterOrgsStart extends Action<ActionFlag.BROWSE_ORGS_FILTER_START> {\n    type: ActionFlag.BROWSE_ORGS_FILTER_START,\n    filter: orgModel.Filter\n}\n\n\nexport function filterOrgsStart(filter: orgModel.Filter): FilterOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_FILTER_START,\n        filter: filter\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        const defaultSearchTerms: Array<string> = []\n        const defaultSortField = 'changed'\n        const defaultSortDirection = SortDirection.DESCENDING\n        const defaultFilter = { roleType: 'myorgs', roles: [], privacy: 'any' }\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: defaultSearchTerms,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                username\n            })\n\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            // dispatch(searchOrgsSuccess(organizations, total, openRequests))\n            // populate default browse orgs props\n            const defaultViewModel: BrowseOrgsViewModel = {\n                rawOrganizations: organizations,\n                organizations: organizations,\n                openRequests: openRequests,\n                totalCount: total,\n                filteredCount: organizations.length,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                searchTerms: defaultSearchTerms,\n                selectedOrganizationId: null,\n                searching: false,\n                error: null\n            }\n            // done!\n            dispatch(loadSuccess(defaultViewModel))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// TODO: proper typing here \nexport function searchOrgs(searchTerms: Array<string>) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchOrgsStart())\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { sortField, sortDirection, filter } } = browseOrgsView\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: searchTerms,\n                sortField, sortDirection, filter, username\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function sortOrgs(sortField: string, sortDirection: SortDirection) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sortOrgsStart(sortField, sortDirection))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, filter } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function filterOrgs(filter: orgModel.Filter) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(filterOrgsStart(filter))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, sortField, sortDirection } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n","import OrganizationsBrowser from './component'\nimport { StoreState, SortDirection, AppError } from '../../../types'\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as orgModel from '../../../data/models/organization/model'\n//\n// Typing for the mapState and mapDispatch\n//\n\nexport interface OwnProps {\n    sortBy: string\n}\nexport interface LinkStateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    filter: orgModel.Filter\n    searching: boolean,\n    error: AppError | null\n}\n\nexport interface LinkDispatchProps {\n    onSearchOrgs: (searchTerms: Array<string>) => void,\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void,\n    onFilterOrgs: (filter: orgModel.Filter) => void\n}\n\n// note second arg is the component props, but we don't have any component props to merge in.\nexport function mapStateToProps(storeState: StoreState): LinkStateProps {\n    if (!storeState.views.browseOrgsView.viewModel) {\n        throw new Error('No view model!')\n    }\n\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: {\n                    organizations, openRequests, error,\n                    totalCount, filteredCount, filter, searching }\n            }\n        }\n    } = storeState\n\n    return {\n        organizations,\n        openRequests,\n        totalCount,\n        filteredCount,\n        filter,\n        error,\n        searching: searching\n    }\n\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.SearchOrgs | actions.SortOrgs | actions.FilterOrgs>): LinkDispatchProps {\n    return {\n        onSearchOrgs: (searchTerms: Array<string>) => {\n            // TODO proper typing here\n            dispatch(actions.searchOrgs(searchTerms) as any)\n        },\n        onSortOrgs: (sortBy: string, sortDirection: SortDirection) => {\n            // TODO proper typing here\n            dispatch(actions.sortOrgs(sortBy, sortDirection) as any)\n        },\n        onFilterOrgs: (filter: orgModel.Filter) => {\n            dispatch(actions.filterOrgs(filter) as any)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationsBrowser)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, BrowseOrgsView } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: BrowseOrgsView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organizations...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container sortBy=\"recentlyChanged\" />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Spin, Alert } from 'antd';\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: BrowseOrgsView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.browseOrgsView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","export default abstract class DebouncingProcess {\n\n    delay: number\n    canceled: boolean\n    timer: number | null\n\n    constructor({ delay }: { delay: number }) {\n        this.delay = delay\n        this.canceled = false\n        this.timer = null\n    }\n\n    abstract async task(): Promise<void>\n\n    start() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(async () => {\n            if (!this.canceled) {\n                try {\n                    // TODO: left off here. we need to be able to deny\n                    // the consequence of the check if we have canceled...\n                    // so inside the fun\n                    await this.task()\n                } catch (ex) {\n                    console.warn('debouncing process exception: ' + ex.message)\n                }\n            } else {\n                this.canceled = false;\n            }\n            this.timer = null;\n        }, this.delay)\n    }\n\n    cancel() {\n        if (this.timer) {\n            this.canceled = true;\n        }\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, EditState, ValidationState, SyncState, ValidationErrorType } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport Validation from '../../data/models/organization/validation'\nimport DebouncingProcess from '../../lib/DebouncingProcess'\n\n// ACTIONS\n\nexport interface Save extends Action<ActionFlag.ADD_ORG_SAVE> {\n    type: ActionFlag.ADD_ORG_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.ADD_ORG_SAVE_START> {\n    type: ActionFlag.ADD_ORG_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.ADD_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface SaveError extends Action<ActionFlag.ADD_ORG_SAVE_ERROR> {\n    type: ActionFlag.ADD_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Editing\n\nexport interface Load extends Action<ActionFlag.ADD_ORG_LOAD> {\n    type: ActionFlag.ADD_ORG_LOAD;\n}\n\nexport interface LoadStart {\n    type: ActionFlag.ADD_ORG_LOAD_START\n}\n\nexport interface LoadSuccess {\n    type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n    newOrganization: EditableOrganization\n}\n\nexport interface LoadError {\n    type: ActionFlag.ADD_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload {\n    type: ActionFlag.ADD_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface AddOrgEvaluate extends Action<ActionFlag.ADD_ORG_EVALUATE> {\n    type: ActionFlag.ADD_ORG_EVALUATE\n}\n\nexport interface AddOrgEvaluateOK extends Action<ActionFlag.ADD_ORG_EVALUATE_OK> {\n    type: ActionFlag.ADD_ORG_EVALUATE_OK\n}\n\nexport interface AddOrgEvaluateErrors extends Action<ActionFlag.ADD_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n}\n\n// Updating name field\n\nexport interface UpdateName extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME\n    name: string\n}\n\nexport interface UpdateNameSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS\n    name: string\n}\n\nexport interface UpdateNameError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL\n    name: string\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating id Field\n\nexport interface UpdateId extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID,\n    id: string\n}\n\nexport interface UpdateIdSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n    id: string\n}\n\nexport interface UpdateIdError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n    id: string,\n    error: ValidationState\n}\n\nexport interface UpdateIdPass extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n    id: string\n}\n\n// Updating description field\n\nexport interface UpdateDescription extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface UpdateDescriptionSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface UpdateDescriptionError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\n// Update is private field\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\nexport function saveStart(): SaveStart {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_START\n    }\n}\n\nexport function saveSuccess(org: orgModel.Organization): SaveSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n        organization: org\n    }\n}\n\nexport function saveError(error: AppError): SaveError {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Editing\n\nfunction loadStart() {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_START\n    }\n}\n\nfunction loadSuccess(newOrganization: EditableOrganization) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n        newOrganization: newOrganization\n    }\n}\n\nfunction loadError(error: AppError) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.ADD_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function addOrgEvaluateOk(): AddOrgEvaluateOK {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_OK\n    }\n}\n\nexport function AddOrgEvaluateErrors(): AddOrgEvaluateErrors {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Update Name\n\nexport function updateNameSuccess(name: string): UpdateNameSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function updateNameError(name: string, error: ValidationState): UpdateNameError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\nexport function updateIdSuccess(id: string): UpdateIdSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n        id: id\n    }\n}\n\nexport function updateIdPass(id: string): UpdateIdPass {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n        id: id\n    }\n}\n\n// Update Logo URL Hash\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Home URL Hash\n\nexport function updateHomeUrlSuccess(logoUrl: string | null): UpdateHomeUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n        homeUrl: logoUrl\n    }\n}\n\nexport function updateHomeUrlError(logoUrl: string | null, error: ValidationState): UpdateHomeUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n        homeUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Id\n\nexport function updateIdError(id: string, error: ValidationState): UpdateIdError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n        id: id,\n        error: error\n    }\n}\n\nexport function updateDescriptionSuccess(description: string): UpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function updateDescriptionError(description: string, error: ValidationState): UpdateDescriptionError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const newOrg: EditableOrganization = {\n            id: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgId('')[1]\n            },\n            name: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgName('')[1]\n            },\n            logoUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgLogoUrl('')[1]\n            },\n            homeUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgHomeUrl('')[1]\n            },\n            researchInterests: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgResearchInterests('')[1]\n            },\n            description: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgDescription('')[1]\n            },\n            isPrivate: {\n                value: false,\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            }\n        }\n        dispatch(loadSuccess(newOrg))\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function addOrg() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n\n        // This check is to satisfy TS. Since viewModel is nullable, it has no way \n        // of knowing that our app flow ensures that it is populated.\n        // In terms of generalized usage of the redux store, though, there is no\n        // way to ensure this! So we really should perform our state checks before \n        // handling any event\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        // TODO: other validations!!!\n\n        dispatch(saveStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                addOrgView: { viewModel: { newOrganization } },\n            },\n            app: { config }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!newOrganization) {\n            dispatch(saveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        orgClient.addOrg(newOrganization, username)\n            .then((org: orgModel.Organization) => {\n                dispatch(saveSuccess(org))\n            })\n            .catch((error) => {\n                console.error('error adding', newOrganization, error)\n\n                // note that we dispatch an AppError compliant object,\n                // which wraps the original exception object.\n                dispatch(saveError({\n                    code: error.code || error.name,\n                    message: error.message,\n                    exception: error\n                }))\n            })\n    }\n}\n\nexport function addOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: {\n                    viewModel: { editState, newOrganization } }\n            }\n        } = state\n\n        if (!newOrganization) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.id.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: quick hack to allow unmodified fields to evaluate to true.\n\n        if (newOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(addOrgEvaluateOk())\n    }\n}\n\nfunction orgModelFromState(state: StoreState) {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config } } = state\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url\n    })\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateNameError(validatedName, error))\n        } else {\n            dispatch(updateNameSuccess(validatedName))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(name: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateLogoUrlError(validatedLogoUrl, error))\n        } else {\n            dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkHomeUrlProcess: DebouncingProcess\n\nclass CheckIfHomeUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    constructor({ delay, dispatch, url }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n    }\n\n    async task(): Promise<void> {\n        try {\n            const result = await fetch(this.url, {\n                method: 'HEAD',\n                // mode: 'no-cors'\n            })\n            if (this.canceled) {\n                return\n            }\n            let isError = false\n            if (result.status === 404) {\n                this.dispatch(updateHomeUrlError(this.url, {\n                    type: ValidationErrorType.ERROR,\n                    validatedAt: new Date(),\n                    message: 'This home url does not exist'\n                }))\n                isError = true\n            } else if (result.status !== 200) {\n                this.dispatch(updateHomeUrlError(this.url, {\n                    type: ValidationErrorType.ERROR,\n                    validatedAt: new Date(),\n                    message: 'This home url responded with a ' + result.status + ' code'\n                }))\n                isError = true\n            } else {\n                const contentType = result.headers.get('Content-Type')\n                if (contentType === null ||\n                    !/^text\\/html$\\//.test(contentType)) {\n                    this.dispatch(updateHomeUrlError(this.url, {\n                        type: ValidationErrorType.ERROR,\n                        validatedAt: new Date(),\n                        message: 'This home url does not not appear to be html'\n                    }))\n                    isError = true\n                }\n            }\n            if (!isError) {\n                this.dispatch(updateHomeUrlSuccess(this.url))\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateHomeUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking for home url'\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: homeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n            return\n\n        }\n\n        // initial success, but the check may invalidate it.\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n            homeUrl: validatedHomeUrl\n        })\n\n        dispatch(addOrgEvaluate())\n\n        // if (validatedHomeUrl !== null) {\n\n        //     checkHomeUrlProcess = new CheckIfHomeUrlExistsProcess({\n        //         delay: 100,\n        //         url: validatedHomeUrl,\n        //         dispatch: dispatch\n        //     })\n\n        //     checkHomeUrlProcess.start()\n        // }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            }) as UpdateResearchInterestsSuccess\n        }\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // no validation for now ... what is there to validate?\n\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate\n        })\n        dispatch(addOrgEvaluate())\n    }\n}\n\nclass Debouncer {\n\n    delay: number\n    fun: () => void\n    canceled: boolean\n    timer: number | null\n\n    constructor(delay: number, fun: () => void) {\n        this.delay = delay\n        this.fun = fun\n        this.canceled = false\n        this.timer = null\n        this.startWaiting()\n    }\n\n    startWaiting() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(() => {\n            this.fun()\n        }, this.delay)\n    }\n\n    cancel() {\n        this.canceled = true\n    }\n}\n\nlet activeDebouncer: Debouncer | null = null\n\n\n\nclass CheckIfExistsProcess extends DebouncingProcess {\n    model: orgModel.OrganizationModel\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    id: string\n    constructor({ delay, model, dispatch, id }: { delay: number, model: orgModel.OrganizationModel, dispatch: ThunkDispatch<StoreState, void, Action>, id: string }) {\n        super({ delay })\n\n        this.model = model\n        this.dispatch = dispatch\n        this.id = id\n    }\n\n    async task(): Promise<void> {\n        try {\n            const exists = await this.model.orgExists(this.id)\n            if (this.canceled) {\n                return\n            }\n            if (exists) {\n                this.dispatch(updateIdError(this.id, {\n                    type: ValidationErrorType.ERROR,\n                    validatedAt: new Date(),\n                    message: 'This org id is already in use'\n                }))\n            } else {\n                this.dispatch(updateIdSuccess(this.id))\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateIdError(this.id, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking for org id existence'\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkIDProcess: DebouncingProcess\n\n/*\nupdateId\n\nHandles updating an org id update from the new organization form.\n\nThis action handles the normal field validation, but also requires a check\nthat the org id is not in use. This requires an api call to the groups \nservice, which introduces an indeterminate latency, and thus special handling.\n*/\n\nexport function updateId(id: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const [validatedId, error] = Validation.validateOrgId(id)\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        // this is an unusual action -- it is in intermediate \"success\" -- the field\n        // has passed the synchronous syntax validation, so we need to feed the value \n        // back to the form, but the eventual success occurs later.\n        dispatch(updateIdPass(id))\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        // For the id existence check, we want to ensure that we don't trip up the\n        // user experience. \n        // Think of the org id check as an async process.\n        // If that process is active when an update appears here, cancel it and proceed.\n        // Launch an existence check process which will initiate the check after some\n        // period of time (e.g. 100ms). This ensures that a fast typist will not trigger\n        // a sequence of existence checks. \n        // In that process, after the existence check, look to see if the process has\n        // been canceled (see step 1 above). If so, do not issue any redux events.\n        // Otherwise, issue the success or error events as appropriate.\n\n        const model = orgModelFromState(getState())\n        if (checkIDProcess) {\n            checkIDProcess.cancel()\n        }\n\n        checkIDProcess = new CheckIfExistsProcess({\n            delay: 100,\n            id: validatedId,\n            dispatch: dispatch,\n            model: model\n        })\n\n        checkIDProcess.start()\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const model = orgModelFromState(getState())\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(updateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}","import * as React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Marked } from 'marked-ts'\nimport { Button, Icon, Modal, Input, Checkbox, Tooltip, Collapse, Tabs } from 'antd'\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState, EditState,\n    AppError, Editable, ValidationErrorType, SyncState, EditableString, EditableNullableString, EditableBoolean\n} from '../../../types';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\nimport OrgLogo from '../../OrgLogo'\nimport TextArea from 'antd/lib/input/TextArea'\nimport './component.css'\n\nexport interface NewOrganizationProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    error: AppError | null,\n    newOrganization: EditableOrganization,\n    onSave: () => void,\n    onUpdateName: (name: string) => void,\n    onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport interface NewOrganizationState {\n    cancelToBrowser: boolean\n    showError: boolean\n}\n\nclass NewOrganization extends React.Component<NewOrganizationProps, NewOrganizationState> {\n    origin: string;\n\n    constructor(props: NewOrganizationProps) {\n        super(props)\n        this.state = {\n            cancelToBrowser: false,\n            showError: true\n        }\n        this.origin = document.location!.origin\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have entered information for this new organization.</p>\n\n                    <p>If you leave the editor without first saving, the new organization <i>will not be created</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateId(e.target.value)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.saveState === SaveState.NEW\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value &&\n            homeUrlField.validationState.type === ValidationErrorType.OK) {\n            const url = homeUrlField.value\n            const tooltipTitle = 'Try out your url by clicking this link'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle} >\n                        <a href={url} target=\"_blank\">\n                            <Icon type=\"link\" />\n                        </a>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Create Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"newOrganizationForm\" className=\"NewOrganization-editor  scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {this.renderEditorHeader()}\n                <div className=\"NewOrganization-body\">\n                    {this.renderNameRow(this.props.newOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.newOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.newOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.newOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.newOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.newOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.newOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"NewOrganization-row\">\n                        <div className=\"NewOrganization-col1\">\n                        </div>\n                        <div className=\"NewOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderLogo(org: EditableOrganization) {\n        return (\n            <OrgLogo logoUrl={null} size={64} organizationName={org.name.value} organizationId={org.id.value} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.newOrganization.name.value && this.props.newOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.newOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.newOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (!logoUrlField.value) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    toggleError() {\n        this.setState({ showError: !this.state.showError })\n    }\n\n    renderError() {\n        if (this.props.error && this.state.showError) {\n            const onOk = () => {\n                this.setState({ showError: false })\n            }\n            const onCancel = () => {\n                this.setState({ showError: false })\n            }\n            let trace\n            if (this.props.error.trace) {\n                trace = this.props.error.trace.map((line, index) => {\n                    return (\n                        <div key={\"line_\" + index}>{line}</div>\n                    )\n                })\n            }\n            if (trace) {\n                trace = (\n                    <div>\n                        <div>trace</div>\n                        {trace}\n                    </div>\n                )\n            }\n            return (\n                <Modal visible={true}\n                    title=\"Error\"\n                    okType=\"danger\"\n                    okText=\"Close\"\n                    cancelText=\"Clear Error\"\n                    onCancel={onCancel}\n                    onOk={onOk}>\n                    <div style={{ fontWeight: 'bold' }}>\n                        {this.props.error.code}\n                    </div>\n                    <div>\n                        {this.props.error.message}\n                    </div>\n                    {trace}\n                </Modal>\n            )\n        }\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"newOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button type=\"danger\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                <Icon type=\"close\" />{' '}Close\n            </Button>\n        )\n    }\n\n    renderMenuButtons() {\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <span className=\"ButtonSet-button\">\n                    <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n                </span>\n            )\n        }\n        return (\n            <div className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button type=\"default\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                        <Icon type=\"rollback\" />{' '}Back\n                    </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    {this.renderSaveButton()}\n                </span>\n                {errorButton}\n            </div>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        // TODO: this is just a prop for today.\n        if (this.props.saveState === SaveState.SAVED) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.newOrganization.id.value} />\n        }\n\n        return (\n            <div className=\"NewOrganization\">\n                <div style={{ minWidth: '50em', maxWidth: '100em', margin: '0 auto' }}>\n                    {this.renderEditor()}\n                </div>\n                {/* TODO: improve error display*/}\n                {this.renderError()}\n            </div>\n        )\n    }\n}\n\nexport default NewOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditState, SaveState, ValidationState, EditableOrganization, AppError } from '../../../types';\nimport {\n    addOrg, updateName, updateLogoUrl, updateId, updateDescription, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../redux/actions/addOrg';\n\nimport Component from './component';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n    error: AppError | null\n}\n\nexport interface DispatchProps {\n    onSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    onUpdateId: (id: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.addOrgView.viewModel) {\n        throw new Error('View model missing in state')\n    }\n    const {\n        views: {\n            addOrgView: {\n                viewModel: { editState, saveState, validationState, newOrganization, error }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        newOrganization,\n        error\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSave: () => {\n            dispatch(addOrg() as any)\n        },\n        onUpdateName: (name) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        onUpdateId: (id) => {\n            dispatch(updateId(id) as any)\n        },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { AppError, AddOrgView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\n\ninterface LoaderProps {\n    view: AddOrgView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading \"Add New Organization\" form...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case ComponentLoadingState.SUCCESS:\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// redux interface\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/addOrg'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.addOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.Load | actions.Unload>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as requestModel from './requests'\nimport * as orgModel from './organization/model'\nimport { RequestType } from '../../types';\n\nexport interface UberOrganization {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n    request: requestModel.UserRequest | null\n    invitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null\n}\n\ninterface UberModelParams {\n    token: string\n    username: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    workspaceServiceURL: string\n    serviceWizardURL: string\n}\n\nexport class UberModel {\n\n    params: UberModelParams\n\n    constructor(params: UberModelParams) {\n        this.params = params\n    }\n\n    async getOrganizationForUser(organizationId: string): Promise<UberOrganization> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        // get org\n        const organization = await orgClient.getOrg(organizationId)\n\n        // get pending requests\n        const request = await requestClient.getUserRequestForOrg(organizationId) as requestModel.UserRequest | null\n\n        const invitation = await requestClient.getUserInvitationForOrg(organizationId) as requestModel.UserInvitation | null\n\n        // we should probably just keep the request ids rather than try to keep the whole request\n        // and refactor the calls for the request events, which I just refactored (not much work) to use the \n        // whole request structure rather than just the id, to use the request id + the org id...\n        const relation = orgModel.determineRelation(organization, this.params.username, request, invitation)\n\n        let groupRequests\n        if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n        } else {\n            groupRequests = null\n        }\n\n        return {\n            organization, request, invitation, relation, groupRequests\n        }\n    }\n\n    // async getOrganizationsForUser(): Promise<Array<UberOrganization>> {\n    //     // const {\n    //     //     auth: { authorization: { token, username } },\n    //     //     app: { config }\n    //     // } = getState()\n\n    //     const orgClient = new orgModel.OrganizationModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const requestClient = new requestModel.RequestsModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const orgs = await orgClient.getOwnOrgs()\n\n    //     const requestOutbox = await requestClient.getOutboundRequests()\n    //     const requestInbox = await requestClient.getInboundRequests()\n\n    //     return await Promise.all(orgs.map(async (organization) => {\n    //         const request = requestOutbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.REQUEST &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserRequest\n\n    //         const invitation = requestInbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.INVITATION &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserInvitation\n\n    //         const relation = orgModel.determineRelation(organization, this.params.username, request || null, invitation)\n\n    //         let groupRequests\n    //         if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n    //             relation.type === orgModel.UserRelationToOrganization.OWNER) {\n    //             groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organization.id)\n    //         } else {\n    //             groupRequests = null\n    //         }\n\n    //         return {\n    //             organization, request, invitation, relation, groupRequests\n    //         }\n    //     }))\n    // }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AnError, makeError } from '../../lib/error';\nimport { StoreState } from '../../types';\n\nexport interface Load extends Action<ActionFlag.DATA_SERVICE_LOAD> {\n    type: ActionFlag.DATA_SERVICE_LOAD\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.DATA_SERVICE_LOAD_SUCCESS> {\n    type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n}\n\nexport interface LoadError extends Action<ActionFlag.DATA_SERVICE_LOAD_ERROR> {\n    type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n    error: AnError\n}\n\nfunction loadError(error: AnError) {\n    return {\n        type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_START\n        })\n\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n        } as LoadSuccess)\n\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // const userProfileClient = new userProfileModel.UserProfile({\n        //     token, username,\n        //     userProfileServiceURL: config.services.UserProfile.url\n        // })\n\n        // try {\n        //     const userProfile = await userProfileClient.getProfile(username)\n\n        //     dispatch({\n        //         type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS,\n        //         profile: userProfile\n        //     })\n        // } catch (ex) {\n        //     console.error('error', ex)\n        //     dispatch(loadError(makeError({\n        //         code: ex.name,\n        //         message: ex.name\n        //     })))\n        // }\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.DATA_SERVICE_UNLOAD\n    }\n}\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, UIError, UIErrorType, ViewOrgViewModelKind\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\nimport { loadNarrative } from './entities'\nimport * as dataServices from './dataServices'\nimport { AnError } from '../../lib/error';\nimport * as narrativeModel from '../../data/models/narrative'\n\n// Action Types\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD\n    organizationId: string\n}\n\nexport interface ReLoad extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_START\n}\n\nexport interface LoadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface ReloadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface LoadInaccessiblePrivateSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_UNLOAD\n}\n\n// Join Requests\n\nexport interface ViewOrgJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST\n    requestId: string\n}\n\nexport interface ViewOrgJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR\n    error: UIError\n}\n\n// Join Request cancellation\n\nexport interface ViewOrgCancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface ViewOrgCancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgCancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgCancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: UIError\n}\n\n// Join Invitation Acceptance\n\nexport interface AcceptJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION\n}\n\nexport interface AcceptJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n}\n\nexport interface AcceptJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface AcceptJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Join Invitation Denial\n\nexport interface RejectJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION\n}\n\nexport interface RejectJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n}\n\nexport interface RejectJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface RejectJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n\n// Delete Narrative\n\nexport interface RemoveNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE\n}\n\nexport interface RemoveNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n}\n\nexport interface RemoveNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    narrativeId: narrativeModel.NarrativeID\n}\n\nexport interface RemoveNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\n\nexport function removeNarrativeStart(): RemoveNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n    }\n}\n\nexport function removeNarrativeSuccess(narrativeId: narrativeModel.NarrativeID): RemoveNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n        narrativeId\n    }\n}\n\nexport function removeNarrativeError(error: AppError): RemoveNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function removeNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeNarrativeStart())\n\n        // TODO: need to restructure this view -- this is crazy\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel\n                }\n            }\n        }: StoreState = state\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const { organization } = viewModel\n\n        if (!organization) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const groupId = organization.id\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n\n        try {\n            await orgClient.removeNarrativeFromOrg(groupId, narrative.workspaceId)\n            dispatch(removeNarrativeSuccess(narrative.workspaceId))\n        } catch (ex) {\n            dispatch(removeNarrativeError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization, narratives: Array<orgModel.NarrativeResource>): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization,\n        narratives\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const viewModel = state.views.viewOrgView.viewModel\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'Not NORMAL org'\n            }))\n            return\n        }\n\n        const { organization, sortNarrativesBy, searchNarrativesBy } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n        } = state\n\n        const organizationId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(organizationId, resourceId)\n            // Getting a fresh copy of the org will trigger the view org component and\n            // all subcomponents with changed data to refresh. All we are intending here is that\n            // the narrative in the list of narratives provided by the groups api is updated, but\n            // there may be other elements of the group/org which have changed as well. So be it.\n\n            // TODO: just update the narrative, don't reprocess everything.\n\n\n            const org = await orgClient.getOrg(organizationId)\n\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'error',\n                    message: 'Not a NORMAL org'\n                }))\n                return\n            }\n\n            const narratives = org.narratives\n\n            const filteredNarratives = orgModel.queryNarratives(narratives, {\n                sortBy: sortNarrativesBy,\n                searchBy: searchNarrativesBy\n            })\n\n            dispatch(loadNarrative(narrative.workspaceId))\n            dispatch(accessNarrativeSuccess(org, filteredNarratives))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_START\n    }\n}\n\nexport function loadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): LoadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members\n    }\n}\n\nexport function reloadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): ReloadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(\n    organization: orgModel.InaccessiblePrivateOrganization,\n    relation: orgModel.Relation,\n    requestOutbox: Array<requestModel.Request>): LoadInaccessiblePrivateSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n        organization, relation,\n        requestOutbox\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\n// Join requests\n\nexport function viewOrgJoinRequestStart(): ViewOrgJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgJoinRequestSuccess(): ViewOrgJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgJoinRequestError(error: UIError): ViewOrgJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Join Request Cancellation\n\nexport function viewOrgCancelJoinRequestStart(): ViewOrgCancelJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgCancelJoinRequestSuccess(): ViewOrgCancelJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgCancelJoinRequestError(error: UIError): ViewOrgCancelJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Invitation Acceptance\n\nexport function acceptJoinInvitationStart(): AcceptJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n    }\n}\n\nexport function acceptJoinInvitationSuccess(): AcceptJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function acceptJoinInvitationError(error: AppError): AcceptJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Invitation Rejection \n\nexport function rejectJoinInvitationStart(): RejectJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n    }\n}\n\nexport function rejectJoinInvitationSuccess(): RejectJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function rejectJoinInvitationError(error: AppError): RejectJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Join invitation acceptance\n\n// TODO\n\n// Thunks\n\nexport function unload() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: { viewOrgView: { viewModel } }\n        } = getState()\n\n        if (!viewModel) {\n            throw new Error('view model not defined!?!')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (viewModel.organization.relation === orgModel.UserRelationToOrganization.MEMBER ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.OWNER) {\n            await orgClient.visitOrg({ organizationId: viewModel.organization.id })\n        }\n\n        dispatch(dataServices.load())\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_UNLOAD\n        })\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            let requestInbox: Array<requestModel.Request>\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n                requestInbox = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n                requestInbox = []\n            }\n\n\n            // const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: narrativesSortBy,\n                searchBy: ''\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: sortMembersBy,\n                searchBy: ''\n            })\n\n            dispatch(loadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function reload(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            // existing org view.\n            const state = getState()\n            const viewModel = state.views.viewOrgView.viewModel\n\n            if (!viewModel) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'No view model'\n                }))\n                return\n            }\n\n            if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                }))\n                return\n            }\n\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n            }\n\n            const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: viewModel.sortNarrativesBy,\n                searchBy: viewModel.searchNarrativesBy\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: viewModel.sortMembersBy,\n                searchBy: viewModel.searchMembersBy\n            })\n\n            dispatch(reloadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgJoinRequest() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        //TODO: could do a start here...\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel: { organization } }\n            }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.requestMembership(organization.id)\n            dispatch(viewOrgJoinRequestSuccess())\n            dispatch(load((organization.id)))\n        } catch (ex) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgCancelJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(viewOrgJoinRequestStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.cancelRequest(requestId)\n            dispatch(viewOrgCancelJoinRequestSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(viewOrgCancelJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.acceptJoinInvitation(requestId)\n            dispatch(acceptJoinInvitationSuccess())\n            // quick 'n easy\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(acceptJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport function rejectJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.rejectJoinInvitation(requestId)\n            dispatch(rejectJoinInvitationSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(rejectJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// SORT NARRATIVES\nexport interface SortNarratives {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES,\n    sortBy: string\n}\n\nexport interface SortNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n}\n\nexport interface SortNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    sortBy: string\n}\n\nexport interface SortNarrativesError {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function sortNarratives(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        // const sorted = orgModel.sortNarratives(narratives.slice(), sortBy)\n        // const sorted = narratives.slice().sort(sortByToComparator(sortBy))\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n            narratives: sorted,\n            sortBy\n        })\n\n    }\n}\n\n\n// SEARCH NARRATIVES\n\nexport interface SearchNarratives {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES,\n    searchBy: string\n}\n\nexport interface SearchtNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_START\n}\n\nexport interface SearchNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    searchBy: string\n}\n\nexport interface SearchNarrativesError {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function searchNarratives(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n            searchBy: searchBy,\n            narratives: sorted\n        })\n\n    }\n}\n\n\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as viewOrgActions from '../viewOrg'\n\n\nexport interface AcceptRequestAction<T> extends Action<T> {\n}\n\nexport interface AcceptRequest extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface AcceptRequestStart extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n}\n\nexport interface AcceptRequestSuccess extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n}\n\ninterface AcceptRequestError extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AcceptRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancellation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.acceptRequest(requestId)\n\n            // refetch the inbox\n            const inbox = await requestClient.getCombinedRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            })\n            dispatch(viewOrgActions.reload(request.organizationId))\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n        // or error\n    }\n}\n\n","import * as React from 'react'\nimport { NavLink, withRouter, Route } from 'react-router-dom'\nimport './Header.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\nexport interface HeaderProps {\n    breadcrumbs: JSX.Element\n    buttons?: JSX.Element\n    test?: string\n    // history: History.History\n}\n\ninterface HeaderState {\n    currentMenuItem: string\n}\n\ninterface MenuProps {\n    currentItem: string\n}\n// const TopMenu = withRouter<MenuProps>(({ history }) => {\n//         function doNavigate(key: string) {\n//             switch (key) {\n//                 case 'myorgs':\n//                     history.push('/dashboard')\n//                 case 'allorgs':\n//                     history.push('/organizations')\n//             }\n//         }\n//         return (\n//             <Menu\n//                 onClick={(e: ClickParam) => { doNavigate(e.key) }}\n//                 selectedKeys={[this.state.currentMenuItem]}\n//                 mode=\"horizontal\"\n//             >\n//                 <Menu.Item key=\"myorgs\">\n//                     My Organizations\n//                 </Menu.Item>\n//                 <Menu.Item key=\"allorgs\">\n//                     All Organizations\n//                 </Menu.Item>\n//             </Menu>\n//         )\n//     })\n// }\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n\n    constructor(props: HeaderProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n    // <FaChevronRight style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n    buildSeparator() {\n        if (this.props.breadcrumbs) {\n            return (\n                <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n            )\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"Header-contextual\">\n                    <div className=\"Header-userColumn\">\n                        <div className=\"Header-breadcrumbs\">\n                            {this.props.breadcrumbs}\n                        </div>\n                        <div className=\"Header-buttons\">\n                            {this.props.buttons}\n                        </div>\n                        {/* {this.props.children} */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport { AppError, StoreState, ViewOrgViewModelKind } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as uberModel from '../../../data/models/uber'\nimport { AnError, makeError } from '../../../lib/error'\nimport { reload as reloadOrg } from '../viewOrg'\n\n// LOADING\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR\n    error: AppError\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n        organization: organization,\n        relation: relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                }))\n                return\n            }\n            dispatch(loadSuccess(organization, relation))\n\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Promoting member to admin\n\nexport interface PromoteToAdmin extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n}\n\nexport interface PromoteToAdminSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n    error: AppError\n}\n\n\nexport function promoteToAdminStart(): PromoteToAdminStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n    }\n}\n\nexport function promoteToAdminSuccess(memberUsername: string): PromoteToAdminSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n        memberUsername\n    }\n}\n\nexport function promoteToAdminError(error: AppError): PromoteToAdminError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n        error: error\n    }\n}\n\nexport function promoteToAdmin(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(promoteToAdminStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.memberToAdmin(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(promoteToAdminSuccess(memberUsername))\n            })\n            .catch((err: Error) => {\n                dispatch(promoteToAdminError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Demote admin to member\n\nexport interface DemoteToMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n}\n\nexport interface DemoteToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n    error: AppError\n}\n\n\nexport function demoteToMemberStart(): DemoteToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n    }\n}\n\nexport function demoteToMemberSuccess(memberUsername: string): DemoteToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n        memberUsername: memberUsername\n    }\n}\n\nexport function demoteToMemberError(error: AppError): DemoteToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteToMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(demoteToMemberSuccess(memberUsername))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteToMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Remove a member\n\nexport interface RemoveMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    memberUsername: string\n}\n\ninterface RemoveMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n}\n\nexport interface RemoveMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    memberUsername: orgModel.Username\n}\n\ninterface RemoveMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n    error: AppError\n}\n\nfunction removeMemberStart(): RemoveMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n    }\n}\n\nfunction removeMemberSuccess(memberUsername: orgModel.Username): RemoveMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n        memberUsername\n    }\n}\n\nfunction removeMemberError(error: AppError): RemoveMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function removeMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.removeMember(viewModel.organization.id, memberUsername)\n            .then(() => {\n                // dispatch(removeMemberSuccess(memberUsername))\n                // dispatch(load(viewModel.organization.id))\n                dispatch(reloadOrg(viewModel.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(removeMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// SORT MEMBERS\n\nexport interface SortMembers {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS,\n    sortBy: string\n}\n\nexport interface SortMembersStart {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n}\n\nexport interface SortMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    sortBy: string\n}\n\nexport interface SortMembersError {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR\n    error: AnError\n}\n\n\n\nexport function sortMembers(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS,\n            members: sorted,\n            sortBy\n        })\n\n    }\n}\n\n// SEARCH MEMBERS\n\nexport interface SearchMembers {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS,\n    searchBy: string\n}\n\nexport interface SearchtMembersStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_START\n}\n\nexport interface SearchMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    searchBy: string\n}\n\nexport interface SearchMembersError {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_ERROR\n    error: AnError\n}\n\nexport function searchMembers(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n            searchBy: searchBy,\n            members: sorted\n        })\n\n    }\n}","import * as React from 'react'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon, Tooltip } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\n\nimport './Member.css'\nimport NiceElapsedTime from '../NiceElapsedTime';\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface MemberProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface MemberState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nclass Member extends React.Component<MemberProps, MemberState> {\n    constructor(props: MemberProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-COMPACT\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-NORMAL\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                    <div className=\"Member-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Member-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n}\n\nexport default Member","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Member from './Member'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Member member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading member...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.member.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Alert, Card, Menu, Icon, Dropdown, Modal, Input, Select } from 'antd'\nimport Member from '../../../../entities/MemberContainer'\nimport './component.css'\nimport { organizationLoader } from '../../../../../redux/actions/entities';\n\nexport interface MembersProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n    onPromoteMemberToAdmin: (username: string) => void\n    onRemoveMember: (username: string) => void\n    onDemoteAdminToMember: (username: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n    onReloadOrg: (id: string) => void\n}\n\ninterface MembersState {\n    confirmMemberRemoval: {\n        member: orgModel.Member\n    } | null\n}\n\nexport default class Members extends React.Component<MembersProps, MembersState> {\n    constructor(props: MembersProps) {\n        super(props)\n        this.state = {\n            confirmMemberRemoval: null\n        }\n    }\n\n    onConfirmRemoveMember(member: orgModel.Member) {\n        this.setState({\n            confirmMemberRemoval: {\n                member: member\n            }\n        })\n    }\n\n    renderConfirmMemberRemoval() {\n        if (!this.state.confirmMemberRemoval) {\n            return\n        }\n        const member = this.state.confirmMemberRemoval.member\n        const confirmed = (() => {\n            this.props.onRemoveMember(member.username)\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const canceled = (() => {\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const title = 'Confirm Removal of Member'\n        const content = (\n            <React.Fragment>\n                <p>\n                    Please confirm removal of this member from this organization.\n                </p>\n                <div className=\"simpleCard\" style={{ marginBottom: '1em' }}>\n                    <Member member={member} avatarSize={20} />\n                </div>\n                <p>\n                    This user as well as members of this organization will receive a notification\n                    of the removal.\n                </p>\n                <p>\n                    Any Narratives associated by this member with this Organization will be unaffected. This member\n                    will also retain any Narrative permissions granted through this Organization.\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <Modal\n                title={title}\n                width=\"50em\"\n                visible={true}\n                onOk={() => { confirmed() }}\n                onCancel={() => { canceled() }}\n                okText=\"Confirm\">\n                {content}\n            </Modal>\n        )\n    }\n\n    onMemberMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'promoteToAdmin':\n                this.props.onPromoteMemberToAdmin(member.username)\n                break\n            case 'removeMember':\n                this.onConfirmRemoveMember(member)\n                break\n        }\n    }\n\n    onAdminMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'demoteToMember':\n                this.props.onDemoteAdminToMember(member.username)\n                break\n        }\n    }\n\n    renderMemberMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onMemberMenu.call(this, key, member) }}>\n                <Menu.Item key=\"promoteToAdmin\" >\n                    <Icon type=\"unlock\" />Promote to Admin\n                </Menu.Item>\n                <Menu.Item key=\"removeMember\" >\n                    <Icon type=\"delete\" />Remove Member\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderAdminMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, member) }}>\n                <Menu.Item key=\"demoteToMember\">\n                    <Icon type=\"user\" />Demote to Member\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderOwnerMenu(member: orgModel.Member) {\n        return (\n            <div></div>\n        )\n    }\n\n    renderMemberOptions(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n\n        switch (member.type) {\n            case orgModel.MemberType.OWNER:\n                return this.renderOwnerMenu(member)\n            case orgModel.MemberType.ADMIN:\n                return this.renderAdminMenu(member)\n            case orgModel.MemberType.MEMBER:\n                return this.renderMemberMenu(member)\n        }\n    }\n\n    renderMembers() {\n        let members: JSX.Element | Array<JSX.Element>\n        const message = (\n            <div style={{ fontStyle: 'italic', textAlign: 'center' }}>\n                No members\n            </div>\n        )\n\n        if (this.props.members.length === 0) {\n            members = (\n                <Alert type=\"info\" message={message} />\n            )\n        } else {\n            members = this.props.members.map((member) => {\n                let isNew: boolean\n                if (this.props.organization.lastVisitedAt === null) {\n                    isNew = false\n                } else {\n                    isNew = this.props.organization.lastVisitedAt.getTime() < member.joinedAt.getTime()\n                }\n                const classNames = ['Members-row', 'simpleCard']\n                if (isNew) {\n                    classNames.push('Members-newMember')\n                }\n                return (\n                    <div className={classNames.join(' ')} key={member.username}>\n                        <div className=\"Members-member\">\n                            <Member member={member} avatarSize={50} />\n                        </div>\n                        <div className=\"Members-menu\">\n                            {this.renderMemberOptions(member)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        return (\n            <div className=\"infoTable\">\n                {members}\n            </div>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchMembers(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter members by name\"\n                    onChange={doChange} />\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortMembers(value)\n        }\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortMembersBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Joined</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderHeader() {\n        return (\n            <div className=\"ViewOrganizationMembers-headerRow\">\n                <div className=\"ViewOrganizationMembers-searchCol\">\n                    {this.renderSearchBar()}\n                </div>\n                <div className=\"ViewOrganizationMembers-sortCol\">\n                    {this.renderSortBar()}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let confirm\n        if (this.state.confirmMemberRemoval) {\n            confirm = this.renderConfirmMemberRemoval()\n        }\n        return (\n            <React.Fragment>\n                <div className=\"ViewOrganizationMembers scrollable-flex-column\">\n                    <div className=\"ViewOrganizationMembers-header\">\n                        {this.renderHeader()}\n                    </div>\n                    <div className=\"ViewOrganizationMembers-body scrollable-flex-column\">\n                        {this.renderMembers()}\n                    </div>\n                </div>\n                {confirm}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/viewMembers'\nimport ViewMembers from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    onReloadOrg: (id: string) => void\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onViewMembersUnload: () => void,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewMembersUnload: () => {\n            dispatch(actions.unload() as any)\n        },\n        onPromoteMemberToAdmin: (memberUsername: string) => {\n            dispatch(actions.promoteToAdmin(memberUsername) as any)\n        },\n        onDemoteAdminToMember: (adminUsername: string) => {\n            dispatch(actions.demoteToMember(adminUsername) as any)\n        },\n        onRemoveMember: (memberUsername: string) => {\n            dispatch(actions.removeMember(memberUsername) as any)\n        },\n        onSearchMembers: (searchBy: string) => {\n            dispatch(actions.searchMembers(searchBy) as any)\n        },\n        onSortMembers: (sortBy: string) => {\n            dispatch(actions.sortMembers(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembers)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\n\n// Reject inbound request\n\nexport interface RejectRequestAction<T> extends Action<T> {\n}\n\nexport interface RejectInboxRequest extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface RejectInboxRequestStart extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n}\n\nexport interface RejectInboxRequestSuccess extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\ninterface RejectInboxRequestError extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function denyRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, RejectRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.denyRequest(requestId)\n\n            // refetch the outbox\n            const inbox = await requestClient.getRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            } as RejectInboxRequestSuccess)\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    ViewOrgViewModelKind\n} from '../../../types'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError, makeError } from '../../../lib/error'\n\nexport interface CancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface CancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface CancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\nexport interface CancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: AnError\n}\n\nexport function cancelRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.cancelRequest(requestId)\n            const requests: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n                requests\n            } as CancelJoinRequestSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            } as CancelJoinRequestError)\n        }\n    }\n}","import * as React from 'react'\nimport './User.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Button, Icon } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\ninterface UserState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nfunction viewLabel(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return 'Compact'\n        case View.NORMAL:\n            return 'Normal'\n    }\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderCompact() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { Tooltip, Icon, Alert } from 'antd';\nimport './Narrative.css'\nimport UserSimple from './UserContainer';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let label\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                label = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                label = (\n                    <span>Edit (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                label = 'Admin'\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                label = 'Owner'\n                break\n            default:\n                label = 'Unknown'\n        }\n        return (\n            <span>\n                {label}\n            </span>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"Narrative-title\">\n                        <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                            {narrative.title}\n                        </a>\n                    </div>\n                    {' '}\n                    <div className=\"Narrative-owner\">\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n        // const narrative = this.props.narrative\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"mainCol\">\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {' '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            <Icon type=\"crown\" />\n                        </div>\n                        <div className=\"Narrative-global\">\n                            <Icon type=\"global\" />\n                        </div>\n                    </div>\n                    <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div>\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>{narrative.lastSavedBy}\n                    </div>\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    <Icon type=\"exclamation-circle\" style={{ color: 'orange' }} />\n                    {' '}\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact(narrative)}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal(narrative)}\n                    </div>\n                )\n        }\n\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as orgModel from '../../data/models/organization/model'\nimport Narrative from './Narrative'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types'\nimport * as actions from '../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './InboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    onAcceptRequest() {\n        this.props.onAcceptInboxRequest(this.props.request)\n    }\n\n    onRejectRequest() {\n        this.props.onRejectInboxRequest(this.props.request)\n    }\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requestSubject\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"default\" onClick={this.onAcceptRequest.bind(this)}>\n                        <Icon type=\"check\" />\n                        Accept\n                        </Button>\n                    <Button type=\"danger\" onClick={this.onRejectRequest.bind(this)}>\n                        <Icon type=\"cross\" />\n                        Reject\n                        </Button>\n                    {/* <Button>\n                            <Icon type=\"eye\" />\n                            Visit\n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div>\n\n                <div className=\"cardSectionHeader\">\n                    from\n                </div>\n                <User userId={request.requester} avatarSize={30} />\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"InboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"InboxRequest-requestHeaderRow\">\n                        <div className=\"InboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"InboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport InboxRequest from './InboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptInboxRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onRejectInboxRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InboxRequest)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './OutboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    // renderRequestSentType(request: requestModel.Request) {\n    //     switch (request.type) {\n    //         case requestModel.RequestType.REQUEST:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.APP:\n    //                     return 'REQUEST to associate App'\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'REQUEST to join Organization'\n    //                 case requestModel.RequestResourceType.WORKSPACE:\n    //                     return 'REQUEST to associate Narrative'\n    //             }\n    //         case requestModel.RequestType.INVITATION:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'INVITATION to join Organization'\n    //             }\n    //     }\n    //     return 'unknown request'\n    // }\n\n    onCancelRequest() {\n        this.props.onCancelOutboxRequest(this.props.request)\n    }\n\n    onAcceptInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n    onAcceptRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <User userId={request.user} avatarSize={30} />\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"danger\" onClick={this.onCancelRequest.bind(this)}>\n                        <Icon type=\"cross\" />Cancel\n                        </Button>\n                    {/* <Button onClick={this.onVisitOrg.bind(this)}>\n                            <Icon type=\"eye\" />Visit \n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    sent to\n                </div>\n\n                <div className=\"miniDetail\">\n                    {this.renderRequestReceivedSubject(request)}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"OutboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"OutboxRequest-requestHeaderRow\">\n                        <div className=\"OutboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"OutboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as cancelActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport OutboxRequest from './OutboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(cancelActions.cancelRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(OutboxRequest)","import * as React from 'react'\n\nimport './component.css'\nimport Header from '../../../../Header'\nimport { Icon, Button, Modal, Card, Alert } from 'antd'\nimport User from '../../../../entities/UserContainer'\nimport Narrative from '../../../../entities/NarrativeContainer'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { niceElapsed } from '../../../../../lib/time'\nimport InboxRequest from './InboxRequestContainer'\nimport OutboxRequest from './OutboxRequestContainer'\n\nexport interface RequestsProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n    // organizationId: string,\n    // viewModel: types.\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nexport interface RequestsState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageGroupRequests extends React.Component<RequestsProps, RequestsState> {\n\n    constructor(props: RequestsProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n\n        // this.props.onStart(this.props.organizationId)\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n    onAcceptJoinRequest(request: requestModel.Request) {\n        this.props.onAcceptJoinRequest(request)\n    }\n    onDenyJoinRequest(request: requestModel.Request) {\n        this.props.onDenyJoinRequest(request)\n    }\n    onCancelJoinInvitation(request: requestModel.Request) {\n        this.props.onCancelJoinInvitation(request)\n    }\n    onGetViewAccess(request: requestModel.Request) {\n        this.props.onGetViewAccess(request)\n    }\n    onViewProfile(username: string) {\n        window.open('/#people/' + username, '_blank')\n    }\n    onShowInfo() {\n        Modal.info({\n            title: 'Manage Requests Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the manage requests tool...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderRequestJoinRequest(request: requestModel.UserRequest) {\n        const title = (\n            <span>\n                <Icon type=\"user\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestJoinInvitation(request: requestModel.UserInvitation) {\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                <Icon type=\"mail\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"user\" />\n\n                {' '}\n                Invitation to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onCancelJoinInvitation.call(this, request)}>\n                Cancel\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>invitation to</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.user} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderNarrativePermission(permission: orgModel.UserWorkspacePermission) {\n        switch (permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                return 'None'\n            case orgModel.UserWorkspacePermission.VIEW:\n                return 'View Only'\n            // return 'View and Copy'\n            case orgModel.UserWorkspacePermission.EDIT:\n                return 'Edit'\n            // return 'View, Copy, Save, Run'\n            case orgModel.UserWorkspacePermission.ADMIN:\n                return 'Admin'\n            // return 'View, Copy, Save, Run, Manage Sharing'\n            case orgModel.UserWorkspacePermission.OWNER:\n                return 'Owner'\n            // return 'View, Copy, Save, Run, Manage Sharing, Own'\n        }\n    }\n\n    renderRequestNarrativeRequest(request: requestModel.WorkspaceRequest) {\n        const title = (\n            <span>\n                <Icon type=\"file\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Associate Narrative\n            </span>\n        )\n\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        let narrativeAccess\n        narrativeAccess = (\n            <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n        )\n        // TODO: Revive me!!\n        // if (request.narrativeId) {\n        //     // TODO: note the '1' below -- we dont' get the object id from the groups service,\n        //     // and the narrative will soon accept just the workspace id (and will look up the object id by itself)\n        //     // but not yet, so we just use 1, which is INCORRECT.\n        //     narrativeAccess = (\n        //         <div>\n        //             <div>\n        //                 <a href={\"/narrative/ws.\" + request.narrativeId + '.obj.' + '1'} target=\"_blank\">{request.title}</a>\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">your access</span>{' '}{this.renderNarrativePermission(request.narrative.permission)}\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">public?</span>{' '}{request.isPublic ? 'yes' : 'no'}\n        //             </div>\n\n        //         </div>\n        //     )\n        // } else {\n        //     narrativeAccess = (\n        //         <span>\n        //             You don't have access to this narrative\n        //             {' '}\n        //             <Button\n        //                 onClick={() => { this.onGetViewAccess.call(this, request.id) }}>\n        //                 Click for View Access\n        //             </Button>\n        //         </span>\n        //     )\n        // }\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>narrative</th>\n                            <td className=\"Requests-narrative\">\n                                {narrativeAccess}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestAppRequest(request: requestModel.AppRequest) {\n        const title = (\n            <span>\n                <Icon type=\"appstore\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add App\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>app</th>\n                            <td className=\"Requests-requester\">\n                                {request.appId}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderInbox() {\n        let inbox\n        if (this.props.inbox.length === 0) {\n            inbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.inbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <InboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            inbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {inbox}\n            </React.Fragment>\n        )\n    }\n\n    renderOutbox() {\n        let outbox\n        if (this.props.outbox.length === 0) {\n            outbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.outbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <OutboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            outbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {outbox}\n            </React.Fragment>\n        )\n    }\n\n    isAdmin(relation: orgModel.Relation): boolean {\n        return (\n            relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER\n        )\n    }\n\n    render() {\n        if (this.isAdmin(this.props.relation)) {\n            const outboxCount = this.props.outbox.length\n            const inboxCount = this.props.inbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">inbox ({inboxCount})</div>\n                    {this.renderInbox()}\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        } else {\n            const outboxCount = this.props.outbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        }\n    }\n}\n\nexport default ManageGroupRequests\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport * as cancelRequestActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {}\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptJoinRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onDenyJoinRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        },\n        onCancelJoinInvitation: (request: requestModel.Request) => {\n            dispatch(cancelRequestActions.cancelRequest(request.id) as any)\n        },\n        onGetViewAccess: (request: requestModel.Request) => {\n            // dispatch(actions.getViewAccess(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n\n","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from '../../../OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal, Button } from 'antd'\nimport Owner from '../../../entities/OwnerContainer'\nimport { ComponentView, SubViews } from '../../../../types'\nimport NiceElapsedTime from '../../../NiceElapsedTime'\nimport './BriefOrganizationHeader.css'\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n    orgMenu: JSX.Element\n    onNavigateToBrowser: () => void\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganizationHeader-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganizationHeader-statusRow\">\n                    <div className=\"BriefOrganizationHeader-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganizationHeader-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-freshnessRow\">\n                    <div className=\"BriefOrganizationHeader-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-orgName BriefOrganizationHeader-infoTableRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {org.name}\n                    </NavLink>\n                </div>\n\n                <div className=\"BriefOrganizationHeader-researchInterests BriefOrganizationHeader-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\">updated</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderButtonsRow() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    {this.props.orgMenu}\n                </div>\n            </div>\n        )\n    }\n\n    renderBackButton() {\n        // return (\n        //     <div className=\"IconButton\"\n        //         onClick={this.props.onNavigateToBrowser}\n        //         style={{ color: 'rgba(145, 43, 43, 1)' }}>\n        //         back\n        //     </div>\n        // )\n\n        return (\n            <Button type=\"danger\" onClick={this.props.onNavigateToBrowser}>\n                back\n            </Button>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <div className=\"BriefOrganizationHeader-buttonsCol\">\n                <div className=\"BriefOrganizationHeader-buttonsRow\" style={{ marginBottom: '10px' }}>\n                    <div className=\"ButtonSet\">\n                        {this.renderBackButton()}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-buttonsRow\">\n                    {this.renderButtonsRow()}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganizationHeader-body\">\n                    <div className=\"BriefOrganizationHeader-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoCol\">\n\n                        <div className=\"BriefOrganizationHeader-infoCol-row\">\n                            <div className=\"BriefOrganizationHeader-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganizationHeader-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { Tooltip } from 'antd';\nimport './component.css'\nimport OrgLogo from '../../OrgLogo';\nimport Owner from '../OwnerContainer';\nimport { NavLink } from 'react-router-dom';\n\nexport interface OrganizationProps {\n    organization: orgModel.Organization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderLogo(org: orgModel.Organization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={30} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    render() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationEntity-Accessible \">\n                <div className=\"OrganizationEntity-Accessible-logoCol\">\n                    {this.renderLogo(org)}\n                </div>\n                <div className=\"OrganizationEntity-Accessible-mainCol\">\n                    <div className=\"OrganizationEntity-Accessible-name\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-researchInterests\">\n                        {org.researchInterests}\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-owner\">\n                        <Owner username={org.owner.username} showAvatar={false} avatarSize={20} />\n                    </div>\n                    {/* <div className=\"OrganizationEntity-Accessible-createdAt\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport './Inaccessible.css'\nimport { Icon } from 'antd';\n\nexport interface OrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationEntity-Inaccessible \">\n                <div className=\"OrganizationEntity-Inaccessible-logoCol\">\n                    <Icon type=\"lock\" />\n                </div>\n                <div className=\"OrganizationEntity-Inaccessible-mainCol\">\n                    <div className=\"OrganizationEntity-Inaccessible-name\">\n                        Private Organization\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","// The loader component\n\nimport * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport Organization from './component'\nimport InaccessibleOrganization from './Inaccessible'\n\ninterface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.organization) {\n            switch (this.props.organization.kind) {\n                case orgModel.OrganizationKind.NORMAL:\n                    return (\n                        <Organization organization={this.props.organization} />\n                    )\n                case orgModel.OrganizationKind.INACCESSIBLE_PRIVATE:\n                    return (\n                        <InaccessibleOrganization organization={this.props.organization} />\n                    )\n                default:\n                    return (\n                        <div>\n                            Error: unrecognized org kind\n                        </div>\n                    )\n            }\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.organization) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n}\n\n// The loader redux adapter\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities/organization'\nimport { Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        organization: state.entities.organizations.byId.get(props.organizationId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.OrganizationEntityAction>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error';\n\nexport interface OrganizationEntityAction extends Action {\n\n}\n\n// Organization\n\nexport interface Load extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD\n}\n\ninterface LoadStart extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS\n    organization: orgModel.Organization\n}\n\ninterface LoadError extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR\n    error: AnError\n}\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, OrganizationEntityAction>, getState: () => StoreState) => {\n        dispatch(<LoadStart>{\n            type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const organization = await orgClient.getOrg(organizationId)\n            dispatch(<LoadSuccess>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS,\n                organization\n            })\n        } catch (ex) {\n            dispatch(<LoadError>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR,\n                error: makeError({\n                    code: ex.name,\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Button, Menu, Dropdown, Icon, Alert } from 'antd'\nimport OrganizationEntity from '../../../../entities/organization/loader'\nimport { withRouter, NavLink } from 'react-router-dom'\nimport './component.css'\n\nexport interface RelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\ninterface RelatedOrganizationsState {\n}\n\nexport default class RelatedOrganizations extends React.Component<RelatedOrganizationsProps, RelatedOrganizationsState> {\n    constructor(params: RelatedOrganizationsProps) {\n        super(params)\n    }\n\n    onManageRelatedOrgs() {\n        this.props.onManageRelatedOrgs()\n    }\n\n    renderToolbar() {\n        return (\n            <div className=\"RelatedOrganizations-toolbar\">\n                <Button onClick={this.onManageRelatedOrgs.bind(this)}>\n                    Add Related Org\n                </Button>\n            </div>\n        )\n    }\n\n    onAdminMenu(key: string, organizationId: orgModel.OrganizationID) {\n        switch (key) {\n            case 'removeRelation':\n                // this.props.onDemoteAdminToMember(member.username)\n                this.props.onRemoveRelatedOrganization(this.props.organization.id, organizationId)\n                // window.alert('will remove relation for org: ' + organizationId)\n                break\n        }\n    }\n\n    renderControls(organizationId: orgModel.OrganizationID) {\n        if (!this.props.organization.isAdmin) {\n            return\n        }\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, organizationId) }}>\n                <Menu.Item key=\"removeRelation\">\n                    <Icon type=\"delete\" />Remove\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderBody() {\n        if (this.props.relatedOrganizations.length === 0) {\n            const message = (\n                <p>\n                    No related organizations\n                </p>\n            )\n            return (\n                <Alert type=\"info\" message={message} />\n            )\n        }\n        const Wrapped = withRouter<any>(OrganizationEntity)\n        const relatedOrgs = this.props.relatedOrganizations.map((organizationId: string) => {\n            return (\n                <div key={organizationId} className=\"RelatedOrganizations-orgRow simpleCard\">\n                    {/* <RelatedOrganization organizationId={org} /> */}\n\n                    <div className=\"RelatedOrganizations-orgCol\">\n                        <Wrapped organizationId={organizationId} />\n                    </div>\n                    <div className=\"RelatedOrganizations-controlCol\">\n                        {this.renderControls(organizationId)}\n                    </div>\n                </div>\n            )\n        });\n        return (\n            <div className=\"RelatedOrganizations-organizations\">\n                {relatedOrgs}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"RelatedOrganizations scrollable-flex-column\">\n                {/* <div className=\"RelatedOrganizations-toolbarRow\">\n                    {this.renderToolbar()}\n                </div> */}\n                <div className=\"RelatedOrganizations-bodyRow scrollable-flex-column\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/relatedOrganizations'\nimport Component from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\n\n// Add Org\n\n// export interface AddOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n// }\n\n// export interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//     error: AnError\n// }\n\n// export function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n//     return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n//         dispatch({\n//             type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n//         } as AddOrganizationStart)\n\n//         const {\n//             auth: { authorization: { token, username } },\n//             app: { config },\n//             views: {\n//                 viewOrgView: { viewModel }\n//             }\n//         } = getState()\n//         if (viewModel === null) {\n//             throw new Error('view is not populated')\n//         }\n//         const orgClient = new orgModel.OrganizationModel({\n//             token, username,\n//             groupsServiceURL: config.services.Groups.url\n//         })\n//         try {\n//             await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//                 organizationId\n//             })\n//         } catch (ex) {\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//                 error: makeError({\n//                     code: 'error',\n//                     message: ex.message\n//                 })\n//             })\n//         }\n//     }\n// }\n\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport { BriefOrganization } from '../../../../../data/models/organization/model'\nimport './AvailableOrganization.css'\nimport OrgLogo from '../../../../OrgLogo'\nimport Owner from '../../../../entities/OwnerContainer'\nimport { SelectableRelatableOrganization } from '../../../../../types';\nimport { Icon } from 'antd';\n\nexport interface AvailableOrganizationProps {\n    selectableOrganization: SelectableRelatableOrganization\n    // onSelectOrganization: (org: BriefOrganization) => void\n    // onAddOrganization: (org: BriefOrganization) => void\n}\n\nexport interface AvailableOrganizationState {\n}\n\nexport default class AvailableOrganization extends React.Component<AvailableOrganizationProps, AvailableOrganizationState> {\n    constructor(props: AvailableOrganizationProps) {\n        super(props)\n    }\n\n    renderRelated() {\n        if (this.props.selectableOrganization.isRelated) {\n            return (\n                <Icon type=\"check\" style={{ color: \"green\" }} />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"AvailableOrganization\">\n                <div className=\"AvailableOrganization-relatedCol\">\n                    {this.renderRelated()}\n                </div>\n                <div className=\"AvailableOrganization-orgCol\">\n                    <div className=\"AvailableOrganization-logoCol\">\n                        <OrgLogo logoUrl={this.props.selectableOrganization.organization.logoUrl}\n                            size={30}\n                            organizationName={this.props.selectableOrganization.organization.name}\n                            organizationId={this.props.selectableOrganization.organization.id} />\n                    </div>\n                    <div className=\"AvailableOrganization-orgInfoCol\">\n                        <div className=\"AvailableOrganization-name\">{this.props.selectableOrganization.organization.name}</div>\n                        <div className=\"AvailableOrganization-owner\">\n                            <Owner username={this.props.selectableOrganization.organization.owner.username}\n                                avatarSize={20} showAvatar={false} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"AvailableOrganization-actionCol\"></div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\nimport { Button, Icon, Input, Alert } from 'antd';\nimport AvailableOrganization from './AvailableOrganization'\nimport BriefOrganization from '../../../../BriefOrganization';\nimport { SelectableRelatableOrganization } from '../../../../../types';\n\nexport interface ManageRelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<string>\n    // relation: orgModel.Relation\n    selectedOrganization: SelectableRelatableOrganization | null\n    organizations: Array<SelectableRelatableOrganization>\n    onFinish: () => void\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\ninterface ManageRelatedOrganizationsState {\n\n}\n\nexport default class ManageRelatedOrganizations extends React.Component<ManageRelatedOrganizationsProps, ManageRelatedOrganizationsState> {\n    constructor(props: ManageRelatedOrganizationsProps) {\n        super(props)\n    }\n\n    onAddSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onAddOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onRemoveSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onRemoveOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onSearch(e.target.value)\n    }\n\n    renderAvailableToolbar() {\n        return (\n            <div className=\"ManageRelatedOrganizations-available-toolbar\">\n                <Input placeholder=\"Filter Available Organizations\" onChange={this.onFilterChange.bind(this)} />\n            </div>\n        )\n    }\n\n    renderAvailableOrgs() {\n        return this.props.organizations.map((org: SelectableRelatableOrganization) => {\n            const selectOrg = () => {\n                this.props.onSelectOrganization(org)\n            }\n            let classes = ['simpleCard', 'ManageRelatedOrganizations-availableOrganization']\n            if (org.isSelected) {\n                classes.push('ManageRelatedOrganizations-selected')\n            }\n            return (\n                <div className={classes.join(' ')} onClick={selectOrg} key={org.organization.id} >\n                    <AvailableOrganization selectableOrganization={org} />\n                </div>\n            )\n        })\n    }\n\n    renderSelectedOrg() {\n        let button\n        let content\n        let alert\n        let alertStyle = {\n            marginBottom: '4px'\n        }\n        if (!this.props.selectedOrganization) {\n            const message = (\n                <React.Fragment>\n                    <p>\n                        When you select an organization on the left, details about it will be displayed here.\n                    </p>\n                </React.Fragment>\n            )\n            alert = (\n                <Alert type=\"info\" message={message} style={alertStyle} />\n            )\n            button = (\n                <Button\n                    type=\"primary\"\n                    disabled={this.props.selectedOrganization === null}\n                    onClick={this.onAddSelectedOrganization.bind(this)}>\n                    Add Organization\n                </Button>\n            )\n        } else {\n            content = (\n                <div className=\"ManageRelatedOrganizations-selectedOrganization\">\n                    <BriefOrganization organization={this.props.selectedOrganization.organization} openRequestsStatus={null} />\n                </div>\n            )\n            if (this.props.selectedOrganization.isRelated) {\n                alert = (\n                    <Alert type=\"warning\" message=\"This org is associated\" style={alertStyle} />\n                )\n                button = (\n                    <Button\n                        type=\"danger\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onRemoveSelectedOrganization.bind(this)}>\n                        Remove Organization\n                    </Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onAddSelectedOrganization.bind(this)}>\n                        Add Organization\n                    </Button>\n                )\n            }\n        }\n\n        return (\n            <React.Fragment>\n                {alert}\n                {content}\n                <div className=\"ManageRelatedOrganizations-buttonBar\">\n                    {button}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageRelatedOrganizations scrollable-flex-column\">\n                <div className=\"ManageRelatedOrganizations-toolbar\">\n                    <Button onClick={() => this.props.onFinish()} type=\"danger\">\n                        <Icon type=\"rollback\" />\n                        {' '}\n                        Done\n                    </Button>\n                </div>\n                <div className=\"ManageRelatedOrganizations-main scrollable-flex-column\">\n                    <div className=\"ManageRelatedOrganizations-availableOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Available Organizations</h3>\n                        {this.renderAvailableToolbar()}\n                        <div className=\"ManageRelatedOrganizations-organizations\">\n                            {this.renderAvailableOrgs()}\n                        </div>\n                    </div>\n                    <div className=\"ManageRelatedOrganizations-relatedOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Selected Organization</h3>\n                        {this.renderSelectedOrg()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport ManageRelatedOrganizations from './component'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    organizations: Array<SelectableRelatableOrganization>\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\ninterface DispatchProps {\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    // if (viewModel.subViews.kind !== ViewOrgSubViewKind.MANAGE_RELATED_ORGS) {\n    //     throw new Error(\"argh, wrong org subview kind\")\n    // }\n    if (viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n    const { organization, availableOrganizations: { queried }, relatedOrganizations, selectedOrganization } = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n\n    return {\n        organization, organizations: queried, relatedOrganizations, selectedOrganization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSelectOrganization: (org: SelectableRelatableOrganization) => {\n            dispatch(actions.selectOrganization(org) as any)\n        },\n        onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.addOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onSearch: (searchBy: string) => {\n            dispatch(actions.search(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ManageRelatedOrganizations)","import * as React from 'react'\nimport { Spin, Alert } from 'antd'\nimport Container from './reduxAdapter'\n\n\nexport interface Props {\n    view: types.View<types.ManageRelatedOrgsViewModel | types.NoneViewModel>\n    onLoad: () => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Related Organizations Manager...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                return this.renderLoading()\n            case types.ViewState.LOADING:\n                return this.renderLoading()\n            case types.ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport { OrganizationModel } from '../../../../../data/models/organization/model';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    view: types.View<types.ManageRelatedOrgsViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageRelatedOrganizationsView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport {\n    StoreState, User, InviteUserViewModel,\n    RequestType, RequestResourceType, MemberType,\n    OrganizationUser,\n    ViewOrgViewModelKind,\n    View\n} from '../../../types'\nimport { UserQuery } from '../../../data/model'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../combo/error/api'\nimport { makeError } from '../../../lib/error'\nimport * as viewOrgActions from '../viewOrg'\n// View Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.INVITE_USER_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    users: Array<OrganizationUser> | null\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.INVITE_USER_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n        organization: organization,\n        users: null\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.INVITE_USER_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization kind must be \"NORMAL\"'\n                })))\n                return\n            }\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// User Selection\n\n\n\nexport interface InviteUserSearchUsers extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS,\n    query: UserQuery\n}\n\ninterface SearchUsersStart extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n}\n\nexport interface SearchUsersSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n    users: Array<OrganizationUser> | null\n}\n\ninterface SearchUsersError extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n    error: AnError\n}\n\nfunction searchUsersStart(): SearchUsersStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n    }\n}\n\nfunction searchUsersSuccess(users: Array<OrganizationUser> | null): SearchUsersSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n        users: users\n    }\n}\n\nfunction searchUsersError(error: AnError): SearchUsersError {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n        error: error\n    }\n}\n\nexport function inviteUserSearchUsers(query: UserQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchUsersStart())\n\n        if (query.query.length === 0) {\n            dispatch(searchUsersSuccess(null))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        // const { organization } = viewModel\n        // const orgClient = new orgModel.OrganizationModel({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url\n        // })\n\n\n\n        // const {\n        //     views: {\n        //         inviteUserView: { viewModel }\n        //     },\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // // TODO: better form of type narrowing? \n        // if (viewModel === null) {\n        //     return\n        // }\n\n        const org = viewModel.organization\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        // let excludedUsers: Array<string> = []\n\n        // excludedUsers.push(org.owner.user.username)\n\n        let owner: string = org.owner.username\n        let adminUsers: Array<string> = []\n        let members: Array<string> = []\n        let invited: Array<string> = []\n        let requested: Array<string> = []\n\n        org.members.forEach((member) => {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    members.push(member.username)\n                case MemberType.ADMIN:\n                    adminUsers.push(member.username)\n            }\n        })\n\n        // excludedUsers = excludedUsers.concat(org.members.map((member) => {\n        //     return member.\n        // }))\n\n        // TODO revive\n        // org.adminRequests.forEach((request) => {\n        //     if (request.resourceType === RequestResourceType.USER) {\n        //         switch (request.type) {\n        //             case RequestType.INVITATION:\n        //                 invited.push((<UserInvitation>request).user.username)\n        //                 // excludedUsers.push((<UserInvitation>request).user.username)\n        //                 break\n        //             case RequestType.REQUEST:\n        //                 requested.push((<UserRequest>request).requester.username)\n        //             // excludedUsers.push((<UserRequest>request).requester.username)\n        //         }\n        //     }\n        // })\n\n        try {\n            const users = await userClient.searchUsers(query)\n\n\n            // const filteredUsers = users.filter((user) => {\n            //     return (excludedUsers.indexOf(user.username) === -1)\n            // })\n            const orgUsers: Array<OrganizationUser> = users.map(({ username, realname }) => {\n                let relation: orgModel.UserRelationToOrganization\n                if (username === owner) {\n                    relation = orgModel.UserRelationToOrganization.OWNER\n                } else if (adminUsers.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.ADMIN\n                } else if (invited.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n                } else if (requested.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n                } else if (members.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER\n                } else {\n                    relation = orgModel.UserRelationToOrganization.NONE\n                }\n                return {\n                    username, realname,\n                    relation: relation\n                }\n            })\n            dispatch(searchUsersSuccess(orgUsers))\n        } catch (ex) {\n            dispatch(searchUsersError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n\n    }\n}\n\n// Select a user\n\nexport interface SelectUser extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER,\n    username: string\n}\n\nexport interface SelectUserStart extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_START\n}\n\nexport interface SelectUserSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n    user: User,\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface SelectUserError extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n    error: AnError\n}\n\n\nfunction selectUserStart(): SelectUserStart {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_START\n    }\n}\n\nfunction selectUserSuccess(user: User, relation: orgModel.UserRelationToOrganization): SelectUserSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n        user: user,\n        relation: relation\n    }\n}\n\nfunction selectUserError(error: AnError): SelectUserError {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n        error: error\n    }\n}\n\nfunction isUserRequest(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserRequest = <requestModel.UserRequest>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.REQUEST &&\n        req.requester === username) {\n        return true\n    }\n    return false\n}\n\nfunction isUserInvitation(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserInvitation = <requestModel.UserInvitation>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.INVITATION &&\n        req.user &&\n        req.user === username) {\n        return true\n    }\n    return false\n}\n\nfunction getUserRelation(user: User, organization: orgModel.Organization): orgModel.UserRelationToOrganization {\n    if (user.username === organization.owner.username) {\n        return orgModel.UserRelationToOrganization.OWNER\n    }\n    const member = organization.members.find((member) => {\n        return member.username === user.username\n    })\n    if (member) {\n        switch (member.type) {\n            case MemberType.ADMIN:\n                return orgModel.UserRelationToOrganization.ADMIN\n            case MemberType.OWNER:\n                return orgModel.UserRelationToOrganization.OWNER\n            case MemberType.MEMBER:\n                return orgModel.UserRelationToOrganization.MEMBER\n        }\n    }\n\n    // TODO revive\n    // for (const request of organization.adminRequests) {\n    //     if (isUserInvitation(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    //     } else if (isUserRequest(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     }\n    // }\n\n    return orgModel.UserRelationToOrganization.VIEW\n}\n\nfunction ensureView(state: StoreState): View<InviteUserViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { inviteUserView } = viewModel.subViews\n    if (inviteUserView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return inviteUserView\n}\n\n// function ensureViewModel(state: StoreState): InviteUserViewModel {\n//     const view = ensureView(state)\n//     if (view.viewModel)\n// }\n\nexport function selectUser(selectedUsername: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectUserStart())\n\n        const state = getState()\n\n        let view: View<InviteUserViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch(selectUserError(makeError({\n                code: 'error',\n                message: 'missing view model'\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token } },\n            app: { config }\n        } = state\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await userClient.getUser(selectedUsername)\n            const relation = getUserRelation(user, view.viewModel.organization)\n            dispatch(selectUserSuccess(user, relation))\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Now send the invitation, whew!\n\nexport interface SendInvitation extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION\n}\n\nexport interface SendInvitationStart extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n}\n\nexport interface SendInvitationSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n}\n\nexport interface SendInvitationError extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n    error: AnError\n}\n\nexport function sendInvitationStart(): SendInvitationStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n    }\n}\n\nexport function sendInvitationSuccess(): SendInvitationSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n    }\n}\n\nexport function sendInvitationError(error: AnError): SendInvitationError {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n        error: error\n    }\n}\n\nexport function sendInvitation() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendInvitationStart())\n\n        const state = getState()\n\n        let view: View<InviteUserViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        if (view.viewModel === null) {\n            dispatch(sendInvitationError(makeError({\n                code: 'error',\n                message: 'null view model'\n            })))\n            return\n        }\n\n        const { selectedUser, organization: { id } } = view.viewModel\n\n        if (!selectedUser) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        requestClient.inviteUserToJoinOrg(id, selectedUser.user.username)\n            .then((request) => {\n                dispatch(sendInvitationSuccess())\n                dispatch(viewOrgActions.reload(id))\n            })\n            .catch((err) => {\n                dispatch(sendInvitationError(makeError({\n                    code: err.name,\n                    message: err.message\n                })))\n            })\n    }\n}\n","import * as React from 'react'\nimport './User.css'\n\nimport Avatar from './entities/Avatar'\nimport * as types from '../types';\n\nexport interface UserProps {\n    user: types.User\n    avatarSize?: number\n}\n\ninterface UserState {\n\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                                </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport './component.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\ninterface MainMenuProps {\n    buttons?: JSX.Element\n}\n\ninterface MainMenuState {\n    currentMenuItem: string\n}\n\nclass MainMenu extends React.Component<MainMenuProps, MainMenuState> {\n    constructor(props: MainMenuProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'myorgs':\n        //         this.props.history.push('/dashboard')\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n\n    renderMenu() {\n        return (\n            <Route render={({ history, location }) => {\n                let selectedKeys: Array<string> = []\n                switch (location.pathname) {\n                    case '/organizations':\n                        selectedKeys = ['allorgs']\n                        break\n                    case '/newOrganization':\n                        selectedKeys = ['neworg']\n                        break\n                }\n                return (\n                    <Menu\n                        // onClick={(e: ClickParam) => { doNavigate(e.key) }}\n                        selectedKeys={selectedKeys}\n                        style={{ backgroundColor: 'transparent' }}\n                        mode=\"horizontal\"\n                    >\n                        {/* <Menu.Item key=\"allorgs\">\n                            <Link to=\"/organizations\">Browse &amp; Search</Link>\n                        </Menu.Item> */}\n                        {/* <Menu.Item key=\"neworg\">\n                            <Link to=\"/newOrganization\">Create New Organization</Link>\n                        </Menu.Item> */}\n                    </Menu>\n                )\n            }} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"MainMenu\">\n                <div className=\"MainMenu-menu\">\n                    {this.renderMenu()}\n                </div>\n                <div className=\"MainMenu-buttons\">\n                    {this.props.buttons}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import * as React from 'react'\n\nimport './component.css'\nimport { User, InviteUserViewState, OrganizationUser } from '../../../../../types';\nimport { Button, Icon, Modal, Alert } from 'antd';\nimport Header from '../../../../Header';\nimport { NavLink } from 'react-router-dom';\nimport UserComponent from '../../../../User'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport MainMenu from '../../../../menu/component'\n\nexport interface InviteUserProps {\n    organization: orgModel.Organization,\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState,\n    users: Array<OrganizationUser> | null\n    onSearchUsers: (query: userModel.UserQuery) => void,\n    onSelectUser: (username: string) => void,\n    onSendInvitation: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserState {\n    autocompleteMessage: string\n}\nclass InviteUser extends React.Component<InviteUserProps, InviteUserState> {\n\n    lastSearchAt: Date | null\n\n    static searchDebounce: number = 200\n\n    searchInput: React.RefObject<HTMLInputElement>\n    searchButton: React.RefObject<Button>\n\n    constructor(props: InviteUserProps) {\n        super(props)\n\n        this.lastSearchAt = null\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            autocompleteMessage: ''\n        }\n    }\n\n    onClickCancelToViewer() {\n        this.props.onFinish()\n    }\n\n    onSendInvitation() {\n        this.props.onSendInvitation()\n    }\n\n    canSave() {\n        if (this.props.selectedUser) {\n            return true\n        }\n        return false\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.doSearchUsers(currentSearchInputValue)\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        // this.doSearchUsers(currentSearchInputValue)\n    }\n\n    doSearchUsers(value: string) {\n        // if (value.length < 3) {\n        //     this.setState({ autocompleteMessage: 'Search begins after 3 or more characters' })\n        //     return\n        // }\n        // this.setState({ autocompleteMessage: '' })\n        // build up list of users already owning, members of, or with membership pending.\n        const excludedUsers: Array<string> = []\n\n        if (this.lastSearchAt === null ||\n            (new Date().getTime() - this.lastSearchAt.getTime() > InviteUser.searchDebounce)) {\n            this.lastSearchAt = new Date()\n            this.props.onSearchUsers({\n                query: value,\n                excludedUsers: []\n            })\n        }\n    }\n\n    onSelectUser(user: OrganizationUser) {\n        this.props.onSelectUser(user.username);\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderUsers() {\n        if (!this.props.users) {\n            const message = 'Search for users by name or username to display a list of available users in this space.'\n            return (\n                <Alert type=\"info\" message={message} showIcon />\n            )\n        }\n        if (this.props.users.length === 0) {\n            return (\n                <Alert type=\"warning\" message=\"No users found\" showIcon />\n            )\n        }\n        return this.props.users.map((user) => {\n            if (user.relation === orgModel.UserRelationToOrganization.NONE) {\n                return (\n                    <div\n                        className=\"user notInOrganization \"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div\n                        className=\"user inOrganization\"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            }\n        })\n    }\n\n    renderOrgInfo() {\n        return (\n            <div className=\"orgInfo\">\n                <div className=\"name\">\n                    <span className=\"field-label\">name</span>\n                    <span>{this.props.organization.name}</span>\n                </div>\n                <div className=\"description\">\n                    <span className=\"field-label\">description</span>\n                    <span>{this.props.organization.description}</span>\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationForm() {\n        let button\n        let message\n        if (this.props.selectedUser) {\n            if (this.props.selectedUser.relation === orgModel.UserRelationToOrganization.VIEW) {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onSendInvitation.bind(this)}>Send Invitation</Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        disabled\n                        type=\"primary\"\n                    >Send Invitation</Button>\n                )\n                // message = 'User is a member of this organization'\n                message = (\n                    <div>\n                        User may not be invited because:<br />\n                        {this.renderRelation(this.props.selectedUser.relation)}\n                    </div>\n                )\n                message = (\n                    <Alert\n                        type=\"warning\"\n                        message={message}\n                        showIcon\n                    />\n                )\n            }\n        } else {\n            button = (\n                <Button\n                    disabled\n                    type=\"primary\"\n                >Send Invitation</Button>\n            )\n            message = 'Please select a user'\n        }\n        return (\n            <div className=\"invitationForm\">\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {button}\n                </div>\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationStatus() {\n        switch (this.props.editState) {\n            case InviteUserViewState.NONE:\n                return (\n                    <div>NONE</div>\n                )\n            case InviteUserViewState.EDITING:\n                return (\n                    <div>EDITING</div>\n                )\n            case InviteUserViewState.SENDABLE:\n                return (\n                    <div>SENDABLE</div>\n                )\n            case InviteUserViewState.SENDING:\n                return (\n                    <div>SENDING</div>\n                )\n            case InviteUserViewState.SUCCESS:\n                return (\n                    <div>SENT SUCCESSFULLY</div>\n                )\n            case InviteUserViewState.ERROR:\n                return (\n                    <div>ERROR SENDING</div>\n                )\n            default:\n                return (\n                    <div>Bad State</div>\n                )\n        }\n    }\n\n    renderRelation(relation: orgModel.UserRelationToOrganization) {\n        switch (relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span><Icon type=\"stop\" /> Not a member</span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n\n                    <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n                )\n        }\n    }\n\n    renderSelectedUser() {\n        if (this.props.selectedUser === null) {\n            return (\n                <div className=\"selectedUser\">\n                    <p className=\"noSelection\">\n                        No user yet selected\n                    </p>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"selectedUser\">\n                    <UserComponent user={this.props.selectedUser.user} />\n                    {this.renderRelation(this.props.selectedUser.relation)}\n                </div>\n            )\n        }\n    }\n\n    renderFooter() {\n        return (\n            <div className=\"footer\">\n            </div>\n        )\n    }\n\n    renderSearchButton() {\n        return (<Icon type=\"search\" />)\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onClickCancelToViewer.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"InviteUser scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"row scrollable-flex-column\">\n                    <div className=\"col1 firstCol users scrollable-flex-column\">\n                        <h3>Select User to Invite</h3>\n                        <form id=\"searchForm\" className=\"searchBar\"\n                            onSubmit={this.onSubmit.bind(this)}>\n                            <input\n                                ref={this.searchInput}\n                                autoFocus\n                                onChange={this.onSearchInputChange.bind(this)}\n                                placeholder=\"Search for a user\"\n                            />\n                            <Button\n                                className=\"searchButton\"\n                                form=\"searchForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\"\n                            >\n                                {this.renderSearchButton()}\n                            </Button>\n                        </form>\n                        <div className=\"usersTable\">\n                            {this.renderUsers()}\n                        </div>\n                    </div>\n                    <div className=\"col1 lastCol\">\n                        <h3>Selected User</h3>\n                        {this.renderSelectedUser()}\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n\n                {this.renderFooter()}\n            </div>\n        )\n    }\n}\n\nexport default InviteUser","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport InviteUser from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    users: Array<types.OrganizationUser> | null\n    selectedUser: {\n        user: types.User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: types.InviteUserViewState\n}\n\ninterface DispatchProps {\n    onSearchUsers: (query: userModel.UserQuery) => void\n    onSelectUser: (username: string) => void\n    onSendInvitation: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.inviteUserView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    return viewModel.subViews.inviteUserView.viewModel\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onSearchUsers: ({ query, excludedUsers }) => {\n            dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        },\n        onSelectUser: (username: string) => {\n            dispatch(actions.selectUser(username) as any)\n        },\n        onSendInvitation: () => {\n            dispatch(actions.sendInvitation() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(InviteUser)","import * as React from 'react'\n\nimport Container from './container'\nimport {\n    StoreState, ViewOrgViewModelKind, ViewState,\n    InviteUserViewModel, View, NoneViewModel\n} from '../../../../../types';\n\nexport interface InviteUserLoaderProps {\n    view: View<InviteUserViewModel | NoneViewModel>\n    organizationId: string\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserLoaderState {\n}\n\nclass InviteUserLoader extends React.Component<InviteUserLoaderProps, InviteUserLoaderState> {\n    constructor(props: InviteUserLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport { Spin, Alert } from 'antd';\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<InviteUserViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.inviteUserView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InviteUserLoader)","import * as React from 'react'\nimport './UserSimple.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Tooltip } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface UserState {\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"UserSimple\">\n                <Tooltip title={tooltip} placement=\"bottomRight\">\n                    <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                </Tooltip>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport UserSimple from './UserSimple'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <UserSimple user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport { Tooltip, Icon } from 'antd'\nimport UserSimple from '../UserSimpleContainer'\nimport { niceElapsed } from '../../../lib/time'\nimport './component.css'\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    // renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n    //     let label\n    //     switch (narrative.access) {\n    //         case narrativeModel.NarrativeAccess.VIEW:\n    //             label = (\n    //                 <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.EDIT:\n    //             label = (\n    //                 <span>Edit (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.ADMIN:\n    //             label = 'Admin'\n    //             break\n    //         case narrativeModel.NarrativeAccess.OWNER:\n    //             label = 'Owner'\n    //             break\n    //         default:\n    //             label = 'Unknown'\n    //     }\n    //     return (\n    //         <span>\n    //             {label}\n    //         </span>\n    //     )\n    // }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                iconType = 'eye'\n                tooltip = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                iconType = 'edit'\n                tooltip = (\n                    <span>This narrative is shared with you with <b>edit</b> access (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                iconType = 'unlock'\n                tooltip = (\n                    <span>\n                        This narrative is shared with you with <b>access</b> - you may edit and re-share this\n                    </span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                iconType = 'crown'\n                tooltip = (\n                    <span>\n                        You are the owner of this Narrative\n                    </span>\n                )\n                break\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderGlobalPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        if (narrative.isPublic) {\n            iconType = 'global'\n            tooltip = 'This narrative has been shared publicly - with all KBase users'\n        } else {\n            iconType = 'lock'\n            tooltip = 'This narrative is private - only accessible to the owner any users it has been shared with'\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderNiceElapsed(d: Date) {\n        const tooltip = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                    }).format(d)\n                }\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(d)}\n            </Tooltip>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">updated</span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} />\n                    </div>\n\n                    {/* TODO: left off here; need to add in the added date\n                        <div>\n                        <span className=\"field-label\">added</span>\n                        {this.renderNiceElapsed(this.props.)}\n                    </div> */}\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>\n                        {this.renderNiceElapsed(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>\n                        <UserSimple avatarSize={20} userId={narrative.lastSavedBy} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarrative(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return (\n        //             <div className=\"Narrative View-COMPACT\">\n        //                 {this.renderCompact(narrative)}\n        //             </div>\n        //         )\n        //     case View.NORMAL:\n        //         return (\n        //             <div className=\"Narrative View-NORMAL\">\n        //                 {this.renderNormal(narrative)}\n        //             </div>\n        //         )\n        // }\n        return this.renderNarrative(narrative)\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport Narrative from './component'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { Button, Tooltip, Icon, Drawer } from 'antd'\nimport Narrative from './entities/narrative/reduxAdapter'\nimport NiceElapsedTime from './NiceElapsedTime'\nimport './OrganizationNarrative.css'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narrative: orgModel.NarrativeResource\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\ninterface State {\n    requestAccess: boolean\n}\n\nexport default class OrganizationNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            requestAccess: false\n        }\n    }\n\n    onGetViewAccess() {\n        this.props.onGetViewAccess(this.props.narrative)\n    }\n\n    onRequestAccess() {\n        this.setState({ requestAccess: true })\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: false })\n    }\n\n    renderNarrativePermission(narrative: orgModel.NarrativeResource) {\n        let label\n        let shareButton\n        let permissionTooltip\n        let buttonTooltip\n        switch (narrative.permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                if (narrative.isPublic) {\n                    permissionTooltip = \"You have View access to this narrative narrative because it is shared publicly; you may view it, but not edit, run, or share it\"\n                    label = (\n                        <span>\n                            View Only (public)\n                        </span>\n                    )\n                    buttonTooltip = 'Although you have View-Only access to this Narrative due to it being shared globally, you may obtain personal View-Only access by clicking this button'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                } else {\n                    permissionTooltip = \"You have No access to this narrative narrative; you may not view, edit, run, or share it\"\n                    label = (\n                        <span>\n                            No Access\n                        </span>\n                    )\n                    buttonTooltip = 'You cannot access this Narrative; in order to immediately obtain View-Only access click this button.'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                }\n                break\n            case orgModel.UserWorkspacePermission.VIEW:\n                permissionTooltip = \"You have View access to this narrative narrative; you may view it, but not edit, run, or share it\"\n                label = (\n                    <span>\n                        View Only\n                    </span>\n                )\n                buttonTooltip = 'You already have View-Only access to this Narrative, but may request additional access'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Additional Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.EDIT:\n                permissionTooltip = \"You have Edit access to this Narrative; you may view, edit, and run, but not share it\"\n                label = (\n                    <span>\n                        Edit\n                    </span>\n                )\n                buttonTooltip = 'You already have Edit access to this Narrative, but may request additional access by clicking this button'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Admin Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.ADMIN:\n                permissionTooltip = \"You have Admin access to this narrative narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Admin\n                    </span>\n                )\n                break\n            case orgModel.UserWorkspacePermission.OWNER:\n                permissionTooltip = \"You are the Owner of this narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Owner\n                    </span>\n                )\n                break\n            default:\n                label = (\n                    <span>\n                        Unknown\n                    </span>\n                )\n        }\n\n        return (\n            <React.Fragment>\n                <Tooltip title={permissionTooltip} placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <span className=\"field-label\">your permission</span>\n                        {label}\n                    </span>\n                </Tooltip>\n                {' '}\n                <Tooltip title={buttonTooltip} placement=\"right\">\n                    {shareButton}\n                </Tooltip>\n            </React.Fragment>\n        )\n    }\n\n    renderPublicPermission(narrative: orgModel.NarrativeResource) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderNarrative() {\n        const narrative = this.props.narrative\n        if (this.props.organization.isMember) {\n            if (narrative.permission === orgModel.UserWorkspacePermission.NONE &&\n                !narrative.isPublic) {\n                return (\n                    <React.Fragment>\n                        <a href={'/narrative/' + narrative.workspaceId} target=\"_blank\">\n                            <div className=\"title\">{narrative.title}</div>\n                        </a>\n                        <div>{this.renderNarrativePermission(narrative)}</div>\n                    </React.Fragment>\n                )\n            }\n            return (\n                <Narrative workspaceId={narrative.workspaceId} />\n            )\n        }\n        return (\n            <Narrative workspaceId={narrative.workspaceId} />\n        )\n    }\n\n    renderResource() {\n        return (\n            <div>\n                <div>\n                    <span className=\"field-label\">added</span>\n                    <span>\n                        <NiceElapsedTime time={this.props.narrative.createdAt} />\n                    </span>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let accessModal\n        if (this.state.requestAccess) {\n            // TODO: replace with our own implementation...n\n            accessModal = (\n                <Drawer title=\"Request Access to Narrative\"\n                    placement=\"right\"\n                    closable={true}\n                    visible={true}\n                    onClose={() => { this.onCloseRequestAccess.call(this) }}\n                >\n                    Requesting access...\n                </Drawer>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationNarrative\">\n                <div className=\"OrganizationNarrative-narrativeCol\">\n                    {this.renderNarrative()}\n                </div>\n                {/* <div className=\"OrganizationNarrative-resourceCol\">\n                    {this.renderResource()}\n                </div> */}\n                {accessModal}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport './component.css'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Alert, Button, Icon, Menu, Dropdown, Input, Select, Modal } from 'antd';\nimport OrganizationNarrative from '../../../../OrganizationNarrative'\n\nexport interface NarrativesProps {\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n    relation: orgModel.Relation\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onRequestAddNarrative: () => void\n}\n\ninterface NarrativesState {\n}\n\nexport default class Narratives extends React.Component<NarrativesProps, NarrativesState> {\n    constructor(props: NarrativesProps) {\n        super(props)\n    }\n\n    onRequestAddNarrative() {\n        this.props.onRequestAddNarrative()\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        const confirmed = () => {\n            this.props.onRemoveNarrative(narrative)\n        }\n        const message = (\n            <React.Fragment>\n                <p>\n                    Please confirm the removal of this Narrative from this Organization.\n                </p>\n                <p>\n                    Any view permission granted to organization members will be unaffected by removing the Narrative.\n                </p>\n                <p>\n                    All Organization members and the Narrative owner will receive a notification.\n                </p>\n            </React.Fragment>\n        )\n        Modal.confirm({\n            title: 'Confirm',\n            content: message,\n            width: '50em',\n            okText: 'Confirm',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    renderNarrativeMenu(narrative: orgModel.NarrativeResource) {\n        const relation = this.props.relation\n        let menu\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // should never occur\n                break;\n            case (orgModel.UserRelationToOrganization.VIEW):\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                break;\n            case (orgModel.UserRelationToOrganization.ADMIN):\n            case (orgModel.UserRelationToOrganization.OWNER):\n                menu = (\n                    <Menu onClick={({ key }) => { this.onNarrativeMenu(key, narrative) }}>\n                        <Menu.Item key=\"removeNarrative\">\n                            <Icon type=\"delete\" style={{ color: \"#f5222d\" }} /> Remove Narrative from Organization\n                        </Menu.Item>\n                    </Menu>\n                )\n        }\n        if (!menu) {\n            return\n        }\n        return (\n            <Dropdown overlay={menu} trigger={['click']}>\n                <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n            </Dropdown>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchNarratives(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter narratives by title\"\n                    onChange={doChange} />\n                {/* <Button>\n                    <Icon type=\"search\" />\n                </Button> */}\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortNarratives(value)\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '11em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortNarrativesBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Added</Select.Option>\n                    <Select.Option value=\"changed\" key=\"changed\">Last Changed</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberNarratives() {\n        const extras = [(\n            <Button\n                key=\"addNarrative\"\n                size=\"small\"\n                onClick={this.onRequestAddNarrative.bind(this)}>\n                <Icon type=\"plus\" />  Associate Narratives\n            </Button>\n        )]\n\n        let narrativesTable\n        if (this.props.narratives.length === 0) {\n            narrativesTable = (\n                <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" />\n            )\n        } else {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                const lastOrgVisitAt = this.props.organization.lastVisitedAt\n                const addedAt = narrative.addedAt\n                let isNew\n                if (lastOrgVisitAt === null) {\n                    if (addedAt === null) {\n                        isNew = false\n                    } else {\n                        isNew = false\n                    }\n                } else {\n                    if (addedAt === null) {\n                        isNew = false\n                    } else {\n                        isNew = lastOrgVisitAt.getTime() < addedAt.getTime()\n                    }\n                }\n                const classNames = ['ViewOrganization-Narratives-narrative', 'simpleCard']\n                if (isNew) {\n                    classNames.push('ViewOrganization-Narratives-newNarrative')\n                }\n                return (\n                    <div className={classNames.join(' ')} key={String(narrative.workspaceId)}>\n                        <div className=\"ViewOrganization-Narratives-dataCol\">\n                            <OrganizationNarrative\n                                narrative={narrative}\n                                organization={this.props.organization}\n                                onGetViewAccess={this.props.onGetViewAccess} />\n                        </div>\n                        <div className=\"ViewOrganization-Narratives-buttonCol\">\n                            {this.renderNarrativeMenu(narrative)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const narrativeCount = this.props.organization.narrativeCount\n        const title = (\n            <span className=\"ViewOrganization-Narratives-title\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-Narratives-titleCount\">({narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-headerCol2\">\n                        {extras}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-narrativesTable\">\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderNonMemberNarratives() {\n        let alert\n        const narrativesToShow = this.props.organization.narratives.length\n        const hiddenNarrativeCount = this.props.organization.narrativeCount - this.props.organization.narratives.length\n        const alertStyle = {\n            marginBottom: '10px'\n        }\n        if (narrativesToShow) {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives are displayed.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            }\n        } else {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives would be displayed, but this Organization has none.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            } else {\n                alert = (\n                    <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" style={alertStyle} />\n                )\n            }\n        }\n\n        let narrativesTable\n        if (narrativesToShow) {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                // create buttons or not, depending on being an admin\n                return (\n                    <div className=\"ViewOrganization-Narratives-narrative simpleCard\" key={String(narrative.workspaceId)}>\n                        <div className=\"ViewOrganization-Narratives-dataCol\">\n                            <OrganizationNarrative\n                                narrative={narrative}\n                                organization={this.props.organization}\n                                onGetViewAccess={this.props.onGetViewAccess} />\n                        </div>\n                        <div className=\"ViewOrganization-Narratives-buttonCol\">\n                            {this.renderNarrativeMenu(narrative)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const title = (\n            <span className=\"ViewOrganization-Narratives-title\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-Narratives-titleCount\">({this.props.organization.narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-headerCol2\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-table\">\n                        {alert}\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if (this.props.organization.isMember) {\n            return this.renderMemberNarratives()\n        } else {\n            return this.renderNonMemberNarratives()\n        }\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport { StoreState, SyncState, ValidationErrorType } from '../../types'\nimport { AnError, makeError } from '../../lib/error'\nimport Validation from '../../data/models/organization/validation';\nimport { ActionFlag } from '.';\n\n// Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, editableMemberProfile: orgModel.EditableMemberProfile): LoadSuccess {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n        organization: organization,\n        editableMemberProfile: editableMemberProfile\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        // TODO: here is where we would hook into the store state entities for groups\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                })))\n                return\n            }\n\n            if (!org.isMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" is not a member of this org'\n                })))\n                return\n            }\n\n            let thisMember = org.members.find((member) => {\n                return member.username === username\n            })\n\n            if (!thisMember) {\n                if (org.owner.username === username) {\n                    thisMember = org.owner\n                }\n            }\n\n            if (!thisMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" was not found in the members list'\n                })))\n                return\n            }\n\n            const editableProfile: orgModel.EditableMemberProfile = {\n                title: {\n                    value: thisMember.title || '',\n                    remoteValue: thisMember.title,\n                    syncState: SyncState.NEW,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n            dispatch(loadSuccess(org, editableProfile))\n            // dispatch(evaluate())\n        } catch (ex) {\n            console.error('Error :(', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Leaving the Org\n\nexport interface LeaveOrg extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG\n    organizationId: orgModel.OrganizationID\n}\n\ninterface LeaveOrgSuccess extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n}\n\ninterface LeaveOrgError extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n    error: AnError\n}\n\nexport function leaveOrg(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(({\n            type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_START\n        }))\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            orgClient.removeMember(organizationId, username)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n            })\n        } catch (ex) {\n            console.error('ERROR leaving org', ex)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n    }\n}\n\n\n// Updating Profile\n\nexport interface UpdateTitle {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    title: string\n}\n\nexport interface UpdateTitleStart {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_START\n}\n\nexport interface UpdateTitleSuccess {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    title: string\n}\n\nexport interface UpdateTitleError {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n    error: AnError\n}\n\nexport interface Save {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE,\n    memberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface SaveStart {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR,\n    error: AnError\n}\n\nexport function updateTitle(title: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedTitle, error] = Validation.validateMemberTitle(title)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n                error: makeError({\n                    code: 'invalid',\n                    message: error.message\n                })\n            })\n        } else {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n                title: validatedTitle\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\nexport interface Evaluate extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE\n}\n\nexport interface EvaluateSuccess extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n}\n\nexport interface EvaluateError extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR\n}\n\nexport function evaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.manageMembershipView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                manageMembershipView: {\n                    viewModel: {\n                        editableMemberProfile\n                    }\n                }\n            }\n        } = state\n\n        if (editableMemberProfile.title.validationState.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS\n        })\n    }\n}\n\nexport interface Save extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_START> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR\n}\n\nexport function save() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n        })\n\n        const state = getState()\n        if (!state.views.manageMembershipView.viewModel) {\n            throw new Error('Argh, no view model?!?')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                manageMembershipView: {\n                    viewModel: { organization, editableMemberProfile }\n                }\n            },\n            app: { config }\n        } = state\n\n        const update = {\n            title: editableMemberProfile.title.value\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.updateMember(organization.id, username, update)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n            })\n        } catch (ex) {\n            console.error('error saving member profile', ex)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n","import * as React from 'react'\nimport { Button, Modal, Input } from 'antd';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport {\n    Editable, ValidationErrorType, SyncState, EditState,\n    SaveState, ValidationState\n} from '../../../../../types'\nimport MainMenu from '../../../../menu/component'\nimport './component.css'\n\nexport interface ManageMembershipProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    onLeaveOrganization: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n    onFinish: () => void\n}\n\ninterface MangeMembershipState {\n}\n\nclass ManageMembership extends React.Component<ManageMembershipProps, MangeMembershipState> {\n    constructor(props: ManageMembershipProps) {\n        super(props)\n    }\n\n    doLeaveOrg() {\n        // alert('this will leave you the org')\n        // this.props.onLeaveOrganization(this.props.organization.id)\n        const confirmed = (() => {\n            this.doLeaveOrgConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Really leave this organization?',\n            content: (\n                <p>\n                    This is not reversible.\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onDone() {\n        this.props.onFinish()\n    }\n\n    doLeaveOrgConfirmed() {\n        // alert('this will leave you the org')\n        this.props.onLeaveOrganization(this.props.organization.id)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onSave()\n    }\n\n    onTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateTitle(e.target.value)\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'ManageMembership-validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'ManageMembership-validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'ManageMembership-sync-dirty'\n            default:\n                return 'ManageMembership-validation-ok'\n        }\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editMembership\"\n                className=\"ManageMembership-editorTable\"\n                onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"ManageMembership-headerRow\">\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Edit\n                    </div>\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Preview\n                    </div>\n                </div>\n                <div className=\"ManageMembership-editorTable-row\">\n                    <div className=\"ManageMembership-editCol ManageMembership-editCell\">\n                        <div className=\"ManageMembership-editorTable-labelCol\">\n                            <span className=\"field-label ManageMembership-titleLabel\">\n                                title\n                            </span>\n                        </div>\n                        <div className=\"ManageMembership-editorTable-controlCol\">\n                            <Input value={this.props.editableMemberProfile.title.value || ''}\n                                className={this.calcFieldClass(this.props.editableMemberProfile.title)}\n                                onChange={this.onTitleChange.bind(this)} />\n                        </div>\n                    </div>\n                    <div className=\"ManageMembership-previewCol ManageMembership-previewCell\">\n                        <div className=\"ManageMembership-titlePreview\">\n                            {this.props.editableMemberProfile.title.value}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"ManageMembership-editorFooter\">\n                    <Button icon=\"save\"\n                        form=\"editMembership\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                </Button>\n                </div>\n            </form>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onDone.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageMembership scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <h3>\n                    Edit Your Membership Profile\n                </h3>\n\n                <div className=\"ManageMembership-body\">\n                    {this.renderEditor()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ManageMembership","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/manageMembership'\n\nimport { StoreState, EditState, SaveState, ValidationState } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\ninterface DispatchProps {\n    onLeaveOrganization: (organizationId: string) => void,\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    if (!state.views.manageMembershipView.viewModel) {\n        throw new Error('View model missing')\n    }\n    const {\n        auth: { authorization: { username } },\n        views: {\n            manageMembershipView: {\n                viewModel: { organization, editableMemberProfile, editState, saveState, validationState }\n            }\n        }\n    } = state\n    return {\n        username, organization, editableMemberProfile,\n        editState, saveState, validationState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLeaveOrganization: (organizationId: string) => {\n            dispatch(actions.leaveOrg(organizationId) as any)\n        },\n        onUpdateTitle: (title: string) => {\n            dispatch(actions.updateTitle(title) as any)\n        },\n        onSave: () => {\n            dispatch(actions.save() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport { Alert, Collapse } from 'antd';\nimport './component.css'\nimport { AnError } from './api';\n\nexport interface ErrorProps {\n    error: AnError\n}\n\ninterface ErrorState {\n\n}\n\nexport default class Error extends React.Component<ErrorProps, ErrorState> {\n    constructor(props: ErrorProps) {\n        super(props)\n    }\n\n    renderDetail() {\n        return (\n            <table className='errorTable'>\n                <tbody>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">generated at</span>\n                        </th>\n                        <td>\n                            {\n                                Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(this.props.error.at)\n                            }\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">error id</span>\n                        </th>\n                        <td>\n                            <span style={{ fontFamily: 'monospace' }}>{this.props.error.id}</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">explanation</span>\n                        </th>\n                        <td>\n                            {this.props.error.detail}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    renderInfo() {\n        if (!this.props.error.info) {\n            return (\n                <div style={{ textAlign: 'left', fontStyle: 'italic' }}>\n                    No additional information\n                </div>\n            )\n        }\n        return (\n            <div>\n                additional info here ...\n            </div>\n        )\n    }\n\n    render() {\n        const description = (\n            <div>\n                <p>\n                    {this.props.error.message}\n                </p>\n                <Collapse bordered={false} style={{ backgroundColor: 'transparent' }}>\n                    <Collapse.Panel header=\"detail\" key=\"1\" style={{ backgroundColor: 'transparent' }}>\n                        {this.renderDetail()}\n                    </Collapse.Panel>\n                </Collapse>\n                <Collapse bordered={false} style={{ backgroundColor: 'transparent' }}>\n                    <Collapse.Panel header=\"additional info\" key=\"1\" style={{ backgroundColor: 'transparent' }}>\n                        {this.renderInfo()}\n                    </Collapse.Panel>\n                </Collapse>\n            </div>\n        )\n\n        return (\n            <Alert\n                type=\"error\"\n                showIcon\n                message=\"Error\"\n                className=\"Error\"\n                description={description}\n            />\n        )\n    }\n}","import * as React from 'react'\nimport { ManageMembershipView, ComponentLoadingState, StoreState } from '../../../../../types'\nimport Container from './container'\nimport Error from '../../../../../combo/error/component'\n\nexport interface Props {\n    organizationId: string\n    view: ManageMembershipView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <Error error={error} />\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'missing-error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/manageMembership'\nimport { AnError, makeError } from '../../../../../combo/error/api'\nimport { Spin, Alert } from 'antd';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: ManageMembershipView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.manageMembershipView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, EditableOrganization, ValidationState, EditState, ValidationErrorType, SyncState } from '../../types'\nimport Validation from '../../data/models/organization/validation'\nimport * as orgModel from '../../data/models/organization/model'\n\n// ACTIONS\n\n// Loading the editor\nexport interface Load extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action<ActionFlag.EDIT_ORG_LOAD_ERROR> {\n    type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.EDIT_ORG_UNLOAD> {\n    type: ActionFlag.EDIT_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface EditOrgEvaluate extends Action<ActionFlag.EDIT_ORG_EVALUATE> {\n    type: ActionFlag.EDIT_ORG_EVALUATE\n}\n\nexport interface EditOrgEvaluateOK extends Action<ActionFlag.EDIT_ORG_EVALUATE_OK> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_OK\n}\n\nexport interface EditOrgEvaluateErrors extends Action<ActionFlag.EDIT_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n}\n\n// Saving\n\nexport interface EditOrgSave extends Action<ActionFlag.EDIT_ORG_SAVE> {\n    type: ActionFlag.EDIT_ORG_SAVE\n}\n\nexport interface EditOrgSaveStart extends Action<ActionFlag.EDIT_ORG_SAVE_START> {\n    type: ActionFlag.EDIT_ORG_SAVE_START\n}\n\nexport interface EditOrgSaveSuccess extends Action<ActionFlag.EDIT_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n}\n\nexport interface EditOrgSaveError extends Action<ActionFlag.EDIT_ORG_SAVE_ERROR> {\n    type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Updating name field\n\nexport interface EditOrgUpdateName extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface EditOrgUpdateNameSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface EditOrgUpdateNameError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface EditOrgUpdateLogoUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL,\n    name: string | null\n}\n\nexport interface EditOrgUpdateLogoUrlSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    logoUrl: string | null\n}\n\nexport interface EditOrgUpdateLogoUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating description field\n\nexport interface EditOrgUpdateDescription extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\n// export function editOrgStart(id: string): LoadStart {\n//     return {\n//         type: ActionFlag.EDIT_ORG_LOAD_START,\n//         id: id\n//     }\n// }\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_START\n    }\n}\n\nexport function loadSuccess(editedOrganization: EditableOrganization, organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n        editedOrganization: editedOrganization,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.EDIT_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function editOrgEvaluateOk(): EditOrgEvaluateOK {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_OK\n    }\n}\n\nexport function editOrgEvaluateErrors(): EditOrgEvaluateErrors {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Save\n\n// export function editOrgSave(): EditOrgSave {\n//     return {\n//         type: ActionFlag.EDIT_ORG_SAVE\n//     }\n// }\n\nexport function editOrgSaveStart(): EditOrgSaveStart {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_START\n    }\n}\n\nexport function editOrgSaveSuccess(): EditOrgSaveSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n    }\n}\n\nexport function editOrgSaveError(error: AppError): EditOrgSaveError {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Update Name\n\nexport function editOrgUpdateNameSuccess(name: string): EditOrgUpdateNameSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function editOrgUpdateNameError(name: string, error: ValidationState): EditOrgUpdateNameError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\n// export function editOrgUpdateIdSuccess(id: string): EditOrgUpdateIdSuccess {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//         id: id\n//     }\n// }\n\n// Update Logo Url\n\nexport function editOrgUpdateLogoUrlSuccess(logoUrl: string | null): EditOrgUpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(logoUrl: string | null, error: ValidationState): EditOrgUpdateLogoUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n\n// Update Id\n\n// export function editOrgUpdateIdError(id: string, error: UIError): EditOrgUpdateIdError {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//         id: id,\n//         error: error\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(description: string): EditOrgUpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function editOrgUpdateDescriptionError(description: string, error: ValidationState): EditOrgUpdateDescriptionError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        // const model = new Model({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url,\n        //     userProfileServiceURL: config.services.UserProfile.url,\n        //     workspaceServiceURL: config.services.Workspace.url,\n        //     serviceWizardURL: config.services.ServiceWizard.url\n        // })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        return orgClient.getOrg(organizationId)\n            .then((org) => {\n                if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                    throw new Error('May not edit an inaccessible private org!')\n                }\n                const editableOrg: EditableOrganization = {\n                    id: {\n                        value: org.id,\n                        remoteValue: org.id,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgId(org.id)[1]\n                    },\n                    name: {\n                        value: org.name,\n                        remoteValue: org.name,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgName(org.name)[1]\n                    },\n                    logoUrl: {\n                        value: org.logoUrl,\n                        remoteValue: org.logoUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgLogoUrl(org.logoUrl)[1]\n                    },\n                    homeUrl: {\n                        value: org.homeUrl,\n                        remoteValue: org.homeUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgHomeUrl(org.homeUrl)[1]\n                    },\n                    researchInterests: {\n                        value: org.researchInterests,\n                        remoteValue: org.researchInterests,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgResearchInterests(org.researchInterests)[1]\n                    },\n                    description: {\n                        value: org.description,\n                        remoteValue: org.description,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgDescription(org.description)[1]\n                    },\n                    isPrivate: {\n                        value: org.isPrivate,\n                        remoteValue: org.isPrivate,\n                        syncState: SyncState.NEW,\n                        validationState: {\n                            type: ValidationErrorType.OK,\n                            validatedAt: new Date()\n                        }\n                    }\n                }\n                dispatch(loadSuccess(editableOrg, org))\n            })\n            .catch((err) => {\n                console.error('load org error', err)\n                dispatch(loadError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function editOrgSave() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(editOrgSaveStart())\n\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                editOrgView: {\n                    viewModel: { organization, editedOrganization }\n                }\n            },\n            app: { config } } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!editedOrganization) {\n            dispatch(editOrgSaveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        const update = {\n            name: editedOrganization.name.value,\n            logoUrl: editedOrganization.logoUrl.value,\n            description: editedOrganization.description.value,\n            isPrivate: editedOrganization.isPrivate.value,\n            homeUrl: editedOrganization.homeUrl.value,\n            researchInterests: editedOrganization.researchInterests.value\n        }\n\n        orgClient.updateOrg(organization.id, update)\n            .then(() => {\n                dispatch(editOrgSaveSuccess())\n            })\n            .catch((error) => {\n                console.error('error adding', editedOrganization, error)\n                dispatch(editOrgSaveError({\n                    code: 'invalid',\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function editOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                editOrgView: {\n                    viewModel: {\n                        editedOrganization\n                    }\n                }\n            }\n        } = state\n\n        if (!editedOrganization) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(editOrgEvaluateOk())\n    }\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateNameError(validatedName, error))\n        } else {\n            dispatch(editOrgUpdateNameSuccess(validatedName))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateLogoUrlError(validatedLogoUrl, error))\n        } else {\n            dispatch(editOrgUpdateLogoUrlSuccess(validatedLogoUrl))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: validatedHomeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n                homeUrl: validatedHomeUrl\n            } as UpdateHomeUrlSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            } as UpdateResearchInterestsSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>,\n        getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(editOrgUpdateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // No validation for now.\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate: isPrivate\n        })\n        dispatch(editOrgEvaluate())\n    }\n} ","import * as React from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Marked } from 'marked-ts';\nimport { Button, Icon, Modal, Checkbox, Input, Tooltip, Table, Collapse, Tabs } from 'antd';\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState,\n    EditState, ValidationErrorType, Editable, SyncState, EditableString, EditableNullableString, EditableBoolean\n} from '../../../../../types';\nimport './component.css'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport TextArea from 'antd/lib/input/TextArea';\nimport MainMenu from '../../../../menu/component';\n\nexport interface EditOrganizationProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n    onFinish: () => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\nexport interface EditOrganizationState {\n    cancelToBrowser: boolean;\n    cancelToViewer: boolean;\n    navigateTo: NavigateTo;\n}\n\nclass EditOrganization extends React.Component<EditOrganizationProps, EditOrganizationState> {\n\n    origin: string;\n\n    constructor(props: EditOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.origin = document.location!.origin\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organization Editor Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations editor...</p>\n                </div>\n            )\n        })\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onClickCancelToViewer() {\n        if (!this.isModified()) {\n            this.setState({ cancelToViewer: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToViewer: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onEditOrgSave()\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateName(e.target.value)\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value)\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        console.warn('no updating id, naughty!')\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY)\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.name.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.name)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={this.onNameChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.name)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-name\">\n                        {this.props.editedOrganization.name.value || ''}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                            </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.id.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.id)}\n                            placeholder={placeholder}\n                            onChange={this.onIdChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.id)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-id\">\n                        <span style={{ color: 'silver' }}>{this.origin}/#org/</span>\n                        {this.props.editedOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    // renderLogoURLRowx() {\n    //     const tooltip = (\n    //         <React.Fragment>\n    //             <p>\n    //                 Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n    //                 this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n    //                 generated color (based on your org id).\n    //             </p>\n    //             <p>\n    //                 Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n    //                 to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n    //             </p>\n    //             <table>\n    //                 <tbody>\n    //                     <tr>\n    //                         <th>\n    //                             required\n    //                         </th>\n    //                         <td>\n    //                             no\n    //                         </td>\n    //                     </tr>\n\n    //                     <tr>\n    //                         <th>\n    //                             max length\n    //                         </th>\n    //                         <td>\n    //                             1000 characters\n    //                         </td>\n    //                     </tr>\n    //                     <tr>\n    //                         <th>\n    //                             allowed\n    //                         </th>\n    //                         <td>\n    //                             a full https:// url. E.g. https://my.org/myimage.png<br />\n    //                             note that only <i>https</i> urls are accepted.\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             </table>\n    //         </React.Fragment>\n    //     )\n    //     const placeholder = \"The URL for your Organization's logo (optional)\"\n    //     return (\n    //         <div className=\"EditOrganization-row\">\n    //             <div className=\"EditOrganization-col1\">\n    //                 <div className=\"EditOrganization-formLabel field-label\">\n    //                     <Tooltip title={tooltip}>\n    //                         Logo URL\n    //                     </Tooltip>\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col2\">\n    //                 <div className=\"EditOrganization-formControl\">\n    //                     <Input value={this.props.editedOrganization.logoUrl.value || ''}\n    //                         className={this.calcFieldClass(this.props.editedOrganization.logoUrl)}\n    //                         placeholder={placeholder}\n    //                         onChange={this.onLogoUrlChange.bind(this)} />\n    //                     {this.renderFieldError(this.props.editedOrganization.logoUrl)}\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col3\">\n    //                 <div className=\"EditOrganization-preview-logo\">\n    //                     {this.renderLogoPreview()}\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    // renderHomeURLRow() {\n    //     const tooltip = (\n    //         <React.Fragment>\n    //             <p>\n    //                 Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n    //                 it also exists outside of KBase.\n    //             </p>\n    //             <table>\n    //                 <tbody>\n    //                     <tr>\n    //                         <th>\n    //                             required\n    //                         </th>\n    //                         <td>\n    //                             no\n    //                         </td>\n    //                     </tr>\n\n    //                     <tr>\n    //                         <th>\n    //                             max length\n    //                         </th>\n    //                         <td>\n    //                             1000 characters\n    //                         </td>\n    //                     </tr>\n    //                     <tr>\n    //                         <th>\n    //                             allowed\n    //                         </th>\n    //                         <td>\n    //                             a full url. E.g. http://my.org/myimage.png<br />\n    //                             note that both <i>http></i> and <i>https</i> urls are accepted.\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             </table>\n    //         </React.Fragment>\n    //     )\n    //     const placeholder = \"The URL for your Organization's home page (optional)\"\n    //     return (\n    //         <div className=\"EditOrganization-row\">\n    //             <div className=\"EditOrganization-col1\">\n    //                 <div className=\"EditOrganization-formLabel field-label\">\n    //                     <Tooltip title={tooltip}>\n    //                         Home Page URL\n    //                     </Tooltip>\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col2\">\n    //                 <div className=\"EditOrganization-formControl\">\n    //                     <Input value={this.props.editedOrganization.homeUrl.value || ''}\n    //                         className={this.calcFieldClass(this.props.editedOrganization.homeUrl)}\n    //                         placeholder={placeholder}\n    //                         onChange={this.onHomeUrlChange.bind(this)} />\n    //                     {this.renderFieldError(this.props.editedOrganization.homeUrl)}\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col3\">\n    //                 <div className=\"EditOrganization-field-name\">\n    //                     <a href={this.props.editedOrganization.homeUrl.value || ''} target=\"_blank\">{this.props.editedOrganization.homeUrl.value || ''}</a>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value &&\n            homeUrlField.validationState.type === ValidationErrorType.OK) {\n            const url = homeUrlField.value\n            const tooltipTitle = 'Try out your url by clicking this link'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle} >\n                        <a href={url} target=\"_blank\">\n                            <Icon type=\"link\" />\n                        </a>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    // renderPrivatePublicRow() {\n    //     const tooltip = (\n    //         <React.Fragment>\n    //             <p>\n    //                 Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n    //                 as an Org page for any non-member.\n    //             </p>\n    //             <p>\n    //                 You may invite users directly to your org. When doing so they will receive a notification with a link to the\n    //                 org page. When a user lands on the org page they will not be shown information about the org, but will be available\n    //                 to accept the invitation and instantly have access to it.\n    //             </p>\n    //             <p>\n    //                 A user with an invitation who lands on the org page will not see information about the org, but will be able to\n    //                 submit a Join request.\n    //             </p>\n    //             {/* {this.renderCollapse((\n    //                 <React.Fragment>\n    //                     <p>\n    //                         You may invite users directly to your org. When doing so they will receive a notification with a link to the\n    //                         org page. When a user lands on the org page they will not be shown information about the org, but will be available\n    //                         to accept the invitation and instantly have access to it.\n    //                     </p>\n    //                     <p>\n    //                         A user with an invitation who lands on the org page will not see information about the org, but will be able to\n    //                         submit a Join request.\n    //                     </p>\n    //                 </React.Fragment>\n    //             ))} */}\n\n    //             <table>\n    //                 <tbody>\n    //                     <tr>\n    //                         <th>\n    //                             required\n    //                         </th>\n    //                         <td>\n    //                             no\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             </table>\n    //         </React.Fragment>\n    //     )\n    //     return (\n    //         <div className=\"EditOrganization-row\">\n    //             <div className=\"EditOrganization-col1\">\n    //                 <div className=\"EditOrganization-formLabel field-label\">\n    //                     <Tooltip title={tooltip}>\n    //                         Hidden?\n    //                     </Tooltip>\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col2\">\n    //                 <div className=\"EditOrganization-formControl\">\n    //                     <Checkbox\n    //                         checked={this.props.editedOrganization.isPrivate.value}\n    //                         className={this.calcFieldClass(this.props.editedOrganization.isPrivate)}\n    //                         onChange={this.onIsPrivateChange.bind(this)} />\n    //                     {this.renderFieldError(this.props.editedOrganization.isPrivate)}\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col3\">\n    //                 <div className=\"EditOrganization-preview-isPrivate\">\n    //                     {this.renderIsPrivate(this.props.editedOrganization.isPrivate.value)}\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    // renderResearchInterestsRow() {\n    //     const tooltip = (\n    //         <React.Fragment>\n    //             <p>\n    //                 Each organization must have a short description of research interests or purpose.\n    //             </p>\n    //             <p>\n    //                 This text is displayed in the organizations list and the organization's page. It is most helpful\n    //                 in the list context to help users quickly scan the list.\n    //             </p>\n    //             <table>\n    //                 <tbody>\n    //                     <tr>\n    //                         <th>\n    //                             required\n    //                         </th>\n    //                         <td>\n    //                             yes\n    //                         </td>\n    //                     </tr>\n\n    //                     <tr>\n    //                         <th>\n    //                             max length\n    //                         </th>\n    //                         <td>\n    //                             200 characters\n    //                         </td>\n    //                     </tr>\n    //                     <tr>\n    //                         <th>\n    //                             allowed\n    //                         </th>\n    //                         <td>\n    //                             unformatted text\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             </table>\n    //         </React.Fragment>\n    //     )\n    //     const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n    //     return (\n    //         <div className=\"EditOrganization-row\">\n    //             <div className=\"EditOrganization-col1\">\n    //                 <div className=\"EditOrganization-formLabel field-label\">\n    //                     <Tooltip title={tooltip}>\n    //                         Research Interests\n    //                     </Tooltip>\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col2\">\n    //                 <div className=\"EditOrganization-formControl\">\n    //                     <TextArea value={this.props.editedOrganization.researchInterests.value || ''}\n    //                         className={this.calcFieldClass(this.props.editedOrganization.researchInterests) + ' EditOrganization-control-researchInterests'}\n    //                         autosize={{ minRows: 2, maxRows: 2 }}\n    //                         placeholder={placeholder}\n    //                         onChange={this.onResearchInterestsChange.bind(this)} />\n    //                     {this.renderFieldError(this.props.editedOrganization.researchInterests)}\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col3\">\n    //                 <div className=\"EditOrganization-preview-researchInterests\">\n    //                     {this.props.editedOrganization.researchInterests.value || ''}\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    // renderDescriptionRow() {\n    //     const tooltip = (\n    //         <React.Fragment>\n    //             <p>\n    //                 Each organization must have a description which communicates the purpose of this organization.\n    //             </p>\n    //             <p>\n    //                 The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n    //                 and may be quite long. It will be presented in a scrolling area.\n    //             </p>\n    //             <p>\n    //                 Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n    //             </p>\n    //             <table>\n    //                 <tbody>\n    //                     <tr>\n    //                         <th>\n    //                             required\n    //                         </th>\n    //                         <td>\n    //                             yes\n    //                         </td>\n    //                     </tr>\n\n    //                     <tr>\n    //                         <th>\n    //                             max length\n    //                         </th>\n    //                         <td>\n    //                             1024 characters\n    //                         </td>\n    //                     </tr>\n    //                     <tr>\n    //                         <th>\n    //                             allowed\n    //                         </th>\n    //                         <td>\n    //                             standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             </table>\n    //         </React.Fragment>\n    //     )\n    //     const placeholder = 'Text or Markdown describing your Organization'\n    //     return (\n    //         <div className=\"EditOrganization-row\">\n    //             <div className=\"EditOrganization-col1\">\n    //                 <div className=\"EditOrganization-formLabel field-label\">\n    //                     <Tooltip title={tooltip}>\n    //                         Description\n    //                     </Tooltip>\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col2\">\n    //                 <div className=\"EditOrganization-formControl\">\n    //                     <TextArea value={this.props.editedOrganization.description.value || ''}\n    //                         className={this.calcFieldClass(this.props.editedOrganization.description) + ' EditOrganization-control-description'}\n    //                         autosize={{ minRows: 5, maxRows: 15 }}\n    //                         placeholder={placeholder}\n    //                         onChange={this.onDescriptionChange.bind(this)} />\n    //                     {this.renderFieldError(this.props.editedOrganization.description)}\n    //                 </div>\n    //             </div>\n    //             <div className=\"EditOrganization-col3\">\n    //                 <div className=\"EditOrganization-preview-description\"\n    //                     dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.editedOrganization.description.value || '') })}\n    //                 />\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"editOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button icon=\"close\"\n                type=\"danger\"\n                onClick={this.onFinish.bind(this)}>\n                Cancel\n            </Button>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Edit Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editOrganizationForm\" className=\"EditOrganization-editor scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {/* <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div style={{ flex: '1 1 0px' }}>\n                            <h3>Edit Your Organization</h3>\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col3\">\n                        <h3>Preview</h3>\n                    </div>\n                </div> */}\n                {this.renderEditorHeader()}\n                <div className=\"EditOrganization-body\">\n                    {this.renderNameRow(this.props.editedOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.editedOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.editedOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.editedOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.editedOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.editedOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.editedOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"EditOrganization-row\">\n                        <div className=\"EditOrganization-col1\">\n                        </div>\n                        <div className=\"EditOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.editedOrganization.name.value && this.props.editedOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.editedOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.editedOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (!logoUrlField.value) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Close\n                        </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"save\"\n                        form=\"editOrganizationForm\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                    </Button>\n                </span>\n            </span>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        return (\n            <div className=\"EditOrganization\">\n                {/* <MainMenu buttons={this.renderMenuButtons()} /> */}\n\n                <div style={{ minWidth: '50em', maxWidth: '100em', margin: '0 auto' }}>\n                    {this.renderEditor()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default EditOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { StoreState, EditableOrganization, EditState, SaveState, ValidationState } from '../../../../../types';\nimport {\n    editOrgSave,\n    updateName,\n    updateDescription, updateLogoUrl, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../../../redux/actions/editOrg';\nimport EditOrganization from './component';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\ninterface OwnProps {\n    onFinish: () => void\n}\n\nexport interface StateProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface DispatchProps {\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (gravatarHash: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.editOrgView.viewModel) {\n        throw new Error('What, no view model??')\n    }\n    const {\n        views: {\n            editOrgView: {\n                viewModel: { editState, saveState, validationState, editedOrganization, organization }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        editedOrganization,\n        organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onEditOrgSave: () => {\n            dispatch(editOrgSave() as any)\n        },\n        onUpdateName: (name: string) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (gravatarHash: string | null) => {\n            dispatch(updateLogoUrl(gravatarHash) as any)\n        },\n        // onUpdateId: (id) => {\n        //     dispatch(editOrgUpdateId(id) as any)\n        // },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(EditOrganization)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, EditOrgView } from '../../../../../types'\nimport Container from './container'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    view: EditOrgView\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Editor...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/editOrg'\nimport { Alert, Spin } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    view: EditOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.editOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { NarrativeState } from '../../../../../types';\nimport { Icon, Button, Alert, Select, Tooltip } from 'antd';\nimport './component.css'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport MainMenu from '../../../../menu/component';\nimport { OrganizationNarrative, AccessibleNarrative } from '../../../../../data/models/narrative';\nimport NiceElapsedTime from '../../../../NiceElapsedTime';\n\nexport interface Props {\n    organization: orgModel.Organization\n    narratives: Array<OrganizationNarrative>\n    relation: orgModel.Relation\n    selectedNarrative: OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    filter: string\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: OrganizationNarrative) => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nexport class RequestAddNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    doSelectNarrative(narrative: OrganizationNarrative) {\n        this.props.doSelectNarrative(narrative)\n    }\n\n    doSendRequest() {\n        if (this.props.selectedNarrative === null) {\n            console.warn('attempt to send request without selected narrative')\n            return\n        }\n        this.props.doSendRequest(this.props.organization.id, this.props.selectedNarrative.narrative.workspaceId)\n    }\n\n    canSendRequest() {\n        if (this.props.selectedNarrative) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderPermission(narrative: AccessibleNarrative) {\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                return (\n                    <span>\n                        <Icon type=\"eye\" /> View\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.EDIT:\n                return (\n                    <span>\n                        <Icon type=\"edit\" /> Edit\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> Admin\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> Owner\n                    </span>\n                )\n            default:\n                return (\n                    <span>\n                        ERROR\n                    </span>\n                )\n        }\n    }\n\n    renderPublicPermission(narrative: AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <span>\n                    <Icon type=\"global\" /> Public\n                </span>\n            )\n        } else {\n            return (\n                <span>\n                    <Icon type=\"lock\" /> Private\n                </span>\n            )\n        }\n    }\n\n    renderNarrative(narrative: AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"RequestNarrative-title\">\n                    {narrative.title}\n                </div>\n\n                <div className=\"RequestNarrative-publicPermission\">\n                    {this.renderPublicPermission(narrative)}\n                </div>\n                <div className=\"RequestNarrative-modifiedAt\">\n                    <span className=\"field-label\">\n                        <Icon type=\"save\" />\n                    </span>\n                    {' '}\n                    <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarratives() {\n        if (this.props.narratives.length === 0) {\n            return (\n                <div className=\"message\">\n                    You do not have any Narratives\n                </div>\n            )\n        }\n        return this.props.narratives.map((orgNarrative, index) => {\n            const { status, narrative } = orgNarrative\n            let isSelected\n            if (this.props.selectedNarrative &&\n                narrative.workspaceId === this.props.selectedNarrative.narrative.workspaceId) {\n                isSelected = true\n            } else {\n                isSelected = false\n            }\n            let classNames = ['RequestNarrative-narrativeCell']\n            if (isSelected) {\n                classNames.push('RequestNarrative-selected')\n            }\n            let flag\n            switch (status) {\n                case NarrativeState.ASSOCIATED:\n                    classNames.push('RequestNarrative-narrativeInOrg')\n                    flag = (\n                        <Tooltip title=\"This narrative is already associated with this organization\">\n                            <Icon type=\"check\" style={{ color: 'green' }} />\n                        </Tooltip>\n                    )\n                    break\n                case NarrativeState.REQUESTED:\n                    classNames.push('RequestNarrative-narrativeInOrg')\n                    flag = (\n                        <Tooltip title=\"You have already requested that this narrative be added to this organization\">\n                            <Icon type=\"loading\" style={{ color: 'orange' }} />\n                        </Tooltip>\n                    )\n                    break\n                default:\n                    classNames.push('RequestNarrative-narrativeNotInOrg')\n            }\n\n            return (\n                <div\n                    className={classNames.join(' ')}\n                    onClick={() => { this.doSelectNarrative.call(this, orgNarrative) }}\n                    key={String(index)}>\n                    <div className=\"RequestNarrative-narrativeFlag\">\n                        {flag}\n                    </div>\n                    <div className=\"RequestNarrative-narrative\">\n                        {this.renderNarrative(orgNarrative.narrative)}\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    onSearchSubmit() {\n        return\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\"\n                className=\"RequestNarrative-searchBar\"\n                onSubmit={this.onSearchSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search your Narratives\"\n                    // onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                />\n                <Button\n                    className=\"RequestNarrative-button\"\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n            </form>\n        )\n    }\n\n    renderFeedbackBar() {\n        return (\n            <div>\n                Showing\n                {' '}\n                {\n                    Intl.NumberFormat('en-US', {\n                        style: 'decimal',\n                        useGrouping: true\n                    }).format(this.props.narratives.length)\n                }\n                {' '}\n                narratives\n            </div>\n        )\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'title':\n                this.props.doSortBy(narrativeModel.Sort.TITLE)\n                break\n            case 'savedAt':\n                this.props.doSortBy(narrativeModel.Sort.LAST_SAVED)\n                break\n        }\n    }\n\n    onSortDirectionChange() {\n    }\n\n    onFilterChange() {\n    }\n\n    renderFilterSortBar() {\n        return (\n            <div className=\"RequestNarrative-filterSortBar\">\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"title\" key=\"title\">Title</Select.Option>\n                    <Select.Option value=\"savedAt\" key=\"savedAt\">Last saved</Select.Option>\n                </Select>\n            </div>\n        )\n    }\n\n    renderNarrativeSelector() {\n        return (\n            <div className=\"RequestNarrative-narrativeSelector scrollable-flex-column\">\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {/* <div style={{ flex: '0 0 10em' }}>\n                        {this.renderSearchBar()}\n                    </div> */}\n                    <div style={{ flex: '1 1 0px' }}>\n                        {this.renderFilterSortBar()}\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-feedbackBar\">\n                    {this.renderFeedbackBar()}\n                </div>\n                <div className=\"RequestNarrative-narratives scrollable-flex-column\">\n                    <div className=\"RequestNarrative-narrativesTable\">\n                        {this.renderNarratives()}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderSelectedNarrativeButton() {\n        if (!this.props.selectedNarrative) {\n            return\n        }\n        if (this.props.selectedNarrative.status === NarrativeState.ASSOCIATED) {\n            return (\n                <Alert type=\"info\" message=\"This Narrative is associated with this Organization\" />\n            )\n        } else if (this.props.selectedNarrative.status === NarrativeState.REQUESTED) {\n            return (\n                <Alert type=\"warning\" message=\"You have requested to associate this Narrative with this Organization\" />\n            )\n        }\n        let buttonLabel\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            buttonLabel = 'Add Selected Narrative to Organization'\n        } else {\n            buttonLabel = 'Request Association of Selected Narrative to Organization'\n        }\n        return (\n            <Button\n                type=\"primary\"\n                onClick={this.doSendRequest.bind(this)}\n                disabled={!this.canSendRequest.call(this)}\n            >{buttonLabel}</Button>\n        )\n    }\n\n    renderSelectedNarrative() {\n        if (this.props.selectedNarrative) {\n            return (\n                <div className=\"RequestNarrative-selectedNarrative\">\n                    <div className=\"RequestNarrative-title\">\n                        {this.props.selectedNarrative.narrative.title}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        {' '}\n                        <NiceElapsedTime time={this.props.selectedNarrative.narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            )\n        } else {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to request association of\n                        it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            } else {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to associate it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            }\n        }\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Done\n                </Button>\n                </div>\n            </div >\n        )\n    }\n\n    renderAlert() {\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization member, you are able to request association of any Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        If your Narrative association request is accepted by an Organization administrator,\n                        it will appear for all members on the main Organization page.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        } else {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization administrator, you will be able to immediate associate a Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        }\n    }\n\n    renderSelectedAlert() {\n        if (this.props.selectedNarrative && this.props.selectedNarrative.status === NarrativeState.NONE) {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const warning = (\n                    <React.Fragment>\n                        <p>\n                            Please be aware that if your request to associate this Narrative is accepted,\n                            you will be unable to directly remove it from the Organization.\n                    </p>\n                        <p>\n                            Only Organization administrators are able to remove associated Narratives from the Organization.\n                    </p>\n                    </React.Fragment>\n                )\n                return (\n                    <Alert type=\"warning\"\n                        message={warning}\n                        style={{ marginBottom: '10px', marginTop: '10px' }} />\n                )\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"RequestNarrative scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"RequestNarrative-body scrollable-flex-column\">\n                    <div className=\"RequestNarrative-selectNarrativeCol scrollable-flex-column\">\n                        <h3>Select a Narrative to Associate with this Organization</h3>\n                        {this.renderNarrativeSelector()}\n                    </div>\n                    <div className=\"RequestNarrative-selectedNarrativeCol\">\n                        <h3>Selected Narrative</h3>\n                        {/* {this.renderAlert()} */}\n                        {this.renderSelectedNarrative()}\n                        {this.renderSelectedAlert()}\n                        <div className=\"RequestNarrative-selectedNarrativeButtonBar\">\n                            {this.renderSelectedNarrativeButton()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-footer\">\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RequestAddNarrative","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState, Narrative, View, ViewOrgViewModelKind,\n    RequestNarrativeViewModel\n} from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../lib/error'\nimport { makeError } from '../../../combo/error/api'\nimport { OrganizationNarrative } from '../../../data/models/narrative'\nimport * as viewOrgActions from '../viewOrg'\n\nexport interface Load extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR\n    error: AnError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, narratives: Array<narrativeModel.OrganizationNarrative>, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n        organization, narratives, relation\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const [org, narratives, request, invitation] = await Promise.all([\n                orgClient.getOrganization(organizationId),\n                narrativeClient.getOwnNarratives(organizationId),\n                requestClient.getUserRequestForOrg(organizationId),\n                requestClient.getUserInvitationForOrg(organizationId)\n            ])\n\n            const relation = orgModel.determineRelation(org, username, request, invitation)\n            dispatch(loadSuccess(org, narratives, relation))\n        } catch (ex) {\n            console.error('loading error', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Selecting narrative\nexport interface SelectNarrative {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n}\n\nexport interface SelectNarrativeSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS\n    narrative: narrativeModel.OrganizationNarrative\n}\n\nexport interface SelectNarrativeError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR\n    error: AnError\n}\n\nexport function selectNarrativeStart(): SelectNarrativeStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n    }\n}\n\nexport function selectNarrativeSuccess(narrative: OrganizationNarrative): SelectNarrativeSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function selectNarrativeError(error: AnError): SelectNarrativeError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\nexport function selectNarrative(narrative: OrganizationNarrative) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectNarrativeStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: fetch narrative and populate the selected narrative accordingly...\n        dispatch(selectNarrativeSuccess(narrative))\n    }\n}\n\n// Sending Request\nexport interface SendRequest {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND\n}\n\nexport interface SendRequestStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n}\n\nexport interface SendRequestSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    request: requestModel.Request | boolean\n}\n\nexport interface SendRequestError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n    error: AnError\n}\n\n\nexport function sendRequestStart(): SendRequestStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n    }\n}\n\nexport function sendRequestSuccess(request: requestModel.Request | boolean): SendRequestSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n        request: request\n    }\n}\n\nexport function sendRequestError(error: AnError): SendRequestError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n        error: error\n    }\n}\n\nexport function sendRequest(groupId: string, workspaceId: number) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendRequestStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await orgClient.addOrRequestNarrativeToGroup(groupId, workspaceId)\n            dispatch(sendRequestSuccess(request))\n            dispatch(viewOrgActions.reload(groupId))\n        } catch (ex) {\n            dispatch(sendRequestError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Unloading\n\nexport interface Unload extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface Sort {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT\n    sort: narrativeModel.Sort\n}\n\nexport interface SortStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n}\n\nexport interface SortSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS\n    narratives: Array<narrativeModel.OrganizationNarrative>\n}\n\nexport interface SortError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR\n    error: AnError\n}\n\nfunction ensureView(state: StoreState): View<RequestNarrativeViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { requestNarrativeView } = viewModel.subViews\n    if (requestNarrativeView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return requestNarrativeView\n}\n\nexport function sort(sort: narrativeModel.Sort) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n        } as SortStart)\n\n        const state = getState()\n\n        let view: View<RequestNarrativeViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'missing view model'\n                })\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const sorted = narrativeClient.sortOrganizationNarratives(view.viewModel.narratives, sort)\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n                narratives: sorted\n            } as SortSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as types from '../../../../../types'\nimport Component from './component'\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport { RequestNarrativeViewModel } from '../../../../../types';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    // sortDirection: types.SortDirection\n    filter: string\n}\n\ninterface DispatchProps {\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => void\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.requestNarrativeView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const subViewModel: RequestNarrativeViewModel = viewModel.subViews.requestNarrativeView.viewModel\n\n    const {\n        organization, relation, narratives, selectedNarrative,\n    } = subViewModel\n\n    return {\n        organization, relation, narratives, selectedNarrative,\n        searching: false,\n        sortBy: 'title',\n        filter: ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        doSendRequest: (groupId: string, workspaceId: number) => {\n            dispatch(actions.sendRequest(groupId, workspaceId) as any)\n        },\n        doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => {\n            dispatch(actions.selectNarrative(narrative) as any)\n        },\n        doSortBy: (sortBy: narrativeModel.Sort) => {\n            dispatch(actions.sort(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: View<RequestNarrativeViewModel | NoneViewModel>\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <React.Fragment>\n                <Icon type=\"loading\" />{' '}Loading Your Narratives...\n            </React.Fragment>\n        )\n        return (\n            <Alert type=\"info\" message={message}\n                style={{ padding: '20px', width: '30em', margin: '30px auto 0 auto', textAlign: 'center' }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport { Icon, Alert } from 'antd'\nimport {\n    View, RequestNarrativeViewModel, StoreState, ViewOrgViewModelKind,\n    ViewState, NoneViewModel\n} from '../../../../../types'\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<RequestNarrativeViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    // This bit deals with the fact that we are a subview \n    // and it keeps TS happy.\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.requestNarrativeView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { Marked } from 'marked-ts'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { ViewOrgViewModel, SubViews } from '../../../../types'\nimport { Button, Modal, Icon, Tooltip, Card, Dropdown, Menu, Alert, Tabs } from 'antd'\nimport Header from '../../../Header'\nimport Members from './members/reduxAdapter'\nimport Requests from './requests/container'\nimport BriefOrganizationHeader from './BriefOrganizationHeader'\nimport RelatedOrganizations from './relatedOrgs/reduxAdapter'\nimport ManageRelatedOrganizations from './manageRelatedOrganizations/loader'\nimport InviteUser from './inviteUser/loader'\nimport Narratives from './narratives/component'\nimport ManageMembership from './manageMembership/loader'\nimport EditOrganization from './editOrganization/loader'\nimport RequestAddNarrative from './requestAddNarrative/loader'\nimport * as requestModel from '../../../../data/models/requests'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport './component.css'\nimport OrgMenu from './OrgMenu';\n\nenum NavigateTo {\n    NONE = 0,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    BROWSER\n}\n\nenum AccordionState {\n    UP = 0,\n    DOWN\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n    accordionState: AccordionState\n    subView: SubViews\n}\n\nexport interface ViewOrganizationProps {\n    viewModel: ViewOrgViewModel\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            },\n            accordionState: AccordionState.UP,\n            subView: SubViews.NORMAL\n        }\n    }\n\n    onManageRelatedOrgs() {\n        this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n    }\n\n    onInviteUser() {\n        this.setState({ subView: SubViews.INVITE_USER })\n    }\n\n    onChangeSubView(subView: SubViews) {\n        this.setState({ subView })\n    }\n\n    onViewMembers() {\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onRequestAddNarrative() {\n        this.setState({ subView: SubViews.ADD_NARRATIVE })\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        this.props.onRemoveNarrative(narrative)\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.props.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    Organization help here...\n                </div>\n            )\n        })\n    }\n\n    onRequestShare(narrative: orgModel.NarrativeResource) {\n        // Drawer.\n        // Drawer.open({\n        //     title: 'Request Access to Narrative',\n        //     content: 'Are you sure?'\n        // })\n        this.setState({ requestAccess: { narrative: narrative } })\n        // alert('not yet implemented')\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: { narrative: null } })\n    }\n\n    buildFooter() {\n        return (\n            <div>\n                {this.renderEditRow()}\n                {/* <p style={{ textAlign: 'center' }}>\n                    You may also  <NavLink to={`/organizations`}><Button type=\"danger\" icon=\"undo\">Return to Orgs</Button></NavLink> to the organizations browser.\n                </p> */}\n            </div>\n        )\n    }\n\n    renderEditRow() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <p style={{ textAlign: 'center' }}>\n                    As the owner of this group, you may <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink> it.\n                </p>\n            )\n        }\n    }\n\n    renderEditButton() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit This Organization</Button></NavLink>\n            )\n        }\n    }\n\n    renderOrg() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <div className=\"ViewOrganization-org-description-org scrollable-flex-column\">\n                <div className=\"ViewOrganization-org-description\"\n                    dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.viewModel.organization.description || '') })}\n                />\n            </div>\n        )\n    }\n\n    // TODO: this should be a component, so we can pick up all the good stuff, which is now commented out...\n    renderOwnerInfo(org: orgModel.Organization) {\n        return (\n            <div className=\"ownerTable\">\n                <div className=\"proprietorCol\">\n\n                    <div className=\"owner\">\n                        <a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                        {' '}\n                        ❨{org.owner.username}❩\n                                </div>\n                    {/* <div className=\"profileOrganization\">\n                        {org.owner.user.organization}\n                    </div>\n                    <div className=\"profileOrganization\">\n                        {org.owner.user.city}, {org.owner.user.state}, {org.owner.user.country}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderRelation(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <div><Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'orange' }} spin={true} />Your membership <b>request</b> is pending</div>\n                        <div><Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button></div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                            <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" />Member</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"unlock\" theme=\"filled\" style={{ marginRight: '4px' }} />You own this organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    isMember(): boolean {\n        if (!this.props.viewModel.organization) {\n            return false\n        }\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    renderMembers() {\n        if (!this.isMember()) {\n            return (\n                <Alert message=\"Membership is only available to members\" type=\"info\" />\n            )\n        }\n        return (\n            <Members\n                organization={this.props.viewModel.organization}\n                relation={this.props.viewModel.relation}\n                onReloadOrg={this.props.onReloadOrg} />\n        )\n\n    }\n\n    renderGroupRequestsRow() {\n        const relation = this.props.viewModel.relation\n        const requests = this.props.viewModel.groupRequests\n        const invitations = this.props.viewModel.groupInvitations\n\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: bad. should not get here in this case...\n        if (requests === null || invitations === null) {\n            return\n        }\n        let inner\n        if (requests.length) {\n            inner = (\n                <div>\n                    group has no pending requests\n                </div>\n            )\n        } else {\n            inner = (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending request{invitations.length > 1 ? 's' : ''}\n\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"col1\">\n                    <span className=\"label\">admin</span>\n                </div>\n                <div className=\"col2\">\n                    <div className=\"relation\">\n                        {inner}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderGroupRequests(requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>) {\n        if (!requests.length) {\n            return (\n                <div className=\"message\">\n                    No pending group requests\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> There\n                        {' '}\n                        {requests.length > 1 ? 'are' : 'is'}\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending invitation{invitations.length > 1 ? 's' : ''}\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization!.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderUserRelationship() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        return (\n            <form className=\"infoTable\">\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <span className=\"label\">your relation</span>\n                    </div>\n                    <div className=\"col2\">\n                        <div className='relation'>\n                            {this.renderRelation(this.props.organization)}\n                        </div>\n                    </div>\n                </div> */}\n                {this.renderGroupRequestsRow()}\n            </form>\n        )\n    }\n\n    renderAdminTasks() {\n        const relation = this.props.viewModel.relation\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: ditto -- silly to test both conditions (this is only to make TS happy btw)\n        const { groupRequests, groupInvitations } = this.props.viewModel\n        if (groupInvitations === null || groupRequests === null) {\n            return\n        }\n        const count = groupRequests.length + groupInvitations.length\n        const title = (\n            <span><Icon type=\"unlock\" />\n                {' '}\n                group requests\n                {' '}\n                <span className=\"ViewOrganization-titleCount\">({count})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-adminTasksBox\">\n                <Card\n                    className=\"slimCard ViewOrganization-adminTasksCard\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={title} >\n                    {this.renderGroupRequests(groupRequests, groupInvitations)}\n                </Card>\n            </div>\n        )\n    }\n\n    renderJoinButton() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        if (this.props.viewModel.relation.type !== orgModel.UserRelationToOrganization.VIEW) {\n            return\n        }\n        return (\n            <Button\n                onClick={this.onJoinClick.bind(this)}\n            >\n                Join this Organization\n                </Button>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderMembersTab() {\n        return (\n            <div className=\"ViewOrganization-membersCol scrollable-flex-column\">\n                {this.renderMembersToolbar()}\n                {this.renderMembers()}\n            </div>\n        )\n    }\n\n    onAcceptRequest(request: requestModel.Request) {\n        this.props.onAcceptRequest(request.id)\n    }\n\n\n    renderMembersToolbar() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite one or more users to this organization\">\n                            <Button\n                                size=\"small\"\n                                style={{ width: '100%' }}\n                                onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" />Invite Users</Button>\n                        </Tooltip>\n                    </div>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite one or more users to this organization\">\n                            <Button\n                                size=\"small\"\n                                style={{ width: '100%' }}\n                                onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" />Invite Users</Button>\n                        </Tooltip>\n                    </div>\n                )\n        }\n    }\n\n    renderToolbarButtons() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n        }\n    }\n\n    renderCombo() {\n        const isAdmin = (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER)\n\n        const isMember = this.props.viewModel.organization.isMember\n\n        // if (!isMember) {\n        //     return (\n        //         <p style={{ fontStyle: 'italic' }}>\n        //             The membership list is only available to members.\n        //         </p>\n        //     )\n        // }\n\n        const tabs = []\n\n        let memberCount\n        if (this.props.viewModel.organization.memberCount - 1) {\n            memberCount = String(this.props.viewModel.organization.memberCount - 1)\n        } else {\n            memberCount = 'Ø'\n        }\n        tabs.push((\n            <Tabs.TabPane\n                tab={<span><Icon type=\"team\" />Members <span className=\"ViewOrganization-tabCount\">({memberCount})</span></span>}\n                key=\"members\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderMembersTab()}\n            </Tabs.TabPane>\n        ))\n\n        if (isMember) {\n            if (isAdmin) {\n                const totalRequestCount = this.props.viewModel.requestInbox.length + this.props.viewModel.requestOutbox.length\n                const totalRequests = (\n                    <span className=\"ViewOrganization-tabCount\">\n                        ({totalRequestCount || 'Ø'})\n                    </span>\n                )\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests {totalRequests} </span>} key=\"inbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={this.props.viewModel.requestInbox} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            } else {\n                const outboxSize = this.props.viewModel.requestOutbox.length\n                let titleCount\n                if (outboxSize) {\n                    titleCount = String(outboxSize)\n                } else {\n                    titleCount = 'Ø'\n                }\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests <span className=\"ViewOrganization-tabCount\">({titleCount})</span></span>} key=\"outbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={[]} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            }\n        }\n\n        const relatedOrgCount = this.props.viewModel.organization.relatedOrganizations.length\n        const relatedOrgTab = (\n            <span>\n                <Icon type=\"team\" />\n                Related Orgs <span className=\"ViewOrganization-tabCount\">({relatedOrgCount})</span>\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane tab={relatedOrgTab} key=\"relatedorgs\" style={{ flexDirection: 'column' }}>\n                <RelatedOrganizations\n                    relatedOrganizations={this.props.viewModel.organization.relatedOrganizations}\n                    organization={this.props.viewModel.organization}\n                    onManageRelatedOrgs={() => { this.onManageRelatedOrgs() }} />\n            </Tabs.TabPane>\n        ))\n\n        return (\n            <Tabs\n                defaultActiveKey=\"members\"\n                className=\"ViewOrganization-tabs\"\n                animated={false}\n                size=\"small\"\n                tabPosition=\"top\"\n            >\n                {tabs}\n            </Tabs>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <div className=\"IconButton\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />\n                    </div>\n                    {/* <Button type=\"default\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />{' '}Back\n                    </Button> */}\n                </span>\n            </span>\n        )\n    }\n\n    onNavigateToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ subView: SubViews.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ subView: SubViews.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ subView: SubViews.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n            case 'addNarrative':\n                this.setState({ subView: SubViews.ADD_NARRATIVE })\n                break\n            case 'manageRelatedOrgs':\n                this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n                break\n        }\n    }\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // return (\n                //     <span><Icon type=\"stop\" />None</span>\n                // )\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <span>\n                        <Tooltip\n                            placement=\"bottom\"\n                            mouseEnterDelay={0.5}\n                            title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                        >\n                            <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                        </Tooltip>\n                    </span>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={menu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={adminMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={ownerMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n        }\n    }\n\n\n    toggleAccordion() {\n        this.setState({\n            accordionState: this.state.accordionState === AccordionState.UP ? AccordionState.DOWN : AccordionState.UP\n        })\n    }\n\n    renderAccordionControl() {\n        let iconType\n        if (this.state.accordionState === AccordionState.UP) {\n            iconType = 'caret-down'\n        } else {\n            iconType = 'caret-up'\n        }\n        return (\n            <div className=\"ViewOrganization-accordion\" onClick={this.toggleAccordion.bind(this)}>\n                <div className=\"ViewOrganization-accordionCol1\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-accordionCol2\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                        <Icon type={iconType} />\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                    {/* <div className=\"ViewOrganization-accordionIcon\">\n                        <Icon type={iconType} />\n                    </div> */}\n                </div>\n                <div className=\"ViewOrganization-accordionCol3\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n\n    renderNormalView() {\n        let orgRowClass\n        let narrativesRowClass\n        if (this.state.accordionState === AccordionState.UP) {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionClosed\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionOpen\"\n        } else {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionOpen\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionClosed\"\n        }\n        orgRowClass += \" scrollable-flex-column\"\n        narrativesRowClass += \" scrollable-flex-column\"\n        return (\n            <div className=\"ViewOrganization-mainRow scrollable-flex-column\">\n                <div className=\"ViewOrganization-mainColumn  scrollable-flex-column\">\n                    <div className={orgRowClass} style={{ minHeight: '0px' }}>\n                        {this.renderOrg()}\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow\">\n                        {this.renderAccordionControl()}\n                    </div>\n                    <div className={narrativesRowClass}>\n                        {/* TODO: move these actions into a redux adapter for narratives \n                    */}\n                        <Narratives\n                            organization={this.props.viewModel.organization}\n                            narratives={this.props.viewModel.narratives}\n                            relation={this.props.viewModel.relation}\n                            sortNarrativesBy={this.props.viewModel.sortNarrativesBy}\n                            searchNarrativesBy={this.props.viewModel.searchNarrativesBy}\n                            onSortNarratives={this.props.onSortNarratives}\n                            onSearchNarratives={this.props.onSearchNarratives}\n                            onRemoveNarrative={this.props.onRemoveNarrative}\n                            onGetViewAccess={this.props.onGetViewAccess}\n                            onRequestAddNarrative={this.onRequestAddNarrative.bind(this)}\n                        />\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-infoColumn\">\n                    {this.renderCombo()}\n                </div>\n            </div>\n        )\n    }\n\n    renderManageRelatedOrgsView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageRelatedOrganizations\n                // organization={this.props.viewModel.organization}\n                // relatedOrganizations={[]}\n                // relation={this.props.viewModel.relation}\n                onFinish={onFinish} />\n        )\n    }\n\n    renderInviteUsersView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <InviteUser onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderManageMembership() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageMembership onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderEditOrganization() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <EditOrganization onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderAddNarrative() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <RequestAddNarrative onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    getSubView() {\n        switch (this.state.subView) {\n            case SubViews.MANAGE_RELATED_ORGS:\n                return this.renderManageRelatedOrgsView()\n            case SubViews.INVITE_USER:\n                return this.renderInviteUsersView()\n            case SubViews.MANAGE_MEMBERSHIP:\n                return this.renderManageMembership()\n            case SubViews.EDIT_ORGANIZATION:\n                return this.renderEditOrganization()\n            case SubViews.ADD_NARRATIVE:\n                return this.renderAddNarrative()\n            case SubViews.NORMAL:\n            default:\n                return this.renderNormalView()\n        }\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return <Redirect push to={\"/organizations\"} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        const uorg = this.props.viewModel.organization as unknown\n        const borg = uorg as orgModel.BriefOrganization\n\n        // TODO: only doing this here so I don't have to do a redux adapter for the menu today...\n\n        const orgMenu = <OrgMenu\n            viewModel={this.props.viewModel}\n            onJoinOrg={this.props.onJoinOrg}\n            onCancelJoinRequest={this.props.onCancelJoinRequest}\n            onAcceptInvitation={this.props.onAcceptInvitation}\n            onRejectInvitation={this.props.onRejectInvitation}\n            onChangeSubView={this.onChangeSubView.bind(this)}\n        />\n\n\n        return (\n            <div className=\"ViewOrganization  scrollable-flex-column\">\n                <div className=\"ViewOrganization-organizationBox\">\n                    <BriefOrganizationHeader\n                        organization={borg}\n                        openRequestsStatus={this.props.viewModel.openRequest}\n                        orgMenu={orgMenu}\n                        onNavigateToBrowser={this.onNavigateToBrowser.bind(this)}\n                    />\n                </div>\n                {this.getSubView()}\n            </div>\n\n        )\n    }\n}\n\nexport default ViewOrganization","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\nimport { Button, Tooltip, Menu, Icon, Dropdown } from 'antd';\nimport { ViewOrgViewModel, SubViews } from '../../../../types';\nimport './OrgMenu.css'\n\nexport interface OrgMenuProps {\n    viewModel: ViewOrgViewModel\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onChangeSubView: (subView: SubViews) => void\n}\n\nexport interface OrgMenuState {\n\n}\n\nexport default class OrgMenu extends React.Component<OrgMenuProps, OrgMenuState> {\n    constructor(props: OrgMenuProps) {\n        super(props)\n    }\n\n    // Event handlers\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.props.onChangeSubView(SubViews.MANAGE_MEMBERSHIP)\n                break\n            case 'editOrg':\n                this.props.onChangeSubView(SubViews.EDIT_ORGANIZATION)\n                break\n            case 'inviteUser':\n                this.props.onChangeSubView(SubViews.INVITE_USER)\n                break\n            case 'addNarrative':\n                this.props.onChangeSubView(SubViews.ADD_NARRATIVE)\n                break\n            case 'manageRelatedOrgs':\n                this.props.onChangeSubView(SubViews.MANAGE_RELATED_ORGS)\n                break\n        }\n    }\n\n    // Renderers\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottom\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                    >\n                        <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                    </Tooltip>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={menu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={adminMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={ownerMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderOrgMenu()}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind, ViewOrgViewModel } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\nimport * as acceptInboxRequestActions from '../../../../redux/actions/viewOrganization/acceptInboxRequest'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    viewModel: ViewOrgViewModel\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        viewModel\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewOrg: (id: string) => {\n            dispatch(actions.load(id) as any)\n        },\n        onReloadOrg: (id: string) => {\n            dispatch(actions.reload(id) as any)\n        },\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: requestModel.RequestID) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n        onRemoveNarrative: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.removeNarrative(narrative) as any)\n        },\n        onGetViewAccess: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.accessNarrative(narrative) as any)\n        },\n        onAcceptRequest: (requestId: requestModel.RequestID) => {\n            dispatch(acceptInboxRequestActions.acceptRequest(requestId) as any)\n        },\n        onSortNarratives: (sortBy: string) => {\n            dispatch(actions.sortNarratives(sortBy) as any)\n        },\n        onSearchNarratives: (searchBy: string) => {\n            dispatch(actions.searchNarratives(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ViewOrganization) \n\n","import * as React from 'react'\n\nimport './component.css'\n\nimport { Button, Modal, Icon, Alert } from 'antd'\nimport Header from '../../../Header'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n}\n\nexport interface ViewOrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            }\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This organization is <b>private</b>.</p>\n                    <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                    <p>Upon requesting membership, an organization administrator may grant you membership</p>\n                    <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                </div>\n            )\n        })\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    renderMessage() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <React.Fragment>\n                        <p>This organization is <b>private</b> and you are not a member.</p>\n                        <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                        <p>Upon requesting membership, the organization administrators will be notified.</p>\n                        <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>Your membership request to this private organization is pending.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>You have been invited to this private organization.</p>\n                    </React.Fragment>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderOrg() {\n        const message = (\n            <span>\n                Private Organization\n            </span>\n        )\n        const description = (\n            <React.Fragment>\n                {this.renderMessage()}\n                <div>\n                    {this.renderJoinButton()}\n                </div>\n            </React.Fragment>\n        )\n        return (\n            <Alert\n                message={message}\n                description={description}\n                type=\"info\"\n                showIcon={true}\n                icon={(<Icon type=\"lock\" />)}\n                style={{ width: '50em', margin: '20px auto' }}\n                className=\"ViewInaccessiblePrivateOrganization-message\" />\n        )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderJoinButton() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        onClick={this.onJoinClick.bind(this)}\n                    >\n                        Join this Organization\n                    </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Button\n                            icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                        {' '}\n                        <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                    </div>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <div style={{ flex: '0 0 auto' }}>\n            </div>\n        )\n        const buttons = (\n            <React.Fragment>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ViewInaccessiblePrivateOrganization  scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrg()}\n            </div>\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.PRIVATE_INACCESSIBLE) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const {\n        organization, relation, requestOutbox\n    } = viewModel\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        organization, relation, requestOutbox\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n","import * as React from 'react'\n\nimport AccessibleContainer from './accessible/container'\nimport InaccessibleContainer from './inaccessible/container'\nimport { Spin, Alert } from 'antd';\n\nexport interface Props {\n    organizationId: string\n    view: types.ViewOrgView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n\n    previousOrganizationId: string | null\n\n    constructor(props: Props) {\n        super(props)\n\n        this.previousOrganizationId = null\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organization...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case types.ComponentLoadingState.SUCCESS:\n            default:\n                if (this.props.view.viewModel === null) {\n                    return this.renderError({\n                        code: 'Null Error',\n                        message: 'The view model is missing, but should be available'\n                    })\n                }\n                if (this.props.view.viewModel.organization.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n                    return (\n                        <InaccessibleContainer />\n                    )\n                }\n                return (\n                    <AccessibleContainer />\n                )\n        }\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.organizationId !== this.props.organizationId) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.view.loadingState === types.ComponentLoadingState.NONE) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\nimport { OrganizationKind } from '../../../data/models/organization/model';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.ViewOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.viewOrgView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './Auth.css'\n\nimport * as types from '../types'\nimport { Button } from 'antd';\n\n\nexport interface AuthState {\n\n}\n\nclass Auth extends React.Component<types.AuthProps, AuthState> {\n\n    tokenRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: types.AuthProps) {\n        super(props)\n\n        this.tokenRef = React.createRef()\n\n        this.props.checkAuth()\n    }\n\n    onLogoutClick() {\n        this.props.onRemoveAuthorization()\n    }\n\n    onLoginClick() {\n        if (this.tokenRef.current === null) {\n            return\n        }\n        const token = this.tokenRef.current.value\n        if (token.length === 0) {\n            return\n        }\n        this.props.onAddAuthorization(token)\n    }\n\n    buildAuthForm() {\n        return (\n            <div className=\"Auth-form\">\n                Token: <input ref={this.tokenRef} style={{ width: '30em' }} />\n                <Button\n                    icon=\"save\"\n                    htmlType=\"submit\"\n                    onClick={this.onLoginClick.bind(this)} >\n                    Assign Token\n                </Button>\n            </div>\n        )\n    }\n\n    buildAuthToolbar() {\n        return (\n            <div className=\"Auth-toolbar\">\n                Logged in as <b><span>{this.props.authorization.authorization.realname}</span> (<span>{this.props.authorization.authorization.username}</span></b>)\n                {' '}\n                <Button icon=\"logout\" onClick={this.onLogoutClick.bind(this)}></Button>\n            </div>\n        )\n    }\n\n    buildAuthDev() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.buildAuthToolbar()}\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized! Enter a user token below</p>\n                        {this.buildAuthForm()}\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Error</p>\n                        {this.props.authorization.message}\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n    }\n\n    buildAuthProd() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized!</p>\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-error scrollable-flex-column\">\n                        <p>Error: ??</p>\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"Auth scrollable-flex-column\">\n                {this.props.hosted ? this.buildAuthProd() : this.buildAuthDev()}\n            </div>\n        )\n\n    }\n}\n\nexport default Auth","\nexport interface RootInfo {\n    version: string,\n    servertime: number\n}\n\ninterface AuthEndpoints {\n    root: string,\n    tokenInfo: string,\n    apiMe: string,\n    me: string,\n    loginStart: string,\n    loginChoice: string,\n    loginCreate: string,\n    loginUsernameSuggest: string,\n    loginPick: string,\n    loginCancel: string,\n    logout: string,\n    linkStart: string,\n    linkCancel: string,\n    linkChoice: string,\n    linkPick: string,\n    linkRemove: string,\n    tokens: string,\n    tokensRevoke: string,\n    tokensRevokeAll: string,\n    userSearch: string,\n    adminUserSearch: string,\n    adminUser: string\n}\n\nconst endpoints: AuthEndpoints = {\n    root: '',\n    tokenInfo: 'api/V2/token',\n    apiMe: 'api/V2/me',\n    me: 'me',\n    loginStart: 'login/start',\n    logout: 'logout',\n    loginChoice: 'login/choice',\n    loginCreate: 'login/create',\n    loginUsernameSuggest: 'login/suggestname',\n    loginPick: 'login/pick',\n    loginCancel: 'login/cancel',\n    linkStart: 'link/start',\n    linkCancel: 'link/cancel',\n    linkChoice: 'link/choice',\n    linkPick: 'link/pick',\n    linkRemove: 'me/unlink',\n    tokens: 'tokens',\n    tokensRevoke: 'tokens/revoke',\n    tokensRevokeAll: 'tokens/revokeall',\n    userSearch: 'api/V2/users/search',\n    adminUserSearch: 'api/V2/admin/search',\n    adminUser: 'api/V2/admin/user'\n}\n\nexport interface TokenInfo {\n    created: number,\n    expires: number,\n    id: string,\n    name: string | null,\n    token: string,\n    type: string,\n    user: string,\n    cachefor: number\n}\n\nexport interface Identity {\n    id: string,\n    provider: string,\n    username: string\n}\n\nexport interface Role {\n    id: string,\n    desc: string\n}\n\nexport interface Account {\n    created: number,\n    customroles: Array<string>,\n    display: string,\n    email: string,\n    idents: Array<Identity>,\n    lastLogin: number,\n    local: boolean,\n    roles: Array<Role>,\n    user: string\n}\nexport class AuthClient {\n    url: string;\n\n    constructor({ url }: { url: string }) {\n        this.url = url\n    }\n\n    makePath(path: Array<string> | string): string {\n        if (typeof path === 'string') {\n            return [this.url].concat([path]).join('/');\n        }\n        return [this.url].concat(path).join('/');\n    }\n\n\n    root(): Promise<RootInfo> {\n        return fetch(this.makePath([endpoints.root]), {\n            headers: {\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                return result as RootInfo\n            })\n    }\n\n    getTokenInfo(token: string): Promise<TokenInfo> {\n        return fetch(this.makePath([endpoints.tokenInfo]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as TokenInfo\n            })\n    }\n\n    getMe(token: string): Promise<Account> {\n        return fetch(this.makePath([endpoints.apiMe]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Account\n            })\n    }\n\n\n    // getInfo() : Promise<GroupsServiceInfo> {\n    //     return fetch(this.url + '/', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json();\n    //         })\n    //         .then((result) => {\n    //             return result as GroupsServiceInfo;\n    //         });\n    // }\n\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport * as Cookies from 'es-cookie'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types';\nimport { AuthClient, TokenInfo, Account } from '../../data/auth';\n\n// Action Definitions\n\nexport interface AuthCheck extends Action {\n    type: ActionFlag.AUTH_CHECK\n}\n\nexport interface AuthCheckStart extends Action {\n    type: ActionFlag.AUTH_CHECK_START\n}\n\nexport interface AuthCheckError extends Action {\n    type: ActionFlag.AUTH_CHECK_ERROR,\n    error: AppError\n}\n\nexport interface AuthAuthorized extends Action {\n    type: ActionFlag.AUTH_AUTHORIZED,\n    token: string\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\nexport interface AuthUnauthorized extends Action {\n    type: ActionFlag.AUTH_UNAUTHORIZED\n}\n\nexport interface AuthRemoveAuthorization extends Action {\n    type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n}\n\nexport interface AuthAddAuthorization extends Action {\n    type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n    token: string\n}\n\n// Action Creators\n\n\nexport function authCheckStart(): AuthCheckStart {\n    return {\n        type: ActionFlag.AUTH_CHECK_START\n    }\n}\n\nexport function authCheckError(error: AppError): AuthCheckError {\n    return {\n        type: ActionFlag.AUTH_CHECK_ERROR,\n        error\n    }\n}\n\nexport function authAuthorized(token: string, username: string, realname: string, roles: Array<string>): AuthAuthorized {\n    return {\n        type: ActionFlag.AUTH_AUTHORIZED,\n        token, username, realname, roles\n    }\n}\n\nexport function authUnauthorized(): AuthUnauthorized {\n    return {\n        type: ActionFlag.AUTH_UNAUTHORIZED\n    }\n}\n\n// export function authRemoveAuthorization(): AuthRemoveAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n//     }\n// }\n\n// export function authAddAuthorization(token: string): AuthAddAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n//         token: token\n//     }\n// }\n\n// Action Thunks\n\nexport function checkAuth() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(authCheckStart())\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // TODO: get the auth from the kbase-ui integration api, perhaps a postmessage call\n\n        const token = Cookies.get('kbase_session')\n        if (!token) {\n            dispatch(authUnauthorized())\n            return\n        }\n\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function authRemoveAuthorization() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // remove cookie\n        Cookies.remove('kbase_session')\n\n        // remove auth in state\n        dispatch(authUnauthorized())\n    }\n}\n\nexport function authAddAuthorization(token: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // add cookie\n        Cookies.set('kbase_session', token)\n\n        // TODO: get auth info\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, AuthState, Authorization } from '../types'\nimport Auth from '../components/Auth'\nimport * as actions from '../redux/actions/auth'\n\nexport interface OwnProps {\n    hosted: boolean\n}\n\ninterface StateProps {\n    authorization: Authorization\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n}\n\ninterface DispatchProps {\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const { auth } = state\n    return {\n        authorization: auth\n        // authStatus: status,\n        // token: authorization.token || null,\n        // username: authorization.username || null,\n        // realname: authorization.realname || null\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        checkAuth: () => {\n            dispatch(actions.checkAuth() as any)\n        },\n        onRemoveAuthorization: () => {\n            dispatch(actions.authRemoveAuthorization() as any)\n        },\n        onAddAuthorization: (token: string) => {\n            dispatch(actions.authAddAuthorization(token) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Auth)","\nimport uuidv4 from 'uuid/v4'\n\ninterface ListenerParams {\n    name: string,\n    onSuccess: (payload: Payload) => void,\n    onError: (error: Error) => void\n}\n\nclass Listener {\n    name: string;\n    onSuccess: (payload: Payload) => void;\n    onError: (error: Error) => void;\n\n    constructor({ name, onSuccess, onError }: ListenerParams) {\n        this.name = name;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n\ntype Payload = any;\n\ninterface WaitingListenerParams extends ListenerParams {\n    timeout?: number\n}\n\nclass WaitingListener extends Listener {\n    started: Date;\n    timeout: number;\n\n    constructor(params: WaitingListenerParams) {\n        super(params);\n        this.started = new Date();\n        this.timeout = params.timeout || 5000;\n    }\n}\n\ninterface Envelope {\n    channelId: string\n    id: string\n}\n\nclass Message {\n    name: string;\n    payload: any;\n    id: string;\n    created: Date;\n    channelId: string\n    envelope: Envelope | null\n\n    constructor({ name, payload, channelId }: { name: string, payload: any, channelId: any }) {\n        this.name = name\n        this.payload = payload\n        this.id = uuidv4()\n        this.created = new Date()\n        this.channelId = channelId\n        this.envelope = null;\n    }\n\n    getMessage() {\n        return {\n            envelope: {\n                id: this.id,\n                created: this.created,\n                channelId: this.channelId\n            },\n            name: this.name,\n            payload: this.payload\n        };\n    }\n}\n\ninterface Handler {\n    started: Date,\n    handler: (response: any) => any\n}\n\ninterface ChannelParams {\n    window?: Window,\n    host?: string,\n    channelId?: string\n}\n\nexport class Channel {\n    window: Window\n    host: string\n    id: string\n    awaitingResponse: Map<string, Handler>\n    waitingListeners: Map<string, Array<Listener>>\n    listeners: Map<string, Array<Listener>>\n    lastId: number\n    sentCount: number\n    receivedCount: number\n    unwelcomeReceivedCount: number\n    unwelcomeReceivedCountThreshhold: number\n    unwelcomeReceiptWarning: boolean\n    unwelcomeReceiptWarningCount: number\n    currentListener: ((message: MessageEvent) => void) | null\n\n    constructor(params: ChannelParams) {\n        // The given window upon which we will listen for messages.\n        this.window = params.window || window\n\n        // The host for the window; required for postmessage\n        if (this.window.document === null) {\n            throw new Error('No document')\n        }\n        if (this.window.document.location === null) {\n            throw new Error('No location')\n        }\n        this.host = params.host || this.window.document.location.origin;\n\n        // The channel id. Used to filter all messages received to\n        // this channel.\n        this.id = params.channelId || uuidv4()\n\n        this.awaitingResponse = new Map<string, Handler>()\n        this.waitingListeners = new Map<string, Array<Listener>>()\n        this.listeners = new Map<string, Array<Listener>>()\n\n        this.lastId = 0\n        this.sentCount = 0\n        this.receivedCount = 0\n\n        this.unwelcomeReceivedCount = 0\n        this.unwelcomeReceivedCountThreshhold = 100\n        this.unwelcomeReceiptWarning = true\n        this.unwelcomeReceiptWarningCount = 0\n        this.currentListener = null\n    }\n\n    genId() {\n        this.lastId += 1;\n        return 'msg_' + String(this.lastId);\n    }\n\n    receiveMessage(messageEvent: MessageEvent) {\n        const message = messageEvent.data as Message;\n        if (!message) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('TS No message data; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!message.envelope) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message envelope, not from KBase; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!(message.envelope.channelId === this.id)) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('Message envelope does not match this channel\\'s id', message.envelope, message.envelope.channelId, this.id);\n            }\n            return;\n        }\n        if (this.unwelcomeReceiptWarningCount > this.unwelcomeReceivedCountThreshhold) {\n            this.unwelcomeReceiptWarning = false;\n            console.warn('Unwelcome message warning disabled after ' + this.unwelcomeReceiptWarningCount + ' instances.');\n        }\n\n        // A message sent as a request will have registered a response handler\n        // in the awaitingResponse hash, using a generated id as the key.\n        // TODO: to to rethink using the message id here. Perhaps somehting like a\n        // chain of ids, the root of which is the origination id, which is the one\n        // known here when it it is sent; the message \"id\" should be assigned whenver\n        // a message is sent, but a response  message would include the original\n        // message in the \"chain\"...\n\n        // We can also have awaiting responses without an originating request.\n        // These are useful for, e.g., a promise which awaits a message to be sent\n        // within some window...\n        if (message.envelope.id && this.awaitingResponse.has(message.envelope.id)) {\n            try {\n                const response = this.awaitingResponse.get(message.envelope.id)\n                this.awaitingResponse.delete(message.envelope.id)\n                if (response) {\n                    response.handler(message.payload)\n                }\n            } catch (ex) {\n                console.error('Error handling response for message ', message, ex);\n            }\n        }\n\n        // and also awaiting by message name. Like a listener, but they are only used\n        // once.\n\n        if (this.waitingListeners.has(message.name)) {\n            const awaiting = this.waitingListeners.get(message.name)!\n            this.waitingListeners.delete(message.name)\n            awaiting.forEach((listener) => {\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n        // Otherwise, permanently registered handlers are found in the listeners for the\n        // message name.\n        if (this.listeners.has(message.name)) {\n            this.listeners.get(message.name)!.forEach((listener) => {\n                if (!listener.onSuccess) {\n                    console.warn('no handler for listener!', listener);\n                }\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n    }\n\n    listen(listener: Listener) {\n        if (!this.listeners.has(listener.name)) {\n            this.listeners.set(listener.name, [])\n        }\n        this.listeners.get(listener.name)!.push(listener)\n    }\n\n    on(messageId: string, success: (payload: any) => any, error: (error: Error) => void) {\n        this.listen(new Listener({\n            name: messageId,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    sendMessage(message: Message) {\n        this.window.postMessage(message.getMessage(), this.host)\n    }\n\n    send(name: string, payload: Payload) {\n        const message = new Message({ name, payload, channelId: this.id });\n        this.sendMessage(message);\n    }\n\n    sendRequest(message: Message, handler: (response: any) => any) {\n        this.awaitingResponse.set('message.id', {\n            started: new Date(),\n            handler: handler\n        })\n\n        this.sendMessage(message);\n    }\n\n    request(name: string, payload: Payload) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.sendRequest(new Message({ name, payload, channelId: this.id }), (response: any) => {\n                    resolve(response);\n                });\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    startMonitor() {\n        window.setTimeout(() => {\n            const now = new Date().getTime();\n\n            // first take care of listeners awaiting a message.\n            for (const [id, listeners] of this.waitingListeners.entries()) {\n                const newListeners = listeners.filter((listener) => {\n                    if (listener instanceof WaitingListener) {\n                        const elapsed = now - listener.started.getTime();\n                        if (elapsed > listener.timeout) {\n                            try {\n                                if (listener.onError) {\n                                    listener.onError(new Error('timout after ' + elapsed));\n                                }\n                            } catch (ex) {\n                                console.error('Error calling error handler', id, ex);\n                            }\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n                if (newListeners.length === 0) {\n                    this.waitingListeners.delete(id)\n                }\n            }\n\n            if (this.waitingListeners.size > 0) {\n                this.startMonitor()\n            }\n        }, 100);\n    }\n\n    listenOnce(listener: WaitingListener) {\n        if (!this.waitingListeners.has(listener.name)) {\n            this.waitingListeners.set(listener.name, [])\n        }\n        this.waitingListeners.get(listener.name)!.push(listener);\n        if (listener.timeout) {\n            this.startMonitor();\n        }\n    }\n\n    once(name: string, success: (payload: Payload) => void, error: (error: Error) => void) {\n        this.listenOnce(new WaitingListener({\n            name: name,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    when(name: string, timeout: number) {\n        return new Promise((resolve, reject) => {\n            return this.listenOnce(new WaitingListener({\n                name: name,\n                timeout: timeout,\n                onSuccess: (payload) => {\n                    resolve(payload);\n                },\n                onError: (error) => {\n                    reject(error);\n                }\n            }));\n        });\n    }\n\n    stats() {\n        return {\n            sent: this.sentCount,\n            received: this.receivedCount\n        };\n    }\n\n    attach(window: Window) {\n        this.window = window;\n    }\n\n    start() {\n        this.currentListener = (message: MessageEvent) => {\n            this.receiveMessage(message);\n        };\n        this.window.addEventListener('message', this.currentListener, false);\n    }\n\n    stop() {\n        if (this.currentListener) {\n            this.window.removeEventListener('message', this.currentListener, false);\n        }\n    }\n}\n","import uuid from 'uuid/v4'\nimport { Channel } from './windowChannel'\nimport { IFrameParams } from '../types'\n\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n/*\n channelId: \"3b33179e-8a6d-4ae9-bc95-af4c0492eaa6\"\nframeId: \"frame_kb_html_be553ee5-645c-4737-80ba-dcb642632f0c\"\nhostId: \"host_kb_html_9a3b5d5d-bb92-43ff-a443-73267aa31323\"\nparams: {}\nparentHost: \"https://ci.kbase.us\"\n\n*/\n\n/*\nIFrameSimulator\nThis little doozey allows us to create a simulated iframe. We can query it for\n the params placed on the iframe, and talk to it via the window channel -- it has \n its own window channel.\n Good thing we designed the channel for multiple channels per window.\n*/\nclass IFrameSimulator {\n    params: IFrameParams | null\n    channel: Channel\n\n    constructor() {\n        this.params = null\n\n        // create a window channel.\n\n        this.channel = new Channel({\n            window: window,\n            host: document.location!.origin\n        })\n\n    }\n\n    getParamsFromIFrame(): IFrameParams {\n        return {\n            channelId: this.channel.id,\n            frameId: uuid(),\n            params: {\n                groupsServiceURL: '/services/groups',\n                userProfileServiceURL: '/services/user_profile/rpc',\n                workspaceServiceURL: '/services/ws',\n                serviceWizardURL: '/services/service_wizard',\n                authServiceURL: '/services/auth',\n                originalPath: '',\n                view: null,\n                viewParams: null\n                // view: 'org',\n                // viewParams: {\n                //     id: 'test'\n                // }\n            },\n            parentHost: document.location!.origin\n        }\n    }\n}\n\n\n\nexport default IFrameSimulator","import { IFrameParams } from '../types'\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n\nexport class IFrameIntegration {\n    getParamsFromIFrame() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-params')) {\n            // throw new Error('No params found in window!!');\n            return null\n        }\n        const params = window.frameElement.getAttribute('data-params');\n        if (params === null) {\n            // throw new Error('No params found in window!')\n            return null\n        }\n        const iframeParams = JSON.parse(decodeURIComponent(params)) as IFrameParams\n        return iframeParams\n    }\n    getChannelID() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-channel')) {\n            return null\n        }\n        return window.frameElement.getAttribute('data-channel')\n    }\n    getIframeElement() {\n        return window.frameElement || null\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as types from '../../types'\nimport IFrameSimulator from '../../lib/IFrameSimulator';\nimport { IFrameIntegration } from '../../lib/IFrameIntegration';\n\nimport { } from 'react-router-dom';\n\n// Action Definitions\n\n// export interface AppStart extends Action {\n//     type: ActionFlag.APP_START,\n\n// }\n\nexport interface AppSuccess extends Action {\n    type: ActionFlag.APP_SUCCESS,\n    config: types.AppConfig\n}\n\nexport interface AppError extends Action {\n    type: ActionFlag.APP_ERROR,\n    error: AppError\n}\n\n// Action Creators\n\nexport function appSuccess(config: types.AppConfig): AppSuccess {\n    return {\n        type: ActionFlag.APP_SUCCESS,\n        config: config\n    }\n}\n\nexport function appError(error: AppError): AppError {\n    return {\n        type: ActionFlag.APP_ERROR,\n        error: error\n    }\n}\n\nexport function appStart() {\n    return (dispatch: ThunkDispatch<types.StoreState, void, Action>, getState: () => types.StoreState) => {\n        // check and see if we are in an iframe\n        let integration = new IFrameIntegration();\n        let iframeParams = integration.getParamsFromIFrame();\n\n\n        if (iframeParams) {\n            let defaultPath\n\n            // set up the message bus.\n            let channelId = iframeParams.channelId;\n\n            // route from paths passed in from kbase-ui\n            switch (iframeParams.params.view) {\n                case 'org':\n                    defaultPath = '/viewOrganization/' + iframeParams.params.viewParams.id\n                    window.history.pushState(null, 'test', defaultPath)\n                    break\n                default:\n                    defaultPath = '/organizations'\n                    window.history.pushState(null, 'organizations', '/organizations')\n                    break\n            }\n\n            // suck up all the params into our state.\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath,\n                channelId\n            }))\n\n        } else {\n            iframeParams = new IFrameSimulator().getParamsFromIFrame()\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath: '/organizations',\n                channelId: null\n            }))\n        }\n    }\n}\n","import * as React from 'react'\nimport './KBaseIntegration.css'\n\nimport { AppState } from '../types'\nimport { Channel } from '../lib/windowChannel';\nimport { IFrameIntegration } from '../lib/IFrameIntegration';\n\nexport interface KBaseIntegrationProps {\n    status: AppState\n    channelId: string | null\n    onAppStart: () => void\n}\nclass KBaseIntegration extends React.Component<KBaseIntegrationProps, object> {\n\n    channel: Channel | null\n\n    constructor(props: KBaseIntegrationProps) {\n        super(props)\n\n        // const params = this.getParamsFromIFrame()\n\n        // this.props.onAppStart()\n\n        this.channel = null\n    }\n\n    setupChannel() {\n        if (this.props.channelId) {\n\n            this.channel = new Channel({\n                channelId: this.props.channelId,\n            })\n\n            this.channel.on('navigate', ({ to, params }) => {\n\n            }, (err) => {\n                console.error('Error processing \"navigate\" message')\n            })\n\n            this.channel.start()\n\n            this.channel.send('ready', {\n                channelId: this.props.channelId,\n                greeting: 'heloooo'\n            })\n        }\n    }\n\n    teardownChannel() {\n\n    }\n\n    componentDidMount() {\n        this.props.onAppStart()\n    }\n\n    componentDidUpdate() {\n        this.setupChannel()\n    }\n\n    componentWillUnmount() {\n        this.teardownChannel()\n    }\n\n    render() {\n        if (this.props.status === AppState.NONE) {\n            return (\n                <div className=\"KBaseIntegration\">\n                    Loading...\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"KBaseIntegration scrollable-flex-column\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default KBaseIntegration","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../types'\nimport * as actions from '../redux/actions/app'\n\nimport KBaseIntegration from '../components/KBaseIntegration'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    status: types.AppState\n    defaultPath: string\n    channelId: string | null\n}\n\ninterface DispatchProps {\n    onAppStart: () => void\n}\n\nexport function mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const { app: { status, config: { defaultPath, channelId } } } = state\n    return {\n        status, defaultPath, channelId\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAppStart: () => {\n            dispatch(actions.appStart() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(KBaseIntegration)","import {\n    StoreState, AuthState, AppState,\n    ComponentLoadingState\n} from \"../types\"\n\nimport * as orgModel from '../data/models/organization/model'\n\nexport class StateInstances {\n    static makeInitialState(): StoreState {\n        return {\n            entities: {\n                users: {\n                    byId: new Map(),\n                    all: []\n                },\n                orgs: {\n                    byId: new Map(),\n                    all: []\n                },\n                requests: {\n                    byId: new Map(),\n                    all: []\n                },\n                narratives: {\n                    byId: new Map()\n                },\n                organizations: {\n                    byId: new Map()\n                }\n            },\n            db: {\n            },\n            views: {\n                browseOrgsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                addOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                editOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                manageOrganizationRequestsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewMembersView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                // inviteUserView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                manageMembershipView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                // requestNarrativeView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                viewOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                }\n            },\n            auth: {\n                status: AuthState.NONE,\n                message: '',\n                authorization: {\n                    token: '',\n                    username: '',\n                    realname: '',\n                    roles: []\n                }\n            },\n            error: null,\n            app: {\n                status: AppState.NONE,\n                config: {\n                    baseUrl: '',\n                    services: {\n                        Groups: {\n                            url: ''\n                        },\n                        UserProfile: {\n                            url: ''\n                        },\n                        Workspace: {\n                            url: ''\n                        },\n                        ServiceWizard: {\n                            url: ''\n                        },\n                        Auth: {\n                            url: ''\n                        }\n                    },\n                    defaultPath: '',\n                    channelId: null\n                }\n            },\n\n            updateOrg: {\n                pending: false\n            },\n\n\n        }\n    }\n}","import * as React from 'react'\n\nexport interface Props {\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface State {\n\n}\n\nexport default class DataServices extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    componentWillMount() {\n        this.props.onLoad()\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/dataServices'\nimport Component from './component'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nexport interface AppContext {\n    test: string\n}\n\nconst context = React.createContext<AppContext | null>(null)\n\nexport const AppContextProvider = context.Provider\nexport const AppContextConsumer = context.Consumer","import React, { Component, FunctionComponent } from 'react'\nimport { Route, Switch, Redirect } from 'react-router'\nimport { BrowserRouter, RouteProps, RouteComponentProps } from 'react-router-dom'\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport theReducer from './redux/reducers'\n\n// the app and subcomponents\nimport './App.css';\n\n// fontawesome setup\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSearch, faGlobe, faUserLock } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSpinner, faSearch, faGlobe, faUserLock)\n\nimport OrganizationsBrowser from './components/views/browseOrgs/loader'\nimport NewOrganization from './components/views/newOrganization/loader'\nimport ViewOrganization from './components/views/viewOrganization/loader'\nimport Auth from './containers/Auth'\nimport KBaseIntegration from './containers/KBaseIntegration'\nimport { StateInstances } from './redux/state';\nimport DataServices from './components/dataServices/storeAdapter'\nimport { AppContextProvider } from './AppContext'\nimport { Marked, Renderer, MarkedOptions } from 'marked-ts'\n\nclass DescriptionRenderer extends Renderer {\n  constructor(options?: MarkedOptions) {\n    super(options)\n  }\n  link(href: string, title: string, text: string) {\n    if (this.options.sanitize) {\n      let prot: string;\n\n      try {\n        prot = decodeURIComponent(this.options.unescape!(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      }\n      catch (e) {\n        return text\n      }\n\n      if\n        (\n        prot.indexOf('javascript:') === 0\n        || prot.indexOf('vbscript:') === 0\n        || prot.indexOf('data:') === 0\n      ) {\n        return text\n      }\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += ' target=\"_blank\">' + text + '</a>';\n\n    return out;\n  }\n}\n\nlet options = new MarkedOptions()\noptions.renderer = new DescriptionRenderer()\nMarked.setOptions({ renderer: new DescriptionRenderer() })\n\n// Put the redux store together\n// Just for prototyping --- This is super naive and will change!\n// import {organizations} from './data/temp';\n\n// TODO: determine the environment\n\nconst hosted = window.frameElement ? true : false\n\n// Set up initial state \n// TODO: move to own file\nconst initialState = StateInstances.makeInitialState()\n\n// TODO: remove the cast of reducer to any...\n// const middleware = [thunk]\n// const store = createStore<StoreState, SortOrgs, null, null>(theReducer as any, initialState, applyMiddleware(thunk));\nconst store = createStore(theReducer as any, initialState as any, compose(applyMiddleware(thunk)))\n\n// export interface WrappedComponent extends React.Component<NewOrganization {\n\n// }\n\n// const Wrapped: FunctionComponent<NewOrganization> = ({component: Component, ...rest}: {component: any}) => {\n//   return (<Route {...rest} render={(props) => {\n//       <Component {...props} />\n//     }} />\n//   )\n// }\n\n\n\ninterface ViewOrgMatchProps {\n  id: string\n}\ntype WrappedProps = RouteComponentProps<ViewOrgMatchProps>\nconst F: React.SFC<WrappedProps> = (props: WrappedProps) => {\n  return (\n    <ViewOrganization organizationId={props.match.params.id} />\n  )\n}\n\n// class F2 extends React.Component<WrappedProps> {\n//   constructor(params: WrappedProps) {\n//     super(params)\n//   }\n//   render() {\n//     return (\n//       <ViewOrganization organizationId={this.props.match.params.id} />\n//     )\n//   }\n// }\n\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n\n\n  render() {\n    return (\n      <AppContextProvider value={{ test: 'ok' }}>\n        <Provider store={store}>\n          <KBaseIntegration>\n            <Auth hosted={hosted}>\n              <DataServices>\n                <BrowserRouter basename=\"/\" >\n                  <div className=\"App scrollable-flex-column\">\n                    <div className=\"App-body scrollable-flex-column\">\n                      {/* <MainMenu /> */}\n                      <Switch>\n                        <Route path=\"/organizations\" component={OrganizationsBrowser} />\n                        <Route path=\"/newOrganization\" component={NewOrganization} />\n                        <Route path=\"/viewOrganization/:id\" exact={true} component={F} />\n                        {/* <Route path=\"/viewOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewOrganization organizationId={id} />} /> */}\n                        <Redirect from=\"/\" to=\"/organizations\" exact={true} />\n                      </Switch>\n                    </div>\n                  </div>\n                </BrowserRouter>\n              </DataServices>\n            </Auth>\n          </KBaseIntegration>\n        </Provider>\n      </AppContextProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport 'typeface-oxygen';\nimport 'normalize.css';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}