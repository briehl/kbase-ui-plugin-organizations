{"version":3,"sources":["components/entities/nouserpic.png","types/index.tsx","redux/actions/index.ts","redux/reducers/addOrg.ts","redux/reducers/editOrg.ts","redux/reducers/viewOrganization/acceptInboxRequest.ts","redux/reducers/viewOrganization/viewMembers.ts","redux/reducers/viewOrganization/denyInboxRequest.ts","redux/reducers/viewOrganization/cancelOutboxRequests.ts","data/apis/groups.ts","data/models/requests.ts","data/apis/serviceClient.ts","data/apis/userProfile.ts","lib/props.ts","data/models/user.ts","data/models/organization/model.ts","data/models/organization/validation.ts","combo/error/api.ts","redux/actions/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/relatedOrganizations.ts","redux/reducers/viewOrganization/addApp.ts","redux/reducers/viewOrg.ts","redux/reducers/browseOrgs.ts","redux/reducers/auth.ts","redux/reducers/app.ts","redux/reducers/manageOrganizationRequests.ts","redux/reducers/viewMembers.ts","redux/reducers/viewOrganization/inviteUser.ts","redux/reducers/viewOrganization/manageMembership.ts","redux/reducers/viewOrganization/requestAddNarrative.ts","redux/reducers/entities/organization.ts","redux/reducers/entities.ts","redux/reducers/dataServices.ts","redux/reducers/index.tsx","components/entities/Owner.tsx","components/OrgLogo.tsx","components/entities/Avatar.tsx","data/apis/workspaceUtils.ts","data/apis/serviceClientBase.ts","data/apis/workspace.ts","data/apis/serviceWizard.ts","data/apis/genericClient.ts","data/apis/dynamicServiceClient.ts","data/apis/narrativeService.ts","data/models/narrative.ts","data/models/apps.ts","data/apis/narrativeMethodStore.ts","lib/error.ts","redux/actions/entities.ts","components/entities/OwnerContainer.tsx","lib/time.ts","components/NiceElapsedTime.tsx","components/BriefOrganization.tsx","components/views/browseOrgs/organizations/component.tsx","components/views/browseOrgs/organizations/container.tsx","components/views/browseOrgs/component.tsx","redux/actions/browseOrgs.ts","components/views/browseOrgs/container.tsx","components/views/browseOrgs/loader.tsx","redux/actions/addOrg.ts","lib/DebouncingProcess.ts","data/apis/uiService.ts","components/views/newOrganization/component.tsx","components/views/newOrganization/container.tsx","components/views/newOrganization/loader.tsx","data/models/uber.ts","redux/actions/dataServices.ts","redux/actions/viewOrg.ts","redux/actions/viewOrganization/acceptInboxRequest.ts","components/Header.tsx","redux/actions/viewOrganization/viewMembers.ts","components/entities/Member.tsx","components/entities/MemberContainer.tsx","components/views/viewOrganization/accessible/members/component.tsx","components/views/viewOrganization/accessible/members/reduxAdapter.tsx","redux/actions/viewOrganization/denyInboxRequest.ts","redux/actions/viewOrganization/cancelOutboxRequest.ts","components/entities/User.tsx","components/entities/UserContainer.tsx","components/entities/Narrative.tsx","components/entities/NarrativeContainer.tsx","components/entities/app/component.tsx","components/entities/app/loader.tsx","components/views/viewOrganization/accessible/requests/InboxRequest.tsx","components/views/viewOrganization/accessible/requests/InboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/OutboxRequest.tsx","components/views/viewOrganization/accessible/requests/OutboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/component.tsx","components/views/viewOrganization/accessible/requests/container.tsx","components/views/viewOrganization/accessible/BriefOrganizationHeader.tsx","components/entities/organization/component.tsx","components/entities/organization/Inaccessible.tsx","components/entities/organization/loader.tsx","redux/actions/entities/organization.ts","components/views/viewOrganization/accessible/relatedOrgs/component.tsx","components/views/viewOrganization/accessible/relatedOrgs/reduxAdapter.tsx","redux/actions/viewOrganization/relatedOrganizations.ts","components/views/viewOrganization/accessible/manageRelatedOrganizations/AvailableOrganization.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/component.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/reduxAdapter.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/loader.tsx","redux/actions/viewOrganization/inviteUser.ts","components/User.tsx","components/menu/component.tsx","components/entities/UserWrapped.tsx","components/entities/UserWrappedContainer.tsx","components/views/viewOrganization/accessible/inviteUser/component.tsx","components/views/viewOrganization/accessible/inviteUser/container.tsx","components/views/viewOrganization/accessible/inviteUser/loader.tsx","components/entities/UserSimple.tsx","components/entities/UserSimpleContainer.tsx","components/entities/narrative/component.tsx","components/entities/narrative/reduxAdapter.tsx","components/OrganizationNarrative.tsx","components/views/viewOrganization/accessible/narratives/component.tsx","redux/actions/viewOrganization/manageMembership.ts","components/views/viewOrganization/accessible/manageMembership/component.tsx","components/views/viewOrganization/accessible/manageMembership/container.tsx","components/views/viewOrganization/accessible/manageMembership/loader.tsx","redux/actions/editOrg.ts","components/views/viewOrganization/accessible/editOrganization/component.tsx","components/views/viewOrganization/accessible/editOrganization/container.tsx","components/views/viewOrganization/accessible/editOrganization/loader.tsx","components/views/viewOrganization/accessible/requestAddNarrative/RowWrapper.tsx","components/views/viewOrganization/accessible/requestAddNarrative/FlexibleColumnWrapper.tsx","components/views/viewOrganization/accessible/requestAddNarrative/component.tsx","redux/actions/viewOrganization/requestAddNarrative.ts","components/views/viewOrganization/accessible/requestAddNarrative/container.tsx","components/views/viewOrganization/accessible/requestAddNarrative/loader.tsx","components/views/viewOrganization/accessible/OrgMenu.tsx","components/views/viewOrganization/accessible/apps/component.tsx","redux/actions/viewOrganization/addApps.ts","components/views/viewOrganization/accessible/addApps/component.tsx","components/views/viewOrganization/accessible/addApps/reduxAdapter.tsx","components/views/viewOrganization/accessible/addApps/loader.tsx","components/views/viewOrganization/accessible/component.tsx","components/views/viewOrganization/accessible/container.tsx","components/views/viewOrganization/inaccessible/component.tsx","components/views/viewOrganization/inaccessible/container.tsx","components/views/viewOrganization/loader.tsx","components/Auth.tsx","data/auth.ts","redux/actions/auth.ts","containers/Auth.tsx","lib/windowChannel.ts","lib/IFrameSimulator.ts","lib/IFrameIntegration.ts","redux/actions/app.ts","components/KBaseIntegration.tsx","containers/KBaseIntegration.tsx","redux/state.tsx","components/dataServices/component.tsx","components/dataServices/storeAdapter.tsx","AppContext.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","ComponentView","UIErrorType","SyncState","EditState","ValidationErrorType","SaveState","MemberType","RequestResourceType","RequestStatus","AuthState","ViewOrgState","AppState","SortDirection","ComponentLoadingState","BrowseOrgsState","InviteUserViewState","NarrativeState","ProcessingState","RequestNarrativeState","SelectionState","ResourceRelationToOrg","ViewOrgViewModelKind","SubViews","ViewOrgSubViewKind","ViewState","ErrorCode","ActionFlag","AppException","_Error","_ref","_this","code","message","detail","info","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","trace","errors","name","Error","captureStackTrace","assertThisInitialized","stack","indexOf","split","inherits","wrapNativeSuper","reducer","state","action","type","ADD_ORG_SAVE","views","addOrgView","viewModel","objectSpread","saveState","SAVING","console","warn","saveStart","ADD_ORG_SAVE_SUCCESS","editState","UNEDITED","SAVED","saveSuccess","ADD_ORG_SAVE_ERROR","SAVE_ERROR","error","saveError","ADD_ORG_LOAD_START","loadingState","LOADING","loadStart","ADD_ORG_LOAD_SUCCESS","SUCCESS","validationState","OK","validatedAt","Date","NEW","newOrganization","loadSuccess","ADD_ORG_LOAD_ERROR","loadError","ADD_ORG_UNLOAD","NONE","unload","ADD_ORG_UPDATE_NAME_SUCCESS","EDITED","value","syncState","DIRTY","updateNameSuccess","ADD_ORG_UPDATE_NAME_ERROR","updateNameError","ADD_ORG_UPDATE_LOGO_URL_SUCCESS","logoUrl","updateLogoUrlSuccess","ADD_ORG_UPDATE_LOGO_URL_ERROR","updateLogoUrlError","ADD_ORG_UPDATE_HOME_URL_SUCCESS","homeUrl","updateHomeUrlSuccess","ADD_ORG_UPDATE_HOME_URL_ERROR","updateHomeUrlError","ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","researchInterests","updateResearchInterestsSuccess","ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","updateResearchInterestsError","ADD_ORG_UPDATE_ID_SUCCESS","id","updateIdSuccess","ADD_ORG_UPDATE_ID_ERROR","updateIdError","ADD_ORG_UPDATE_ID_PASS","updateIdPass","ADD_ORG_UPDATE_DESCRIPTION_SUCCESS","description","updateDescriptionSuccess","ADD_ORG_UPDATE_DESCRIPTION_ERROR","updateDescriptionError","ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS","isPrivate","updateIsPrivateSuccess","ADD_ORG_EVALUATE_OK","addOrgEvaluateOk","ADD_ORG_EVALUATE_ERRORS","ERROR","addOrgEvaluateErrors","validationStateOk","evaluateEditorState","editedOrganization","EDIT_ORG_LOAD_START","editOrgView","EDIT_ORG_LOAD_SUCCESS","organization","EDIT_ORG_LOAD_ERROR","EDIT_ORG_UNLOAD","EDIT_ORG_SAVE_START","editOrgSaveStart","EDIT_ORG_SAVE_SUCCESS","CLEAN","editOrgSaveSuccess","EDIT_ORG_SAVE_ERROR","editOrgSaveError","EDIT_ORG_UPDATE_NAME_SUCCESS","editedOrg","remoteValue","newState","editOrgUpdateNameSuccess","EDIT_ORG_UPDATE_NAME_ERROR","editOrgUpdateNameError","EDIT_ORG_UPDATE_LOGO_URL_SUCCESS","editOrgUpdateLogoUrlSuccess","EDIT_ORG_UPDATE_LOGO_URL_ERROR","editOrgUpdateLogoUrlError","EDIT_ORG_UPDATE_HOME_URL_SUCCESS","editOrgUpdateHomeUrlSuccess","EDIT_ORG_UPDATE_HOME_URL_ERROR","editOrgUpdateHomeUrlError","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_ERROR","editOrgUpdateDescriptionError","EDIT_ORG_EVALUATE_OK","editOrgEvaluateOk","EDIT_ORG_EVALUATE_ERRORS","editOrgEvaluateErrors","VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS","viewOrgView","kind","NORMAL","requestInbox","requests","acceptInboxRequestSuccess","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","members","map","member","username","memberUsername","ADMIN","sortedMembers","promoteToAdminSuccess","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","MEMBER","demoteToMemberSuccess","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS","filter","removeMemberSuccess","VIEW_ORG_SORT_MEMBERS_SUCCESS","sortMembersBy","sortBy","sortMembersSuccess","VIEW_ORG_SEARCH_MEMBERS_SUCCESS","searchMembersBy","searchBy","searchMembersSuccess","VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS","rejectInboxRequestSuccess","VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS","requestOutbox","cancelRequestSuccess","RequestType","GroupException","_AppException","apperror","Map","httpcode","httpstatus","appcode","callid","time","originalError","ServerException","_AppException2","_this2","GroupsClient","token","url","createClass","key","fetch","headers","Authorization","Accept","mode","then","response","json","result","exists","_listGroups","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","status","abrupt","stop","apply","arguments","path","body","concat","join","Content-Type","method","JSON","stringify","statusText","get","text","_post","_callee2","errorText","_context2","t0","_x","_x2","_get","_callee3","_context3","_x3","newGroup","payload","private","custom","logourl","researchinterests","homeurl","length","put","groupUpdate","_addRelatedGroup","_callee4","groupId","relatedGroupId","group","relatedGroups","update","_context4","relatedgroups","includes","push","_x4","_x5","_removeRelatedGroup","_callee5","newRelatedGroups","_context5","_x6","_x7","_getRequest","_callee6","requestId","_context6","_x8","params","query","URLSearchParams","includeClosed","append","sortDirection","DESCENDING","startAt","String","getTime","toString","workspaceId","complete","resourceId","_grantResourceAccess","_callee7","resourceType","_context7","post","_x9","_x10","_x11","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_visitGroup","_callee8","_ref11","_context8","_x12","_getOpenRequests","_callee9","_ref12","groupIds","requestStatuses","_arr","_i","_ref15","_ref14","_groupId","requestStatus","_context9","entries","slicedToArray","set","_x13","groupRequestToOrgRequest","request","requestType","INVITATION","REQUEST","stringToRequestType","USER","WORKSPACE","APP","stringToResourceType","resourcetype","OPEN","organizationId","groupid","requester","user","resource","createdAt","createdate","expireAt","expiredate","modifiedAt","moddate","narrativeId","appId","RequestsModel","groupsClient","cache","groupsApi","groupsServiceURL","grequest","has","getRequest","_getOutboundRequests","grequests","getCreatedRequests","forEach","_getUserRequestForOrg","find","r","_getPendingRequestsForOrg","_getRequestInboxForOrg","getTargetedRequests","_getCombinedRequestInboxForOrg","getGroupRequests","t1","_getRequestOutboxForOrg","_getOrganizationInvitations","_getOrganizationInvitationsForOrg","invitations","getOrganizationInvitations","invitation","_getInboundRequests","_callee10","_this3","_context10","_getUserInvitationForOrg","_callee11","_context11","_getPendingOrganizationRequestsForOrg","_callee12","groupRequests","_context12","_getPendingOrganizationRequests","_callee13","allRequests","_context13","Promise","all","reduce","_cancelRequest","_callee14","_context14","cancelRequest","_acceptRequest","_callee15","_context15","acceptRequest","_denyRequest","_callee16","_context16","denyRequest","_acceptJoinInvitation","_callee17","_context17","_x14","_rejectJoinInvitation","_callee18","_context18","_x15","_inviteUserToJoinOrg","_callee19","_context19","inviteUserToGroup","_x16","_x17","ServiceClient","param","version","constructor","Math","random","slice","AuthorizedServiceClient","_ServiceClient","func","makePayload","UserProfileClient","_AuthorizedServiceCli","makeEmptyPayload","_getUserProfile","profileCache","resolve","callFunc","_updateUserProfile","delete","profile","_getUserProfiles","usernames","_getAllUsers","_searchUsers","getProp","obj","propPath","defaultValue","Array","TypeError","i","undefined","profileToUser","jobTitle","userdata","realname","city","country","title","avatarOption","gravatarHash","gravatarDefault","UserRelationToOrganization","UserWorkspacePermission","OrganizationKind","UserModel","userProfileClient","userProfileServiceURL","_getUser","userProfile","getUserProfile","_getUsers","toFetch","userProfiles","getUserProfiles","users","searchUsers","excludedUsers","Validation","s","firstNonPrintable","search","nonPrintableRe","beforeStart","before","after","REQUIRED_MISSING","match","URL","protocol","ex","determineRelation","org","INACCESSIBLE_PRIVATE","MEMBER_REQUEST_PENDING","MEMBER_INVITATION_PENDING","owner","OWNER","groupPermissionToWorkspacePermission","groupsPermission","VIEW","EDIT","getRealname","groupToOrganization","currentUser","joinedAt","joined","lastVisitedAt","lastvisit","admins","admin","narratives","resources","workspace","parseInt","rid","narrname","isPublic","public","permission","perm","narrcreate","updatedAt","addedAt","added","apps","catalogmethod","isMember","role","isAdmin","isOwner","relation","groupRoleToUserRelation","areMembersPrivate","privatemembers","memberCount","memcount","narrativeCount","rescount","appCount","relatedOrganizations","groupToPrivateOrganization","applySearch","orgs","searchTerms","searchTermsRe","term","RegExp","every","termRe","test","dateDays","d","t","round","applySortComparison","sortField","direction","b","localeCompare","applySort","organizations","ASCENDING","sort","applyFilter","roleType","roles","privacy","applyRoleType","some","applyRole","applyPrivacy","narrativeSortByToComparator","queryNarratives","c1","applyNarrativeSort","tokens","narrative","applyNarrativeSearch","memberSortByToComparator","queryMembers","applyMembersSort","applyMembersSearch","OrganizationModel","usersClient","userModel","_getOrg","g","getGroupById","getUsers","_getGroupUsers","_getOrganization","getGroupUsers","_getOrgs","ids","getOrg","_getOwnOrgs","ownOrgs","getAllOrgs2","_getAllOrgs","allGroups","groups","listGroups","Set","add","from","values","listGroupToBriefOrganization","_queryOrgs","filtered","searched","sorted","total","_ownOrgs","_grantViewAccess","req","grantReadAccessToRequestedResource","requestModel","_addOrg","newOrg","reject","createGroup","_orgExists","groupExists","_updateOrg","orgUpdate","updateGroup","validateOrgId","validateOrgName","validateOrgDescription","_removeNarrativeFromOrg","deleteResource","_removeAppFromOrg","groupFunnyAppId","_grantNarrativeAccess","grantResourceAccess","_x18","_requestMembership","requestMembership","_x19","_addOrRequestNarrativeToGroup","addOrRequestNarrative","_x20","_x21","_addOrRequestAppToGroup","addOrRequestResource","_x22","_x23","_memberToAdmin","memberToAdmin","_x24","_x25","_adminToMember","_callee20","_context20","adminToMember","_x26","_x27","_removeMember","_callee21","_context21","removeMember","_x28","_x29","_updateMember","_callee22","_context22","updateMember","_x30","_x31","_x32","_visitOrg","_callee23","_context23","visitGroup","_x33","_getOpenRequestsStatus","_callee24","organizationIds","openRequests","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context24","getOpenRequests","Symbol","iterator","done","stringToRequestStatus","return","finish","_x34","_getOpenRequestStatus","_callee25","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context25","_x35","_addRelatedOrganization","_callee26","relatedOrganizationId","_context26","addRelatedGroup","_x36","_removeRelatedOrganization","_callee27","_ref13","_context27","removeRelatedGroup","_x37","new","OLD","makeError","history","uuid","at","applyQuery","searchExp","re","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS","subViews","manageRelatedOrganizationsView","MANAGE_RELATED_ORGS","availableOrganizations","queried","selectedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION","availableOrgs","relatedOrg","isSelected","actions","selectOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS","newRelatedOrgs","newAvailableOrgs","isRelated","addOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","relatedOrgs","removeOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS","searchSuccess","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","localReducer","VIEW_ORG_ADD_APPS_LOAD_START","VIEW_ORG_ADD_APPS_LOAD_SUCCESS","rawApps","selectedApp","VIEW_ORG_ADD_APPS_LOAD_ERROR","VIEW_ORG_ADD_APPS_UNLOAD","VIEW_ORG_ADD_APPS_SELECT_SUCCESS","newRawApps","app","selected","newApps","selectSuccess","VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS","pending","ASSOCIATION_PENDING","ASSOCIATED","requestAssociationSuccess","VIEW_ORG_ADD_APPS_SEARCH_SUCCESS","haveReducer","newViewState","addAppsView","VIEW_ORG_LOAD_START","types","VIEW_ORG_LOAD_NORMAL_SUCCESS","openRequest","groupInvitations","narrativesSortBy","inviteUserView","requestNarrativeView","manageMembershipView","loadNormalSuccess","VIEW_ORG_RELOAD_NORMAL_SUCCESS","reloadNormalSuccess","VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS","PRIVATE_INACCESSIBLE","loadInaccessiblePrivateSuccess","VIEW_ORG_LOAD_ERROR","VIEW_ORG_UNLOAD","VIEW_ORG_REMOVE_NARRATIVE_SUCCESS","newNarratives","newDisplayNarratives","removeNarrativeSuccess","VIEW_ORG_ACCESS_NARRATIVE_SUCCESS","accessNarrativeSuccess","VIEW_ORG_SORT_NARRATIVES_SUCCESS","sortNarrativesSuccess","VIEW_ORG_SEARCH_NARRATIVES_SUCCESS","searchNarrativesSuccess","VIEW_ORG_REMOVE_APP_SUCCESS","newOrgApps","removeAppSuccess","acceptInboxRequest","denyInboxRequest","cancelOutboxRequest","viewMembers","manageRelatedOrganizations","addApps","BROWSE_ORGS_LOAD_SUCCESS","_action$defaultViewMo","defaultViewModel","rawOrganizations","totalCount","filteredCount","selectedOrganizationId","searching","BROWSE_ORGS_SEARCH","searchOrgs","BROWSE_ORGS_SEARCH_START","searchOrgsStart","BROWSE_ORGS_SEARCH_SUCCESS","searchOrgsSuccess","BROWSE_ORGS_SEARCH_ERROR","searchOrgsError","BROWSE_ORGS_SORT_START","sortOrgsStart","BROWSE_ORGS_FILTER_START","filterOrgsStart","BROWSE_ORGS_UNLOAD","AUTH_CHECK_START","auth","CHECKING","authorization","authCheckStart","AUTH_AUTHORIZED","AUTHORIZED","authAuthorized","AUTH_UNAUTHORIZED","UNAUTHORIZED","authUnauthorized","AUTH_CHECK_ERROR","authCheckError","APP_SUCCESS","READY","config","appSuccess","ADMIN_MANAGE_REQUESTS_LOAD_START","ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS","manageOrganizationRequestsView","ADMIN_MANAGE_REQUESTS_LOAD_ERROR","ADMIN_MANAGE_REQUESTS_UNLOAD","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS","newRequests","getViewAccessSuccess","VIEW_MEMBERS_LOAD_START","viewMembersView","VIEW_MEMBERS_LOAD_SUCCESS","VIEW_MEMBERS_LOAD_ERROR","VIEW_MEMBERS_UNLOAD","VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","INVITE_USER_LOAD_START","INVITE_USER_LOAD_SUCCESS","EDITING","selectedUser","INVITE_USER_LOAD_ERROR","INVITE_USER_UNLOAD","INVITE_USER_SEARCH_USERS_SUCCESS","searchUsersSuccess","INVITE_USER_SELECT_USER_SUCCESS","selectUserSuccess","INVITE_USER_SEND_INVITATION_START","SENDING","sendInvitationStart","INVITE_USER_SEND_INVITATION_SUCCESS","_state$viewModel","orgModel","newUsers","sendInvitationSuccess","INVITE_USER_SEND_INVITATION_ERROR","sendInvitationError","editableMemberProfile","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR","VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD","VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS","editedMember","updateTitleSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS","evaluateSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR","evaluateError","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS","sendRequestStart","REQUEST_ADD_NARRATIVE_LOAD_START","REQUEST_ADD_NARRATIVE_LOAD_SUCCESS","selectedNarrative","selectionState","REQUEST_ADD_NARRATIVE_LOAD_ERROR","REQUEST_ADD_NARRATIVE_SEND_START","REQUEST_ADD_NARRATIVE_SEND_SUCCESS","orgNarrative","REQUESTED","sendRequestSuccess","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START","selectNarrativeStart","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS","selectNarrativeSuccess","REQUEST_ADD_NARRATIVE_UNLOAD","REQUEST_ADD_NARRATIVE_SORT_SUCCESS","sortSuccess","ENTITY_ORGANIZATION_LOAD_SUCCESS","newOrgs","entities","byId","ENTITY_USER_LOADER_SUCCESS","userLoaderSuccess","ENTITY_ORGANIZATION_LOADER_SUCCESS","orgsMap","organizationLoaderSuccess","ENTITY_NARRATIVE_LOAD_SUCCESS","loadNarrativeSuccess","ENTITY_LOAD_APP_SUCCESS","loadAppSuccess","organizationsReducer","DATA_SERVICE_LOAD_SUCCESS","db","View","addOrgReducer","editOrgReducer","browseOrgsView","browseOrgsReducer","viewOrgReducer","authReducer","appReducer","manageOrganizatiopRequests","inviteUser","manageMembership","requestAddNarrative","dataServices","OrgLogo","props","react","src","width","size","inString","position","charCodeAt","c2","substring","initial","charAt","organizationName","toUpperCase","color","md5","substr","height","style","border","x","y","dy","textAnchor","dominantBaseline","fontSize","fill","fontFamily","renderLogoUrl","renderDefaultInitial","renderLogo","React","Avatar","_React$Component","noUserPic","avatarUrl","getAvatarUrl","reverseView","v","COMPACT","Owner","view","setState","icon","showAvatar","className","components_entities_Avatar","avatarSize","tooltip","renderAvatar","es_tooltip","placement","href","target","onClick","onToggleView","bind","renderCompact","iso8601ToDate","dateString","dateParts","exec","offset","newDateString","workspaceInfoToObject","wsInfo","objectCount","userPermission","globalReadPermission","lockStatus","metadata","objectInfoToObject","data","majorVersion","minorVersion","savedAt","savedBy","workspaceName","checksum","ref","JSONRPCException","classJSONRPCServerException","_Error2","_processResponse","_ref3$result","methodResult","_error","_callFunc","Headers","processResponse","_callFunc2","WorkspaceClient","_getVersion","_getObjectInfo","objectInfo","_getWorkspaceInfo","ServiceWizardClient","_getServiceStatus","theResult","AuthorizedGenericClient","_GenericClient","GenericClient","_result","moduleCache","Cache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cacheLifetime","isMonitoring","window","setTimeout","newCache","cacheRenewed","keys","item","isExpired","runMonitor","cacheItem","reserved","cached","Bluebird","started","waiter","reserveAndFetch","fetcher","catch","err","elapsed","reserveItem","fetchPromise","setItem","finally","isCancelled","isReserved","reserveWaiter","DynamicServiceClient","timeout","rpcContext","moduleId","getModule","getItemWithWait","_this4","getCached","client","getServiceStatus","module_name","funcName","_this5","lookupModule","serviceStatus","NarrativeAccess","Sort","NarrativeServiceClient","_DynamicServiceClient","_listNarratives","AppType","NarrativeModel","_getOwnNarratives","narrativeServiceClient","requestClient","narrativesResult","pendingRequests","workspacesInOrg","serviceWizardURL","listNarratives","getPendingRequestsForOrg","nar","workspaceInfo","workspaceApi","ws","is_temporary","access","objectId","narrative_nice_name","lastSavedAt","lastSavedBy","TITLE","LAST_SAVED","sorter","getSorter","_getNarrative","wsClient","rawWorkspaceInfo","_objectId","rawObjectInfo","_access","workspaceServiceURL","getWorkspaceInfo","getObjectInfo3","objects","wsid","objid","includeMetadata","ignoreErrors","infos","t2","NarrativeMethodStoreClient","_version","_list_methods","_get_method_full_info","convertIcon","convertAppType","app_type","EDITOR","VIEWER","ADVANCED_VIEWER","convertSuggestions","suggestions","relatedMethods","related_methods","nextMethods","next_methods","relatedApps","related_apps","nextApps","next_apps","convertPublications","publications","publication","pubMedID","pmid","displayText","display_text","link","methodFullInfoToApp","git_commit_hash","ver","authors","kb_contributors","contact","subtitle","technical_description","categories","screenshots","moduleName","gitCommitHash","kbaseContributors","technicalDescription","appType","methodBriefInfoToAppBriefInfo","loading_error","input_types","output_types","iconURL","loadingError","inputTypes","outputTypes","AppClient","narrativeMethodStoreURL","_getApp","methodInfo","narrativeMethodStoreAPI","get_method_full_info","tag","userLoader","userId","dispatch","getState","_getState","_getState$auth$author","model","_user","ENTITY_USER_LOADER_START","services","UserProfile","getUser","ENTITY_USER_LOADER_ERROR","loadNarrative","_getState3","_getState3$auth$autho","narrativeClient","_narrative","ENTITY_NARRATIVE_LOAD_START","narrativeModel","Workspace","Groups","ServiceWizard","getNarrative","ENTITY_NARRATIVE_LOAD_ERROR","Loader","times","Owner_Owner","onLoad","connect","niceElapsed","someDate","measure","measureAbs","unit","options","nowDate","now","elapsedAbs","abs","absoluteAfter","prefix","suffix","compactDate","getFullYear","Intl","DateTimeFormat","month","day","format","year","intervals","Infinity","NiceElapsedTime","nowTimer","interval","calcInterval","upto","startIntervalTimer","clearInterval","setInterval","handleInterval","showTooltip","fullDate","hour","minute","timeZoneName","tooltipPrefix","BriefOrganization","OrgLogo_OrgLogo","mouseEnterDelay","newAlert","theme","requestsAlert","iconColor","openRequestsStatus","INAPPLICABLE","permalink","fontWeight","location","origin","menu","es_menu","Modal","content","Item","dropdown","overlay","trigger","NavLink","to","renderRelation","renderPrivacy","renderHomeUrl","renderOrgFreshness","renderRequests","renderPermalink","second","OwnerContainer","fullTimestamp","memberCountTooltip","renderMemberCount","count","renderNarrativeCount","NiceElapsedTime_NiceElapsedTime","renderMemberRow","renderNarrativeRow","renderModifiedRow","renderLogoColumn","renderInfoCol","renderStatsCol","renderNormal","Organizations","singular","plural","es_button","myOrgsUnfiltered","es_alert","maxWidth","margin","index","BriefOrganization_BriefOrganization","renderNoOrgs","overflowY","display","flexDirection","renderOrgs","_state$views$browseOr","OrganizationsBrowser","searchInput","searchButton","filterByRoleValues","label","filterByRoleType","filterByRole","filterByPrivacy","showAdvancedControls","onSearchOrgs","current","currentSearchInputValue","e","preventDefault","doSearch","onSortOrgs","newFilter","onFilterOrgs","checkedValues","onSearchInputChange","onSubmit","placeholder","onChange","autoFocus","disabled","haveSearchInput","form","htmlType","renderSearchIcon","onClearSearch","renderSearchFeedback","renderSearchForm","marginRight","es_select","onSortByChange","dropdownMatchSelectWidth","Option","_this$props$filter","onToggleAdvanced","radioStyle","lineHeight","es_radio","Group","onFilterByRoleTypeChange","renderAdvancedToggle","es_checkbox","onFilterByRoleChange","onFilterByPrivacyChange","container","renderSortByControl","marginTop","renderFilterByRole","renderFilterByPrivacy","textAlign","borderTop","renderSearchBar","renderOrganizations","renderFilterColumn","storeState","_storeState$views$bro","_getState2","_getState2$auth$autho","_browseOrgsView$viewM","orgClient","_organizations2","adminOrgs","_openRequests2","queryOrgs","getOpenRequestsStatus","_browseOrgsView$viewM2","_organizations3","_openRequests3","_getState4","_getState4$auth$autho","_browseOrgsView$viewM3","_organizations4","_openRequests4","spin","padding","renderLoading","renderError","browseOrgs_container","onUnload","checkLogoUrlProcess","defaultSearchTerms","defaultSortField","defaultSortDirection","defaultFilter","_organizations","_openRequests","_defaultViewModel","BROWSE_ORGS_LOAD_START","DebouncingProcess","delay","canceled","timer","clearTimeout","task","UIServiceClient","_checkImageURL","_ref3$","serverError","_checkHTMLURL","_ref6$","AddOrgEvaluateErrors","load","validateOrgLogoUrl","validateOrgHomeUrl","validateOrgResearchInterests","addOrgEvaluate","addOrg","ADD_ORG_SAVE_START","_state$auth$authoriza","exception","_state$views$addOrgVi","orgModelFromState","_state$auth$authoriza2","updateName","_Validation$validateO","_Validation$validateO2","validatedName","checkHomeUrlProcess","CheckIfLogoUrlExistsProcess","checkImageURL","is_valid","CheckIfHomeUrlExistsProcess","checkHTMLURL","checkIDProcess","CheckIfExistsProcess","orgExists","updateDescription","_Validation$validateO11","_Validation$validateO12","validatedDescription","NewOrganization","cancelToBrowser","showError","document","isModified","confirm","onOk","onCancel","okText","cancelText","onSave","persist","onUpdateName","onUpdateDescription","onUpdateId","onUpdateLogoUrl","onUpdateHomeUrl","onUpdateResearchInterests","onUpdateIsPrivate","checked","field","nameField","input","calcFieldClass","renderFieldError","idField","logoUrlField","onLogoUrlChange","renderLogoPreview","homeUrlField","renderBrokenHomeURL","renderHomeURLPreview","collapse","bordered","Panel","header","background","borderRadius","overflow","isPrivateField","renderIsPrivate","researchInterestsField","TextArea_default","autosize","minRows","maxRows","descriptionField","es_tabs","defaultActiveKey","animated","TabPane","tab","dangerouslySetInnerHTML","__html","Marked","parse","flex","renderEditorHeader","renderNameRow","onNameChange","renderIDRow","onIdChange","renderLogoURLRow","renderHomeURLRow","onHomeUrlChange","renderPrivatePublicRow","onIsPrivateChange","renderResearchInterestsRow","onResearchInterestsChange","renderDescriptionRow","onDescriptionChange","renderSaveButton","renderCancelButton","renderDefaultLogo","renderBrokenLogo","_this$props","line","modal","visible","okType","canSave","onClickCancelToBrowser","errorButton","shape","toggleError","es_Redirect","renderEditor","cancel","_Validation$validateO3","_Validation$validateO4","validatedLogoUrl","start","updateLogoUrl","_Validation$validateO9","_Validation$validateO10","validatedId","updateId","updateIsPrivate","_Validation$validateO5","_Validation$validateO6","validatedHomeUrl","updateHomeUrl","_Validation$validateO7","_Validation$validateO8","validatedResearchInterests","updateResearchInterests","Component","newOrganization_container","UberModel","_getOrganizationForUser","getUserRequestForOrg","getUserInvitationForOrg","getPendingOrganizationRequestsForOrg","DATA_SERVICE_LOAD_START","removeNarrativeError","VIEW_ORG_REMOVE_NARRATIVE_ERROR","accessNarrativeError","VIEW_ORG_ACCESS_NARRATIVE_ERROR","viewOrgJoinRequestError","VIEW_ORG_JOIN_REQUEST_ERROR","acceptJoinInvitationStart","VIEW_ORG_ACCEPT_JOIN_INVITATION_START","uberClient","_organization","_relation","_requestInbox2","_openRequest","orgRequests","orgInvitations","_requestInbox","_requestOutbox","_narratives2","_apps","_members","uberModel","getOrganizationForUser","getRequestInboxForOrg","getOrganizationInvitationsForOrg","getOpenRequestStatus","getCombinedRequestInboxForOrg","getRequestOutboxForOrg","reload","_organization2","_relation2","_requestInbox4","_openRequest2","_requestInbox3","_requestOutbox2","_narratives3","_apps2","_members2","viewOrgJoinRequest","_state$auth$authoriza3","VIEW_ORG_JOIN_REQUEST_SUCCESS","viewOrgCancelJoinRequest","_state$auth$authoriza4","newRequest","VIEW_ORG_JOIN_REQUEST_START","VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR","acceptJoinInvitation","_state$auth$authoriza5","VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS","VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR","rejectJoinInvitation","_state$auth$authoriza6","VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS","VIEW_ORG_REJECT_JOIN_INVITATION_ERROR","removeApp","VIEW_ORG_REMOVE_APP_START","ensureViewModel","_state$auth$authoriza7","orgClientFromState","removeAppFromOrg","VIEW_ORG_REMOVE_APP_ERROR","_request","inbox","VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR","VIEW_ORG_ACCEPT_INBOX_REQUEST_START","viewOrgActions","Header","context","currentMenuItem","breadcrumbs","verticalAlign","marginLeft","buttons","promoteToAdmin","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR","demoteToMember","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START","reloadOrg","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR","Member","userTooltip","renderRole","components_entities_Member","Members","confirmMemberRemoval","marginBottom","MemberContainer","onRemoveMember","onPromoteMemberToAdmin","onConfirmRemoveMember","onDemoteAdminToMember","onMemberMenu","onAdminMenu","renderOwnerMenu","renderAdminMenu","renderMemberMenu","fontStyle","classNames","renderMemberOptions","_this6","paddingRight","onSearchMembers","_this7","onSortMembers","renderSortBar","renderConfirmMemberRemoval","renderHeader","renderMembers","onViewMembersUnload","VIEW_ORG_VIEW_MEMBERS_UNLOAD","adminUsername","VIEW_ORG_SORT_MEMBERS_START","VIEW_ORG_SORT_MEMBERS_ERROR","ViewMembers","VIEW_ORG_REJECT_INBOX_REQUEST_START","VIEW_ORG_REJECT_INBOX_REQUEST_ERROR","_requests","VIEW_ORG_CANCEL_JOIN_REQUEST_START","User","components_entities_User","Narrative","cursor","UserContainer","renderPublicPermission","renderUserPermission","Narrative_Narrative","App","authorCount","authorUsername","sep","renderViewControl","renderIcon","renderAuthors","component_App","appClient","_app","ENTITY_LOAD_APP_START","appModel","NarrativeMethodStore","getApp","ENTITY_LOAD_APP_ERROR","Request","onAcceptInboxRequest","onRejectInboxRequest","NarrativeContainer","renderRequestRequester","renderRequestOptions","app_loader","onAcceptRequest","onRejectRequest","renderRequestReceivedSubject","renderJoinRequest","renderWorkspaceRequest","renderAppRequest","renderUserInvitation","renderBody","acceptActions","rejectActions","InboxRequest","onCancelOutboxRequest","alert","onCancelRequest","cancelActions","OutboxRequest","ManageGroupRequests","cancelToViewer","onAcceptJoinRequest","onDenyJoinRequest","onCancelJoinInvitation","onGetViewAccess","open","src_components_Header","card","hoverable","headStyle","backgroundColor","narrativeAccess","InboxRequestContainer","outbox","OutboxRequestContainer","outboxCount","inboxCount","renderInbox","renderOutbox","cancelRequestActions","orgMenu","onNavigateToBrowser","renderBackButton","renderButtonsRow","Organization","component_Organization","Inaccessible_Organization","ENTITY_ORGANIZATION_LOAD_START","ENTITY_ORGANIZATION_LOAD_ERROR","RelatedOrganizations","onManageRelatedOrgs","onRemoveRelatedOrganization","Wrapped","withRouter","OrganizationEntity","renderControls","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","removeRelatedOrganization","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR","AvailableOrganization","selectableOrganization","renderRelated","ManageRelatedOrganizations","onAddOrganization","onRemoveOrganization","onSearch","onFilterChange","classes","onSelectOrganization","AvailableOrganization_AvailableOrganization","button","alertStyle","onRemoveSelectedOrganization","onAddSelectedOrganization","onFinish","renderAvailableToolbar","renderAvailableOrgs","renderSelectedOrg","_viewModel$subViews$m","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START","addRelatedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","vm","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR","manageRelatedOrganizations_reduxAdapter","vm1","selectableOrgs","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR","selectUserError","INVITE_USER_SELECT_USER_ERROR","getUserRelation","inboxRequests","outboxRequests","ensureView","sendInvitation","_ensureView3","_view$viewModel","inviteUserToJoinOrg","MainMenu","es_Route","render","selectedKeys","pathname","renderMenu","UserWrapped","InviteUser","lastSearchAt","autocompleteMessage","onSendInvitation","doSearchUsers","searchDebounce","onSearchUsers","onSelectUser","showIcon","renderUser","src_components_User","statusIconType","statusTooltip","statusIcon","statusIconColor","UserWrappedContainer","SENDABLE","onClickCancelToViewer","components_menu_component","renderMenuButtons","renderSearchButton","renderUsers","renderSelectedUser","renderInvitationForm","renderFooter","userClient","adminUsers","invited","requested","_users","orgUsers","INVITE_USER_SEARCH_USERS_START","INVITE_USER_SEARCH_USERS_ERROR","selectedUsername","orgViewModel","_ensureView","_ensureView2","INVITE_USER_SELECT_USER_START","InviteUserLoader","inviteUser_container","entities_UserSimple","iconType","UserSimpleContainer","renderGlobalPermission","renderNiceElapsed","renderNarrative","component_Narrative","OrganizationNarrative","requestAccess","shareButton","permissionTooltip","buttonTooltip","onRequestAccess","narrative_reduxAdapter","renderNarrativePermission","accessModal","drawer","closable","onClose","onCloseRequestAccess","Narratives","onRequestAddNarrative","onRemoveNarrative","onNarrativeMenu","onSearchNarratives","onSortNarratives","sortNarrativesBy","lastOrgVisitAt","OrganizationNarrative_OrganizationNarrative","renderNarrativeMenu","narrativesTable","extras","renderMemberNarrativeRow","narrativesToShow","hiddenNarrativeCount","renderMemberNarratives","renderNonMemberNarratives","evaluate","demoteSelfToMember","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS","demoteSelfToMemberSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR","ManageMembership","confirmed","doLeaveOrgConfirmed","onLeaveOrganization","onDemoteSelfToMemberConfirmed","onDemoteSelfToMember","onUpdateTitle","leaveOrgButton","doLeaveOrg","adminTooltip","ownerTooltip","onTitleChange","onDone","renderTitleRow","renderLeaveOrgButton","renderDemoteToMemberButton","subViewModel","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR","_Validation$validateM","validateMemberTitle","_Validation$validateM2","validatedTitle","VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR","manageMembership_container","thisMember","editableProfile","editableOrg","editOrgSave","_state$views$editOrgV","updateOrg","editOrgEvaluate","editOrgUpdateDescriptionSuccess","NavigateTo","EditOrganization","navigateTo","onEditOrgSave","editOrganization_container","RowWrapper","containerDimensions","buffer","approximateRowHeight","containerVisibleTop","max","scrollTop","containerVisibleBottom","clientHeight","h","offsetHeight","offsetTop","isVisible","children","emptyRowRenderer","Renderable","currentItem","FlexibleColumnWrapper","wrapperContainerRef","listeners","limitingTimer","limitingTimeout","checkDimensions","currentDimensions","calcContainerBounds","lastDimensions","fun","scrollHandler","limiter","addEventListener","listener","resizeHandler","removeEventListener","out","renderable","RowWrapper_RowWrapper","renderEmpty","NarrativeRenderer","rowRenderer","rowCount","RequestAddNarrative","doSelectNarrative","doSendRequest","flag","narrativeRenderer","renderOrgNarrative","FlexibleColumnWrapper_FlexibleColumnWrapper","onSearchSubmit","NumberFormat","useGrouping","doSortBy","renderFilterSortBar","renderFeedbackBar","renderNarratives","buttonLabel","canSendRequest","warning","renderNarrativeSelector","renderSelectedNarrative","renderSelectedAlert","renderSelectedNarrativeButton","selectNarrative","_request2","addOrRequestNarrativeToGroup","REQUEST_ADD_NARRATIVE_SEND_ERROR","REQUEST_ADD_NARRATIVE_SORT_START","REQUEST_ADD_NARRATIVE_SORT_ERROR","sortOrganizationNarratives","requestAddNarrative_container","_narratives","getOrganization","getOwnNarratives","OrgMenu","onJoinOrg","onCancelJoinRequest","onAcceptInvitation","onRejectInvitation","onChangeSubView","MANAGE_MEMBERSHIP","EDIT_ORGANIZATION","INVITE_USER","ADD_NARRATIVE","ADD_APP","onJoinClick","onMenuClick","adminMenu","ownerMenu","renderOrgMenu","Apps","onRemoveApp","onAssociateApp","doRemoveApp","renderButtonRow","renderSearchRow","renderBrowseRows","addAppsViewModel","searchExpression","expr","AddApps","onSelectApp","onRequestAssociation","log","doSelectApp","renderAppStatus","renderApps","alertType","doRequestAssociation","renderSelectedApp","renderMessage","renderAppSelectionControls","renderAppSelector","renderAppAdder","selectedAppId","_ensureViewModel","_ensureViewModel2","_ensureViewModel3","_ensureViewModel4","_getState$app$config$","groupsUrl","userProfileUrl","groupsAppId","addOrRequestAppToGroup","VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_ERROR","_ensureViewModel5","_ensureViewModel6","_rawApps","foundApps","VIEW_ORG_ADD_APPS_SEARCH_START","VIEW_ORG_ADD_APPS_SEARCH_ERROR","addApps_reduxAdapter","AccordionState","nmsClient","hasInboxRequest","hasOutboxRequest","methods","appResources","list_methods","appResource","appsModel","ViewOrganization","showInfo","accordionState","UP","subView","renderEditRow","reduxAdapter","onReloadOrg","inner","twoToneColor","renderGroupRequestsRow","_this$props$viewModel","renderGroupRequests","renderMembersToolbar","onInviteUser","doAddRelatedOrgs","tabs","renderMembersTab","totalRequestCount","totalRequests","requests_container","titleCount","outboxSize","relatedOrgCount","relatedOrgTab","renderRelatedOrgsToolbar","relatedOrgs_reduxAdapter","tabPosition","BROWSER","VIEW_MEMBERS","MANAGE_REQUESTS","DOWN","toggleAccordion","component_Narratives","searchNarrativesBy","component_Apps","aboutTabTitle","renderDescriptionTab","narrativesTabTitle","renderNarrativesTab","appsTabTitle","renderAppsTab","renderMainTabs","renderCombo","manageRelatedOrganizations_loader","inviteUser_loader","manageMembership_loader","editOrganization_loader","requestAddNarrative_loader","_this8","addApps_loader","renderManageRelatedOrgsView","renderInviteUsersView","renderManageMembership","renderEditOrganization","renderAddNarrative","renderAddApp","renderNormalView","borg","OrgMenu_OrgMenu","BriefOrganizationHeader_BriefOrganization","getSubView","onViewOrg","VIEW_ORG_REMOVE_NARRATIVE_START","removeNarrativeFromOrg","_viewModel$narratives","filteredNarratives","VIEW_ORG_ACCESS_NARRATIVE_START","grantNarrativeAccess","acceptInboxRequestActions","VIEW_ORG_SORT_NARRATIVES_START","renderJoinButton","onShowInfo","renderOrg","ownProps","previousOrganizationId","inaccessible_container","accessible_container","previousProps","visitOrg","Auth","tokenRef","checkAuth","onRemoveAuthorization","onAddAuthorization","onLoginClick","onLogoutClick","buildAuthToolbar","buildAuthForm","hosted","buildAuthProd","buildAuthDev","endpoints","AuthClient","makePath","Cookies","getTokenInfo","getMe","account","desc","Listener","onSuccess","onError","WaitingListener","Message","channelId","created","envelope","uuidv4","Channel","host","awaitingResponse","waitingListeners","lastId","sentCount","receivedCount","unwelcomeReceivedCount","unwelcomeReceivedCountThreshhold","unwelcomeReceiptWarning","unwelcomeReceiptWarningCount","currentListener","messageEvent","handler","awaiting","messageId","success","listen","postMessage","getMessage","sendMessage","sendRequest","_loop","startMonitor","listenOnce","received","receiveMessage","IFrameSimulator","channel","frameId","authServiceURL","originalPath","viewParams","parentHost","IFrameIntegration","frameElement","hasAttribute","getAttribute","decodeURIComponent","KBaseIntegration","on","send","greeting","onAppStart","setupChannel","teardownChannel","_state$app","_state$app$config","defaultPath","iframeParams","getParamsFromIFrame","pushState","baseUrl","StateInstances","DataServices","DATA_SERVICE_UNLOAD","AppContextProvider","Provider","Consumer","library","faSpinner","faSearch","faGlobe","faUserLock","faSquare","faCube","DescriptionRenderer","sanitize","prot","unescape","replace","toLowerCase","Renderer","MarkedOptions","renderer","setOptions","initialState","makeInitialState","store","createStore","theReducer","compose","applyMiddleware","thunk","F","react_default","createElement","viewOrganization_loader","es","containers_KBaseIntegration","containers_Auth","storeAdapter","BrowserRouter","basename","Switch","Route","component","exact","Redirect","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.19dfb45f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import * as userProfile from \"../data/apis/userProfile\"\nimport * as groups from \"../data/apis/groups\"\nimport * as orgModel from '../data/models/organization/model'\nimport * as userModel from \"../data/models/user\"\nimport * as requestModel from '../data/models/requests'\nimport * as narrativeModel from '../data/models/narrative'\nimport * as appModel from '../data/models/apps'\nimport { AnError } from \"../combo/error/api\";\n\n/* Types from the organization service (approximately) */\n\n/*\n    Organization\n*/\n\n\nexport enum ComponentView {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport enum UIErrorType {\n    NONE = 0,\n    INFO,\n    WARNING,\n    ERROR\n}\n\nexport interface UIError {\n    type: UIErrorType\n    message?: string\n}\n\nexport enum SyncState {\n    NONE = 0,\n    NEW,\n    DIRTY,\n    CLEAN\n}\n\nexport enum EditState {\n    NONE = 'NONE',\n    UNEDITED = 'UNEDITED',\n    EDITED = 'EDITED'\n}\n\n\n// export enum ValidationState {\n//     NONE = 0,\n//     VALID,\n//     INVALID,\n//     // DIRTY = 'DIRTY',\n//     MISSING\n// }\n\nexport enum ValidationErrorType {\n    OK = 0,\n    ERROR,\n    REQUIRED_MISSING\n}\n\nexport interface ValidationStateBase {\n    type: ValidationErrorType\n    validatedAt: Date\n}\n\nexport interface ValidationStateOk extends ValidationStateBase {\n    type: ValidationErrorType.OK\n}\n\nexport interface ValidationStateError extends ValidationStateBase {\n    type: ValidationErrorType.ERROR\n    message: string\n}\n\nexport interface ValidationStateRequiredMissing extends ValidationStateBase {\n    type: ValidationErrorType.REQUIRED_MISSING\n    message: string\n}\n\n// export interface ValidationStateAsyncError extends ValidationStateBase {\n//     type: ValidationErrorType.ASYNC_ERROR\n//     message: string\n//     \n// }\n\nexport type ValidationState = ValidationStateOk | ValidationStateError | ValidationStateRequiredMissing\n\nexport interface Editable {\n    value: any\n    remoteValue: any\n    syncState: SyncState\n    // editState: EditState\n    // validationState: ValidationState\n    validationState: ValidationState\n    // validatedAt: Date | null\n    // error: UIError\n}\nexport interface EditableString extends Editable {\n    value: string,\n    remoteValue: string | null\n}\n\nexport interface EditableNullableString extends Editable {\n    value: string | null\n    remoteValue: string | null\n}\n\nexport interface EditableBoolean extends Editable {\n    value: boolean\n    remoteValue: boolean | null\n}\n\nexport interface EditableOrganization {\n    id: EditableString\n    name: EditableString\n    description: EditableString\n    isPrivate: EditableBoolean\n    logoUrl: EditableNullableString\n    homeUrl: EditableNullableString\n    researchInterests: EditableString\n}\n\n\n// TODO: or CLEAN to replace new and saved\nexport enum SaveState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    READY = 'READY',\n    SAVING = 'SAVING',\n    SAVED = 'SAVED',\n    SAVE_ERROR = 'SAVE_ERROR'\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    user: User,\n    type: MemberType\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport type Username = string\n\nexport interface App {\n    id: string,\n    module: string,\n    func: string,\n    version: string,\n    title: string,\n    category: string\n}\n\nexport interface AppResource {\n    id: string\n}\n\nexport interface EditedOrganization {\n    id: {\n        value: string,\n        error?: UIError\n    }\n    name: {\n        value: string,\n        error?: UIError\n    }\n    description: {\n        value: string,\n        error?: UIError\n    }\n}\n\n/*\n    Collection of organizations\n*/\n\n/* REDUX */\n\nexport enum AuthState {\n    NONE = 0,\n    CHECKING,\n    AUTHORIZED,\n    UNAUTHORIZED,\n    ERROR\n}\n\nexport interface UserAuthorization {\n    token: string,\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\n\nexport interface Authorization {\n    status: AuthState,\n    message: string,\n    authorization: UserAuthorization\n}\n\nexport enum ViewOrgState {\n    NONE = 0,\n    INITIAL,\n    FETCHING,\n    READY,\n    ERROR\n}\n\nexport enum AppState {\n    NONE = 0,\n    LOADING,\n    READY,\n    ERROR\n}\n\nexport enum SortDirection {\n    ASCENDING = 'asc',\n    DESCENDING = 'desc'\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface ManageOrganizationRequestsViewModel {\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface ManageOrganizationRequestsView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageOrganizationRequestsViewModel | null\n}\n\nexport interface ViewMembersViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface ViewMembersView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: ViewMembersViewModel | null\n}\n\nexport enum BrowseOrgsState {\n    NONE = 0,\n    SEARCHING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface BrowseOrgsViewModel {\n    rawOrganizations: Array<orgModel.BriefOrganization>\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    sortField: string\n    sortDirection: SortDirection\n    filter: orgModel.Filter\n    searchTerms: Array<string>\n    selectedOrganizationId: string | null,\n    // TODO: let's make a new interface for running operations...\n    searching: boolean\n    error: AppError | null\n}\n\nexport interface BrowseOrgsView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: BrowseOrgsViewModel | null\n}\n\nexport enum InviteUserViewState {\n    NONE = 0,\n    EDITING,\n    SENDABLE,\n    SENDING,\n    SUCCESS,\n    ERROR\n}\n\n// user info we get out of user profile search\n\n\n// a user who may or may not be in an org, with org relation info\n// todo: fetch more profile info.\nexport interface OrganizationUser {\n    username: string\n    realname: string\n    relation: orgModel.UserRelationToOrganization\n}\n\n// View Model / Invite User (for admins)\n\nexport interface InviteUserViewModel {\n    organization: orgModel.Organization\n    users: Array<OrganizationUser> | null\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState\n}\n\n\n\nexport interface ManageMembershipViewModel {\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\n// export interface ManageMembershipView {\n//     loadingState: ComponentLoadingState\n//     error: AnError | null\n//     viewModel: ManageMembershipViewModel | null\n// }\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport interface Narrative {\n    workspaceId: number\n    objectId: number\n    title: string\n    status: NarrativeState\n    owner: Username\n    modifiedAt: Date\n}\n\nexport enum ProcessingState {\n    NONE = 0,\n    PROCESSING,\n    SUCCESS,\n    ERROR\n}\n\n\nexport enum RequestNarrativeState {\n    NONE = 0,\n    LOADING,\n    ERROR,\n    LOADED,\n    SELECTING,\n    SELECTED,\n    SENDING,\n    SENT\n}\n\nexport enum SelectionState {\n    NONE = 0,\n    SELECTING,\n    SELECTED\n}\n\n// Add app view model\n\nexport enum ResourceRelationToOrg {\n    NONE = 0,\n    ASSOCIATED,\n    ASSOCIATION_PENDING\n}\nexport interface SelectableApp {\n    app: appModel.AppBriefInfo\n    selected: boolean\n    relation: ResourceRelationToOrg,\n    appId: string // according to groups (module.method, not module/method)\n}\nexport interface AddAppsViewModel {\n    rawApps: Array<SelectableApp>\n    selectedApp: SelectableApp | null\n    searchBy: string\n    sortBy: string\n    apps: Array<SelectableApp>\n}\n\n// ViewModel / RequestAddNarrative\n\nexport interface RequestNarrativeViewModel {\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    relation: orgModel.Relation\n    error: AnError | null\n    selectionState: SelectionState\n    saveState: SaveState\n}\n\n// Add Org\n\nexport interface AddOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    error: AppError | null\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n}\n\nexport interface AddOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: AddOrgViewModel | null\n}\n\n// Entities\n\nexport interface UserEntity {\n    userId: string\n    profile: userProfile.UserProfile\n}\n\nexport interface OrganizationEntity {\n    groupId: string\n    group: groups.Group\n}\n\nexport interface RequestEntity {\n    requestId: string\n    request: groups.Request\n}\n\nexport enum ViewOrgViewModelKind {\n    NORMAL = 0,\n    PRIVATE_INACCESSIBLE\n}\n\n// TODO: just for view org view, should be namespaced or something.\nexport enum SubViews {\n    NORMAL = 0,\n    MANAGE_RELATED_ORGS,\n    INVITE_USER,\n    MANAGE_MEMBERSHIP,\n    EDIT_ORGANIZATION,\n    ADD_NARRATIVE,\n    ADD_APP\n}\n\nexport interface ViewOrgViewModel {\n    kind: ViewOrgViewModelKind.NORMAL,\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n    narratives: {\n        sortBy: string\n        searchBy: string\n        narratives: Array<orgModel.NarrativeResource>\n    }\n    apps: {\n        sortBy: string\n        searchBy: string\n        apps: Array<orgModel.AppResource>\n    }\n    // sortNarrativesBy: string\n    // searchNarrativesBy: string\n    // narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string\n    searchMembersBy: string\n    members: Array<orgModel.Member>\n\n    subViews: {\n        manageRelatedOrganizationsView: View<ManageRelatedOrgsViewModel>\n        inviteUserView: View<InviteUserViewModel>\n        requestNarrativeView: View<RequestNarrativeViewModel>\n        manageMembershipView: View<ManageMembershipViewModel>\n        addAppsView: View<AddAppsViewModel>\n    }\n}\n\nexport interface ViewInaccessiblePrivateOrgViewModel {\n    kind: ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface ViewOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ViewOrgViewModel | ViewInaccessiblePrivateOrgViewModel | null\n}\n\nexport enum ViewOrgSubViewKind {\n    NONE = 0,\n    MANAGE_RELATED_ORGS\n}\n\nexport interface NoneViewModel {\n    kind: ViewOrgSubViewKind.NONE\n}\n\nexport enum ViewState {\n    NONE = 0,\n    LOADING,\n    OK,\n    ERROR\n}\nexport interface View<T> {\n    state: ViewState\n    error: AnError | null\n    viewModel: T | null\n}\n\nexport interface SelectableRelatableOrganization {\n    organization: orgModel.BriefOrganization\n    isRelated: boolean\n    isSelected: boolean\n}\n\nexport interface ManageRelatedOrgsViewModel {\n    kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS\n    organization: orgModel.Organization\n    availableOrganizations: {\n        organizations: Array<SelectableRelatableOrganization>\n        queried: Array<SelectableRelatableOrganization>\n        searchBy: string\n    }\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\nexport type ViewOrgSubView = View<NoneViewModel> | View<ManageRelatedOrgsViewModel>\n\n\nexport interface EditOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    saveError: AppError | null\n}\n\nexport interface EditOrgView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: EditOrgViewModel | null\n}\n\nexport interface StoreState {\n    // new!!\n    entities: {\n        users: {\n            byId: Map<userModel.Username, userModel.User>\n            all: Array<string>\n        }\n        orgs: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n            all: Array<string>\n        }\n        requests: {\n            byId: Map<requestModel.RequestID, requestModel.Request>\n            all: Array<string>\n        }\n        narratives: {\n            byId: Map<narrativeModel.WorkspaceID, narrativeModel.Narrative>\n        }\n        organizations: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n        }\n        apps: {\n            byId: Map<appModel.AppID, appModel.AppFullInfo>\n        }\n    }\n\n    db: {\n    }\n\n    auth: Authorization\n    error: AppError | null\n\n    app: {\n        status: AppState\n        config: AppConfig\n        error?: AppError,\n    }\n\n    views: {\n        browseOrgsView: BrowseOrgsView\n        addOrgView: AddOrgView\n        viewOrgView: ViewOrgView\n        editOrgView: EditOrgView\n        manageOrganizationRequestsView: ManageOrganizationRequestsView\n        viewMembersView: ViewMembersView\n        // inviteUserView: InviteUserView\n        // manageMembershipView: ManageMembershipView\n        // requestNarrativeView: RequestNarrativeView\n        // organizationCentricView: OrganizationCentricView\n    }\n    updateOrg: {\n        pending: boolean\n    }\n}\n\nexport enum ErrorCode {\n    NONE = 0,\n    ERROR\n}\n\n/* COMPONENT PROPS */\n\nexport interface SomeError {\n    code: ErrorCode\n    message: string\n    detail: string\n    id: string\n    at: Date\n\n    errorHistory?: Array<AppError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport interface AppError {\n    code: string\n    message: string\n    generatedAt?: Date\n    trace?: Array<string>\n    errors?: Array<AppError>\n    exception?: AppException\n}\n\nexport class AppException extends Error {\n    code: string\n    message: string\n    detail?: string\n    trace?: Array<string>\n    errors?: Array<AppException>\n    info?: Map<string, any>\n    constructor({ code, message, detail, info }: { code: string, message: string, detail?: string, info?: Map<string, any> }) {\n        super(message)\n        this.name = 'AppException'\n        this.code = code\n        this.message = message\n        this.detail = detail\n        this.info = info\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppException)\n        }\n\n        if (this.stack) {\n            if (this.stack.indexOf('\\n') >= 0) {\n                this.trace = this.stack.split('\\n')\n            } else {\n                this.trace = [this.stack]\n            }\n        }\n    }\n}\n\nexport interface AppConfig {\n    baseUrl: string\n    services: {\n        Groups: {\n            url: string\n        }\n        UserProfile: {\n            url: string\n        }\n        Workspace: {\n            url: string\n        }\n        ServiceWizard: {\n            url: string\n        }\n        Auth: {\n            url: string\n        }\n        NarrativeMethodStore: {\n            url: string\n        }\n    }\n    defaultPath: string,\n    channelId: string | null\n}\n\nexport interface AuthProps {\n    authorization: Authorization,\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n    hosted: boolean,\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nexport interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        authServiceURL: string\n        narrativeMethodStoreURL: string\n        originalPath: string | null\n        view: string | null\n        viewParams: any\n    },\n    parentHost: string\n}","export enum ActionFlag {\n    APP = 1,\n    APP_START,\n    APP_SUCCESS,\n    // APP_SUCCESS_IFRAME,\n    // APP_SUCCESS_SOLO,\n    APP_ERROR,\n\n    BROWSE_ORGS_LOAD,\n    BROWSE_ORGS_LOAD_START,\n    BROWSE_ORGS_LOAD_SUCCESS,\n    BROWSE_ORGS_LOAD_ERROR,\n    BROWSE_ORGS_UNLOAD,\n\n    BROWSE_ORGS_SORT,\n    BROWSE_ORGS_SORT_START,\n    BROWSE_ORGS_SORT_SUCCESS,\n    BROWSE_ORGS_SORT_ERROR,\n\n    BROWSE_ORGS_FILTER,\n    BROWSE_ORGS_FILTER_START,\n    BROWSE_ORGS_FILTER_SUCCESS,\n    BROWSE_ORGS_FILTER_ERROR,\n\n    BROWSE_ORGS_SEARCH,\n    BROWSE_ORGS_SEARCH_START,\n    BROWSE_ORGS_SEARCH_SUCCESS,\n    BROWSE_ORGS_SEARCH_ERROR,\n\n    UPDATE_ORG,\n    UPDATE_ORG_START,\n    UPDATE_ORG_SUCCESS,\n    UPDATE_ORG_ERROR,\n\n    // viewing org\n    VIEW_ORG_LOAD,\n    VIEW_ORG_LOAD_START,\n    VIEW_ORG_LOAD_SUCCESS,\n    VIEW_ORG_LOAD_ERROR,\n    VIEW_ORG_UNLOAD,\n    VIEW_ORG_RELOAD,\n    VIEW_ORG_ADD_NARRATIVE,\n\n    VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n    VIEW_ORG_LOAD_NORMAL_SUCCESS,\n    VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n\n    // Requests\n\n    VIEW_ORG_JOIN_REQUEST,\n    VIEW_ORG_JOIN_REQUEST_START,\n    VIEW_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_CANCEL_JOIN_REQUEST,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_START,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_ACCEPT_JOIN_INVITATION,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_START,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_ACCEPT_INBOX_REQUEST,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_START,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_INBOX_REQUEST,\n    VIEW_ORG_REJECT_INBOX_REQUEST_START,\n    VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_JOIN_INVITATION,\n    VIEW_ORG_REJECT_JOIN_INVITATION_START,\n    VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_REMOVE_NARRATIVE,\n    VIEW_ORG_REMOVE_NARRATIVE_START,\n    VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n\n    VIEW_ORG_ACCESS_NARRATIVE,\n    VIEW_ORG_ACCESS_NARRATIVE_START,\n    VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n\n    VIEW_ORG_SORT_NARRATIVES,\n    VIEW_ORG_SORT_NARRATIVES_START,\n    VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n    VIEW_ORG_SORT_NARRATIVES_ERROR,\n\n    VIEW_ORG_SEARCH_NARRATIVES,\n    VIEW_ORG_SEARCH_NARRATIVES_START,\n    VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n    VIEW_ORG_SEARCH_NARRATIVES_ERROR,\n\n    VIEW_ORG_SORT_MEMBERS,\n    VIEW_ORG_SORT_MEMBERS_START,\n    VIEW_ORG_SORT_MEMBERS_SUCCESS,\n    VIEW_ORG_SORT_MEMBERS_ERROR,\n\n    VIEW_ORG_SEARCH_MEMBERS,\n    VIEW_ORG_SEARCH_MEMBERS_START,\n    VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n    VIEW_ORG_SEARCH_MEMBERS_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD,\n\n    // keep these ones simple...\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n\n    // PRIVATE ORG\n\n    VIEW_PRIVATE_ORG_JOIN_REQUEST,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_START,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_ERROR,\n\n    // MEMBERS\n\n    VIEW_ORG_VIEW_MEMBERS_LOAD,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_START,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_ORG_VIEW_MEMBERS_UNLOAD,\n\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // Manage Membership\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_CONFIRMED,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n\n    // Apps\n\n    VIEW_ORG_ADD_APPS_LOAD,\n    VIEW_ORG_ADD_APPS_LOAD_START,\n    VIEW_ORG_ADD_APPS_LOAD_SUCCESS,\n    VIEW_ORG_ADD_APPS_LOAD_ERROR,\n    VIEW_ORG_ADD_APPS_UNLOAD,\n    VIEW_ORG_ADD_APPS_SELECT,\n    VIEW_ORG_ADD_APPS_SELECT_SUCCESS,\n    VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP,\n    VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_START,\n    VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS,\n    VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_ERROR,\n    VIEW_ORG_ADD_APPS_SEARCH,\n    VIEW_ORG_ADD_APPS_SEARCH_START,\n    VIEW_ORG_ADD_APPS_SEARCH_SUCCESS,\n    VIEW_ORG_ADD_APPS_SEARCH_ERROR,\n    VIEW_ORG_ADD_APPS_SORT,\n    VIEW_ORG_ADD_APPS_SORT_START,\n    VIEW_ORG_ADD_APPS_SORT_SUCCESS,\n    VIEW_ORG_ADD_APPS_SORT_ERROR,\n\n\n    VIEW_ORG_REMOVE_APP,\n    VIEW_ORG_REMOVE_APP_START,\n    VIEW_ORG_REMOVE_APP_SUCCESS,\n    VIEW_ORG_REMOVE_APP_ERROR,\n\n\n    // add org fields\n\n    ADD_ORG_LOAD,\n    ADD_ORG_LOAD_START,\n    ADD_ORG_LOAD_SUCCESS,\n    ADD_ORG_LOAD_ERROR,\n    ADD_ORG_UNLOAD,\n\n    ADD_ORG_UPDATE_NAME,\n    ADD_ORG_UPDATE_NAME_SUCCESS,\n    ADD_ORG_UPDATE_NAME_ERROR,\n\n    ADD_ORG_UPDATE_LOGO_URL,\n    ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n    ADD_ORG_UPDATE_LOGO_URL_ERROR,\n\n    ADD_ORG_UPDATE_ID,\n    ADD_ORG_UPDATE_ID_SUCCESS,\n    ADD_ORG_UPDATE_ID_ERROR,\n    ADD_ORG_UPDATE_ID_PASS,\n    ADD_ORG_EVALUATE_ID,\n\n    ADD_ORG_UPDATE_DESCRIPTION,\n    ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    ADD_ORG_UPDATE_IS_PRIVATE,\n    ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    ADD_ORG_UPDATE_HOME_URL,\n    ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n    ADD_ORG_UPDATE_HOME_URL_ERROR,\n\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    ADD_ORG_EVALUATE,\n    ADD_ORG_EVALUATE_OK,\n    ADD_ORG_EVALUATE_ERRORS,\n\n    ADD_ORG_SAVE,\n    ADD_ORG_SAVE_START,\n    ADD_ORG_SAVE_SUCCESS,\n    ADD_ORG_SAVE_ERROR,\n\n\n    // editing org\n    EDIT_ORG_LOAD,\n    EDIT_ORG_LOAD_START,\n    EDIT_ORG_LOAD_SUCCESS,\n    EDIT_ORG_LOAD_ERROR,\n    EDIT_ORG_UNLOAD,\n\n    EDIT_ORG_SAVE,\n    EDIT_ORG_SAVE_START,\n    EDIT_ORG_SAVE_SUCCESS,\n    EDIT_ORG_SAVE_ERROR,\n\n    // edit org, field level updates\n    EDIT_ORG_UPDATE_NAME,\n    EDIT_ORG_UPDATE_NAME_SUCCESS,\n    EDIT_ORG_UPDATE_NAME_ERROR,\n\n    EDIT_ORG_UPDATE_LOGO_URL,\n    EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n\n    EDIT_ORG_UPDATE_DESCRIPTION,\n    EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    EDIT_ORG_UPDATE_IS_PRIVATE,\n    EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    EDIT_ORG_UPDATE_HOME_URL,\n    EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n    EDIT_ORG_UPDATE_HOME_URL_ERROR,\n\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    EDIT_ORG_EVALUATE,\n    EDIT_ORG_EVALUATE_OK,\n    EDIT_ORG_EVALUATE_ERRORS,\n\n    // Auth\n    AUTH_CHECK,\n    AUTH_CHECK_START,\n    AUTH_CHECK_ERROR,\n    AUTH_AUTHORIZED,\n    AUTH_UNAUTHORIZED,\n    AUTH_REMOVE_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_LOAD,\n    ADMIN_MANAGE_REQUESTS_LOAD_START,\n    ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    ADMIN_MANAGE_REQUESTS_UNLOAD,\n\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n\n    // MEMBERS\n    VIEW_MEMBERS_LOAD,\n    VIEW_MEMBERS_LOAD_START,\n    VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_MEMBERS_UNLOAD,\n\n    VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // INVITE USER\n    INVITE_USER_LOAD,\n    INVITE_USER_LOAD_START,\n    INVITE_USER_LOAD_SUCCESS,\n    INVITE_USER_LOAD_ERROR,\n    INVITE_USER_UNLOAD,\n\n    INVITE_USER_SEARCH_USERS,\n    INVITE_USER_SEARCH_USERS_START,\n    INVITE_USER_SEARCH_USERS_SUCCESS,\n    INVITE_USER_SEARCH_USERS_ERROR,\n\n    INVITE_USER_SELECT_USER,\n    INVITE_USER_SELECT_USER_START,\n    INVITE_USER_SELECT_USER_SUCCESS,\n    INVITE_USER_SELECT_USER_ERROR,\n\n    INVITE_USER_SEND_INVITATION,\n    INVITE_USER_SEND_INVITATION_START,\n    INVITE_USER_SEND_INVITATION_SUCCESS,\n    INVITE_USER_SEND_INVITATION_ERROR,\n\n\n    // Narrative add requests\n    REQUEST_ADD_NARRATIVE_LOAD,\n    REQUEST_ADD_NARRATIVE_LOAD_START,\n    REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n    REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n    REQUEST_ADD_NARRATIVE_UNLOAD,\n\n    REQUEST_ADD_NARRATIVE_SEND,\n    REQUEST_ADD_NARRATIVE_SEND_START,\n    REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SEND_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SORT,\n    REQUEST_ADD_NARRATIVE_SORT_START,\n    REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SORT_ERROR,\n\n    // VIEWS\n\n    ORGANIZATION_CENTRIC_VIEW_LOAD,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_START,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    ORGANIZATION_CENTRIC_VIEW_UNLOAD,\n\n    // ENTITIES\n\n    ENTITY_USER_LOADER,\n    ENTITY_USER_LOADER_START,\n    ENTITY_USER_LOADER_SUCCESS,\n    ENTITY_USER_LOADER_ERROR,\n\n    ENTITY_ORGANIZATION_LOADER,\n    ENTITY_ORGANIZATION_LOADER_START,\n    ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    ENTITY_ORGANIZATION_LOADER_ERROR,\n\n    ENTITY_NARRATIVE_LOAD,\n    ENTITY_NARRATIVE_LOAD_START,\n    ENTITY_NARRATIVE_LOAD_SUCCESS,\n    ENTITY_NARRATIVE_LOAD_ERROR,\n\n    ENTITY_ORGANIZATION_LOAD,\n    ENTITY_ORGANIZATION_LOAD_START,\n    ENTITY_ORGANIZATION_LOAD_SUCCESS,\n    ENTITY_ORGANIZATION_LOAD_ERROR,\n\n    ENTITY_LOAD_APP,\n    ENTITY_LOAD_APP_START,\n    ENTITY_LOAD_APP_SUCCESS,\n    ENTITY_LOAD_APP_ERROR,\n\n    // GLOBAL ACTIONS\n    // GLOBAL_ACCESS_NARRATIVE,\n    // GLOBAL_ACCESS_NARRATIVE_START,\n    // GLOBAL_ACCESS_NARRATIVE_SUCCESS,\n    // GLOBAL_ACCESS_NARRATIVE_ERROR,\n\n    // USER PROFILE\n    DATA_SERVICE_LOAD,\n    DATA_SERVICE_LOAD_START,\n    DATA_SERVICE_LOAD_SUCCESS,\n    DATA_SERVICE_LOAD_ERROR,\n    DATA_SERVICE_UNLOAD,\n\n    DATA_SERVICE_LOAD_REFRESH,\n    DATA_SERVICE_LOAD_REFRESH_START,\n    DATA_SERVICE_LOAD_REFRESH_SUCCESS,\n    DATA_SERVICE_LOAD_REFRESH_ERROR\n}\n","import { Action } from 'redux'\nimport {\n    StoreState, EditState, SaveState, ComponentLoadingState,\n    SyncState, ValidationErrorType\n} from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, Unload,\n    SaveError, SaveStart, SaveSuccess, AddOrgEvaluateOK, AddOrgEvaluateErrors,\n    LoadSuccess, UpdateNameSuccess, UpdateNameError,\n    UpdateIdSuccess, UpdateIdError, UpdateDescriptionSuccess,\n    UpdateDescriptionError,\n    LoadError,\n    UpdateIdPass,\n    UpdateIsPrivateSuccess,\n    UpdateLogoUrlSuccess,\n    UpdateLogoUrlError,\n    UpdateHomeUrlSuccess,\n    UpdateHomeUrlError,\n    UpdateResearchInterestsSuccess,\n    UpdateResearchInterestsError\n} from '../actions/addOrg'\n\n// ADD ORG\n\nexport function saveStart(state: StoreState, action: SaveStart): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveStart without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: SaveSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function saveError(state: StoreState, action: SaveError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateOk(state: StoreState, action: AddOrgEvaluateOK): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateErrors(state: StoreState, action: AddOrgEvaluateErrors): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'TODO: form error',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    },\n                    saveState: SaveState.NEW,\n                    error: null,\n                    newOrganization: action.newOrganization\n                }\n            }\n        }\n    }\n}\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// Name\nexport function updateNameSuccess(state: StoreState, action: UpdateNameSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateNameError(state: StoreState, action: UpdateNameError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo URL\nexport function updateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL error without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Home URL\nexport function updateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Home URL (success) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to home url without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Research Interests\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Research Interests without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to research interests (error) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\nexport function updateIdSuccess(state: StoreState, action: UpdateIdSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdError(state: StoreState, action: UpdateIdError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdPass(state: StoreState, action: UpdateIdPass): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY\n                            // validationState: {\n                            //     type: ValidationErrorType.OK,\n                            //     validatedAt: new Date()\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: UpdateDescriptionSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionError(state: StoreState, action: UpdateDescriptionError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        isPrivate: {\n                            ...state.views.addOrgView.viewModel.newOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.ADD_ORG_SAVE:\n            return saveStart(state, action as SaveStart)\n        case ActionFlag.ADD_ORG_SAVE_SUCCESS:\n            return saveSuccess(state, action as SaveSuccess)\n        case ActionFlag.ADD_ORG_SAVE_ERROR:\n            return saveError(state, action as SaveError)\n\n        case ActionFlag.ADD_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.ADD_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.ADD_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.ADD_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS:\n            return updateNameSuccess(state, action as UpdateNameSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_NAME_ERROR:\n            return updateNameError(state, action as UpdateNameError)\n\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return updateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR:\n            return updateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS:\n            return updateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR:\n            return updateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS:\n            return updateIdSuccess(state, action as UpdateIdSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_ID_ERROR:\n            return updateIdError(state, action as UpdateIdError)\n        case ActionFlag.ADD_ORG_UPDATE_ID_PASS:\n            return updateIdPass(state, action as UpdateIdPass)\n\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as UpdateDescriptionSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR:\n            return updateDescriptionError(state, action as UpdateDescriptionError)\n\n        case ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        case ActionFlag.ADD_ORG_EVALUATE_OK:\n            return addOrgEvaluateOk(state, action as AddOrgEvaluateOK)\n        case ActionFlag.ADD_ORG_EVALUATE_ERRORS:\n            return addOrgEvaluateErrors(state, action as AddOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport {\n    StoreState, EditState, SaveState, ComponentLoadingState,\n    ValidationErrorType, SyncState, ValidationState, ValidationStateOk, EditOrgViewModel\n} from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, LoadSuccess, LoadError,\n    EditOrgEvaluateOK, EditOrgEvaluateErrors,\n    EditOrgSave, EditOrgSaveStart, EditOrgSaveError, EditOrgSaveSuccess,\n    EditOrgUpdateNameSuccess, EditOrgUpdateNameError,\n    // EditOrgUpdateIdSuccess, EditOrgUpdateIdError,\n    EditOrgUpdateDescriptionSuccess, EditOrgUpdateDescriptionError,\n    UpdateIsPrivateSuccess, UpdateLogoUrlSuccess, UpdateLogoUrlError,\n    UpdateHomeUrlSuccess, UpdateHomeUrlError, UpdateResearchInterestsError,\n    UpdateResearchInterestsSuccess, Unload\n} from '../actions/editOrg'\nimport { StateInstances } from '../state';\n\n\n\n// EDIT ORG\n\n// Edit session loading\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: validationStateOk(),\n                    // validationState: {\n                    //     type: ValidationErrorType.OK,\n                    //     validatedAt: new Date()\n                    // },\n                    saveState: SaveState.NEW,\n                    // TODO: get rid of this...\n                    // organizationId: action.id,\n                    organization: action.organization,\n                    saveError: null,\n                    editedOrganization: action.editedOrganization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// save\n\nexport function editOrgSaveStart(state: StoreState, action: EditOrgSaveStart): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveSuccess(state: StoreState, action: EditOrgSaveSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editedOrganization: {\n                        id: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.id,\n                            syncState: SyncState.CLEAN\n                        },\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            syncState: SyncState.CLEAN\n                        },\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            syncState: SyncState.CLEAN\n                        },\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            syncState: SyncState.CLEAN\n                        },\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveError(state: StoreState, action: EditOrgSaveError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    saveError: action.error\n                }\n            }\n        }\n    }\n}\n\n// Evaluate edit session\n\nexport function editOrgEvaluateOk(state: StoreState, action: EditOrgEvaluateOK): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgEvaluateErrors(state: StoreState, action: EditOrgEvaluateErrors): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation errors',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateEditorState(viewModel: EditOrgViewModel): EditState {\n    if (viewModel.editedOrganization.name.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.id.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.logoUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.homeUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.researchInterests.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.isPrivate.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.description.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\n\n\n// Name\nexport function editOrgUpdateNameSuccess(state: StoreState, action: EditOrgUpdateNameSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.name !== editedOrg.name.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    // editState: editState,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateNameError(state: StoreState, action: EditOrgUpdateNameError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo url\nexport function editOrgUpdateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Home Url\n\n// Logo url\nexport function editOrgUpdateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Research Interests\n\n// Logo url\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: EditOrgUpdateDescriptionSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.description !== editedOrg.description.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateDescriptionError(state: StoreState, action: EditOrgUpdateDescriptionError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.isPrivate !== editedOrg.isPrivate.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.EDIT_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.EDIT_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.EDIT_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n\n        case ActionFlag.EDIT_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.EDIT_ORG_SAVE_START:\n            return editOrgSaveStart(state, action as EditOrgSaveStart)\n        case ActionFlag.EDIT_ORG_SAVE_SUCCESS:\n            return editOrgSaveSuccess(state, action as EditOrgSaveSuccess)\n        case ActionFlag.EDIT_ORG_SAVE_ERROR:\n            return editOrgSaveError(state, action as EditOrgSaveError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS:\n            return editOrgUpdateNameSuccess(state, action as EditOrgUpdateNameSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR:\n            return editOrgUpdateNameError(state, action as EditOrgUpdateNameError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return editOrgUpdateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR:\n            return editOrgUpdateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS:\n            return editOrgUpdateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR:\n            return editOrgUpdateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS:\n        //     return editOrgUpdateIdSuccess(state, action as EditOrgUpdateIdSuccess)\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_ERROR:\n        //     return editOrgUpdateIdError(state, action as EditOrgUpdateIdError)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as EditOrgUpdateDescriptionSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR:\n            return editOrgUpdateDescriptionError(state, action as EditOrgUpdateDescriptionError)\n        case ActionFlag.EDIT_ORG_EVALUATE_OK:\n            return editOrgEvaluateOk(state, action as EditOrgEvaluateOK)\n        case ActionFlag.EDIT_ORG_EVALUATE_ERRORS:\n            return editOrgEvaluateErrors(state, action as EditOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/acceptInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function acceptInboxRequestSuccess(state: StoreState, action: actions.AcceptRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS:\n            return acceptInboxRequestSuccess(state, action as actions.AcceptRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/viewMembers'\nimport { StoreState, MemberType, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n// export function loadStart(state: StoreState, action: actions.LoadStart) {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.LOADING,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function unload(state: StoreState, action: actions.Unload): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.NONE,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.SUCCESS,\n//                 viewModel: {\n//                     organization: action.organization,\n//                     relation: action.relation\n//                 },\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadError(state: StoreState, action: actions.LoadError): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.ERROR,\n//                 viewModel: null,\n//                 error: action.error\n//             }\n//         }\n//     }\n// }\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function removeMemberSuccess(state: StoreState, action: actions.RemoveMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    const sortedMembers = viewModel.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function sortMembersSuccess(state: StoreState, action: actions.SortMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortMembersBy: action.sortBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nexport function searchMembersSuccess(state: StoreState, action: actions.SearchMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchMembersBy: action.searchBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        // case ActionFlag.VIEW_MEMBERS_LOAD_START:\n        //     return loadStart(state, action as actions.LoadStart)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n        //     return loadSuccess(state, action as actions.LoadSuccess)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n        //     return loadError(state, action as actions.LoadError)\n        // case ActionFlag.VIEW_MEMBERS_UNLOAD:\n        //     return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS:\n            return removeMemberSuccess(state, action as actions.RemoveMemberSuccess)\n        case ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS:\n            return sortMembersSuccess(state, action as actions.SortMembersSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS:\n            return searchMembersSuccess(state, action as actions.SearchMembersSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/denyInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function rejectInboxRequestSuccess(state: StoreState, action: actions.RejectInboxRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS:\n            return rejectInboxRequestSuccess(state, action as actions.RejectInboxRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/cancelOutboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function cancelRequestSuccess(state: StoreState, action: actions.CancelJoinRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestOutbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS:\n            return cancelRequestSuccess(state, action as actions.CancelJoinRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { AppException } from \"../../types\";\n\nexport const MAX_GROUPS_PER_LIST_REQUEST = 100\n\nexport interface GroupsServiceInfo {\n    servname: string;\n    version: string;\n    servertime: number;\n    gitcommithash: string\n}\n\nexport type Username = string\nexport type GroupID = string\n\nexport interface Member {\n    name: Username,\n    joined: number,\n    lastvisit: number | null,\n    custom: {\n        title: string\n    }\n}\n\nexport interface Resource {\n    rid: string\n    added: number | null\n}\n\nexport interface WorkspaceInfo extends Resource {\n    name: string\n    narrname: string\n    narrcreate: number\n    public: boolean\n    perm: string\n    description: string\n    moddate: number\n}\n\nexport interface AppInfo extends Resource {\n}\n\nexport type Role = \"None\" | \"Member\" | \"Admin\" | \"Owner\"\n\nexport interface GroupCustomFields {\n    logourl?: string\n    description: string\n    researchinterests: string\n    homeurl?: string\n    relatedgroups?: string\n}\n\nexport interface BriefGroup {\n    id: GroupID\n    name: string\n    createdate: number\n    moddate: number\n    lastvisit: number | null\n    private: boolean\n    role: Role\n\n    custom: GroupCustomFields\n    // owner: Member\n    owner: Username\n\n    memcount: number\n    rescount: {\n        workspace: number\n    }\n}\n\nexport interface InaccessiblePrivateGroup {\n    id: GroupID\n    private: boolean\n    role: Role\n}\n\nexport interface Group {\n    id: GroupID\n    private: boolean\n    privatemembers: boolean\n    name: string\n    role: Role\n    owner: Member\n    admins: Array<Member>\n    members: Array<Member>\n    memcount: number\n    createdate: number\n    moddate: number\n    lastvisit: number\n    resources: {\n        workspace: Array<WorkspaceInfo>,\n        catalogmethod: Array<AppInfo>\n    }\n    rescount: {\n        workspace: number\n        catalogmethod: number\n    }\n    custom: GroupCustomFields\n}\n\nexport interface NewGroup {\n    id: string\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    isPrivate: boolean\n}\n\nexport interface GroupUpdate {\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    private: boolean\n}\n\nexport interface Request {\n    id: string\n    groupid: string\n    requester: Username\n    type: string\n    status: string\n    resource: string\n    resourcetype: string\n    createdate: number\n    expiredate: number\n    moddate: number\n}\n\nexport interface RequestWithCompletion extends Request {\n    complete: false\n}\n\nexport interface Completion {\n    complete: true\n}\n\nexport interface ErrorInfo {\n    appcode: number\n    apperror: string\n    callid: string\n    httpcode: number\n    httpstatus: string\n    message: string\n    time: number\n}\n\nexport interface ErrorResult {\n    error: ErrorInfo\n}\n\n// Error types: (appcode)\n// 10000\tAuthentication failed\n// 10010\tNo authentication token\n// 10020\tInvalid token\n// 20000\tUnauthorized\n// 30000\tMissing input parameter\n// 30001\tIllegal input parameter\n// 30010\tIllegal user name\n// 40000\tGroup already exists\n// 40010\tRequest already exists\n// 40020\tUser already group member\n// 40030\tWorkspace already in group\n// 50000\tNo such group\n// 50010\tNo such request\n// 50020\tNo such user\n// 50030\tNo such workspace\n// 60000\tUnsupported operation\n\nexport interface GroupExists {\n    exists: boolean\n}\n\n// export interface GroupRequest {\n//     id: string,\n//     groupid: string,\n//     requester: Username,\n//     type: string,\n//     status: string,\n//     resource: string\n//     resourcetype: string\n//     createdate: number,\n//     expiredate: number,\n//     moddate: number\n// }\n\nexport enum SortDirection {\n    ASCENDING = 0,\n    DESCENDING\n}\n\nexport interface GetRequestsParams {\n    includeClosed?: boolean,\n    sortDirection?: SortDirection,\n    startAt?: Date\n}\n\nexport interface RequestMemebershipParams {\n    groupId: string\n}\n\nexport interface RequestNarrativeParams {\n    workspaceId: number\n    groupId: string\n}\n\nexport interface RequestResourceParams {\n    type: string\n    resourceId: string\n    groupId: string\n}\n\nfunction promiseTry<T>(fun: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        try {\n            return resolve(fun())\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n}\n\nexport interface GroupError {\n    httpcode: number\n    httpstatus: string\n    appcode: number\n    apperror: string\n    message: string\n    callid: string\n    time: number\n}\n\nexport class Exception extends Error {\n\n}\n\nexport class GroupException extends AppException {\n    originalError: GroupError\n    constructor(error: GroupError) {\n        super({\n            code: 'group-exception',\n            message: error.apperror,\n            detail: error.message,\n            info: new Map<string, any>([\n                ['httpcode', error.httpcode],\n                ['httpstatus', error.httpstatus],\n                ['appcode', error.appcode],\n                ['apperror', error.apperror],\n                ['message', error.message],\n                ['callid', error.callid],\n                ['time', error.time]\n            ])\n        })\n        this.name = 'GroupException'\n        this.originalError = error\n    }\n}\n\nexport interface RequestStatus {\n    new: 'None' | 'New' | 'Old'\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport class GroupsClient {\n    token: string;\n    url: string;\n\n    constructor({ token, url }: { token: string, url: string }) {\n        this.token = token\n        this.url = url\n    }\n\n    getInfo(): Promise<GroupsServiceInfo> {\n        return fetch(this.url + '/', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((result) => {\n                return result as GroupsServiceInfo;\n            });\n    }\n\n    groupExists(id: string): Promise<GroupExists> {\n        return fetch(this.url + '/group/' + id + '/exists')\n            .then((response) => {\n                return response.json()\n            })\n            .then((exists) => {\n                return exists as GroupExists\n            })\n    }\n\n    // getGroups(): Promise<GroupList> {\n    //     return fetch(this.url + '/group', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json()\n    //         })\n    //         .then((result: GroupList) => {\n    //             return result.filter(({ type }) => type === 'Organization')\n    //         })\n    // }\n\n    async listGroups(): Promise<Array<BriefGroup>> {\n        const response = await fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n        if (response.status !== 200) {\n            console.error('error fetching groups', response)\n            throw new Error('Error fetching groups')\n        }\n        return await response.json()\n    }\n\n    getGroupById(id: string): Promise<Group | InaccessiblePrivateGroup> {\n        return fetch(this.url + '/group/' + id, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status === 404) {\n                    return null\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Group\n            })\n    }\n\n    put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new GroupException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status === 200) {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                } else if (response.status === 204) {\n                    const result = null as unknown\n                    return result as T\n                } else {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    createGroup(newGroup: NewGroup): Promise<Group> {\n        // argh!! description should be mandatory, but now it is a custom \n        // field and it is not yet defined in the service.\n        // TODO: we need the groups service to have default custom fields.\n        // At that point, what IS the point of custom fields ... oh, I know that\n        // there are internal reasons for this due to re-using \"group\" for \n        // organization, project, etc., but that should not leak through the \n        // api.\n\n        // mandatory fields.\n        const payload: any = {\n            name: newGroup.name,\n            private: newGroup.isPrivate,\n            custom: {\n                logourl: newGroup.logoUrl,\n                researchinterests: newGroup.researchInterests,\n                homeurl: newGroup.homeUrl\n            }\n        }\n\n        // optional fields\n        if (newGroup.description.length > 0) {\n            payload.custom.description = newGroup.description\n        }\n\n        return this.put<Group>(['group', newGroup.id], payload)\n    }\n\n    updateGroup(id: string, groupUpdate: GroupUpdate): Promise<void> {\n        const payload: any = {\n            name: groupUpdate.name,\n            custom: {\n                logourl: groupUpdate.logoUrl,\n                homeurl: groupUpdate.homeUrl,\n                researchinterests: groupUpdate.researchInterests\n            },\n            private: groupUpdate.private\n        }\n        // TODO: remove this when we have descriptions restored to the\n        // groups service.\n        if (groupUpdate.description) {\n            payload.custom.description = groupUpdate.description\n        }\n        return fetch(this.url + '/group/' + id + '/update', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n\n            // TODO: build more intelligently\n            body: JSON.stringify(payload)\n        })\n            .then((response) => {\n                // response is an empty body.\n                if (response.status === 204) {\n                    return\n                }\n                throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n            })\n    }\n\n    async addRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is not already there\n        if (relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: relatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async removeRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is already there\n        if (!relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        const newRelatedGroups = relatedGroups.filter((groupId) => {\n            return groupId !== relatedGroupId\n        })\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: newRelatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async getRequest(requestId: string): Promise<Request> {\n        const path = ['request', 'id', requestId]\n        return await this.get<Request>(path)\n    }\n\n    getGroupRequests(groupId: string, params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n\n        return fetch(this.url + '/group/' + groupId + '/requests?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getTargetedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/targeted?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getCreatedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/created?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'appcliation/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    addOrRequestNarrative(params: RequestNarrativeParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            'workspace',\n            String(params.workspaceId)\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    addOrRequestResource(params: RequestResourceParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            params.type,\n            params.resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    async grantResourceAccess(groupId: string, resourceType: string, resourceId: string): Promise<null> {\n        const path = [\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId,\n            'getperm'\n        ]\n        return this.post<null>(path, null)\n    }\n\n    deleteResource(groupId: string, resourceType: string, resourceId: string): Promise<void> {\n        const url = [\n            this.url,\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    cancelRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/cancel', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    acceptRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/accept', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    grantReadAccessToRequestedResource({ requestId }: { requestId: string }): Promise<null> {\n        const path = ['request', 'id', requestId, 'getperm']\n        return this.post<null>(path, null)\n    }\n\n\n    denyRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/deny', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    memberToAdmin({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    adminToMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    updateMember({ groupId, memberUsername, update }: { groupId: string, memberUsername: string, update: any }): Promise<void> {\n        const path = [\n            'group', groupId, 'user', memberUsername, 'update'\n        ]\n\n        return this.put<void>(path, { custom: update })\n    }\n\n    removeMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n            })\n    }\n\n    requestMembership(params: RequestMemebershipParams): Promise<Request> {\n        return fetch(this.url + '/group/' + params.groupId + '/requestmembership', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    inviteUserToGroup({ groupId, username }: { groupId: string, username: string }): Promise<Request> {\n        const url = [\n            this.url, 'group', groupId, 'user', username\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    async visitGroup({ groupId }: { groupId: string }): Promise<void> {\n        const path = ['group', groupId, 'visit']\n        return this.put<void>(path, null)\n    }\n\n    async getOpenRequests({ groupIds }: { groupIds: Array<string> }): Promise<Map<GroupID, RequestStatus>> {\n        const path = ['request', 'groups', groupIds.join(','), 'new']\n        const result = await this.get<any>(path)\n        const requestStatuses = new Map<GroupID, RequestStatus>()\n        for (const [groupId, requestStatus] of Object.entries(result)) {\n            requestStatuses.set(groupId, <RequestStatus>requestStatus)\n        }\n        return requestStatuses\n    }\n}","import * as groupsApi from '../apis/groups'\nimport * as orgModel from './organization/model'\n\nexport type Username = string\n\nexport type RequestID = string\n\nexport enum RequestType {\n    REQUEST = 'REQUEST',\n    INVITATION = 'INVITATION'\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport interface BaseRequest {\n    id: string\n    organizationId: string\n    requester: Username\n    type: RequestType\n    status: RequestStatus\n    resourceType: RequestResourceType\n    createdAt: Date\n    expireAt: Date\n    modifiedAt: Date\n}\n\nexport interface UserRequest extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.REQUEST\n    user: Username\n}\n\nexport interface UserInvitation extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.INVITATION\n    user: Username\n}\n\nexport interface WorkspaceRequest extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.REQUEST\n    narrativeId: string,\n}\n\nexport interface WorkspaceInvitation extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.INVITATION\n    narrativeId: string\n}\n\nexport interface AppRequest extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.REQUEST\n    appId: string\n}\n\nexport interface AppInvitation extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.INVITATION\n    appId: string\n}\n\nexport type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\n\nfunction stringToRequestType(type: string): RequestType {\n    switch (type) {\n        case 'Invite':\n            return RequestType.INVITATION\n        case 'Request':\n            return RequestType.REQUEST\n        default:\n            throw new Error('unknown request type: ' + type)\n    }\n}\n\nfunction stringToResourceType(type: string) {\n    switch (type) {\n        case 'user':\n            return RequestResourceType.USER\n        case 'workspace':\n            return RequestResourceType.WORKSPACE\n        case 'catalogmethod':\n            return RequestResourceType.APP\n        default:\n            throw new Error('unknown resource type: ' + type)\n    }\n}\n\nfunction stringToRequestStatus(status: string): RequestStatus {\n    return RequestStatus.OPEN\n}\n\nexport function groupRequestToOrgRequest(request: groupsApi.Request): Request {\n\n    const requestType = stringToRequestType(request.type)\n    const resourceType = stringToResourceType(request.resourcetype)\n    const requestStatus = stringToRequestStatus(request.status)\n\n    switch (resourceType) {\n        case RequestResourceType.USER:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserInvitation\n            }\n\n        case RequestResourceType.WORKSPACE:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceInvitation\n            }\n\n        case RequestResourceType.APP:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource.split('.').join('/'),\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource.split('.').join('/'),\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppInvitation\n            }\n        default:\n            throw new Error('resource type not handled yet: ' + request.resourcetype)\n    }\n}\n\ninterface RequestsModelParams {\n    groupsServiceURL: string\n    token: string\n    username: Username\n}\n\nexport class RequestsModel {\n\n    params: RequestsModelParams\n    groupsClient: groupsApi.GroupsClient\n    cache: Map<RequestID, Request>\n\n    constructor(params: RequestsModelParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map()\n    }\n\n    async getRequest(requestId: RequestID): Promise<Request> {\n        if (this.cache.has(requestId)) {\n            return this.cache.get(requestId)!\n        }\n\n        const grequest = await this.groupsClient.getRequest(requestId)\n        const request = groupRequestToOrgRequest(grequest)\n\n        this.cache.set(request.id, request)\n        return request\n    }\n\n    async getOutboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserRequestForOrg(organizationId: orgModel.OrganizationID): Promise<UserRequest | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return r.groupid === organizationId\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserRequest\n    }\n\n    async getPendingRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    /*\n        For a given organization (by id), return a list of all requests to that org \n    */\n    async getCombinedRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        let requests: Array<Request>\n\n        // const grequests = await groupsClient.getTargetedRequests({\n        //     includeClosed: false,\n        //     sortDirection: groupsApi.SortDirection.DESCENDING\n        // })\n\n        // // TODO should work in synchrony with above...\n        // return grequests\n        //     .filter((r) => {\n        //         return r.groupid === organizationId\n        //     })\n        //     .map((r) => {\n        //         return groupRequestToOrgRequest(r)\n        //     })\n\n        try {\n            requests = (await groupsClient.getGroupRequests(organizationId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            }))\n                .map((request) => {\n                    return groupRequestToOrgRequest(request)\n                })\n        } catch (ex) {\n            requests = []\n        }\n\n        return requests\n    }\n\n    async getRequestOutboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n\n    async getOrganizationInvitations(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        }).filter((request) => {\n            return (request.type === RequestType.INVITATION)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getOrganizationInvitationsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const invitations = await this.getOrganizationInvitations()\n        return invitations.filter((invitation) => {\n            return (invitation.organizationId === organizationId)\n        })\n    }\n\n    async getInboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserInvitationForOrg(organizationId: orgModel.OrganizationID): Promise<UserInvitation | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return (r.groupid === organizationId)\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserInvitation\n    }\n\n    async getPendingOrganizationRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await groupsClient.getGroupRequests(organizationId, {\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        return groupRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        // const [groupRequests, adminRequests] = await Promise.all([\n        //     groupsClient.getGroupRequests(groupId, {\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     }),\n        //     groupsClient.getCreatedRequests({\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     })\n        // ])\n        // const groupAdminRequests = adminRequests.filter((request) => {\n        //     return (request.groupid === groupId)\n        // })\n\n        // return Promise.all(groupRequests.concat(groupAdminRequests).map((request) => {\n        //     return groupRequestToOrgRequest(request)\n        // }))\n    }\n\n    async getPendingOrganizationRequests(groupIds: Array<string>): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await Promise.all(groupIds.map((groupId) => {\n            return groupsClient.getGroupRequests(groupId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            })\n        }))\n\n        const allRequests = groupRequests.reduce((allRequests, requests) => {\n            return allRequests.concat(requests)\n        }, [])\n\n        return allRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n    }\n\n    async cancelRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.cancelRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async denyRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async rejectJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async inviteUserToJoinOrg(groupId: string, username: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.inviteUserToGroup({\n            groupId,\n            username\n        })\n            .then((request) => {\n                return groupRequestToOrgRequest(request)\n            })\n    }\n}","export interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONResponse {\n    id: string\n    version: string\n    result: any\n    error: any\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null;\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: ServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    callFunc(func: string, param: any): Promise<JSONResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Request error: ' + response.status + ', ' + response.statusText)\n                }\n                return <unknown>response.json() as JSONResponse\n            })\n    }\n}\n\n","import {\n    ServiceClientParams,\n    AuthorizedServiceClient\n} from \"./serviceClient\";\n\nexport interface User {\n    username: string,\n    realname: string,\n    thumbnail: string\n}\n\nexport type OrganizationSetting = {\n    settings: {\n        lastVisitedAt: Date | null\n    }\n}\n\nexport type OrganizationsSettings = {\n    orgSettings: any //Map<string, OrganizationSetting>\n}\n\nexport interface UserProfile {\n    user: User,\n    profile: {\n        synced: {\n            gravatarHash: string\n        }\n        userdata: {\n            jobTitle: string,\n            jobTitleOther: string,\n            organization: string\n            city: string\n            state: string\n            country: string\n            avatarOption: string\n            gravatarDefault: string\n        }\n        metadata: {\n            createdBy: string\n            created: string\n        }\n        plugins: {\n            organizations?: OrganizationsSettings\n        }\n    }\n}\n\n// Note that we are only supporting updating of the orgs plugin settings, \n// so make this strict-ish.\nexport interface UserProfileUpdate {\n    user: User,\n    profile: {\n        plugins: {\n            organizations: OrganizationsSettings\n        }\n    }\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\n\nexport interface UserProfileClientParams extends ServiceClientParams {\n}\n\nexport class UserProfileClient extends AuthorizedServiceClient {\n    static module: string = 'UserProfile'\n    static profileCache: Map<string, UserProfile> = new Map()\n\n    constructor(params: UserProfileClientParams) {\n        super(params)\n    }\n\n    // makePayload(method: string, param: any): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: [param]\n    //     }\n    // }\n\n    // makeEmptyPayload(method: string): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: []\n    //     }\n    // }\n\n    getVersion(): Promise<any> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makeEmptyPayload('version'))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    async getUserProfile(username: string): Promise<UserProfile> {\n        if (UserProfileClient.profileCache.has(username)) {\n            return Promise.resolve(UserProfileClient.profileCache.get(username)!)\n        }\n\n        return this.callFunc('get_user_profile', [username])\n            .then((result) => {\n                return result.result[0][0] as UserProfile\n            })\n    }\n\n    async updateUserProfile(update: UserProfileUpdate): Promise<void> {\n        // TODO: update user profile cache here...\n        UserProfileClient.profileCache.delete(update.user.username)\n        return this.callFunc('update_user_profile', { profile: update })\n            .then(() => {\n                return\n            })\n    }\n\n    // async setUserProfile(username: string, profile: UserProfile): Promise<void> {\n    //     // TODO: update user profile cache here...\n    //     this.callFunc('update_user_profile', profile)\n    // }\n\n    async getUserProfiles(usernames: Array<string>): Promise<Array<UserProfile>> {\n        return this.callFunc('get_user_profile', usernames)\n            .then((result) => {\n                return result.result[0] as Array<UserProfile>\n            })\n    }\n\n    async getAllUsers(): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: '' })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n\n    async searchUsers(query: string): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: query })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n}","export function getProp<T>(obj: any, propPath: Array<string> | string, defaultValue: T): T {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + (typeof propPath));\n    }\n    for (let i = 0; i < propPath.length; i += 1) {\n        if ((obj === undefined) ||\n            (typeof obj !== 'object') ||\n            (obj === null)) {\n            return defaultValue;\n        }\n        obj = obj[propPath[i]];\n    }\n    if (obj === undefined) {\n        return defaultValue;\n    }\n    return obj;\n}\n\n\nexport function hasProp(obj: any, propPath: Array<string> | string): boolean {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + (typeof propPath));\n    }\n    for (let i = 0; i < propPath.length; i += 1) {\n        if ((obj === undefined) ||\n            (typeof obj !== 'object') ||\n            (obj === null)) {\n            return false;\n        }\n        obj = obj[propPath[i]];\n    }\n    if (obj === undefined) {\n        return false;\n    }\n    return true;\n}\n\n\nexport function setProp(obj: any, propPath: Array<string> | string, value: any): any {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + (typeof propPath));\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    // pop off the last property for setting at the end.\n    const propKey = propPath[propPath.length - 1];\n    let key;\n    // Walk the path, creating empty objects if need be.\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        key = propPath[i];\n        if (obj[key] === undefined) {\n            obj[key] = {};\n        }\n        obj = obj[key];\n    }\n    // Finally set the property.\n    obj[propKey] = value;\n    return value;\n}\n\n\n\nexport function incrProp(obj: any, propPath: Array<string> | string, increment: number): number | void {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + (typeof propPath));\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    increment = (increment === undefined) ? 1 : increment;\n    const propKey = propPath[propPath.length - 1];\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (obj[key] === undefined) {\n            obj[key] = {};\n        }\n        obj = obj[key];\n    }\n    if (obj[propKey] === undefined) {\n        obj[propKey] = increment;\n    } else {\n        if (typeof obj[propKey] === 'number') {\n            obj[propKey] += increment;\n        } else {\n            throw new Error('Can only increment a number');\n        }\n    }\n    return obj[propKey];\n}\n\n\nexport function deleteProp(obj: any, propPath: Array<string> | string) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.')\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + (typeof propPath))\n    }\n    if (propPath.length === 0) {\n        return false\n    }\n    const propKey = propPath[propPath.length - 1];\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i]\n        if (obj[key] === undefined) {\n            // for idempotency, and utility, do not throw error if\n            // the key doesn't exist.\n            return false;\n        }\n        obj = obj[key]\n    }\n    if (obj[propKey] === undefined) {\n        return false\n    }\n    delete obj[propKey]\n    return true\n}\n\nexport interface PropsConfig {\n    data?: any\n}\n\nexport class Props {\n\n    obj: any\n\n    constructor(data = {}) {\n        this.obj = data\n    }\n\n    getItem(props: Array<string> | string, defaultValue: any) {\n        return getProp(this.obj, props, defaultValue)\n    }\n\n    hasItem(propPath: Array<string> | string) {\n        return hasProp(this.obj, propPath)\n\n    }\n\n    setItem(path: Array<string> | string, value: any) {\n        return setProp(this.obj, path, value)\n    }\n\n    incrItem(path: Array<string> | string, increment: number) {\n        return incrProp(this.obj, path, increment)\n    }\n\n    deleteItem(path: Array<string> | string) {\n        return deleteProp(this.obj, path)\n    }\n\n    toJSON() {\n        return Object.assign({}, this.obj)\n    }\n}\n","import { UserProfileClient, UserProfile } from '../apis/userProfile'\nimport { getProp } from '../../lib/props'\n\n\nexport type Username = string\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\n\nfunction profileToUser(profile: UserProfile): User {\n    let jobTitle\n    if (!profile.profile.userdata) {\n        return {\n            username: profile.user.username,\n            realname: profile.user.realname,\n            city: null,\n            state: null,\n            country: null,\n            title: null,\n            organization: null,\n            avatarOption: null,\n            gravatarHash: null,\n            gravatarDefault: null\n        }\n    }\n    if (getProp<string | null>(profile, 'profile.userdata.jobTitle', null) === 'Other') {\n        jobTitle = getProp<string | null>(profile, 'profile.userdata.jobTitleOther', null)\n    } else {\n        jobTitle = getProp<string | null>(profile, 'profile.userdata.jobTitle', null)\n    }\n\n    return {\n        username: profile.user.username,\n        realname: profile.user.realname,\n        city: getProp<string | null>(profile, 'profile.userdata.city', null),\n        state: getProp<string | null>(profile, 'profile.userdata.state', null),\n        country: getProp<string | null>(profile, 'profile.userdata.country', null),\n        title: jobTitle,\n        organization: getProp<string | null>(profile, 'profile.userdata.organization', null),\n        avatarOption: getProp<string | null>(profile, 'profile.userdata.avatarOption', null),\n        gravatarHash: getProp<string | null>(profile, 'profile.synced.gravatarHash', null),\n        gravatarDefault: getProp<string | null>(profile, 'profile.userdata.gravatarDefault', null)\n    }\n}\n\nexport interface UserQuery {\n    query: string\n    excludedUsers: Array<string>\n}\n\nexport interface BriefUser {\n    username: string\n    realname: string\n}\n\n\n\n\ninterface UserModelParams {\n    userProfileServiceURL: string\n    token: string\n}\n\nexport class UserModel {\n\n    params: UserModelParams\n    userProfileClient: UserProfileClient\n\n    cache: Map<Username, User>\n\n    constructor(params: UserModelParams) {\n        this.params = params\n        this.userProfileClient = new UserProfileClient({\n            url: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map<Username, User>()\n    }\n\n    async getUser(username: Username): Promise<User> {\n        if (this.cache.has(username)) {\n            return this.cache.get(username)!\n        }\n\n        const userProfile = await this.userProfileClient.getUserProfile(username)\n        const user = profileToUser(userProfile)\n        this.cache.set(username, user)\n        return user\n    }\n\n    async getUsers(usernames: Array<Username>): Promise<Map<Username, User>> {\n        const result: Map<Username, User> = new Map()\n\n        const toFetch: Array<Username> = []\n\n        usernames.forEach((username) => {\n            if (this.cache.has(username)) {\n                result.set(username, this.cache.get(username)!)\n            } else {\n                toFetch.push(username)\n            }\n        })\n\n        const userProfiles = await this.userProfileClient.getUserProfiles(toFetch)\n        const users = userProfiles.map((profile) => {\n            return profileToUser(profile)\n        })\n\n        userProfiles.forEach((userProfile) => {\n            const user = profileToUser(userProfile)\n            this.cache.set(user.username, user)\n            result.set(user.username, user)\n        })\n\n        return result\n    }\n\n    async searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n        const users = await this.userProfileClient.searchUsers(query.query)\n        return users\n            .filter(({ username }) => {\n                return (query.excludedUsers.indexOf(username) === -1)\n            })\n            .map(({ username, realname }) => {\n                return {\n                    username, realname\n                }\n            })\n    }\n\n    // searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.searchUsers(query.query)\n    //         .then((users) => {\n    //             return users\n    //                 .filter(({ username }) => {\n    //                     return (query.excludedUsers.indexOf(username) === -1)\n    //                 })\n    //                 .map(({ username, realname }) => {\n    //                     return {\n    //                         username, realname\n    //                     }\n    //                 })\n\n    //         })\n    // }\n\n    // getUser(username: string): Promise<User> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.getUserProfile(username)\n    //         .then((userProfile) => {\n    //             return this.profileToUser(userProfile)\n    //         })\n    // }\n}","import * as groupsApi from '../../apis/groups'\nimport {\n    SortDirection, EditableOrganization, ValidationState, EditableString, ValidationErrorType\n} from '../../../types';\nimport * as requestModel from '../requests'\nimport * as userModel from '../user'\nimport Validation from './validation'\nimport { string } from 'prop-types';\n\nexport interface OrganizationUpdate {\n    name: string\n    logoUrl: string | null\n    description: string\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport interface EditableMemberProfile {\n    title: EditableString\n}\nexport enum UserRelationToOrganization {\n    NONE = 'NONE',\n    VIEW = 'VIEW',\n    MEMBER_REQUEST_PENDING = 'MEMBER_REQUEST_PENDING',\n    MEMBER_INVITATION_PENDING = 'MEMBER_INVITATION_PENDING',\n    MEMBER = 'MEMBER',\n    ADMIN = 'ADMIN',\n    OWNER = 'OWNER'\n}\n\nexport interface UserOrgRelation {\n    type: UserRelationToOrganization\n}\n\nexport interface NoRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.NONE\n}\n\nexport interface ViewRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.VIEW\n}\n\nexport interface MembershipRequestPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n    requestId: string\n}\n\nexport interface MembershipInvitationPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n    requestId: string\n}\n\nexport interface MemberRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER\n}\n\nexport interface AdminRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.ADMIN\n}\n\nexport interface OwnerRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.OWNER\n}\n\nexport type Relation = NoRelation | ViewRelation | MembershipRequestPendingRelation | MembershipInvitationPendingRelation | MemberRelation | AdminRelation | OwnerRelation\n\nexport type Username = string\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    username: groupsApi.Username\n    realname: string\n    joinedAt: Date\n    lastVisitedAt: Date | null\n    type: MemberType\n    title: string | null\n}\n\nexport interface MemberUpdate {\n    title?: string\n}\n\nexport enum UserWorkspacePermission {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport type WorkspaceID = number\n\nexport interface NarrativeResource {\n    workspaceId: number\n    title: string\n    permission: UserWorkspacePermission\n    isPublic: boolean\n    createdAt: Date\n    updatedAt: Date\n    addedAt: Date | null\n    description: string\n}\n\nexport type AppID = string\n\nexport interface AppResource {\n    appId: AppID\n    addedAt: Date | null\n}\n\nexport interface BriefOrganization {\n    id: string\n    name: string\n    logoUrl: string | null\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string | null\n    // TODO: we need researchInterests here\n    owner: Member\n    relation: UserRelationToOrganization\n\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n\n    memberCount: number\n    narrativeCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\nexport enum OrganizationKind {\n    NORMAL = 0,\n    INACCESSIBLE_PRIVATE\n}\n\nexport interface InaccessiblePrivateOrganization {\n    kind: OrganizationKind.INACCESSIBLE_PRIVATE\n    id: string\n    isPrivate: boolean\n    relation: UserRelationToOrganization\n}\n\nexport interface Organization {\n    kind: OrganizationKind.NORMAL\n    id: string\n    name: string\n\n    isPrivate: boolean\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    relation: UserRelationToOrganization\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    owner: Member\n    areMembersPrivate: boolean\n    members: Array<Member>\n    // relation: UserOrgRelation\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n    narratives: Array<NarrativeResource>\n    apps: Array<AppResource>\n    memberCount: number\n    narrativeCount: number\n    appCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\n// export interface RequestStatus {\n//     new: boolean,\n//     old: boolean\n// }\n\n// LEFT OF HERE - inapplicable should be set if the user is not an admin.\nexport enum RequestStatus {\n    INAPPLICABLE = 'INAPPLICABLE',\n    NONE = 'NONE',\n    OLD = 'OLD',\n    NEW = 'NEW'\n}\n\nexport function determineRelation(\n    org: Organization | InaccessiblePrivateOrganization,\n    username: userModel.Username,\n    request: requestModel.UserRequest | null,\n    invitation: requestModel.UserInvitation | null): Relation {\n\n    if (org.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n        if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n\n    if (username === org.owner.username) {\n        return {\n            type: UserRelationToOrganization.OWNER\n        } as OwnerRelation\n    } else {\n        const member = org.members.find((member) => {\n            return (member.username === username)\n        })\n        if (member) {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    return {\n                        type: UserRelationToOrganization.MEMBER\n                    } as MemberRelation\n                case MemberType.ADMIN:\n                    return {\n                        type: UserRelationToOrganization.ADMIN\n                    } as AdminRelation\n                case MemberType.OWNER:\n                    return {\n                        type: UserRelationToOrganization.OWNER\n                    } as OwnerRelation\n                default:\n                    return {\n                        type: UserRelationToOrganization.NONE\n                    } as NoRelation\n            }\n        } else if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n}\n\nfunction groupPermissionToWorkspacePermission(groupsPermission: string): UserWorkspacePermission {\n    switch (groupsPermission) {\n        case 'None':\n            return UserWorkspacePermission.NONE\n        case 'Read':\n            return UserWorkspacePermission.VIEW\n        case 'Write':\n            return UserWorkspacePermission.EDIT\n        case 'Admin':\n            return UserWorkspacePermission.ADMIN\n        case 'Own':\n            return UserWorkspacePermission.OWNER\n        default:\n            throw new Error('Invalid groups user permission: ' + groupsPermission)\n    }\n}\n\nfunction getRealname(users: Map<userModel.Username, userModel.User>, username: string, defaultValue: string) {\n    const user = users.get(username)\n    if (!user) {\n        return defaultValue\n    }\n    return user.realname\n}\n\nexport function groupToOrganization(group: groupsApi.Group, currentUser: Username, users: Map<userModel.Username, userModel.User>): Organization {\n    const owner: Member = {\n        username: group.owner.name,\n        realname: getRealname(users, group.owner.name, 'n/a'),\n        joinedAt: new Date(group.owner.joined),\n        lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n        type: MemberType.OWNER,\n        title: group.owner.custom.title\n    }\n\n    // We join admins and members, since they are all members, just different privileges in the org\n    const members = (<Array<Member>>[\n        // owner\n    ]).concat(group.admins.map((admin) => {\n        return {\n            username: admin.name,\n            realname: getRealname(users, admin.name, 'n/a'),\n            joinedAt: new Date(admin.joined),\n            lastVisitedAt: admin.lastvisit ? new Date(admin.lastvisit) : null,\n            type: MemberType.ADMIN,\n            title: admin.custom.title\n        }\n    })).concat(group.members.map((member) => {\n        return {\n            username: member.name,\n            realname: getRealname(users, member.name, 'n/a'),\n            joinedAt: new Date(member.joined),\n            lastVisitedAt: member.lastvisit ? new Date(member.lastvisit) : null,\n            type: MemberType.MEMBER,\n            title: member.custom.title\n        }\n    }))\n\n    const narratives: Array<NarrativeResource> = group.resources.workspace.map((info) => {\n        return {\n            workspaceId: parseInt(info.rid, 10),\n            title: info.narrname,\n            isPublic: info.public,\n            permission: groupPermissionToWorkspacePermission(info.perm),\n            createdAt: new Date(info.narrcreate),\n            updatedAt: new Date(info.moddate),\n            description: info.description,\n            addedAt: info.added === null ? null : new Date(info.added)\n        }\n    })\n    const apps: Array<AppResource> = group.resources.catalogmethod.map((info) => {\n        return {\n            appId: info.rid.split('.').join('/'),\n            addedAt: info.added === null ? null : new Date(info.added)\n        }\n    })\n\n    return {\n        kind: OrganizationKind.NORMAL,\n        id: group.id,\n        name: group.name,\n        isPrivate: group.private,\n        isMember: (group.role !== \"None\"),\n        isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n        isOwner: (group.role === \"Owner\"),\n        relation: groupRoleToUserRelation(group.role),\n        logoUrl: group.custom.logourl || null,\n        homeUrl: group.custom.homeurl || null,\n        researchInterests: group.custom.researchinterests || '',\n        description: group.custom.description,\n        owner: owner,\n        areMembersPrivate: group.privatemembers,\n        members: members,\n        modifiedAt: new Date(group.moddate),\n        createdAt: new Date(group.createdate),\n        lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n        narratives: narratives,\n        apps: apps,\n        memberCount: group.memcount,\n        narrativeCount: group.rescount.workspace || 0,\n        appCount: group.rescount.catalogmethod || 0,\n        relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n    }\n}\n\nexport function groupToPrivateOrganization(group: groupsApi.InaccessiblePrivateGroup, currentUser: Username): InaccessiblePrivateOrganization {\n    return {\n        kind: OrganizationKind.INACCESSIBLE_PRIVATE,\n        id: group.id,\n        isPrivate: group.private,\n        // isMember: false,\n        relation: groupRoleToUserRelation(group.role)\n    }\n}\n\nexport type GroupID = string\nexport type OrganizationID = GroupID\n\n\nexport interface QueryResults {\n    organizations: Array<BriefOrganization>\n    total: number\n}\n\nexport interface Query {\n    searchTerms: Array<string>\n    username: groupsApi.Username\n    sortField: string\n    sortDirection: SortDirection\n    filter: Filter\n}\n\nexport function applySearch(orgs: Array<BriefOrganization>, searchTerms: Array<string>): Array<BriefOrganization> {\n    const searchTermsRe = searchTerms.map((term) => {\n        return new RegExp(term, 'i')\n    })\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTermsRe.every((termRe) => {\n            return termRe.test(org.name) ||\n                termRe.test(org.researchInterests || '') ||\n                termRe.test(org.owner.username) ||\n                termRe.test(org.owner.realname)\n        })\n    })\n    return filteredOrgs\n}\n\nfunction dateDays(d: Date) {\n    const t = d.getTime()\n    return Math.round(t / (1000 * 60 * 60 * 24))\n}\n\nfunction applySortComparison(sortField: string, direction: number, a: BriefOrganization, b: BriefOrganization) {\n    switch (sortField) {\n        case 'created':\n            return direction * (dateDays(a.createdAt) - dateDays(b.createdAt))\n        case 'modified':\n        case 'changed':\n            return direction * (dateDays(a.modifiedAt) - dateDays(b.modifiedAt))\n        case 'name':\n            return direction * a.name.localeCompare(b.name)\n        case 'owner':\n            // TODO: after the dust settles for org -> brief org conversion,\n            // we may need to convert the owner to a member via profile...\n            return direction * a.owner.username.localeCompare(b.owner.username)\n        case 'narrativeCount':\n            return direction * (a.narrativeCount - b.narrativeCount)\n        case 'memberCount':\n            return direction * (a.memberCount - b.memberCount)\n        default:\n            console.warn('unimplemented sort field: ' + sortField)\n            return 0;\n    }\n}\n\nfunction applySort(organizations: Array<BriefOrganization>, sortField: string, sortDirection: SortDirection): Array<BriefOrganization> {\n    const direction = sortDirection === SortDirection.ASCENDING ? 1 : -1\n    return organizations.slice().sort((a, b) => {\n        return applySortComparison(sortField, direction, a, b) || applySortComparison('name', 1, a, b)\n    })\n}\n\nfunction groupRoleToUserRelation(role: groupsApi.Role): UserRelationToOrganization {\n    switch (role) {\n        case 'None': return UserRelationToOrganization.NONE\n        case 'Member': return UserRelationToOrganization.MEMBER\n        case 'Admin': return UserRelationToOrganization.ADMIN\n        case 'Owner': return UserRelationToOrganization.OWNER\n        default: throw new Error('Unknown role: ' + role)\n    }\n}\n\nexport interface Filter {\n    roleType: string,\n    roles: Array<string>,\n    privacy: string\n}\n\nfunction applyFilter(organizations: Array<BriefOrganization>, { roleType, roles, privacy }: Filter, username: groupsApi.Username): Array<BriefOrganization> {\n    function applyRoleType(org: BriefOrganization) {\n        switch (roleType) {\n            case 'myorgs':\n                return [\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'notmyorgs':\n                return ![\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'all':\n            default:\n                return true\n        }\n    }\n    function applyRole(org: BriefOrganization) {\n        if (roles.length === 0) {\n            return true\n        }\n        return roles.some((role) => {\n            switch (role) {\n                case 'member':\n                    return (org.relation === UserRelationToOrganization.MEMBER)\n                case 'admin':\n                    return (org.relation === UserRelationToOrganization.ADMIN)\n                case 'owner':\n                    return (org.relation === UserRelationToOrganization.OWNER)\n                default:\n                    return false\n            }\n        })\n    }\n    function applyPrivacy(org: BriefOrganization) {\n        switch (privacy) {\n            case 'public':\n                return !org.isPrivate\n            case 'private':\n                return org.isPrivate\n            case 'any':\n                return true\n            default:\n                return false\n        }\n    }\n    return organizations.filter((org) => {\n        return applyRoleType(org) && applyRole(org) && applyPrivacy(org)\n    })\n}\n\n// Narrative Sort and Search\nfunction narrativeSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return a.title.localeCompare(b.title)\n            }\n        case 'updated':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return b.updatedAt.getTime() - a.updatedAt.getTime()\n            }\n        default:\n        case 'added':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                if (a.addedAt === null) {\n                    if (b.addedAt === null) {\n                        return 0\n                    } else {\n                        // nulls sort to bottom\n                        return 1\n                    }\n                } else {\n                    if (b.addedAt === null) {\n                        return -1\n                    } else {\n                        return b.addedAt.getTime() - a.addedAt.getTime()\n                    }\n                }\n            }\n    }\n}\n\nexport function applyNarrativeSort(narratives: Array<NarrativeResource>, sortBy: string) {\n    if (!sortBy) {\n        return narratives\n    }\n    return narratives.slice().sort((a: NarrativeResource, b: NarrativeResource) => {\n        const c1 = narrativeSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return narrativeSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyNarrativeSearch(narratives: Array<NarrativeResource>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return narratives\n    }\n    return narratives.slice().filter((narrative: NarrativeResource) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(narrative.title))\n        })\n    })\n}\n\nexport interface NarrativeQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryNarratives(narratives: Array<NarrativeResource>, query: NarrativeQuery) {\n    const searched = applyNarrativeSearch(narratives, query.searchBy)\n    const sorted = applyNarrativeSort(searched, query.sortBy)\n    return sorted\n}\n\n// Members Sort and Search\n\nfunction memberSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            // TODO: need to use user real name\n\n            return (a: Member, b: Member) => {\n                return a.username.localeCompare(b.username)\n            }\n        default:\n        case 'added':\n            return (a: Member, b: Member) => {\n                return b.joinedAt.getTime() - a.joinedAt.getTime()\n            }\n    }\n}\n\nexport function applyMembersSort(members: Array<Member>, sortBy: string) {\n    if (!sortBy) {\n        return members\n    }\n    return members.slice().sort((a: Member, b: Member) => {\n        const c1 = memberSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return memberSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyMembersSearch(members: Array<Member>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return members\n    }\n    return members.slice().filter((member: Member) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(member.username) ||\n                token.test(member.title || ''))\n        })\n    })\n}\n\nexport interface MembersQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryMembers(members: Array<Member>, query: MembersQuery) {\n    const searched = applyMembersSearch(members, query.searchBy)\n    const sorted = applyMembersSort(searched, query.sortBy)\n    return sorted\n}\n\n// function getCustomField(group: groupsApi.Group | groupsApi.BriefGroup, name: string): string | null {\n//     if (!group.custom) {\n//         return null\n//     }\n//     if (name in group.custom) {\n//         return group.custom[name]\n//     }\n//     return null\n// }\n\n\nexport interface ConstructorParams {\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    token: string\n    username: groupsApi.Username\n}\n\nexport class OrganizationModel {\n\n    params: ConstructorParams\n    groupsClient: groupsApi.GroupsClient\n    usersClient: userModel.UserModel\n    // organizations: Map<OrganizationID, Organization | InaccessiblePrivateOrganization>\n\n    constructor(params: ConstructorParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.usersClient = new userModel.UserModel({\n            userProfileServiceURL: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        // this.organizations = new Map<OrganizationID, Organization>()\n    }\n\n    async getOrg(id: OrganizationID): Promise<Organization | InaccessiblePrivateOrganization> {\n        const group = await this.groupsClient.getGroupById(id)\n\n        // get users from user model (profile)\n\n        if (group.role === \"None\" && group.private) {\n            return groupToPrivateOrganization(group as groupsApi.InaccessiblePrivateGroup, this.params.username)\n        } else {\n            const g = group as groupsApi.Group\n            // gather usernames from group\n            const usernames: Array<string> = []\n            usernames.push(g.owner.name)\n            g.admins.forEach((admin) => {\n                usernames.push(admin.name)\n            })\n            g.members.forEach((member) => {\n                usernames.push(member.name)\n            })\n\n            const users = await this.usersClient.getUsers(usernames)\n\n            return groupToOrganization(g, this.params.username, users)\n        }\n    }\n\n    async getGroupUsers(group: groupsApi.Group) {\n        // gather usernames from group\n        const usernames: Array<string> = []\n        usernames.push(group.owner.name)\n        group.admins.forEach((admin) => {\n            usernames.push(admin.name)\n        })\n        group.members.forEach((member) => {\n            usernames.push(member.name)\n        })\n\n        return await this.usersClient.getUsers(usernames)\n    }\n\n    async getOrganization(id: OrganizationID): Promise<Organization> {\n        const group = await this.groupsClient.getGroupById(id)\n        if (group.role === \"None\" && group.private) {\n            throw new Error('Inaccessible Organization')\n        }\n\n        const users = await this.getGroupUsers(<groupsApi.Group>group)\n\n        return groupToOrganization(group as groupsApi.Group, this.params.username, users)\n    }\n\n    async getOrgs(ids: Array<OrganizationID>): Promise<Array<Organization | InaccessiblePrivateOrganization>> {\n        return Promise.all(ids.map((id) => {\n            return this.getOrg(id)\n        }))\n    }\n\n    async getOwnOrgs(): Promise<Array<BriefOrganization>> {\n        const orgs = await this.getAllOrgs2()\n\n        const ownOrgs = orgs\n            .filter((org: BriefOrganization) => {\n                // ensure that user has some relationship to the org:\n                // member, admin, or owner\n                return (org.relation !== UserRelationToOrganization.NONE)\n            })\n\n        return ownOrgs\n    }\n\n    listGroupToBriefOrganization(group: groupsApi.BriefGroup, users: Map<userModel.Username, userModel.User>): BriefOrganization {\n        return {\n            id: group.id,\n            name: group.name,\n            logoUrl: group.custom.logourl || null,\n            isPrivate: group.private,\n            homeUrl: group.custom.homeurl || null,\n            researchInterests: group.custom.researchinterests || null,\n            owner: {\n                username: group.owner,\n                realname: getRealname(users, group.owner, 'n/a'),\n                lastVisitedAt: null,\n                type: MemberType.OWNER,\n                joinedAt: new Date(group.createdate),\n                title: 'Owner'\n            },\n            relation: groupRoleToUserRelation(group.role),\n            isMember: (group.role !== \"None\"),\n            isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n            isOwner: (group.role === \"Owner\"),\n            createdAt: new Date(group.createdate),\n            modifiedAt: new Date(group.moddate),\n            lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n            memberCount: group.memcount || 0,\n            narrativeCount: group.rescount.workspace || 0,\n            relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n        }\n    }\n\n    async getAllOrgs2(): Promise<Array<BriefOrganization>> {\n        let allGroups: Array<groupsApi.BriefGroup> = []\n        let groups: Array<groupsApi.BriefGroup>\n        do {\n            groups = await this.groupsClient.listGroups()\n            allGroups = allGroups.concat(groups)\n        } while (groups.length === groupsApi.MAX_GROUPS_PER_LIST_REQUEST)\n\n        const usernames: Set<string> = new Set()\n        allGroups.forEach((g) => {\n            usernames.add(g.owner)\n        })\n\n\n        const users = await this.usersClient.getUsers(Array.from(usernames.values()))\n\n        return allGroups.map((group) => {\n            return this.listGroupToBriefOrganization(group, users)\n        })\n    }\n\n    async queryOrgs(query: Query): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n\n        const filtered = applyFilter(orgs, query.filter, query.username)\n        const searched = applySearch(filtered, query.searchTerms)\n        const sorted = applySort(searched, query.sortField, query.sortDirection)\n\n        return {\n            organizations: sorted,\n            total: orgs.length\n        }\n    }\n\n    async ownOrgs(username: groupsApi.Username): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n        const ownOrgs = orgs.filter((org: BriefOrganization) => {\n            return (org.relation !== UserRelationToOrganization.NONE)\n        })\n\n        return {\n            organizations: ownOrgs,\n            total: ownOrgs.length\n        }\n    }\n\n    async grantViewAccess(requestId: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantReadAccessToRequestedResource({ requestId })\n        const req = await groupsClient.getRequest(requestId)\n        return requestModel.groupRequestToOrgRequest(req)\n    }\n\n    async addOrg(newOrg: EditableOrganization, username: groupsApi.Username): Promise<Organization> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n        if ((newOrg.id.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.name.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.logoUrl.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.description.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.isPrivate.validationState.type !== ValidationErrorType.OK)\n        ) {\n            return Promise.reject(new Error('One or more fields are invalid'))\n        }\n\n        const group = await groupsClient.createGroup({\n            id: newOrg.id.value,\n            name: newOrg.name.value,\n            logoUrl: newOrg.logoUrl.value,\n            homeUrl: newOrg.homeUrl.value,\n            researchInterests: newOrg.researchInterests.value,\n            description: newOrg.description.value,\n            isPrivate: newOrg.isPrivate.value\n        })\n\n        const users = await this.getGroupUsers(group)\n\n        return groupToOrganization(group, username, users)\n\n    }\n\n    async orgExists(id: string): Promise<boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.groupExists(id)\n            .then(({ exists }) => {\n                return exists\n            })\n    }\n\n    async updateOrg(id: string, orgUpdate: OrganizationUpdate): Promise<void> {\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n\n\n        return groupsClient.updateGroup(id, {\n            name: orgUpdate.name,\n            logoUrl: orgUpdate.logoUrl,\n            homeUrl: orgUpdate.homeUrl,\n            researchInterests: orgUpdate.researchInterests,\n            description: orgUpdate.description,\n            private: orgUpdate.isPrivate\n        })\n    }\n\n    validateOrgId(id: string): [string, ValidationState] {\n        return Validation.validateOrgId(id);\n    }\n\n    validateOrgName(name: string): [string, ValidationState] {\n        return Validation.validateOrgName(name)\n    }\n\n    validateOrgDescription(description: string): [string, ValidationState] {\n        return Validation.validateOrgDescription(description);\n    }\n\n    async removeNarrativeFromOrg(organizationId: OrganizationID, workspaceId: number): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'workspace',\n            String(workspaceId)\n        )\n    }\n\n    async removeAppFromOrg(organizationId: OrganizationID, appId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupFunnyAppId = appId.split('/').join('.')\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'catalogmethod',\n            groupFunnyAppId\n        )\n    }\n\n\n    async grantNarrativeAccess(groupId: string, resourceId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantResourceAccess(groupId, 'workspace', resourceId)\n    }\n\n    async requestMembership(id: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.requestMembership({\n            groupId: id\n        })\n        return requestModel.groupRequestToOrgRequest(request)\n    }\n\n    async addOrRequestNarrativeToGroup(groupId: string, workspaceId: WorkspaceID): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestNarrative({\n            groupId: groupId,\n            workspaceId: workspaceId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    async addOrRequestAppToGroup(groupId: string, appId: string): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestResource({\n            groupId,\n            type: 'catalogmethod',\n            resourceId: appId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    async memberToAdmin(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.memberToAdmin({\n            groupId,\n            member\n        })\n    }\n\n    async adminToMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.adminToMember({\n            groupId,\n            member\n        })\n    }\n    async removeMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.removeMember({\n            groupId,\n            member\n        })\n    }\n\n    async updateMember(groupId: string, memberUsername: string, update: MemberUpdate) {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.updateMember({ groupId, memberUsername, update })\n    }\n\n    async visitOrg({ organizationId }: { organizationId: string }): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.visitGroup({ groupId: organizationId })\n    }\n\n    async getOpenRequestsStatus({ organizationIds }: { organizationIds: Array<OrganizationID> }): Promise<Map<OrganizationID, RequestStatus>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: organizationIds })\n        const result = new Map<OrganizationID, RequestStatus>()\n        for (const [groupId, status] of openRequests.entries()) {\n            const requestStatus: RequestStatus = stringToRequestStatus(status)\n            result.set(<OrganizationID>groupId, requestStatus)\n        }\n        return result\n    }\n\n    async getOpenRequestStatus({ organizationId }: { organizationId: OrganizationID }): Promise<RequestStatus> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: [organizationId] })\n        for (const [groupId, status] of openRequests.entries()) {\n            return stringToRequestStatus(status)\n        }\n        throw new Error('expected request status, got none')\n    }\n\n    async addRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.addRelatedGroup(organizationId, relatedOrganizationId)\n    }\n\n    async removeRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.removeRelatedGroup(organizationId, relatedOrganizationId)\n    }\n}\n\nfunction stringToRequestStatus(status: groupsApi.RequestStatus): RequestStatus {\n    switch (status.new) {\n        case 'None': return RequestStatus.NONE\n        case 'Old': return RequestStatus.OLD\n        case 'New': return RequestStatus.NEW\n        default: throw new Error('Invalid open request status: ' + status)\n    }\n}\n\nexport function userPermissionToWorkspacePermission(userPermission: string, isOwner: boolean) {\n    if (isOwner) {\n        return UserWorkspacePermission.OWNER\n    }\n    switch (userPermission) {\n        case 'r':\n            return UserWorkspacePermission.VIEW\n        case 'w':\n            return UserWorkspacePermission.EDIT\n        case 'a':\n            return UserWorkspacePermission.ADMIN\n        default:\n            throw new Error('Invalid workspace user permission: ' + userPermission)\n    }\n}","import { ValidationState, ValidationErrorType } from \"../../../types\"\n\nexport default class Validation {\n    static nonPrintableRe = /[\\000-\\031]/\n\n    static testNonPrintableCharacters(s: string) {\n        const firstNonPrintable = s.search(Validation.nonPrintableRe)\n        if (firstNonPrintable === -1) {\n            return false\n        }\n        const beforeStart = firstNonPrintable - 5 < 0 ? 0 : firstNonPrintable - 5\n        const before = s.slice(beforeStart, firstNonPrintable)\n        const after = s.slice(firstNonPrintable + 1, firstNonPrintable + 6)\n        return `Non-printable character at position ${firstNonPrintable}: \"${before}___${after}`\n    }\n\n    static validateOrgId(id: string): [string, ValidationState] {\n        // May not be empty\n        if (id.length === 0) {\n            return [\n                id, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization id may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        // No spaces\n        if (id.match(/\\s/)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not contain a space',\n                    validatedAt: new Date()\n                }]\n        }\n        // May not exceed maximum size\n        // todo: what is the real limit?\n        if (id.length > 100) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not be longer than 100 characters',\n                    validatedAt: new Date()\n                }]\n        }\n\n        // May only consist if lower case alphanumeric\n        const alphaRe = /^[a-z0-9-]+$/\n        if (!id.match(alphaRe)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization ID may only contain lower case letters (a-z), numeric digits (0-9) and the dash \"-\"',\n                    validatedAt: new Date()\n                }\n            ]\n        }\n\n        return [id, {\n            type: ValidationErrorType.OK,\n            validatedAt: new Date()\n        }]\n    }\n\n    static validateOrgName(name: string): [string, ValidationState] {\n        if (name.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization name may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        if (name.length > 256) {\n            return [\n                name, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization name may not be longer than 256 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            name, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgLogoUrl(logoUrl: string | null): [string | null, ValidationState] {\n        if (logoUrl === null || logoUrl === '') {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (logoUrl.length > 1000) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Logo url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(logoUrl)\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n            if (!url.protocol.match(/^https:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Only https (secure) urls are supported',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            logoUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgHomeUrl(homeUrl: string | null): [string | null, ValidationState] {\n        if (homeUrl === null || homeUrl === '') {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (homeUrl.length > 1000) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Home url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(homeUrl)\n            // ensure either http or https, followed by :// and then\n            // something then a dot then something then anything\n            // if (!url.protocol.match(/^http[s]?:\\/\\/[^.]+[.][^.]+.*$/)) {\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    homeUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            homeUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgResearchInterests(researchInterests: string): [string, ValidationState] {\n        if (researchInterests.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Research Interests may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n\n        if (researchInterests.length > 280) {\n            return [\n                researchInterests, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Research Interests may not be longer than 280 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            researchInterests, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgDescription(description: string): [string, ValidationState] {\n        if (description.length === 0) {\n            // return [name, {\n            //     type: ValidationErrorType.OK,\n            //     validatedAt: new Date()\n            // }]\n            return [name, {\n                type: ValidationErrorType.ERROR,\n                message: 'Organization description may not be empty',\n                validatedAt: new Date()\n            }]\n        }\n        // TODO: Is there really a limit?\n        // const nonPrintable = Validation.testNonPrintableCharacters(description)\n        // if (nonPrintable) {\n        //     return [\n        //         description, {\n        //             type: UIErrorType.ERROR,\n        //             message: nonPrintable\n        //         }\n        //     ]\n        // }\n        if (description.length > 4096) {\n            return [\n                description, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization description may not be longer than 4,096 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            description, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        ]\n    }\n\n    static validateMemberTitle(title: string): [string, ValidationState] {\n        const maxTitleLength = 100\n        if (title.length > maxTitleLength) {\n            return [\n                title, {\n                    type: ValidationErrorType.ERROR,\n                    message: `member title may not be longer than ${maxTitleLength} characters`,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            title, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n}","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\nexport interface Load extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n}\n\nexport interface LoadError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR\n    error: AnError\n}\n\nexport interface Unload extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n        } as LoadStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        const { organization } = viewModel\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const orgs = await orgClient.getAllOrgs2()\n            const selectableOrgs = orgs.map((org) => {\n                const isRelated = organization.relatedOrganizations.includes(org.id)\n                return {\n                    isRelated: isRelated,\n                    isSelected: false,\n                    organization: org\n                } as SelectableRelatableOrganization\n            })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n                organizations: selectableOrgs\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n    }\n}\n\nexport interface SelectOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    selectedOrganization: SelectableRelatableOrganization\n}\n\nexport function selectOrganization(org: SelectableRelatableOrganization): SelectOrganization {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n        selectedOrganization: org\n    }\n}\n\n// Add Org\n\nexport interface AddOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n}\n\nexport interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n        } as AddOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Search Orgs\n\nexport interface Search extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    query: string\n}\n\nexport interface SearchStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n}\n\nexport interface SearchSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n    searchBy: string\n}\n\nexport interface SearchError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n    error: AnError\n}\n\nexport function applyQuery(orgs: Array<SelectableRelatableOrganization>, query: string) {\n    const searchExp = query.split(/\\s+/).map((term) => {\n        return new RegExp(term, 'i')\n    })\n\n    return orgs.filter(({ organization }) => {\n        return searchExp.every((re) => {\n            return (\n                re.test(organization.name) ||\n                // TODO: realname\n                re.test(organization.owner.username)\n            )\n        })\n    })\n}\n\nexport function search(query: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n        } as SearchStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n\n        const vm = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n        if (vm === null) {\n            throw new Error('vm is null')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            const availableOrgs = applyQuery(vm.availableOrganizations.organizations, query)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n                organizations: availableOrgs,\n                searchBy: query\n            } as SearchSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageRelatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind, ViewOrgSubViewKind, ViewState, SelectableRelatableOrganization } from '../../../types';\nimport { ActionFlag } from '../../actions';\nimport { OrganizationModel } from '../../../data/models/organization/model';\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.OK,\n                            error: null,\n                            viewModel: {\n                                kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS,\n                                relatedOrganizations: state.views.viewOrgView.viewModel.organization.relatedOrganizations,\n                                organization: state.views.viewOrgView.viewModel.organization,\n                                availableOrganizations: {\n                                    organizations: action.organizations,\n                                    queried: action.organizations,\n                                    searchBy: ''\n                                },\n                                selectedOrganization: null\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.NONE,\n                            error: null,\n                            viewModel: null\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function selectOrganization(state: StoreState, action: actions.SelectOrganization): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations;\n\n    const organizations = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.selectedOrganization.organization.id) {\n            relatedOrg.isSelected = true\n        } else {\n            relatedOrg.isSelected = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                selectedOrganization: action.selectedOrganization,\n                                availableOrganizations: {\n                                    organizations: organizations,\n                                    queried: actions.applyQuery(organizations, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrganization(state: StoreState, action: actions.AddOrganizationSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n    const newRelatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.concat([action.organizationId])\n\n    const newAvailableOrgs = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (newRelatedOrgs.includes(relatedOrg.organization.id)) {\n            relatedOrg.isRelated = true\n        } else {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: newRelatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganizationSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    // Remove from the related orgs\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n\n    // Update the related status of the org in the management interface.\n    const newAvailableOrgs = availableOrgs.organizations.filter((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.organizationId) {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport function searchSuccess(state: StoreState, action: actions.SearchSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations,\n                                    queried: action.organizations,\n                                    searchBy: action.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION:\n            return selectOrganization(state, action as actions.SelectOrganization)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS:\n            return addOrganization(state, action as actions.AddOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as actions.SearchSuccess)\n        default:\n            return null\n    }\n}\n","import * as actions from '../../actions/viewOrganization/relatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { Action } from 'redux'\nimport { ActionFlag } from '../../actions'\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganization): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganization)\n        default:\n            return null\n    }\n}\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/addApps'\nimport { AddAppsViewModel, View, ViewState, StoreState, ViewOrgViewModelKind, ResourceRelationToOrg } from '../../../types'\nimport { ActionFlag } from '../../actions';\n\nexport function loadStart(state: View<AddAppsViewModel>, action: actions.LoadStart): View<AddAppsViewModel> {\n    return {\n        state: ViewState.LOADING,\n        viewModel: null,\n        error: null\n    }\n}\n\nexport function loadSuccess(state: View<AddAppsViewModel>, action: actions.LoadSuccess): View<AddAppsViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            rawApps: action.rawApps,\n            sortBy: action.sortBy,\n            searchBy: action.searchBy,\n            apps: action.apps,\n            selectedApp: action.selectedApp\n        }\n    }\n}\n\nexport function loadError(state: View<AddAppsViewModel>, action: actions.LoadError): View<AddAppsViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<AddAppsViewModel>, action: actions.Unload): View<AddAppsViewModel> {\n    return {\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function selectSuccess(state: View<AddAppsViewModel>, action: actions.SelectSuccess): View<AddAppsViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const newRawApps = state.viewModel.rawApps.slice(0)\n    // TODO might need more item setting here\n    newRawApps.forEach((app) => {\n        if (app === action.selectedApp) {\n            app.selected = true\n        } else {\n            app.selected = false\n        }\n    })\n\n    // TODO: reapply sort and search??\n    const newApps = state.viewModel.apps.slice(0)\n    newApps.forEach((app) => {\n        if (app === action.selectedApp) {\n            app.selected = true\n        } else {\n            app.selected = false\n        }\n    })\n\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            apps: newApps,\n            rawApps: newRawApps,\n            selectedApp: action.selectedApp\n        } as AddAppsViewModel\n    }\n}\n\nexport function requestAssociationSuccess(state: View<AddAppsViewModel>, action: actions.RequestAssociationSuccess): View<AddAppsViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const newRawApps = state.viewModel.rawApps.slice(0)\n    // TODO might need more item setting here\n    newRawApps.forEach((app) => {\n        if (app.app.id === action.appId) {\n            if (action.pending) {\n                app.relation = ResourceRelationToOrg.ASSOCIATION_PENDING\n            } else {\n                app.relation = ResourceRelationToOrg.ASSOCIATED\n            }\n        }\n    })\n\n    // TODO: reapply sort and search??\n    const newApps = state.viewModel.apps.slice(0)\n    newApps.forEach((app) => {\n        if (app.app.id === action.appId) {\n            if (action.pending) {\n                app.relation = ResourceRelationToOrg.ASSOCIATION_PENDING\n            } else {\n                app.relation = ResourceRelationToOrg.ASSOCIATED\n            }\n        }\n    })\n\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            apps: newApps,\n            rawApps: newRawApps\n            // selectedApp: action.selectedApp\n        } as AddAppsViewModel\n    }\n}\n\n// TODO: route the search and/or search expression here too???\nfunction searchSuccess(state: View<AddAppsViewModel>, action: actions.SearchSuccess): View<AddAppsViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            apps: action.apps\n        }\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_START:\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_SUCCESS:\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_ERROR:\n        case ActionFlag.VIEW_ORG_ADD_APPS_UNLOAD:\n        case ActionFlag.VIEW_ORG_ADD_APPS_SELECT_SUCCESS:\n        case ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS:\n        case ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_SUCCESS:\n            return true\n        default: return false\n    }\n}\n\nfunction localReducer(state: View<AddAppsViewModel>, action: actions.AddAppsAction): View<AddAppsViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_ADD_APPS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_ADD_APPS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_ADD_APPS_SELECT_SUCCESS:\n            return selectSuccess(state, action as actions.SelectSuccess)\n        case ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS:\n            return requestAssociationSuccess(state, action as actions.RequestAssociationSuccess)\n        case ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as actions.SearchSuccess)\n        default:\n            return null\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<AddAppsViewModel> = state.views.viewOrgView.viewModel.subViews.addAppsView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        addAppsView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../actions/viewOrg'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport acceptInboxRequest from './viewOrganization/acceptInboxRequest'\nimport viewMembers from './viewOrganization/viewMembers'\nimport denyInboxRequest from './viewOrganization/denyInboxRequest'\nimport cancelOutboxRequest from './viewOrganization/cancelOutboxRequests'\nimport manageRelatedOrganizations from './viewOrganization/manageRelatedOrganizations'\nimport relatedOrganizations from './viewOrganization/relatedOrganizations'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\nimport addApps from './viewOrganization/addApp'\n\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadNormalSuccess(state: types.StoreState, action: actions.LoadNormalSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    narratives: {\n                        sortBy: action.narrativesSortBy,\n                        searchBy: '',\n                        narratives: action.narratives\n                    },\n                    apps: {\n                        sortBy: '',\n                        searchBy: '',\n                        apps: action.apps\n                    },\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        manageRelatedOrganizationsView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        inviteUserView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        requestNarrativeView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        manageMembershipView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        addAppsView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        }\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function reloadNormalSuccess(state: types.StoreState, action: actions.ReloadNormalSuccess): types.StoreState {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (viewModel === null) {\n        return state\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    narratives: {\n                        sortBy: action.narrativesSortBy,\n                        searchBy: '',\n                        narratives: action.narratives\n                    },\n                    apps: {\n                        ...viewModel.apps,\n                        apps: action.apps\n                    },\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        ...viewModel.subViews,\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(state: types.StoreState, action: actions.LoadInaccessiblePrivateSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n                    organization: action.organization,\n                    relation: action.relation,\n                    requestOutbox: action.requestOutbox\n                } as types.ViewInaccessiblePrivateOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function removeNarrativeSuccess(state: types.StoreState, action: actions.RemoveNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    // Argh!@\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const narratives = state.views.viewOrgView.viewModel.organization.narratives\n    const newNarratives = narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    const newDisplayNarratives = state.views.viewOrgView.viewModel.narratives.narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    // const filteredSortedNarratives = \n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        narratives: newNarratives,\n                        narrativeCount: newNarratives.length\n                    },\n                    narratives: {\n                        ...state.views.viewOrgView.viewModel.narratives,\n                        narratives: newDisplayNarratives,\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function accessNarrativeSuccess(state: types.StoreState, action: actions.AccessNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: action.organization,\n                    narratives: {\n                        ...state.views.viewOrgView.viewModel.narratives,\n                        narratives: action.narratives\n                    }\n\n                }\n            }\n        }\n    }\n}\n\nexport function sortNarrativesSuccess(state: types.StoreState, action: actions.SortNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    narratives: {\n                        ...state.views.viewOrgView.viewModel.narratives,\n                        sortBy: action.sortBy,\n                        narratives: action.narratives\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function searchNarrativesSuccess(state: types.StoreState, action: actions.SearchNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    narratives: {\n                        ...state.views.viewOrgView.viewModel.narratives,\n                        searchBy: action.searchBy,\n                        narratives: action.narratives\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction removeAppSuccess(state: types.StoreState, action: actions.RemoveAppSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    const newOrgApps = state.views.viewOrgView.viewModel.organization.apps.filter((app) => {\n        return (app.appId !== action.appId)\n    })\n\n    const newApps = state.views.viewOrgView.viewModel.apps.apps.filter((app) => {\n        return (app.appId !== action.appId)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        apps: newOrgApps,\n                        appCount: newOrgApps.length\n                    },\n                    apps: {\n                        ...state.views.viewOrgView.viewModel.apps,\n                        apps: newApps\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport default function reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS:\n            return loadNormalSuccess(state, action as actions.LoadNormalSuccess)\n        case ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS:\n            return reloadNormalSuccess(state, action as actions.ReloadNormalSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS:\n            return loadInaccessiblePrivateSuccess(state, action as actions.LoadInaccessiblePrivateSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS:\n            return removeNarrativeSuccess(state, action as actions.RemoveNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS:\n            return sortNarrativesSuccess(state, action as actions.SortNarrativesSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS:\n            return searchNarrativesSuccess(state, action as actions.SearchNarrativesSuccess)\n        case ActionFlag.VIEW_ORG_REMOVE_APP_SUCCESS:\n            return removeAppSuccess(state, action as actions.RemoveAppSuccess)\n    }\n\n    return acceptInboxRequest(state, action) ||\n        denyInboxRequest(state, action) ||\n        cancelOutboxRequest(state, action) ||\n        viewMembers(state, action) ||\n        manageRelatedOrganizations(state, action) ||\n        relatedOrganizations(state, action) ||\n        relatedOrganizations(state, action) ||\n        addApps(state, action)\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../actions/browseOrgs'\nimport { StoreState, SortDirection, ComponentLoadingState, BrowseOrgsView } from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function applyOrgSearch(orgs: Array<orgModel.Organization>, searchTerms: Array<string>) {\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTerms.every((term) => {\n            // todo : make more efficient!!!\n            return (new RegExp(term, 'i').test(org.name));\n        })\n    })\n\n    return {\n        organizations: filteredOrgs,\n        totalCount: orgs.length,\n        filteredCount: filteredOrgs.length\n    }\n}\n\n// TODO:\n// dispatch the start of the request\n// do the request\n// dispatch the success (will be same for all queries?)\n// dispatch the error\n// FOR NOW:\n// do it here...\nexport function searchOrgs(state: BrowseOrgsView, action: actions.SearchOrgs): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    // const { viewModel: { filter, sortBy, sortDirection } } = state\n\n    // const query: Query = {\n    //     searchTerms: action.searchTerms,\n    //     filter: filter,\n    //     sortBy: sortBy,\n    //     sortDirection: sortDirection,\n    //     username: state.auth.authorization.username\n    // }\n    // const result = queryOrgs(state.rawOrganizations, query)\n    // rawOrganizations: Array<Organization>\n    // organizations: Array<Organization>\n    // totalCount: number\n    // filteredCount: number\n    // sortBy: string\n    // sortDirection: SortDirection\n    // filter: string\n    // searchTerms: Array<string>\n    // selectedOrganizationId: string | null\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedOrganizationId: null,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsStart(state: BrowseOrgsView, action: actions.SearchOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsSuccess(state: BrowseOrgsView, action: actions.SearchOrgsSuccess): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            organizations: action.organizations,\n            openRequests: action.openRequests,\n            totalCount: action.totalCount,\n            filteredCount: action.organizations.length,\n            searching: false\n        }\n    }\n}\n\n// TODO: hmm, uses the global error -- this was early in the development of this (a whole two weeks ago!)\n// and this should now go in the \"browseOrgs\" (or better named \"searchOrgs\") branch.\nexport function searchOrgsError(state: BrowseOrgsView, action: actions.SearchOrgsError): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: false,\n            error: action.error\n        }\n    }\n}\n\n\nexport function sortOrgsStart(state: BrowseOrgsView, action: actions.SortOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            sortField: action.sortField,\n            sortDirection: action.sortDirection,\n            searching: true\n        }\n    }\n}\n\n\ninterface Query {\n    searchTerms: Array<string>,\n    username: string,\n    sortField: string,\n    sortDirection: SortDirection,\n    filter: string\n}\n\ninterface QueryResults {\n    organizations: Array<orgModel.Organization>,\n    total: number\n}\n\nfunction filterOrgsStart(state: BrowseOrgsView, action: actions.FilterOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { filter } = action\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            filter,\n            searching: true\n        }\n    }\n}\n\nfunction loadSuccess(state: BrowseOrgsView, action: actions.LoadSuccess): BrowseOrgsView {\n    const { defaultViewModel: {\n        rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n        totalCount, filteredCount, selectedOrganizationId, error, searching\n    } } = action\n\n    return {\n        ...state,\n        loadingState: ComponentLoadingState.SUCCESS,\n        error: null,\n        viewModel: {\n            rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n            totalCount, filteredCount, selectedOrganizationId, error, searching\n        }\n    }\n}\n\nfunction unload(state: BrowseOrgsView, action: actions.Unload): BrowseOrgsView {\n    return {\n        loadingState: ComponentLoadingState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction localReducer(state: BrowseOrgsView, action: Action): BrowseOrgsView | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.BROWSE_ORGS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH:\n            return searchOrgs(state, action as actions.SearchOrgs)\n        case ActionFlag.BROWSE_ORGS_SEARCH_START:\n            return searchOrgsStart(state, action as actions.SearchOrgsStart)\n        case ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS:\n            return searchOrgsSuccess(state, action as actions.SearchOrgsSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH_ERROR:\n            return searchOrgsError(state, action as actions.SearchOrgsError)\n        // case ActionFlag.SORT_ORGS_STAR:\n        //     return sortOrgs(state, action as actions.SortOrgs)\n        case ActionFlag.BROWSE_ORGS_SORT_START:\n            return sortOrgsStart(state, action as actions.SortOrgsStart)\n        case ActionFlag.BROWSE_ORGS_FILTER_START:\n            return filterOrgsStart(state, action as actions.FilterOrgsStart)\n        case ActionFlag.BROWSE_ORGS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action<any>): StoreState | null {\n    const browseOrgsView = localReducer(state.views.browseOrgsView, action)\n    if (!browseOrgsView) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView\n        }\n    }\n}\n","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\nimport { StoreState, AuthState } from '../../types'\nimport { AuthCheckStart, AuthAuthorized, AuthUnauthorized, AuthCheckError } from '../actions/auth';\n\nexport function authCheckStart(state: StoreState, action: AuthCheckStart): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.CHECKING,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authCheckError(state: StoreState, action: AuthCheckError): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.ERROR,\n            message: action.error.message,\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authAuthorized(state: StoreState, action: AuthAuthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.AUTHORIZED,\n            message: '',\n            authorization: {\n                token: action.token,\n                username: action.username,\n                realname: action.realname,\n                roles: action.roles\n            }\n        }\n    }\n}\n\nexport function authUnauthorized(state: StoreState, action: AuthUnauthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.UNAUTHORIZED,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.AUTH_CHECK_START:\n            return authCheckStart(state, action as AuthCheckStart)\n        case ActionFlag.AUTH_AUTHORIZED:\n            return authAuthorized(state, action as AuthAuthorized)\n        case ActionFlag.AUTH_UNAUTHORIZED:\n            return authUnauthorized(state, action as AuthUnauthorized)\n        case ActionFlag.AUTH_CHECK_ERROR:\n            return authCheckError(state, action as AuthCheckError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { ActionFlag } from '../actions'\nimport { AppSuccess } from '../actions/app';\nimport { StoreState, AppState } from '../../types';\n\nexport function appSuccess(state: StoreState, action: AppSuccess): StoreState {\n    return {\n        ...state,\n        app: {\n            status: AppState.READY,\n            config: action.config\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.APP_SUCCESS:\n            return appSuccess(state, action as AppSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageOrganizationRequests'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(\n    state: StoreState,\n    action: actions.LoadStart): StoreState {\n    return state\n}\n\nexport function loadSuccess(\n    state: StoreState,\n    action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    requests: action.requests,\n                    invitations: action.invitations\n                },\n            }\n        }\n    }\n}\n\nexport function loadError(\n    state: StoreState,\n    action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function getViewAccessSuccess(state: StoreState, action: actions.GetViewAccessSuccess): StoreState {\n    // Note: we use the state object rather than peeling off the viewModel because\n    // TS can't trace the assertion (not falsy) of the variable back to the object \n    // property it was taken from.\n    if (!state.views.manageOrganizationRequestsView.viewModel) {\n        return state\n    }\n    const requests = state.views.manageOrganizationRequestsView.viewModel.requests\n    const newRequests = requests.map((request) => {\n        if (request.id = action.request.id) {\n            return action.request\n        }\n        return request\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                ...state.views.manageOrganizationRequestsView,\n                viewModel: {\n                    // TODO: below, \n                    ...state.views.manageOrganizationRequestsView.viewModel,\n                    requests: newRequests\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS:\n            return getViewAccessSuccess(state, action as actions.GetViewAccessSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.LOADING,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.NONE,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation\n                },\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.ERROR,\n                viewModel: null,\n                error: action.error\n            }\n        }\n    }\n}\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.ADMIN\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.MEMBER\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_MEMBERS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_MEMBERS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/inviteUser'\nimport {\n    StoreState, InviteUserViewModel, ViewState,\n    View, InviteUserViewState\n} from '../../../types'\nimport { ActionFlag } from '../../actions'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { ViewOrgViewModelKind } from '../../../types';\n\nexport function loadStart(state: View<InviteUserViewModel>, action: actions.LoadStart): View<InviteUserViewModel> {\n    return {\n        state: ViewState.LOADING,\n        viewModel: null,\n        error: null\n    }\n}\n\nexport function loadSuccess(state: View<InviteUserViewModel>, action: actions.LoadSuccess): View<InviteUserViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            editState: InviteUserViewState.EDITING,\n            users: action.users,\n            organization: action.organization,\n            selectedUser: null\n        }\n    }\n}\n\nexport function loadError(state: View<InviteUserViewModel>, action: actions.LoadError): View<InviteUserViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<InviteUserViewModel>, action: actions.Unload): View<InviteUserViewModel> {\n    return {\n\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function searchUsersSuccess(state: View<InviteUserViewModel>, action: actions.SearchUsersSuccess): View<InviteUserViewModel> {\n    // TODO: better guards!\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            users: action.users\n        }\n    }\n}\n\nexport function selectUserSuccess(state: View<InviteUserViewModel>, action: actions.SelectUserSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedUser: {\n                user: action.user,\n                relation: action.relation\n            }\n        }\n    }\n}\n\nexport function sendInvitationStart(state: View<InviteUserViewModel>, action: actions.SendInvitationStart): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SENDING\n        }\n    }\n}\n\nexport function sendInvitationSuccess(state: View<InviteUserViewModel>, action: actions.SendInvitationSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const { viewModel: { selectedUser, users } } = state\n\n    // const selectedUser = state.inviteUserView.value.selectedUser\n    if (!selectedUser) {\n        throw new Error('selected user is null')\n    }\n    selectedUser.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n\n    if (!users) {\n        throw new Error('users is null')\n    }\n    const newUsers = users.map((user) => {\n        if (user.username === selectedUser.user.username) {\n            user.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n        }\n        return user\n    })\n\n    return {\n        ...state,\n\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SUCCESS,\n            selectedUser: selectedUser,\n            users: newUsers\n        }\n    }\n}\n\nexport function sendInvitationError(state: View<InviteUserViewModel>, action: actions.SendInvitationError): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.ERROR\n        }\n    }\n}\n\nfunction localReducer(state: View<InviteUserViewModel>, action: Action): View<InviteUserViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return searchUsersSuccess(state, action as actions.SearchUsersSuccess)\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return selectUserSuccess(state, action as actions.SelectUserSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return sendInvitationStart(state, action as actions.SendInvitationStart)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return sendInvitationSuccess(state, action as actions.SendInvitationSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return sendInvitationError(state, action as actions.SendInvitationError)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n        case ActionFlag.INVITE_USER_UNLOAD:\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return true\n        default:\n            return false\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<InviteUserViewModel> = state.views.viewOrgView.viewModel.subViews.inviteUserView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        inviteUserView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageMembership'\nimport { StoreState, ComponentLoadingState, SyncState, ValidationStateOk, ValidationState, ValidationErrorType, SaveState, EditState, ManageMembershipViewModel, ViewOrgViewModelKind, View, ViewState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nexport function loadStart(state: View<ManageMembershipViewModel>, action: actions.LoadStart): View<ManageMembershipViewModel> {\n    return {\n        ...state,\n        state: ViewState.LOADING,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function loadSuccess(state: View<ManageMembershipViewModel>, action: actions.LoadSuccess): View<ManageMembershipViewModel> {\n    return {\n        ...state,\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            organization: action.organization,\n            editableMemberProfile: action.editableMemberProfile,\n            editState: EditState.UNEDITED,\n            saveState: SaveState.NEW,\n            validationState: validationStateOk()\n        }\n    }\n}\n\nexport function loadError(state: View<ManageMembershipViewModel>, action: actions.LoadError): View<ManageMembershipViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<ManageMembershipViewModel>, action: actions.Unload): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function updateTitleSuccess(state: View<ManageMembershipViewModel>, action: actions.UpdateTitleSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const editedMember = state.viewModel.editableMemberProfile\n    let syncState\n    if (action.title !== editedMember.title.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n    const newState = {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editableMemberProfile: {\n                ...state.viewModel.editableMemberProfile,\n                title: {\n                    value: action.title,\n                    remoteValue: action.title,\n                    syncState: syncState,\n                    validationState: validationStateOk()\n                }\n            }\n        }\n    }\n\n    const editState = evaluateEditorState(newState.viewModel)\n\n    return {\n        ...newState,\n        viewModel: {\n            ...newState.viewModel,\n            editState: editState\n        }\n    }\n}\nfunction evaluateEditorState(viewModel: ManageMembershipViewModel): EditState {\n    if (viewModel.editableMemberProfile.title.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\nfunction evaluateSuccess(state: View<ManageMembershipViewModel>, action: actions.EvaluateSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const editState = evaluateEditorState(state.viewModel)\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: editState,\n            validationState: {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        }\n    }\n}\n\nfunction evaluateError(state: View<ManageMembershipViewModel>, action: actions.EvaluateError): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            validationState: {\n                type: ValidationErrorType.ERROR,\n                message: 'Validation error(s)',\n                validatedAt: new Date()\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: View<ManageMembershipViewModel>, action: actions.SaveSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: EditState.UNEDITED,\n            saveState: SaveState.SAVED,\n            editableMemberProfile: {\n                ...state.viewModel.editableMemberProfile,\n                title: {\n                    ...state.viewModel.editableMemberProfile.title,\n                    syncState: SyncState.CLEAN\n                }\n            }\n        }\n    }\n}\n\n\n// export function demoteSelfToMemberSuccess(state: View<ManageMembershipViewModel>, action: actions.DemoteSelfToMemberSuccess): View<ManageMembershipViewModel> {\n//     if (!state.views.manageMembershipView.viewModel) {\n//         return state\n//     }\n\n//     const {\n//         views: { viewOrgView: { viewModel } }\n//     } = state\n\n//     if (viewModel === null) {\n//         return state\n//     }\n\n//     // TODO: ugh, cut this off before getting here.\n//     if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n//         return state\n//     }\n\n//     // TODO: probably better is to have to have the action handler do a call to get the members\n//     // and to populate the orgs membership struct from that...\n//     const members = viewModel.organization.members.map((member) => {\n//         if (member.username === action.memberUsername) {\n//             return {\n//                 ...member,\n//                 type: MemberType.MEMBER\n//             }\n//         } else {\n//             return member\n//         }\n//     })\n\n//     const sortedMembers = viewModel.members.map((member) => {\n//         if (member.username === action.memberUsername) {\n//             return {\n//                 ...member,\n//                 type: MemberType.MEMBER\n//             }\n//         } else {\n//             return member\n//         }\n//     })\n\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewOrgView: {\n//                 ...state.views.viewOrgView,\n//                 viewModel: {\n//                     ...viewModel,\n//                     organization: {\n//                         ...viewModel.organization,\n//                         members: members\n//                     },\n//                     members: sortedMembers\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// function reducer(state: StoreState, action: Action): StoreState | null {\n//     switch (action.type) {\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_START:\n//             return loadStart(state, action as actions.LoadStart)\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n//             return loadSuccess(state, action as actions.LoadSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR:\n//             return loadError(state, action as actions.LoadError)\n//         case ActionFlag.MANAGE_MEMBERSHIP_UNLOAD:\n//             return unload(state, action as actions.Unload)\n//         case ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n//             return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n//             return evaluateSuccess(state, action as actions.EvaluateSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n//             return evaluateError(state, action as actions.EvaluateError)\n//         case ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n//             return saveSuccess(state, action as actions.SaveSuccess)\n//         // case ActionFlag.MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n//         //     return demoteSelfToMemberSuccess(state, action as actions.DemoteSelfToMemberSuccess)\n//         default:\n//             return null\n//     }\n// }\n\nfunction localReducer(state: View<ManageMembershipViewModel>, action: Action): View<ManageMembershipViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n            return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n            return evaluateSuccess(state, action as actions.EvaluateSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n            return evaluateError(state, action as actions.EvaluateError)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            return saveSuccess(state, action as actions.SaveSuccess)\n        // case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n        //     return demoteSelfToMemberSuccess(state, action as actions.DemoteSelfToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            // case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n            return true\n        default:\n            return false\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<ManageMembershipViewModel> = state.views.viewOrgView.viewModel.subViews.manageMembershipView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageMembershipView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/requestAddNarrative'\nimport {\n    StoreState, SaveState, NarrativeState, View,\n    RequestNarrativeViewModel, ViewOrgViewModelKind,\n    ViewState,\n    SelectionState\n} from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nexport function loadStart(state: View<RequestNarrativeViewModel>, action: actions.LoadStart): View<RequestNarrativeViewModel> {\n    return {\n\n        state: ViewState.LOADING,\n        error: null,\n        viewModel: null\n    }\n\n}\n\nexport function loadSuccess(state: View<RequestNarrativeViewModel>, action: actions.LoadSuccess): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            organization: action.organization,\n            narratives: action.narratives,\n            selectedNarrative: null,\n            relation: action.relation,\n            error: null,\n            selectionState: SelectionState.NONE,\n            saveState: SaveState.SAVED\n        }\n    }\n}\n\nexport function loadError(state: View<RequestNarrativeViewModel>, action: actions.LoadError): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function sendRequestStart(state: View<RequestNarrativeViewModel>, action: actions.SendRequestStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVING\n        }\n    }\n}\n\nexport function sendRequestSuccess(state: View<RequestNarrativeViewModel>, action: actions.SendRequestSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const newState: View<RequestNarrativeViewModel> = {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVED\n        }\n    }\n\n    const viewModel = newState.viewModel\n\n    // hmm, TS can't trace this fact from the original state (which we proved\n    // at the top of this function.)\n    if (!viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const selectedNarrative = viewModel.selectedNarrative\n\n    // If the request is by an admin, it will be returned as true, not the request\n    // (the api returns {complete: true})\n    if (action.request === true) {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.ASSOCIATED\n            }\n            return orgNarrative\n        })\n    } else {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.REQUESTED\n            }\n            return orgNarrative\n        })\n    }\n\n    return newState\n}\n\nexport function sendRequestError(state: View<RequestNarrativeViewModel>, action: actions.SendRequestError): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVE_ERROR,\n            error: action.error\n        }\n    }\n}\n\nexport function selectNarrativeStart(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel\n        }\n    }\n}\n\nexport function selectNarrativeSuccess(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    const newState = {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel,\n            selectedNarrative: action.narrative\n        }\n    }\n    return newState\n}\n\nexport function unload(state: View<RequestNarrativeViewModel>, action: actions.Unload): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction sortSuccess(state: View<RequestNarrativeViewModel>, action: actions.SortSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            narratives: action.narratives\n        }\n    }\n}\n\nfunction localReducer(state: View<RequestNarrativeViewModel>, action: Action): View<RequestNarrativeViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n            return sendRequestSuccess(state, action as actions.SendRequestSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START:\n            return selectNarrativeStart(state, action as actions.SelectNarrativeStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n            return selectNarrativeSuccess(state, action as actions.SelectNarrativeSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return sortSuccess(state, action as actions.SortSuccess)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return true\n        default:\n            return false\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<RequestNarrativeViewModel> = state.views.viewOrgView.viewModel.subViews.requestNarrativeView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        requestNarrativeView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\n","import * as actions from '../../actions/entities/organization'\nimport { StoreState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess) {\n    const newOrgs = new Map(state.entities.organizations.byId)\n    newOrgs.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            organizations: {\n                ...state.entities.organizations.byId,\n                byId: newOrgs\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: actions.OrganizationEntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}\n","\nimport * as actions from '../actions/entities'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport organizationsReducer from './entities/organization'\n\nfunction userLoaderSuccess(state: StoreState, action: actions.UserLoaderSuccess) {\n    const users = state.entities.users\n    // mutation ... horrible ;)\n    users.byId.set(action.user.username, action.user)\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            users: {\n                ...state.entities.users,\n                byId: new Map(users.byId)\n            }\n        }\n    }\n}\n\nfunction organizationLoaderSuccess(state: StoreState, action: actions.OrganizationLoaderSuccess) {\n    const orgsMap = state.entities.orgs.byId\n    orgsMap.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            orgs: {\n                ...state.entities.orgs,\n                byId: new Map(orgsMap)\n            }\n        }\n    }\n}\n\nfunction loadNarrativeSuccess(state: StoreState, action: actions.LoadNarrativeSuccess): StoreState {\n    const narratives = state.entities.narratives\n    narratives.byId.set(action.narrative.workspaceId, action.narrative)\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                ...state.entities.narratives,\n                byId: new Map(narratives.byId)\n            }\n        }\n    }\n}\n\nfunction loadAppSuccess(state: StoreState, action: actions.LoadAppSuccess): StoreState {\n    const apps = state.entities.apps\n    apps.byId.set(action.app.id, action.app)\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            apps: {\n                ...state.entities.narratives,\n                byId: new Map(apps.byId)\n            }\n        }\n    }\n}\n\n// TODO: start and error\n\nexport default function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n            return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n        case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n            return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n        case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n            return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n        case ActionFlag.ENTITY_LOAD_APP_SUCCESS:\n            return loadAppSuccess(state, action as actions.LoadAppSuccess)\n    }\n\n    return organizationsReducer(state, action)\n}\n","import { Action } from 'redux'\nimport * as actions from '../actions/dataServices'\nimport { StoreState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport * as userProfileModel from '../../data/models/profile'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        db: {\n            ...state.db,\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.DATA_SERVICE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport { StoreState } from '../../types'\nimport addOrgReducer from './addOrg'\nimport editOrgReducer from './editOrg'\nimport viewOrgReducer from './viewOrg'\nimport browseOrgsReducer from './browseOrgs'\nimport authReducer from './auth'\nimport appReducer from './app'\nimport manageOrganizatiopRequests from './manageOrganizationRequests'\nimport viewMembers from './viewMembers'\nimport inviteUser from './viewOrganization/inviteUser'\nimport manageMembership from './viewOrganization/manageMembership'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\nimport entities from './entities'\nimport dataServices from './dataServices'\n\n\nexport function reducer(state: StoreState, action: Action): StoreState {\n    return addOrgReducer(state, action) ||\n        editOrgReducer(state, action) ||\n        browseOrgsReducer(state, action) ||\n        viewOrgReducer(state, action) ||\n        authReducer(state, action) ||\n        appReducer(state, action) ||\n        manageOrganizatiopRequests(state, action) ||\n        viewMembers(state, action) ||\n        inviteUser(state, action) ||\n        manageMembership(state, action) ||\n        requestAddNarrative(state, action) ||\n        entities(state, action) ||\n        dataServices(state, action) ||\n        state;\n}\n\nexport default reducer","import * as React from 'react'\nimport './Owner.css'\n\nimport Avatar from './Avatar'\nimport { Icon, Tooltip } from 'antd';\nimport * as userModel from '../../data/models/user'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface OwnerProps {\n    user: userModel.User\n    avatarSize?: number\n    showAvatar: boolean\n}\n\ninterface OwnerState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class Owner extends React.Component<OwnerProps, OwnerState> {\n    constructor(props: OwnerProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        return (\n            <span>\n                <Icon type=\"crown\" /> owner\n        </span>\n        )\n    }\n\n    renderAvatar() {\n        if (this.props.showAvatar) {\n            return (\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n            )\n        }\n    }\n\n    renderCompact() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"Owner-owner\" >\n                {/* <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div> */}\n                {this.renderAvatar()}\n\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            title={tooltip}>\n                            <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n\n                    </div>\n                    {/* <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Owner View-NORMAL\" >\n                <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div>\n                    {/* <div className=\"role\">\n                        {this.renderRole()}\n                    </div> */}\n                    {/* <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div> */}\n                    <div className=\"Owner-title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"Owner-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Owner-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    render() {\n        return this.renderCompact()\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return this.renderCompact()\n\n        //     case View.NORMAL:\n        //         return this.renderNormal()\n        // }\n    }\n}\n\n","import * as React from 'react'\nimport md5 from 'md5'\n\nexport interface OrgLogoProps {\n    logoUrl: string | null\n    size: number\n    organizationName: string\n    organizationId: string\n}\n\nexport interface OrgLogoState {\n\n}\n\nexport default class OrgLogo extends React.Component<OrgLogoProps, OrgLogoState> {\n    constructor(props: OrgLogoProps) {\n        super(props)\n    }\n\n    renderLogoUrl() {\n        if (!this.props.logoUrl) {\n            return (\n                <span>n/a</span>\n            )\n        }\n        return (\n            <img src={this.props.logoUrl} width={this.props.size} />\n        )\n    }\n\n    // see: https://github.com/lautis/unicode-substring/blob/master/index.js\n    charAt(inString: string, position: number) {\n        // const c1 = inString.charAt(position)\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderDefaultInitial() {\n        const initial = this.charAt(this.props.organizationName, 0).toUpperCase()\n        // const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.organizationId)\n\n        const color = hash.substr(0, 6)\n        // return (\n        //     <span style={{ color: '\"#' + color + '\"', width: this.props.size, height: this.props.size, fontSize: this.props.size - 6 }}\n        //     >{initial}</span>\n        // )\n        return (\n            <svg width={this.props.size} height={this.props.size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={this.props.size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogo() {\n        if (this.props.logoUrl) {\n            return this.renderLogoUrl()\n        }\n        return this.renderDefaultInitial();\n    }\n\n    render() {\n        return this.renderLogo()\n    }\n}","import * as React from 'react'\nimport './Avatar.css'\nimport noUserPic from './nouserpic.png'\n\nimport { User } from '../../types'\n\nexport interface AvatarProps {\n    user: User,\n    size: number\n}\n\ninterface AvatarState {\n\n}\n\nexport class Avatar extends React.Component<AvatarProps, AvatarState> {\n    constructor(props: AvatarProps) {\n        super(props)\n    }\n\n    getAvatarUrl(user: User) {\n        switch (user.avatarOption || 'gravatar') {\n            case 'gravatar':\n                const gravatarDefault = user.gravatarDefault || 'identicon';\n                const gravatarHash = user.gravatarHash;\n                if (gravatarHash) {\n                    return 'https://www.gravatar.com/avatar/' + gravatarHash + '?s=60&amp;r=pg&d=' + gravatarDefault;\n                } else {\n                    return noUserPic;\n                }\n            case 'silhouette':\n            case 'mysteryman':\n            default:\n                return noUserPic;\n        }\n    }\n\n    render() {\n        const avatarUrl = this.getAvatarUrl(this.props.user)\n        return (\n            <img\n                src={avatarUrl}\n                style={{ width: this.props.size }}\n            />\n        )\n    }\n\n}\n\nexport default Avatar","export type Metadata = {}\n\nexport type RawObjectInfo = [\n    number, // objid - object id\n    string, // name - object name\n    string, // type - object type\n    string, // save_date - iso8601 timestamp when last saved\n    number, // ver - object version\n    string, // saved_by - username who saved it last\n    number, // wsid - workspace id\n    string, // workspace - workspace name,\n    string, // chsum - checksum of the object\n    number, // size - size of the object (bytes)\n    Metadata   // meta - string to string object of stuff\n]\n\nexport type RawWorkspaceInfo = [\n    number, // id - workspace id\n    string, // workspace - workspace name\n    string, // owner - username who owns it\n    string, // moddate - iso8601 timestamp when last modified\n    number, // max_objid - last object id assigned to object in workspace\n    string, // user_permission - permission of user who made reqeust wrt workspace\n    string, // globalread - int bool whether this workspace is shared globally\n    string, // lockstat - status of the workspace lock\n    Metadata // metadata\n]\n\nexport interface WorkspaceInfo {\n    id: number\n    name: string\n    owner: string\n    modifiedAt: Date\n    objectCount: number\n    userPermission: string\n    globalReadPermission: boolean\n    lockStatus: string\n    metadata: Metadata\n}\n\nexport interface ObjectInfo {\n    id: number\n    name: string\n    type: {\n        module: string\n        name: string\n        majorVersion: number\n        minorVersion: number\n        id: string\n    }\n    version: number\n    savedAt: Date\n    savedBy: string\n    workspaceId: number\n    workspaceName: string\n    checksum: string\n    size: number\n    ref: string\n    metadata: Metadata\n}\n\nfunction iso8601ToDate(dateString: string) {\n    const isoRE = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)([\\+\\-])(\\d\\d)(:?[\\:]*)(\\d\\d)/;\n    const dateParts = isoRE.exec(dateString);\n    if (!dateParts) {\n        throw new TypeError('Invalid Date Format for ' + dateString);\n    }\n    // This is why we do this -- JS insists on the colon in the tz offset.\n    const offset = dateParts[7] + dateParts[8] + ':' + dateParts[10];\n    const newDateString = dateParts[1] + '-' + dateParts[2] + '-' + dateParts[3] + 'T' + dateParts[4] + ':' + dateParts[5] + ':' + dateParts[6] + offset;\n    return new Date(newDateString);\n}\n\nexport function workspaceInfoToObject(wsInfo: RawWorkspaceInfo): WorkspaceInfo {\n    return {\n        id: wsInfo[0],\n        name: wsInfo[1],\n        owner: wsInfo[2],\n        modifiedAt: iso8601ToDate(wsInfo[3]),\n        objectCount: wsInfo[4],\n        userPermission: wsInfo[5],\n        globalReadPermission: wsInfo[6] === 'r' ? true : false,\n        lockStatus: wsInfo[7],\n        metadata: wsInfo[8]\n    }\n}\n\nexport function objectInfoToObject(data: RawObjectInfo): ObjectInfo {\n    const type = data[2].split(/[-.]/)\n\n    return {\n        id: data[0],\n        name: data[1],\n        // type: data[2],\n        type: {\n            id: data[2],\n            module: type[0],\n            name: type[1],\n            majorVersion: parseInt(type[2], 10),\n            minorVersion: parseInt(type[3], 10)\n        },\n        savedAt: iso8601ToDate(data[3]),\n        version: data[4],\n        savedBy: data[5],\n        workspaceId: data[6],\n        workspaceName: data[7],\n        checksum: data[8],\n        size: data[9],\n        metadata: data[10],\n        ref: data[6] + '/' + data[0] + '/' + data[4]\n    }\n}\n\n","import { string } from \"prop-types\";\n\nexport interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONRPCError {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport interface MethodSuccessResult<T> {\n    result: T\n    error: null\n}\n\nexport interface MethodErrorResult {\n    result: null\n    error: JSONRPCError\n}\n\nexport type MethodResponse<T> = MethodSuccessResult<T> | MethodErrorResult\n\nexport interface JSONRPCResponse<T> {\n    version: string\n    id: string\n    result: [T, ...any[]]\n    error: JSONRPCError | null\n}\n\n\nexport class JSONRPCException extends Error {\n    name: string\n    code: number\n    // message: string\n    error: string\n    constructor({ name, code, message, error }: JSONRPCError) {\n        super(message)\n        this.name = name\n        this.code = code\n        this.error = error\n    }\n}\n\nexport class classJSONRPCServerException extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload<T>(method: string, param: T): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse<T>(response: Response): Promise<T> {\n        if (response.status === 200) {\n            const { result: [methodResult] } = await response.json() as JSONRPCResponse<T>\n            return methodResult as T\n        } else if (response.status === 204) {\n            // The SDK has a weird edge case in which a method can specify no\n            // result, which is translated to a 204 response and no content.\n            // IMO it should return a valid json value, like null so we don't\n            // have to work around it.\n            // const result = null\n            // result as unknown as T\n            const result: unknown = undefined\n            return result as T\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                throw new JSONRPCException(error)\n            } else {\n                const text = await response.text()\n                throw new classJSONRPCServerException(text)\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc<Tinput, Toutput>(func: string, param: Tinput): Promise<Toutput> {\n        const headers: Headers = new Headers()\n        headers.set('Content-Type', 'application/json')\n        headers.set('Accept', 'application/json')\n\n        if (this.token) {\n            headers.set('Authorization', this.token)\n        }\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers,\n            body: JSON.stringify(this.makePayload<Tinput>(func, param))\n        })\n        // The response may be a 200 success, a 200 with method error,\n        // an sdk 500 error, an internal 500 server error, \n        // or any other http error code.\n        return this.processResponse<Toutput>(response)\n    }\n}\n\nexport interface AuthorizedServiceClientParams {\n    url: string\n    token: string\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: AuthorizedServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc<Tinput, Toutput>(func: string, param: Tinput): Promise<Toutput> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload<Tinput>(func, param))\n        })\n        return this.processResponse<Toutput>(response)\n    }\n}\n\n","import {\n    AuthorizedServiceClient,\n    AuthorizedServiceClientParams\n} from \"./serviceClientBase\"\n\n\nexport interface ObjectIdentity {\n    workspace?: string\n    wsid?: number\n    name?: string\n    objid?: string\n    ver?: number\n    ref?: string\n}\n\nexport interface WorkspaceIdentity {\n    workspace?: string\n    id?: number\n}\n\nexport interface ObjectSpecification {\n    workspace?: string\n    wsid?: number\n    name?: string\n    objid?: number\n    ver?: number\n    ref?: string\n    obj_path?: Array<ObjectIdentity>\n    obj_ref_path?: Array<string>\n    to_obj_path?: Array<ObjectIdentity>\n    to_obj_ref_path?: Array<string>\n    find_reference_path?: number // bool \n    included?: string\n    strict_maps?: number // bool\n    strict_arrays?: number // bool\n}\n\nexport interface GetObjectInfo3Params {\n    objects: Array<ObjectSpecification>\n    includeMetadata: number // bool\n    ignoreErrors: number // bool\n}\n\nexport type ObjectInfo = [\n    number, // objid\n    string, // object name\n    string, // object type\n    string, // save date timestamp YYYY-MM-DDThh:mm:ssZ\n    number, // object version\n    string, // saved by\n    number, // workspace id\n    string, // workspace name\n    string, // md5 checksum\n    number, // size in bytes\n    Map<string, string> // metadata\n]\n\nexport type WorkspaceInfo = [\n    number, // workspace id\n    string, // workspace name\n    string, // workspace owner (username)\n    string, // modification timestamp (iso 8601)\n    number, // last object id\n    string, // user permission (one char)\n    string, // global permission (one char)\n    string, // lock status\n    Map<string, string>  // metadata\n]\n\nexport interface GetObjectInfo3Result {\n    infos: Array<ObjectInfo>\n    paths: Array<Array<string>>\n}\n\nexport interface GetWorkspaceInfoParams extends WorkspaceIdentity {\n}\n\nexport interface GetWorkspaceInfoResult {\n\n}\n\nexport interface WorkspaceClientParams extends AuthorizedServiceClientParams {\n}\n\n\nexport class WorkspaceClient extends AuthorizedServiceClient {\n    static module: string = 'Workspace'\n\n    constructor(params: WorkspaceClientParams) {\n        super(params)\n    }\n\n    // TODO: should be void not null\n    async getVersion(): Promise<string> {\n        return this.callFunc<null, string>('ver', null)\n    }\n\n    async getObjectInfo3(params: GetObjectInfo3Params): Promise<GetObjectInfo3Result> {\n        const objectInfo = this.callFunc<GetObjectInfo3Params, GetObjectInfo3Result>('get_object_info3', params)\n        return objectInfo\n    }\n\n    async getWorkspaceInfo(params: GetWorkspaceInfoParams): Promise<WorkspaceInfo> {\n        return this.callFunc<GetWorkspaceInfoParams, WorkspaceInfo>('get_workspace_info', params)\n    }\n\n}","import { AuthorizedServiceClient, ServiceClientParams } from './serviceClient'\n\n// types from module\n\nexport interface Service {\n    module_name: string\n    version: string | null\n}\n\nexport interface ServiceStatus {\n    module_name: string\n    version: string\n    git_commit_hash: string\n    release_tags: Array<string>\n    hash: string\n    url: string\n    up: number // aka boolean\n    status: string\n    health: string\n}\n\n// impl\n\nexport interface ServiceWizardClientParams extends ServiceClientParams {\n\n}\n\nexport interface GetServiceStatusParams extends Service { }\n\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\nexport class ServiceWizardClient extends AuthorizedServiceClient {\n\n    static module: string = 'ServiceWizard'\n\n    constructor(params: ServiceWizardClientParams) {\n        super(params)\n    }\n\n    async getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        const result = await this.callFunc('get_service_status', params)\n\n        if (result.result &&\n            result.result.length > 0) {\n            const theResult = result.result[0]\n            if (!theResult) {\n                throw new Error('Crazy at it seems, no result')\n            }\n            return theResult as GetServiceStatusResult\n        } else {\n            throw new Error('Crazy at it seems, no result')\n        }\n    }\n\n}","export interface GenericClientParams {\n    url: string\n    module: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONRPCError {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport interface MethodSuccessResult<T> {\n    result: T\n    error: null\n}\n\nexport interface MethodErrorResult {\n    result: null\n    error: JSONRPCError\n}\n\nexport type MethodResponse<T> = MethodSuccessResult<T> | MethodErrorResult\n\nexport type JSONRPCResponse<T> =\n    // success\n    [T, null, null] |\n    // success, but void result\n    [null, null, null] |\n    // error returned by method, not sdk wrapper\n    [null, MethodErrorResult, null] |\n    // error returned by sdk wrapper (caught exception)\n    [null, null, JSONRPCError]\n\nexport class JSONRPCException extends Error {\n    name: string\n    code: number\n    // message: string\n    error: string\n    constructor({ name, code, message, error }: JSONRPCError) {\n        super(message)\n        this.name = name\n        this.code = code\n        this.error = error\n    }\n}\n\nexport class classJSONRPCServerException extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n\nexport class GenericClient {\n    url: string;\n    token: string | null\n    module: string\n\n    constructor({ url, token, module }: GenericClientParams) {\n        this.url = url\n        this.token = token || null\n        this.module = module\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: param\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse<T>(response: Response): Promise<T> {\n        if (response.status === 200) {\n            const { result } = await response.json()\n            return result as T\n        } else if (response.status === 204) {\n            // The SDK has a weird edge case in which a method can specify no\n            // result, which is translated to a 204 response and no content.\n            // IMO it should return a valid json value, like null so we don't\n            // have to work around it.\n            // const result = null\n            // result as unknown as T\n            const result: unknown = null\n            return result as T\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                throw new JSONRPCException(error)\n            } else {\n                const text = await response.text()\n                throw new classJSONRPCServerException(text)\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc<T>(func: string, param: any): Promise<T> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        // The response may be a 200 success, a 200 with method error,\n        // an sdk 500 error, an internal 500 server error, \n        // or any other http error code.\n        return this.processResponse<T>(response)\n    }\n}\n\nexport interface AuthorizedGenericClientParams {\n    url: string\n    module: string\n    token: string\n}\n\nexport class AuthorizedGenericClient extends GenericClient {\n    token: string;\n\n    constructor(params: AuthorizedGenericClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc<T>(func: string, param: any): Promise<T> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        return this.processResponse(response)\n    }\n}\n\n","import Bluebird from 'bluebird'\nimport { AuthorizedServiceClient } from './serviceClient'\n\nimport { ServiceWizardClient } from './serviceWizard'\nimport { GenericClient, AuthorizedGenericClient } from './genericClient'\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Bluebird<T>\n\nexport interface CacheParams {\n    itemLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n}\n\nexport interface CacheItem<T> {\n    id: string\n    value: T | null\n    createdAt: number\n    fetcher: () => Bluebird<T>\n    reserved: boolean\n}\n\nexport class Cache<T> {\n\n    cache: Map<string, CacheItem<T>>\n    cacheLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n    isMonitoring: boolean\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>()\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        window.setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item)\n                    cacheRenewed = true\n                }\n            });\n            this.cache = newCache\n            this.isMonitoring = false\n            if (cacheRenewed) {\n                this.runMonitor()\n            }\n        }, this.monitoringFrequency)\n    }\n\n    isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return (elapsed > this.cacheLifetime);\n    }\n\n    isReserved(cacheItem: any) {\n        return cacheItem.reserved;\n    }\n\n    getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null\n        }\n        const cached = this.cache.get(id)\n        if (this.isExpired(cached)) {\n            this.cache.delete(id)\n            return;\n        }\n        return cached;\n    }\n\n    reserveWaiter(item: CacheItem<T>): Bluebird<CacheItem<T>> {\n        return new Bluebird<CacheItem<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const waiting = true;\n\n            const waiter = () => {\n                if (!waiting) {\n                    return;\n                }\n                window.setTimeout(() => {\n                    if (this.cache.has(item.id)) {\n                        // If on a wait-loop cycle we discover that the\n                        // cache item has been deleted, we volunteer\n                        // to attempt to fetch it ourselves.\n                        // The only case now for this is a cancellation\n                        // of the first request to any dynamic service,\n                        // which may cancel the initial service wizard\n                        // call rather than the service call.\n                        return this.reserveAndFetch({\n                            id: item.id,\n                            fetcher: item.fetcher\n                        })\n                            .then(() => {\n                                // resolve(result);\n                                // we resolve with the cache item just\n                                // as if we had waited for it.\n                                resolve(this.cache.get(item.id))\n                            })\n                            .catch((err: Error) => {\n                                reject(err);\n                            });\n                    }\n                    if (!item.reserved) {\n                        resolve(item);\n                    } else {\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed > this.waiterTimeout) {\n                            this.cache.delete(item.id)\n                            reject(new Error(\n                                'Timed-out waiting for cache item to become available; timeout '\n                                + this.waiterTimeout + ', waited ' + elapsed));\n                        } else {\n                            waiter();\n                        }\n                    }\n                }, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    reserveAndFetch({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        // now, reserve it.\n        this.reserveItem(id, fetcher)\n\n        // and then fetch it.\n        const fetchPromise = fetcher()\n            .then((result: any) => {\n                this.setItem(id, result, fetcher)\n                return result\n            })\n            .finally(() => {\n                // If the fetch was cancelled, we need to remove\n                // the reserved item. This should signal any queued waiters\n                // to spawn their own fetch.\n                if (fetchPromise.isCancelled()) {\n                    this.cache.get(id)\n                }\n            });\n        return fetchPromise;\n    }\n\n    getItemWithWait({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        const cached = this.cache.get(id)\n        if (cached) {\n            if (this.isExpired(cached)) {\n                this.cache.delete(id)\n            } else if (this.isReserved(cached)) {\n                return this.reserveWaiter(cached)\n                    .then((cached) => {\n                        return cached.value;\n                    });\n            } else {\n                return Bluebird.resolve(cached.value)\n            }\n        }\n\n        return this.reserveAndFetch({ id, fetcher });\n    }\n\n    reserveItem(id: string, fetcher: () => Bluebird<T>) {\n        this.cache.set(id, {\n            id: id,\n            createdAt: new Date().getTime(),\n            reserved: true,\n            value: null,\n            fetcher: fetcher\n        });\n    }\n\n    setItem(id: string, value: T, fetcher: () => Bluebird<T>) {\n        if (this.cache.has(id)) {\n            const item = this.cache.get(id)\n            if (item && item.reserved) {\n                item.reserved = false\n                item.value = value\n                item.fetcher = fetcher\n            } else {\n                // overwriting? should we allow this?\n                this.cache.set(id, {\n                    id: id,\n                    createdAt: new Date().getTime(),\n                    fetcher: fetcher,\n                    reserved: false,\n                    value: value\n                })\n            }\n        } else {\n            this.cache.set(id, {\n                id: id,\n                createdAt: new Date().getTime(),\n                fetcher: fetcher,\n                reserved: false,\n                value: value\n            })\n        }\n        this.runMonitor();\n    }\n}\nvar moduleCache = new Cache<any>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n})\n\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams {\n    token: string\n    url: string\n    version?: string\n    timeout?: number\n    rpcContext?: any\n}\n\nexport class DynamicServiceClient {\n    token: string\n    timeout: number\n    rpcContext: any\n    url: string\n    version: string | null\n\n    static module: string\n\n    constructor({ token, url, version, timeout, rpcContext }: DynamicServiceClientParams) {\n        // Establish an auth object which has properties token and user_id.\n        this.token = token;\n        this.timeout = timeout || 10000;\n        this.rpcContext = rpcContext || null;\n\n        if (!url) {\n            throw new Error('The service discovery url was not provided');\n        }\n        this.url = url;\n\n        this.version = version || null;\n        if (version === 'auto') {\n            this.version = null;\n        }\n    }\n\n    options() {\n        return {\n            timeout: this.timeout,\n            authorization: this.token,\n            rpcContext: this.rpcContext\n        };\n    }\n\n    getModule() {\n        return (<typeof DynamicServiceClient>this.constructor).module\n    }\n\n    moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.getModule() + ':auto';\n        } else {\n            moduleId = this.getModule() + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    getCached(fetcher: () => Bluebird<any>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    lookupModule() {\n        return this.getCached((): Bluebird<any> => {\n            const client = new ServiceWizardClient({\n                url: this.url,\n                token: this.token\n            })\n            return Bluebird.resolve(\n                client.getServiceStatus({\n                    module_name: this.getModule(),\n                    version: this.version\n                })\n            )\n        })\n    }\n\n    callFunc<T>(funcName: string, params: any) {\n        return this.lookupModule()\n            .then((serviceStatus) => {\n                const client = new AuthorizedGenericClient({\n                    module: serviceStatus.module_name,\n                    url: serviceStatus.url,\n                    token: this.token\n                })\n                return Bluebird.resolve(\n                    client.callFunc<T>(funcName, params)\n                )\n            })\n            .catch((err) => {\n                console.error('ERROR: ' + err.name + \" = \" + err.message, err)\n                throw err\n            })\n    }\n}\n","// import { AuthorizedServiceClient, ServiceClientParams, JSONPayload } from './serviceClient'\n\nimport { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nimport { RawObjectInfo, RawWorkspaceInfo, WorkspaceInfo, ObjectInfo, workspaceInfoToObject, objectInfoToObject } from './workspaceUtils'\n\nexport interface NarrativeServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface ListNarrativesParams {\n    type: string\n}\n\ntype Metadata = {}\n\n/* Information about an object, including user provided metadata.\n\n       obj_id objid - the numerical id of the object.\n       obj_name name - the name of the object.\n       type_string type - the type of the object.\n       timestamp save_date - the save date of the object.\n       obj_ver ver - the version of the object.\n       username saved_by - the user that saved or copied the object.\n       ws_id wsid - the workspace containing the object.\n       ws_name workspace - the workspace containing the object.\n       string chsum - the md5 checksum of the object.\n       int size - the size of the object in bytes.\n       usermeta meta - arbitrary user-supplied metadata about\n           the object.\n   */\n\nexport interface ListNarrativesResult {\n    narratives: Array<{\n        ws: RawWorkspaceInfo\n        nar: RawObjectInfo\n    }>\n}\n\nexport class NarrativeServiceClient extends DynamicServiceClient {\n    static module: string = 'NarrativeService'\n\n    constructor(params: NarrativeServiceClientParams) {\n        super(params)\n    }\n\n    async listNarratives(type: string): Promise<ListNarrativesResult> {\n        // note usage of unknown below -- Bluebird and native Promise!\n        const [result] = await this.callFunc('list_narratives', [{\n            type: type\n        }])\n        return result\n    }\n}","\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport * as workspaceApi from '../apis/workspaceUtils'\nimport * as userModel from './user'\nimport { WorkspaceClient } from '../apis/workspace'\nimport { NarrativeServiceClient } from '../apis/narrativeService'\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport type NarrativeID = number\n\nexport type WorkspaceID = number\nexport type ObjectID = number\n\nexport enum NarrativeAccess {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport interface NarrativeBase {\n    workspaceId: WorkspaceID,\n    access: NarrativeAccess\n}\n\nexport interface InaccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.NONE\n}\n\nexport interface AccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n    isPublic: boolean\n    objectId: ObjectID\n    title: string\n    // description?: string\n    owner: userModel.Username\n    // creator: userModel.Username\n    // createdAt: Date\n    lastSavedAt: Date\n    lastSavedBy: userModel.Username\n}\n\nexport type Narrative = AccessibleNarrative | InaccessibleNarrative\n\n// export interface OrganizationNarrativex {\n//     workspaceId: WorkspaceID\n//     objectId: ObjectID\n//     title: string\n//     status: NarrativeState\n//     // inOrganization: boolean\n//     // createdAt: Date\n//     owner: userModel.Username\n//     modifiedAt: Date\n// }\n\nexport interface OrganizationNarrative {\n    status: NarrativeState\n    narrative: AccessibleNarrative\n}\n\nexport interface NarrativeWorkspaceInfo extends workspaceApi.WorkspaceInfo {\n    metadata: {\n        narrative_nice_name: string\n        narrative: string\n        is_temporary: string\n    }\n}\n// export interface GetOwnNarrativesResult {\n//     workspaceInfo: WorkspaceInfo\n//     objectInfo: ObjectInfo\n// }\n\nexport enum Sort {\n    TITLE = 'TITLE',\n    LAST_SAVED = 'LAST_SAVED'\n}\n\ninterface NarrativeModelParams {\n    workspaceServiceURL: string\n    serviceWizardURL: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    username: string\n    token: string\n}\n\nexport class NarrativeModel {\n\n    params: NarrativeModelParams\n\n    constructor(params: NarrativeModelParams) {\n        this.params = params\n    }\n\n    // Narratives\n\n    async getOwnNarratives(organizationId: string): Promise<Array<OrganizationNarrative>> {\n        const narrativeServiceClient = new NarrativeServiceClient({\n            url: this.params.serviceWizardURL,\n            token: this.params.token,\n            timeout: 10000,\n        })\n\n        const groupsClient = new orgModel.OrganizationModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL,\n            userProfileServiceURL: this.params.userProfileServiceURL\n        })\n\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const [narrativesResult, organization, pendingRequests] = await Promise.all([\n            narrativeServiceClient.listNarratives('mine'),\n            groupsClient.getOrg(organizationId),\n            requestClient.getPendingRequestsForOrg(organizationId)\n        ])\n\n        if (organization.kind === orgModel.OrganizationKind.INACCESSIBLE_PRIVATE) {\n            throw new Error('Cannot get own narratives for private inaccessible organization')\n        }\n\n        const workspacesInOrg = organization.narratives.map((narrative) => {\n            return narrative.workspaceId\n        })\n\n        return narrativesResult.narratives\n            .map((nar) => {\n                return {\n                    workspaceInfo: <unknown>workspaceApi.workspaceInfoToObject(nar.ws) as NarrativeWorkspaceInfo,\n                    objectInfo: workspaceApi.objectInfoToObject(nar.nar)\n                }\n            })\n            .filter((nar) => {\n                return (nar.workspaceInfo.metadata.is_temporary === 'false')\n            })\n            .map((narrative) => {\n                let status: NarrativeState\n\n                if (workspacesInOrg.indexOf(narrative.workspaceInfo.id) !== -1) {\n                    status = NarrativeState.ASSOCIATED\n                } else if (pendingRequests.find((request) => {\n                    // TODO: these requests should have already been converted to \n                    // model-friendly requests (typed!)\n                    return (request.resourceType === requestModel.RequestResourceType.WORKSPACE &&\n                        request.narrativeId === String(narrative.workspaceInfo.id))\n                })) {\n                    status = NarrativeState.REQUESTED\n                } else {\n                    status = NarrativeState.NONE\n                }\n                return {\n                    status: status,\n                    narrative: {\n                        access: NarrativeAccess.OWNER,\n                        isPublic: narrative.workspaceInfo.globalReadPermission,\n                        workspaceId: narrative.workspaceInfo.id,\n                        objectId: narrative.objectInfo.id,\n                        title: narrative.workspaceInfo.metadata.narrative_nice_name,\n                        owner: narrative.workspaceInfo.owner,\n                        lastSavedAt: narrative.objectInfo.savedAt,\n                        lastSavedBy: narrative.objectInfo.savedBy\n                    } as AccessibleNarrative\n\n                }\n            })\n            .sort((a, b) => {\n                return (a.narrative.title.localeCompare(b.narrative.title))\n            })\n    }\n\n    // async workspaceToNarrative(workspaceId: WorkspaceID): Promise<orgModel.NarrativeResource | null> {\n    //     const workspaceClient = new AuthorizedGenericClient({\n    //         module: 'Workspace',\n    //         url: this.params.workspaceServiceURL,\n    //         token: this.params.token\n    //     })\n    //     try {\n    //         const [[[rawObjectInfo], rawObjectInfoError], [[rawWorkspaceInfo], rawWorkspaceInfoError]] = await Promise.all([\n    //             workspaceClient.callFunc('get_object_info3', [{\n    //                 objects: [{\n    //                     wsid: workspaceId,\n    //                     // TODO: fix this!!\n    //                     objid: 1\n    //                 }],\n    //                 includeMetadata: 1,\n    //                 ignoreErrors: 0\n    //             }]),\n    //             workspaceClient.callFunc('get_workspace_info', [{\n    //                 id: workspaceId\n    //             }])\n    //         ])\n\n    //         if (rawObjectInfoError || rawWorkspaceInfoError) {\n    //             // console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n    //             return null\n    //         }\n\n    //         const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n    //         return {\n    //             workspaceId: workspaceInfo.id,\n    //             title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n    //             permission: orgModel.userPermissionToWorkspacePermission(workspaceInfo.userPermission, workspaceInfo.owner === this.params.username),\n    //             isPublic: workspaceInfo.globalReadPermission\n    //         }\n\n    //     } catch (ex) {\n    //         // assume it is an inaccessible workspace\n    //         // console.warn('narrative not accessible', ex)\n    //         return null\n    //     }\n    // }\n\n    getSorter(sort: Sort) {\n        switch (sort) {\n            case Sort.TITLE:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return a.narrative.title.localeCompare(b.narrative.title)\n                }\n            case Sort.LAST_SAVED:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return b.narrative.lastSavedAt.getTime() - a.narrative.lastSavedAt.getTime()\n                }\n            default:\n                throw new Error('invalid sort spec')\n        }\n    }\n\n    // sortNarratives(narratives: Array<AccessibleNarrative>, sort: Sort): Array<AccessibleNarrative> {\n    //     let sorter = this.getSorter(sort)\n\n    //     return narratives.sort(sorter)\n    // }\n\n    sortOrganizationNarratives(narratives: Array<OrganizationNarrative>, sort: Sort): Array<OrganizationNarrative> {\n        let sorter = this.getSorter(sort)\n\n        return narratives.sort(sorter).slice(0)\n    }\n\n    /*\n    getNarrative fetches the requested narrative and returns a Narrative object if found \n    and null otherwise. Note that this ignores the narrative state vis-a-vis any organization.\n    It also caches narratives.\n    */\n    async getNarrative(workspaceId: WorkspaceID): Promise<Narrative> {\n        const wsClient = new WorkspaceClient({\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n\n        try {\n            const rawWorkspaceInfo = await wsClient.getWorkspaceInfo({\n                id: workspaceId\n            })\n\n            // if (rawWorkspaceInfoError) {\n            //     return {\n            //         workspaceId: workspaceId,\n            //         access: NarrativeAccess.NONE\n            //     }\n            // }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n            const narrativeId = workspaceInfo.metadata.narrative\n            if (!narrativeId) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n            const objectId = parseInt(narrativeId, 10)\n\n            let rawObjectInfo\n            try {\n                rawObjectInfo = await wsClient.getObjectInfo3({\n                    objects: [{\n                        wsid: workspaceId,\n                        objid: objectId\n                    }],\n                    includeMetadata: 1,\n                    ignoreErrors: 0\n                })\n            } catch (ex) {\n                // TODO: actually detect the error condition?\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const objectInfo: workspaceApi.ObjectInfo = workspaceApi.objectInfoToObject(rawObjectInfo.infos[0])\n\n            let access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n            switch (workspaceInfo.userPermission) {\n                case 'n':\n                    if (workspaceInfo.globalReadPermission) {\n                        access = NarrativeAccess.VIEW\n                        break\n                    } else {\n                        throw new Error('Cannot have no access and no global read permission!')\n                    }\n                case 'r':\n                    access = NarrativeAccess.VIEW\n                    break\n                case 'w':\n                    access = NarrativeAccess.EDIT\n                    break\n                case 'a':\n                    if (workspaceInfo.owner === this.params.username) {\n                        access = NarrativeAccess.OWNER\n                    } else {\n                        access = NarrativeAccess.ADMIN\n                    }\n                    break\n                default:\n                    throw new Error('Unknown workspace permission: ' + workspaceInfo.userPermission)\n            }\n\n            return {\n                workspaceId: workspaceInfo.id,\n                access: access,\n                isPublic: workspaceInfo.globalReadPermission,\n                objectId: objectInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                owner: workspaceInfo.owner,\n                lastSavedAt: objectInfo.savedAt,\n                lastSavedBy: objectInfo.savedBy\n            }\n        } catch (ex) {\n            console.error('Error fetching narrative!', ex)\n            throw ex\n        }\n    }\n}\n","import * as narrativeMethodStoreAPI from '../apis/narrativeMethodStore'\nimport * as userModel from './user'\n\nexport type AppID = string\n\nexport type KBaseDataType = string // for now!\n\nexport interface AppBriefInfo {\n    id: string\n    moduleName: string\n    gitCommitHash: string\n    name: string\n    version: string\n    subtitle: string\n    tooltip: string\n    iconURL: string | null\n    categories: Array<string>\n    loadingError: string\n    authors: Array<userModel.Username>\n    inputTypes: Array<KBaseDataType>\n    outputTypes: Array<KBaseDataType>\n    appType: AppType\n}\n\nexport enum AppType {\n    APP = 'app',\n    VIEWER = 'viewer',\n    EDITOR = 'editor',\n    ADVANCED_VIEWER = 'advanced_viewer'\n}\n\nexport type EMail = string\n\nexport interface Suggestions {\n    relatedMethods: Array<AppID>\n    nextMethods: Array<AppID>\n    relatedApps: Array<AppID>\n    nextApps: Array<AppID>\n}\n\nexport type Url = string\n\nexport interface Icon {\n    url: Url | null\n}\n\nexport interface ScreenShot {\n    url: Url | null\n}\n\nexport interface Publication {\n    pubMedID: string\n    displayText: string\n    link: Url\n}\n\nexport interface AppFullInfo {\n    id: string\n    moduleName: string\n    gitCommitHash: string\n    name: string\n    version: string\n    authors: Array<userModel.Username>\n    kbaseContributors: Array<userModel.Username>\n    contact: EMail\n\n    subtitle: string\n    tooltip: string\n    description: string\n    technicalDescription: string\n\n    appType: AppType\n\n    suggestions: Suggestions\n    icon: Icon\n\n    categories: Array<string>\n    screenshots: Array<ScreenShot>\n    publications: Array<Publication>\n\n}\n\nconst convertIcon = (icon: narrativeMethodStoreAPI.Icon): Icon => {\n    if (!icon) {\n        return {\n            url: null\n        }\n    }\n    return icon\n}\n\nconst convertAppType = (app_type: string): AppType => {\n    switch (app_type) {\n        case 'app':\n            return AppType.APP\n        case 'editor':\n            return AppType.EDITOR\n        case 'viewer':\n            return AppType.VIEWER\n        case 'advanced_viewer':\n            return AppType.ADVANCED_VIEWER\n        default:\n            throw new Error('Invalid app type: ' + app_type)\n    }\n}\n\nconst convertSuggestions = (suggestions: narrativeMethodStoreAPI.Suggestions): Suggestions => {\n    return {\n        relatedMethods: suggestions.related_methods,\n        nextMethods: suggestions.next_methods,\n        relatedApps: suggestions.related_apps,\n        nextApps: suggestions.next_apps\n    }\n}\n\nconst convertPublications = (publications: Array<narrativeMethodStoreAPI.Publication>): Array<Publication> => {\n    return publications.map((publication) => {\n        return {\n            pubMedID: publication.pmid,\n            displayText: publication.display_text,\n            link: publication.link\n        }\n    })\n}\n\nexport function methodFullInfoToApp(from: narrativeMethodStoreAPI.MethodFullInfo): AppFullInfo {\n\n    const {\n        id, module_name, git_commit_hash, name, ver,\n        authors, kb_contributors, contact,\n        subtitle, tooltip, description, technical_description, app_type,\n        suggestions, icon, categories, screenshots, publications\n    } = from\n\n\n\n\n    return {\n        id, moduleName: module_name, gitCommitHash: git_commit_hash, name, version: ver,\n        authors, kbaseContributors: kb_contributors, contact,\n        subtitle, tooltip, description, technicalDescription: technical_description,\n        appType: convertAppType(app_type),\n        suggestions: convertSuggestions(suggestions), icon: convertIcon(icon),\n        categories, screenshots, publications: convertPublications(publications)\n    }\n}\n\nexport function methodBriefInfoToAppBriefInfo(from: narrativeMethodStoreAPI.MethodBriefInfo): AppBriefInfo {\n    const {\n        id, module_name, git_commit_hash, name, ver, subtitle, tooltip,\n        icon, categories, loading_error, authors, input_types, output_types, app_type\n    } = from\n\n    let iconURL\n    if (!icon) {\n        iconURL = null\n    } else {\n        iconURL = icon.url\n    }\n\n    return {\n        id, moduleName: module_name, gitCommitHash: git_commit_hash, name, version: ver, subtitle,\n        tooltip, iconURL, categories, loadingError: loading_error,\n        authors, inputTypes: input_types, outputTypes: output_types, appType: convertAppType(app_type)\n    }\n}\n\nexport interface AppClientParams {\n    token: string,\n    narrativeMethodStoreURL: string\n}\n\nexport class AppClient {\n    token: string\n    narrativeMethodStoreURL: string\n    constructor(params: AppClientParams) {\n        this.token = params.token\n        this.narrativeMethodStoreURL = params.narrativeMethodStoreURL\n    }\n\n    async getApp(appId: AppID): Promise<AppFullInfo> {\n        const client = new narrativeMethodStoreAPI.NarrativeMethodStoreClient({\n            url: this.narrativeMethodStoreURL,\n            token: this.token\n        })\n\n        const [methodInfo] = await client.get_method_full_info({\n            ids: [appId],\n            tag: 'release'\n        })\n\n        return methodFullInfoToApp(methodInfo)\n    }\n\n\n}","import {\n    AuthorizedServiceClientParams,\n    AuthorizedServiceClient\n} from './serviceClientBase'\n\nexport interface Icon {\n    url: string\n}\n\nexport type Username = string\n\nexport type EMail = string\n\nexport interface Suggestions {\n    related_methods: Array<string>\n    next_methods: Array<string>\n    related_apps: Array<string>\n    next_apps: Array<string>\n}\n\nexport type Url = string\n\nexport interface ScreenShot {\n    url: Url\n}\n\nexport interface Publication {\n    pmid: string\n    display_text: string\n    link: Url\n}\n\nexport interface MethodBriefInfo {\n    id: string\n    module_name: string\n    git_commit_hash: string\n    name: string\n    ver: string\n    subtitle: string\n    tooltip: string\n    icon: Icon\n    categories: Array<string>\n    loading_error: string\n    authors: Array<Username>\n    input_types: Array<string>\n    output_types: Array<string>\n    app_type: string\n}\n\nexport interface MethodFullInfo {\n    id: string\n    module_name: string\n    git_commit_hash: string\n    name: string\n    ver: string\n    authors: Array<Username>\n    kb_contributors: Array<Username>\n    contact: EMail\n\n    subtitle: string\n    tooltip: string\n    description: string\n    technical_description: string\n    app_type: string\n\n    suggestions: Suggestions\n\n    icon: Icon\n    categories: Array<string>\n    screenshots: Array<ScreenShot>\n    publications: Array<Publication>\n}\n\n// Method Params\n\nexport interface ListMethodsParams {\n    limit?: number\n    offset?: number\n    tag?: string\n}\n\nexport type ListMethodResult = Array<MethodBriefInfo>\n\nexport interface GetMethodFullInfoParams {\n    ids: Array<string>\n    tag?: string\n}\n\nexport type GetMethodFullInfoResult = Array<MethodFullInfo>\n\n// Client\n\nexport interface NarrativeMethodStoreClientParams extends AuthorizedServiceClientParams {\n}\n\n\nexport class NarrativeMethodStoreClient extends AuthorizedServiceClient {\n    static module: string = 'NarrativeMethodStore'\n\n    constructor(params: NarrativeMethodStoreClientParams) {\n        super(params)\n    }\n\n    async version(): Promise<string> {\n        return await this.callFunc<undefined, string>('version', undefined)\n    }\n\n    async list_methods(params: ListMethodsParams): Promise<ListMethodResult> {\n        return await this.callFunc<ListMethodsParams, ListMethodResult>('list_methods', params)\n    }\n\n    async get_method_full_info(params: GetMethodFullInfoParams): Promise<GetMethodFullInfoResult> {\n        return await this.callFunc<GetMethodFullInfoParams, GetMethodFullInfoResult>('get_method_full_info', params)\n    }\n}","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as userModel from '../../data/models/user'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { AppError, StoreState } from '../../types'\nimport * as appModel from '../../data/models/apps'\nimport { AnError, makeError } from '../../lib/error';\n\n\nexport interface EntityAction extends Action {\n}\n\nexport interface UserLoader extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER,\n    userId: userModel.Username\n}\n\nexport interface UserLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_START\n}\n\nexport interface UserLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n    user: userModel.User\n}\n\nexport interface UserLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function userLoaderStart(): UserLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_START\n    }\n}\n\nexport function userLoaderSuccess(user: userModel.User): UserLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n        user: user\n    }\n}\n\nexport function userLoaderError(error: AppError): UserLoaderError {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function userLoader(userId: userModel.Username) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await model.getUser(userId)\n            dispatch(userLoaderSuccess(user))\n        } catch (ex) {\n            dispatch(userLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport interface OrganizationLoader extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface OrganizationLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n}\n\nexport interface OrganizationLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n}\n\nexport interface OrganizationLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function organizationLoaderStart(): OrganizationLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n    }\n}\n\nexport function organizationLoaderSuccess(organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization): OrganizationLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function organizationLoaderError(error: AppError): OrganizationLoaderError {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function organizationLoader(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(organizationLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const organization = await model.getOrg(organizationId)\n            dispatch(organizationLoaderSuccess(organization))\n        } catch (ex) {\n            dispatch(organizationLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Narratives\n\nexport interface LoadNarrative {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD\n}\n\ninterface LoadNarrativeStart {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n}\n\nexport interface LoadNarrativeSuccess {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS\n    narrative: narrativeModel.Narrative\n}\n\ninterface LoadNarrativeError {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadNarrative(workspaceId: narrativeModel.WorkspaceID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(<LoadNarrativeStart>{\n            type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            workspaceServiceURL: config.services.Workspace.url,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const narrative = await narrativeClient.getNarrative(workspaceId)\n            dispatch(<LoadNarrativeSuccess>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS,\n                narrative: narrative\n            })\n        } catch (ex) {\n            dispatch(<LoadNarrativeError>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'invalid state',\n                    message: 'Cannot access a Narrative for an inaccessible Organization'\n                }))\n                return\n            }\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// App\n\nexport interface LoadApp {\n    type: ActionFlag.ENTITY_LOAD_APP\n    appId: appModel.AppID\n}\n\nexport interface LoadAppStart {\n    type: ActionFlag.ENTITY_LOAD_APP_START\n}\n\n\nexport interface LoadAppSuccess {\n    type: ActionFlag.ENTITY_LOAD_APP_SUCCESS,\n    app: appModel.AppFullInfo\n}\n\nexport interface LoadAppError {\n    type: ActionFlag.ENTITY_LOAD_APP_ERROR,\n    error: AnError\n}\n\nfunction loadAppStart() {\n    return {\n        type: ActionFlag.ENTITY_LOAD_APP_START\n    }\n}\n\nfunction loadAppSuccess(app: appModel.AppFullInfo) {\n    return {\n        type: ActionFlag.ENTITY_LOAD_APP_SUCCESS,\n        app\n    }\n}\n\nfunction loadAppError(error: AnError) {\n    return {\n        type: ActionFlag.ENTITY_LOAD_APP_ERROR,\n        error: error\n    }\n}\n\nexport function loadApp(appId: appModel.AppID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadAppStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const appClient = new appModel.AppClient({\n            token,\n            narrativeMethodStoreURL: config.services.NarrativeMethodStore.url\n        })\n\n        try {\n            const app = await appClient.getApp(appId)\n            dispatch(loadAppSuccess(app))\n        } catch (ex) {\n            dispatch(loadAppError(makeError({\n                code: 'error',\n                message: ex.message\n            })))\n        }\n    }\n}\n\n\n","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Owner from './Owner'\n\ninterface LoaderProps {\n    username: orgModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    showAvatar: boolean\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    times: number\n    constructor(props: LoaderProps) {\n        super(props)\n        this.times = 0\n    }\n\n    render() {\n        this.times += 1;\n        if (this.props.user) {\n            return (\n                <Owner user={this.props.user} avatarSize={this.props.avatarSize} showAvatar={this.props.showAvatar} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading owner...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    username: orgModel.Username\n    avatarSize: number\n    showAvatar: boolean\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","export interface niceElapsedOptions {\n    absoluteAfter?: number,\n    compactDate?: boolean,\n    now?: Date\n}\n\nexport function niceElapsed(someDate: Date, options: niceElapsedOptions = {}) {\n    const nowDate = options.now || new Date()\n\n    const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n    const elapsedAbs = Math.abs(elapsed);\n\n    let measure, measureAbs, unit;\n    const maxDays = options.absoluteAfter || 90\n    if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n        if (elapsedAbs === 0) {\n            return 'now';\n        } else if (elapsedAbs < 60) {\n            measure = elapsed;\n            measureAbs = elapsedAbs;\n            unit = 'second';\n        } else if (elapsedAbs < 60 * 60) {\n            measure = Math.round(elapsed / 60);\n            measureAbs = Math.round(elapsedAbs / 60);\n            unit = 'minute';\n        } else if (elapsedAbs < 60 * 60 * 24) {\n            measure = Math.round(elapsed / 3600);\n            measureAbs = Math.round(elapsedAbs / 3600);\n            unit = 'hour';\n        } else {\n            measure = Math.round(elapsed / (3600 * 24));\n            measureAbs = Math.round(elapsedAbs / (3600 * 24));\n            unit = 'day';\n        }\n\n        if (measureAbs > 1) {\n            unit += 's';\n        }\n\n        let prefix = null;\n        let suffix = null;\n        if (measure < 0) {\n            prefix = 'in';\n        } else if (measure > 0) {\n            suffix = 'ago';\n        }\n\n        return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n    } else {\n        // otherwise show the actual date, with or without the year.\n        if (options.compactDate && nowDate.getFullYear() === someDate.getFullYear()) {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric'\n            }).format(someDate)\n        } else {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            }).format(someDate)\n        }\n    }\n}","import * as React from 'react'\nimport { niceElapsed } from '../lib/time'\nimport { Tooltip } from 'antd';\nimport { updateHomeUrl } from '../redux/actions/addOrg';\n\nexport interface NiceElapsedTimeProps {\n    time: Date\n    showTooltip?: boolean\n    tooltipPrefix?: string\n}\n\ninterface NiceElapsedTimeState {\n    now: Date\n}\n\n// dynamic intervals, based on the range of elapsed time\n// TODO: using intervals we should actually set the interval to \n// trigger based on the datetime to display.\nconst intervals = [\n    // below 1 minute, every 1/2 sec\n    [60 * 1000, 500],\n    // between 1 minute and 1 hour, every 30 seconds\n    [60 * 60 * 1000, 30 * 1000],\n    // between 1 hour and 1 day, every 30 minutes\n    [60 * 60 * 24 * 1000, 60 * 1000 * 30],\n    // over 1 day, once per day\n    [Infinity, 60 * 60 * 24 * 1000]\n]\n\nexport default class NiceElapsedTime extends React.Component<NiceElapsedTimeProps, NiceElapsedTimeState> {\n    nowTimer: number | null\n    interval: number\n    constructor(props: NiceElapsedTimeProps) {\n        super(props)\n\n        this.nowTimer = null\n\n        this.state = {\n            now: new Date()\n        }\n\n        this.interval = this.calcInterval()\n    }\n\n    calcInterval(): number {\n        const elapsed = this.state.now.getTime() - this.props.time.getTime()\n        for (const [upto, interval] of intervals) {\n            if (elapsed < upto) {\n                return interval\n            }\n        }\n        throw new Error('did not find interval')\n    }\n\n    handleInterval() {\n        this.setState({ now: new Date() })\n        const interval = this.calcInterval()\n        if (this.interval !== interval) {\n            this.interval = interval\n            this.startIntervalTimer()\n        }\n    }\n\n    startIntervalTimer() {\n        if (this.nowTimer) {\n            window.clearInterval(this.nowTimer)\n        }\n        this.nowTimer = window.setInterval(() => {\n            this.handleInterval()\n        }, this.interval)\n    }\n\n    componentDidMount() {\n        this.startIntervalTimer()\n    }\n\n    componentWillUnmount() {\n        if (this.nowTimer) {\n            window.clearInterval(this.nowTimer)\n        }\n    }\n\n    render() {\n        if (this.props.showTooltip === false) {\n            return (\n                <span>\n                    {niceElapsed(this.props.time, { absoluteAfter: 30, now: this.state.now })}\n                </span>\n            )\n        }\n\n        const fullDate = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        timeZoneName: 'short'\n                    }).format(this.props.time)\n                }\n            </span>\n        )\n        let tooltip\n        if (this.props.tooltipPrefix) {\n            tooltip = (\n                <span>\n                    {this.props.tooltipPrefix}\n                    {fullDate}\n                </span>\n            )\n        } else {\n            tooltip = fullDate\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(this.props.time, { absoluteAfter: 30, now: this.state.now })}\n            </Tooltip>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from './OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal } from 'antd'\nimport Owner from './entities/OwnerContainer'\nimport { ComponentView } from '../types'\nimport './BriefOrganization.css'\nimport NiceElapsedTime from './NiceElapsedTime';\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganization-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganization-statusRow\">\n                    <div className=\"BriefOrganization-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganization-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganization-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-freshnessRow\">\n                    <div className=\"BriefOrganization-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganization-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganization-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-researchInterests BriefOrganization-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganization-orgOwner BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} key={org.owner.username} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                {this.renderMemberRow(org)}\n                {this.renderNarrativeRow(org)}\n                {this.renderModifiedRow(org)}\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganization-body\">\n                    {/* <div className=\"BriefOrganization-freshnessCol\">\n                        {this.renderFreshness(org)}\n                    </div> */}\n                    <div className=\"BriefOrganization-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganization-infoCol\">\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                <div className=\"BriefOrganization-orgName BriefOrganization-infoTableRow\">\n                                    <NavLink to={`/viewOrganization/${org.id}`}>\n                                        {org.name}\n                                    </NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganization-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react';\nimport './component.css';\nimport { Alert, Button } from 'antd';\nimport * as orgModel from '../../../../data/models/organization/model'\nimport BriefOrganization from '../../../BriefOrganization';\n\n// TODO: need more ergonomic way to resolve the common issue of data types interfering with \n// component types.\n\nexport interface OrganizationsProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    myOrgsUnfiltered: boolean\n}\n\nexport interface OrganizationsState {\n    searchTerms: Array<string>\n}\n\nexport class Organizations extends React.Component<OrganizationsProps, OrganizationsState> {\n    constructor(props: OrganizationsProps) {\n        super(props)\n\n        this.state = {\n            searchTerms: []\n        }\n    }\n\n    renderAdminInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderNoOrgs() {\n        const browseButton = (\n            <Button size=\"small\" type=\"default\">browse</Button>\n        )\n        const createButton = (\n            <Button size=\"small\" type=\"default\">create</Button>\n        )\n        let message\n        if (this.props.myOrgsUnfiltered) {\n            message = (\n                <div>\n                    <p>\n                        You neither own nor are a member of any Organizations, so there is nothing to show you here.\n                    </p>\n                    <p>\n                        You may use the <b>Create Organization</b> button on the upper right to\n                        create your own Organization, or use the <b>All Orgs</b> filter on the right\n                        to browse and search all public Organizations.\n                    </p>\n                    {/* <p>\n                        You can use the filter on the right to {browseButton} through existing public Organizations,\n                        or you may {createButton} your own Organization.\n                    </p> */}\n                </div>\n            )\n        } else {\n            message = (\n                <div>\n                    <p>\n                        Sorry, no Organizations found.\n                    </p>\n                </div>\n            )\n        }\n\n        return (\n            <Alert type=\"warning\"\n                style={{ maxWidth: '50em', margin: '20px auto 0 auto' }}\n                message={message} />\n        )\n    }\n\n    renderOrgs() {\n        if (this.props.organizations.length > 0) {\n            return (\n                this.props.organizations.map((organization, index) => {\n                    const status = this.props.openRequests.get(organization.id) || null\n                    return (\n                        <div key={String(index)} className=\"SimpleCard\">\n                            <BriefOrganization organization={organization} openRequestsStatus={status} />\n                        </div>\n                    )\n                })\n            )\n        } else {\n            return this.renderNoOrgs()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Organizations\">\n                <div style={{ overflowY: 'auto', display: 'flex', flexDirection: 'column' }}>\n                    {this.renderOrgs()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Organizations;","import { connect } from 'react-redux'\nimport { Dispatch, Action } from 'redux'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport { Organizations } from './component'\nimport { StoreState } from '../../../../types'\n\nexport interface OwnProps {\n    myOrgsUnfiltered: boolean\n}\nexport interface StateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\nexport interface DispatchProps {\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    // TODO: wow, should not do this here\n    if (state.views.browseOrgsView.viewModel === null) {\n        throw new Error('view not ready')\n    }\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: { organizations, openRequests }\n            }\n        }\n    } = state;\n\n    return {\n        organizations, openRequests\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {}\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Organizations)","import * as React from 'react'\nimport Organizations from './organizations/container'\nimport { SortDirection, AppError } from '../../../types'\nimport { Button, Icon, Radio, Select, Alert, Checkbox } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group'\nimport { Filter } from '../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport './component.css'\n\nexport interface OrganizationsBrowserProps {\n    totalCount: number;\n    filteredCount: number;\n    sortBy: string;\n    filter: Filter;\n    searching: boolean;\n    error: AppError | null;\n    onSearchOrgs: (searchTerms: Array<string>) => void;\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void;\n    onFilterOrgs: (filter: Filter) => void;\n}\n\nexport interface OrganizationsBrowserState {\n    searchInput: string\n    filterByRoleType: string\n    filterByRole: Array<CheckboxValueType>\n    filterByPrivacy: string\n    showAdvancedControls: boolean\n    // filterByPrivacyType: Array<CheckboxValueType>\n}\n\nclass OrganizationsBrowser extends React.Component<OrganizationsBrowserProps, OrganizationsBrowserState> {\n    searchInput: React.RefObject<HTMLInputElement>;\n    searchButton: React.RefObject<Button>;\n    filterByRoleValues: Array<any>\n\n    constructor(props: OrganizationsBrowserProps) {\n        super(props)\n\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.filterByRoleValues = [\n            {\n                label: 'Member',\n                value: 'member'\n            },\n            {\n                label: 'Admin',\n                value: 'admin'\n            },\n            {\n                label: 'Owner',\n                value: 'owner'\n            }\n        ]\n\n        this.state = {\n            searchInput: '',\n            filterByRoleType: 'myorgs',\n            filterByRole: [],\n            filterByPrivacy: 'any',\n            showAdvancedControls: false\n        }\n    }\n\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    componentDidMount() {\n        this.props.onSearchOrgs([])\n    }\n\n    doSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        const searchTerms = this.searchInput.current.value.split(/[\\s+]/)\n        // dispatch the search event\n        this.props.onSearchOrgs(searchTerms);\n    }\n\n    haveSearchInput() {\n        if (this.state.searchInput && this.state.searchInput.length > 0) {\n            return true\n        }\n        return false\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.setState({ searchInput: currentSearchInputValue })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.doSearch()\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'owner':\n                this.props.onSortOrgs('owner', SortDirection.ASCENDING)\n                break\n            case 'name':\n                this.props.onSortOrgs('name', SortDirection.ASCENDING)\n                break\n            case 'recentlyAdded':\n                this.props.onSortOrgs('created', SortDirection.DESCENDING)\n                break\n            case 'recentlyChanged':\n                this.props.onSortOrgs('changed', SortDirection.DESCENDING)\n                break\n            case 'memberCount':\n                this.props.onSortOrgs('memberCount', SortDirection.DESCENDING)\n                break\n            case 'narrativeCount':\n                this.props.onSortOrgs('narrativeCount', SortDirection.DESCENDING)\n                break\n        }\n    }\n\n    onSortDirectionChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(this.props.sortBy, e.target.value)\n    }\n\n    onFilterByRoleTypeChange(e: RadioChangeEvent) {\n        let newFilter: Filter\n        this.setState({ filterByRoleType: e.target.value })\n        if (e.target.value === 'select') {\n            this.setState({ filterByRole: [] })\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value\n            }\n        } else {\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value,\n                roles: []\n            }\n            this.setState({ filterByRole: [] })\n        }\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByRoleChange(checkedValues: CheckboxValueType[]) {\n        let newFilter: Filter\n        this.setState({ filterByRole: checkedValues })\n        if (checkedValues.length === 0) {\n            this.setState({ filterByRoleType: 'myorgs' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'myorgs',\n                roles: checkedValues\n            } as Filter\n        } else {\n            this.setState({ filterByRoleType: 'select' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'select',\n                roles: checkedValues\n            } as Filter\n        }\n\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByPrivacyChange(e: RadioChangeEvent) {\n        this.setState({ filterByPrivacy: e.target.value })\n        const newFilter = {\n            ...this.props.filter,\n            privacy: e.target.value\n        } as Filter\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onClearSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        this.searchInput.current.value = ''\n        this.onSearchInputChange()\n        this.doSearch()\n    }\n\n    renderSearchFeedback() {\n        if (this.props.totalCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    None available\n                </div>\n            )\n        }\n        if (this.props.filteredCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    Ø\n                    /\n                    {this.props.totalCount}\n                    {' '}\n                    orgs\n                </div>\n            )\n\n        }\n        if (this.props.totalCount === this.props.filteredCount) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    <b>{this.props.totalCount}</b>\n                    {' '}\n                    orgs\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationsBrowser-searchFeedback\">\n                <b>{this.props.filteredCount}</b>\n                /\n                {this.props.totalCount}\n                {' '}\n                orgs\n            </div>\n        )\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchForm() {\n        return (\n            <form id=\"searchForm\" className=\"OrganizationsBrowser-searchBar\" onSubmit={this.onSubmit.bind(this)}>\n                <input\n                    className=\"OrganizationsBrowser-searchInput\"\n                    placeholder=\"Search Organizations\"\n                    onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                    ref={this.searchInput}></input>\n                <Button\n                    disabled={!this.haveSearchInput()}\n                    ref={this.searchButton}\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n                <Button\n                    onClick={this.onClearSearch.bind(this)}\n                    disabled={!this.haveSearchInput()}\n                    icon=\"close\"\n                >\n                </Button>\n                {this.renderSearchFeedback()}\n            </form>\n        )\n    }\n\n    renderSearchBar() {\n        return (\n            <div className=\"OrganizationsBrowser-searchBarRow\">\n                <div className=\"OrganizationsBrowser-searchBarCol1\">\n                    {this.renderSearchForm()}\n                </div>\n                <div className=\"OrganizationsBrowser-searchBarCol2\">\n                    <NavLink to=\"/newOrganization\"><Button type=\"primary\" icon=\"plus-circle\" style={{ marginRight: '10px' }}>Create Organization</Button></NavLink>\n\n                </div>\n                {/* <div className=\"OrganizationsBrowser-searchBarCol3\">\n                </div> */}\n            </div>\n        )\n    }\n\n    renderSortByControl() {\n        return (\n            <Select\n                onChange={this.onSortByChange.bind(this)}\n                defaultValue={this.props.sortBy}\n                dropdownMatchSelectWidth={true}\n                style={{ width: '10em' }}>\n                <Select.Option value=\"recentlyChanged\" key=\"changed\">Date Changed</Select.Option>\n                <Select.Option value=\"recentlyAdded\" key=\"recent\">Date Established</Select.Option>\n                <Select.Option value=\"name\" key=\"name\">Org Name</Select.Option>\n                <Select.Option value=\"memberCount\" key=\"memberCount\"># members</Select.Option>\n                <Select.Option value=\"narrativeCount\" key=\"narrativeCount\"># narratives</Select.Option>\n            </Select>\n        )\n    }\n\n    onToggleAdvanced() {\n        // When switching back to basic filter mode, we need to ensure that advanced \n        // filtering is removed.\n        if (this.state.showAdvancedControls) {\n            this.setState({ showAdvancedControls: false })\n            let { roleType, roles, privacy } = this.props.filter\n            if (!['myorgs', 'all'].includes(roleType)) {\n                roleType = 'myorgs'\n                this.setState({ filterByRoleType: 'myorgs' })\n            }\n            this.setState({ filterByRole: [], filterByPrivacy: 'any' })\n            roles = []\n            privacy = 'any'\n            this.props.onFilterOrgs({\n                roleType, roles, privacy\n            })\n        } else {\n            this.setState({ showAdvancedControls: true })\n        }\n    }\n\n    renderAdvancedToggle() {\n        if (this.state.showAdvancedControls) {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover-pressed\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        } else {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        }\n    }\n\n    renderFilterByRole() {\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px'\n        }\n        if (this.state.showAdvancedControls) {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                        <Radio value=\"notmyorgs\" style={radioStyle}>Not My Orgs</Radio>\n                        <Radio value=\"select\" style={radioStyle}>Specific Role</Radio>\n                    </Radio.Group>\n\n                    <Checkbox.Group\n                        options={this.filterByRoleValues}\n                        value={this.state.filterByRole}\n                        className=\"OrganizationsBrowser-checkboxGroup\"\n                        onChange={this.onFilterByRoleChange.bind(this)} />\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                    </Radio.Group>\n                </React.Fragment>\n            )\n        }\n    }\n\n    renderFilterByPrivacy() {\n        if (!this.state.showAdvancedControls) {\n            return\n        }\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n            margin: '0px'\n        }\n        return (\n            <React.Fragment>\n                <Radio.Group\n                    onChange={this.onFilterByPrivacyChange.bind(this)}\n                    value={this.state.filterByPrivacy}>\n                    <Radio value=\"any\" style={radioStyle}>Any</Radio>\n                    <Radio value=\"public\" style={radioStyle}>Visible</Radio>\n                    <Radio value=\"private\" style={radioStyle}>Hidden</Radio>\n                </Radio.Group>\n            </React.Fragment>\n        )\n    }\n\n    renderOrganizations() {\n        if (this.props.error) {\n            return (\n                <Alert\n                    type=\"error\"\n                    message={this.props.error.code}\n                    description={this.props.error.message} />\n            )\n        } else {\n            let myOrgsUnfiltered: boolean\n            // TODO: the filter values should be enums.\n            if (this.props.filter.roleType === 'myorgs' &&\n                this.props.filter.roles.length === 0 &&\n                this.props.filter.privacy === 'any' &&\n                // todo should be based on parsed search\n                (!this.searchInput.current ||\n                    this.searchInput.current.value.length === 0)) {\n                myOrgsUnfiltered = true\n            } else {\n                myOrgsUnfiltered = false\n            }\n\n            return (\n                <Organizations myOrgsUnfiltered={myOrgsUnfiltered} />\n            )\n        }\n    }\n\n    renderFilterColumn() {\n        return (\n            <React.Fragment>\n                <div className=\"field-label\">sort by</div>\n                {this.renderSortByControl()}\n\n                <div className=\"field-label\" style={{ marginTop: '10px' }}>filter</div>\n\n                {this.renderFilterByRole()}\n\n                {this.state.showAdvancedControls ? (\n                    <div className=\"field-label\" style={{ marginTop: '10px' }}>visibility</div>\n                ) : (null)}\n                {this.renderFilterByPrivacy()}\n\n                <div style={{ marginTop: '20px', textAlign: 'center' }}>\n                    <hr style={{ border: 0, borderTop: '1px solid rgba(200, 200, 200, 0.4)', width: '80%' }} />\n                    <a href=\"https://docs.google.com/document/d/1xRpFjD3pqPIrHBjNDGht3hX-3y6A0eQRr_v51A5j2hk\" target=\"_blank\">FAQ</a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationsBrowser scrollable-flex-column\">\n                {this.renderSearchBar()}\n                <div className=\"OrganizationsBrowser-bodyRow\">\n                    <div className=\"OrganizationsBrowser-bodyCol scrollable-flex-column\">\n                        {this.renderOrganizations()}\n                    </div>\n                    <div className=\"OrganizationsBrowser-filterCol\">\n                        {this.renderFilterColumn()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationsBrowser","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, SortDirection, BrowseOrgsViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\n\nexport interface Load extends Action<ActionFlag.BROWSE_ORGS_LOAD> {\n    type: ActionFlag.BROWSE_ORGS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.BROWSE_ORGS_LOAD_START> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.BROWSE_ORGS_LOAD_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS\n    defaultViewModel: BrowseOrgsViewModel\n}\n\nexport interface LoadError extends Action<ActionFlag.BROWSE_ORGS_LOAD_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.BROWSE_ORGS_UNLOAD> {\n    type: ActionFlag.BROWSE_ORGS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_START\n    }\n}\n\nfunction loadSuccess(defaultViewModel: BrowseOrgsViewModel): LoadSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS,\n        defaultViewModel: defaultViewModel\n    }\n}\n\nfunction loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.BROWSE_ORGS_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface SortOrgs extends Action<ActionFlag.BROWSE_ORGS_SORT> {\n    type: ActionFlag.BROWSE_ORGS_SORT,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SORT_START> {\n    type: ActionFlag.BROWSE_ORGS_SORT_START,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SORT_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SORT_SUCCESS\n}\n\nexport interface SortOrgsError extends Action<ActionFlag.BROWSE_ORGS_SORT_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SORT_ERROR,\n    error: AppError\n}\n\n\nexport function sortOrgsStart(sortField: string, sortDirection: SortDirection): SortOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SORT_START,\n        sortField: sortField,\n        sortDirection: sortDirection\n    }\n}\n\n// SEARCHING\n\n// Called upon the start of a search call\n// Sets the ui state to enable a spinner\n// and also search query data to be reflected in the ui\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\nexport interface SearchOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SEARCH_START> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_START,\n    searchTerms: Array<string>\n}\n\n// Called upon successful completion of a search\n// Sets the organizations found\nexport interface SearchOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS\n    organizations: Array<orgModel.BriefOrganization>\n    totalCount: number\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\n// Called upon a search error\n// Sets error state\nexport interface SearchOrgsError extends Action<ActionFlag.BROWSE_ORGS_SEARCH_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR\n    error: AppError\n}\n\n\n// searchTerms: Array<string>\nfunction searchOrgsStart(searchTerms: Array<string>): SearchOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_START,\n        searchTerms\n    }\n}\n\nfunction searchOrgsSuccess(organizations: Array<orgModel.BriefOrganization>, totalCount: number, openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>): SearchOrgsSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n        organizations: organizations,\n        totalCount: totalCount,\n        openRequests: openRequests\n    }\n}\n\nfunction searchOrgsError(error: AppError): SearchOrgsError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n        error: error\n    }\n}\n\n// FILTER \n\n// Filter orgs\nexport interface FilterOrgs extends Action<ActionFlag.BROWSE_ORGS_FILTER> {\n    type: ActionFlag.BROWSE_ORGS_FILTER,\n    filter: string\n}\n\nexport interface FilterOrgsStart extends Action<ActionFlag.BROWSE_ORGS_FILTER_START> {\n    type: ActionFlag.BROWSE_ORGS_FILTER_START,\n    filter: orgModel.Filter\n}\n\n\nexport function filterOrgsStart(filter: orgModel.Filter): FilterOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_FILTER_START,\n        filter: filter\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        const defaultSearchTerms: Array<string> = []\n        // TODO: the sort field and direction are still set directly at this level;\n        // in the ui narrativeCount is a single sortBy field, with the direction\n        // fixed in the model's applySortComparison\n        const defaultSortField = 'narrativeCount'\n        const defaultSortDirection = SortDirection.DESCENDING\n        const defaultFilter = { roleType: 'myorgs', roles: [], privacy: 'any' }\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: defaultSearchTerms,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                username\n            })\n\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            // dispatch(searchOrgsSuccess(organizations, total, openRequests))\n            // populate default browse orgs props\n            const defaultViewModel: BrowseOrgsViewModel = {\n                rawOrganizations: organizations,\n                organizations: organizations,\n                openRequests: openRequests,\n                totalCount: total,\n                filteredCount: organizations.length,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                searchTerms: defaultSearchTerms,\n                selectedOrganizationId: null,\n                searching: false,\n                error: null\n            }\n            // done!\n            dispatch(loadSuccess(defaultViewModel))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// TODO: proper typing here \nexport function searchOrgs(searchTerms: Array<string>) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchOrgsStart(searchTerms))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { sortField, sortDirection, filter } } = browseOrgsView\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: searchTerms,\n                sortField, sortDirection, filter, username\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function sortOrgs(sortField: string, sortDirection: SortDirection) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sortOrgsStart(sortField, sortDirection))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, filter } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function filterOrgs(filter: orgModel.Filter) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(filterOrgsStart(filter))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, sortField, sortDirection } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n","import OrganizationsBrowser from './component'\nimport { StoreState, SortDirection, AppError } from '../../../types'\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as orgModel from '../../../data/models/organization/model'\n//\n// Typing for the mapState and mapDispatch\n//\n\nexport interface OwnProps {\n    sortBy: string\n}\nexport interface LinkStateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    filter: orgModel.Filter\n    searching: boolean,\n    error: AppError | null\n}\n\nexport interface LinkDispatchProps {\n    onSearchOrgs: (searchTerms: Array<string>) => void,\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void,\n    onFilterOrgs: (filter: orgModel.Filter) => void\n}\n\n// note second arg is the component props, but we don't have any component props to merge in.\nexport function mapStateToProps(storeState: StoreState): LinkStateProps {\n    if (!storeState.views.browseOrgsView.viewModel) {\n        throw new Error('No view model!')\n    }\n\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: {\n                    organizations, openRequests, error,\n                    totalCount, filteredCount, filter, searching }\n            }\n        }\n    } = storeState\n\n    return {\n        organizations,\n        openRequests,\n        totalCount,\n        filteredCount,\n        filter,\n        error,\n        searching: searching\n    }\n\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.SearchOrgs | actions.SortOrgs | actions.FilterOrgs>): LinkDispatchProps {\n    return {\n        onSearchOrgs: (searchTerms: Array<string>) => {\n            // TODO proper typing here\n            dispatch(actions.searchOrgs(searchTerms) as any)\n        },\n        onSortOrgs: (sortBy: string, sortDirection: SortDirection) => {\n            // TODO proper typing here\n            dispatch(actions.sortOrgs(sortBy, sortDirection) as any)\n        },\n        onFilterOrgs: (filter: orgModel.Filter) => {\n            dispatch(actions.filterOrgs(filter) as any)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationsBrowser)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, BrowseOrgsView } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: BrowseOrgsView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organizations...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container sortBy=\"narrativeCount\" />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Spin, Alert } from 'antd';\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: BrowseOrgsView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.browseOrgsView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, EditState, ValidationState, SyncState, ValidationErrorType } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport Validation from '../../data/models/organization/validation'\nimport DebouncingProcess from '../../lib/DebouncingProcess'\nimport { UIServiceClient } from '../../data/apis/uiService'\n\n// ACTIONS\n\nexport interface Save extends Action<ActionFlag.ADD_ORG_SAVE> {\n    type: ActionFlag.ADD_ORG_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.ADD_ORG_SAVE_START> {\n    type: ActionFlag.ADD_ORG_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.ADD_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface SaveError extends Action<ActionFlag.ADD_ORG_SAVE_ERROR> {\n    type: ActionFlag.ADD_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Editing\n\nexport interface Load extends Action<ActionFlag.ADD_ORG_LOAD> {\n    type: ActionFlag.ADD_ORG_LOAD;\n}\n\nexport interface LoadStart {\n    type: ActionFlag.ADD_ORG_LOAD_START\n}\n\nexport interface LoadSuccess {\n    type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n    newOrganization: EditableOrganization\n}\n\nexport interface LoadError {\n    type: ActionFlag.ADD_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload {\n    type: ActionFlag.ADD_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface AddOrgEvaluate extends Action<ActionFlag.ADD_ORG_EVALUATE> {\n    type: ActionFlag.ADD_ORG_EVALUATE\n}\n\nexport interface AddOrgEvaluateOK extends Action<ActionFlag.ADD_ORG_EVALUATE_OK> {\n    type: ActionFlag.ADD_ORG_EVALUATE_OK\n}\n\nexport interface AddOrgEvaluateErrors extends Action<ActionFlag.ADD_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n}\n\n// Updating name field\n\nexport interface UpdateName extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME\n    name: string\n}\n\nexport interface UpdateNameSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS\n    name: string\n}\n\nexport interface UpdateNameError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL\n    name: string\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating id Field\n\nexport interface UpdateId extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID,\n    id: string\n}\n\nexport interface UpdateIdSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n    id: string\n}\n\nexport interface UpdateIdError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n    id: string,\n    error: ValidationState\n}\n\nexport interface UpdateIdPass extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n    id: string\n}\n\n// Updating description field\n\nexport interface UpdateDescription extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface UpdateDescriptionSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface UpdateDescriptionError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\n// Update is private field\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\nexport function saveStart(): SaveStart {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_START\n    }\n}\n\nexport function saveSuccess(org: orgModel.Organization): SaveSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n        organization: org\n    }\n}\n\nexport function saveError(error: AppError): SaveError {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Editing\n\nfunction loadStart() {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_START\n    }\n}\n\nfunction loadSuccess(newOrganization: EditableOrganization) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n        newOrganization: newOrganization\n    }\n}\n\nfunction loadError(error: AppError) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.ADD_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function addOrgEvaluateOk(): AddOrgEvaluateOK {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_OK\n    }\n}\n\nexport function AddOrgEvaluateErrors(): AddOrgEvaluateErrors {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Update Name\n\nexport function updateNameSuccess(name: string): UpdateNameSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function updateNameError(name: string, error: ValidationState): UpdateNameError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\nexport function updateIdSuccess(id: string): UpdateIdSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n        id: id\n    }\n}\n\nexport function updateIdPass(id: string): UpdateIdPass {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n        id: id\n    }\n}\n\n// Update Logo URL Hash\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Home URL Hash\n\nexport function updateHomeUrlSuccess(logoUrl: string | null): UpdateHomeUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n        homeUrl: logoUrl\n    }\n}\n\nexport function updateHomeUrlError(logoUrl: string | null, error: ValidationState): UpdateHomeUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n        homeUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Id\n\nexport function updateIdError(id: string, error: ValidationState): UpdateIdError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n        id: id,\n        error: error\n    }\n}\n\nexport function updateDescriptionSuccess(description: string): UpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function updateDescriptionError(description: string, error: ValidationState): UpdateDescriptionError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const newOrg: EditableOrganization = {\n            id: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgId('')[1]\n            },\n            name: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgName('')[1]\n            },\n            logoUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgLogoUrl('')[1]\n            },\n            homeUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgHomeUrl('')[1]\n            },\n            researchInterests: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgResearchInterests('')[1]\n            },\n            description: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgDescription('')[1]\n            },\n            isPrivate: {\n                value: false,\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            }\n        }\n        dispatch(loadSuccess(newOrg))\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function addOrg() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n\n        // This check is to satisfy TS. Since viewModel is nullable, it has no way \n        // of knowing that our app flow ensures that it is populated.\n        // In terms of generalized usage of the redux store, though, there is no\n        // way to ensure this! So we really should perform our state checks before \n        // handling any event\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        // TODO: other validations!!!\n\n        dispatch(saveStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                addOrgView: { viewModel: { newOrganization } },\n            },\n            app: { config }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (!newOrganization) {\n            dispatch(saveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        orgClient.addOrg(newOrganization, username)\n            .then((org: orgModel.Organization) => {\n                dispatch(saveSuccess(org))\n            })\n            .catch((error) => {\n                console.error('error adding', newOrganization, error)\n\n                // note that we dispatch an AppError compliant object,\n                // which wraps the original exception object.\n                dispatch(saveError({\n                    code: error.code || error.name,\n                    message: error.message,\n                    exception: error\n                }))\n            })\n    }\n}\n\nexport function addOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: {\n                    viewModel: { editState, newOrganization } }\n            }\n        } = state\n\n        if (!newOrganization) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.id.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: quick hack to allow unmodified fields to evaluate to true.\n\n        if (newOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(addOrgEvaluateOk())\n    }\n}\n\nfunction orgModelFromState(state: StoreState) {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config } } = state\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url,\n        userProfileServiceURL: config.services.UserProfile.url\n    })\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateNameError(validatedName, error))\n        } else {\n            dispatch(updateNameSuccess(validatedName))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkLogoUrlProcess: DebouncingProcess\n\nclass CheckIfLogoUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkImageURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateLogoUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This logo url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateLogoUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking logo url: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkLogoUrlProcess) {\n            checkLogoUrlProcess.cancel()\n        }\n\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n                logoUrl: logoUrl,\n                error: error\n            } as UpdateLogoUrlError)\n            return\n        }\n\n        // initial success, but the check may invalidate it.\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n            logoUrl: validatedLogoUrl\n        })\n\n        dispatch(addOrgEvaluate())\n\n        if (validatedLogoUrl !== null && validatedLogoUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkLogoUrlProcess = new CheckIfLogoUrlExistsProcess({\n                delay: 100,\n                url: validatedLogoUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkLogoUrlProcess.start()\n        }\n    }\n}\n\n// export function updateLogoUrl(name: string | null) {\n//     return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n//         const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(name)\n\n//         if (error.type !== ValidationErrorType.OK) {\n//             dispatch(updateLogoUrlError(validatedLogoUrl, error))\n//         } else {\n//             dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n//         }\n//         dispatch(addOrgEvaluate())\n//     }\n// }\n\nlet checkHomeUrlProcess: DebouncingProcess\n\nclass CheckIfHomeUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkHTMLURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateHomeUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This home url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateHomeUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking home url: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkHomeUrlProcess) {\n            checkHomeUrlProcess.cancel()\n        }\n\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: homeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n            return\n        }\n\n        // initial success, but the check may invalidate it.\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n            homeUrl: validatedHomeUrl\n        })\n\n        dispatch(addOrgEvaluate())\n\n        if (validatedHomeUrl !== null && validatedHomeUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkHomeUrlProcess = new CheckIfHomeUrlExistsProcess({\n                delay: 100,\n                url: validatedHomeUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkHomeUrlProcess.start()\n        }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            }) as UpdateResearchInterestsSuccess\n        }\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // no validation for now ... what is there to validate?\n\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate\n        })\n        dispatch(addOrgEvaluate())\n    }\n}\n\nclass CheckIfExistsProcess extends DebouncingProcess {\n    model: orgModel.OrganizationModel\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    id: string\n    constructor({ delay, model, dispatch, id }: { delay: number, model: orgModel.OrganizationModel, dispatch: ThunkDispatch<StoreState, void, Action>, id: string }) {\n        super({ delay })\n\n        this.model = model\n        this.dispatch = dispatch\n        this.id = id\n    }\n\n    async task(): Promise<void> {\n        try {\n            const exists = await this.model.orgExists(this.id)\n            if (this.canceled) {\n                return\n            }\n            if (exists) {\n                this.dispatch(updateIdError(this.id, {\n                    type: ValidationErrorType.ERROR,\n                    validatedAt: new Date(),\n                    message: 'This org id is already in use'\n                }))\n            } else {\n                this.dispatch(updateIdSuccess(this.id))\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateIdError(this.id, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking for org id existence: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkIDProcess: DebouncingProcess\n\n/*\nupdateId\n\nHandles updating an org id update from the new organization form.\n\nThis action handles the normal field validation, but also requires a check\nthat the org id is not in use. This requires an api call to the groups \nservice, which introduces an indeterminate latency, and thus special handling.\n*/\n\nexport function updateId(id: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkIDProcess) {\n            checkIDProcess.cancel()\n        }\n\n        const [validatedId, error] = Validation.validateOrgId(id)\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        // this is an unusual action -- it is in intermediate \"success\" -- the field\n        // has passed the synchronous syntax validation, so we need to feed the value \n        // back to the form, but the eventual success occurs later.\n        dispatch(updateIdPass(id))\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        // For the id existence check, we want to ensure that we don't trip up the\n        // user experience. \n        // Think of the org id check as an async process.\n        // If that process is active when an update appears here, cancel it and proceed.\n        // Launch an existence check process which will initiate the check after some\n        // period of time (e.g. 100ms). This ensures that a fast typist will not trigger\n        // a sequence of existence checks. \n        // In that process, after the existence check, look to see if the process has\n        // been canceled (see step 1 above). If so, do not issue any redux events.\n        // Otherwise, issue the success or error events as appropriate.\n\n        const model = orgModelFromState(getState())\n\n        checkIDProcess = new CheckIfExistsProcess({\n            delay: 100,\n            id: validatedId,\n            dispatch: dispatch,\n            model: model\n        })\n\n        checkIDProcess.start()\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const model = orgModelFromState(getState())\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(updateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}","export default abstract class DebouncingProcess {\n\n    delay: number\n    canceled: boolean\n    timer: number | null\n\n    constructor({ delay }: { delay: number }) {\n        this.delay = delay\n        this.canceled = false\n        this.timer = null\n    }\n\n    abstract async task(): Promise<void>\n\n    start() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(async () => {\n            if (!this.canceled) {\n                try {\n                    // TODO: left off here. we need to be able to deny\n                    // the consequence of the check if we have canceled...\n                    // so inside the fun\n                    await this.task()\n                } catch (ex) {\n                    console.warn('debouncing process exception: ' + ex.message)\n                }\n            } else {\n                this.canceled = false;\n            }\n            this.timer = null;\n        }, this.delay)\n    }\n\n    cancel() {\n        if (this.timer) {\n            this.canceled = true;\n        }\n    }\n}","import { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nexport interface UIServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface CheckImageURLParam {\n    url: string,\n    timeout: number\n}\n\nexport interface CheckImageURLResult {\n    is_valid: boolean\n    error: {\n        code: string\n        info: any\n    }\n}\n\nexport class UIServiceClient extends DynamicServiceClient {\n\n    static module: string = 'UIService'\n\n    constructor(params: UIServiceClientParams) {\n        super(params)\n    }\n\n    async checkImageURL({ url, timeout }: CheckImageURLParam): Promise<CheckImageURLResult> {\n        const [[result, err], serverError] = await this.callFunc('check_image_url', [\n            { url, timeout }\n        ])\n\n        if (serverError) {\n            throw new Error(serverError.message)\n        }\n\n        if (err) {\n            throw new Error(err['message'])\n        }\n\n        return result as CheckImageURLResult\n    }\n\n    async checkHTMLURL({ url, timeout }: CheckImageURLParam): Promise<CheckImageURLResult> {\n        const [[result, err], serverError] = await this.callFunc('check_html_url', [\n            { url, timeout }\n        ])\n\n        if (serverError) {\n            throw new Error(serverError.message)\n        }\n\n        if (err) {\n            throw new Error(err['message'])\n        }\n\n        return result as CheckImageURLResult\n    }\n\n}","import * as React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Marked } from 'marked-ts'\nimport { Button, Icon, Modal, Input, Checkbox, Tooltip, Collapse, Tabs } from 'antd'\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState, EditState,\n    AppError, Editable, ValidationErrorType, SyncState, EditableString,\n    EditableNullableString, EditableBoolean\n} from '../../../types';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\nimport OrgLogo from '../../OrgLogo'\nimport TextArea from 'antd/lib/input/TextArea'\nimport './component.css'\n\nexport interface NewOrganizationProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    error: AppError | null,\n    newOrganization: EditableOrganization,\n    onSave: () => void,\n    onUpdateName: (name: string) => void,\n    onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport interface NewOrganizationState {\n    cancelToBrowser: boolean\n    showError: boolean\n}\n\nclass NewOrganization extends React.Component<NewOrganizationProps, NewOrganizationState> {\n    origin: string;\n\n    constructor(props: NewOrganizationProps) {\n        super(props)\n        this.state = {\n            cancelToBrowser: false,\n            showError: true\n        }\n        this.origin = document.location!.origin\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have entered information for this new organization.</p>\n\n                    <p>If you leave the editor without first saving, the new organization <i>will not be created</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateId(e.target.value)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.saveState === SaveState.NEW\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderBrokenHomeURL() {\n        const tooltipTitle = 'The Home URL is broken; either correct it or leave it empty'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value === null || homeUrlField.value.length === 0) {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n\n        if (homeUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenHomeURL()}\n                </div>\n            )\n        }\n\n        const tooltipTitle = 'Try out your url by clicking this link'\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <Tooltip title={tooltipTitle} >\n                    <a href={homeUrlField.value} target=\"_blank\">\n                        <Icon type=\"link\" />\n                    </a>\n                </Tooltip>\n            </div>\n        )\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Create Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"newOrganizationForm\" className=\"NewOrganization-editor  scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {this.renderEditorHeader()}\n                <div className=\"NewOrganization-body\">\n                    {this.renderNameRow(this.props.newOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.newOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.newOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.newOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.newOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.newOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.newOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"NewOrganization-row\">\n                        <div className=\"NewOrganization-col1\">\n                        </div>\n                        <div className=\"NewOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderLogo(org: EditableOrganization) {\n        return (\n            <OrgLogo logoUrl={null} size={64} organizationName={org.name.value} organizationId={org.id.value} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.newOrganization.name.value && this.props.newOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.newOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.newOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderBrokenLogo() {\n        const tooltipTitle = 'The Logo URL is broken; either correct it or empty the field for the default logo'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (logoUrlField.value === null || logoUrlField.value.length === 0) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n\n        if (logoUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenLogo()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    toggleError() {\n        this.setState({ showError: !this.state.showError })\n    }\n\n    renderError() {\n        if (this.props.error && this.state.showError) {\n            const onOk = () => {\n                this.setState({ showError: false })\n            }\n            const onCancel = () => {\n                this.setState({ showError: false })\n            }\n            let trace\n            if (this.props.error.trace) {\n                trace = this.props.error.trace.map((line, index) => {\n                    return (\n                        <div key={\"line_\" + index}>{line}</div>\n                    )\n                })\n            }\n            if (trace) {\n                trace = (\n                    <div>\n                        <div>trace</div>\n                        {trace}\n                    </div>\n                )\n            }\n            return (\n                <Modal visible={true}\n                    title=\"Error\"\n                    okType=\"danger\"\n                    okText=\"Close\"\n                    cancelText=\"Clear Error\"\n                    onCancel={onCancel}\n                    onOk={onOk}>\n                    <div style={{ fontWeight: 'bold' }}>\n                        {this.props.error.code}\n                    </div>\n                    <div>\n                        {this.props.error.message}\n                    </div>\n                    {trace}\n                </Modal>\n            )\n        }\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"newOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button type=\"danger\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                <Icon type=\"close\" />{' '}Close\n            </Button>\n        )\n    }\n\n    renderMenuButtons() {\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <span className=\"ButtonSet-button\">\n                    <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n                </span>\n            )\n        }\n        return (\n            <div className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button type=\"default\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                        <Icon type=\"rollback\" />{' '}Back\n                    </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    {this.renderSaveButton()}\n                </span>\n                {errorButton}\n            </div>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        // TODO: this is just a prop for today.\n        if (this.props.saveState === SaveState.SAVED) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.newOrganization.id.value} />\n        }\n\n        return (\n            <div className=\"NewOrganization scrollable-flex-column\">\n                <div className=\"NewOrganization-main scrollable-flex-column\">\n                    {this.renderEditor()}\n                </div>\n                {/* TODO: improve error display*/}\n                {this.renderError()}\n            </div>\n        )\n    }\n}\n\nexport default NewOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditState, SaveState, ValidationState, EditableOrganization, AppError } from '../../../types';\nimport {\n    addOrg, updateName, updateLogoUrl, updateId, updateDescription, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../redux/actions/addOrg';\n\nimport Component from './component';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n    error: AppError | null\n}\n\nexport interface DispatchProps {\n    onSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    onUpdateId: (id: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.addOrgView.viewModel) {\n        throw new Error('View model missing in state')\n    }\n    const {\n        views: {\n            addOrgView: {\n                viewModel: { editState, saveState, validationState, newOrganization, error }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        newOrganization,\n        error\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSave: () => {\n            dispatch(addOrg() as any)\n        },\n        onUpdateName: (name) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        onUpdateId: (id) => {\n            dispatch(updateId(id) as any)\n        },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { AppError, AddOrgView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\n\ninterface LoaderProps {\n    view: AddOrgView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading \"Add New Organization\" form...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case ComponentLoadingState.SUCCESS:\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// redux interface\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/addOrg'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.addOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.Load | actions.Unload>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as requestModel from './requests'\nimport * as orgModel from './organization/model'\n\nexport interface UberOrganization {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n    request: requestModel.UserRequest | null\n    invitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null\n}\n\ninterface UberModelParams {\n    token: string\n    username: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    workspaceServiceURL: string\n    serviceWizardURL: string\n}\n\nexport class UberModel {\n\n    params: UberModelParams\n\n    constructor(params: UberModelParams) {\n        this.params = params\n    }\n\n    async getOrganizationForUser(organizationId: string): Promise<UberOrganization> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL,\n            userProfileServiceURL: this.params.userProfileServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        // get org\n        const organization = await orgClient.getOrg(organizationId)\n\n        // get pending requests\n        const request = await requestClient.getUserRequestForOrg(organizationId) as requestModel.UserRequest | null\n\n        const invitation = await requestClient.getUserInvitationForOrg(organizationId) as requestModel.UserInvitation | null\n\n        // we should probably just keep the request ids rather than try to keep the whole request\n        // and refactor the calls for the request events, which I just refactored (not much work) to use the \n        // whole request structure rather than just the id, to use the request id + the org id...\n        const relation = orgModel.determineRelation(organization, this.params.username, request, invitation)\n\n        let groupRequests\n        if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n        } else {\n            groupRequests = null\n        }\n\n        return {\n            organization, request, invitation, relation, groupRequests\n        }\n    }\n\n    // async getOrganizationsForUser(): Promise<Array<UberOrganization>> {\n    //     // const {\n    //     //     auth: { authorization: { token, username } },\n    //     //     app: { config }\n    //     // } = getState()\n\n    //     const orgClient = new orgModel.OrganizationModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const requestClient = new requestModel.RequestsModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const orgs = await orgClient.getOwnOrgs()\n\n    //     const requestOutbox = await requestClient.getOutboundRequests()\n    //     const requestInbox = await requestClient.getInboundRequests()\n\n    //     return await Promise.all(orgs.map(async (organization) => {\n    //         const request = requestOutbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.REQUEST &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserRequest\n\n    //         const invitation = requestInbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.INVITATION &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserInvitation\n\n    //         const relation = orgModel.determineRelation(organization, this.params.username, request || null, invitation)\n\n    //         let groupRequests\n    //         if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n    //             relation.type === orgModel.UserRelationToOrganization.OWNER) {\n    //             groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organization.id)\n    //         } else {\n    //             groupRequests = null\n    //         }\n\n    //         return {\n    //             organization, request, invitation, relation, groupRequests\n    //         }\n    //     }))\n    // }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AnError, makeError } from '../../lib/error';\nimport { StoreState } from '../../types';\n\nexport interface Load extends Action<ActionFlag.DATA_SERVICE_LOAD> {\n    type: ActionFlag.DATA_SERVICE_LOAD\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.DATA_SERVICE_LOAD_SUCCESS> {\n    type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n}\n\nexport interface LoadError extends Action<ActionFlag.DATA_SERVICE_LOAD_ERROR> {\n    type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n    error: AnError\n}\n\nfunction loadError(error: AnError) {\n    return {\n        type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_START\n        })\n\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n        } as LoadSuccess)\n\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // const userProfileClient = new userProfileModel.UserProfile({\n        //     token, username,\n        //     userProfileServiceURL: config.services.UserProfile.url\n        // })\n\n        // try {\n        //     const userProfile = await userProfileClient.getProfile(username)\n\n        //     dispatch({\n        //         type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS,\n        //         profile: userProfile\n        //     })\n        // } catch (ex) {\n        //     console.error('error', ex)\n        //     dispatch(loadError(makeError({\n        //         code: ex.name,\n        //         message: ex.name\n        //     })))\n        // }\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.DATA_SERVICE_UNLOAD\n    }\n}\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, UIError, UIErrorType, ViewOrgViewModelKind, ViewOrgViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\nimport { loadNarrative } from './entities'\nimport * as dataServices from './dataServices'\nimport { AnError, makeError } from '../../lib/error';\nimport * as narrativeModel from '../../data/models/narrative'\n\n// Action Types\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD\n    organizationId: string\n}\n\nexport interface ReLoad extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_START\n}\n\nexport interface LoadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    apps: Array<orgModel.AppResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface ReloadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    apps: Array<orgModel.AppResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface LoadInaccessiblePrivateSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_UNLOAD\n}\n\n// Join Requests\n\nexport interface ViewOrgJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST\n    requestId: string\n}\n\nexport interface ViewOrgJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR\n    error: UIError\n}\n\n// Join Request cancellation\n\nexport interface ViewOrgCancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface ViewOrgCancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgCancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgCancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: UIError\n}\n\n// Join Invitation Acceptance\n\nexport interface AcceptJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION\n}\n\nexport interface AcceptJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n}\n\nexport interface AcceptJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface AcceptJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Join Invitation Denial\n\nexport interface RejectJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION\n}\n\nexport interface RejectJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n}\n\nexport interface RejectJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface RejectJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n\n// Delete Narrative\n\nexport interface RemoveNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE\n}\n\nexport interface RemoveNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n}\n\nexport interface RemoveNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    narrativeId: narrativeModel.NarrativeID\n}\n\nexport interface RemoveNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\n\nexport function removeNarrativeStart(): RemoveNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n    }\n}\n\nexport function removeNarrativeSuccess(narrativeId: narrativeModel.NarrativeID): RemoveNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n        narrativeId\n    }\n}\n\nexport function removeNarrativeError(error: AppError): RemoveNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function removeNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeNarrativeStart())\n\n        // TODO: need to restructure this view -- this is crazy\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel\n                }\n            }\n        }: StoreState = state\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const { organization } = viewModel\n\n        if (!organization) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const groupId = organization.id\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n\n        try {\n            await orgClient.removeNarrativeFromOrg(groupId, narrative.workspaceId)\n            dispatch(removeNarrativeSuccess(narrative.workspaceId))\n        } catch (ex) {\n            dispatch(removeNarrativeError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization, narratives: Array<orgModel.NarrativeResource>): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization,\n        narratives\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const viewModel = state.views.viewOrgView.viewModel\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'Not NORMAL org'\n            }))\n            return\n        }\n\n        const { organization, narratives: { sortBy, searchBy } } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n        } = state\n\n        const organizationId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(organizationId, resourceId)\n            // Getting a fresh copy of the org will trigger the view org component and\n            // all subcomponents with changed data to refresh. All we are intending here is that\n            // the narrative in the list of narratives provided by the groups api is updated, but\n            // there may be other elements of the group/org which have changed as well. So be it.\n\n            // TODO: just update the narrative, don't reprocess everything.\n\n\n            const org = await orgClient.getOrg(organizationId)\n\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'error',\n                    message: 'Not a NORMAL org'\n                }))\n                return\n            }\n\n            const narratives = org.narratives\n\n            const filteredNarratives = orgModel.queryNarratives(narratives, {\n                sortBy: sortBy,\n                searchBy: searchBy\n            })\n\n            dispatch(loadNarrative(narrative.workspaceId))\n            dispatch(accessNarrativeSuccess(org, filteredNarratives))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_START\n    }\n}\n\nexport function loadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    apps: Array<orgModel.AppResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): LoadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members,\n        apps\n    }\n}\n\nexport function reloadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    apps: Array<orgModel.AppResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): ReloadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members,\n        apps\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(\n    organization: orgModel.InaccessiblePrivateOrganization,\n    relation: orgModel.Relation,\n    requestOutbox: Array<requestModel.Request>): LoadInaccessiblePrivateSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n        organization, relation,\n        requestOutbox\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\n// Join requests\n\nexport function viewOrgJoinRequestStart(): ViewOrgJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgJoinRequestSuccess(): ViewOrgJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgJoinRequestError(error: UIError): ViewOrgJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Join Request Cancellation\n\nexport function viewOrgCancelJoinRequestStart(): ViewOrgCancelJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgCancelJoinRequestSuccess(): ViewOrgCancelJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgCancelJoinRequestError(error: UIError): ViewOrgCancelJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Invitation Acceptance\n\nexport function acceptJoinInvitationStart(): AcceptJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n    }\n}\n\nexport function acceptJoinInvitationSuccess(): AcceptJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function acceptJoinInvitationError(error: AppError): AcceptJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Invitation Rejection \n\nexport function rejectJoinInvitationStart(): RejectJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n    }\n}\n\nexport function rejectJoinInvitationSuccess(): RejectJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function rejectJoinInvitationError(error: AppError): RejectJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Join invitation acceptance\n\n// TODO\n\n// Thunks\n\nexport function unload() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: { viewOrgView: { viewModel } }\n        } = getState()\n\n        if (!viewModel) {\n            throw new Error('view model not defined!?!')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (viewModel.organization.relation === orgModel.UserRelationToOrganization.MEMBER ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.OWNER) {\n            await orgClient.visitOrg({ organizationId: viewModel.organization.id })\n        }\n\n        dispatch(dataServices.load())\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_UNLOAD\n        })\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            let requestInbox: Array<requestModel.Request>\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n                requestInbox = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n                requestInbox = []\n            }\n\n\n            // const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: narrativesSortBy,\n                searchBy: ''\n            })\n\n            // TODO: actual app sort and filter\n            const apps = organization.apps\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: sortMembersBy,\n                searchBy: ''\n            })\n\n            dispatch(loadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, apps, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function reload(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            // existing org view.\n            const state = getState()\n            const viewModel = state.views.viewOrgView.viewModel\n\n            if (!viewModel) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'No view model'\n                }))\n                return\n            }\n\n            if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                }))\n                return\n            }\n\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n            }\n\n            const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: viewModel.narratives.sortBy,\n                searchBy: viewModel.narratives.searchBy\n            })\n\n            // TODO: actual app sort and filter\n            const apps = organization.apps\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: viewModel.sortMembersBy,\n                searchBy: viewModel.searchMembersBy\n            })\n\n            dispatch(reloadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, apps, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgJoinRequest() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        //TODO: could do a start here...\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel: { organization } }\n            }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.requestMembership(organization.id)\n            dispatch(viewOrgJoinRequestSuccess())\n            dispatch(load((organization.id)))\n        } catch (ex) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgCancelJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(viewOrgJoinRequestStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.cancelRequest(requestId)\n            dispatch(viewOrgCancelJoinRequestSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(viewOrgCancelJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.acceptJoinInvitation(requestId)\n            dispatch(acceptJoinInvitationSuccess())\n            // quick 'n easy\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(acceptJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport function rejectJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.rejectJoinInvitation(requestId)\n            dispatch(rejectJoinInvitationSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(rejectJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// SORT NARRATIVES\nexport interface SortNarratives {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES,\n    sortBy: string\n}\n\nexport interface SortNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n}\n\nexport interface SortNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    sortBy: string\n}\n\nexport interface SortNarrativesError {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function sortNarratives(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.narratives.searchBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        // const sorted = orgModel.sortNarratives(narratives.slice(), sortBy)\n        // const sorted = narratives.slice().sort(sortByToComparator(sortBy))\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n            narratives: sorted,\n            sortBy\n        })\n\n    }\n}\n\n\n// SEARCH NARRATIVES\n\nexport interface SearchNarratives {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES,\n    searchBy: string\n}\n\nexport interface SearchtNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_START\n}\n\nexport interface SearchNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    searchBy: string\n}\n\nexport interface SearchNarrativesError {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function searchNarratives(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.narratives.sortBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n            searchBy: searchBy,\n            narratives: sorted\n        })\n\n    }\n}\n\n// REmove app\n\nexport interface RemoveApp {\n    type: ActionFlag.VIEW_ORG_REMOVE_APP,\n    appId: string\n}\n\nexport interface RemoveAppStart {\n    type: ActionFlag.VIEW_ORG_REMOVE_APP_START\n}\n\nexport interface RemoveAppSuccess {\n    type: ActionFlag.VIEW_ORG_REMOVE_APP_SUCCESS\n    appId: string\n}\n\nexport interface RemoveAppError {\n    type: ActionFlag.VIEW_ORG_REMOVE_APP_ERROR,\n    error: AnError\n}\n\nfunction removeAppStart() {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_APP_START\n    }\n}\n\nfunction removeAppSuccess(appId: string) {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_APP_SUCCESS,\n        appId\n    }\n}\n\nfunction removeAppError(error: AnError) {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_APP_ERROR,\n        error: error\n    }\n}\n\nfunction ensureViewModel(state: StoreState): ViewOrgViewModel {\n    if (!state.views.viewOrgView.viewModel) {\n        throw new Error('View orgs does not have an org')\n    }\n\n    const {\n        views: {\n            viewOrgView: {\n                viewModel\n            }\n        }\n    }: StoreState = state\n\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('View orgs does not have an org')\n    }\n\n    // const { organization } = viewModel\n\n    // if (!organization) {\n    //     dispatch(removeNarrativeError({\n    //         code: 'bad state',\n    //         message: 'View orgs does not have an org'\n    //     }))\n    //     return\n    // }\n    return viewModel\n}\n\nfunction orgClientFromState(state: StoreState): orgModel.OrganizationModel {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config }\n    }: StoreState = state\n\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url,\n        userProfileServiceURL: config.services.UserProfile.url\n    })\n}\n\nexport function removeApp(appId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeAppStart())\n\n        const viewModel = ensureViewModel(getState())\n        const orgClient = orgClientFromState(getState())\n\n        try {\n            orgClient.removeAppFromOrg(viewModel.organization.id, appId)\n            dispatch(removeAppSuccess(appId))\n        } catch (ex) {\n            dispatch(removeAppError(makeError({\n                code: 'error',\n                message: ex.message\n            })))\n        }\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as viewOrgActions from '../viewOrg'\n\n\nexport interface AcceptRequestAction<T> extends Action<T> {\n}\n\nexport interface AcceptRequest extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface AcceptRequestStart extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n}\n\nexport interface AcceptRequestSuccess extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n}\n\ninterface AcceptRequestError extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AcceptRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancellation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.acceptRequest(requestId)\n\n            // refetch the inbox\n            const inbox = await requestClient.getCombinedRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            })\n            dispatch(viewOrgActions.reload(request.organizationId))\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n        // or error\n    }\n}\n\n","import * as React from 'react'\nimport { NavLink, withRouter, Route } from 'react-router-dom'\nimport './Header.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\nexport interface HeaderProps {\n    breadcrumbs: JSX.Element\n    buttons?: JSX.Element\n    test?: string\n    // history: History.History\n}\n\ninterface HeaderState {\n    currentMenuItem: string\n}\n\ninterface MenuProps {\n    currentItem: string\n}\n// const TopMenu = withRouter<MenuProps>(({ history }) => {\n//         function doNavigate(key: string) {\n//             switch (key) {\n//                 case 'myorgs':\n//                     history.push('/dashboard')\n//                 case 'allorgs':\n//                     history.push('/organizations')\n//             }\n//         }\n//         return (\n//             <Menu\n//                 onClick={(e: ClickParam) => { doNavigate(e.key) }}\n//                 selectedKeys={[this.state.currentMenuItem]}\n//                 mode=\"horizontal\"\n//             >\n//                 <Menu.Item key=\"myorgs\">\n//                     My Organizations\n//                 </Menu.Item>\n//                 <Menu.Item key=\"allorgs\">\n//                     All Organizations\n//                 </Menu.Item>\n//             </Menu>\n//         )\n//     })\n// }\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n\n    constructor(props: HeaderProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n    // <FaChevronRight style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n    buildSeparator() {\n        if (this.props.breadcrumbs) {\n            return (\n                <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n            )\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"Header-contextual\">\n                    <div className=\"Header-userColumn\">\n                        <div className=\"Header-breadcrumbs\">\n                            {this.props.breadcrumbs}\n                        </div>\n                        <div className=\"Header-buttons\">\n                            {this.props.buttons}\n                        </div>\n                        {/* {this.props.children} */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport { AppError, StoreState, ViewOrgViewModelKind } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as uberModel from '../../../data/models/uber'\nimport { AnError, makeError } from '../../../lib/error'\nimport { reload as reloadOrg } from '../viewOrg'\n\n// LOADING\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR\n    error: AppError\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n        organization: organization,\n        relation: relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                }))\n                return\n            }\n            dispatch(loadSuccess(organization, relation))\n\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Promoting member to admin\n\nexport interface PromoteToAdmin extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n}\n\nexport interface PromoteToAdminSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n    error: AppError\n}\n\n\nexport function promoteToAdminStart(): PromoteToAdminStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n    }\n}\n\nexport function promoteToAdminSuccess(memberUsername: string): PromoteToAdminSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n        memberUsername\n    }\n}\n\nexport function promoteToAdminError(error: AppError): PromoteToAdminError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n        error: error\n    }\n}\n\nexport function promoteToAdmin(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(promoteToAdminStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.memberToAdmin(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(promoteToAdminSuccess(memberUsername))\n            })\n            .catch((err: Error) => {\n                dispatch(promoteToAdminError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Demote admin to member\n\nexport interface DemoteToMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n}\n\nexport interface DemoteToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n    error: AppError\n}\n\n\nexport function demoteToMemberStart(): DemoteToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n    }\n}\n\nexport function demoteToMemberSuccess(memberUsername: string): DemoteToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n        memberUsername: memberUsername\n    }\n}\n\nexport function demoteToMemberError(error: AppError): DemoteToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteToMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(demoteToMemberSuccess(memberUsername))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteToMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Remove a member\n\nexport interface RemoveMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    memberUsername: string\n}\n\ninterface RemoveMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n}\n\nexport interface RemoveMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    memberUsername: orgModel.Username\n}\n\ninterface RemoveMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n    error: AppError\n}\n\nfunction removeMemberStart(): RemoveMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n    }\n}\n\nfunction removeMemberSuccess(memberUsername: orgModel.Username): RemoveMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n        memberUsername\n    }\n}\n\nfunction removeMemberError(error: AppError): RemoveMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function removeMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.removeMember(viewModel.organization.id, memberUsername)\n            .then(() => {\n                // dispatch(removeMemberSuccess(memberUsername))\n                // dispatch(load(viewModel.organization.id))\n                dispatch(reloadOrg(viewModel.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(removeMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// SORT MEMBERS\n\nexport interface SortMembers {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS,\n    sortBy: string\n}\n\nexport interface SortMembersStart {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n}\n\nexport interface SortMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    sortBy: string\n}\n\nexport interface SortMembersError {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR\n    error: AnError\n}\n\n\n\nexport function sortMembers(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS,\n            members: sorted,\n            sortBy\n        })\n\n    }\n}\n\n// SEARCH MEMBERS\n\nexport interface SearchMembers {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS,\n    searchBy: string\n}\n\nexport interface SearchtMembersStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_START\n}\n\nexport interface SearchMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    searchBy: string\n}\n\nexport interface SearchMembersError {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_ERROR\n    error: AnError\n}\n\nexport function searchMembers(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n            searchBy: searchBy,\n            members: sorted\n        })\n\n    }\n}","import * as React from 'react'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon, Tooltip } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\n\nimport './Member.css'\nimport NiceElapsedTime from '../NiceElapsedTime';\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface MemberProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface MemberState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nclass Member extends React.Component<MemberProps, MemberState> {\n    constructor(props: MemberProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-COMPACT\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-NORMAL\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                    <div className=\"Member-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Member-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n}\n\nexport default Member","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Member from './Member'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Member member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading member...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.member.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Alert, Card, Menu, Icon, Dropdown, Modal, Input, Select } from 'antd'\nimport Member from '../../../../entities/MemberContainer'\nimport './component.css'\nimport { organizationLoader } from '../../../../../redux/actions/entities';\n\nexport interface MembersProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n    onPromoteMemberToAdmin: (username: string) => void\n    onRemoveMember: (username: string) => void\n    onDemoteAdminToMember: (username: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n    onReloadOrg: (id: string) => void\n}\n\ninterface MembersState {\n    confirmMemberRemoval: {\n        member: orgModel.Member\n    } | null\n}\n\nexport default class Members extends React.Component<MembersProps, MembersState> {\n    constructor(props: MembersProps) {\n        super(props)\n        this.state = {\n            confirmMemberRemoval: null\n        }\n    }\n\n    onConfirmRemoveMember(member: orgModel.Member) {\n        this.setState({\n            confirmMemberRemoval: {\n                member: member\n            }\n        })\n    }\n\n    renderConfirmMemberRemoval() {\n        if (!this.state.confirmMemberRemoval) {\n            return\n        }\n        const member = this.state.confirmMemberRemoval.member\n        const confirmed = (() => {\n            this.props.onRemoveMember(member.username)\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const canceled = (() => {\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const title = 'Confirm Removal of Member'\n        const content = (\n            <React.Fragment>\n                <p>\n                    Please confirm removal of this member from this organization.\n                </p>\n                <div className=\"SimpleCard\" style={{ marginBottom: '1em' }}>\n                    <Member member={member} avatarSize={20} />\n                </div>\n                <p>\n                    This user as well as members of this organization will receive a notification\n                    of the removal.\n                </p>\n                <p>\n                    Any Narratives associated by this member with this Organization will be unaffected. This member\n                    will also retain any Narrative permissions granted through this Organization.\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <Modal\n                title={title}\n                width=\"50em\"\n                visible={true}\n                onOk={() => { confirmed() }}\n                onCancel={() => { canceled() }}\n                okText=\"Confirm\">\n                {content}\n            </Modal>\n        )\n    }\n\n    onMemberMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'promoteToAdmin':\n                this.props.onPromoteMemberToAdmin(member.username)\n                break\n            case 'removeMember':\n                this.onConfirmRemoveMember(member)\n                break\n        }\n    }\n\n    onAdminMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'demoteToMember':\n                this.props.onDemoteAdminToMember(member.username)\n                break\n        }\n    }\n\n    renderMemberMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onMemberMenu.call(this, key, member) }}>\n                <Menu.Item key=\"promoteToAdmin\" >\n                    <Icon type=\"unlock\" />Promote to Admin\n                </Menu.Item>\n                <Menu.Item key=\"removeMember\" >\n                    <Icon type=\"delete\" />Remove Member\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderAdminMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, member) }}>\n                <Menu.Item key=\"demoteToMember\">\n                    <Icon type=\"user\" />Demote to Member\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderOwnerMenu(member: orgModel.Member) {\n        return (\n            <div></div>\n        )\n    }\n\n    renderMemberOptions(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n\n        switch (member.type) {\n            case orgModel.MemberType.OWNER:\n                return this.renderOwnerMenu(member)\n            case orgModel.MemberType.ADMIN:\n                return this.renderAdminMenu(member)\n            case orgModel.MemberType.MEMBER:\n                return this.renderMemberMenu(member)\n        }\n    }\n\n    renderMembers() {\n        let members: JSX.Element | Array<JSX.Element>\n        const message = (\n            <div style={{ fontStyle: 'italic', textAlign: 'center' }}>\n                No members\n            </div>\n        )\n\n        if (this.props.members.length === 0) {\n            members = (\n                <Alert type=\"info\" message={message} />\n            )\n        } else {\n            members = this.props.members.map((member) => {\n                let isNew: boolean\n                if (this.props.organization.lastVisitedAt === null) {\n                    isNew = false\n                } else {\n                    isNew = this.props.organization.lastVisitedAt.getTime() < member.joinedAt.getTime()\n                }\n                const classNames = ['Members-row', 'SimpleCard']\n                if (isNew) {\n                    classNames.push('Members-newMember')\n                }\n                return (\n                    <div className={classNames.join(' ')} key={member.username}>\n                        <div className=\"Members-member\">\n                            <Member member={member} avatarSize={50} />\n                        </div>\n                        <div className=\"Members-menu\">\n                            {this.renderMemberOptions(member)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        return (\n            <div className=\"infoTable\">\n                {members}\n            </div>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchMembers(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter members by name\"\n                    onChange={doChange} />\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortMembers(value)\n        }\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortMembersBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Joined</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderHeader() {\n        return (\n            <div className=\"ViewOrganizationMembers-headerRow\">\n                <div className=\"ViewOrganizationMembers-searchCol\">\n                    {this.renderSearchBar()}\n                </div>\n                <div className=\"ViewOrganizationMembers-sortCol\">\n                    {this.renderSortBar()}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let confirm\n        if (this.state.confirmMemberRemoval) {\n            confirm = this.renderConfirmMemberRemoval()\n        }\n        return (\n            <React.Fragment>\n                <div className=\"ViewOrganizationMembers scrollable-flex-column\">\n                    <div className=\"ViewOrganizationMembers-header\">\n                        {this.renderHeader()}\n                    </div>\n                    <div className=\"ViewOrganizationMembers-body scrollable-flex-column\">\n                        {this.renderMembers()}\n                    </div>\n                </div>\n                {confirm}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/viewMembers'\nimport ViewMembers from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    onReloadOrg: (id: string) => void\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onViewMembersUnload: () => void,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewMembersUnload: () => {\n            dispatch(actions.unload() as any)\n        },\n        onPromoteMemberToAdmin: (memberUsername: string) => {\n            dispatch(actions.promoteToAdmin(memberUsername) as any)\n        },\n        onDemoteAdminToMember: (adminUsername: string) => {\n            dispatch(actions.demoteToMember(adminUsername) as any)\n        },\n        onRemoveMember: (memberUsername: string) => {\n            dispatch(actions.removeMember(memberUsername) as any)\n        },\n        onSearchMembers: (searchBy: string) => {\n            dispatch(actions.searchMembers(searchBy) as any)\n        },\n        onSortMembers: (sortBy: string) => {\n            dispatch(actions.sortMembers(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembers)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\n\n// Reject inbound request\n\nexport interface RejectRequestAction<T> extends Action<T> {\n}\n\nexport interface RejectInboxRequest extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface RejectInboxRequestStart extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n}\n\nexport interface RejectInboxRequestSuccess extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\ninterface RejectInboxRequestError extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function denyRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, RejectRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.denyRequest(requestId)\n\n            // refetch the outbox\n            const inbox = await requestClient.getRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            } as RejectInboxRequestSuccess)\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    ViewOrgViewModelKind\n} from '../../../types'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError, makeError } from '../../../lib/error'\n\nexport interface CancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface CancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface CancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\nexport interface CancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: AnError\n}\n\nexport function cancelRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.cancelRequest(requestId)\n            const requests: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n                requests\n            } as CancelJoinRequestSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            } as CancelJoinRequestError)\n        }\n    }\n}","import * as React from 'react'\nimport './User.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Button, Icon } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\ninterface UserState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nfunction viewLabel(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return 'Compact'\n        case View.NORMAL:\n            return 'Normal'\n    }\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderCompact() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { Tooltip, Icon, Alert } from 'antd';\nimport './Narrative.css'\nimport UserSimple from './UserContainer';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let label\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                label = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                label = (\n                    <span>Edit (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                label = 'Admin'\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                label = 'Owner'\n                break\n            default:\n                label = 'Unknown'\n        }\n        return (\n            <span>\n                {label}\n            </span>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"Narrative-title\">\n                        <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                            {narrative.title}\n                        </a>\n                    </div>\n                    {' '}\n                    <div className=\"Narrative-owner\">\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n        // const narrative = this.props.narrative\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"mainCol\">\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {' '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    {/* <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            <Icon type=\"crown\" />\n                        </div>\n                        <div className=\"Narrative-global\">\n                            <Icon type=\"global\" />\n                        </div>\n                    </div> */}\n                    <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div>\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>{narrative.lastSavedBy}\n                    </div>\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    <Icon type=\"exclamation-circle\" style={{ color: 'orange' }} />\n                    {' '}\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact(narrative)}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal(narrative)}\n                    </div>\n                )\n        }\n\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as orgModel from '../../data/models/organization/model'\nimport Narrative from './Narrative'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types'\nimport * as actions from '../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport * as appModel from '../../../data/models/apps'\nimport './component.css'\nimport { Icon } from 'antd'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport interface AppProps {\n    app: appModel.AppFullInfo // for now, we'll switch to full app soon\n}\n\ninterface AppState {\n    view: View\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderIcon() {\n        if (!this.props.app.icon.url) {\n            return (\n                // <div className=\"fa-layers fa-fw\">\n                //     <FontAwesomeIcon icon=\"square\" size=\"3x\" style={{ color: 'rgb(103, 58, 103)' }} />\n                //     <FontAwesomeIcon icon=\"cube\" size=\"3x\" inverse transform=\"shrink-4 left-1\" />\n                // </div>\n                <Icon type=\"border\" style={{ fontSize: '30px', color: 'rgb(103, 58, 103)' }} />\n            )\n        }\n        return (\n            <img src={this.props.app.icon.url} className=\"App-icon\" />\n        )\n    }\n\n    renderAuthors() {\n        const authorCount = this.props.app.authors.length\n        return this.props.app.authors\n            .map((authorUsername, index) => {\n                let sep\n                if (index < authorCount - 1) {\n                    sep = ', '\n                }\n                return (\n                    <a href={`#people/${authorUsername}`} key={authorUsername}>\n                        {authorUsername}{sep}\n                    </a>\n                )\n            })\n    }\n\n    renderViewControl() {\n        return (\n            <a onClick={this.onToggleView.bind(this)}\n                className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n            >\n                <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n            </a>\n        )\n    }\n\n\n    renderCompact() {\n        return (\n            <div className='App'>\n                <div className=\"App-controlCol\">\n                    {this.renderViewControl()}\n                </div>\n                <div className=\"App-iconCol\">\n                    {this.renderIcon()}\n                </div>\n                <div className=\"App-appCol\">\n                    <div className='App-name'>\n                        <a href={\"/#catalog/apps/\" + this.props.app.id} target=\"_blank\">\n                            {this.props.app.name}\n                        </a>\n                    </div>\n                    <div className=\"App-subtitle\">\n                        {this.props.app.subtitle}\n                    </div>\n                    {/* <div className=\"App-moduleName\">\n                        <span className=\"field-label\">module</span>{this.props.app.moduleName}\n                    </div>\n                    <div className=\"App-authors\">\n                        <span className=\"field-label\">by</span> {this.renderAuthors()}\n                    </div> */}\n                </div>\n\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className='App'>\n                <div className=\"App-controlCol\">\n                    {this.renderViewControl()}\n                </div>\n                <div className=\"App-iconCol\">\n                    {this.renderIcon()}\n                </div>\n                <div className=\"App-appCol\">\n                    <div className='App-name'>\n                        <a href={\"/#catalog/apps/\" + this.props.app.id} target=\"_blank\">\n                            {this.props.app.name}\n                        </a>\n                    </div>\n                    <div className=\"App-subtitle\">\n                        {this.props.app.subtitle}\n                    </div>\n                    <div className=\"App-moduleName\">\n                        <span className=\"field-label\">module</span>{this.props.app.moduleName}\n                    </div>\n                    <div className=\"App-authors\">\n                        <span className=\"field-label\">by</span> {this.renderAuthors()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}","import * as React from 'react'\nimport * as appModel from '../../../data/models/apps'\nimport App from './component'\n\ninterface LoaderProps {\n    appId: appModel.AppID\n    // TODO: don't really like AppFullInfo - as a name\n    app: appModel.AppFullInfo | undefined\n    onLoad: (appId: appModel.AppID) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.app) {\n            return (\n                <App app={this.props.app} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" /> Loading App...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.app) {\n            this.props.onLoad(this.props.appId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types';\nimport * as actions from '../../../redux/actions/entities'\nimport { Icon } from 'antd';\n\n\nexport interface OwnProps {\n    appId: appModel.AppID\n}\n\ninterface StateProps {\n    app: appModel.AppFullInfo | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (appId: appModel.AppID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        app: state.entities.apps.byId.get(props.appId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (appId: appModel.AppID) => {\n            dispatch(actions.loadApp(appId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer'\nimport User from '../../../../entities/UserContainer'\nimport { Button, Icon } from 'antd'\nimport './InboxRequest.css'\nimport App from '../../../../entities/app/loader'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    onAcceptRequest() {\n        this.props.onAcceptInboxRequest(this.props.request)\n    }\n\n    onRejectRequest() {\n        this.props.onRejectInboxRequest(this.props.request)\n    }\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requestSubject\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n\n    renderAppRequest(request: requestModel.AppRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate App\n                </div>\n\n                <div className=\"miniDetail\">\n                    {/* <Narrative workspaceId={parseInt(request.narrativeId, 10)} /> */}\n                    <div>\n                        <App appId={request.appId} />\n                    </div>\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"default\" onClick={this.onAcceptRequest.bind(this)}>\n                        <Icon type=\"check\" />\n                        Accept\n                        </Button>\n                    <Button type=\"danger\" onClick={this.onRejectRequest.bind(this)}>\n                        <Icon type=\"cross\" />\n                        Reject\n                        </Button>\n                    {/* <Button>\n                            <Icon type=\"eye\" />\n                            Visit\n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div>\n\n                <div className=\"cardSectionHeader\">\n                    from\n                </div>\n                <User userId={request.requester} avatarSize={30} />\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return this.renderAppRequest(request)\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"InboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"InboxRequest-requestHeaderRow\">\n                        <div className=\"InboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"InboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport InboxRequest from './InboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptInboxRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onRejectInboxRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InboxRequest)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './OutboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    // renderRequestSentType(request: requestModel.Request) {\n    //     switch (request.type) {\n    //         case requestModel.RequestType.REQUEST:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.APP:\n    //                     return 'REQUEST to associate App'\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'REQUEST to join Organization'\n    //                 case requestModel.RequestResourceType.WORKSPACE:\n    //                     return 'REQUEST to associate Narrative'\n    //             }\n    //         case requestModel.RequestType.INVITATION:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'INVITATION to join Organization'\n    //             }\n    //     }\n    //     return 'unknown request'\n    // }\n\n    onCancelRequest() {\n        this.props.onCancelOutboxRequest(this.props.request)\n    }\n\n    onAcceptInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n    onAcceptRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <User userId={request.user} avatarSize={30} />\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderAppRequest(request: requestModel.AppRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate App\n                </div>\n\n                <div className=\"miniDetail\">\n                    Apps not supported yet\n                    {/* <Narrative workspaceId={parseInt(request.narrativeId, 10)} /> */}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"danger\" onClick={this.onCancelRequest.bind(this)}>\n                        <Icon type=\"cross\" />Cancel\n                        </Button>\n                    {/* <Button onClick={this.onVisitOrg.bind(this)}>\n                            <Icon type=\"eye\" />Visit \n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    sent to\n                </div>\n\n                <div className=\"miniDetail\">\n                    {this.renderRequestReceivedSubject(request)}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return this.renderAppRequest(request)\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"OutboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"OutboxRequest-requestHeaderRow\">\n                        <div className=\"OutboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"OutboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as cancelActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport OutboxRequest from './OutboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(cancelActions.cancelRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(OutboxRequest)","import * as React from 'react'\n\nimport './component.css'\nimport Header from '../../../../Header'\nimport { Icon, Button, Modal, Card, Alert } from 'antd'\nimport User from '../../../../entities/UserContainer'\nimport Narrative from '../../../../entities/NarrativeContainer'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { niceElapsed } from '../../../../../lib/time'\nimport InboxRequest from './InboxRequestContainer'\nimport OutboxRequest from './OutboxRequestContainer'\n\nexport interface RequestsProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n    // organizationId: string,\n    // viewModel: types.\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nexport interface RequestsState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageGroupRequests extends React.Component<RequestsProps, RequestsState> {\n\n    constructor(props: RequestsProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n\n        // this.props.onStart(this.props.organizationId)\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n    onAcceptJoinRequest(request: requestModel.Request) {\n        this.props.onAcceptJoinRequest(request)\n    }\n    onDenyJoinRequest(request: requestModel.Request) {\n        this.props.onDenyJoinRequest(request)\n    }\n    onCancelJoinInvitation(request: requestModel.Request) {\n        this.props.onCancelJoinInvitation(request)\n    }\n    onGetViewAccess(request: requestModel.Request) {\n        this.props.onGetViewAccess(request)\n    }\n    onViewProfile(username: string) {\n        window.open('/#people/' + username, '_blank')\n    }\n    onShowInfo() {\n        Modal.info({\n            title: 'Manage Requests Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the manage requests tool...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderRequestJoinRequest(request: requestModel.UserRequest) {\n        const title = (\n            <span>\n                <Icon type=\"user\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestJoinInvitation(request: requestModel.UserInvitation) {\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                <Icon type=\"mail\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"user\" />\n\n                {' '}\n                Invitation to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onCancelJoinInvitation.call(this, request)}>\n                Cancel\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>invitation to</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.user} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderNarrativePermission(permission: orgModel.UserWorkspacePermission) {\n        switch (permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                return 'None'\n            case orgModel.UserWorkspacePermission.VIEW:\n                return 'View Only'\n            // return 'View and Copy'\n            case orgModel.UserWorkspacePermission.EDIT:\n                return 'Edit'\n            // return 'View, Copy, Save, Run'\n            case orgModel.UserWorkspacePermission.ADMIN:\n                return 'Admin'\n            // return 'View, Copy, Save, Run, Manage Sharing'\n            case orgModel.UserWorkspacePermission.OWNER:\n                return 'Owner'\n            // return 'View, Copy, Save, Run, Manage Sharing, Own'\n        }\n    }\n\n    renderRequestNarrativeRequest(request: requestModel.WorkspaceRequest) {\n        const title = (\n            <span>\n                <Icon type=\"file\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Associate Narrative\n            </span>\n        )\n\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        let narrativeAccess\n        narrativeAccess = (\n            <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n        )\n        // TODO: Revive me!!\n        // if (request.narrativeId) {\n        //     // TODO: note the '1' below -- we dont' get the object id from the groups service,\n        //     // and the narrative will soon accept just the workspace id (and will look up the object id by itself)\n        //     // but not yet, so we just use 1, which is INCORRECT.\n        //     narrativeAccess = (\n        //         <div>\n        //             <div>\n        //                 <a href={\"/narrative/ws.\" + request.narrativeId + '.obj.' + '1'} target=\"_blank\">{request.title}</a>\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">your access</span>{' '}{this.renderNarrativePermission(request.narrative.permission)}\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">public?</span>{' '}{request.isPublic ? 'yes' : 'no'}\n        //             </div>\n\n        //         </div>\n        //     )\n        // } else {\n        //     narrativeAccess = (\n        //         <span>\n        //             You don't have access to this narrative\n        //             {' '}\n        //             <Button\n        //                 onClick={() => { this.onGetViewAccess.call(this, request.id) }}>\n        //                 Click for View Access\n        //             </Button>\n        //         </span>\n        //     )\n        // }\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>narrative</th>\n                            <td className=\"Requests-narrative\">\n                                {narrativeAccess}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestAppRequest(request: requestModel.AppRequest) {\n        const title = (\n            <span>\n                <Icon type=\"appstore\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add App\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>app</th>\n                            <td className=\"Requests-requester\">\n                                {request.appId}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderInbox() {\n        let inbox\n        if (this.props.inbox.length === 0) {\n            inbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.inbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <InboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            inbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {inbox}\n            </React.Fragment>\n        )\n    }\n\n    renderOutbox() {\n        let outbox\n        if (this.props.outbox.length === 0) {\n            outbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.outbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <OutboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            outbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {outbox}\n            </React.Fragment>\n        )\n    }\n\n    isAdmin(relation: orgModel.Relation): boolean {\n        return (\n            relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER\n        )\n    }\n\n    render() {\n        if (this.isAdmin(this.props.relation)) {\n            const outboxCount = this.props.outbox.length\n            const inboxCount = this.props.inbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">inbox ({inboxCount})</div>\n                    {this.renderInbox()}\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        } else {\n            const outboxCount = this.props.outbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        }\n    }\n}\n\nexport default ManageGroupRequests\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport * as cancelRequestActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {}\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptJoinRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onDenyJoinRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        },\n        onCancelJoinInvitation: (request: requestModel.Request) => {\n            dispatch(cancelRequestActions.cancelRequest(request.id) as any)\n        },\n        onGetViewAccess: (request: requestModel.Request) => {\n            // dispatch(actions.getViewAccess(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n\n","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from '../../../OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal, Button } from 'antd'\nimport Owner from '../../../entities/OwnerContainer'\nimport { ComponentView, SubViews } from '../../../../types'\nimport NiceElapsedTime from '../../../NiceElapsedTime'\nimport './BriefOrganizationHeader.css'\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n    orgMenu: JSX.Element\n    onNavigateToBrowser: () => void\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganizationHeader-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganizationHeader-statusRow\">\n                    <div className=\"BriefOrganizationHeader-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganizationHeader-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-freshnessRow\">\n                    <div className=\"BriefOrganizationHeader-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        const lastUpdatedTooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n            </span>\n        )\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-orgName BriefOrganizationHeader-infoTableRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {org.name}\n                    </NavLink>\n                </div>\n\n                <div className=\"BriefOrganizationHeader-researchInterests BriefOrganizationHeader-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\">updated</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} tooltipPrefix=\"This organization was last updated \" />\n                    </div>\n                </div>\n            </React.Fragment >\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderButtonsRow() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    {this.props.orgMenu}\n                </div>\n            </div>\n        )\n    }\n\n    renderBackButton() {\n        // return (\n        //     <div className=\"IconButton\"\n        //         onClick={this.props.onNavigateToBrowser}\n        //         style={{ color: 'rgba(145, 43, 43, 1)' }}>\n        //         back\n        //     </div>\n        // )\n\n        return (\n            <Button type=\"danger\" onClick={this.props.onNavigateToBrowser}>\n                back\n            </Button>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <div className=\"BriefOrganizationHeader-buttonsCol\">\n                <div className=\"BriefOrganizationHeader-buttonsRow\" style={{ marginBottom: '10px' }}>\n                    <div className=\"ButtonSet\">\n                        {this.renderBackButton()}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-buttonsRow\">\n                    {this.renderButtonsRow()}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganizationHeader-body\">\n                    <div className=\"BriefOrganizationHeader-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoCol\">\n\n                        <div className=\"BriefOrganizationHeader-infoCol-row\">\n                            <div className=\"BriefOrganizationHeader-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganizationHeader-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { Tooltip } from 'antd';\nimport './component.css'\nimport OrgLogo from '../../OrgLogo';\nimport Owner from '../OwnerContainer';\nimport { NavLink } from 'react-router-dom';\n\nexport interface OrganizationProps {\n    organization: orgModel.Organization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderLogo(org: orgModel.Organization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={30} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    render() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationEntity-Accessible \">\n                <div className=\"OrganizationEntity-Accessible-logoCol\">\n                    {this.renderLogo(org)}\n                </div>\n                <div className=\"OrganizationEntity-Accessible-mainCol\">\n                    <div className=\"OrganizationEntity-Accessible-name\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-researchInterests\">\n                        {org.researchInterests}\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-owner\">\n                        <Owner username={org.owner.username} showAvatar={false} avatarSize={20} />\n                    </div>\n                    {/* <div className=\"OrganizationEntity-Accessible-createdAt\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport './Inaccessible.css'\nimport { Icon } from 'antd';\n\nexport interface OrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationEntity-Inaccessible \">\n                <div className=\"OrganizationEntity-Inaccessible-logoCol\">\n                    <Icon type=\"lock\" />\n                </div>\n                <div className=\"OrganizationEntity-Inaccessible-mainCol\">\n                    <div className=\"OrganizationEntity-Inaccessible-name\">\n                        Private Organization\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","// The loader component\n\nimport * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport Organization from './component'\nimport InaccessibleOrganization from './Inaccessible'\n\ninterface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.organization) {\n            switch (this.props.organization.kind) {\n                case orgModel.OrganizationKind.NORMAL:\n                    return (\n                        <Organization organization={this.props.organization} />\n                    )\n                case orgModel.OrganizationKind.INACCESSIBLE_PRIVATE:\n                    return (\n                        <InaccessibleOrganization organization={this.props.organization} />\n                    )\n                default:\n                    return (\n                        <div>\n                            Error: unrecognized org kind\n                        </div>\n                    )\n            }\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.organization) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n}\n\n// The loader redux adapter\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities/organization'\nimport { Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        organization: state.entities.organizations.byId.get(props.organizationId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.OrganizationEntityAction>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error';\n\nexport interface OrganizationEntityAction extends Action {\n\n}\n\n// Organization\n\nexport interface Load extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD\n}\n\ninterface LoadStart extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS\n    organization: orgModel.Organization\n}\n\ninterface LoadError extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR\n    error: AnError\n}\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, OrganizationEntityAction>, getState: () => StoreState) => {\n        dispatch(<LoadStart>{\n            type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const organization = await orgClient.getOrg(organizationId)\n            dispatch(<LoadSuccess>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS,\n                organization\n            })\n        } catch (ex) {\n            dispatch(<LoadError>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR,\n                error: makeError({\n                    code: ex.name,\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Button, Menu, Dropdown, Icon, Alert } from 'antd'\nimport OrganizationEntity from '../../../../entities/organization/loader'\nimport { withRouter, NavLink } from 'react-router-dom'\nimport './component.css'\n\nexport interface RelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\ninterface RelatedOrganizationsState {\n}\n\nexport default class RelatedOrganizations extends React.Component<RelatedOrganizationsProps, RelatedOrganizationsState> {\n    constructor(params: RelatedOrganizationsProps) {\n        super(params)\n    }\n\n    onManageRelatedOrgs() {\n        this.props.onManageRelatedOrgs()\n    }\n\n    renderToolbar() {\n        return (\n            <div className=\"RelatedOrganizations-toolbar\">\n                <Button onClick={this.onManageRelatedOrgs.bind(this)}>\n                    Add Related Org\n                </Button>\n            </div>\n        )\n    }\n\n    onAdminMenu(key: string, organizationId: orgModel.OrganizationID) {\n        switch (key) {\n            case 'removeRelation':\n                // this.props.onDemoteAdminToMember(member.username)\n                this.props.onRemoveRelatedOrganization(this.props.organization.id, organizationId)\n                // window.alert('will remove relation for org: ' + organizationId)\n                break\n        }\n    }\n\n    renderControls(organizationId: orgModel.OrganizationID) {\n        if (!this.props.organization.isAdmin) {\n            return\n        }\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, organizationId) }}>\n                <Menu.Item key=\"removeRelation\">\n                    <Icon type=\"delete\" />Remove\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderBody() {\n        if (this.props.relatedOrganizations.length === 0) {\n            const message = (\n                <p>\n                    No related organizations\n                </p>\n            )\n            return (\n                <Alert type=\"info\" message={message} />\n            )\n        }\n        const Wrapped = withRouter<any>(OrganizationEntity)\n        const relatedOrgs = this.props.relatedOrganizations.map((organizationId: string) => {\n            return (\n                <div key={organizationId} className=\"RelatedOrganizations-orgRow SimpleCard\">\n                    {/* <RelatedOrganization organizationId={org} /> */}\n\n                    <div className=\"RelatedOrganizations-orgCol\">\n                        <Wrapped organizationId={organizationId} />\n                    </div>\n                    <div className=\"RelatedOrganizations-controlCol\">\n                        {this.renderControls(organizationId)}\n                    </div>\n                </div>\n            )\n        });\n        return (\n            <div className=\"RelatedOrganizations-organizations\">\n                {relatedOrgs}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"RelatedOrganizations scrollable-flex-column\">\n                {/* <div className=\"RelatedOrganizations-toolbarRow\">\n                    {this.renderToolbar()}\n                </div> */}\n                <div className=\"RelatedOrganizations-bodyRow scrollable-flex-column\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/relatedOrganizations'\nimport Component from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\n\n// Add Org\n\n// export interface AddOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n// }\n\n// export interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//     error: AnError\n// }\n\n// export function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n//     return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n//         dispatch({\n//             type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n//         } as AddOrganizationStart)\n\n//         const {\n//             auth: { authorization: { token, username } },\n//             app: { config },\n//             views: {\n//                 viewOrgView: { viewModel }\n//             }\n//         } = getState()\n//         if (viewModel === null) {\n//             throw new Error('view is not populated')\n//         }\n//         const orgClient = new orgModel.OrganizationModel({\n//             token, username,\n//             groupsServiceURL: config.services.Groups.url\n//         })\n//         try {\n//             await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//                 organizationId\n//             })\n//         } catch (ex) {\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//                 error: makeError({\n//                     code: 'error',\n//                     message: ex.message\n//                 })\n//             })\n//         }\n//     }\n// }\n\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport { BriefOrganization } from '../../../../../data/models/organization/model'\nimport './AvailableOrganization.css'\nimport OrgLogo from '../../../../OrgLogo'\nimport Owner from '../../../../entities/OwnerContainer'\nimport { SelectableRelatableOrganization } from '../../../../../types';\nimport { Icon } from 'antd';\n\nexport interface AvailableOrganizationProps {\n    selectableOrganization: SelectableRelatableOrganization\n    // onSelectOrganization: (org: BriefOrganization) => void\n    // onAddOrganization: (org: BriefOrganization) => void\n}\n\nexport interface AvailableOrganizationState {\n}\n\nexport default class AvailableOrganization extends React.Component<AvailableOrganizationProps, AvailableOrganizationState> {\n    constructor(props: AvailableOrganizationProps) {\n        super(props)\n    }\n\n    renderRelated() {\n        if (this.props.selectableOrganization.isRelated) {\n            return (\n                <Icon type=\"check\" style={{ color: \"green\" }} />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"AvailableOrganization\">\n                <div className=\"AvailableOrganization-relatedCol\">\n                    {this.renderRelated()}\n                </div>\n                <div className=\"AvailableOrganization-orgCol\">\n                    <div className=\"AvailableOrganization-logoCol\">\n                        <OrgLogo logoUrl={this.props.selectableOrganization.organization.logoUrl}\n                            size={30}\n                            organizationName={this.props.selectableOrganization.organization.name}\n                            organizationId={this.props.selectableOrganization.organization.id} />\n                    </div>\n                    <div className=\"AvailableOrganization-orgInfoCol\">\n                        <div className=\"AvailableOrganization-name\">{this.props.selectableOrganization.organization.name}</div>\n                        <div className=\"AvailableOrganization-owner\">\n                            <Owner username={this.props.selectableOrganization.organization.owner.username}\n                                avatarSize={20} showAvatar={false} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"AvailableOrganization-actionCol\"></div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\nimport { Button, Icon, Input, Alert } from 'antd';\nimport AvailableOrganization from './AvailableOrganization'\nimport BriefOrganization from '../../../../BriefOrganization';\nimport { SelectableRelatableOrganization } from '../../../../../types';\n\nexport interface ManageRelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<string>\n    // relation: orgModel.Relation\n    selectedOrganization: SelectableRelatableOrganization | null\n    organizations: Array<SelectableRelatableOrganization>\n    onFinish: () => void\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\ninterface ManageRelatedOrganizationsState {\n\n}\n\nexport default class ManageRelatedOrganizations extends React.Component<ManageRelatedOrganizationsProps, ManageRelatedOrganizationsState> {\n    constructor(props: ManageRelatedOrganizationsProps) {\n        super(props)\n    }\n\n    onAddSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onAddOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onRemoveSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onRemoveOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onSearch(e.target.value)\n    }\n\n    renderAvailableToolbar() {\n        return (\n            <div className=\"ManageRelatedOrganizations-available-toolbar\">\n                <Input placeholder=\"Filter Available Organizations\" onChange={this.onFilterChange.bind(this)} />\n            </div>\n        )\n    }\n\n    renderAvailableOrgs() {\n        return this.props.organizations.map((org: SelectableRelatableOrganization) => {\n            const selectOrg = () => {\n                this.props.onSelectOrganization(org)\n            }\n            let classes = ['SimpleCard', 'ManageRelatedOrganizations-availableOrganization']\n            if (org.isSelected) {\n                classes.push('ManageRelatedOrganizations-selected')\n            }\n            return (\n                <div className={classes.join(' ')} onClick={selectOrg} key={org.organization.id} >\n                    <AvailableOrganization selectableOrganization={org} />\n                </div>\n            )\n        })\n    }\n\n    renderSelectedOrg() {\n        let button\n        let content\n        let alert\n        let alertStyle = {\n            marginBottom: '4px'\n        }\n        if (!this.props.selectedOrganization) {\n            const message = (\n                <React.Fragment>\n                    <p>\n                        When you select an organization on the left, details about it will be displayed here.\n                    </p>\n                </React.Fragment>\n            )\n            alert = (\n                <Alert type=\"info\" message={message} style={alertStyle} />\n            )\n            button = (\n                <Button\n                    type=\"primary\"\n                    disabled={this.props.selectedOrganization === null}\n                    onClick={this.onAddSelectedOrganization.bind(this)}>\n                    Add Organization\n                </Button>\n            )\n        } else {\n            content = (\n                <div className=\"ManageRelatedOrganizations-selectedOrganization\">\n                    <BriefOrganization organization={this.props.selectedOrganization.organization} openRequestsStatus={null} />\n                </div>\n            )\n            if (this.props.selectedOrganization.isRelated) {\n                alert = (\n                    <Alert type=\"warning\" message=\"This org is associated\" style={alertStyle} />\n                )\n                button = (\n                    <Button\n                        type=\"danger\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onRemoveSelectedOrganization.bind(this)}>\n                        Remove Organization\n                    </Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onAddSelectedOrganization.bind(this)}>\n                        Add Organization\n                    </Button>\n                )\n            }\n        }\n\n        return (\n            <React.Fragment>\n                {alert}\n                {content}\n                <div className=\"ManageRelatedOrganizations-buttonBar\">\n                    {button}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageRelatedOrganizations scrollable-flex-column\">\n                <div className=\"ManageRelatedOrganizations-toolbar\">\n                    <Button onClick={() => this.props.onFinish()} type=\"danger\">\n                        <Icon type=\"rollback\" />\n                        {' '}\n                        Done\n                    </Button>\n                </div>\n                <div className=\"ManageRelatedOrganizations-main scrollable-flex-column\">\n                    <div className=\"ManageRelatedOrganizations-availableOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Available Organizations</h3>\n                        {this.renderAvailableToolbar()}\n                        <div className=\"ManageRelatedOrganizations-organizations\">\n                            {this.renderAvailableOrgs()}\n                        </div>\n                    </div>\n                    <div className=\"ManageRelatedOrganizations-relatedOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Selected Organization</h3>\n                        {this.renderSelectedOrg()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport ManageRelatedOrganizations from './component'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    organizations: Array<SelectableRelatableOrganization>\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\ninterface DispatchProps {\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    // if (viewModel.subViews.kind !== ViewOrgSubViewKind.MANAGE_RELATED_ORGS) {\n    //     throw new Error(\"argh, wrong org subview kind\")\n    // }\n    if (viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n    const { organization, availableOrganizations: { queried }, relatedOrganizations, selectedOrganization } = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n\n    return {\n        organization, organizations: queried, relatedOrganizations, selectedOrganization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSelectOrganization: (org: SelectableRelatableOrganization) => {\n            dispatch(actions.selectOrganization(org) as any)\n        },\n        onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.addOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onSearch: (searchBy: string) => {\n            dispatch(actions.search(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ManageRelatedOrganizations)","import * as React from 'react'\nimport { Spin, Alert } from 'antd'\nimport Container from './reduxAdapter'\n\n\nexport interface Props {\n    view: types.View<types.ManageRelatedOrgsViewModel | types.NoneViewModel>\n    onLoad: () => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Related Organizations Manager...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                return this.renderLoading()\n            case types.ViewState.LOADING:\n                return this.renderLoading()\n            case types.ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport { OrganizationModel } from '../../../../../data/models/organization/model';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    view: types.View<types.ManageRelatedOrgsViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageRelatedOrganizationsView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport {\n    StoreState, User, InviteUserViewModel,\n    RequestResourceType, MemberType,\n    OrganizationUser,\n    ViewOrgViewModelKind,\n    View,\n    ViewOrgViewModel\n} from '../../../types'\nimport { UserQuery } from '../../../data/model'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../combo/error/api'\nimport { makeError } from '../../../lib/error'\nimport * as viewOrgActions from '../viewOrg'\n// View Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.INVITE_USER_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    users: Array<OrganizationUser> | null\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.INVITE_USER_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n        organization: organization,\n        users: null\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.INVITE_USER_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization kind must be \"NORMAL\"'\n                })))\n                return\n            }\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// User Selection\n\n\n\nexport interface InviteUserSearchUsers extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS,\n    query: UserQuery\n}\n\ninterface SearchUsersStart extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n}\n\nexport interface SearchUsersSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n    users: Array<OrganizationUser> | null\n}\n\ninterface SearchUsersError extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n    error: AnError\n}\n\nfunction searchUsersStart(): SearchUsersStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n    }\n}\n\nfunction searchUsersSuccess(users: Array<OrganizationUser> | null): SearchUsersSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n        users: users\n    }\n}\n\nfunction searchUsersError(error: AnError): SearchUsersError {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n        error: error\n    }\n}\n\nexport function inviteUserSearchUsers(query: UserQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchUsersStart())\n\n        if (query.query.length === 0) {\n            dispatch(searchUsersSuccess(null))\n            return\n        }\n\n        const {\n            auth: { authorization: { token } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        // const { organization } = viewModel\n        // const orgClient = new orgModel.OrganizationModel({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url\n        // })\n\n\n\n        // const {\n        //     views: {\n        //         inviteUserView: { viewModel }\n        //     },\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // // TODO: better form of type narrowing? \n        // if (viewModel === null) {\n        //     return\n        // }\n\n        const org = viewModel.organization\n\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        // let excludedUsers: Array<string> = []\n\n        // excludedUsers.push(org.owner.user.username)\n\n        let owner: string = org.owner.username\n        let adminUsers: Array<string> = []\n        let members: Array<string> = []\n        let invited: Array<string> = []\n        let requested: Array<string> = []\n\n        org.members.forEach((member) => {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    members.push(member.username)\n                case MemberType.ADMIN:\n                    adminUsers.push(member.username)\n            }\n        })\n\n        // excludedUsers = excludedUsers.concat(org.members.map((member) => {\n        //     return member.\n        // }))\n\n        // TODO revive\n\n        // org.adminRequests.forEach((request) => {\n        //     if (request.resourceType === RequestResourceType.USER) {\n        //         switch (request.type) {\n        //             case RequestType.INVITATION:\n        //                 invited.push((<UserInvitation>request).user.username)\n        //                 // excludedUsers.push((<UserInvitation>request).user.username)\n        //                 break\n        //             case RequestType.REQUEST:\n        //                 requested.push((<UserRequest>request).requester.username)\n        //             // excludedUsers.push((<UserRequest>request).requester.username)\n        //         }\n        //     }\n        // })\n\n        const inboxRequests = viewModel.requestInbox\n        const outboxRequests = viewModel.requestOutbox\n\n        inboxRequests.forEach((request) => {\n            if (request.resourceType === RequestResourceType.USER) {\n                requested.push(request.requester)\n            }\n        })\n\n        outboxRequests.forEach((request) => {\n            if (request.resourceType === RequestResourceType.USER) {\n                invited.push(request.user)\n            }\n        })\n\n        try {\n            const users = await userClient.searchUsers(query)\n\n\n            // const filteredUsers = users.filter((user) => {\n            //     return (excludedUsers.indexOf(user.username) === -1)\n            // })\n            const orgUsers: Array<OrganizationUser> = users.map(({ username, realname }) => {\n                let relation: orgModel.UserRelationToOrganization\n                if (username === owner) {\n                    relation = orgModel.UserRelationToOrganization.OWNER\n                } else if (adminUsers.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.ADMIN\n                } else if (invited.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n                } else if (requested.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n                } else if (members.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER\n                } else {\n                    relation = orgModel.UserRelationToOrganization.NONE\n                }\n                return {\n                    username, realname,\n                    relation: relation\n                }\n            })\n            dispatch(searchUsersSuccess(orgUsers))\n        } catch (ex) {\n            dispatch(searchUsersError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n\n    }\n}\n\n// Select a user\n\nexport interface SelectUser extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER,\n    username: string\n}\n\nexport interface SelectUserStart extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_START\n}\n\nexport interface SelectUserSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n    user: User,\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface SelectUserError extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n    error: AnError\n}\n\n\nfunction selectUserStart(): SelectUserStart {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_START\n    }\n}\n\nfunction selectUserSuccess(user: User, relation: orgModel.UserRelationToOrganization): SelectUserSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n        user: user,\n        relation: relation\n    }\n}\n\nfunction selectUserError(error: AnError): SelectUserError {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n        error: error\n    }\n}\n\nfunction isUserRequest(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserRequest = <requestModel.UserRequest>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === requestModel.RequestType.REQUEST &&\n        req.requester === username) {\n        return true\n    }\n    return false\n}\n\nfunction isUserInvitation(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserInvitation = <requestModel.UserInvitation>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === requestModel.RequestType.INVITATION &&\n        req.user &&\n        req.user === username) {\n        return true\n    }\n    return false\n}\n\nfunction getUserRelation(user: User, viewModel: ViewOrgViewModel): orgModel.UserRelationToOrganization {\n\n    const organization = viewModel.organization\n    if (user.username === organization.owner.username) {\n        return orgModel.UserRelationToOrganization.OWNER\n    }\n    const member = organization.members.find((member) => {\n        return member.username === user.username\n    })\n    if (member) {\n        switch (member.type) {\n            case MemberType.ADMIN:\n                return orgModel.UserRelationToOrganization.ADMIN\n            case MemberType.OWNER:\n                return orgModel.UserRelationToOrganization.OWNER\n            case MemberType.MEMBER:\n                return orgModel.UserRelationToOrganization.MEMBER\n        }\n    }\n\n    const inboxRequests = viewModel.requestInbox\n    const outboxRequests = viewModel.requestOutbox\n\n    if (inboxRequests.some((request) => {\n        return (request.resourceType === RequestResourceType.USER &&\n            request.requester === user.username)\n    })) {\n        return orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    }\n\n    if (outboxRequests.some((request) => {\n        return (request.resourceType === RequestResourceType.USER &&\n            request.user === user.username)\n    })) {\n        return orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    }\n\n\n    // outboxRequests.forEach((request) => {\n    //     if (request.resourceType === RequestResourceType.USER) {\n    //         invited.push(request.user)\n    //     }\n    // })\n\n    // TODO revive\n    // for (const request of organization.adminRequests) {\n    //     if (isUserInvitation(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    //     } else if (isUserRequest(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     }\n    // }\n\n    return orgModel.UserRelationToOrganization.VIEW\n}\n\nfunction ensureView(state: StoreState): [ViewOrgViewModel, View<InviteUserViewModel>] {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { inviteUserView } = viewModel.subViews\n    if (inviteUserView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return [viewModel, inviteUserView]\n}\n\n// function ensureViewModel(state: StoreState): InviteUserViewModel {\n//     const view = ensureView(state)\n//     if (view.viewModel)\n// }\n\nexport function selectUser(selectedUsername: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectUserStart())\n\n        const state = getState()\n\n        let orgViewModel: ViewOrgViewModel\n        let view: View<InviteUserViewModel>\n        try {\n            [orgViewModel, view] = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch(selectUserError(makeError({\n                code: 'error',\n                message: 'missing view model'\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token } },\n            app: { config }\n        } = state\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await userClient.getUser(selectedUsername)\n            const relation = getUserRelation(user, orgViewModel)\n            dispatch(selectUserSuccess(user, relation))\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Now send the invitation, whew!\n\nexport interface SendInvitation extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION\n}\n\nexport interface SendInvitationStart extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n}\n\nexport interface SendInvitationSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n}\n\nexport interface SendInvitationError extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n    error: AnError\n}\n\nexport function sendInvitationStart(): SendInvitationStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n    }\n}\n\nexport function sendInvitationSuccess(): SendInvitationSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n    }\n}\n\nexport function sendInvitationError(error: AnError): SendInvitationError {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n        error: error\n    }\n}\n\nexport function sendInvitation() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendInvitationStart())\n\n        const state = getState()\n\n        let view: View<InviteUserViewModel>\n        try {\n            [, view] = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        if (view.viewModel === null) {\n            dispatch(sendInvitationError(makeError({\n                code: 'error',\n                message: 'null view model'\n            })))\n            return\n        }\n\n        const { selectedUser, organization: { id } } = view.viewModel\n\n        if (!selectedUser) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        requestClient.inviteUserToJoinOrg(id, selectedUser.user.username)\n            .then((request) => {\n                dispatch(sendInvitationSuccess())\n                dispatch(viewOrgActions.reload(id))\n            })\n            .catch((err) => {\n                dispatch(sendInvitationError(makeError({\n                    code: err.name,\n                    message: err.message\n                })))\n            })\n    }\n}\n","import * as React from 'react'\nimport './User.css'\n\nimport Avatar from './entities/Avatar'\nimport * as types from '../types';\n\nexport interface UserProps {\n    user: types.User\n    avatarSize?: number\n}\n\ninterface UserState {\n\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                                </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport './component.css'\nimport { Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\ninterface MainMenuProps {\n    buttons?: JSX.Element\n}\n\ninterface MainMenuState {\n    currentMenuItem: string\n}\n\nclass MainMenu extends React.Component<MainMenuProps, MainMenuState> {\n    constructor(props: MainMenuProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'myorgs':\n        //         this.props.history.push('/dashboard')\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n\n    renderMenu() {\n        return (\n            <Route render={({ history, location }) => {\n                let selectedKeys: Array<string> = []\n                switch (location.pathname) {\n                    case '/organizations':\n                        selectedKeys = ['allorgs']\n                        break\n                    case '/newOrganization':\n                        selectedKeys = ['neworg']\n                        break\n                }\n                return (\n                    <Menu\n                        // onClick={(e: ClickParam) => { doNavigate(e.key) }}\n                        selectedKeys={selectedKeys}\n                        style={{ backgroundColor: 'transparent' }}\n                        mode=\"horizontal\"\n                    >\n                        {/* <Menu.Item key=\"allorgs\">\n                            <Link to=\"/organizations\">Browse &amp; Search</Link>\n                        </Menu.Item> */}\n                        {/* <Menu.Item key=\"neworg\">\n                            <Link to=\"/newOrganization\">Create New Organization</Link>\n                        </Menu.Item> */}\n                    </Menu>\n                )\n            }} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"MainMenu\">\n                <div className=\"MainMenu-menu\">\n                    {this.renderMenu()}\n                </div>\n                <div className=\"MainMenu-buttons\">\n                    {this.props.buttons}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\n\nexport interface UserProps {\n    user: userModel.User\n    render: (user: userModel.User) => JSX.Element\n}\n\ninterface UserState {\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            this.props.render(this.props.user)\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport UserWrapped from './UserWrapped'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    render: (user: userModel.User) => JSX.Element\n    user: userModel.User | undefined\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <UserWrapped user={this.props.user} render={this.props.render} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading user {this.props.userId} ...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    render: (user: userModel.User) => JSX.Element\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { User, InviteUserViewState, OrganizationUser } from '../../../../../types';\nimport { Button, Icon, Alert, Tooltip } from 'antd';\nimport UserComponent from '../../../../User'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport MainMenu from '../../../../menu/component'\nimport UserEntityComponent from '../../../../entities/UserWrappedContainer'\nimport './component.css'\nimport Avatar from '../../../../entities/Avatar';\n\nexport interface InviteUserProps {\n    organization: orgModel.Organization,\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState,\n    users: Array<OrganizationUser> | null\n    onSearchUsers: (query: userModel.UserQuery) => void,\n    onSelectUser: (username: string) => void,\n    onSendInvitation: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserState {\n    autocompleteMessage: string\n}\nclass InviteUser extends React.Component<InviteUserProps, InviteUserState> {\n\n    lastSearchAt: Date | null\n\n    static searchDebounce: number = 200\n\n    searchInput: React.RefObject<HTMLInputElement>\n    searchButton: React.RefObject<Button>\n\n    constructor(props: InviteUserProps) {\n        super(props)\n\n        this.lastSearchAt = null\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            autocompleteMessage: ''\n        }\n    }\n\n    onClickCancelToViewer() {\n        this.props.onFinish()\n    }\n\n    onSendInvitation() {\n        this.props.onSendInvitation()\n    }\n\n    canSave() {\n        if (this.props.selectedUser) {\n            return true\n        }\n        return false\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.doSearchUsers(currentSearchInputValue)\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        // this.doSearchUsers(currentSearchInputValue)\n    }\n\n    doSearchUsers(value: string) {\n        // if (value.length < 3) {\n        //     this.setState({ autocompleteMessage: 'Search begins after 3 or more characters' })\n        //     return\n        // }\n        // this.setState({ autocompleteMessage: '' })\n        // build up list of users already owning, members of, or with membership pending.\n        const excludedUsers: Array<string> = []\n\n        if (this.lastSearchAt === null ||\n            (new Date().getTime() - this.lastSearchAt.getTime() > InviteUser.searchDebounce)) {\n            this.lastSearchAt = new Date()\n            this.props.onSearchUsers({\n                query: value,\n                excludedUsers: []\n            })\n        }\n    }\n\n    onSelectUser(user: OrganizationUser) {\n        this.props.onSelectUser(user.username);\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderUsers() {\n        if (!this.props.users) {\n            const message = 'Search for users by name or username to display a list of available users in this space.'\n            return (\n                <Alert type=\"info\" message={message} showIcon />\n            )\n        }\n        if (this.props.users.length === 0) {\n            return (\n                <Alert type=\"warning\" message=\"No users found\" showIcon />\n            )\n        }\n        const renderUser = (user: userModel.User) => {\n            const tooltip = (\n                <UserComponent user={user} avatarSize={30} />\n            )\n            return (\n                // <Tooltip title={tooltip}>\n                <div className=\"InviteUser-name\">\n                    <Avatar user={user} size={20} /> {user.realname} ({user.username})\n                    </div>\n                // </Tooltip>\n            )\n        }\n        return this.props.users.map((user) => {\n            let statusIconType\n            let statusTooltip\n            let statusIconColor = '#000'\n            switch (user.relation) {\n                case orgModel.UserRelationToOrganization.NONE:\n                    // nothing\n                    break\n                case orgModel.UserRelationToOrganization.MEMBER:\n                    statusIconType = 'user'\n                    statusTooltip = 'This user is already a member of this Organization'\n                    break\n                case orgModel.UserRelationToOrganization.ADMIN:\n                    statusIconType = 'lock'\n                    statusTooltip = 'This user is already an administrator of this Organization'\n                    break\n                case orgModel.UserRelationToOrganization.OWNER:\n                    statusIconType = 'crown'\n                    statusTooltip = 'This user is the owner of this organization'\n                    break\n                case orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING:\n                    statusIconType = 'inbox'\n                    statusTooltip = 'This user has already requested membership to this Organization (check your requests inbox)'\n                    statusIconColor = 'orange'\n                    break\n                case orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING:\n                    statusIconType = 'mail'\n                    statusTooltip = 'This user has already been invited to join this Organization'\n                    statusIconColor = 'orange'\n                    break\n            }\n            let statusIcon\n            if (statusIconType) {\n                statusIcon = (\n                    <Tooltip title={statusTooltip}>\n                        <Icon type={statusIconType} style={{ color: statusIconColor }} />\n                    </Tooltip>\n                )\n            }\n            const isSelected = (this.props.selectedUser && (user.username === this.props.selectedUser.user.username))\n            let classes = ['InviteUser-userRow']\n            if (isSelected) {\n                classes.push('InviteUser-selected')\n            }\n            return (\n                <div\n                    className={classes.join(' ')}\n                    key={user.username}\n                    onClick={() => { this.onSelectUser.call(this, user) }}>\n                    <div className=\"InviteUser-statusCol\">\n                        {statusIcon}\n                    </div>\n                    <div className=\"InviteUser-userCol\">\n                        <UserEntityComponent userId={user.username} render={renderUser} />\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    renderOrgInfo() {\n        return (\n            <div className=\"orgInfo\">\n                <div className=\"InviteUser-name\">\n                    <span className=\"field-label\">name</span>\n                    <span>{this.props.organization.name}</span>\n                </div>\n                <div className=\"InviteUser-description\">\n                    <span className=\"field-label\">description</span>\n                    <span>{this.props.organization.description}</span>\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationForm() {\n        let button\n        let message\n        if (this.props.selectedUser) {\n            if (this.props.selectedUser.relation === orgModel.UserRelationToOrganization.VIEW) {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onSendInvitation.bind(this)}>Send Invitation</Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        disabled\n                        type=\"primary\"\n                    >Send Invitation</Button>\n                )\n                // message = 'User is a member of this organization'\n                message = (\n                    <div>\n                        User may not be invited because:<br />\n                        {this.renderRelation(this.props.selectedUser.relation)}\n                    </div>\n                )\n                message = (\n                    <Alert\n                        type=\"warning\"\n                        message={message}\n                        showIcon\n                    />\n                )\n            }\n        } else {\n            button = (\n                <Button\n                    disabled\n                    type=\"primary\"\n                >Send Invitation</Button>\n            )\n            message = 'Please select a user'\n        }\n        return (\n            <div className=\"invitationForm\">\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {button}\n                </div>\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationStatus() {\n        switch (this.props.editState) {\n            case InviteUserViewState.NONE:\n                return (\n                    <div>NONE</div>\n                )\n            case InviteUserViewState.EDITING:\n                return (\n                    <div>EDITING</div>\n                )\n            case InviteUserViewState.SENDABLE:\n                return (\n                    <div>SENDABLE</div>\n                )\n            case InviteUserViewState.SENDING:\n                return (\n                    <div>SENDING</div>\n                )\n            case InviteUserViewState.SUCCESS:\n                return (\n                    <div>SENT SUCCESSFULLY</div>\n                )\n            case InviteUserViewState.ERROR:\n                return (\n                    <div>ERROR SENDING</div>\n                )\n            default:\n                return (\n                    <div>Bad State</div>\n                )\n        }\n    }\n\n    renderRelation(relation: orgModel.UserRelationToOrganization) {\n        switch (relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span><Icon type=\"stop\" /> Not a member</span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n\n                    <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n                )\n        }\n    }\n\n    renderSelectedUser() {\n        if (this.props.selectedUser === null) {\n            return (\n                <div className=\"InviteUser-selectedUser\">\n                    <p className=\"InviteUser-noSelection\">\n                        No user yet selected\n                    </p>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"InviteUser-selectedUser\">\n                    <UserComponent user={this.props.selectedUser.user} />\n                    {this.renderRelation(this.props.selectedUser.relation)}\n                </div>\n            )\n        }\n    }\n\n    renderFooter() {\n        return (\n            <div className=\"InviteUser-footer\">\n            </div>\n        )\n    }\n\n    renderSearchButton() {\n        return (<Icon type=\"search\" />)\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onClickCancelToViewer.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"InviteUser scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"InviteUser-row scrollable-flex-column\">\n                    <div className=\"InviteUser-col1 -firstCol InviteUser-users scrollable-flex-column\">\n                        <h3>Select User to Invite</h3>\n                        <form id=\"searchForm\" className=\"InviteUser-searchBar\"\n                            onSubmit={this.onSubmit.bind(this)}>\n                            <input\n                                ref={this.searchInput}\n                                autoFocus\n                                onChange={this.onSearchInputChange.bind(this)}\n                                placeholder=\"Search for a user\"\n                            />\n                            <Button\n                                className=\"InviteUser-searchButton\"\n                                form=\"searchForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\"\n                            >\n                                {this.renderSearchButton()}\n                            </Button>\n                        </form>\n                        <div className=\"InviteUser-usersTable\">\n                            {this.renderUsers()}\n                        </div>\n                    </div>\n                    <div className=\"InviteUser-col1 -lastCol\">\n                        <h3>Selected User</h3>\n                        {this.renderSelectedUser()}\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n\n                {this.renderFooter()}\n            </div>\n        )\n    }\n}\n\nexport default InviteUser","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport InviteUser from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    users: Array<types.OrganizationUser> | null\n    selectedUser: {\n        user: types.User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: types.InviteUserViewState\n}\n\ninterface DispatchProps {\n    onSearchUsers: (query: userModel.UserQuery) => void\n    onSelectUser: (username: string) => void\n    onSendInvitation: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.inviteUserView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    return viewModel.subViews.inviteUserView.viewModel\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onSearchUsers: ({ query, excludedUsers }) => {\n            dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        },\n        onSelectUser: (username: string) => {\n            dispatch(actions.selectUser(username) as any)\n        },\n        onSendInvitation: () => {\n            dispatch(actions.sendInvitation() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(InviteUser)","import * as React from 'react'\n\nimport Container from './container'\nimport {\n    StoreState, ViewOrgViewModelKind, ViewState,\n    InviteUserViewModel, View, NoneViewModel\n} from '../../../../../types';\n\nexport interface InviteUserLoaderProps {\n    view: View<InviteUserViewModel | NoneViewModel>\n    organizationId: string\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserLoaderState {\n}\n\nclass InviteUserLoader extends React.Component<InviteUserLoaderProps, InviteUserLoaderState> {\n    constructor(props: InviteUserLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport { Spin, Alert } from 'antd';\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<InviteUserViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.inviteUserView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InviteUserLoader)","import * as React from 'react'\nimport './UserSimple.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Tooltip } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface UserState {\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"UserSimple\">\n                <Tooltip title={tooltip} placement=\"bottomRight\">\n                    <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                </Tooltip>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport UserSimple from './UserSimple'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <UserSimple user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport { Tooltip, Icon } from 'antd'\nimport UserSimple from '../UserSimpleContainer'\nimport { niceElapsed } from '../../../lib/time'\nimport './component.css'\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    // renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n    //     let label\n    //     switch (narrative.access) {\n    //         case narrativeModel.NarrativeAccess.VIEW:\n    //             label = (\n    //                 <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.EDIT:\n    //             label = (\n    //                 <span>Edit (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.ADMIN:\n    //             label = 'Admin'\n    //             break\n    //         case narrativeModel.NarrativeAccess.OWNER:\n    //             label = 'Owner'\n    //             break\n    //         default:\n    //             label = 'Unknown'\n    //     }\n    //     return (\n    //         <span>\n    //             {label}\n    //         </span>\n    //     )\n    // }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                iconType = 'eye'\n                tooltip = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                iconType = 'edit'\n                tooltip = (\n                    <span>This narrative is shared with you with <b>edit</b> access (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                iconType = 'unlock'\n                tooltip = (\n                    <span>\n                        This narrative is shared with you with <b>access</b> - you may edit and re-share this\n                    </span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                iconType = 'crown'\n                tooltip = (\n                    <span>\n                        You are the owner of this Narrative\n                    </span>\n                )\n                break\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderGlobalPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        if (narrative.isPublic) {\n            iconType = 'global'\n            tooltip = 'This narrative has been shared publicly - with all KBase users'\n        } else {\n            iconType = 'lock'\n            tooltip = 'This narrative is private - only accessible to the owner any users it has been shared with'\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderNiceElapsed(d: Date) {\n        const tooltip = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                    }).format(d)\n                }\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(d)}\n            </Tooltip>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">updated</span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} />\n                    </div>\n\n                    {/* TODO: left off here; need to add in the added date\n                        <div>\n                        <span className=\"field-label\">added</span>\n                        {this.renderNiceElapsed(this.props.)}\n                    </div> */}\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>\n                        {this.renderNiceElapsed(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>\n                        <UserSimple avatarSize={20} userId={narrative.lastSavedBy} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarrative(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return (\n        //             <div className=\"Narrative View-COMPACT\">\n        //                 {this.renderCompact(narrative)}\n        //             </div>\n        //         )\n        //     case View.NORMAL:\n        //         return (\n        //             <div className=\"Narrative View-NORMAL\">\n        //                 {this.renderNormal(narrative)}\n        //             </div>\n        //         )\n        // }\n        return this.renderNarrative(narrative)\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport Narrative from './component'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { Button, Tooltip, Icon, Drawer } from 'antd'\nimport Narrative from './entities/narrative/reduxAdapter'\nimport NiceElapsedTime from './NiceElapsedTime'\nimport './OrganizationNarrative.css'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narrative: orgModel.NarrativeResource\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\ninterface State {\n    requestAccess: boolean\n}\n\nexport default class OrganizationNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            requestAccess: false\n        }\n    }\n\n    onGetViewAccess() {\n        this.props.onGetViewAccess(this.props.narrative)\n    }\n\n    onRequestAccess() {\n        this.setState({ requestAccess: true })\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: false })\n    }\n\n    renderNarrativePermission(narrative: orgModel.NarrativeResource) {\n        let label\n        let shareButton\n        let permissionTooltip\n        let buttonTooltip\n        switch (narrative.permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                if (narrative.isPublic) {\n                    permissionTooltip = \"You have View access to this narrative narrative because it is shared publicly; you may view it, but not edit, run, or share it\"\n                    label = (\n                        <span>\n                            View Only (public)\n                        </span>\n                    )\n                    buttonTooltip = 'Although you have View-Only access to this Narrative due to it being shared globally, you may obtain personal View-Only access by clicking this button'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                } else {\n                    permissionTooltip = \"You have No access to this narrative narrative; you may not view, edit, run, or share it\"\n                    label = (\n                        <span>\n                            No Access\n                        </span>\n                    )\n                    buttonTooltip = 'You cannot access this Narrative; in order to immediately obtain View-Only access click this button.'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                }\n                break\n            case orgModel.UserWorkspacePermission.VIEW:\n                permissionTooltip = \"You have View access to this narrative narrative; you may view it, but not edit, run, or share it\"\n                label = (\n                    <span>\n                        View Only\n                    </span>\n                )\n                buttonTooltip = 'You already have View-Only access to this Narrative, but may request additional access'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Additional Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.EDIT:\n                permissionTooltip = \"You have Edit access to this Narrative; you may view, edit, and run, but not share it\"\n                label = (\n                    <span>\n                        Edit\n                    </span>\n                )\n                buttonTooltip = 'You already have Edit access to this Narrative, but may request additional access by clicking this button'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Admin Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.ADMIN:\n                permissionTooltip = \"You have Admin access to this narrative narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Admin\n                    </span>\n                )\n                break\n            case orgModel.UserWorkspacePermission.OWNER:\n                permissionTooltip = \"You are the Owner of this narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Owner\n                    </span>\n                )\n                break\n            default:\n                label = (\n                    <span>\n                        Unknown\n                    </span>\n                )\n        }\n\n        return (\n            <React.Fragment>\n                <Tooltip title={permissionTooltip} placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <span className=\"field-label\">your permission</span>\n                        {label}\n                    </span>\n                </Tooltip>\n                {' '}\n                <Tooltip title={buttonTooltip} placement=\"right\">\n                    {shareButton}\n                </Tooltip>\n            </React.Fragment>\n        )\n    }\n\n    renderPublicPermission(narrative: orgModel.NarrativeResource) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderNarrative() {\n        const narrative = this.props.narrative\n        if (this.props.organization.isMember) {\n            if (narrative.permission === orgModel.UserWorkspacePermission.NONE &&\n                !narrative.isPublic) {\n                return (\n                    <React.Fragment>\n                        <a href={'/narrative/' + narrative.workspaceId} target=\"_blank\">\n                            <div className=\"title\">{narrative.title}</div>\n                        </a>\n                        <div>{this.renderNarrativePermission(narrative)}</div>\n                    </React.Fragment>\n                )\n            }\n            return (\n                <Narrative workspaceId={narrative.workspaceId} />\n            )\n        }\n        return (\n            <Narrative workspaceId={narrative.workspaceId} />\n        )\n    }\n\n    renderResource() {\n        return (\n            <div>\n                <div>\n                    <span className=\"field-label\">added</span>\n                    <span>\n                        <NiceElapsedTime time={this.props.narrative.createdAt} />\n                    </span>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let accessModal\n        if (this.state.requestAccess) {\n            // TODO: replace with our own implementation...n\n            accessModal = (\n                <Drawer title=\"Request Access to Narrative\"\n                    placement=\"right\"\n                    closable={true}\n                    visible={true}\n                    onClose={() => { this.onCloseRequestAccess.call(this) }}\n                >\n                    Requesting access...\n                </Drawer>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationNarrative\">\n                <div className=\"OrganizationNarrative-narrativeCol\">\n                    {this.renderNarrative()}\n                </div>\n                {/* <div className=\"OrganizationNarrative-resourceCol\">\n                    {this.renderResource()}\n                </div> */}\n                {accessModal}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport { Alert, Button, Icon, Menu, Dropdown, Input, Select, Modal } from 'antd';\nimport { ListRowProps } from 'react-virtualized'\nimport OrganizationNarrative from '../../../../OrganizationNarrative'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\n\nexport interface NarrativesProps {\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n    relation: orgModel.Relation\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onRequestAddNarrative: () => void\n}\n\ninterface NarrativesState {\n}\n\nexport default class Narratives extends React.Component<NarrativesProps, NarrativesState> {\n    constructor(props: NarrativesProps) {\n        super(props)\n    }\n\n    onRequestAddNarrative() {\n        this.props.onRequestAddNarrative()\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        const confirmed = () => {\n            this.props.onRemoveNarrative(narrative)\n        }\n        const message = (\n            <React.Fragment>\n                <p>\n                    Please confirm the removal of this Narrative from this Organization.\n                </p>\n                <p>\n                    Any view permission granted to organization members will be unaffected by removing the Narrative.\n                </p>\n                <p>\n                    All Organization members and the Narrative owner will receive a notification.\n                </p>\n            </React.Fragment>\n        )\n        Modal.confirm({\n            title: 'Confirm',\n            content: message,\n            width: '50em',\n            okText: 'Confirm',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    renderNarrativeMenu(narrative: orgModel.NarrativeResource) {\n        const relation = this.props.relation\n        let menu\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // should never occur\n                break;\n            case (orgModel.UserRelationToOrganization.VIEW):\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                break;\n            case (orgModel.UserRelationToOrganization.ADMIN):\n            case (orgModel.UserRelationToOrganization.OWNER):\n                menu = (\n                    <Menu onClick={({ key }) => { this.onNarrativeMenu(key, narrative) }}>\n                        <Menu.Item key=\"removeNarrative\">\n                            <Icon type=\"delete\" style={{ color: \"#f5222d\" }} /> Remove Narrative from Organization\n                        </Menu.Item>\n                    </Menu>\n                )\n        }\n        if (!menu) {\n            return\n        }\n        return (\n            <Dropdown overlay={menu} trigger={['click']}>\n                <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n            </Dropdown>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchNarratives(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter narratives by title\"\n                    onChange={doChange} />\n                {/* <Button>\n                    <Icon type=\"search\" />\n                </Button> */}\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortNarratives(value)\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '11em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortNarrativesBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Added</Select.Option>\n                    <Select.Option value=\"changed\" key=\"changed\">Last Changed</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberNarrativeRow(narrative: orgModel.NarrativeResource) {\n        const lastOrgVisitAt = this.props.organization.lastVisitedAt\n        const addedAt = narrative.addedAt\n        let isNew\n        if (lastOrgVisitAt === null) {\n            if (addedAt === null) {\n                isNew = false\n            } else {\n                isNew = false\n            }\n        } else {\n            if (addedAt === null) {\n                isNew = false\n            } else {\n                isNew = lastOrgVisitAt.getTime() < addedAt.getTime()\n            }\n        }\n        const classNames = ['ViewOrganization-Narratives-narrative', 'SimpleCard']\n        if (isNew) {\n            classNames.push('ViewOrganization-Narratives-newNarrative')\n        }\n        return (\n            <div className={classNames.join(' ')} key={String(narrative.workspaceId)}>\n                <div className=\"ViewOrganization-Narratives-dataCol\">\n                    <OrganizationNarrative\n                        narrative={narrative}\n                        organization={this.props.organization}\n                        onGetViewAccess={this.props.onGetViewAccess} />\n                </div>\n                <div className=\"ViewOrganization-Narratives-buttonCol\">\n                    {this.renderNarrativeMenu(narrative)}\n                </div>\n            </div>\n        )\n    }\n\n    renderMemberNarratives() {\n        const extras = [(\n            <Button\n                key=\"addNarrative\"\n                size=\"small\"\n                style={{ width: '100%' }}\n                className=\"Button-important\"\n                onClick={this.onRequestAddNarrative.bind(this)}>\n                <Icon type=\"plus\" />  Associate Narratives\n            </Button>\n        )]\n\n        const rowRenderer: (props: ListRowProps) => React.ReactNode = ({\n            key,\n            index, isScrolling, isVisible, style\n        }: ListRowProps) => {\n            return this.renderMemberNarrativeRow(this.props.narratives[index])\n        }\n        let narrativesTable\n        if (this.props.narratives.length === 0) {\n            narrativesTable = (\n                <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" />\n            )\n        } else {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                return this.renderMemberNarrativeRow(narrative);\n            })\n        }\n\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {extras}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-narrativesTable\">\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderNonMemberNarratives() {\n        let alert\n        const narrativesToShow = this.props.organization.narratives.length\n        const hiddenNarrativeCount = this.props.organization.narrativeCount - this.props.organization.narratives.length\n        const alertStyle = {\n            marginBottom: '10px'\n        }\n        if (narrativesToShow) {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives are displayed.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            }\n        } else {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives would be displayed, but this Organization has none.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            } else {\n                alert = (\n                    <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" style={alertStyle} />\n                )\n            }\n        }\n\n        let narrativesTable\n        if (narrativesToShow) {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                // create buttons or not, depending on being an admin\n                return (\n                    <div className=\"ViewOrganization-Narratives-narrative SimpleCard\" key={String(narrative.workspaceId)}>\n                        <div className=\"ViewOrganization-Narratives-dataCol\">\n                            <OrganizationNarrative\n                                narrative={narrative}\n                                organization={this.props.organization}\n                                onGetViewAccess={this.props.onGetViewAccess} />\n                        </div>\n                        <div className=\"ViewOrganization-Narratives-buttonCol\">\n                            {this.renderNarrativeMenu(narrative)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const title = (\n            <span className=\"ViewOrganization-Narratives-title\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-Narratives-titleCount\">({this.props.organization.narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-headerCol2\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-table\">\n                        {alert}\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if (this.props.organization.isMember) {\n            return this.renderMemberNarratives()\n        } else {\n            return this.renderNonMemberNarratives()\n        }\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState, SyncState, ValidationErrorType, ViewOrgViewModelKind, View, ManageMembershipViewModel } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error'\nimport Validation from '../../../data/models/organization/validation'\nimport { ActionFlag } from '..'\nimport * as viewOrgActions from '../viewOrg'\n\n// Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, editableMemberProfile: orgModel.EditableMemberProfile): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n        organization: organization,\n        editableMemberProfile: editableMemberProfile\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        // TODO: here is where we would hook into the store state entities for groups\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                })))\n                return\n            }\n\n            if (!org.isMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" is not a member of this org'\n                })))\n                return\n            }\n\n            let thisMember = org.members.find((member) => {\n                return member.username === username\n            })\n\n            if (!thisMember) {\n                if (org.owner.username === username) {\n                    thisMember = org.owner\n                }\n            }\n\n            if (!thisMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" was not found in the members list'\n                })))\n                return\n            }\n\n            const editableProfile: orgModel.EditableMemberProfile = {\n                title: {\n                    value: thisMember.title || '',\n                    remoteValue: thisMember.title,\n                    syncState: SyncState.NEW,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n            dispatch(loadSuccess(org, editableProfile))\n            // dispatch(evaluate())\n        } catch (ex) {\n            console.error('Error :(', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Leaving the Org\n\nexport interface LeaveOrg extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG\n    organizationId: orgModel.OrganizationID\n}\n\ninterface LeaveOrgSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n}\n\ninterface LeaveOrgError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n    error: AnError\n}\n\nexport function leaveOrg(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START\n        }))\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            orgClient.removeMember(organizationId, username)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n            })\n            dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            console.error('ERROR leaving org', ex)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n    }\n}\n\n\n// Updating Profile\n\nexport interface UpdateTitle {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    title: string\n}\n\nexport interface UpdateTitleStart {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_START\n}\n\nexport interface UpdateTitleSuccess {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    title: string\n}\n\nexport interface UpdateTitleError {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n    error: AnError\n}\n\nexport interface Save {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE,\n    memberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface SaveStart {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n    error: AnError\n}\n\nexport function updateTitle(title: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedTitle, error] = Validation.validateMemberTitle(title)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n                error: makeError({\n                    code: 'invalid',\n                    message: error.message\n                })\n            })\n        } else {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n                title: validatedTitle\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\nexport interface Evaluate extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE\n}\n\nexport interface EvaluateSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n}\n\nexport interface EvaluateError extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR\n}\n\nfunction ensureView(state: StoreState): View<ManageMembershipViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('invalid state -- no view value')\n    }\n    const { manageMembershipView } = viewModel.subViews\n    if (manageMembershipView === null) {\n        throw new Error('invalid state -- no view value')\n    }\n    return manageMembershipView\n}\n\nfunction ensureViewModel(state: StoreState): ManageMembershipViewModel {\n    const view = ensureView(state)\n    if (view.viewModel === null) {\n        throw new Error('invalid state -- no view model')\n    }\n    return view.viewModel\n}\n\nexport function evaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const viewModel = ensureViewModel(getState())\n        const { editableMemberProfile } = viewModel\n\n        if (editableMemberProfile.title.validationState.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS\n        })\n    }\n}\n\nexport interface Save extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR\n}\n\nexport function save() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n        })\n\n        const viewModel = ensureViewModel(getState())\n        const { organization, editableMemberProfile } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const update = {\n            title: editableMemberProfile.title.value\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.updateMember(organization.id, username, update)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n            })\n        } catch (ex) {\n            console.error('error saving member profile', ex)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\n// Demote self to member\n\n// Demote admin to member\n\nexport interface DemoteSelfToMember extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER,\n    organizationId: string\n}\n\nexport interface DemoteSelfToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START\n}\n\nexport interface DemoteSelfToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n    organizationId: string\n}\n\nexport interface DemoteSelfToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n    error: AnError\n}\n\n\nexport function demoteToMemberStart(): DemoteSelfToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START\n    }\n}\n\nexport function demoteSelfToMemberSuccess(organizationId: string): DemoteSelfToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n        organizationId: organizationId\n    }\n}\n\nexport function demoteSelfToMemberError(error: AnError): DemoteSelfToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteSelfToMember(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, username)\n            .then((org) => {\n                dispatch(demoteSelfToMemberSuccess(organizationId))\n                dispatch(viewOrgActions.reload(viewModel.organization.id))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteSelfToMemberError(makeError({\n                    code: err.name,\n                    message: err.message\n                })))\n            })\n    }\n}\n","import * as React from 'react'\nimport { Button, Modal, Input, Tooltip } from 'antd';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport {\n    Editable, ValidationErrorType, SyncState, EditState,\n    SaveState, ValidationState\n} from '../../../../../types'\nimport MainMenu from '../../../../menu/component'\nimport './component.css'\n\nexport interface ManageMembershipProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    onLeaveOrganization: (organizationId: string) => void\n    onDemoteSelfToMember: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n    onFinish: () => void\n}\n\ninterface MangeMembershipState {\n}\n\nclass ManageMembership extends React.Component<ManageMembershipProps, MangeMembershipState> {\n    constructor(props: ManageMembershipProps) {\n        super(props)\n    }\n\n    doLeaveOrg() {\n        const confirmed = (() => {\n            this.doLeaveOrgConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Really leave this organization?',\n            content: (\n                <p>\n                    This is not reversible.\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onDone() {\n        this.props.onFinish()\n    }\n\n    doLeaveOrgConfirmed() {\n        // alert('this will leave you the org')\n        this.props.onLeaveOrganization(this.props.organization.id)\n        this.props.onFinish()\n    }\n\n    onDemoteSelfToMember() {\n        const confirmed = (() => {\n            this.onDemoteSelfToMemberConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Confirm Demotion to Regular Member',\n            content: (\n                <p>\n                    Upon removing administrator privileges for yourself, you will\n                    not be able to restore them without the assistance of the\n                    Organization's owner or an administrator\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onDemoteSelfToMemberConfirmed() {\n        this.props.onDemoteSelfToMember(this.props.organization.id)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onSave()\n    }\n\n    onTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateTitle(e.target.value)\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'ManageMembership-validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'ManageMembership-validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'ManageMembership-sync-dirty'\n            default:\n                return 'ManageMembership-validation-ok'\n        }\n    }\n\n    renderLeaveOrgButton() {\n        let leaveOrgButton\n        switch (this.props.organization.relation) {\n            case orgModel.UserRelationToOrganization.MEMBER:\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Button icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.doLeaveOrg.bind(this)}\n                        >\n                            Leave Organization\n                                </Button>\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.ADMIN:\n                const adminTooltip = (\n                    <React.Fragment>\n                        <p>\n                            As an organization administrator, you may not leave\n                            the organization.\n                        </p>\n                        <p>\n                            In order to leave the organization, you will need to\n                            become a regular member first.\n                        </p>\n                    </React.Fragment>\n                )\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Tooltip\n                            title={adminTooltip}>\n                            <Button icon=\"stop\"\n                                type=\"default\"\n                                disabled={true}\n                            >\n                                Only a regular member may leave Organization\n                            </Button>\n                        </Tooltip>\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.OWNER:\n                const ownerTooltip = (\n                    <React.Fragment>\n                        <p>\n                            As an organization owner, you are the only permanent member\n                            of this organization.\n                        </p>\n                    </React.Fragment>\n                )\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Tooltip\n                            title={ownerTooltip}>\n                            <Button icon=\"stop\"\n                                type=\"default\"\n                                disabled={true}\n                            >\n                                Cannot leave Organization\n                        </Button>\n                        </Tooltip>\n                    </div>\n                )\n                break\n        }\n        return leaveOrgButton\n    }\n\n    renderDemoteToMemberButton() {\n        switch (this.props.organization.relation) {\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"ButtonSet-button\">\n                        <Button icon=\"user\"\n                            type=\"default\"\n                            onClick={this.onDemoteSelfToMember.bind(this)}>\n                            Demote Self to Member\n                        </Button>\n\n                    </div>\n                )\n        }\n    }\n\n    renderTitleRow() {\n        const tooltip = (\n            <p>\n                This is your title within this Organization.\n            </p>\n        )\n        return (\n            <div className=\"ManageMembership-editorTable-row\">\n                <div className=\"ManageMembership-editCol ManageMembership-editCell\">\n                    <div className=\"ManageMembership-editorTable-labelCol\">\n                        <span className=\"field-label ManageMembership-titleLabel\">\n                            <Tooltip title={tooltip}>\n                                title\n                                </Tooltip>\n                        </span>\n                    </div>\n                    <div className=\"ManageMembership-editorTable-controlCol\">\n                        <Input value={this.props.editableMemberProfile.title.value || ''}\n                            className={this.calcFieldClass(this.props.editableMemberProfile.title)}\n                            onChange={this.onTitleChange.bind(this)} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <div className=\"ButtonSet-button\">\n                <Button icon=\"delete\"\n                    type=\"danger\"\n                    onClick={this.onDone.bind(this)}>\n                    Cancel\n                </Button>\n            </div>\n        )\n    }\n\n    renderSaveButton() {\n        return (\n            <div className=\"ButtonSet-button\">\n                <Button icon=\"save\"\n                    form=\"editMembership\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    Save\n                </Button>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editMembership\"\n                className=\"ManageMembership-editorTable scrollable-flex-column\"\n                onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"ManageMembership-headerRow\">\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Edit Your Organization Profile\n                    </div>\n                </div>\n                <div className=\"ManageMembership-formRow\">\n                    {this.renderTitleRow()}\n                    <div className=\"ManageMembership-editorFooter\">\n                        <div className=\"ButtonSet\">\n                            {this.renderSaveButton()}\n                            {this.renderCancelButton()}\n                            {this.renderLeaveOrgButton()}\n                            {this.renderDemoteToMemberButton()}\n                        </div>\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onDone.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageMembership scrollable-flex-column\">\n                {/* <MainMenu buttons={this.renderMenuButtons()} title=\"Manage My Membership\" /> */}\n                <div className=\"ManageMembership-body scrollable-flex-column\">\n                    <div className=\"ManageMembership-main scrollable-flex-column\">\n                        {this.renderEditor()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ManageMembership","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageMembership'\n\nimport { StoreState, EditState, SaveState, ValidationState, ViewOrgViewModelKind, ManageMembershipViewModel } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\ninterface DispatchProps {\n    onLeaveOrganization: (organizationId: string) => void\n    onDemoteSelfToMember: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { authorization: { username } },\n    } = state\n\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.manageMembershipView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const subViewModel: ManageMembershipViewModel = viewModel.subViews.manageMembershipView.viewModel\n\n    const {\n        organization\n    } = viewModel\n\n    const {\n        editableMemberProfile, editState, saveState, validationState\n    } = subViewModel\n\n    return {\n        username, organization, editableMemberProfile, editState, saveState, validationState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLeaveOrganization: (organizationId: string) => {\n            dispatch(actions.leaveOrg(organizationId) as any)\n        },\n        onUpdateTitle: (title: string) => {\n            dispatch(actions.updateTitle(title) as any)\n        },\n        onSave: () => {\n            dispatch(actions.save() as any)\n        },\n        onDemoteSelfToMember: (organizationId: string) => {\n            dispatch(actions.demoteSelfToMember(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport {\n    StoreState, ManageMembershipViewModel, ViewState,\n    View, NoneViewModel, ViewOrgViewModelKind\n} from '../../../../../types'\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: View<ManageMembershipViewModel | NoneViewModel>\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <React.Fragment>\n                <Icon type=\"loading\" />{' '}Loading Your Membership...\n            </React.Fragment>\n        )\n        return (\n            <Alert type=\"info\" message={message}\n                style={{ padding: '20px', width: '30em', margin: '30px auto 0 auto', textAlign: 'center' }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageMembership'\nimport { AnError, makeError } from '../../../../../combo/error/api'\nimport { Spin, Alert, Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<ManageMembershipViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    // This bit deals with the fact that we are a subview \n    // and it keeps TS happy.\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageMembershipView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState, AppError, EditableOrganization, ValidationState,\n    ValidationErrorType, SyncState\n} from '../../types'\nimport Validation from '../../data/models/organization/validation'\nimport * as orgModel from '../../data/models/organization/model'\nimport DebouncingProcess from '../../lib/DebouncingProcess'\nimport { UIServiceClient } from '../../data/apis/uiService'\n\n// ACTIONS\n\n// Loading the editor\nexport interface Load extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action<ActionFlag.EDIT_ORG_LOAD_ERROR> {\n    type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.EDIT_ORG_UNLOAD> {\n    type: ActionFlag.EDIT_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface EditOrgEvaluate extends Action<ActionFlag.EDIT_ORG_EVALUATE> {\n    type: ActionFlag.EDIT_ORG_EVALUATE\n}\n\nexport interface EditOrgEvaluateOK extends Action<ActionFlag.EDIT_ORG_EVALUATE_OK> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_OK\n}\n\nexport interface EditOrgEvaluateErrors extends Action<ActionFlag.EDIT_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n}\n\n// Saving\n\nexport interface EditOrgSave extends Action<ActionFlag.EDIT_ORG_SAVE> {\n    type: ActionFlag.EDIT_ORG_SAVE\n}\n\nexport interface EditOrgSaveStart extends Action<ActionFlag.EDIT_ORG_SAVE_START> {\n    type: ActionFlag.EDIT_ORG_SAVE_START\n}\n\nexport interface EditOrgSaveSuccess extends Action<ActionFlag.EDIT_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n}\n\nexport interface EditOrgSaveError extends Action<ActionFlag.EDIT_ORG_SAVE_ERROR> {\n    type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Updating name field\n\nexport interface EditOrgUpdateName extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface EditOrgUpdateNameSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface EditOrgUpdateNameError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL,\n    name: string | null\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating description field\n\nexport interface EditOrgUpdateDescription extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\n// export function editOrgStart(id: string): LoadStart {\n//     return {\n//         type: ActionFlag.EDIT_ORG_LOAD_START,\n//         id: id\n//     }\n// }\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_START\n    }\n}\n\nexport function loadSuccess(editedOrganization: EditableOrganization, organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n        editedOrganization: editedOrganization,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.EDIT_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function editOrgEvaluateOk(): EditOrgEvaluateOK {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_OK\n    }\n}\n\nexport function editOrgEvaluateErrors(): EditOrgEvaluateErrors {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Save\n\n// export function editOrgSave(): EditOrgSave {\n//     return {\n//         type: ActionFlag.EDIT_ORG_SAVE\n//     }\n// }\n\nexport function editOrgSaveStart(): EditOrgSaveStart {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_START\n    }\n}\n\nexport function editOrgSaveSuccess(): EditOrgSaveSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n    }\n}\n\nexport function editOrgSaveError(error: AppError): EditOrgSaveError {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Update Name\n\nexport function editOrgUpdateNameSuccess(name: string): EditOrgUpdateNameSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function editOrgUpdateNameError(name: string, error: ValidationState): EditOrgUpdateNameError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\n// export function editOrgUpdateIdSuccess(id: string): EditOrgUpdateIdSuccess {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//         id: id\n//     }\n// }\n\n// Update Logo Url\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n\n// Update Id\n\n// export function editOrgUpdateIdError(id: string, error: UIError): EditOrgUpdateIdError {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//         id: id,\n//         error: error\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(description: string): EditOrgUpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function editOrgUpdateDescriptionError(description: string, error: ValidationState): EditOrgUpdateDescriptionError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        // const model = new Model({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url,\n        //     userProfileServiceURL: config.services.UserProfile.url,\n        //     workspaceServiceURL: config.services.Workspace.url,\n        //     serviceWizardURL: config.services.ServiceWizard.url\n        // })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        return orgClient.getOrg(organizationId)\n            .then((org) => {\n                if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                    throw new Error('May not edit an inaccessible private org!')\n                }\n                const editableOrg: EditableOrganization = {\n                    id: {\n                        value: org.id,\n                        remoteValue: org.id,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgId(org.id)[1]\n                    },\n                    name: {\n                        value: org.name,\n                        remoteValue: org.name,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgName(org.name)[1]\n                    },\n                    logoUrl: {\n                        value: org.logoUrl,\n                        remoteValue: org.logoUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgLogoUrl(org.logoUrl)[1]\n                    },\n                    homeUrl: {\n                        value: org.homeUrl,\n                        remoteValue: org.homeUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgHomeUrl(org.homeUrl)[1]\n                    },\n                    researchInterests: {\n                        value: org.researchInterests,\n                        remoteValue: org.researchInterests,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgResearchInterests(org.researchInterests)[1]\n                    },\n                    description: {\n                        value: org.description,\n                        remoteValue: org.description,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgDescription(org.description)[1]\n                    },\n                    isPrivate: {\n                        value: org.isPrivate,\n                        remoteValue: org.isPrivate,\n                        syncState: SyncState.NEW,\n                        validationState: {\n                            type: ValidationErrorType.OK,\n                            validatedAt: new Date()\n                        }\n                    }\n                }\n                dispatch(loadSuccess(editableOrg, org))\n            })\n            .catch((err) => {\n                console.error('load org error', err)\n                dispatch(loadError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function editOrgSave() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(editOrgSaveStart())\n\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                editOrgView: {\n                    viewModel: { organization, editedOrganization }\n                }\n            },\n            app: { config } } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (!editedOrganization) {\n            dispatch(editOrgSaveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        const update = {\n            name: editedOrganization.name.value,\n            logoUrl: editedOrganization.logoUrl.value,\n            description: editedOrganization.description.value,\n            isPrivate: editedOrganization.isPrivate.value,\n            homeUrl: editedOrganization.homeUrl.value,\n            researchInterests: editedOrganization.researchInterests.value\n        }\n\n        orgClient.updateOrg(organization.id, update)\n            .then(() => {\n                dispatch(editOrgSaveSuccess())\n            })\n            .catch((error) => {\n                console.error('error adding', editedOrganization, error)\n                dispatch(editOrgSaveError({\n                    code: 'invalid',\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function editOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                editOrgView: {\n                    viewModel: {\n                        editedOrganization\n                    }\n                }\n            }\n        } = state\n\n        if (!editedOrganization) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(editOrgEvaluateOk())\n    }\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateNameError(validatedName, error))\n        } else {\n            dispatch(editOrgUpdateNameSuccess(validatedName))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nlet checkLogoUrlProcess: DebouncingProcess\n\nclass CheckIfLogoUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkImageURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateLogoUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This logo url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateLogoUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking logo url: ' + ex.message\n            }))\n        }\n        this.dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkLogoUrlProcess) {\n            checkLogoUrlProcess.cancel()\n        }\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateLogoUrlError(validatedLogoUrl, error))\n            dispatch(editOrgEvaluate())\n            return\n        }\n\n        dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n\n        dispatch(editOrgEvaluate())\n\n        if (validatedLogoUrl !== null && validatedLogoUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkLogoUrlProcess = new CheckIfLogoUrlExistsProcess({\n                delay: 100,\n                url: validatedLogoUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkLogoUrlProcess.start()\n        }\n    }\n}\n\n// Home Url\n\nlet checkHomeUrlProcess: DebouncingProcess\n\nclass CheckIfHomeUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkHTMLURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateHomeUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This home url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateHomeUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking home url: ' + ex.message\n            }))\n        }\n        this.dispatch(editOrgEvaluate())\n    }\n}\n\nfunction updateHomeUrlSuccess(homeUrl: string): UpdateHomeUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n        homeUrl\n    }\n}\n\nfunction updateHomeUrlError(homeUrl: string, error: ValidationState): UpdateHomeUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n        homeUrl, error\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkHomeUrlProcess) {\n            checkHomeUrlProcess.cancel()\n        }\n\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: validatedHomeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n            dispatch(editOrgEvaluate())\n            return\n        }\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n            homeUrl: validatedHomeUrl\n        } as UpdateHomeUrlSuccess)\n\n        dispatch(editOrgEvaluate())\n\n        if (validatedHomeUrl !== null && validatedHomeUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkHomeUrlProcess = new CheckIfHomeUrlExistsProcess({\n                delay: 100,\n                url: validatedHomeUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkHomeUrlProcess.start()\n        }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            } as UpdateResearchInterestsSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>,\n        getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(editOrgUpdateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // No validation for now.\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate: isPrivate\n        })\n        dispatch(editOrgEvaluate())\n    }\n} ","import * as React from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Marked } from 'marked-ts';\nimport { Button, Icon, Modal, Checkbox, Input, Tooltip, Table, Collapse, Tabs } from 'antd';\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState,\n    EditState, ValidationErrorType, Editable, SyncState, EditableString, EditableNullableString, EditableBoolean\n} from '../../../../../types';\nimport './component.css'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport TextArea from 'antd/lib/input/TextArea';\nimport MainMenu from '../../../../menu/component';\n\nexport interface EditOrganizationProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n    onFinish: () => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\nexport interface EditOrganizationState {\n    cancelToBrowser: boolean;\n    cancelToViewer: boolean;\n    navigateTo: NavigateTo;\n}\n\nclass EditOrganization extends React.Component<EditOrganizationProps, EditOrganizationState> {\n\n    origin: string;\n\n    constructor(props: EditOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.origin = document.location!.origin\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organization Editor Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations editor...</p>\n                </div>\n            )\n        })\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onClickCancelToViewer() {\n        if (!this.isModified()) {\n            this.setState({ cancelToViewer: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToViewer: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onEditOrgSave()\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateName(e.target.value)\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value)\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        console.warn('no updating id, naughty!')\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY)\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.name.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.name)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={this.onNameChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.name)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-name\">\n                        {this.props.editedOrganization.name.value || ''}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                            </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.id.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.id)}\n                            placeholder={placeholder}\n                            onChange={this.onIdChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.id)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-id\">\n                        <span style={{ color: 'silver' }}>{this.origin}/#org/</span>\n                        {this.props.editedOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderBrokenHomeURL() {\n        const tooltipTitle = 'The Home URL is broken; either correct it or leave it empty'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value === null) {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n\n        if (homeUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenHomeURL()}\n                </div>\n            )\n        }\n\n        const tooltipTitle = 'Try out your url by clicking this link'\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <Tooltip title={tooltipTitle} >\n                    <a href={homeUrlField.value} target=\"_blank\">\n                        <Icon type=\"link\" />\n                    </a>\n                </Tooltip>\n            </div>\n        )\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"editOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button icon=\"close\"\n                type=\"danger\"\n                onClick={this.onFinish.bind(this)}>\n                Cancel\n            </Button>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Edit Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editOrganizationForm\" className=\"EditOrganization-editor scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {this.renderEditorHeader()}\n                <div className=\"EditOrganization-body\">\n                    {this.renderNameRow(this.props.editedOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.editedOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.editedOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.editedOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.editedOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.editedOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.editedOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"EditOrganization-row\">\n                        <div className=\"EditOrganization-col1\">\n                        </div>\n                        <div className=\"EditOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.editedOrganization.name.value && this.props.editedOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.editedOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.editedOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderBrokenLogo() {\n        const tooltipTitle = 'The Logo URL is broken; either correct it or empty the field for the default logo'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (logoUrlField.value === null) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n\n        if (logoUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenLogo()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Close\n                        </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"save\"\n                        form=\"editOrganizationForm\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                    </Button>\n                </span>\n            </span>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n        return (\n            <div className=\"EditOrganization scrollable-flex-column\">\n                <div className=\"EditOrganization-main scrollable-flex-column\">\n                    {this.renderEditor()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default EditOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n    StoreState, EditableOrganization, EditState,\n    SaveState, ValidationState\n} from '../../../../../types';\nimport {\n    editOrgSave,\n    updateName,\n    updateDescription, updateLogoUrl, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../../../redux/actions/editOrg';\nimport EditOrganization from './component';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\ninterface OwnProps {\n    onFinish: () => void\n}\n\nexport interface StateProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface DispatchProps {\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.editOrgView.viewModel) {\n        throw new Error('What, no view model??')\n    }\n    const {\n        views: {\n            editOrgView: {\n                viewModel: { editState, saveState, validationState, editedOrganization, organization }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        editedOrganization,\n        organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onEditOrgSave: () => {\n            dispatch(editOrgSave() as any)\n        },\n        onUpdateName: (name: string) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        // onUpdateId: (id) => {\n        //     dispatch(editOrgUpdateId(id) as any)\n        // },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(EditOrganization)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, EditOrgView } from '../../../../../types'\nimport Container from './container'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    view: EditOrgView\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Editor...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/editOrg'\nimport { Alert, Spin } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    view: EditOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.editOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './RowWrapper.css'\n\nexport interface Dimensions {\n    offsetHeight: number,\n    scrollTop: number,\n    clientHeight: number\n}\nexport interface RowWrapperProps {\n    index: number\n    containerDimensions: Dimensions | null\n    buffer: number\n    approximateRowHeight: number\n    emptyRowRenderer: () => JSX.Element\n}\n\ninterface RowWrapperState {\n\n}\n\nexport default class RowWrapper extends React.Component<RowWrapperProps, RowWrapperState> {\n    ref: React.RefObject<HTMLDivElement>\n    constructor(props: RowWrapperProps) {\n        super(props)\n        this.ref = React.createRef()\n    }\n\n    isVisible() {\n        // const relativeLeft = (l - cl) - cs;\n        // const relativeRight = relativeLeft + w;\n        // if (relativeRight < 0) {\n        //     return false;\n        // }\n        // if (relativeLeft > cw) {\n        //     return false;\n        // }\n        // return true\n\n        if (!this.ref.current) {\n            return false\n        }\n\n        const d = this.props.containerDimensions\n        if (!d) {\n            return false\n        }\n\n        const buffer = this.props.buffer * this.props.approximateRowHeight\n\n        const containerVisibleTop = Math.max(d.scrollTop - buffer, 0)\n        const containerVisibleBottom = d.scrollTop + d.clientHeight + buffer\n\n        const h = this.ref.current.offsetHeight\n        const t = this.ref.current.offsetTop\n\n        const topBelowTop = (t >= containerVisibleTop)\n        const topAboveBottom = (t <= containerVisibleBottom)\n\n        const bottomBelowTop = (t + h >= containerVisibleTop)\n        const bottomAboveBottom = (t + h <= containerVisibleBottom)\n\n        const visible = (topBelowTop && topAboveBottom) || (bottomBelowTop && bottomAboveBottom)\n        return visible\n    }\n\n    render() {\n        const show = this.isVisible()\n        if (show) {\n            return (\n                <div className=\"RowWrapper-rendered\" ref={this.ref}>\n                    {this.props.children}\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"RowWrapper-unrendered\" style={{ height: this.props.approximateRowHeight }} ref={this.ref}>\n                    {this.props.emptyRowRenderer()}\n                </div>\n            )\n        }\n    }\n}","import * as React from 'react'\nimport RowWrapper from './RowWrapper'\nimport './FlexibleColumnWrapper.css'\n\nexport interface Dimensions {\n    offsetHeight: number,\n    scrollTop: number,\n    clientHeight: number\n}\n\ninterface Listener {\n    target: Window | Node\n    type: string\n    listener: EventListener\n}\n\nexport abstract class Renderable {\n    currentItem: number | null\n    constructor() {\n        this.currentItem = 0\n    }\n\n    abstract render(index: number): JSX.Element\n    abstract size(): number\n    abstract renderEmpty(): JSX.Element\n}\n\nexport interface FlexibleColumnWrapperProps {\n    // rowRenderer: (index: number) => JSX.Element\n    renderable: Renderable\n    // rowCount: number\n}\n\nexport interface FlexibleColumnWrapperState {\n    containerDimensions: Dimensions | null\n}\n\nexport class FlexibleColumnWrapper extends React.Component<FlexibleColumnWrapperProps, FlexibleColumnWrapperState> {\n\n    wrapperContainerRef: React.RefObject<HTMLDivElement>\n    listeners: Array<Listener>\n    limitingTimer: number | null\n    limitingTimeout: number\n\n    constructor(params: FlexibleColumnWrapperProps) {\n        super(params)\n\n        this.state = {\n            containerDimensions: null\n        }\n\n        this.wrapperContainerRef = React.createRef()\n        this.listeners = []\n        this.limitingTimer = null\n        this.limitingTimeout = 100\n    }\n\n    calcContainerBounds() {\n        if (this.wrapperContainerRef.current === null) {\n            return null\n        }\n        const dim = {\n            offsetHeight: this.wrapperContainerRef.current.offsetHeight,\n            scrollTop: this.wrapperContainerRef.current.scrollTop,\n            clientHeight: this.wrapperContainerRef.current.clientHeight\n        }\n        return dim\n    }\n\n    limiter(fun: () => void) {\n        if (this.limitingTimer) {\n            window.clearTimeout(this.limitingTimer)\n        }\n        this.limitingTimer = window.setTimeout(() => {\n            fun()\n        }, this.limitingTimeout)\n    }\n\n    checkDimensions = () => {\n        const currentDimensions = this.calcContainerBounds()\n        if (!currentDimensions) {\n            return\n        }\n\n        const lastDimensions = this.state.containerDimensions\n        if (!lastDimensions) {\n            this.setState({ containerDimensions: currentDimensions })\n        } else {\n            if (currentDimensions.offsetHeight !== lastDimensions.offsetHeight ||\n                currentDimensions.scrollTop !== lastDimensions.scrollTop ||\n                currentDimensions.clientHeight !== lastDimensions.clientHeight) {\n                this.setState({ containerDimensions: currentDimensions })\n            }\n        }\n    }\n\n    componentDidMount() {\n        if (this.wrapperContainerRef.current === null) {\n            return false\n        }\n\n        const scrollHandler = () => {\n            this.limiter(() => { this.checkDimensions() })\n        }\n\n        this.wrapperContainerRef.current.addEventListener('scroll', scrollHandler)\n        this.listeners.push({\n            target: this.wrapperContainerRef.current,\n            type: 'scroll',\n            listener: scrollHandler\n        })\n\n        const resizeHandler = () => {\n            this.limiter(() => { this.checkDimensions() })\n        }\n        window.addEventListener('resize', resizeHandler)\n        this.listeners.push({\n            target: window,\n            type: 'resize',\n            listener: resizeHandler\n        })\n\n        this.checkDimensions()\n    }\n\n    componentWillUnmount() {\n        this.listeners.forEach((listener) => {\n            listener.target.removeEventListener(listener.type, listener.listener)\n        })\n    }\n\n    render() {\n        let out: Array<JSX.Element> = []\n\n        for (let i = 0; i < this.props.renderable.size(); i += 1) {\n            out.push(\n                <RowWrapper index={i} key={String(i)}\n                    containerDimensions={this.state.containerDimensions}\n                    buffer={5} approximateRowHeight={73} emptyRowRenderer={() => { return this.props.renderable.renderEmpty() }}>\n                    {this.props.renderable.render(i)}\n                </RowWrapper>\n            )\n        }\n\n        return (\n            <div className=\"FlexibleColumnWrapper\" ref={this.wrapperContainerRef}>\n                {out}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport { NarrativeState } from '../../../../../types';\nimport { Icon, Button, Alert, Select, Tooltip } from 'antd';\nimport './component.css'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport MainMenu from '../../../../menu/component'\nimport { OrganizationNarrative, AccessibleNarrative } from '../../../../../data/models/narrative'\nimport NiceElapsedTime from '../../../../NiceElapsedTime'\nimport { FlexibleColumnWrapper, Renderable } from './FlexibleColumnWrapper'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narratives: Array<OrganizationNarrative>\n    relation: orgModel.Relation\n    selectedNarrative: OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    filter: string\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: OrganizationNarrative) => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass NarrativeRenderer extends Renderable {\n    rowRenderer: (index: number) => JSX.Element\n    rowCount: number\n    constructor(rowRenderer: (index: number) => JSX.Element, rowCount: number) {\n        super()\n\n        this.rowRenderer = rowRenderer\n        this.rowCount = rowCount\n    }\n\n    size() {\n        return this.rowCount\n    }\n\n    render(index: number) {\n        return this.rowRenderer(index)\n    }\n\n    renderEmpty() {\n        return (\n            <div className=\"RequestNarrative-narrative-skeleton\">\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '20em' }}>&nbsp;</div>\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '5em' }}>&nbsp;</div>\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '10em' }}>&nbsp;</div>\n            </div>\n        )\n    }\n}\n\nexport class RequestAddNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            containerDimensions: null\n        }\n\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    doSelectNarrative(narrative: OrganizationNarrative) {\n        this.props.doSelectNarrative(narrative)\n    }\n\n    doSendRequest() {\n        if (this.props.selectedNarrative === null) {\n            console.warn('attempt to send request without selected narrative')\n            return\n        }\n        this.props.doSendRequest(this.props.organization.id, this.props.selectedNarrative.narrative.workspaceId)\n    }\n\n    canSendRequest() {\n        if (this.props.selectedNarrative) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderPermission(narrative: AccessibleNarrative) {\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                return (\n                    <span>\n                        <Icon type=\"eye\" /> View\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.EDIT:\n                return (\n                    <span>\n                        <Icon type=\"edit\" /> Edit\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> Admin\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> Owner\n                    </span>\n                )\n            default:\n                return (\n                    <span>\n                        ERROR\n                    </span>\n                )\n        }\n    }\n\n    renderPublicPermission(narrative: AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <span>\n                    <Icon type=\"global\" /> Public\n                </span>\n            )\n        } else {\n            return (\n                <span>\n                    <Icon type=\"lock\" /> Private\n                </span>\n            )\n        }\n    }\n\n    renderNarrative(narrative: AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"RequestNarrative-title\">\n                    {narrative.title}\n                </div>\n\n                <div className=\"RequestNarrative-publicPermission\">\n                    {this.renderPublicPermission(narrative)}\n                </div>\n                <div className=\"RequestNarrative-modifiedAt\">\n                    <span className=\"field-label\">\n                        <Icon type=\"save\" />\n                    </span>\n                    {' '}\n                    <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderOrgNarrative(orgNarrative: OrganizationNarrative) {\n        const { status, narrative } = orgNarrative\n        let isSelected\n        if (this.props.selectedNarrative &&\n            narrative.workspaceId === this.props.selectedNarrative.narrative.workspaceId) {\n            isSelected = true\n        } else {\n            isSelected = false\n        }\n        let classNames = ['RequestNarrative-narrativeCell']\n        if (isSelected) {\n            classNames.push('RequestNarrative-selected')\n        }\n        let flag\n        switch (status) {\n            case NarrativeState.ASSOCIATED:\n                classNames.push('RequestNarrative-narrativeInOrg')\n                flag = (\n                    <Tooltip title=\"This narrative is already associated with this organization\">\n                        <Icon type=\"check\" style={{ color: 'green' }} />\n                    </Tooltip>\n                )\n                break\n            case NarrativeState.REQUESTED:\n                classNames.push('RequestNarrative-narrativeInOrg')\n                flag = (\n                    <Tooltip title=\"You have already requested that this narrative be added to this organization\">\n                        <Icon type=\"loading\" style={{ color: 'orange' }} />\n                    </Tooltip>\n                )\n                break\n            default:\n                classNames.push('RequestNarrative-narrativeNotInOrg')\n        }\n\n        return (\n            <div\n                className={classNames.join(' ')}\n                onClick={() => { this.doSelectNarrative.call(this, orgNarrative) }}\n            >\n                <div className=\"RequestNarrative-narrativeFlag\">\n                    {flag}\n                </div>\n                <div className=\"RequestNarrative-narrative\">\n\n                    {this.renderNarrative(orgNarrative.narrative)}\n                </div>\n            </div>\n        )\n    }\n\n    renderNarratives() {\n        if (this.props.narratives.length === 0) {\n            return (\n                <div className=\"message\">\n                    You do not have any Narratives\n                </div>\n            )\n        }\n        const rowRenderer = (index: number) => {\n            return this.renderOrgNarrative(this.props.narratives[index])\n        }\n        const narrativeRenderer = new NarrativeRenderer(rowRenderer, this.props.narratives.length)\n        return (\n            <FlexibleColumnWrapper renderable={narrativeRenderer} />\n        )\n    }\n\n    onSearchSubmit() {\n        return\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\"\n                className=\"RequestNarrative-searchBar\"\n                onSubmit={this.onSearchSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search your Narratives\"\n                    // onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                />\n                <Button\n                    className=\"RequestNarrative-button\"\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n            </form>\n        )\n    }\n\n    renderFeedbackBar() {\n        return (\n            <div>\n                Showing\n                {' '}\n                {\n                    Intl.NumberFormat('en-US', {\n                        style: 'decimal',\n                        useGrouping: true\n                    }).format(this.props.narratives.length)\n                }\n                {' '}\n                narratives\n            </div>\n        )\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'title':\n                this.props.doSortBy(narrativeModel.Sort.TITLE)\n                break\n            case 'savedAt':\n                this.props.doSortBy(narrativeModel.Sort.LAST_SAVED)\n                break\n        }\n    }\n\n    onSortDirectionChange() {\n    }\n\n    onFilterChange() {\n    }\n\n    renderFilterSortBar() {\n        return (\n            <div className=\"RequestNarrative-filterSortBar\">\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"title\" key=\"title\">Title</Select.Option>\n                    <Select.Option value=\"savedAt\" key=\"savedAt\">Last saved</Select.Option>\n                </Select>\n            </div>\n        )\n    }\n\n    renderNarrativeSelector() {\n        return (\n            <div className=\"RequestNarrative-narrativeSelector scrollable-flex-column\">\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {/* <div style={{ flex: '0 0 10em' }}>\n                        {this.renderSearchBar()}\n                    </div> */}\n                    <div style={{ flex: '1 1 0px' }}>\n                        {this.renderFilterSortBar()}\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-feedbackBar\">\n                    {this.renderFeedbackBar()}\n                </div>\n                <div className=\"RequestNarrative-narratives scrollable-flex-column\">\n                    <div className=\"RequestNarrative-narrativesTable scrollable-flex-column\"  >\n                        {this.renderNarratives()}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderSelectedNarrativeButton() {\n        if (!this.props.selectedNarrative) {\n            return\n        }\n        if (this.props.selectedNarrative.status === NarrativeState.ASSOCIATED) {\n            return (\n                <Alert type=\"info\" message=\"This Narrative is associated with this Organization\" />\n            )\n        } else if (this.props.selectedNarrative.status === NarrativeState.REQUESTED) {\n            return (\n                <Alert type=\"warning\" message=\"You have requested to associate this Narrative with this Organization\" />\n            )\n        }\n        let buttonLabel\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            buttonLabel = 'Add Selected Narrative to Organization'\n        } else {\n            buttonLabel = 'Request Association of Selected Narrative to Organization'\n        }\n        return (\n            <Button\n                type=\"primary\"\n                onClick={this.doSendRequest.bind(this)}\n                disabled={!this.canSendRequest.call(this)}\n            >{buttonLabel}</Button>\n        )\n    }\n\n    renderSelectedNarrative() {\n        if (this.props.selectedNarrative) {\n            return (\n                <div className=\"RequestNarrative-selectedNarrative\">\n                    <div className=\"RequestNarrative-title\">\n                        {this.props.selectedNarrative.narrative.title}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        {' '}\n                        <NiceElapsedTime time={this.props.selectedNarrative.narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            )\n        } else {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to request association of\n                        it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            } else {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to associate it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            }\n        }\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div >\n        )\n    }\n\n    renderAlert() {\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization member, you are able to request association of any Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        If your Narrative association request is accepted by an Organization administrator,\n                        it will appear for all members on the main Organization page.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        } else {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization administrator, you will be able to immediate associate a Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        }\n    }\n\n    renderSelectedAlert() {\n        if (this.props.selectedNarrative && this.props.selectedNarrative.status === NarrativeState.NONE) {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const warning = (\n                    <React.Fragment>\n                        <p>\n                            Please be aware that if your request to associate this Narrative is accepted,\n                            you will be unable to directly remove it from the Organization.\n                    </p>\n                        <p>\n                            Only Organization administrators are able to remove associated Narratives from the Organization.\n                    </p>\n                    </React.Fragment>\n                )\n                return (\n                    <Alert type=\"warning\"\n                        message={warning}\n                        style={{ marginBottom: '10px', marginTop: '10px' }} />\n                )\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"RequestNarrative scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"RequestNarrative-body scrollable-flex-column\">\n                    <div className=\"RequestNarrative-selectNarrativeCol scrollable-flex-column\">\n                        <h3>Select a Narrative to Associate with this Organization</h3>\n                        {this.renderNarrativeSelector()}\n                    </div>\n                    <div className=\"RequestNarrative-selectedNarrativeCol\">\n                        <h3>Selected Narrative</h3>\n                        {/* {this.renderAlert()} */}\n                        {this.renderSelectedNarrative()}\n                        {this.renderSelectedAlert()}\n                        <div className=\"RequestNarrative-selectedNarrativeButtonBar\">\n                            {this.renderSelectedNarrativeButton()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-footer\">\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RequestAddNarrative","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState, Narrative, View, ViewOrgViewModelKind,\n    RequestNarrativeViewModel\n} from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../lib/error'\nimport { makeError } from '../../../combo/error/api'\nimport { OrganizationNarrative } from '../../../data/models/narrative'\nimport * as viewOrgActions from '../viewOrg'\n\nexport interface Load extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR\n    error: AnError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, narratives: Array<narrativeModel.OrganizationNarrative>, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n        organization, narratives, relation\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const [org, narratives, request, invitation] = await Promise.all([\n                orgClient.getOrganization(organizationId),\n                narrativeClient.getOwnNarratives(organizationId),\n                requestClient.getUserRequestForOrg(organizationId),\n                requestClient.getUserInvitationForOrg(organizationId)\n            ])\n\n            const relation = orgModel.determineRelation(org, username, request, invitation)\n            dispatch(loadSuccess(org, narratives, relation))\n        } catch (ex) {\n            console.error('loading error', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Selecting narrative\nexport interface SelectNarrative {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n}\n\nexport interface SelectNarrativeSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS\n    narrative: narrativeModel.OrganizationNarrative\n}\n\nexport interface SelectNarrativeError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR\n    error: AnError\n}\n\nexport function selectNarrativeStart(): SelectNarrativeStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n    }\n}\n\nexport function selectNarrativeSuccess(narrative: OrganizationNarrative): SelectNarrativeSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function selectNarrativeError(error: AnError): SelectNarrativeError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\nexport function selectNarrative(narrative: OrganizationNarrative) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectNarrativeStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: fetch narrative and populate the selected narrative accordingly...\n        dispatch(selectNarrativeSuccess(narrative))\n    }\n}\n\n// Sending Request\nexport interface SendRequest {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND\n}\n\nexport interface SendRequestStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n}\n\nexport interface SendRequestSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    request: requestModel.Request | boolean\n}\n\nexport interface SendRequestError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n    error: AnError\n}\n\n\nexport function sendRequestStart(): SendRequestStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n    }\n}\n\nexport function sendRequestSuccess(request: requestModel.Request | boolean): SendRequestSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n        request: request\n    }\n}\n\nexport function sendRequestError(error: AnError): SendRequestError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n        error: error\n    }\n}\n\nexport function sendRequest(groupId: string, workspaceId: number) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendRequestStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const request = await orgClient.addOrRequestNarrativeToGroup(groupId, workspaceId)\n            dispatch(sendRequestSuccess(request))\n            dispatch(viewOrgActions.reload(groupId))\n        } catch (ex) {\n            dispatch(sendRequestError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Unloading\n\nexport interface Unload extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface Sort {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT\n    sort: narrativeModel.Sort\n}\n\nexport interface SortStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n}\n\nexport interface SortSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS\n    narratives: Array<narrativeModel.OrganizationNarrative>\n}\n\nexport interface SortError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR\n    error: AnError\n}\n\nfunction ensureView(state: StoreState): View<RequestNarrativeViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { requestNarrativeView } = viewModel.subViews\n    if (requestNarrativeView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return requestNarrativeView\n}\n\nexport function sort(sort: narrativeModel.Sort) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n        } as SortStart)\n\n        const state = getState()\n\n        let view: View<RequestNarrativeViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'missing view model'\n                })\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const sorted = narrativeClient.sortOrganizationNarratives(view.viewModel.narratives, sort)\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n                narratives: sorted\n            } as SortSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as types from '../../../../../types'\nimport Component from './component'\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport { RequestNarrativeViewModel } from '../../../../../types';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    // sortDirection: types.SortDirection\n    filter: string\n}\n\ninterface DispatchProps {\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => void\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.requestNarrativeView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const subViewModel: RequestNarrativeViewModel = viewModel.subViews.requestNarrativeView.viewModel\n\n    const {\n        organization, relation, narratives, selectedNarrative,\n    } = subViewModel\n\n    return {\n        organization, relation, narratives, selectedNarrative,\n        searching: false,\n        sortBy: 'title',\n        filter: ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        doSendRequest: (groupId: string, workspaceId: number) => {\n            dispatch(actions.sendRequest(groupId, workspaceId) as any)\n        },\n        doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => {\n            dispatch(actions.selectNarrative(narrative) as any)\n        },\n        doSortBy: (sortBy: narrativeModel.Sort) => {\n            dispatch(actions.sort(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: View<RequestNarrativeViewModel | NoneViewModel>\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <React.Fragment>\n                <Icon type=\"loading\" />{' '}Loading Your Narratives...\n            </React.Fragment>\n        )\n        return (\n            <Alert type=\"info\" message={message}\n                style={{ padding: '20px', width: '30em', margin: '30px auto 0 auto', textAlign: 'center' }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport { Icon, Alert } from 'antd'\nimport {\n    View, RequestNarrativeViewModel, StoreState, ViewOrgViewModelKind,\n    ViewState, NoneViewModel\n} from '../../../../../types'\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<RequestNarrativeViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    // This bit deals with the fact that we are a subview \n    // and it keeps TS happy.\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.requestNarrativeView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\nimport { Button, Tooltip, Menu, Icon, Dropdown } from 'antd';\nimport { ViewOrgViewModel, SubViews } from '../../../../types';\nimport './OrgMenu.css'\n\nexport interface OrgMenuProps {\n    viewModel: ViewOrgViewModel\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onChangeSubView: (subView: SubViews) => void\n}\n\nexport interface OrgMenuState {\n\n}\n\nexport default class OrgMenu extends React.Component<OrgMenuProps, OrgMenuState> {\n    constructor(props: OrgMenuProps) {\n        super(props)\n    }\n\n    // Event handlers\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.props.onChangeSubView(SubViews.MANAGE_MEMBERSHIP)\n                break\n            case 'editOrg':\n                this.props.onChangeSubView(SubViews.EDIT_ORGANIZATION)\n                break\n            case 'inviteUser':\n                this.props.onChangeSubView(SubViews.INVITE_USER)\n                break\n            case 'addNarrative':\n                this.props.onChangeSubView(SubViews.ADD_NARRATIVE)\n                break\n            case 'manageRelatedOrgs':\n                this.props.onChangeSubView(SubViews.MANAGE_RELATED_ORGS)\n                break\n            case 'addApp':\n                this.props.onChangeSubView(SubViews.ADD_APP)\n                break\n        }\n    }\n\n    // Renderers\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottom\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                    >\n                        <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                    </Tooltip>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"addApp\">\n                            <Icon type=\"appstore\" />{' '}Associate Apps\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={menu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"addApp\">\n                            <Icon type=\"appstore\" />{' '}Associate Apps\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={adminMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"addApp\">\n                            <Icon type=\"appstore\" />{' '}Associate Apps\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={ownerMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"OrgMenu\">\n                {this.renderOrgMenu()}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\nimport { Button, Icon, Alert, Select, Input, Dropdown, Menu, Modal } from 'antd'\nimport App from '../../../../entities/app/loader'\n\nexport interface AppsProps {\n    organization: orgModel.Organization\n    apps: { sortBy: string, searchBy: string, apps: Array<orgModel.AppResource> }\n    onAssociateApp: () => void\n    onRemoveApp: (appId: string) => void\n}\n\ninterface AppsState {\n\n}\n\nexport default class Apps extends React.Component<AppsProps, AppsState> {\n    constructor(props: AppsProps) {\n        super(props)\n    }\n\n    doRemoveApp(appId: string) {\n        const confirmed = () => {\n            this.props.onRemoveApp(appId)\n        }\n        const message = (\n            <React.Fragment>\n                <p>\n                    Please confirm the removal of this App from this Organization.\n                </p>\n                <p>\n                    All Organization members and the App authors will receive a notification.\n                </p>\n            </React.Fragment>\n        )\n        Modal.confirm({\n            title: 'Confirm',\n            content: message,\n            width: '50em',\n            okText: 'Confirm',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    renderButtonRow() {\n        return (\n            <Button\n                size=\"small\"\n                style={{ width: '100%' }}\n                className=\"Button-important\"\n                onClick={this.props.onAssociateApp}>\n                <Icon type=\"appstore\" />\n                Associate Apps\n            </Button>\n        )\n    }\n\n    renderSearchRow() {\n        return (\n            <React.Fragment>\n                <div className=\"Apps-searchInput\">\n                    <Input placeholder=\"Filter apps by title or author\" />\n                </div>\n                <div className=\"Apps-searchControls\">\n                    <span className=\"field-label\">sort</span>\n                    <Select\n                        style={{ width: '11em' }}\n                        dropdownMatchSelectWidth={true}\n                        defaultValue=\"dateAdded\">\n                        <Select.Option key=\"dateAdded\" value=\"dateAdded\">Date Added</Select.Option>\n                        <Select.Option key=\"name\" value=\"name\">Name</Select.Option>\n                    </Select>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderBrowseRows() {\n        if (this.props.apps.apps.length === 0) {\n            return (\n                <Alert type=\"info\" message=\"Sorry, no apps\" />\n            )\n        }\n\n        const apps = this.props.apps.apps.map((app, index) => {\n            const menu = (\n                <Menu>\n                    <Menu.Item key=\"removeApp\" onClick={() => this.doRemoveApp(app.appId)}>\n                        <Icon type=\"delete\" style={{ color: 'red' }} />\n                        Remove App from Organization\n                    </Menu.Item>\n                </Menu>\n            )\n            return (\n                <div key={String(index)} className=\"Apps-appRow SimpleCard\">\n                    <div className=\"Apps-appColumn\">\n                        <App appId={app.appId} />\n                    </div>\n                    <div className=\"Apps-menuColumn\">\n                        <Dropdown overlay={menu} trigger={['click']}>\n                            <Icon type=\"ellipsis\" />\n                        </Dropdown>\n                    </div>\n\n                </div>\n            )\n        })\n        return (\n            <React.Fragment>\n                {apps}\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"Apps\">\n                <div className=\"Apps-buttonRow\">\n                    {this.renderButtonRow()}\n                </div>\n                <div className=\"Apps-searchRow\">\n                    {this.renderSearchRow()}\n                </div>\n                <div className=\"Apps-browseRow\">\n                    {this.renderBrowseRows()}\n                </div>\n            </div>\n        )\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as appsModel from '../../../data/models/apps'\nimport {\n    StoreState, ViewOrgViewModelKind, SelectableApp,\n    ResourceRelationToOrg, ViewOrgViewModel, AddAppsViewModel\n} from '../../../types'\nimport { AnError } from '../../../combo/error/api'\nimport { makeError } from '../../../lib/error'\nimport { NarrativeMethodStoreClient } from '../../../data/apis/narrativeMethodStore'\nimport { RequestResourceType, RequestType } from '../../../data/models/requests'\nimport * as viewOrgActions from '../viewOrg'\nimport { AppBriefInfo } from '../../../data/models/apps';\n\nexport interface AddAppsAction extends Action {\n\n}\n\nexport interface Load extends AddAppsAction {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD\n}\n\nexport interface LoadStart extends AddAppsAction {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_START\n}\n\nexport interface LoadSuccess extends AddAppsAction {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_SUCCESS\n    rawApps: Array<SelectableApp>\n    sortBy: string\n    searchBy: string\n    apps: Array<SelectableApp>\n    selectedApp: SelectableApp | null\n}\n\nexport interface LoadError extends AddAppsAction {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends AddAppsAction {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_START\n    }\n}\n\nfunction loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_ERROR,\n        error: error\n    }\n}\n\nfunction loadSuccess(apps: Array<SelectableApp>) {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_LOAD_SUCCESS,\n        rawApps: apps,\n        sortBy: 'name',\n        searchBy: '',\n        apps,\n        selectedApp: null\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_UNLOAD\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, AddAppsAction>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const state = getState()\n\n        // get the org, with the usual funny business.\n        const {\n            views: {\n                viewOrgView: {\n                    viewModel\n                }\n            }\n        } = state\n\n        if (!viewModel) {\n            dispatch(loadError(makeError({\n                code: 'load-error',\n                message: 'Error loading: no org view model'\n            })))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(loadError(makeError({\n                code: 'load-error',\n                message: 'Error loading: no org view model'\n            })))\n            return\n        }\n\n        const { organization } = viewModel\n\n        if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n            dispatch(loadError(makeError({\n                code: 'load-error',\n                message: 'Error loading: not normal org'\n            })))\n            return\n        }\n\n        // get all apps. we can do this because there \n        // are not very many. \n        // TODO: switch to search, not filter, model; this\n        // implies paging, sorting, etc. on the back end.\n        const {\n            auth: { authorization: { token, username } },\n            app: {\n                config: {\n                    services: {\n                        NarrativeMethodStore: {\n                            url: narrativeMethodStoreURL\n                        }\n                    }\n                } } } = state\n\n        const nmsClient = new NarrativeMethodStoreClient({\n            url: narrativeMethodStoreURL,\n            token: token\n        })\n\n        const hasInboxRequest = (appId: appsModel.AppID) => {\n            // const groupsAppId = appId.split('/').join('.')\n            return viewModel.requestInbox.find((request) => {\n                if (request.resourceType === RequestResourceType.APP) {\n                    if (request.type === RequestType.REQUEST) {\n                        if (request.appId === appId) {\n                            return true\n                        }\n                    }\n                }\n                return false\n            })\n        }\n\n        const hasOutboxRequest = (appId: appsModel.AppID) => {\n            // const groupsAppId = appId.split('/').join('.')\n            return viewModel.requestOutbox.find((request) => {\n                if (request.resourceType === RequestResourceType.APP) {\n                    if (request.type === RequestType.REQUEST) {\n                        if (request.appId === appId) {\n                            return true\n                        }\n                    }\n                }\n                return false\n            })\n        }\n\n        try {\n            const methods = await nmsClient.list_methods({ tag: 'release' })\n\n            const appResources = organization.apps;\n\n            const apps = methods\n                .filter((method) => {\n                    return (method.authors.includes(username))\n                })\n                .map((method) => {\n                    let relation: ResourceRelationToOrg\n                    const appId = method.id\n                    if (appResources.find((appResource) => {\n                        // TODO: why, oh, why use module.method?? \n                        // Oh, I know why, but why??\n                        return (appResource.appId === appId)\n                    })) {\n                        relation = ResourceRelationToOrg.ASSOCIATED\n                    } else if (hasOutboxRequest(appId)) {\n                        relation = ResourceRelationToOrg.ASSOCIATION_PENDING\n                    } else if (hasInboxRequest(appId)) {\n                        relation = ResourceRelationToOrg.ASSOCIATION_PENDING\n                    } else {\n                        relation = ResourceRelationToOrg.NONE\n                    }\n                    return {\n                        app: appsModel.methodBriefInfoToAppBriefInfo(method),\n                        selected: false,\n                        relation, appId\n                    }\n                })\n                // TODO: Sort will be separated.\n                .sort((a, b) => {\n                    return (a.app.name.localeCompare(b.app.name))\n                })\n\n\n            dispatch(loadSuccess(apps))\n        } catch (ex) {\n            dispatch(loadError(makeError({\n                code: 'error',\n                message: ex.message\n            })))\n        }\n\n    }\n}\n\n// Select app\n\nexport interface Select {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SELECT\n    appID: string\n}\n\nexport interface SelectSuccess {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SELECT_SUCCESS\n    selectedApp: SelectableApp\n}\n\nexport function selectSuccess(selectedApp: SelectableApp): SelectSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_SELECT_SUCCESS,\n        selectedApp\n    }\n}\n\nfunction ensureViewModel(state: StoreState): [ViewOrgViewModel, AddAppsViewModel] {\n    const {\n        views: {\n            viewOrgView: {\n                viewModel\n            }\n        }\n    } = state\n\n    if (!viewModel) {\n        throw new Error('Error loading: no org view model')\n    }\n\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('View model not NORMAL kind')\n    }\n\n    const {\n        subViews: {\n            addAppsView: {\n                viewModel: addAppsViewModel\n            }\n        }\n    } = viewModel\n\n    if (addAppsViewModel === null) {\n        throw new Error('Error loading: no org subview model')\n    }\n\n    return [viewModel, addAppsViewModel]\n}\n\nexport function select(selectedAppId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AddAppsAction>, getState: () => StoreState) => {\n        const state = getState()\n\n        try {\n            const [orgViewModel, viewModel] = ensureViewModel(state)\n\n            // now to the actual work...\n            // get the apps;\n            // pluck the selected one out\n            // set it to the selected one,\n            // mark the apps in the list as selected (TODO)\n\n            const selected = viewModel.apps.filter((app) => {\n                return (app.app.id === selectedAppId)\n            })\n\n            if (selected.length === 0) {\n                dispatch(loadError(makeError({\n                    code: 'runtime-error',\n                    message: 'Strange, no matching app for selection'\n                })))\n                return\n            }\n\n            dispatch(selectSuccess(selected[0]))\n        } catch (ex) {\n            dispatch(loadError(makeError({\n                code: 'runtime-error',\n                message: ex.message\n            })))\n            return\n        }\n    }\n}\n\n// Association\n\nexport interface RequestAssociation {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP,\n    appId: string\n}\n\nexport interface RequestAssociationStart {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_START\n}\n\nexport interface RequestAssociationSuccess {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS,\n    appId: string\n    pending: boolean\n}\n\nexport interface RequestAssociationError {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_ERROR,\n    error: AnError\n}\n\nexport function requestAssociationSuccess(appId: string, pending: boolean): RequestAssociationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_SUCCESS,\n        appId, pending\n    }\n}\n\nexport function RequestAssociationError(error: AnError): RequestAssociationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_REQUEST_ASSOCIATE_APP_ERROR,\n        error\n    }\n}\n\nexport function requestAssociation(appId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AddAppsAction>, getState: () => StoreState) => {\n        try {\n            const [orgViewModel, viewModel] = ensureViewModel(getState())\n\n            // do the association request\n\n            // depending on the response, set the pending flag\n            const {\n                auth: { authorization: { token, username } },\n                app: {\n                    config: {\n                        services: {\n                            Groups: {\n                                url: groupsUrl\n                            },\n                            UserProfile: {\n                                url: userProfileUrl\n                            }\n                        }\n                    }\n                }\n            } = getState()\n\n            const orgClient = new orgModel.OrganizationModel({\n                groupsServiceURL: groupsUrl,\n                userProfileServiceURL: userProfileUrl,\n                username, token\n            })\n\n            // App id is naturally module/method, but the groups api wants module.method.\n            // Why, oh why?, other than being more \"REST friendly?\"\n            const groupsAppId = appId.split('/').join('.')\n\n            const result = await orgClient.addOrRequestAppToGroup(orgViewModel.organization.id, groupsAppId)\n\n            let pending: boolean\n            if (result === true) {\n                pending = false\n            } else {\n                pending = true\n            }\n\n            // now to the actual work...\n            // get the apps;\n            // pluck the selected one out\n            // set it to the selected one,\n            // mark the apps in the list as selected (TODO)\n\n            // const selected = viewModel.apps.filter((app) => {\n            //     return (app.app.id === selectedAppId)\n            // })\n\n            // if (selected.length === 0) {\n            //     dispatch(loadError(makeError({\n            //         code: 'runtime-error',\n            //         message: 'Strange, no matching app for selection'\n            //     })))\n            //     return\n            // }\n\n            dispatch(requestAssociationSuccess(appId, pending))\n            dispatch(viewOrgActions.reload(orgViewModel.organization.id))\n        } catch (ex) {\n            dispatch(RequestAssociationError(makeError({\n                code: 'runtime-error',\n                message: ex.message\n            })))\n            return\n        }\n    }\n}\n\n// SEARCH\n\nexport interface Search {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH,\n    searchBy: string\n}\n\nexport interface SearchStart {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_START\n}\n\nexport interface SearchSuccess {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_SUCCESS\n    apps: Array<SelectableApp>\n}\n\nexport interface SearchError {\n    type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_ERROR\n    error: AnError\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_START\n    }\n}\n\nfunction searchSuccess(apps: Array<SelectableApp>): SearchSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_SUCCESS,\n        apps\n    }\n}\n\nfunction searchError(error: AnError): SearchError {\n    return {\n        type: ActionFlag.VIEW_ORG_ADD_APPS_SEARCH_ERROR,\n        error\n    }\n}\n\n// function ensureView(state: StoreState): View<AddAppsViewModel> {\n//     const {\n//         views: {\n//             viewOrgView: { viewModel }\n//         }\n//     } = state\n//     if (viewModel === null) {\n//         throw new Error('invalid state -- no view value')\n//     }\n//     if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n//         throw new Error('invalid state -- no view value')\n//     }\n//     const { addAppsView } = viewModel.subViews\n//     if (addAppsView === null) {\n//         throw new Error('invalid state -- no view value')\n//     }\n//     return addAppsView\n// }\n\n// function ensureViewModel(state: StoreState): AddAppsViewModel {\n//     const view = ensureView(state)\n//     if (view.viewModel === null) {\n//         throw new Error('invalid state -- no view model')\n//     }\n//     return view.viewModel\n// }\n\n\ntype SearchExpression = Array<RegExp>\n\nfunction applySearch(apps: Array<SelectableApp>, searchExpression: SearchExpression) {\n    return apps.filter((app) => {\n        if (searchExpression.length === 0) {\n            return true\n        }\n        return searchExpression.every((expr) => {\n            return expr.test(app.app.name) ||\n                expr.test(app.app.subtitle) ||\n                expr.test(app.app.moduleName)\n        })\n    })\n}\n\nexport function search(searchBy: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AddAppsAction>, getState: () => StoreState) => {\n        try {\n            dispatch(searchStart())\n\n            // TODO: better parser\n            const searchExpression = searchBy.split(/[\\s]+/).map((term) => {\n                return new RegExp(term, 'i')\n            })\n\n            const [viewOrgVM, viewModel] = ensureViewModel(getState())\n\n            const {\n                rawApps\n            } = viewModel\n\n            const foundApps = applySearch(rawApps, searchExpression)\n\n            dispatch(searchSuccess(foundApps))\n\n        } catch (ex) {\n            dispatch(searchError(makeError({\n                code: 'error',\n                message: ex.message\n            })))\n        }\n    }\n\n}","import * as React from 'react'\nimport MainMenu from '../../../../menu/component'\nimport { Button, Input, Icon, Alert, Select } from 'antd'\nimport './component.css'\nimport { SelectableApp, ResourceRelationToOrg } from '../../../../../types';\nimport App from '../../../../entities/app/loader';\nimport { ChangeEvent } from 'react';\n\nexport interface AddAppsProps {\n    apps: Array<SelectableApp>\n    selectedApp: SelectableApp | null\n    // sortBy: string\n    onFinish: () => void\n    onSelectApp: (appId: string) => void\n    onRequestAssociation: (appId: string) => void\n    onSearch: (searchBy: string) => void\n}\n\ninterface AddAppsState {\n}\n\ntype AlertType = 'info' | 'warning' | 'error' | 'success'\n\nexport default class AddApps extends React.Component<AddAppsProps, AddAppsState> {\n    constructor(props: AddAppsProps) {\n        super(props)\n    }\n\n    doSelectApp(app: SelectableApp) {\n        this.props.onSelectApp(app.app.id)\n    }\n\n    doRequestAssociation() {\n        if (this.props.selectedApp) {\n            this.props.onRequestAssociation(this.props.selectedApp.app.id)\n        }\n    }\n\n    doSearch(e: ChangeEvent<HTMLInputElement>) {\n        const search = e.target.value\n        this.props.onSearch(search)\n    }\n\n    doSortBy(sortBy: string) {\n        // const search = e.target.value\n        console.log('sort on ', sortBy)\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.props.onFinish}>\n                        Done\n                </Button>\n                </div>\n            </div >\n        )\n    }\n\n    renderSearchBar() {\n        return (\n            <div className=\"AddApps-searchBar\">\n                <div className=\"AddApps-searchInput\">\n                    <Input\n                        onChange={this.doSearch.bind(this)}\n                        style={{ width: '100%' }}\n                        placeholder=\"Filter apps by title\" />\n                </div>\n                <div className=\"AddApps-sortControl\">\n                    <Select\n                        onChange={this.doSortBy.bind(this)}\n                        defaultValue=\"name\"\n                        style={{ width: '10em' }}\n                        dropdownMatchSelectWidth={true}>\n                        <Select.Option value=\"name\" key=\"name\">App Name</Select.Option>\n                        <Select.Option value=\"module\" key=\"module\">Module Name</Select.Option>\n                    </Select>\n                </div>\n            </div>\n        )\n    }\n\n    renderAppStatus(app: SelectableApp) {\n        switch (app.relation) {\n            case (ResourceRelationToOrg.NONE):\n                return\n            case (ResourceRelationToOrg.ASSOCIATED):\n                return (\n                    <Icon type=\"check\" style={{ color: 'green' }} />\n                )\n            case (ResourceRelationToOrg.ASSOCIATION_PENDING):\n                return (\n                    <Icon type=\"loading\" style={{ color: 'orange' }} />\n                )\n        }\n    }\n\n    renderApps() {\n        if (this.props.apps.length === 0) {\n            const message = (\n                <React.Fragment>\n                    <p>\n                        You have not authored any released apps\n                    </p>\n                </React.Fragment>\n            )\n            return (\n                <Alert type=\"info\" message={message} />\n            )\n        }\n        const apps = this.props.apps.map((app, index) => {\n            let classes = ['AddApps-app']\n            if (app.selected) {\n                classes.push('Hoverable-selected')\n            } else {\n                classes.push('Hoverable')\n            }\n            return (\n                <div className={classes.join(' ')} key={String(index)} onClick={() => { this.doSelectApp(app) }}>\n                    <div className=\"AddApps-app-statusColumn\">\n                        {this.renderAppStatus(app)}\n                    </div>\n                    <div className=\"AddApps-app-appColumn\">\n                        <App appId={app.app.id} />\n                        {/* <AppBrief app={app.app} /> */}\n                    </div>\n\n                </div>\n            )\n        })\n        return (\n            <div className=\"AddApps-apps\">\n                {apps}\n            </div>\n        )\n    }\n\n    renderAppSelector() {\n        return (\n            <React.Fragment>\n                {this.renderSearchBar()}\n                {this.renderApps()}\n            </React.Fragment>\n        )\n    }\n\n    renderMessage() {\n        const app = this.props.selectedApp\n        let alertType: AlertType\n        let message: string\n        if (this.props.apps.length === 0) {\n            message = 'You have not authored any released apps'\n            alertType = 'info'\n        } else if (app === null) {\n            message = 'Please select an App to associate'\n            alertType = 'info'\n        } else {\n            switch (app.relation) {\n                case (ResourceRelationToOrg.ASSOCIATED):\n                    message = 'This App is already associated'\n                    alertType = 'warning'\n                    break\n                case (ResourceRelationToOrg.ASSOCIATION_PENDING):\n                    message = 'You have requested association of this App'\n                    alertType = 'warning'\n                    break\n                default:\n                    return\n            }\n        }\n\n        return (\n            <Alert\n                type={alertType}\n                style={{ marginBottom: '10px' }}\n                message={message} />\n        )\n    }\n\n    renderSelectedApp() {\n        if (this.props.selectedApp === null) {\n            return\n        }\n        return (\n            <div className=\"AddApps-selectedApp\">\n                <App appId={this.props.selectedApp.app.id} />\n            </div>\n        )\n    }\n\n    renderAppSelectionControls() {\n        if (this.props.selectedApp === null) {\n            return (\n                <Button\n                    disabled\n                    type=\"primary\">\n                    Associate this App\n                </Button>\n            )\n        }\n        switch (this.props.selectedApp.relation) {\n            case (ResourceRelationToOrg.NONE):\n                return (\n                    <Button\n                        onClick={() => { this.doRequestAssociation() }}\n                        type=\"primary\">\n                        Associate this App\n                    </Button>\n                )\n            case (ResourceRelationToOrg.ASSOCIATED):\n                return (\n                    <Button\n                        disabled={true}\n                        type=\"primary\">\n                        Associate this App\n                    </Button>\n                )\n            case (ResourceRelationToOrg.ASSOCIATION_PENDING):\n                return (\n                    <Button\n                        disabled={true}\n                        type=\"primary\">\n                        Associate this App\n                    </Button>\n                )\n        }\n    }\n\n    renderAppAdder() {\n        return (\n            <React.Fragment>\n                {this.renderSelectedApp()}\n                {this.renderMessage()}\n                <div className=\"AddApps-selectionControls\">\n                    {this.renderAppSelectionControls()}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"AddApps\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"AddApps-row\">\n                    <div className=\"AddApps-selectColumn\">\n                        <h3>Select an App you have authored</h3>\n                        {this.renderAppSelector()}\n                    </div>\n\n                    <div className=\"AddApps-addColumn\">\n                        <h3>View and Add App</h3>\n                        {this.renderAppAdder()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { SelectableApp, StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/addApps'\nimport Component from './component'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    apps: Array<SelectableApp>\n    selectedApp: SelectableApp | null\n}\n\ninterface DispatchProps {\n    // onSearchUsers: (query: userModel.UserQuery) => void\n    // onSelectUser: (username: string) => void\n    // onSendInvitation: () => void\n    onSelectApp: (appId: string) => void\n    onRequestAssociation: (appId: string) => void\n    onSearch: (searchBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.addAppsView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const vm = viewModel.subViews.addAppsView.viewModel\n    return {\n        apps: vm.apps,\n        selectedApp: vm.selectedApp\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        // onSearchUsers: ({ query, excludedUsers }) => {\n        //     dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        // },\n        // onSelectUser: (username: string) => {\n        //     dispatch(actions.selectUser(username) as any)\n        // },\n        // onSendInvitation: () => {\n        //     dispatch(actions.sendInvitation() as any)\n        // }\n        onSelectApp: (appId: string) => {\n            dispatch(actions.select(appId) as any)\n        },\n        onRequestAssociation: (appId: string) => {\n            dispatch(actions.requestAssociation(appId) as any)\n        },\n        onSearch: (searchBy: string) => {\n            dispatch(actions.search(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport Container from './reduxAdapter'\nimport {\n    StoreState, ViewOrgViewModelKind, ViewState,\n    View, NoneViewModel, AddAppsViewModel\n} from '../../../../../types';\n\nexport interface LoaderProps {\n    view: View<AddAppsViewModel | NoneViewModel>\n    onLoad: () => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error loading \"add apps\" tool.\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            case ViewState.OK:\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/addApps'\nimport { Spin, Alert } from 'antd';\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    view: View<AddAppsViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.addAppsView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { Marked } from 'marked-ts'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { ViewOrgViewModel, SubViews } from '../../../../types'\nimport { Button, Modal, Icon, Tooltip, Card, Dropdown, Menu, Alert, Tabs } from 'antd'\nimport Header from '../../../Header'\nimport Members from './members/reduxAdapter'\nimport Requests from './requests/container'\nimport BriefOrganizationHeader from './BriefOrganizationHeader'\nimport RelatedOrganizations from './relatedOrgs/reduxAdapter'\nimport ManageRelatedOrganizations from './manageRelatedOrganizations/loader'\nimport InviteUser from './inviteUser/loader'\nimport Narratives from './narratives/component'\nimport ManageMembership from './manageMembership/loader'\nimport EditOrganization from './editOrganization/loader'\nimport RequestAddNarrative from './requestAddNarrative/loader'\nimport * as requestModel from '../../../../data/models/requests'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport './component.css'\nimport OrgMenu from './OrgMenu';\nimport Apps from './apps/component';\nimport AddApps from './addApps/loader';\n\nenum NavigateTo {\n    NONE = 0,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    BROWSER\n}\n\nenum AccordionState {\n    UP = 0,\n    DOWN\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n    accordionState: AccordionState\n    subView: SubViews\n}\n\nexport interface ViewOrganizationProps {\n    viewModel: ViewOrgViewModel\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n    onRemoveApp: (appId: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            },\n            accordionState: AccordionState.UP,\n            subView: SubViews.NORMAL\n        }\n    }\n\n    onManageRelatedOrgs() {\n        this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n    }\n\n    onInviteUser() {\n        this.setState({ subView: SubViews.INVITE_USER })\n    }\n\n    onAssociateApp() {\n        this.setState({ subView: SubViews.ADD_APP })\n    }\n\n    doAddRelatedOrgs() {\n        this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n    }\n\n    onChangeSubView(subView: SubViews) {\n        this.setState({ subView })\n    }\n\n    onViewMembers() {\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onRequestAddNarrative() {\n        this.setState({ subView: SubViews.ADD_NARRATIVE })\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        this.props.onRemoveNarrative(narrative)\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.props.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    Organization help here...\n                </div>\n            )\n        })\n    }\n\n    onRequestShare(narrative: orgModel.NarrativeResource) {\n        // Drawer.\n        // Drawer.open({\n        //     title: 'Request Access to Narrative',\n        //     content: 'Are you sure?'\n        // })\n        this.setState({ requestAccess: { narrative: narrative } })\n        // alert('not yet implemented')\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: { narrative: null } })\n    }\n\n    buildFooter() {\n        return (\n            <div>\n                {this.renderEditRow()}\n                {/* <p style={{ textAlign: 'center' }}>\n                    You may also  <NavLink to={`/organizations`}><Button type=\"danger\" icon=\"undo\">Return to Orgs</Button></NavLink> to the organizations browser.\n                </p> */}\n            </div>\n        )\n    }\n\n    renderEditRow() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <p style={{ textAlign: 'center' }}>\n                    As the owner of this group, you may <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink> it.\n                </p>\n            )\n        }\n    }\n\n    renderEditButton() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit This Organization</Button></NavLink>\n            )\n        }\n    }\n\n    renderOrg() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <div className=\"ViewOrganization-org-description-org scrollable-flex-column\">\n                <div className=\"ViewOrganization-org-description\"\n                    dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.viewModel.organization.description || '') })}\n                />\n            </div>\n        )\n    }\n\n    // TODO: this should be a component, so we can pick up all the good stuff, which is now commented out...\n    renderOwnerInfo(org: orgModel.Organization) {\n        return (\n            <div className=\"ownerTable\">\n                <div className=\"proprietorCol\">\n\n                    <div className=\"owner\">\n                        <a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                        {' '}\n                        ❨{org.owner.username}❩\n                                </div>\n                    {/* <div className=\"profileOrganization\">\n                        {org.owner.user.organization}\n                    </div>\n                    <div className=\"profileOrganization\">\n                        {org.owner.user.city}, {org.owner.user.state}, {org.owner.user.country}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderRelation(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <div><Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'orange' }} spin={true} />Your membership <b>request</b> is pending</div>\n                        <div><Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button></div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                            <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" />Member</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"unlock\" theme=\"filled\" style={{ marginRight: '4px' }} />You own this organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    isMember(): boolean {\n        if (!this.props.viewModel.organization) {\n            return false\n        }\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    renderMembers() {\n        if (!this.isMember()) {\n            return (\n                <Alert message=\"Membership is only available to members\" type=\"info\" />\n            )\n        }\n        return (\n            <Members\n                organization={this.props.viewModel.organization}\n                relation={this.props.viewModel.relation}\n                onReloadOrg={this.props.onReloadOrg} />\n        )\n\n    }\n\n    renderGroupRequestsRow() {\n        const relation = this.props.viewModel.relation\n        const requests = this.props.viewModel.groupRequests\n        const invitations = this.props.viewModel.groupInvitations\n\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: bad. should not get here in this case...\n        if (requests === null || invitations === null) {\n            return\n        }\n        let inner\n        if (requests.length) {\n            inner = (\n                <div>\n                    group has no pending requests\n                </div>\n            )\n        } else {\n            inner = (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending request{invitations.length > 1 ? 's' : ''}\n\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"col1\">\n                    <span className=\"label\">admin</span>\n                </div>\n                <div className=\"col2\">\n                    <div className=\"relation\">\n                        {inner}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderGroupRequests(requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>) {\n        if (!requests.length) {\n            return (\n                <div className=\"message\">\n                    No pending group requests\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> There\n                        {' '}\n                        {requests.length > 1 ? 'are' : 'is'}\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending invitation{invitations.length > 1 ? 's' : ''}\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization!.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderUserRelationship() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        return (\n            <form className=\"infoTable\">\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <span className=\"label\">your relation</span>\n                    </div>\n                    <div className=\"col2\">\n                        <div className='relation'>\n                            {this.renderRelation(this.props.organization)}\n                        </div>\n                    </div>\n                </div> */}\n                {this.renderGroupRequestsRow()}\n            </form>\n        )\n    }\n\n    renderAdminTasks() {\n        const relation = this.props.viewModel.relation\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: ditto -- silly to test both conditions (this is only to make TS happy btw)\n        const { groupRequests, groupInvitations } = this.props.viewModel\n        if (groupInvitations === null || groupRequests === null) {\n            return\n        }\n        const count = groupRequests.length + groupInvitations.length\n        const title = (\n            <span><Icon type=\"unlock\" />\n                {' '}\n                group requests\n                {' '}\n                <span className=\"ViewOrganization-titleCount\">({count})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-adminTasksBox\">\n                <Card\n                    className=\"slimCard ViewOrganization-adminTasksCard\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={title} >\n                    {this.renderGroupRequests(groupRequests, groupInvitations)}\n                </Card>\n            </div>\n        )\n    }\n\n    renderJoinButton() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        if (this.props.viewModel.relation.type !== orgModel.UserRelationToOrganization.VIEW) {\n            return\n        }\n        return (\n            <Button\n                onClick={this.onJoinClick.bind(this)}\n            >\n                Join this Organization\n                </Button>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderMembersTab() {\n        return (\n            <div className=\"ViewOrganization-membersCol scrollable-flex-column\">\n                {this.renderMembersToolbar()}\n                {this.renderMembers()}\n            </div>\n        )\n    }\n\n    onAcceptRequest(request: requestModel.Request) {\n        this.props.onAcceptRequest(request.id)\n    }\n\n\n    renderMembersToolbar() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite one or more users to this organization\">\n                            <Button\n                                size=\"small\"\n                                style={{ width: '100%' }}\n                                className=\"Button-important\"\n                                onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" />Invite Users</Button>\n                        </Tooltip>\n                    </div>\n                )\n        }\n    }\n\n    renderRelatedOrgsToolbar() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Add one or more other organizations as 'related' to this one\">\n                            <Button\n                                size=\"small\"\n                                className=\"Button-important\"\n                                style={{ width: '100%' }}\n                                onClick={this.doAddRelatedOrgs.bind(this)}><Icon type=\"team\" />Add Related Orgs</Button>\n                        </Tooltip>\n                    </div>\n                )\n        }\n    }\n\n    renderToolbarButtons() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n        }\n    }\n\n    renderCombo() {\n        const isAdmin = (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER)\n\n        const isMember = this.props.viewModel.organization.isMember\n\n        // if (!isMember) {\n        //     return (\n        //         <p style={{ fontStyle: 'italic' }}>\n        //             The membership list is only available to members.\n        //         </p>\n        //     )\n        // }\n\n        const tabs = []\n\n        let memberCount\n        if (this.props.viewModel.organization.memberCount - 1) {\n            memberCount = String(this.props.viewModel.organization.memberCount - 1)\n        } else {\n            memberCount = 'Ø'\n        }\n        tabs.push((\n            <Tabs.TabPane\n                tab={<span><Icon type=\"team\" />Members <span className=\"ViewOrganization-tabCount\">({memberCount})</span></span>}\n                key=\"members\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderMembersTab()}\n            </Tabs.TabPane>\n        ))\n\n        if (isMember) {\n            if (isAdmin) {\n                const totalRequestCount = this.props.viewModel.requestInbox.length + this.props.viewModel.requestOutbox.length\n                const totalRequests = (\n                    <span className=\"ViewOrganization-tabCount\">\n                        ({totalRequestCount || 'Ø'})\n                    </span>\n                )\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests {totalRequests} </span>} key=\"inbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={this.props.viewModel.requestInbox} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            } else {\n                const outboxSize = this.props.viewModel.requestOutbox.length\n                let titleCount\n                if (outboxSize) {\n                    titleCount = String(outboxSize)\n                } else {\n                    titleCount = 'Ø'\n                }\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests <span className=\"ViewOrganization-tabCount\">({titleCount})</span></span>} key=\"outbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={[]} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            }\n        }\n\n        const relatedOrgCount = this.props.viewModel.organization.relatedOrganizations.length\n        const relatedOrgTab = (\n            <span>\n                <Icon type=\"team\" />\n                Related Orgs <span className=\"ViewOrganization-tabCount\">({relatedOrgCount})</span>\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane tab={relatedOrgTab} key=\"relatedorgs\" style={{ flexDirection: 'column' }}>\n                {this.renderRelatedOrgsToolbar()}\n                <RelatedOrganizations\n                    relatedOrganizations={this.props.viewModel.organization.relatedOrganizations}\n                    organization={this.props.viewModel.organization}\n                    onManageRelatedOrgs={() => { this.onManageRelatedOrgs() }} />\n            </Tabs.TabPane>\n        ))\n\n        return (\n            <Tabs\n                defaultActiveKey=\"members\"\n                className=\"ViewOrganization-tabs\"\n                animated={false}\n                size=\"small\"\n                tabPosition=\"top\"\n            >\n                {tabs}\n            </Tabs>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <div className=\"IconButton\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />\n                    </div>\n                    {/* <Button type=\"default\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />{' '}Back\n                    </Button> */}\n                </span>\n            </span>\n        )\n    }\n\n    onNavigateToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ subView: SubViews.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ subView: SubViews.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ subView: SubViews.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n            case 'addNarrative':\n                this.setState({ subView: SubViews.ADD_NARRATIVE })\n                break\n            case 'addApp':\n                this.setState({ subView: SubViews.ADD_APP })\n                break\n            case 'manageRelatedOrgs':\n                this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n                break\n        }\n    }\n\n    toggleAccordion() {\n        this.setState({\n            accordionState: this.state.accordionState === AccordionState.UP ? AccordionState.DOWN : AccordionState.UP\n        })\n    }\n\n    renderAccordionControl() {\n        let iconType\n        if (this.state.accordionState === AccordionState.UP) {\n            iconType = 'caret-down'\n        } else {\n            iconType = 'caret-up'\n        }\n        return (\n            <div className=\"ViewOrganization-accordion\" onClick={this.toggleAccordion.bind(this)}>\n                <div className=\"ViewOrganization-accordionCol1\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-accordionCol2\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                        <Icon type={iconType} />\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                    {/* <div className=\"ViewOrganization-accordionIcon\">\n                        <Icon type={iconType} />\n                    </div> */}\n                </div>\n                <div className=\"ViewOrganization-accordionCol3\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n\n    renderDescriptionTab() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <div className=\"ViewOrganization-org-description-org scrollable-flex-column\">\n                <div className=\"ViewOrganization-org-description\"\n                    dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.viewModel.organization.description || '') })}\n                />\n            </div>\n        )\n    }\n\n    renderNarrativesTab() {\n        return (\n            <Narratives\n                organization={this.props.viewModel.organization}\n                narratives={this.props.viewModel.narratives.narratives}\n                relation={this.props.viewModel.relation}\n                sortNarrativesBy={this.props.viewModel.narratives.sortBy}\n                searchNarrativesBy={this.props.viewModel.narratives.searchBy}\n                onSortNarratives={this.props.onSortNarratives}\n                onSearchNarratives={this.props.onSearchNarratives}\n                onRemoveNarrative={this.props.onRemoveNarrative}\n                onGetViewAccess={this.props.onGetViewAccess}\n                onRequestAddNarrative={this.onRequestAddNarrative.bind(this)}\n            />\n        )\n    }\n\n    renderAppsTab() {\n        return (\n            <Apps\n                organization={this.props.viewModel.organization}\n                apps={this.props.viewModel.apps}\n                onAssociateApp={this.onAssociateApp.bind(this)}\n                onRemoveApp={this.props.onRemoveApp.bind(this)} />\n        )\n    }\n\n    renderMainTabs() {\n        const tabs = []\n\n        const aboutTabTitle = (\n            <span>\n                <Icon type=\"info-circle\" />\n                About\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane\n                tab={aboutTabTitle}\n                key=\"about\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderDescriptionTab()}\n            </Tabs.TabPane>\n        ))\n\n        const narrativeCount = this.props.viewModel.narratives.narratives.length\n        const narrativesTabTitle = (\n            <span>\n                <Icon type=\"file\" />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-tabCount\">({narrativeCount})</span>\n            </span>\n        )\n\n        tabs.push((\n            <Tabs.TabPane\n                tab={narrativesTabTitle}\n                key=\"narratives\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderNarrativesTab()}\n            </Tabs.TabPane>\n        ))\n\n        const appCount = this.props.viewModel.organization.appCount\n        const appsTabTitle = (\n            <span>\n                <Icon type=\"appstore\" />\n                Apps\n                {' '}\n                <span className=\"ViewOrganization-tabCount\">({appCount})</span>\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane\n                tab={appsTabTitle}\n                key=\"apps\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderAppsTab()}\n            </Tabs.TabPane>\n        ))\n\n        let defaultActiveKey: string\n        if (this.props.viewModel.organization.isMember) {\n            defaultActiveKey = \"narratives\"\n        } else {\n            defaultActiveKey = \"about\"\n        }\n\n        return (\n            <Tabs\n                defaultActiveKey={defaultActiveKey}\n                className=\"ViewOrganization-tabs\"\n                animated={false}\n                size=\"small\"\n                tabPosition=\"top\">\n                {tabs}\n\n            </Tabs>\n        )\n    }\n\n    renderNormalView() {\n\n        return (\n            <div className=\"ViewOrganization-mainRow scrollable-flex-column\">\n                <div className=\"ViewOrganization-mainColumn  scrollable-flex-column\">\n                    {this.renderMainTabs()}\n                </div>\n                <div className=\"ViewOrganization-infoColumn\">\n                    {this.renderCombo()}\n                </div>\n            </div>\n        )\n    }\n\n    renderManageRelatedOrgsView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageRelatedOrganizations\n                // organization={this.props.viewModel.organization}\n                // relatedOrganizations={[]}\n                // relation={this.props.viewModel.relation}\n                onFinish={onFinish} />\n        )\n    }\n\n    renderInviteUsersView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <InviteUser onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderManageMembership() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageMembership onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderEditOrganization() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <EditOrganization onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderAddNarrative() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <RequestAddNarrative onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderAddApp() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <AddApps onFinish={onFinish} />\n        )\n    }\n\n    getSubView() {\n        switch (this.state.subView) {\n            case SubViews.MANAGE_RELATED_ORGS:\n                return this.renderManageRelatedOrgsView()\n            case SubViews.INVITE_USER:\n                return this.renderInviteUsersView()\n            case SubViews.MANAGE_MEMBERSHIP:\n                return this.renderManageMembership()\n            case SubViews.EDIT_ORGANIZATION:\n                return this.renderEditOrganization()\n            case SubViews.ADD_NARRATIVE:\n                return this.renderAddNarrative()\n            case SubViews.ADD_APP:\n                return this.renderAddApp()\n            case SubViews.NORMAL:\n            default:\n                return this.renderNormalView()\n        }\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return <Redirect push to={\"/organizations\"} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        const uorg = this.props.viewModel.organization as unknown\n        const borg = uorg as orgModel.BriefOrganization\n\n        // TODO: only doing this here so I don't have to do a redux adapter for the menu today...\n\n        const orgMenu = <OrgMenu\n            viewModel={this.props.viewModel}\n            onJoinOrg={this.props.onJoinOrg}\n            onCancelJoinRequest={this.props.onCancelJoinRequest}\n            onAcceptInvitation={this.props.onAcceptInvitation}\n            onRejectInvitation={this.props.onRejectInvitation}\n            onChangeSubView={this.onChangeSubView.bind(this)}\n        />\n\n\n        return (\n            <div className=\"ViewOrganization  scrollable-flex-column\">\n                <div className=\"ViewOrganization-organizationBox\">\n                    <BriefOrganizationHeader\n                        organization={borg}\n                        openRequestsStatus={this.props.viewModel.openRequest}\n                        orgMenu={orgMenu}\n                        onNavigateToBrowser={this.onNavigateToBrowser.bind(this)}\n                    />\n                </div>\n                {this.getSubView()}\n            </div>\n\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind, ViewOrgViewModel } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\nimport * as acceptInboxRequestActions from '../../../../redux/actions/viewOrganization/acceptInboxRequest'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    viewModel: ViewOrgViewModel\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n    onRemoveApp: (appId: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\nfunction mapStateToProps(state: StoreState): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        viewModel\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewOrg: (id: string) => {\n            dispatch(actions.load(id) as any)\n        },\n        onReloadOrg: (id: string) => {\n            dispatch(actions.reload(id) as any)\n        },\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: requestModel.RequestID) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n        onRemoveNarrative: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.removeNarrative(narrative) as any)\n        },\n        onGetViewAccess: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.accessNarrative(narrative) as any)\n        },\n        onAcceptRequest: (requestId: requestModel.RequestID) => {\n            dispatch(acceptInboxRequestActions.acceptRequest(requestId) as any)\n        },\n        onSortNarratives: (sortBy: string) => {\n            dispatch(actions.sortNarratives(sortBy) as any)\n        },\n        onSearchNarratives: (searchBy: string) => {\n            dispatch(actions.searchNarratives(searchBy) as any)\n        },\n        onRemoveApp: (appId: string) => {\n            dispatch(actions.removeApp(appId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ViewOrganization) \n\n","import * as React from 'react'\n\nimport './component.css'\n\nimport { Button, Modal, Icon, Alert } from 'antd'\nimport Header from '../../../Header'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n}\n\nexport interface ViewOrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            }\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This organization is <b>private</b>.</p>\n                    <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                    <p>Upon requesting membership, an organization administrator may grant you membership</p>\n                    <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                </div>\n            )\n        })\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    renderMessage() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <React.Fragment>\n                        <p>This organization is <b>private</b> and you are not a member.</p>\n                        <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                        <p>Upon requesting membership, the organization administrators will be notified.</p>\n                        <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>Your membership request to this private organization is pending.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>You have been invited to this private organization.</p>\n                    </React.Fragment>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderOrg() {\n        const message = (\n            <span>\n                Private Organization\n            </span>\n        )\n        const description = (\n            <React.Fragment>\n                {this.renderMessage()}\n                <div>\n                    {this.renderJoinButton()}\n                </div>\n            </React.Fragment>\n        )\n        return (\n            <Alert\n                message={message}\n                description={description}\n                type=\"info\"\n                showIcon={true}\n                icon={(<Icon type=\"lock\" />)}\n                style={{ width: '50em', margin: '20px auto' }}\n                className=\"ViewInaccessiblePrivateOrganization-message\" />\n        )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderJoinButton() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        onClick={this.onJoinClick.bind(this)}\n                    >\n                        Join this Organization\n                    </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Button\n                            icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                        {' '}\n                        <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                    </div>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <div style={{ flex: '0 0 auto' }}>\n            </div>\n        )\n        const buttons = (\n            <React.Fragment>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ViewInaccessiblePrivateOrganization  scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrg()}\n            </div>\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.PRIVATE_INACCESSIBLE) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const {\n        organization, relation, requestOutbox\n    } = viewModel\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        organization, relation, requestOutbox\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n","import * as React from 'react'\n\nimport AccessibleContainer from './accessible/container'\nimport InaccessibleContainer from './inaccessible/container'\nimport { Spin, Alert } from 'antd';\n\nexport interface Props {\n    organizationId: string\n    view: types.ViewOrgView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n\n    previousOrganizationId: string | null\n\n    constructor(props: Props) {\n        super(props)\n\n        this.previousOrganizationId = null\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organization...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case types.ComponentLoadingState.SUCCESS:\n            default:\n                if (this.props.view.viewModel === null) {\n                    return this.renderError({\n                        code: 'Null Error',\n                        message: 'The view model is missing, but should be available'\n                    })\n                }\n                if (this.props.view.viewModel.organization.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n                    return (\n                        <InaccessibleContainer />\n                    )\n                }\n                return (\n                    <AccessibleContainer />\n                )\n        }\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.organizationId !== this.props.organizationId) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.view.loadingState === types.ComponentLoadingState.NONE) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\nimport { OrganizationKind } from '../../../data/models/organization/model';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.ViewOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.viewOrgView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './Auth.css'\n\nimport * as types from '../types'\nimport { Button } from 'antd';\n\n\nexport interface AuthState {\n\n}\n\nclass Auth extends React.Component<types.AuthProps, AuthState> {\n\n    tokenRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: types.AuthProps) {\n        super(props)\n\n        this.tokenRef = React.createRef()\n\n        this.props.checkAuth()\n    }\n\n    onLogoutClick() {\n        this.props.onRemoveAuthorization()\n    }\n\n    onLoginClick() {\n        if (this.tokenRef.current === null) {\n            return\n        }\n        const token = this.tokenRef.current.value\n        if (token.length === 0) {\n            return\n        }\n        this.props.onAddAuthorization(token)\n    }\n\n    buildAuthForm() {\n        return (\n            <div className=\"Auth-form\">\n                Token: <input ref={this.tokenRef} style={{ width: '30em' }} />\n                <Button\n                    icon=\"save\"\n                    htmlType=\"submit\"\n                    onClick={this.onLoginClick.bind(this)} >\n                    Assign Token\n                </Button>\n            </div>\n        )\n    }\n\n    buildAuthToolbar() {\n        return (\n            <div className=\"Auth-toolbar\">\n                Logged in as <b><span>{this.props.authorization.authorization.realname}</span> (<span>{this.props.authorization.authorization.username}</span></b>)\n                {' '}\n                <Button icon=\"logout\" onClick={this.onLogoutClick.bind(this)}></Button>\n            </div>\n        )\n    }\n\n    buildAuthDev() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.buildAuthToolbar()}\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized! Enter a user token below</p>\n                        {this.buildAuthForm()}\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Error</p>\n                        {this.props.authorization.message}\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n    }\n\n    buildAuthProd() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized!</p>\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-error scrollable-flex-column\">\n                        <p>Error: ??</p>\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"Auth scrollable-flex-column\">\n                {this.props.hosted ? this.buildAuthProd() : this.buildAuthDev()}\n            </div>\n        )\n\n    }\n}\n\nexport default Auth","\nexport interface RootInfo {\n    version: string,\n    servertime: number\n}\n\ninterface AuthEndpoints {\n    root: string,\n    tokenInfo: string,\n    apiMe: string,\n    me: string,\n    loginStart: string,\n    loginChoice: string,\n    loginCreate: string,\n    loginUsernameSuggest: string,\n    loginPick: string,\n    loginCancel: string,\n    logout: string,\n    linkStart: string,\n    linkCancel: string,\n    linkChoice: string,\n    linkPick: string,\n    linkRemove: string,\n    tokens: string,\n    tokensRevoke: string,\n    tokensRevokeAll: string,\n    userSearch: string,\n    adminUserSearch: string,\n    adminUser: string\n}\n\nconst endpoints: AuthEndpoints = {\n    root: '',\n    tokenInfo: 'api/V2/token',\n    apiMe: 'api/V2/me',\n    me: 'me',\n    loginStart: 'login/start',\n    logout: 'logout',\n    loginChoice: 'login/choice',\n    loginCreate: 'login/create',\n    loginUsernameSuggest: 'login/suggestname',\n    loginPick: 'login/pick',\n    loginCancel: 'login/cancel',\n    linkStart: 'link/start',\n    linkCancel: 'link/cancel',\n    linkChoice: 'link/choice',\n    linkPick: 'link/pick',\n    linkRemove: 'me/unlink',\n    tokens: 'tokens',\n    tokensRevoke: 'tokens/revoke',\n    tokensRevokeAll: 'tokens/revokeall',\n    userSearch: 'api/V2/users/search',\n    adminUserSearch: 'api/V2/admin/search',\n    adminUser: 'api/V2/admin/user'\n}\n\nexport interface TokenInfo {\n    created: number,\n    expires: number,\n    id: string,\n    name: string | null,\n    token: string,\n    type: string,\n    user: string,\n    cachefor: number\n}\n\nexport interface Identity {\n    id: string,\n    provider: string,\n    username: string\n}\n\nexport interface Role {\n    id: string,\n    desc: string\n}\n\nexport interface Account {\n    created: number,\n    customroles: Array<string>,\n    display: string,\n    email: string,\n    idents: Array<Identity>,\n    lastLogin: number,\n    local: boolean,\n    roles: Array<Role>,\n    user: string\n}\nexport class AuthClient {\n    url: string;\n\n    constructor({ url }: { url: string }) {\n        this.url = url\n    }\n\n    makePath(path: Array<string> | string): string {\n        if (typeof path === 'string') {\n            return [this.url].concat([path]).join('/');\n        }\n        return [this.url].concat(path).join('/');\n    }\n\n\n    root(): Promise<RootInfo> {\n        return fetch(this.makePath([endpoints.root]), {\n            headers: {\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                return result as RootInfo\n            })\n    }\n\n    getTokenInfo(token: string): Promise<TokenInfo> {\n        return fetch(this.makePath([endpoints.tokenInfo]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as TokenInfo\n            })\n    }\n\n    getMe(token: string): Promise<Account> {\n        return fetch(this.makePath([endpoints.apiMe]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Account\n            })\n    }\n\n\n    // getInfo() : Promise<GroupsServiceInfo> {\n    //     return fetch(this.url + '/', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json();\n    //         })\n    //         .then((result) => {\n    //             return result as GroupsServiceInfo;\n    //         });\n    // }\n\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport * as Cookies from 'es-cookie'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types';\nimport { AuthClient, TokenInfo, Account } from '../../data/auth';\n\n// Action Definitions\n\nexport interface AuthCheck extends Action {\n    type: ActionFlag.AUTH_CHECK\n}\n\nexport interface AuthCheckStart extends Action {\n    type: ActionFlag.AUTH_CHECK_START\n}\n\nexport interface AuthCheckError extends Action {\n    type: ActionFlag.AUTH_CHECK_ERROR,\n    error: AppError\n}\n\nexport interface AuthAuthorized extends Action {\n    type: ActionFlag.AUTH_AUTHORIZED,\n    token: string\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\nexport interface AuthUnauthorized extends Action {\n    type: ActionFlag.AUTH_UNAUTHORIZED\n}\n\nexport interface AuthRemoveAuthorization extends Action {\n    type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n}\n\nexport interface AuthAddAuthorization extends Action {\n    type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n    token: string\n}\n\n// Action Creators\n\n\nexport function authCheckStart(): AuthCheckStart {\n    return {\n        type: ActionFlag.AUTH_CHECK_START\n    }\n}\n\nexport function authCheckError(error: AppError): AuthCheckError {\n    return {\n        type: ActionFlag.AUTH_CHECK_ERROR,\n        error\n    }\n}\n\nexport function authAuthorized(token: string, username: string, realname: string, roles: Array<string>): AuthAuthorized {\n    return {\n        type: ActionFlag.AUTH_AUTHORIZED,\n        token, username, realname, roles\n    }\n}\n\nexport function authUnauthorized(): AuthUnauthorized {\n    return {\n        type: ActionFlag.AUTH_UNAUTHORIZED\n    }\n}\n\n// export function authRemoveAuthorization(): AuthRemoveAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n//     }\n// }\n\n// export function authAddAuthorization(token: string): AuthAddAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n//         token: token\n//     }\n// }\n\n// Action Thunks\n\nexport function checkAuth() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(authCheckStart())\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // TODO: get the auth from the kbase-ui integration api, perhaps a postmessage call\n\n        const token = Cookies.get('kbase_session')\n        if (!token) {\n            dispatch(authUnauthorized())\n            return\n        }\n\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function authRemoveAuthorization() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // remove cookie\n        Cookies.remove('kbase_session')\n\n        // remove auth in state\n        dispatch(authUnauthorized())\n    }\n}\n\nexport function authAddAuthorization(token: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // add cookie\n        Cookies.set('kbase_session', token)\n\n        // TODO: get auth info\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, AuthState, Authorization } from '../types'\nimport Auth from '../components/Auth'\nimport * as actions from '../redux/actions/auth'\n\nexport interface OwnProps {\n    hosted: boolean\n}\n\ninterface StateProps {\n    authorization: Authorization\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n}\n\ninterface DispatchProps {\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const { auth } = state\n    return {\n        authorization: auth\n        // authStatus: status,\n        // token: authorization.token || null,\n        // username: authorization.username || null,\n        // realname: authorization.realname || null\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        checkAuth: () => {\n            dispatch(actions.checkAuth() as any)\n        },\n        onRemoveAuthorization: () => {\n            dispatch(actions.authRemoveAuthorization() as any)\n        },\n        onAddAuthorization: (token: string) => {\n            dispatch(actions.authAddAuthorization(token) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Auth)","\nimport uuidv4 from 'uuid/v4'\n\ninterface ListenerParams {\n    name: string,\n    onSuccess: (payload: Payload) => void,\n    onError: (error: Error) => void\n}\n\nclass Listener {\n    name: string;\n    onSuccess: (payload: Payload) => void;\n    onError: (error: Error) => void;\n\n    constructor({ name, onSuccess, onError }: ListenerParams) {\n        this.name = name;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n\ntype Payload = any;\n\ninterface WaitingListenerParams extends ListenerParams {\n    timeout?: number\n}\n\nclass WaitingListener extends Listener {\n    started: Date;\n    timeout: number;\n\n    constructor(params: WaitingListenerParams) {\n        super(params);\n        this.started = new Date();\n        this.timeout = params.timeout || 5000;\n    }\n}\n\ninterface Envelope {\n    channelId: string\n    id: string\n}\n\nclass Message {\n    name: string;\n    payload: any;\n    id: string;\n    created: Date;\n    channelId: string\n    envelope: Envelope | null\n\n    constructor({ name, payload, channelId }: { name: string, payload: any, channelId: any }) {\n        this.name = name\n        this.payload = payload\n        this.id = uuidv4()\n        this.created = new Date()\n        this.channelId = channelId\n        this.envelope = null;\n    }\n\n    getMessage() {\n        return {\n            envelope: {\n                id: this.id,\n                created: this.created,\n                channelId: this.channelId\n            },\n            name: this.name,\n            payload: this.payload\n        };\n    }\n}\n\ninterface Handler {\n    started: Date,\n    handler: (response: any) => any\n}\n\ninterface ChannelParams {\n    window?: Window,\n    host?: string,\n    channelId?: string\n}\n\nexport class Channel {\n    window: Window\n    host: string\n    id: string\n    awaitingResponse: Map<string, Handler>\n    waitingListeners: Map<string, Array<Listener>>\n    listeners: Map<string, Array<Listener>>\n    lastId: number\n    sentCount: number\n    receivedCount: number\n    unwelcomeReceivedCount: number\n    unwelcomeReceivedCountThreshhold: number\n    unwelcomeReceiptWarning: boolean\n    unwelcomeReceiptWarningCount: number\n    currentListener: ((message: MessageEvent) => void) | null\n\n    constructor(params: ChannelParams) {\n        // The given window upon which we will listen for messages.\n        this.window = params.window || window\n\n        // The host for the window; required for postmessage\n        if (this.window.document === null) {\n            throw new Error('No document')\n        }\n        if (this.window.document.location === null) {\n            throw new Error('No location')\n        }\n        this.host = params.host || this.window.document.location.origin;\n\n        // The channel id. Used to filter all messages received to\n        // this channel.\n        this.id = params.channelId || uuidv4()\n\n        this.awaitingResponse = new Map<string, Handler>()\n        this.waitingListeners = new Map<string, Array<Listener>>()\n        this.listeners = new Map<string, Array<Listener>>()\n\n        this.lastId = 0\n        this.sentCount = 0\n        this.receivedCount = 0\n\n        this.unwelcomeReceivedCount = 0\n        this.unwelcomeReceivedCountThreshhold = 100\n        this.unwelcomeReceiptWarning = true\n        this.unwelcomeReceiptWarningCount = 0\n        this.currentListener = null\n    }\n\n    genId() {\n        this.lastId += 1;\n        return 'msg_' + String(this.lastId);\n    }\n\n    receiveMessage(messageEvent: MessageEvent) {\n        const message = messageEvent.data as Message;\n        if (!message) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('TS No message data; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!message.envelope) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message envelope, not from KBase; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!(message.envelope.channelId === this.id)) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('Message envelope does not match this channel\\'s id', message.envelope, message.envelope.channelId, this.id);\n            }\n            return;\n        }\n        if (this.unwelcomeReceiptWarningCount > this.unwelcomeReceivedCountThreshhold) {\n            this.unwelcomeReceiptWarning = false;\n            console.warn('Unwelcome message warning disabled after ' + this.unwelcomeReceiptWarningCount + ' instances.');\n        }\n\n        // A message sent as a request will have registered a response handler\n        // in the awaitingResponse hash, using a generated id as the key.\n        // TODO: to to rethink using the message id here. Perhaps somehting like a\n        // chain of ids, the root of which is the origination id, which is the one\n        // known here when it it is sent; the message \"id\" should be assigned whenver\n        // a message is sent, but a response  message would include the original\n        // message in the \"chain\"...\n\n        // We can also have awaiting responses without an originating request.\n        // These are useful for, e.g., a promise which awaits a message to be sent\n        // within some window...\n        if (message.envelope.id && this.awaitingResponse.has(message.envelope.id)) {\n            try {\n                const response = this.awaitingResponse.get(message.envelope.id)\n                this.awaitingResponse.delete(message.envelope.id)\n                if (response) {\n                    response.handler(message.payload)\n                }\n            } catch (ex) {\n                console.error('Error handling response for message ', message, ex);\n            }\n        }\n\n        // and also awaiting by message name. Like a listener, but they are only used\n        // once.\n\n        if (this.waitingListeners.has(message.name)) {\n            const awaiting = this.waitingListeners.get(message.name)!\n            this.waitingListeners.delete(message.name)\n            awaiting.forEach((listener) => {\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n        // Otherwise, permanently registered handlers are found in the listeners for the\n        // message name.\n        if (this.listeners.has(message.name)) {\n            this.listeners.get(message.name)!.forEach((listener) => {\n                if (!listener.onSuccess) {\n                    console.warn('no handler for listener!', listener);\n                }\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n    }\n\n    listen(listener: Listener) {\n        if (!this.listeners.has(listener.name)) {\n            this.listeners.set(listener.name, [])\n        }\n        this.listeners.get(listener.name)!.push(listener)\n    }\n\n    on(messageId: string, success: (payload: any) => any, error: (error: Error) => void) {\n        this.listen(new Listener({\n            name: messageId,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    sendMessage(message: Message) {\n        this.window.postMessage(message.getMessage(), this.host)\n    }\n\n    send(name: string, payload: Payload) {\n        const message = new Message({ name, payload, channelId: this.id });\n        this.sendMessage(message);\n    }\n\n    sendRequest(message: Message, handler: (response: any) => any) {\n        this.awaitingResponse.set('message.id', {\n            started: new Date(),\n            handler: handler\n        })\n\n        this.sendMessage(message);\n    }\n\n    request(name: string, payload: Payload) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.sendRequest(new Message({ name, payload, channelId: this.id }), (response: any) => {\n                    resolve(response);\n                });\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    startMonitor() {\n        window.setTimeout(() => {\n            const now = new Date().getTime();\n\n            // first take care of listeners awaiting a message.\n            for (const [id, listeners] of this.waitingListeners.entries()) {\n                const newListeners = listeners.filter((listener) => {\n                    if (listener instanceof WaitingListener) {\n                        const elapsed = now - listener.started.getTime();\n                        if (elapsed > listener.timeout) {\n                            try {\n                                if (listener.onError) {\n                                    listener.onError(new Error('timout after ' + elapsed));\n                                }\n                            } catch (ex) {\n                                console.error('Error calling error handler', id, ex);\n                            }\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n                if (newListeners.length === 0) {\n                    this.waitingListeners.delete(id)\n                }\n            }\n\n            if (this.waitingListeners.size > 0) {\n                this.startMonitor()\n            }\n        }, 100);\n    }\n\n    listenOnce(listener: WaitingListener) {\n        if (!this.waitingListeners.has(listener.name)) {\n            this.waitingListeners.set(listener.name, [])\n        }\n        this.waitingListeners.get(listener.name)!.push(listener);\n        if (listener.timeout) {\n            this.startMonitor();\n        }\n    }\n\n    once(name: string, success: (payload: Payload) => void, error: (error: Error) => void) {\n        this.listenOnce(new WaitingListener({\n            name: name,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    when(name: string, timeout: number) {\n        return new Promise((resolve, reject) => {\n            return this.listenOnce(new WaitingListener({\n                name: name,\n                timeout: timeout,\n                onSuccess: (payload) => {\n                    resolve(payload);\n                },\n                onError: (error) => {\n                    reject(error);\n                }\n            }));\n        });\n    }\n\n    stats() {\n        return {\n            sent: this.sentCount,\n            received: this.receivedCount\n        };\n    }\n\n    attach(window: Window) {\n        this.window = window;\n    }\n\n    start() {\n        this.currentListener = (message: MessageEvent) => {\n            this.receiveMessage(message);\n        };\n        this.window.addEventListener('message', this.currentListener, false);\n    }\n\n    stop() {\n        if (this.currentListener) {\n            this.window.removeEventListener('message', this.currentListener, false);\n        }\n    }\n}\n","import uuid from 'uuid/v4'\nimport { Channel } from './windowChannel'\nimport { IFrameParams } from '../types'\n\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n/*\n channelId: \"3b33179e-8a6d-4ae9-bc95-af4c0492eaa6\"\nframeId: \"frame_kb_html_be553ee5-645c-4737-80ba-dcb642632f0c\"\nhostId: \"host_kb_html_9a3b5d5d-bb92-43ff-a443-73267aa31323\"\nparams: {}\nparentHost: \"https://ci.kbase.us\"\n\n*/\n\n/*\nIFrameSimulator\nThis little doozey allows us to create a simulated iframe. We can query it for\n the params placed on the iframe, and talk to it via the window channel -- it has \n its own window channel.\n Good thing we designed the channel for multiple channels per window.\n*/\nclass IFrameSimulator {\n    params: IFrameParams | null\n    channel: Channel\n\n    constructor() {\n        this.params = null\n\n        // create a window channel.\n\n        this.channel = new Channel({\n            window: window,\n            host: document.location!.origin\n        })\n\n    }\n\n    getParamsFromIFrame(): IFrameParams {\n        return {\n            channelId: this.channel.id,\n            frameId: uuid(),\n            params: {\n                groupsServiceURL: '/services/groups',\n                userProfileServiceURL: '/services/user_profile/rpc',\n                workspaceServiceURL: '/services/ws',\n                serviceWizardURL: '/services/service_wizard',\n                authServiceURL: '/services/auth',\n                narrativeMethodStoreURL: '/services/narrative_method_store/rpc',\n                originalPath: '',\n                view: null,\n                viewParams: null\n                // view: 'org',\n                // viewParams: {\n                //     id: 'test'\n                // }\n            },\n            parentHost: document.location!.origin\n        }\n    }\n}\n\n\n\nexport default IFrameSimulator","import { IFrameParams } from '../types'\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n\nexport class IFrameIntegration {\n    getParamsFromIFrame() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-params')) {\n            // throw new Error('No params found in window!!');\n            return null\n        }\n        const params = window.frameElement.getAttribute('data-params');\n        if (params === null) {\n            // throw new Error('No params found in window!')\n            return null\n        }\n        const iframeParams = JSON.parse(decodeURIComponent(params)) as IFrameParams\n        return iframeParams\n    }\n    getChannelID() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-channel')) {\n            return null\n        }\n        return window.frameElement.getAttribute('data-channel')\n    }\n    getIframeElement() {\n        return window.frameElement || null\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as types from '../../types'\nimport IFrameSimulator from '../../lib/IFrameSimulator'\nimport { IFrameIntegration } from '../../lib/IFrameIntegration'\n\n\n// Action Definitions\n\n// export interface AppStart extends Action {\n//     type: ActionFlag.APP_START,\n\n// }\n\nexport interface AppSuccess extends Action {\n    type: ActionFlag.APP_SUCCESS,\n    config: types.AppConfig\n}\n\nexport interface AppError extends Action {\n    type: ActionFlag.APP_ERROR,\n    error: AppError\n}\n\n// Action Creators\n\nexport function appSuccess(config: types.AppConfig): AppSuccess {\n    return {\n        type: ActionFlag.APP_SUCCESS,\n        config: config\n    }\n}\n\nexport function appError(error: AppError): AppError {\n    return {\n        type: ActionFlag.APP_ERROR,\n        error: error\n    }\n}\n\nexport function appStart() {\n    return (dispatch: ThunkDispatch<types.StoreState, void, Action>, getState: () => types.StoreState) => {\n        // check and see if we are in an iframe\n        let integration = new IFrameIntegration();\n        let iframeParams = integration.getParamsFromIFrame();\n\n\n        if (iframeParams) {\n            let defaultPath\n\n            // set up the message bus.\n            let channelId = iframeParams.channelId;\n\n            // route from paths passed in from kbase-ui\n            switch (iframeParams.params.view) {\n                case 'org':\n                    defaultPath = '/viewOrganization/' + iframeParams.params.viewParams.id\n                    window.history.pushState(null, 'test', defaultPath)\n                    break\n                default:\n                    defaultPath = '/organizations'\n                    window.history.pushState(null, 'organizations', '/organizations')\n                    break\n            }\n\n            // suck up all the params into our state.\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    },\n                    NarrativeMethodStore: {\n                        url: iframeParams.params.narrativeMethodStoreURL\n                    }\n                },\n                defaultPath,\n                channelId\n            }))\n\n        } else {\n            iframeParams = new IFrameSimulator().getParamsFromIFrame()\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    },\n                    NarrativeMethodStore: {\n                        url: iframeParams.params.narrativeMethodStoreURL\n                    }\n                },\n                defaultPath: '/organizations',\n                channelId: null\n            }))\n        }\n    }\n}\n","import * as React from 'react'\nimport './KBaseIntegration.css'\n\nimport { AppState } from '../types'\nimport { Channel } from '../lib/windowChannel';\nimport { IFrameIntegration } from '../lib/IFrameIntegration';\n\nexport interface KBaseIntegrationProps {\n    status: AppState\n    channelId: string | null\n    onAppStart: () => void\n}\nclass KBaseIntegration extends React.Component<KBaseIntegrationProps, object> {\n\n    channel: Channel | null\n\n    constructor(props: KBaseIntegrationProps) {\n        super(props)\n\n        // const params = this.getParamsFromIFrame()\n\n        // this.props.onAppStart()\n\n        this.channel = null\n    }\n\n    setupChannel() {\n        if (this.props.channelId) {\n\n            this.channel = new Channel({\n                channelId: this.props.channelId,\n            })\n\n            this.channel.on('navigate', ({ to, params }) => {\n\n            }, (err) => {\n                console.error('Error processing \"navigate\" message')\n            })\n\n            this.channel.start()\n\n            this.channel.send('ready', {\n                channelId: this.props.channelId,\n                greeting: 'heloooo'\n            })\n        }\n    }\n\n    teardownChannel() {\n\n    }\n\n    componentDidMount() {\n        this.props.onAppStart()\n    }\n\n    componentDidUpdate() {\n        this.setupChannel()\n    }\n\n    componentWillUnmount() {\n        this.teardownChannel()\n    }\n\n    render() {\n        if (this.props.status === AppState.NONE) {\n            return (\n                <div className=\"KBaseIntegration\">\n                    Loading...\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"KBaseIntegration scrollable-flex-column\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default KBaseIntegration","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../types'\nimport * as actions from '../redux/actions/app'\n\nimport KBaseIntegration from '../components/KBaseIntegration'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    status: types.AppState\n    defaultPath: string\n    channelId: string | null\n}\n\ninterface DispatchProps {\n    onAppStart: () => void\n}\n\nexport function mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const { app: { status, config: { defaultPath, channelId } } } = state\n    return {\n        status, defaultPath, channelId\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAppStart: () => {\n            dispatch(actions.appStart() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(KBaseIntegration)","import {\n    StoreState, AuthState, AppState,\n    ComponentLoadingState\n} from \"../types\"\n\nimport * as orgModel from '../data/models/organization/model'\n\nexport class StateInstances {\n    static makeInitialState(): StoreState {\n        return {\n            entities: {\n                users: {\n                    byId: new Map(),\n                    all: []\n                },\n                orgs: {\n                    byId: new Map(),\n                    all: []\n                },\n                requests: {\n                    byId: new Map(),\n                    all: []\n                },\n                narratives: {\n                    byId: new Map()\n                },\n                organizations: {\n                    byId: new Map()\n                },\n                apps: {\n                    byId: new Map()\n                }\n            },\n            db: {\n            },\n            views: {\n                browseOrgsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                addOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                editOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                manageOrganizationRequestsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewMembersView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                // inviteUserView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                // manageMembershipView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                // requestNarrativeView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                viewOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                }\n            },\n            auth: {\n                status: AuthState.NONE,\n                message: '',\n                authorization: {\n                    token: '',\n                    username: '',\n                    realname: '',\n                    roles: []\n                }\n            },\n            error: null,\n            app: {\n                status: AppState.NONE,\n                config: {\n                    baseUrl: '',\n                    services: {\n                        Groups: {\n                            url: ''\n                        },\n                        UserProfile: {\n                            url: ''\n                        },\n                        Workspace: {\n                            url: ''\n                        },\n                        ServiceWizard: {\n                            url: ''\n                        },\n                        Auth: {\n                            url: ''\n                        },\n                        NarrativeMethodStore: {\n                            url: ''\n                        }\n                    },\n                    defaultPath: '',\n                    channelId: null\n                }\n            },\n\n            updateOrg: {\n                pending: false\n            },\n\n\n        }\n    }\n}","import * as React from 'react'\n\nexport interface Props {\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface State {\n\n}\n\nexport default class DataServices extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    componentWillMount() {\n        this.props.onLoad()\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/dataServices'\nimport Component from './component'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nexport interface AppContext {\n    test: string\n}\n\nconst context = React.createContext<AppContext | null>(null)\n\nexport const AppContextProvider = context.Provider\nexport const AppContextConsumer = context.Consumer","import React, { Component, FunctionComponent } from 'react'\nimport { Route, Switch, Redirect } from 'react-router'\nimport { BrowserRouter, RouteProps, RouteComponentProps } from 'react-router-dom'\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport theReducer from './redux/reducers'\n\n// the app and subcomponents\nimport './App.css';\n\n// fontawesome setup\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faSpinner, faSearch, faGlobe, faUserLock, faSquare, faCube\n} from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSpinner, faSearch, faGlobe, faUserLock, faSquare, faCube)\n\nimport OrganizationsBrowser from './components/views/browseOrgs/loader'\nimport NewOrganization from './components/views/newOrganization/loader'\nimport ViewOrganization from './components/views/viewOrganization/loader'\nimport Auth from './containers/Auth'\nimport KBaseIntegration from './containers/KBaseIntegration'\nimport { StateInstances } from './redux/state';\nimport DataServices from './components/dataServices/storeAdapter'\nimport { AppContextProvider } from './AppContext'\nimport { Marked, Renderer, MarkedOptions } from 'marked-ts'\n\nclass DescriptionRenderer extends Renderer {\n  constructor(options?: MarkedOptions) {\n    super(options)\n  }\n  link(href: string, title: string, text: string) {\n    if (this.options.sanitize) {\n      let prot: string;\n\n      try {\n        prot = decodeURIComponent(this.options.unescape!(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      }\n      catch (e) {\n        return text\n      }\n\n      if\n        (\n        prot.indexOf('javascript:') === 0\n        || prot.indexOf('vbscript:') === 0\n        || prot.indexOf('data:') === 0\n      ) {\n        return text\n      }\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += ' target=\"_blank\">' + text + '</a>';\n\n    return out;\n  }\n}\n\nlet options = new MarkedOptions()\noptions.renderer = new DescriptionRenderer()\nMarked.setOptions({ renderer: new DescriptionRenderer() })\n\n// Put the redux store together\n// Just for prototyping --- This is super naive and will change!\n// import {organizations} from './data/temp';\n\n// TODO: determine the environment\n\nconst hosted = window.frameElement ? true : false\n\n// Set up initial state \n// TODO: move to own file\nconst initialState = StateInstances.makeInitialState()\n\n// TODO: remove the cast of reducer to any...\n// const middleware = [thunk]\n// const store = createStore<StoreState, SortOrgs, null, null>(theReducer as any, initialState, applyMiddleware(thunk));\nconst store = createStore(theReducer as any, initialState as any, compose(applyMiddleware(thunk)))\n\n// export interface WrappedComponent extends React.Component<NewOrganization {\n\n// }\n\n// const Wrapped: FunctionComponent<NewOrganization> = ({component: Component, ...rest}: {component: any}) => {\n//   return (<Route {...rest} render={(props) => {\n//       <Component {...props} />\n//     }} />\n//   )\n// }\n\n\n\ninterface ViewOrgMatchProps {\n  id: string\n}\ntype WrappedProps = RouteComponentProps<ViewOrgMatchProps>\nconst F: React.SFC<WrappedProps> = (props: WrappedProps) => {\n  return (\n    <ViewOrganization organizationId={props.match.params.id} />\n  )\n}\n\n// class F2 extends React.Component<WrappedProps> {\n//   constructor(params: WrappedProps) {\n//     super(params)\n//   }\n//   render() {\n//     return (\n//       <ViewOrganization organizationId={this.props.match.params.id} />\n//     )\n//   }\n// }\n\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n\n\n  render() {\n    return (\n      <AppContextProvider value={{ test: 'ok' }}>\n        <Provider store={store}>\n          <KBaseIntegration>\n            <Auth hosted={hosted}>\n              <DataServices>\n                <BrowserRouter basename=\"/\" >\n                  <div className=\"App scrollable-flex-column\">\n                    <div className=\"App-body scrollable-flex-column\">\n                      {/* <MainMenu /> */}\n                      <Switch>\n                        <Route path=\"/organizations\" component={OrganizationsBrowser} />\n                        <Route path=\"/newOrganization\" component={NewOrganization} />\n                        <Route path=\"/viewOrganization/:id\" exact={true} component={F} />\n                        {/* <Route path=\"/viewOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewOrganization organizationId={id} />} /> */}\n                        <Redirect from=\"/\" to=\"/organizations\" exact={true} />\n                      </Switch>\n                    </div>\n                  </div>\n                </BrowserRouter>\n              </DataServices>\n            </Auth>\n          </KBaseIntegration>\n        </Provider>\n      </AppContextProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport 'typeface-oxygen';\nimport 'normalize.css';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}