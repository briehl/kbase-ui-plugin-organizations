{"version":3,"sources":["components/entities/nouserpic.png","types/index.tsx","redux/actions/index.ts","redux/reducers/addOrg.ts","redux/reducers/editOrg.ts","redux/reducers/viewOrganization/acceptInboxRequest.ts","redux/reducers/viewOrganization/viewMembers.ts","redux/reducers/viewOrganization/denyInboxRequest.ts","redux/reducers/viewOrganization/cancelOutboxRequests.ts","data/apis/groups.ts","data/models/requests.ts","data/apis/serviceClient.ts","data/apis/userProfile.ts","data/models/user.ts","data/models/organization/model.ts","data/models/organization/validation.ts","combo/error/api.ts","redux/actions/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/relatedOrganizations.ts","redux/reducers/viewOrg.ts","redux/reducers/browseOrgs.ts","redux/reducers/auth.ts","redux/reducers/app.ts","redux/reducers/manageOrganizationRequests.ts","redux/reducers/viewMembers.ts","redux/reducers/viewOrganization/inviteUser.ts","redux/reducers/viewOrganization/manageMembership.ts","redux/reducers/viewOrganization/requestAddNarrative.ts","redux/reducers/entities/organization.ts","redux/reducers/entities.ts","redux/reducers/dataServices.ts","redux/reducers/index.tsx","components/entities/Owner.tsx","components/OrgLogo.tsx","components/entities/Avatar.tsx","data/apis/genericClient.ts","data/apis/serviceWizard.ts","data/apis/dynamicServiceClient.ts","data/apis/narrativeService.ts","data/models/narrative.ts","data/apis/workspaceUtils.ts","redux/actions/entities.ts","components/entities/OwnerContainer.tsx","lib/time.ts","components/NiceElapsedTime.tsx","components/BriefOrganization.tsx","components/views/browseOrgs/organizations/component.tsx","components/views/browseOrgs/organizations/container.tsx","components/views/browseOrgs/component.tsx","redux/actions/browseOrgs.ts","components/views/browseOrgs/container.tsx","components/views/browseOrgs/loader.tsx","redux/actions/addOrg.ts","lib/DebouncingProcess.ts","data/apis/uiService.ts","components/views/newOrganization/component.tsx","components/views/newOrganization/container.tsx","components/views/newOrganization/loader.tsx","data/models/uber.ts","redux/actions/dataServices.ts","redux/actions/viewOrg.ts","redux/actions/viewOrganization/acceptInboxRequest.ts","components/Header.tsx","lib/error.ts","redux/actions/viewOrganization/viewMembers.ts","components/entities/Member.tsx","components/entities/MemberContainer.tsx","components/views/viewOrganization/accessible/members/component.tsx","components/views/viewOrganization/accessible/members/reduxAdapter.tsx","redux/actions/viewOrganization/denyInboxRequest.ts","redux/actions/viewOrganization/cancelOutboxRequest.ts","components/entities/User.tsx","components/entities/UserContainer.tsx","components/entities/Narrative.tsx","components/entities/NarrativeContainer.tsx","components/views/viewOrganization/accessible/requests/InboxRequest.tsx","components/views/viewOrganization/accessible/requests/InboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/OutboxRequest.tsx","components/views/viewOrganization/accessible/requests/OutboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/component.tsx","components/views/viewOrganization/accessible/requests/container.tsx","components/views/viewOrganization/accessible/BriefOrganizationHeader.tsx","components/entities/organization/component.tsx","components/entities/organization/Inaccessible.tsx","components/entities/organization/loader.tsx","redux/actions/entities/organization.ts","components/views/viewOrganization/accessible/relatedOrgs/component.tsx","components/views/viewOrganization/accessible/relatedOrgs/reduxAdapter.tsx","redux/actions/viewOrganization/relatedOrganizations.ts","components/views/viewOrganization/accessible/manageRelatedOrganizations/AvailableOrganization.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/component.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/reduxAdapter.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/loader.tsx","redux/actions/viewOrganization/inviteUser.ts","components/User.tsx","components/menu/component.tsx","components/views/viewOrganization/accessible/inviteUser/component.tsx","components/views/viewOrganization/accessible/inviteUser/container.tsx","components/views/viewOrganization/accessible/inviteUser/loader.tsx","components/entities/UserSimple.tsx","components/entities/UserSimpleContainer.tsx","components/entities/narrative/component.tsx","components/entities/narrative/reduxAdapter.tsx","components/OrganizationNarrative.tsx","components/views/viewOrganization/accessible/narratives/component.tsx","redux/actions/viewOrganization/manageMembership.ts","components/views/viewOrganization/accessible/manageMembership/component.tsx","components/views/viewOrganization/accessible/manageMembership/container.tsx","components/views/viewOrganization/accessible/manageMembership/loader.tsx","redux/actions/editOrg.ts","components/views/viewOrganization/accessible/editOrganization/component.tsx","components/views/viewOrganization/accessible/editOrganization/container.tsx","components/views/viewOrganization/accessible/editOrganization/loader.tsx","components/views/viewOrganization/accessible/requestAddNarrative/RowWrapper.tsx","components/views/viewOrganization/accessible/requestAddNarrative/FlexibleColumnWrapper.tsx","components/views/viewOrganization/accessible/requestAddNarrative/component.tsx","redux/actions/viewOrganization/requestAddNarrative.ts","components/views/viewOrganization/accessible/requestAddNarrative/container.tsx","components/views/viewOrganization/accessible/requestAddNarrative/loader.tsx","components/views/viewOrganization/accessible/component.tsx","components/views/viewOrganization/accessible/OrgMenu.tsx","components/views/viewOrganization/accessible/container.tsx","components/views/viewOrganization/inaccessible/component.tsx","components/views/viewOrganization/inaccessible/container.tsx","components/views/viewOrganization/loader.tsx","components/Auth.tsx","data/auth.ts","redux/actions/auth.ts","containers/Auth.tsx","lib/windowChannel.ts","lib/IFrameSimulator.ts","lib/IFrameIntegration.ts","redux/actions/app.ts","components/KBaseIntegration.tsx","containers/KBaseIntegration.tsx","redux/state.tsx","components/dataServices/component.tsx","components/dataServices/storeAdapter.tsx","AppContext.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","ComponentView","UIErrorType","SyncState","EditState","ValidationErrorType","SaveState","MemberType","RequestType","RequestResourceType","RequestStatus","AuthState","ViewOrgState","AppState","SortDirection","ComponentLoadingState","BrowseOrgsState","InviteUserViewState","NarrativeState","ProcessingState","RequestNarrativeState","SelectionState","ViewOrgViewModelKind","SubViews","ViewOrgSubViewKind","ViewState","ErrorCode","ActionFlag","AppException","_Error","_ref","_this","code","message","detail","info","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","trace","errors","name","Error","captureStackTrace","assertThisInitialized","stack","indexOf","split","inherits","wrapNativeSuper","reducer","state","action","type","ADD_ORG_SAVE","views","addOrgView","viewModel","objectSpread","saveState","SAVING","console","warn","saveStart","ADD_ORG_SAVE_SUCCESS","editState","UNEDITED","SAVED","saveSuccess","ADD_ORG_SAVE_ERROR","SAVE_ERROR","error","saveError","ADD_ORG_LOAD_START","loadingState","LOADING","loadStart","ADD_ORG_LOAD_SUCCESS","SUCCESS","validationState","OK","validatedAt","Date","NEW","newOrganization","loadSuccess","ADD_ORG_LOAD_ERROR","loadError","ADD_ORG_UNLOAD","NONE","unload","ADD_ORG_UPDATE_NAME_SUCCESS","EDITED","value","syncState","DIRTY","updateNameSuccess","ADD_ORG_UPDATE_NAME_ERROR","updateNameError","ADD_ORG_UPDATE_LOGO_URL_SUCCESS","logoUrl","updateLogoUrlSuccess","ADD_ORG_UPDATE_LOGO_URL_ERROR","updateLogoUrlError","ADD_ORG_UPDATE_HOME_URL_SUCCESS","homeUrl","updateHomeUrlSuccess","ADD_ORG_UPDATE_HOME_URL_ERROR","updateHomeUrlError","ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","researchInterests","updateResearchInterestsSuccess","ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","updateResearchInterestsError","ADD_ORG_UPDATE_ID_SUCCESS","id","updateIdSuccess","ADD_ORG_UPDATE_ID_ERROR","updateIdError","ADD_ORG_UPDATE_ID_PASS","updateIdPass","ADD_ORG_UPDATE_DESCRIPTION_SUCCESS","description","updateDescriptionSuccess","ADD_ORG_UPDATE_DESCRIPTION_ERROR","updateDescriptionError","ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS","isPrivate","updateIsPrivateSuccess","ADD_ORG_EVALUATE_OK","addOrgEvaluateOk","ADD_ORG_EVALUATE_ERRORS","ERROR","addOrgEvaluateErrors","validationStateOk","evaluateEditorState","editedOrganization","EDIT_ORG_LOAD_START","editOrgView","EDIT_ORG_LOAD_SUCCESS","organization","EDIT_ORG_LOAD_ERROR","EDIT_ORG_UNLOAD","EDIT_ORG_SAVE_START","editOrgSaveStart","EDIT_ORG_SAVE_SUCCESS","CLEAN","editOrgSaveSuccess","EDIT_ORG_SAVE_ERROR","editOrgSaveError","EDIT_ORG_UPDATE_NAME_SUCCESS","editedOrg","remoteValue","newState","editOrgUpdateNameSuccess","EDIT_ORG_UPDATE_NAME_ERROR","editOrgUpdateNameError","EDIT_ORG_UPDATE_LOGO_URL_SUCCESS","editOrgUpdateLogoUrlSuccess","EDIT_ORG_UPDATE_LOGO_URL_ERROR","editOrgUpdateLogoUrlError","EDIT_ORG_UPDATE_HOME_URL_SUCCESS","editOrgUpdateHomeUrlSuccess","EDIT_ORG_UPDATE_HOME_URL_ERROR","editOrgUpdateHomeUrlError","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_ERROR","editOrgUpdateDescriptionError","EDIT_ORG_EVALUATE_OK","editOrgEvaluateOk","EDIT_ORG_EVALUATE_ERRORS","editOrgEvaluateErrors","VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS","viewOrgView","kind","NORMAL","requestInbox","requests","acceptInboxRequestSuccess","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","members","map","member","username","memberUsername","ADMIN","sortedMembers","promoteToAdminSuccess","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","MEMBER","demoteToMemberSuccess","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS","filter","removeMemberSuccess","VIEW_ORG_SORT_MEMBERS_SUCCESS","sortMembersBy","sortBy","sortMembersSuccess","VIEW_ORG_SEARCH_MEMBERS_SUCCESS","searchMembersBy","searchBy","searchMembersSuccess","VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS","rejectInboxRequestSuccess","VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS","requestOutbox","cancelRequestSuccess","GroupException","_AppException","apperror","Map","httpcode","httpstatus","appcode","callid","time","originalError","ServerException","_AppException2","_this2","GroupsClient","token","url","createClass","key","fetch","headers","Authorization","Accept","mode","then","response","json","result","exists","_listGroups","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","status","abrupt","stop","apply","arguments","path","body","concat","join","Content-Type","method","JSON","stringify","statusText","get","text","_post","_callee2","errorText","_context2","t0","_x","_x2","_get","_callee3","_context3","_x3","newGroup","payload","private","custom","logourl","researchinterests","homeurl","length","put","groupUpdate","_addRelatedGroup","_callee4","groupId","relatedGroupId","group","relatedGroups","update","_context4","relatedgroups","includes","push","_x4","_x5","_removeRelatedGroup","_callee5","newRelatedGroups","_context5","_x6","_x7","_getRequest","_callee6","requestId","_context6","_x8","params","query","URLSearchParams","includeClosed","append","sortDirection","DESCENDING","startAt","String","getTime","toString","workspaceId","complete","_grantResourceAccess","_callee7","resourceType","resourceId","_context7","post","_x9","_x10","_x11","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_visitGroup","_callee8","_ref11","_context8","_x12","_getOpenRequests","_callee9","_ref12","groupIds","requestStatuses","_arr","_i","_ref15","_ref14","_groupId","requestStatus","_context9","entries","slicedToArray","set","_x13","groupRequestToOrgRequest","request","requestType","INVITATION","REQUEST","stringToRequestType","USER","WORKSPACE","APP","stringToResourceType","resourcetype","OPEN","organizationId","groupid","requester","user","resource","createdAt","createdate","expireAt","expiredate","modifiedAt","moddate","narrativeId","appId","RequestsModel","groupsClient","cache","groupsApi","groupsServiceURL","grequest","has","getRequest","_getOutboundRequests","grequests","getCreatedRequests","forEach","_getUserRequestForOrg","find","r","_getPendingRequestsForOrg","_getRequestInboxForOrg","getTargetedRequests","_getCombinedRequestInboxForOrg","getGroupRequests","t1","_getRequestOutboxForOrg","_getOrganizationInvitations","_getOrganizationInvitationsForOrg","invitations","getOrganizationInvitations","invitation","_getInboundRequests","_callee10","_this3","_context10","_getUserInvitationForOrg","_callee11","_context11","_getPendingOrganizationRequestsForOrg","_callee12","groupRequests","_context12","_getPendingOrganizationRequests","_callee13","allRequests","_context13","Promise","all","reduce","_cancelRequest","_callee14","_context14","cancelRequest","_acceptRequest","_callee15","_context15","acceptRequest","_denyRequest","_callee16","_context16","denyRequest","_acceptJoinInvitation","_callee17","_context17","_x14","_rejectJoinInvitation","_callee18","_context18","_x15","_inviteUserToJoinOrg","_callee19","_context19","inviteUserToGroup","_x16","_x17","ServiceClient","param","version","constructor","Math","random","slice","AuthorizedServiceClient","_ServiceClient","func","makePayload","UserProfileClient","_AuthorizedServiceCli","makeEmptyPayload","_getUserProfile","profileCache","resolve","callFunc","_updateUserProfile","delete","profile","_getUserProfiles","usernames","_getAllUsers","_searchUsers","profileToUser","jobTitle","userdata","jobTitleOther","realname","city","country","title","avatarOption","gravatarHash","synced","gravatarDefault","UserRelationToOrganization","UserWorkspacePermission","OrganizationKind","UserModel","userProfileClient","userProfileServiceURL","_getUser","userProfile","getUserProfile","_getUsers","toFetch","userProfiles","getUserProfiles","users","searchUsers","excludedUsers","Validation","s","firstNonPrintable","search","nonPrintableRe","beforeStart","before","after","REQUIRED_MISSING","match","URL","protocol","ex","determineRelation","org","INACCESSIBLE_PRIVATE","MEMBER_REQUEST_PENDING","MEMBER_INVITATION_PENDING","owner","OWNER","groupPermissionToWorkspacePermission","groupsPermission","VIEW","EDIT","getRealname","defaultValue","groupToOrganization","currentUser","joinedAt","joined","lastVisitedAt","lastvisit","admins","admin","narratives","resources","workspace","parseInt","rid","narrname","isPublic","public","permission","perm","narrcreate","updatedAt","addedAt","added","isMember","role","isAdmin","isOwner","relation","groupRoleToUserRelation","areMembersPrivate","privatemembers","apps","memberCount","memcount","narrativeCount","rescount","appCount","catalogmethod","relatedOrganizations","groupToPrivateOrganization","applySearch","orgs","searchTerms","searchTermsRe","term","RegExp","every","termRe","test","dateDays","d","t","round","applySortComparison","sortField","direction","b","localeCompare","applySort","organizations","ASCENDING","sort","applyFilter","roleType","roles","privacy","applyRoleType","some","applyRole","applyPrivacy","narrativeSortByToComparator","queryNarratives","c1","applyNarrativeSort","tokens","narrative","applyNarrativeSearch","memberSortByToComparator","queryMembers","applyMembersSort","applyMembersSearch","OrganizationModel","usersClient","userModel","_getOrg","g","getGroupById","getUsers","_getGroupUsers","_getOrganization","getGroupUsers","_getOrgs","ids","getOrg","_getOwnOrgs","ownOrgs","getAllOrgs2","_getAllOrgs","allGroups","groups","listGroups","Set","add","Array","from","values","listGroupToBriefOrganization","_queryOrgs","filtered","searched","sorted","total","_ownOrgs","_grantViewAccess","req","grantReadAccessToRequestedResource","requestModel","_addOrg","newOrg","reject","createGroup","_orgExists","groupExists","_updateOrg","orgUpdate","updateGroup","validateOrgId","validateOrgName","validateOrgDescription","_removeNarrativeFromOrg","deleteResource","_grantNarrativeAccess","grantResourceAccess","_requestMembership","requestMembership","_addOrRequestNarrativeToGroup","addOrRequestNarrative","_x18","_x19","_memberToAdmin","memberToAdmin","_x20","_x21","_adminToMember","adminToMember","_x22","_x23","_removeMember","removeMember","_x24","_x25","_updateMember","_callee20","_context20","updateMember","_x26","_x27","_x28","_visitOrg","_callee21","_context21","visitGroup","_x29","_getOpenRequestsStatus","_callee22","organizationIds","openRequests","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context22","getOpenRequests","undefined","Symbol","iterator","done","stringToRequestStatus","return","finish","_x30","_getOpenRequestStatus","_callee23","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context23","_x31","_addRelatedOrganization","_callee24","relatedOrganizationId","_context24","addRelatedGroup","_x32","_removeRelatedOrganization","_callee25","_ref13","_context25","removeRelatedGroup","_x33","new","OLD","makeError","history","uuid","at","applyQuery","searchExp","re","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS","subViews","manageRelatedOrganizationsView","MANAGE_RELATED_ORGS","availableOrganizations","queried","selectedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION","availableOrgs","relatedOrg","isSelected","actions","selectOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS","newRelatedOrgs","newAvailableOrgs","isRelated","addOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","relatedOrgs","removeOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS","searchSuccess","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","VIEW_ORG_LOAD_START","types","VIEW_ORG_LOAD_NORMAL_SUCCESS","openRequest","groupInvitations","sortNarrativesBy","narrativesSortBy","searchNarrativesBy","inviteUserView","requestNarrativeView","manageMembershipView","loadNormalSuccess","VIEW_ORG_RELOAD_NORMAL_SUCCESS","reloadNormalSuccess","VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS","PRIVATE_INACCESSIBLE","loadInaccessiblePrivateSuccess","VIEW_ORG_LOAD_ERROR","VIEW_ORG_UNLOAD","VIEW_ORG_REMOVE_NARRATIVE_SUCCESS","newNarratives","newDisplayNarratives","removeNarrativeSuccess","VIEW_ORG_ACCESS_NARRATIVE_SUCCESS","accessNarrativeSuccess","VIEW_ORG_SORT_NARRATIVES_SUCCESS","sortNarrativesSuccess","VIEW_ORG_SEARCH_NARRATIVES_SUCCESS","searchNarrativesSuccess","acceptInboxRequest","denyInboxRequest","cancelOutboxRequest","viewMembers","manageRelatedOrganizations","localReducer","BROWSE_ORGS_LOAD_SUCCESS","_action$defaultViewMo","defaultViewModel","rawOrganizations","totalCount","filteredCount","selectedOrganizationId","searching","BROWSE_ORGS_SEARCH","searchOrgs","BROWSE_ORGS_SEARCH_START","searchOrgsStart","BROWSE_ORGS_SEARCH_SUCCESS","searchOrgsSuccess","BROWSE_ORGS_SEARCH_ERROR","searchOrgsError","BROWSE_ORGS_SORT_START","sortOrgsStart","BROWSE_ORGS_FILTER_START","filterOrgsStart","BROWSE_ORGS_UNLOAD","AUTH_CHECK_START","auth","CHECKING","authorization","authCheckStart","AUTH_AUTHORIZED","AUTHORIZED","authAuthorized","AUTH_UNAUTHORIZED","UNAUTHORIZED","authUnauthorized","AUTH_CHECK_ERROR","authCheckError","APP_SUCCESS","app","READY","config","appSuccess","ADMIN_MANAGE_REQUESTS_LOAD_START","ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS","manageOrganizationRequestsView","ADMIN_MANAGE_REQUESTS_LOAD_ERROR","ADMIN_MANAGE_REQUESTS_UNLOAD","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS","newRequests","getViewAccessSuccess","VIEW_MEMBERS_LOAD_START","viewMembersView","VIEW_MEMBERS_LOAD_SUCCESS","VIEW_MEMBERS_LOAD_ERROR","VIEW_MEMBERS_UNLOAD","VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","INVITE_USER_LOAD_START","INVITE_USER_LOAD_SUCCESS","EDITING","selectedUser","INVITE_USER_LOAD_ERROR","INVITE_USER_UNLOAD","INVITE_USER_SEARCH_USERS_SUCCESS","searchUsersSuccess","INVITE_USER_SELECT_USER_SUCCESS","selectUserSuccess","INVITE_USER_SEND_INVITATION_START","SENDING","sendInvitationStart","INVITE_USER_SEND_INVITATION_SUCCESS","_state$viewModel","orgModel","newUsers","sendInvitationSuccess","INVITE_USER_SEND_INVITATION_ERROR","sendInvitationError","haveReducer","newViewState","editableMemberProfile","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS","VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR","VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD","VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS","editedMember","updateTitleSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS","evaluateSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR","evaluateError","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS","sendRequestStart","REQUEST_ADD_NARRATIVE_LOAD_START","REQUEST_ADD_NARRATIVE_LOAD_SUCCESS","selectedNarrative","selectionState","REQUEST_ADD_NARRATIVE_LOAD_ERROR","REQUEST_ADD_NARRATIVE_SEND_START","REQUEST_ADD_NARRATIVE_SEND_SUCCESS","orgNarrative","ASSOCIATED","REQUESTED","sendRequestSuccess","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START","selectNarrativeStart","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS","selectNarrativeSuccess","REQUEST_ADD_NARRATIVE_UNLOAD","REQUEST_ADD_NARRATIVE_SORT_SUCCESS","sortSuccess","ENTITY_ORGANIZATION_LOAD_SUCCESS","newOrgs","entities","byId","ENTITY_USER_LOADER_SUCCESS","userLoaderSuccess","ENTITY_ORGANIZATION_LOADER_SUCCESS","orgsMap","organizationLoaderSuccess","ENTITY_NARRATIVE_LOAD_SUCCESS","loadNarrativeSuccess","organizationsReducer","DATA_SERVICE_LOAD_SUCCESS","db","View","addOrgReducer","editOrgReducer","browseOrgsView","browseOrgsReducer","viewOrgReducer","authReducer","appReducer","manageOrganizatiopRequests","inviteUser","manageMembership","requestAddNarrative","dataServices","OrgLogo","props","react","src","width","size","inString","position","charCodeAt","c2","substring","initial","charAt","organizationName","toUpperCase","color","md5","substr","height","style","border","x","y","dy","textAnchor","dominantBaseline","fontSize","fill","fontFamily","renderLogoUrl","renderDefaultInitial","renderLogo","React","Avatar","_React$Component","noUserPic","avatarUrl","getAvatarUrl","reverseView","v","COMPACT","Owner","view","setState","icon","showAvatar","className","components_entities_Avatar","avatarSize","tooltip","renderAvatar","es_tooltip","placement","href","target","onClick","onToggleView","bind","renderCompact","AuthorizedGenericClient","_GenericClient","_callFunc2","processResponse","GenericClient","_processResponse","_error","_error2","_callFunc","ServiceWizardClient","theResult","moduleCache","Cache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cacheLifetime","isMonitoring","window","setTimeout","newCache","cacheRenewed","keys","item","isExpired","runMonitor","cacheItem","reserved","cached","Bluebird","started","waiter","reserveAndFetch","fetcher","catch","err","elapsed","reserveItem","fetchPromise","setItem","finally","isCancelled","isReserved","reserveWaiter","DynamicServiceClient","timeout","rpcContext","moduleId","getModule","getItemWithWait","_this4","getCached","client","getServiceStatus","module_name","funcName","_this5","lookupModule","serviceStatus","NarrativeAccess","Sort","NarrativeServiceClient","_DynamicServiceClient","_listNarratives","iso8601ToDate","dateString","dateParts","exec","TypeError","offset","newDateString","workspaceInfoToObject","wsInfo","objectCount","userPermission","globalReadPermission","lockStatus","metadata","objectInfoToObject","data","majorVersion","minorVersion","savedAt","savedBy","workspaceName","checksum","ref","NarrativeModel","_getOwnNarratives","narrativeServiceClient","requestClient","narrativesResult","pendingRequests","workspacesInOrg","serviceWizardURL","listNarratives","getPendingRequestsForOrg","nar","workspaceInfo","workspaceApi","ws","objectInfo","is_temporary","access","objectId","narrative_nice_name","lastSavedAt","lastSavedBy","TITLE","LAST_SAVED","sorter","getSorter","_getNarrative","workspaceClient","rawWorkspaceInfo","_objectId","rawObjectInfo","_access","workspaceServiceURL","objects","wsid","objid","includeMetadata","ignoreErrors","infos","userLoader","userId","dispatch","getState","_getState","_getState$auth$author","model","_user","ENTITY_USER_LOADER_START","services","UserProfile","getUser","ENTITY_USER_LOADER_ERROR","loadNarrative","_getState3","_getState3$auth$autho","narrativeClient","_narrative","ENTITY_NARRATIVE_LOAD_START","narrativeModel","Workspace","Groups","ServiceWizard","getNarrative","ENTITY_NARRATIVE_LOAD_ERROR","Loader","times","Owner_Owner","onLoad","connect","niceElapsed","someDate","measure","measureAbs","unit","options","nowDate","now","elapsedAbs","abs","absoluteAfter","prefix","suffix","compactDate","getFullYear","Intl","DateTimeFormat","month","day","format","year","intervals","Infinity","NiceElapsedTime","nowTimer","interval","calcInterval","upto","startIntervalTimer","clearInterval","setInterval","handleInterval","showTooltip","fullDate","hour","minute","timeZoneName","tooltipPrefix","BriefOrganization","OrgLogo_OrgLogo","mouseEnterDelay","newAlert","theme","requestsAlert","iconColor","openRequestsStatus","INAPPLICABLE","permalink","fontWeight","location","origin","menu","es_menu","Modal","content","Item","dropdown","overlay","trigger","NavLink","to","renderRelation","renderPrivacy","renderHomeUrl","renderOrgFreshness","renderRequests","renderPermalink","second","OwnerContainer","fullTimestamp","memberCountTooltip","renderMemberCount","count","renderNarrativeCount","NiceElapsedTime_NiceElapsedTime","renderMemberRow","renderNarrativeRow","renderModifiedRow","renderLogoColumn","renderInfoCol","renderStatsCol","renderNormal","Organizations","singular","plural","es_button","myOrgsUnfiltered","es_alert","maxWidth","margin","index","BriefOrganization_BriefOrganization","renderNoOrgs","overflowY","display","flexDirection","renderOrgs","_state$views$browseOr","OrganizationsBrowser","searchInput","searchButton","filterByRoleValues","label","filterByRoleType","filterByRole","filterByPrivacy","showAdvancedControls","onSearchOrgs","current","currentSearchInputValue","e","preventDefault","doSearch","onSortOrgs","newFilter","onFilterOrgs","checkedValues","onSearchInputChange","onSubmit","placeholder","onChange","autoFocus","disabled","haveSearchInput","form","htmlType","renderSearchIcon","onClearSearch","renderSearchFeedback","renderSearchForm","marginRight","es_select","onSortByChange","dropdownMatchSelectWidth","Option","_this$props$filter","onToggleAdvanced","radioStyle","lineHeight","es_radio","Group","onFilterByRoleTypeChange","renderAdvancedToggle","es_checkbox","onFilterByRoleChange","onFilterByPrivacyChange","container","renderSortByControl","marginTop","renderFilterByRole","renderFilterByPrivacy","textAlign","borderTop","renderSearchBar","renderOrganizations","renderFilterColumn","storeState","_storeState$views$bro","_getState2","_getState2$auth$autho","_browseOrgsView$viewM","orgClient","_organizations2","adminOrgs","_openRequests2","queryOrgs","getOpenRequestsStatus","_browseOrgsView$viewM2","_organizations3","_openRequests3","_getState4","_getState4$auth$autho","_browseOrgsView$viewM3","_organizations4","_openRequests4","spin","padding","renderLoading","renderError","browseOrgs_container","onUnload","checkLogoUrlProcess","defaultSearchTerms","defaultSortField","defaultSortDirection","defaultFilter","_organizations","_openRequests","_defaultViewModel","BROWSE_ORGS_LOAD_START","DebouncingProcess","delay","canceled","timer","clearTimeout","task","UIServiceClient","_checkImageURL","_ref3$","serverError","_checkHTMLURL","_ref6$","AddOrgEvaluateErrors","load","validateOrgLogoUrl","validateOrgHomeUrl","validateOrgResearchInterests","addOrgEvaluate","addOrg","ADD_ORG_SAVE_START","_state$auth$authoriza","exception","_state$views$addOrgVi","orgModelFromState","_state$auth$authoriza2","updateName","_Validation$validateO","_Validation$validateO2","validatedName","checkHomeUrlProcess","CheckIfLogoUrlExistsProcess","checkImageURL","is_valid","CheckIfHomeUrlExistsProcess","checkHTMLURL","checkIDProcess","CheckIfExistsProcess","orgExists","updateDescription","_Validation$validateO11","_Validation$validateO12","validatedDescription","NewOrganization","cancelToBrowser","showError","document","isModified","confirm","onOk","onCancel","okText","cancelText","onSave","persist","onUpdateName","onUpdateDescription","onUpdateId","onUpdateLogoUrl","onUpdateHomeUrl","onUpdateResearchInterests","onUpdateIsPrivate","checked","field","nameField","input","calcFieldClass","renderFieldError","idField","logoUrlField","onLogoUrlChange","renderLogoPreview","homeUrlField","renderBrokenHomeURL","renderHomeURLPreview","collapse","bordered","Panel","header","background","borderRadius","overflow","isPrivateField","renderIsPrivate","researchInterestsField","TextArea_default","autosize","minRows","maxRows","descriptionField","es_tabs","defaultActiveKey","animated","TabPane","tab","dangerouslySetInnerHTML","__html","Marked","parse","flex","renderEditorHeader","renderNameRow","onNameChange","renderIDRow","onIdChange","renderLogoURLRow","renderHomeURLRow","onHomeUrlChange","renderPrivatePublicRow","onIsPrivateChange","renderResearchInterestsRow","onResearchInterestsChange","renderDescriptionRow","onDescriptionChange","renderSaveButton","renderCancelButton","renderDefaultLogo","renderBrokenLogo","_this$props","line","modal","visible","okType","canSave","onClickCancelToBrowser","errorButton","shape","toggleError","es_Redirect","renderEditor","cancel","_Validation$validateO3","_Validation$validateO4","validatedLogoUrl","start","updateLogoUrl","_Validation$validateO9","_Validation$validateO10","validatedId","updateId","updateIsPrivate","_Validation$validateO5","_Validation$validateO6","validatedHomeUrl","updateHomeUrl","_Validation$validateO7","_Validation$validateO8","validatedResearchInterests","updateResearchInterests","Component","newOrganization_container","UberModel","_getOrganizationForUser","getUserRequestForOrg","getUserInvitationForOrg","getPendingOrganizationRequestsForOrg","DATA_SERVICE_LOAD_START","removeNarrativeError","VIEW_ORG_REMOVE_NARRATIVE_ERROR","accessNarrativeError","VIEW_ORG_ACCESS_NARRATIVE_ERROR","viewOrgJoinRequestError","VIEW_ORG_JOIN_REQUEST_ERROR","acceptJoinInvitationStart","VIEW_ORG_ACCEPT_JOIN_INVITATION_START","uberClient","_organization","_relation","_requestInbox2","_openRequest","orgRequests","orgInvitations","_requestInbox","_requestOutbox","_narratives2","_members","uberModel","getOrganizationForUser","getRequestInboxForOrg","getOrganizationInvitationsForOrg","getOpenRequestStatus","getCombinedRequestInboxForOrg","getRequestOutboxForOrg","reload","_organization2","_relation2","_requestInbox4","_openRequest2","_requestInbox3","_requestOutbox2","_narratives3","_members2","viewOrgJoinRequest","_state$auth$authoriza3","VIEW_ORG_JOIN_REQUEST_SUCCESS","viewOrgCancelJoinRequest","_state$auth$authoriza4","newRequest","VIEW_ORG_JOIN_REQUEST_START","VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR","acceptJoinInvitation","_state$auth$authoriza5","VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS","VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR","rejectJoinInvitation","_state$auth$authoriza6","VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS","VIEW_ORG_REJECT_JOIN_INVITATION_ERROR","_request","inbox","VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR","VIEW_ORG_ACCEPT_INBOX_REQUEST_START","viewOrgActions","Header","context","currentMenuItem","breadcrumbs","verticalAlign","marginLeft","buttons","promoteToAdmin","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR","demoteToMember","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START","reloadOrg","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR","Member","userTooltip","renderRole","components_entities_Member","Members","confirmMemberRemoval","marginBottom","MemberContainer","onRemoveMember","onPromoteMemberToAdmin","onConfirmRemoveMember","onDemoteAdminToMember","onMemberMenu","onAdminMenu","renderOwnerMenu","renderAdminMenu","renderMemberMenu","fontStyle","classNames","renderMemberOptions","_this6","paddingRight","onSearchMembers","_this7","onSortMembers","renderSortBar","renderConfirmMemberRemoval","renderHeader","renderMembers","onViewMembersUnload","VIEW_ORG_VIEW_MEMBERS_UNLOAD","adminUsername","VIEW_ORG_SORT_MEMBERS_START","VIEW_ORG_SORT_MEMBERS_ERROR","ViewMembers","VIEW_ORG_REJECT_INBOX_REQUEST_START","VIEW_ORG_REJECT_INBOX_REQUEST_ERROR","_requests","VIEW_ORG_CANCEL_JOIN_REQUEST_START","User","components_entities_User","Narrative","cursor","UserContainer","renderPublicPermission","renderUserPermission","Narrative_Narrative","Request","onAcceptInboxRequest","onRejectInboxRequest","NarrativeContainer","renderRequestRequester","renderRequestOptions","onAcceptRequest","onRejectRequest","renderRequestReceivedSubject","renderJoinRequest","renderWorkspaceRequest","renderUserInvitation","renderBody","acceptActions","rejectActions","InboxRequest","onCancelOutboxRequest","alert","onCancelRequest","cancelActions","OutboxRequest","ManageGroupRequests","cancelToViewer","onAcceptJoinRequest","onDenyJoinRequest","onCancelJoinInvitation","onGetViewAccess","open","src_components_Header","card","hoverable","headStyle","backgroundColor","narrativeAccess","InboxRequestContainer","outbox","OutboxRequestContainer","outboxCount","inboxCount","renderInbox","renderOutbox","cancelRequestActions","orgMenu","onNavigateToBrowser","renderBackButton","renderButtonsRow","Organization","component_Organization","Inaccessible_Organization","ENTITY_ORGANIZATION_LOAD_START","ENTITY_ORGANIZATION_LOAD_ERROR","RelatedOrganizations","onManageRelatedOrgs","onRemoveRelatedOrganization","Wrapped","withRouter","OrganizationEntity","renderControls","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","removeRelatedOrganization","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR","AvailableOrganization","selectableOrganization","renderRelated","ManageRelatedOrganizations","onAddOrganization","onRemoveOrganization","onSearch","onFilterChange","classes","onSelectOrganization","AvailableOrganization_AvailableOrganization","button","alertStyle","onRemoveSelectedOrganization","onAddSelectedOrganization","onFinish","renderAvailableToolbar","renderAvailableOrgs","renderSelectedOrg","_viewModel$subViews$m","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START","addRelatedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","vm","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR","manageRelatedOrganizations_reduxAdapter","vm1","selectableOrgs","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR","selectUserError","INVITE_USER_SELECT_USER_ERROR","getUserRelation","ensureView","sendInvitation","_view$viewModel","inviteUserToJoinOrg","MainMenu","es_Route","render","selectedKeys","pathname","renderMenu","InviteUser","lastSearchAt","autocompleteMessage","onSendInvitation","doSearchUsers","searchDebounce","onSearchUsers","onSelectUser","showIcon","SENDABLE","src_components_User","onClickCancelToViewer","components_menu_component","renderMenuButtons","renderSearchButton","renderUsers","renderSelectedUser","renderInvitationForm","renderFooter","userClient","adminUsers","invited","requested","_users","orgUsers","INVITE_USER_SEARCH_USERS_START","INVITE_USER_SEARCH_USERS_ERROR","selectedUsername","INVITE_USER_SELECT_USER_START","InviteUserLoader","inviteUser_container","entities_UserSimple","iconType","UserSimpleContainer","renderGlobalPermission","renderNiceElapsed","renderNarrative","component_Narrative","OrganizationNarrative","requestAccess","shareButton","permissionTooltip","buttonTooltip","onRequestAccess","narrative_reduxAdapter","renderNarrativePermission","accessModal","drawer","closable","onClose","onCloseRequestAccess","Narratives","onRequestAddNarrative","onRemoveNarrative","onNarrativeMenu","onSearchNarratives","onSortNarratives","lastOrgVisitAt","OrganizationNarrative_OrganizationNarrative","renderNarrativeMenu","narrativesTable","extras","renderMemberNarrativeRow","narrativesToShow","hiddenNarrativeCount","renderMemberNarratives","renderNonMemberNarratives","ensureViewModel","evaluate","demoteSelfToMember","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS","demoteSelfToMemberSuccess","VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR","ManageMembership","confirmed","doLeaveOrgConfirmed","onLeaveOrganization","onDemoteSelfToMemberConfirmed","onDemoteSelfToMember","onUpdateTitle","leaveOrgButton","doLeaveOrg","adminTooltip","ownerTooltip","onTitleChange","onDone","renderTitleRow","renderLeaveOrgButton","renderDemoteToMemberButton","subViewModel","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS","VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR","_Validation$validateM","validateMemberTitle","_Validation$validateM2","validatedTitle","VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START","VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR","manageMembership_container","thisMember","editableProfile","editableOrg","editOrgSave","_state$views$editOrgV","updateOrg","editOrgEvaluate","editOrgUpdateDescriptionSuccess","NavigateTo","EditOrganization","navigateTo","onEditOrgSave","editOrganization_container","RowWrapper","containerDimensions","buffer","approximateRowHeight","containerVisibleTop","max","scrollTop","containerVisibleBottom","clientHeight","h","offsetHeight","offsetTop","isVisible","children","emptyRowRenderer","Renderable","currentItem","FlexibleColumnWrapper","wrapperContainerRef","listeners","limitingTimer","limitingTimeout","checkDimensions","currentDimensions","calcContainerBounds","lastDimensions","fun","scrollHandler","limiter","addEventListener","listener","resizeHandler","removeEventListener","out","i","renderable","RowWrapper_RowWrapper","renderEmpty","NarrativeRenderer","rowRenderer","rowCount","RequestAddNarrative","doSelectNarrative","doSendRequest","flag","narrativeRenderer","renderOrgNarrative","FlexibleColumnWrapper_FlexibleColumnWrapper","onSearchSubmit","NumberFormat","useGrouping","doSortBy","renderFilterSortBar","renderFeedbackBar","renderNarratives","buttonLabel","canSendRequest","warning","renderNarrativeSelector","renderSelectedNarrative","renderSelectedAlert","renderSelectedNarrativeButton","selectNarrative","_request2","addOrRequestNarrativeToGroup","REQUEST_ADD_NARRATIVE_SEND_ERROR","REQUEST_ADD_NARRATIVE_SORT_START","REQUEST_ADD_NARRATIVE_SORT_ERROR","sortOrganizationNarratives","requestAddNarrative_container","AccordionState","_narratives","getOrganization","getOwnNarratives","OrgMenu","onJoinOrg","onCancelJoinRequest","onAcceptInvitation","onRejectInvitation","onChangeSubView","MANAGE_MEMBERSHIP","EDIT_ORGANIZATION","INVITE_USER","ADD_NARRATIVE","onJoinClick","onMenuClick","adminMenu","ownerMenu","renderOrgMenu","ViewOrganization","showInfo","accordionState","UP","subView","renderEditRow","reduxAdapter","onReloadOrg","inner","twoToneColor","renderGroupRequestsRow","_this$props$viewModel","renderGroupRequests","renderMembersToolbar","onInviteUser","tabs","renderMembersTab","totalRequestCount","totalRequests","requests_container","titleCount","outboxSize","relatedOrgCount","relatedOrgTab","relatedOrgs_reduxAdapter","tabPosition","BROWSER","VIEW_MEMBERS","MANAGE_REQUESTS","DOWN","toggleAccordion","orgRowClass","narrativesRowClass","minHeight","renderOrg","renderAccordionControl","component_Narratives","renderCombo","manageRelatedOrganizations_loader","inviteUser_loader","manageMembership_loader","editOrganization_loader","requestAddNarrative_loader","renderManageRelatedOrgsView","renderInviteUsersView","renderManageMembership","renderEditOrganization","renderAddNarrative","renderNormalView","borg","OrgMenu_OrgMenu","BriefOrganizationHeader_BriefOrganization","getSubView","onViewOrg","VIEW_ORG_REMOVE_NARRATIVE_START","removeNarrativeFromOrg","filteredNarratives","VIEW_ORG_ACCESS_NARRATIVE_START","grantNarrativeAccess","acceptInboxRequestActions","VIEW_ORG_SORT_NARRATIVES_START","renderMessage","renderJoinButton","onShowInfo","ownProps","previousOrganizationId","inaccessible_container","accessible_container","previousProps","visitOrg","Auth","tokenRef","checkAuth","onRemoveAuthorization","onAddAuthorization","onLoginClick","onLogoutClick","buildAuthToolbar","buildAuthForm","hosted","buildAuthProd","buildAuthDev","endpoints","AuthClient","makePath","Cookies","getTokenInfo","getMe","account","desc","Listener","onSuccess","onError","WaitingListener","Message","channelId","created","envelope","uuidv4","Channel","host","awaitingResponse","waitingListeners","lastId","sentCount","receivedCount","unwelcomeReceivedCount","unwelcomeReceivedCountThreshhold","unwelcomeReceiptWarning","unwelcomeReceiptWarningCount","currentListener","messageEvent","handler","awaiting","messageId","success","listen","postMessage","getMessage","sendMessage","sendRequest","_loop","startMonitor","listenOnce","received","receiveMessage","IFrameSimulator","channel","frameId","authServiceURL","originalPath","viewParams","parentHost","IFrameIntegration","frameElement","hasAttribute","getAttribute","decodeURIComponent","KBaseIntegration","on","send","greeting","onAppStart","setupChannel","teardownChannel","_state$app","_state$app$config","defaultPath","iframeParams","getParamsFromIFrame","pushState","baseUrl","StateInstances","pending","DataServices","DATA_SERVICE_UNLOAD","AppContextProvider","Provider","Consumer","library","faSpinner","faSearch","faGlobe","faUserLock","DescriptionRenderer","sanitize","prot","unescape","replace","toLowerCase","Renderer","MarkedOptions","renderer","setOptions","initialState","makeInitialState","store","createStore","theReducer","compose","applyMiddleware","thunk","F","react_default","createElement","viewOrganization_loader","App","es","containers_KBaseIntegration","containers_Auth","storeAdapter","BrowserRouter","basename","Switch","Route","component","exact","Redirect","ReactDOM","src_App_0","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,m9BCe5BC,EAKAC,EAYAC,EAOAC,EAeAC,EAsEAC,EAsBAC,EAUAC,EAKAC,EAMAC,EA4CAC,EAsBAC,EAQAC,EAOAC,EAKAC,EA8BAC,EA6BAC,EAgDAC,EAeAC,EAQAC,EAWAC,EAmDAC,EAMAC,EA8CAC,EASAC,EAoGAC,4KA/kBAzB,wEAKAC,4GAYAC,sGAOAC,8EAeAC,uGAsEAC,8HAsBAC,yFAUAC,gFAKAC,yFAMAC,iJA4CAC,6JAsBAC,yIAQAC,8GAOAC,8DAKAC,kHA8BAC,sHA6BAC,sKAgDAC,uGAeAC,wHAQAC,oNAWAC,mGAmDAC,kGAMAC,gQA8CAC,4FASAC,wGAoGAC,uDA4BL,IC1nBKC,ED0nBCC,EAAb,SAAAC,GAOI,SAAAD,EAAAE,GAA0H,IAAAC,EAA5GC,EAA4GF,EAA5GE,KAAMC,EAAsGH,EAAtGG,QAASC,EAA6FJ,EAA7FI,OAAQC,EAAqFL,EAArFK,KAAqF,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAV,IACtHG,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAR,GAAAa,KAAAH,KAAML,KAPVD,UAM0H,EAAAD,EAL1HE,aAK0H,EAAAF,EAJ1HG,YAI0H,EAAAH,EAH1HW,WAG0H,EAAAX,EAF1HY,YAE0H,EAAAZ,EAD1HI,UAC0H,EAEtHJ,EAAKa,KAAO,eACZb,EAAKC,KAAOA,EACZD,EAAKE,QAAUA,EACfF,EAAKG,OAASA,EACdH,EAAKI,KAAOA,EAERU,MAAMC,mBACND,MAAMC,kBAANV,OAAAW,EAAA,EAAAX,CAAAL,GAA8BH,GAG9BG,EAAKiB,QACDjB,EAAKiB,MAAMC,QAAQ,OAAS,EAC5BlB,EAAKW,MAAQX,EAAKiB,MAAME,MAAM,MAE9BnB,EAAKW,MAAQ,CAACX,EAAKiB,QAhB2FjB,EAP9H,OAAAK,OAAAe,EAAA,EAAAf,CAAAR,EAAAC,GAAAD,EAAA,CAAAQ,OAAAgB,EAAA,EAAAhB,CAAkCS,kBC1nBtBlB,y+vBC2rBG0B,MAjER,SAAiBC,EAAmBC,GAIvC,OAAQA,EAAOC,MACX,KAAK7B,EAAW8B,aACZ,OAvmBL,SAAmBH,EAAmBC,GACzC,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELE,UAAWxD,EAAUyD,gBAXjCC,QAAQC,KAAK,2CACNX,GAomBIY,CAAUZ,GACrB,KAAK3B,EAAWwC,qBACZ,OArlBL,SAAqBb,EAAmBC,GAC3C,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAUiE,SACrBP,UAAWxD,EAAUgE,eAZjCN,QAAQC,KAAK,6CACNX,GAklBIiB,CAAYjB,GACvB,KAAK3B,EAAW6C,mBACZ,OAlkBL,SAAmBlB,EAAmBC,GACzC,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAGDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELE,UAAWxD,EAAUmE,WACrBC,MAAOnB,EAAOmB,eAb1BV,QAAQC,KAAK,2CACNX,GA+jBIqB,CAAUrB,EAAOC,GAE5B,KAAK5B,EAAWiD,mBACZ,OAhgBL,SAAmBtB,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAY,CACRkB,aAAc9D,EAAsB+D,QACpCJ,MAAO,KACPd,UAAW,UAwfRmB,CAAUzB,GACrB,KAAK3B,EAAWqD,qBACZ,OApfL,SAAqB1B,EAAmBC,GAC3C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAY,CACRkB,aAAc9D,EAAsBkE,QACpCP,MAAO,KACPd,UAAW,CACPQ,UAAWhE,EAAUiE,SACrBa,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,MAErBvB,UAAWxD,EAAUgF,IACrBZ,MAAO,KACPa,gBAAiBhC,EAAOgC,sBAoezBC,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW8D,mBACZ,OAheL,SAAmBnC,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAY,CACRkB,aAAc9D,EAAsBkE,QACpCP,MAAOnB,EAAOmB,MACdd,UAAW,UAwdR8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAWgE,eACZ,OApdL,SAAgBrC,EAAmBC,GACtC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAY,CACRkB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,UA4cRiC,CAAOvC,GAElB,KAAK3B,EAAWmE,4BACZ,OAxcL,SAA2BxC,EAAmBC,GACjD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX3C,KAAKR,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB3C,KADpD,CAEAoD,MAAOzC,EAAOX,KACdqD,UAAW9F,EAAU+F,MACrBhB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,mDACNX,GAqcI6C,CAAkB7C,EAAOC,GACpC,KAAK5B,EAAWyE,0BACZ,OA1aL,SAAyB9C,EAAmBC,GAC/C,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX3C,KAAKR,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB3C,KADpD,CAEAoD,MAAOzC,EAAOX,KACdqD,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,iDACNX,GAuaI+C,CAAgB/C,EAAOC,GAElC,KAAK5B,EAAW2E,gCACZ,OA/YL,SAA8BhD,EAAmBC,GACpD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXgB,QAAQnE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBgB,QADjD,CAEHN,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAOgD,QACdrB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,0CACNX,GA4YIkD,CAAqBlD,EAAOC,GACvC,KAAK5B,EAAW8E,8BACZ,OAjXL,SAA4BnD,EAAmBC,GAClD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXgB,QAAQnE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBgB,QADjD,CAEHN,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAOgD,QACdrB,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,gDACNX,GA8WIoD,CAAmBpD,EAAOC,GAErC,KAAK5B,EAAWgF,gCACZ,OAtVL,SAA8BrD,EAAmBC,GACpD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXqB,QAAQxE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBqB,QADjD,CAEHX,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAOqD,QACd1B,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,oDACNX,GAmVIuD,CAAqBvD,EAAOC,GACvC,KAAK5B,EAAWmF,8BACZ,OAxTL,SAA4BxD,EAAmBC,GAClD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXqB,QAAQxE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBqB,QADjD,CAEHX,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAOqD,QACd1B,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,oDACNX,GAqTIyD,CAAmBzD,EAAOC,GAErC,KAAK5B,EAAWqF,0CACZ,OA7RL,SAAwC1D,EAAmBC,GAC9D,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX0B,kBAAkB7E,OAAAyB,EAAA,EAAAzB,CAAA,GACXkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB0B,kBADvC,CAEbhB,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAO0D,kBACd/B,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,oDACNX,GA0RI4D,CAA+B5D,EAAOC,GACjD,KAAK5B,EAAWwF,wCACZ,OA/PL,SAAsC7D,EAAmBC,GAC5D,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX0B,kBAAkB7E,OAAAyB,EAAA,EAAAzB,CAAA,GACXkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB0B,kBADvC,CAEbhB,UAAW9F,EAAU+F,MACrBF,MAAOzC,EAAO0D,kBACd/B,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,sEACNX,GA4PI8D,CAA6B9D,EAAOC,GAE/C,KAAK5B,EAAW0F,0BACZ,OAnOL,SAAyB/D,EAAmBC,GAC/C,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX+B,GAAGlF,OAAAyB,EAAA,EAAAzB,CAAA,GACIkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB+B,GADtD,CAEErB,UAAW9F,EAAU+F,MACrBhB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBAnBzCrB,QAAQC,KAAK,iDACNX,GAgOIiE,CAAgBjE,GAC3B,KAAK3B,EAAW6F,wBACZ,OAtML,SAAuBlE,EAAmBC,GAC7C,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX+B,GAAGlF,OAAAyB,EAAA,EAAAzB,CAAA,GACIkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB+B,GADtD,CAEEtB,MAAOzC,EAAO+D,GACdrB,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,+CACNX,GAmMImE,CAAcnE,EAAOC,GAChC,KAAK5B,EAAW+F,uBACZ,OA3KL,SAAsBpE,EAAmBC,GAC5C,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX+B,GAAGlF,OAAAyB,EAAA,EAAAzB,CAAA,GACIkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB+B,GADtD,CAEEtB,MAAOzC,EAAO+D,GACdrB,UAAW9F,EAAU+F,mBAjBzClC,QAAQC,KAAK,iDACNX,GAwKIqE,CAAarE,EAAOC,GAE/B,KAAK5B,EAAWiG,mCACZ,OA9IL,SAAkCtE,EAAmBC,GACxD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXsC,YAAYzF,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBsC,YAD7C,CAEP7B,MAAOzC,EAAOsE,YACd5B,UAAW9F,EAAU+F,MACrBhB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,0DACNX,GA2IIwE,CAAyBxE,EAAOC,GAC3C,KAAK5B,EAAWoG,iCACZ,OAhHL,SAAgCzE,EAAmBC,GACtD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEXsC,YAAYzF,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgBsC,YAD7C,CAEP7B,MAAOzC,EAAOsE,YACd5B,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,mBAlB5CV,QAAQC,KAAK,wDACNX,GA6GI0E,CAAuB1E,EAAOC,GAEzC,KAAK5B,EAAWsG,kCACZ,OAtFL,SAAgC3E,EAAmBC,GACtD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELQ,UAAWhE,EAAU2F,OACrBR,gBAAgBnD,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBADzB,CAEX2C,UAAU9F,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UAAU2B,gBAAgB2C,UAD/C,CAELlC,MAAOzC,EAAO2E,UACdjC,UAAW9F,EAAU+F,MACrBhB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mBApBzCrB,QAAQC,KAAK,iDACNX,GAmFI6E,CAAuB7E,EAAOC,GAEzC,KAAK5B,EAAWyG,oBACZ,OA3lBL,SAA0B9E,EAAmBC,GAChD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELsB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,eAbjCrB,QAAQC,KAAK,6CACNX,GAwlBI+E,CAAiB/E,GAC5B,KAAK3B,EAAW2G,wBACZ,OAtkBL,SAA8BhF,EAAmBC,GACpD,OAAKD,EAAMI,MAAMC,WAAWC,UAIrBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDC,WAAWvB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMI,MAAMC,WADT,CAENC,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMC,WAAWC,UADrB,CAELsB,gBAAiB,CACb1B,KAAMnD,EAAoBkI,MAC1BtG,QAAS,mBACTmD,YAAa,IAAIC,eAdjCrB,QAAQC,KAAK,6CACNX,GAmkBIkF,CAAqBlF,GAChC,QACI,OAAO,OC/oBnB,SAASmF,IAKL,MAJ2B,CACvBjF,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,MA4MzB,SAASqD,EAAoB9E,GACzB,OAAIA,EAAU+E,mBAAmB/F,KAAKqD,YAAc9F,EAAU+F,MACnD9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmBrB,GAAGrB,YAAc9F,EAAU+F,MACjD9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmBpC,QAAQN,YAAc9F,EAAU+F,MACtD9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmB/B,QAAQX,YAAc9F,EAAU+F,MACtD9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmB1B,kBAAkBhB,YAAc9F,EAAU+F,MAChE9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmBT,UAAUjC,YAAc9F,EAAU+F,MACxD9F,EAAU2F,OAGjBnC,EAAU+E,mBAAmBd,YAAY5B,YAAc9F,EAAU+F,MAC1D9F,EAAU2F,OAGd3F,EAAUiE,SA+gBNhB,MA9DR,SAAiBC,EAAmBC,GAIvC,OAAQA,EAAOC,MACX,KAAK7B,EAAWiH,oBACZ,OAltBL,SAAmBtF,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAa,CACThE,aAAc9D,EAAsB+D,QACpCJ,MAAO,KACPd,UAAW,UA0sBRmB,CAAUzB,GACrB,KAAK3B,EAAWmH,sBACZ,OA7rBL,SAAqBxF,EAAmBC,GAC3C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAa,CACThE,aAAc9D,EAAsBkE,QACpCP,MAAO,KACPd,UAAW,CACPQ,UAAWhE,EAAUiE,SACrBa,gBAAiBuD,IAKjB3E,UAAWxD,EAAUgF,IAGrByD,aAAcxF,EAAOwF,aACrBpE,UAAW,KACXgE,mBAAoBpF,EAAOoF,yBAyqB5BnD,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAWqH,oBACZ,OApqBL,SAAmB1F,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAa,CACThE,aAAc9D,EAAsBwH,MACpC7D,MAAOnB,EAAOmB,MACdd,UAAW,UA4pBR8B,CAAUpC,EAAOC,GAE5B,KAAK5B,EAAWsH,gBACZ,OAxpBL,SAAgB3F,EAAmBC,GACtC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAa,CACThE,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,UAgpBRiC,CAAOvC,GAElB,KAAK3B,EAAWuH,oBACZ,OA3oBL,SAA0B5F,EAAmBC,GAChD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELE,UAAWxD,EAAUyD,eAX1BT,EAyoBI6F,CAAiB7F,GAC5B,KAAK3B,EAAWyH,sBACZ,OAznBL,SAA4B9F,EAAmBC,GAClD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAUiE,SACrBP,UAAWxD,EAAUgE,MACrBqE,mBAAoB,CAChBrB,GAAGlF,OAAAyB,EAAA,EAAAzB,CAAA,GACIkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBrB,GAD1D,CAEErB,UAAW9F,EAAUkJ,QAEzBzG,KAAKR,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/F,KADxD,CAEAqD,UAAW9F,EAAUkJ,QAEzB9C,QAAQnE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBpC,QADrD,CAEHN,UAAW9F,EAAUkJ,QAEzBzC,QAAQxE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/B,QADrD,CAEHX,UAAW9F,EAAUkJ,QAEzBpC,kBAAkB7E,OAAAyB,EAAA,EAAAzB,CAAA,GACXkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB1B,kBAD3C,CAEbhB,UAAW9F,EAAUkJ,QAEzBnB,UAAU9F,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBT,UADnD,CAELjC,UAAW9F,EAAUkJ,QAEzBxB,YAAYzF,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBd,YADjD,CAEP5B,UAAW9F,EAAUkJ,iBAxClC/F,EAunBIgG,CAAmBhG,GAC9B,KAAK3B,EAAW4H,oBACZ,OAxkBL,SAA0BjG,EAAmBC,GAChD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELE,UAAWxD,EAAUmE,WACrBE,UAAWpB,EAAOmB,cAZvBpB,EAskBIkG,CAAiBlG,EAAOC,GAEnC,KAAK5B,EAAW8H,6BACZ,OAleL,SAAkCnG,EAAmBC,GACxD,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAGX,IACI2C,EADEyD,EAAYpG,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAGhD1C,EADA1C,EAAOX,OAAS8G,EAAU9G,KAAK+G,YACnBxJ,EAAU+F,MAEV/F,EAAUkJ,MAG1B,IAAMO,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAGL+E,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd/F,KAAKR,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/F,KADxD,CAEAoD,MAAOzC,EAAOX,KACdqD,UAAWA,EACXf,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UAkbZyF,CAAyBvG,EAAOC,GAC3C,KAAK5B,EAAWmI,2BACZ,OA7aL,SAAgCxG,EAAmBC,GACtD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd/F,KAAKR,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/F,KADxD,CAEAoD,MAAOzC,EAAOX,KACdqD,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,kBAlBrCpB,EA2aIyG,CAAuBzG,EAAOC,GAEzC,KAAK5B,EAAWqI,iCACZ,OAlZL,SAAqC1G,EAAmBC,GAC3D,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAGX,IAAMsG,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEdpC,QAAQnE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBpC,QADrD,CAEHP,MAAOzC,EAAOgD,QACdN,UAAW9F,EAAU+F,MACrBhB,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UA0WZ6F,CAA4B3G,EAAOC,GAC9C,KAAK5B,EAAWuI,+BACZ,OArWL,SAAmC5G,EAAmBC,GACzD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEdpC,QAAQnE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBpC,QADrD,CAEHP,MAAOzC,EAAOgD,QACdN,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,kBAlBrCpB,EAmWI6G,CAA0B7G,EAAOC,GAE5C,KAAK5B,EAAWyI,iCACZ,OAxUL,SAAqC9G,EAAmBC,GAC3D,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAGX,IAAMsG,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd/B,QAAQxE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/B,QADrD,CAEHZ,MAAOzC,EAAOqD,QACdX,UAAW9F,EAAU+F,MACrBhB,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UAgSZiG,CAA4B/G,EAAOC,GAC9C,KAAK5B,EAAW2I,+BACZ,OA3RL,SAAmChH,EAAmBC,GACzD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd/B,QAAQxE,OAAAyB,EAAA,EAAAzB,CAAA,GACDkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB/B,QADrD,CAEHZ,MAAOzC,EAAOqD,QACdX,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,kBAlBrCpB,EAyRIiH,CAA0BjH,EAAOC,GAE5C,KAAK5B,EAAW6I,2CACZ,OA9PL,SAAwClH,EAAmBC,GAC9D,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAGX,IAAMsG,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd1B,kBAAkB7E,OAAAyB,EAAA,EAAAzB,CAAA,GACXkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB1B,kBAD3C,CAEbjB,MAAOzC,EAAO0D,kBACdhB,UAAW9F,EAAU+F,MACrBhB,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UAsNZ8C,CAA+B5D,EAAOC,GACjD,KAAK5B,EAAW8I,yCACZ,OAjNL,SAAsCnH,EAAmBC,GAC5D,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEd1B,kBAAkB7E,OAAAyB,EAAA,EAAAzB,CAAA,GACXkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmB1B,kBAD3C,CAEbjB,MAAOzC,EAAO0D,kBACdhB,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,kBAlBrCpB,EA+MI8D,CAA6B9D,EAAOC,GAE/C,KAAK5B,EAAW+I,mCACZ,OAnGL,SAAgCpH,EAAmBC,GACtD,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAIX,IACI2C,EADEyD,EAAYpG,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAGhD1C,EADA1C,EAAO2E,YAAcwB,EAAUxB,UAAUyB,YAC7BxJ,EAAU+F,MAEV/F,EAAUkJ,MAG1B,IAAMO,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEdT,UAAU9F,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBT,UADnD,CAELlC,MAAOzC,EAAO2E,UACdjC,UAAWA,EACXf,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UAkDZ+D,CAAuB7E,EAAOC,GAMzC,KAAK5B,EAAWgJ,oCACZ,OA9LL,SAAkCrH,EAAmBC,GACxD,IAAKD,EAAMI,MAAMmF,YAAYjF,UACzB,OAAON,EAGX,IACI2C,EADEyD,EAAYpG,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAGhD1C,EADA1C,EAAOsE,cAAgB6B,EAAU7B,YAAY8B,YACjCxJ,EAAU+F,MAEV/F,EAAUkJ,MAG1B,IAAMO,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVI,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEdd,YAAYzF,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBd,YADjD,CAEP7B,MAAOzC,EAAOsE,YACd5B,UAAWA,EACXf,gBAAiBuD,gBAUnCrE,EAAYsE,EAAoBkB,EAASlG,MAAMmF,YAAYjF,WAEjE,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIlG,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLwH,EAASlG,MAAMmF,YADX,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAASlG,MAAMmF,YAAYjF,UADzB,CAELQ,UAAWA,UA8IZ0D,CAAyBxE,EAAOC,GAC3C,KAAK5B,EAAWiJ,kCACZ,OAzIL,SAAuCtH,EAAmBC,GAC7D,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELQ,UAAWhE,EAAU2F,OACrB4C,mBAAmBvG,OAAAyB,EAAA,EAAAzB,CAAA,GACZkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBADvB,CAEdd,YAAYzF,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YAAYjF,UAAU+E,mBAAmBd,YADjD,CAEP7B,MAAOzC,EAAOsE,YACd5B,UAAW9F,EAAU+F,MACrBhB,gBAAiB3B,EAAOmB,kBAlBrCpB,EAuIIuH,CAA8BvH,EAAOC,GAChD,KAAK5B,EAAWmJ,qBACZ,OAnlBL,SAA2BxH,EAAmBC,GACjD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELsB,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,cAb1B/B,EAilBIyH,CAAkBzH,GAC7B,KAAK3B,EAAWqJ,yBACZ,OA9jBL,SAA+B1H,EAAmBC,GACrD,OAAKD,EAAMI,MAAMmF,YAAYjF,UAItBxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDmF,YAAYzG,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMmF,YADR,CAEPjF,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMmF,YAAYjF,UADtB,CAELsB,gBAAiB,CACb1B,KAAMnD,EAAoBkI,MAC1BtG,QAAS,oBACTmD,YAAa,IAAIC,cAd1B/B,EA4jBI2H,CAAsB3H,GACjC,QACI,OAAO,OClwBJ,SAASD,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWuJ,sCACZ,OA1BL,SAAmC5H,EAAmBC,GACzD,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAEL0H,aAAc/H,EAAOgI,iBAd1BjI,EAwBIkI,CAA0BlI,EAAOC,GAC5C,QACI,OAAO,MC8QJF,OA5Bf,SAAiBC,EAAmBC,GAIhC,OAAQA,EAAOC,MASX,KAAK7B,EAAW8J,+CACZ,OA9NL,SAA+BnI,EAAmBC,GAAmD,IAG5EK,EACxBN,EADAI,MAASyH,YAAevH,UAG5B,GAAkB,OAAdA,EACA,OAAON,EAIX,GAAIM,EAAUwH,OAAS9J,EAAqB+J,OACxC,OAAO/H,EAKX,IAAMoI,EAAU9H,EAAUmF,aAAa2C,QAAQC,IAAI,SAACC,GAChD,OAAIA,EAAOC,WAAatI,EAAOuI,eACpB1J,OAAAyB,EAAA,EAAAzB,CAAA,GACAwJ,EADP,CAEIpI,KAAMjD,EAAWwL,QAGdH,IAITI,EAAgBpI,EAAU8H,QAAQC,IAAI,SAACC,GACzC,OAAIA,EAAOC,WAAatI,EAAOuI,eACpB1J,OAAAyB,EAAA,EAAAzB,CAAA,GACAwJ,EADP,CAEIpI,KAAMjD,EAAWwL,QAGdH,IAIf,OAAOxJ,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwB,EADE,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNwB,EAAUmF,aADL,CAER2C,QAASA,IAEbA,QAASM,UA2KVC,CAAsB3I,EAAOC,GACxC,KAAK5B,EAAWuK,+CACZ,OAtKL,SAA+B5I,EAAmBC,GAAmD,IAE5EK,EACxBN,EADAI,MAASyH,YAAevH,UAG5B,GAAkB,OAAdA,EACA,OAAON,EAIX,GAAIM,EAAUwH,OAAS9J,EAAqB+J,OACxC,OAAO/H,EAKX,IAAMoI,EAAU9H,EAAUmF,aAAa2C,QAAQC,IAAI,SAACC,GAChD,OAAIA,EAAOC,WAAatI,EAAOuI,eACpB1J,OAAAyB,EAAA,EAAAzB,CAAA,GACAwJ,EADP,CAEIpI,KAAMjD,EAAW4L,SAGdP,IAITI,EAAgBpI,EAAU8H,QAAQC,IAAI,SAACC,GACzC,OAAIA,EAAOC,WAAatI,EAAOuI,eACpB1J,OAAAyB,EAAA,EAAAzB,CAAA,GACAwJ,EADP,CAEIpI,KAAMjD,EAAW4L,SAGdP,IAIf,OAAOxJ,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwB,EADE,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNwB,EAAUmF,aADL,CAER2C,QAASA,IAEbA,QAASM,UAoHVI,CAAsB9I,EAAOC,GACxC,KAAK5B,EAAW0K,4CACZ,OA9GL,SAA6B/I,EAAmBC,GAAiD,IAExEK,EACxBN,EADAI,MAASyH,YAAevH,UAG5B,GAAkB,OAAdA,EACA,OAAON,EAIX,GAAIM,EAAUwH,OAAS9J,EAAqB+J,OACxC,OAAO/H,EAKX,IAAMoI,EAAU9H,EAAUmF,aAAa2C,QAAQY,OAAO,SAACV,GACnD,OAAQA,EAAOC,WAAatI,EAAOuI,iBAGjCE,EAAgBpI,EAAU8H,QAAQY,OAAO,SAACV,GAC5C,OAAQA,EAAOC,WAAatI,EAAOuI,iBAGvC,OAAO1J,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwB,EADE,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNwB,EAAUmF,aADL,CAER2C,QAASA,IAEbA,QAASM,UA0EVO,CAAoBjJ,EAAOC,GACtC,KAAK5B,EAAW6K,8BACZ,OApEL,SAA4BlJ,EAAmBC,GAClD,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MACNJ,EAAMI,MAFR,CAGDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAEL6I,cAAelJ,EAAOmJ,OACtBhB,QAASnI,EAAOmI,gBAfrBpI,EAkEIqJ,CAAmBrJ,EAAOC,GACrC,KAAK5B,EAAWiL,gCACZ,OA9CL,SAA8BtJ,EAAmBC,GACpD,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MACNJ,EAAMI,MAFR,CAGDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELiJ,gBAAiBtJ,EAAOuJ,SACxBpB,QAASnI,EAAOmI,gBAfrBpI,EA4CIyJ,CAAqBzJ,EAAOC,GACvC,QACI,OAAO,OChRJ,SAASF,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWqL,sCACZ,OAzBL,SAAmC1J,EAAmBC,GACzD,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAEL0H,aAAc/H,EAAOgI,iBAb1BjI,EAuBI2J,CAA0B3J,EAAOC,GAC5C,QACI,OAAO,MCJJ,SAASF,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWuL,qCACZ,OA1BL,SAA8B5J,EAAmBC,GACpD,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELuJ,cAAe5J,EAAOgI,iBAd3BjI,EAwBI8J,CAAqB9J,EAAOC,GACvC,QACI,OAAO,UC2JPzC,8HAwCZsB,OAAAgB,EAAA,EAAAhB,CAA+BS,OAAxB,IC9NKrC,GAKAC,GAMAC,GDuNC2M,GAAb,SAAAC,GAEI,SAAAD,EAAY3I,GAAmB,IAAA3C,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA+K,IAC3BtL,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiL,GAAA5K,KAAAH,KAAM,CACFN,KAAM,kBACNC,QAASyC,EAAM6I,SACfrL,OAAQwC,EAAMzC,QACdE,KAAM,IAAIqL,IAAiB,CACvB,CAAC,WAAY9I,EAAM+I,UACnB,CAAC,aAAc/I,EAAMgJ,YACrB,CAAC,UAAWhJ,EAAMiJ,SAClB,CAAC,WAAYjJ,EAAM6I,UACnB,CAAC,UAAW7I,EAAMzC,SAClB,CAAC,SAAUyC,EAAMkJ,QACjB,CAAC,OAAQlJ,EAAMmJ,YAb3BC,mBAC+B,EAe3B/L,EAAKa,KAAO,iBACZb,EAAK+L,cAAgBpJ,EAhBM3C,EAFnC,OAAAK,OAAAe,EAAA,EAAAf,CAAAiL,EAAAC,GAAAD,EAAA,CAAoCzL,GA0BvBmM,GAAb,SAAAC,GACI,SAAAD,EAAY7L,GAAgB,IAAA+L,EAAA,OAAA7L,OAAAC,EAAA,EAAAD,CAAAE,KAAAyL,IACxBE,EAAA7L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2L,GAAAtL,KAAAH,KAAM,CAAEN,KAAM,mBAAoBC,QAAS,mBAAoBC,OAAQA,MAClEU,KAAO,kBAFYqL,EADhC,OAAA7L,OAAAe,EAAA,EAAAf,CAAA2L,EAAAC,GAAAD,EAAA,CAAqCnM,GAOxBsM,GAAb,WAII,SAAAA,EAAApM,GAA4D,IAA9CqM,EAA8CrM,EAA9CqM,MAAOC,EAAuCtM,EAAvCsM,IAAuChM,OAAAC,EAAA,EAAAD,CAAAE,KAAA4L,GAAA5L,KAH5D6L,WAG4D,EAAA7L,KAF5D8L,SAE4D,EACxD9L,KAAK6L,MAAQA,EACb7L,KAAK8L,IAAMA,EANnB,OAAAhM,OAAAiM,EAAA,EAAAjM,CAAA8L,EAAA,EAAAI,IAAA,UAAAtI,MAAA,WAUQ,OAAOuI,MAAMjM,KAAK8L,IAAM,IAAK,CACzBI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,SAELC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MArBvB,CAAAT,IAAA,cAAAtI,MAAA,SAyBgBsB,GACR,OAAOiH,MAAMjM,KAAK8L,IAAM,UAAY9G,EAAK,WACpCsH,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACI,GACH,OAAOA,MA/BvB,CAAAV,IAAA,aAAAtI,MAAA,eAAAiJ,EAAA7M,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAT,EAAA,OAAAM,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAoD+BnB,MAAMjM,KAAK8L,IAAM,SAAU,CAC9CI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,SAzDlB,UA2DgC,OAPlBE,EApDdW,EAAAG,MA2DqBC,OA3DrB,CAAAJ,EAAAE,KAAA,cA4DY1L,QAAQU,MAAM,wBAAyBmK,GACjC,IAAIhM,MAAM,yBA7D5B,cAAA2M,EAAAE,KAAA,EA+DqBb,EAASC,OA/D9B,cAAAU,EAAAK,OAAA,SAAAL,EAAAG,MAAA,wBAAAH,EAAAM,SAAAR,EAAAhN,SAAA,yBAAA2M,EAAAc,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,eAAAtI,MAAA,SAkEiBsB,GACT,OAAOiH,MAAMjM,KAAK8L,IAAM,UAAY9G,EAAI,CACpCkH,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,SAELC,KAAK,SAACC,GACH,OAAwB,MAApBA,EAASe,OACF,KAEJf,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MAjFvB,CAAAT,IAAA,MAAAtI,MAAA,SAqFWiK,EAAqBC,GACxB,IAAM9B,EAAO,CAAC9L,KAAK8L,KAAK+B,OAAOF,GAAOG,KAAK,KAC3C,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,MACRJ,KAAMK,KAAKC,UAAUN,KAEpBtB,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OAeN,IAAwB,MAApBf,EAASe,OAChB,OAAOf,EAASC,OACXF,KAAK,SAACG,GACH,OAAOA,IAEZ,GAAwB,MAApBF,EAASe,OAAgB,CAEhC,OADe,KAGf,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAvB7E,OAAQ5B,EAASL,QAAQkC,IAAI,iBACzB,IAAK,mBACD,OAAO7B,EAASC,OACXF,KAAK,SAACG,GACH,MAAM,IAAI1B,GAAe0B,KAErC,IAAK,aACD,OAAOF,EAAS8B,OACX/B,KAAK,SAACG,GACH,MAAM,IAAIhB,GAAgBgB,KAEtC,QACI,MAAM,IAAIlM,MAAM,4BAA8BgM,EAASL,QAAQkC,IAAI,sBA/G/F,CAAApC,IAAA,OAAAtI,MAAA,eAAA4K,EAAAxO,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EA+HkBZ,EAAqBC,GA/HvC,IAAA9B,EAAAS,EAAAE,EAAA+B,EAAA,OAAA3B,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAgIctB,EAAO,CAAC9L,KAAK8L,KAAK+B,OAAOF,GAAOG,KAAK,KAhInDW,EAAArB,KAAA,EAiI+BnB,MAAMH,EAAK,CAC9BI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,OACRJ,KAAMA,EAAOK,KAAKC,UAAUN,GAAQ,KAzIhD,UA4IgC,OAXlBrB,EAjIdkC,EAAApB,MA4IqBC,OA5IrB,CAAAmB,EAAArB,KAAA,SAAAqB,EAAAC,GA6IoBnC,EAASL,QAAQkC,IAAI,gBA7IzCK,EAAArB,KA8IqB,qBA9IrBqB,EAAAC,GAAA,EAiJqB,eAjJrBD,EAAAC,GAAA,0BAAAD,EAAArB,KAAA,GA+IyCb,EAASC,OA/IlD,cA+I0BC,EA/I1BgC,EAAApB,KAgJ0B,IAAItC,GAAe0B,GAhJ7C,eAAAgC,EAAArB,KAAA,GAkJ4Cb,EAAS8B,OAlJrD,cAkJ0BG,EAlJ1BC,EAAApB,KAmJ0B,IAAI5B,GAAgB+C,GAnJ9C,cAqJ0B,IAAIjO,MAAM,4BAA8BgM,EAASL,QAAQkC,IAAI,iBArJvF,QAAAK,EAAArB,KAAA,oBAuJuC,MAApBb,EAASe,OAvJ5B,CAAAmB,EAAArB,KAAA,gBAAAqB,EAAArB,KAAA,GAwJyBb,EAASC,OAxJlC,eAAAiC,EAAAlB,OAAA,SAAAkB,EAAApB,MAAA,WAyJuC,MAApBd,EAASe,OAzJ5B,CAAAmB,EAAArB,KAAA,gBAAAqB,EAAAlB,OAAA,SA0JmB,MA1JnB,cA4JkB,IAAIhN,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YA5JzF,yBAAAM,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA2O,EAAAC,GAAA,OAAAN,EAAAb,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,MAAAtI,MAAA,eAAAmL,EAAA/O,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EAgKiBnB,GAhKjB,IAAA7B,EAAAS,EAAAE,EAAA+B,EAAA,OAAA3B,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAiKctB,EAAO,CAAC9L,KAAK8L,KAAK+B,OAAOF,GAAOG,KAAK,KAjKnDiB,EAAA3B,KAAA,EAkK+BnB,MAAMH,EAAK,CAC9BI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAzKpB,UA4KgC,OAVlBzB,EAlKdwC,EAAA1B,MA4KqBC,OA5KrB,CAAAyB,EAAA3B,KAAA,SAAA2B,EAAAL,GA6KoBnC,EAASL,QAAQkC,IAAI,gBA7KzCW,EAAA3B,KA8KqB,qBA9KrB2B,EAAAL,GAAA,EAiLqB,eAjLrBK,EAAAL,GAAA,0BAAAK,EAAA3B,KAAA,GA+KyCb,EAASC,OA/KlD,cA+K0BC,EA/K1BsC,EAAA1B,KAgL0B,IAAItC,GAAe0B,GAhL7C,eAAAsC,EAAA3B,KAAA,GAkL4Cb,EAAS8B,OAlLrD,cAkL0BG,EAlL1BO,EAAA1B,KAmL0B,IAAI5B,GAAgB+C,GAnL9C,cAqL0B,IAAIjO,MAAM,4BAA8BgM,EAASL,QAAQkC,IAAI,iBArLvF,QAAAW,EAAA3B,KAAA,oBAuLuC,MAApBb,EAASe,OAvL5B,CAAAyB,EAAA3B,KAAA,gBAAA2B,EAAA3B,KAAA,GAwLyBb,EAASC,OAxLlC,eAAAuC,EAAAxB,OAAA,SAAAwB,EAAA1B,MAAA,cA0LkB,IAAI9M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YA1LzF,yBAAAY,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAAgP,GAAA,OAAAH,EAAApB,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,cAAAtI,MAAA,SA8LgBuL,GAUR,IAAMC,EAAe,CACjB5O,KAAM2O,EAAS3O,KACf6O,QAASF,EAASrJ,UAClBwJ,OAAQ,CACJC,QAASJ,EAAShL,QAClBqL,kBAAmBL,EAAStK,kBAC5B4K,QAASN,EAAS3K,UAS1B,OAJI2K,EAAS1J,YAAYiK,OAAS,IAC9BN,EAAQE,OAAO7J,YAAc0J,EAAS1J,aAGnCvF,KAAKyP,IAAW,CAAC,QAASR,EAASjK,IAAKkK,KAvNvD,CAAAlD,IAAA,cAAAtI,MAAA,SA0NgBsB,EAAY0K,GACpB,IAAMR,EAAe,CACjB5O,KAAMoP,EAAYpP,KAClB8O,OAAQ,CACJC,QAASK,EAAYzL,QACrBsL,QAASG,EAAYpL,QACrBgL,kBAAmBI,EAAY/K,mBAEnCwK,QAASO,EAAYP,SAOzB,OAHIO,EAAYnK,cACZ2J,EAAQE,OAAO7J,YAAcmK,EAAYnK,aAEtC0G,MAAMjM,KAAK8L,IAAM,UAAY9G,EAAK,UAAW,CAChDkH,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,MAGRJ,KAAMK,KAAKC,UAAUgB,KAEpB5C,KAAK,SAACC,GAEH,GAAwB,MAApBA,EAASe,OAGb,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,gBA1P7F,CAAAnC,IAAA,kBAAAtI,MAAA,eAAAiM,EAAA7P,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6C,EA8P0BC,EAAkBC,GA9P5C,IAAAC,EAAAC,EAAAC,EAAA,OAAApD,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EAgQ4BpN,KAAKoO,IAAW,CAAC,QAASyB,IAhQtD,UAgQcE,EAhQdG,EAAA7C,OAqQY2C,EADAD,EAAMX,OAAOe,cACGJ,EAAMX,OAAOe,cAAcvP,MAAM,KAEjC,IAIFwP,SAASN,GA3QnC,CAAAI,EAAA9C,KAAA,eAAA8C,EAAA3C,OAAA,SA4QmBuC,GA5QnB,cAgRQE,EAAcK,KAAKP,GAGbG,EAAS,CACXb,OAAQ,CACJe,cAAeH,EAAclC,KAAK,OArRlDoC,EAAA9C,KAAA,GA0RcpN,KAAKyP,IAAU,CAAC,QAASI,EAAS,UAAWI,GA1R3D,eAAAC,EAAA3C,OAAA,SA4ReuC,GA5Rf,yBAAAI,EAAA1C,SAAAoC,EAAA5P,SAAA,gBAAAsQ,EAAAC,GAAA,OAAAZ,EAAAlC,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,qBAAAtI,MAAA,eAAA8M,EAAA1Q,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA0D,EA+R6BZ,EAAkBC,GA/R/C,IAAAC,EAAAC,EAAAU,EAAAT,EAAA,OAAApD,GAAAC,EAAAG,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAAvD,KAAA,EAiS4BpN,KAAKoO,IAAW,CAAC,QAASyB,IAjStD,UAiScE,EAjSdY,EAAAtD,MAsSY2C,EADAD,EAAMX,OAAOe,cACGJ,EAAMX,OAAOe,cAAcvP,MAAM,KAEjC,IAIDwP,SAASN,GA5SpC,CAAAa,EAAAvD,KAAA,eAAAuD,EAAApD,OAAA,SA6SmBuC,GA7SnB,cAiTQE,EAAcK,KAAKP,GAEbY,EAAmBV,EAAchG,OAAO,SAAC6F,GAC3C,OAAOA,IAAYC,IAIjBG,EAAS,CACXb,OAAQ,CACJe,cAAeO,EAAiB5C,KAAK,OA1TrD6C,EAAAvD,KAAA,GA+TcpN,KAAKyP,IAAU,CAAC,QAASI,EAAS,UAAWI,GA/T3D,eAAAU,EAAApD,OAAA,SAiUeuC,GAjUf,yBAAAa,EAAAnD,SAAAiD,EAAAzQ,SAAA,gBAAA4Q,EAAAC,GAAA,OAAAL,EAAA/C,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,aAAAtI,MAAA,eAAAoN,EAAAhR,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAgE,EAoUqBC,GApUrB,IAAArD,EAAA,OAAAd,GAAAC,EAAAG,KAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,cAqUcO,EAAO,CAAC,UAAW,KAAMqD,GArUvCC,EAAA7D,KAAA,EAsUqBpN,KAAKoO,IAAaT,GAtUvC,cAAAsD,EAAA1D,OAAA,SAAA0D,EAAA5D,MAAA,wBAAA4D,EAAAzD,SAAAuD,EAAA/Q,SAAA,gBAAAkR,GAAA,OAAAJ,EAAArD,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,mBAAAtI,MAAA,SAyUqBmM,EAAiBsB,GAC9B,IAAMC,EAAQ,IAAIC,gBAelB,OAdIF,EAAOG,eACPF,EAAMG,OAAO,SAAU,UAEvBJ,EAAOK,gBACHL,EAAOK,gBAAkBhT,GAAciT,WACvCL,EAAMG,OAAO,QAAS,QAEtBH,EAAMG,OAAO,QAAS,QAG1BJ,EAAOO,SACPN,EAAMG,OAAO,cAAeI,OAAOR,EAAOO,QAAQE,YAG/C3F,MAAMjM,KAAK8L,IAAM,UAAY+D,EAAU,aAAeuB,EAAMS,WAAY,CAC3E3F,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAEjF,OAAO5B,EAASC,WAtWhC,CAAAR,IAAA,sBAAAtI,MAAA,SA0WwByN,GAChB,IAAMC,EAAQ,IAAIC,gBAclB,OAbIF,EAAOG,eACPF,EAAMG,OAAO,SAAU,UAEvBJ,EAAOK,gBACHL,EAAOK,gBAAkBhT,GAAciT,WACvCL,EAAMG,OAAO,QAAS,QAEtBH,EAAMG,OAAO,QAAS,QAG1BJ,EAAOO,SACPN,EAAMG,OAAO,cAAeI,OAAOR,EAAOO,QAAQE,YAE/C3F,MAAMjM,KAAK8L,IAAM,qBAAuBsF,EAAMS,WAAY,CAC7D3F,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAEjF,OAAO5B,EAASC,WAtYhC,CAAAR,IAAA,qBAAAtI,MAAA,SA0YuByN,GACf,IAAMC,EAAQ,IAAIC,gBAclB,OAbIF,EAAOG,eACPF,EAAMG,OAAO,SAAU,UAEvBJ,EAAOK,gBACHL,EAAOK,gBAAkBhT,GAAciT,WACvCL,EAAMG,OAAO,QAAS,QAEtBH,EAAMG,OAAO,QAAS,QAG1BJ,EAAOO,SACPN,EAAMG,OAAO,cAAeI,OAAOR,EAAOO,QAAQE,YAE/C3F,MAAMjM,KAAK8L,IAAM,oBAAsBsF,EAAMS,WAAY,CAC5D3F,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAEjF,OAAO5B,EAASC,WAtahC,CAAAR,IAAA,wBAAAtI,MAAA,SA0a0ByN,GAClB,IAAMrF,EAAM,CACR9L,KAAK8L,IACL,QACAqF,EAAOtB,QACP,WACA,YACA8B,OAAOR,EAAOW,cAChBhE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,SAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAEjF,OAAO5B,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAIA,EAAOsF,SACAtF,MApc3B,CAAAT,IAAA,sBAAAtI,MAAA,eAAAsO,EAAAlS,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAkF,EA4c8BpC,EAAiBqC,EAAsBC,GA5crE,IAAAxE,EAAA,OAAAd,GAAAC,EAAAG,KAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,cA6ccO,EAAO,CACT,QACAkC,EACA,WACAqC,EACAC,EACA,WAndZC,EAAA7E,OAAA,SAqdevN,KAAKqS,KAAW1E,EAAM,OArdrC,wBAAAyE,EAAA5E,SAAAyE,EAAAjS,SAAA,gBAAAsS,EAAAC,EAAAC,GAAA,OAAAR,EAAAvE,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,iBAAAtI,MAAA,SAwdmBmM,EAAiBqC,EAAsBC,GAClD,IAAMrG,EAAM,CACR9L,KAAK8L,IACL,QACA+D,EACA,WACAqC,EACAC,GACFrE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,WAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,gBA5ejG,CAAAnC,IAAA,gBAAAtI,MAAA,SAAA+O,GAif0E,IAAtDzB,EAAsDyB,EAAtDzB,UACZ,OAAO/E,MAAMjM,KAAK8L,IAAM,eAAiBkF,EAAY,UAAW,CAC5D9E,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,QAEvD,OAAOf,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MAlgBvB,CAAAT,IAAA,gBAAAtI,MAAA,SAAAgP,GAsgB0E,IAAtD1B,EAAsD0B,EAAtD1B,UACZ,OAAO/E,MAAMjM,KAAK8L,IAAM,eAAiBkF,EAAY,UAAW,CAC5D9E,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,QAEvD,OAAOf,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MAvhBvB,CAAAT,IAAA,qCAAAtI,MAAA,SAAAiP,GA2hB4F,IAC9EhF,EAAO,CAAC,UAAW,KAD2DgF,EAAnD3B,UACS,WAC1C,OAAOhR,KAAKqS,KAAW1E,EAAM,QA7hBrC,CAAA3B,IAAA,cAAAtI,MAAA,SAAAkP,GAiiBwE,IAAtD5B,EAAsD4B,EAAtD5B,UACV,OAAO/E,MAAMjM,KAAK8L,IAAM,eAAiBkF,EAAY,QAAS,CAC1D9E,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,QAEvD,OAAOf,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MAljBvB,CAAAT,IAAA,gBAAAtI,MAAA,SAAAmP,GAsjB2F,IAAvEhD,EAAuEgD,EAAvEhD,QAASvG,EAA8DuJ,EAA9DvJ,OACfwC,EAAM,CACR9L,KAAK8L,IAAK,QAAS+D,EAAS,OAAQvG,EAAQ,SAC9CwE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,OACN2B,OAAQ,QAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,IAAMf,EAAS4B,gBApkB/F,CAAAnC,IAAA,gBAAAtI,MAAA,SAAAoP,GA0kB2F,IAAvEjD,EAAuEiD,EAAvEjD,QAASvG,EAA8DwJ,EAA9DxJ,OACfwC,EAAM,CACR9L,KAAK8L,IAAK,QAAS+D,EAAS,OAAQvG,EAAQ,SAC9CwE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,OACN2B,OAAQ,WAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,IAAMf,EAAS4B,gBAxlB/F,CAAAnC,IAAA,eAAAtI,MAAA,SAAAqP,GA8lB+H,IAA5GlD,EAA4GkD,EAA5GlD,QAASrG,EAAmGuJ,EAAnGvJ,eAAgByG,EAAmF8C,EAAnF9C,OAC9BtC,EAAO,CACT,QAASkC,EAAS,OAAQrG,EAAgB,UAG9C,OAAOxJ,KAAKyP,IAAU9B,EAAM,CAAEyB,OAAQa,MAnmB9C,CAAAjE,IAAA,eAAAtI,MAAA,SAAAsP,GAsmB0F,IAAvEnD,EAAuEmD,EAAvEnD,QAASvG,EAA8D0J,EAA9D1J,OACdwC,EAAM,CACR9L,KAAK8L,IAAK,QAAS+D,EAAS,OAAQvG,GACtCwE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,OACN2B,OAAQ,WAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,IAAMf,EAAS4B,gBApnB/F,CAAAnC,IAAA,oBAAAtI,MAAA,SAynBsByN,GACd,OAAOlF,MAAMjM,KAAK8L,IAAM,UAAYqF,EAAOtB,QAAU,qBAAsB,CACvE3D,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,mBACR2B,eAAgB,oBAEpB1B,KAAM,OACN2B,OAAQ,SAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,MAAQf,EAAS4B,YAEjF,OAAO5B,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MA1oBvB,CAAAT,IAAA,oBAAAtI,MAAA,SAAAuP,GA8oBsG,IAA9EpD,EAA8EoD,EAA9EpD,QAAStG,EAAqE0J,EAArE1J,SACnBuC,EAAM,CACR9L,KAAK8L,IAAK,QAAS+D,EAAS,OAAQtG,GACtCuE,KAAK,KACP,OAAO7B,MAAMH,EAAK,CACdI,QAAS,CACLC,cAAenM,KAAK6L,MACpBO,OAAQ,oBAEZC,KAAM,OACN2B,OAAQ,SAEP1B,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,wBAA0BgM,EAASe,OAAS,IAAMf,EAAS4B,YAE/E,OAAO5B,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MAjqBvB,CAAAT,IAAA,aAAAtI,MAAA,eAAAwP,EAAApT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAoG,EAAAC,GAAA,IAAAvD,EAAAlC,EAAA,OAAAd,GAAAC,EAAAG,KAAA,SAAAoG,GAAA,cAAAA,EAAAlG,KAAAkG,EAAAjG,MAAA,cAqqBuByC,EArqBvBuD,EAqqBuBvD,QACTlC,EAAO,CAAC,QAASkC,EAAS,SAtqBxCwD,EAAA9F,OAAA,SAuqBevN,KAAKyP,IAAU9B,EAAM,OAvqBpC,wBAAA0F,EAAA7F,SAAA2F,EAAAnT,SAAA,gBAAAsT,GAAA,OAAAJ,EAAAzF,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,kBAAAtI,MAAA,eAAA6P,EAAAzT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAyG,EAAAC,GAAA,IAAAC,EAAA/F,EAAAlB,EAAAkH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApH,GAAAC,EAAAG,KAAA,SAAAiH,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA9G,MAAA,cA0qB4BsG,EA1qB5BD,EA0qB4BC,SACd/F,EAAO,CAAC,UAAW,SAAU+F,EAAS5F,KAAK,KAAM,OA3qB/DoG,EAAA9G,KAAA,EA4qB6BpN,KAAKoO,IAAST,GA5qB3C,OA8qBQ,IAFMlB,EA5qBdyH,EAAA7G,KA6qBcsG,EAAkB,IAAIzI,IA7qBpC0I,EA8qB+C9T,OAAOqU,QAAQ1H,GAAtDoH,EAAA,EAAAA,EAAAD,EAAApE,OAAAqE,IAA+DC,EAAAF,EAAAC,GAAAE,EAAAjU,OAAAsU,GAAA,EAAAtU,CAAAgU,EAAA,GAAnDjE,EAAmDkE,EAAA,GAA1CE,EAA0CF,EAAA,GAC3DJ,EAAgBU,IAAIxE,EAAwBoE,GA/qBxD,OAAAC,EAAA3G,OAAA,SAirBeoG,GAjrBf,wBAAAO,EAAA1G,SAAAgG,EAAAxT,SAAA,gBAAAsU,GAAA,OAAAf,EAAA9F,MAAAzN,KAAA0N,YAAA,MAAA9B,EAAA,GCjKO,SAAS2I,GAAyBC,GAErC,IAAMC,EA9BV,SAA6BvT,GACzB,OAAQA,GACJ,IAAK,SACD,OAAOhD,GAAYwW,WACvB,IAAK,UACD,OAAOxW,GAAYyW,QACvB,QACI,MAAM,IAAIpU,MAAM,yBAA2BW,IAuB/B0T,CAAoBJ,EAAQtT,MAC1CgR,EApBV,SAA8BhR,GAC1B,OAAQA,GACJ,IAAK,OACD,OAAO/C,GAAoB0W,KAC/B,IAAK,YACD,OAAO1W,GAAoB2W,UAC/B,IAAK,gBACD,OAAO3W,GAAoB4W,IAC/B,QACI,MAAM,IAAIxU,MAAM,0BAA4BW,IAW/B8T,CAAqBR,EAAQS,cAC5ChB,GAAsCO,EAAQlH,OAP7ClP,GAAc8W,MASrB,OAAQhD,GACJ,KAAK/T,GAAoB0W,KACrB,OAAoB3W,GAAYyW,QACrB,CACH3P,GAAIwP,EAAQxP,GACZmQ,eAAgBX,EAAQY,QACxBlD,aAAcA,EACdmD,UAAWb,EAAQa,UACnBnU,KAAMuT,EACNnH,OAAQ2G,EACRqB,KAAMd,EAAQe,SACdC,UAAW,IAAIzS,KAAKyR,EAAQiB,YAC5BC,SAAU,IAAI3S,KAAKyR,EAAQmB,YAC3BC,WAAY,IAAI7S,KAAKyR,EAAQqB,UAiBzC,KAAK1X,GAAoB2W,UACrB,OAAoB5W,GAAYyW,QACrB,CACH3P,GAAIwP,EAAQxP,GACZmQ,eAAgBX,EAAQY,QACxBlD,aAAcA,EACdmD,UAAWb,EAAQa,UACnBnU,KAAMuT,EACNnH,OAAQ2G,EACR6B,YAAatB,EAAQe,SACrBC,UAAW,IAAIzS,KAAKyR,EAAQiB,YAC5BC,SAAU,IAAI3S,KAAKyR,EAAQmB,YAC3BC,WAAY,IAAI7S,KAAKyR,EAAQqB,UAiBzC,KAAK1X,GAAoB4W,IACrB,OAAoB7W,GAAYyW,QACrB,CACH3P,GAAIwP,EAAQxP,GACZmQ,eAAgBX,EAAQY,QACxBlD,aAAcA,EACdmD,UAAWb,EAAQa,UACnBnU,KAAMuT,EACNnH,OAAQ2G,EACR8B,MAAOvB,EAAQe,SACfC,UAAW,IAAIzS,KAAKyR,EAAQiB,YAC5BC,SAAU,IAAI3S,KAAKyR,EAAQmB,YAC3BC,WAAY,IAAI7S,KAAKyR,EAAQqB,UAgBzC,QACI,MAAM,IAAItV,MAAM,kCAAoCiU,EAAQS,yBAhM5D/W,kFAKAC,2FAMAC,0IA+LL,IAAM4X,GAAb,WAMI,SAAAA,EAAY7E,GAA8BrR,OAAAC,EAAA,EAAAD,CAAAE,KAAAgW,GAAAhW,KAJ1CmR,YAIyC,EAAAnR,KAHzCiW,kBAGyC,EAAAjW,KAFzCkW,WAEyC,EACrClW,KAAKmR,OAASA,EACdnR,KAAKiW,aAAe,IAAIE,GAAuB,CAC3CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAEvB7L,KAAKkW,MAAQ,IAAIhL,IAZzB,OAAApL,OAAAiM,EAAA,EAAAjM,CAAAkW,EAAA,EAAAhK,IAAA,aAAAtI,MAAA,eAAAoN,EAAAhR,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAeqBgE,GAfrB,IAAAqF,EAAA7B,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAgBYpN,KAAKkW,MAAMI,IAAItF,GAhB3B,CAAA9D,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAiBmBvN,KAAKkW,MAAM9H,IAAI4C,IAjBlC,cAAA9D,EAAAE,KAAA,EAoB+BpN,KAAKiW,aAAaM,WAAWvF,GApB5D,cAoBcqF,EApBdnJ,EAAAG,KAqBcmH,EAAUD,GAAyB8B,GAEzCrW,KAAKkW,MAAM7B,IAAIG,EAAQxP,GAAIwP,GAvBnCtH,EAAAK,OAAA,SAwBeiH,GAxBf,wBAAAtH,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAAmC,EAAArD,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,sBAAAtI,MAAA,eAAA8S,EAAA1W,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,IAAA,IAAA0H,EAAAQ,EAAAxN,EAAAxJ,EAAAO,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cA4Bc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA9B/B4C,EAAArB,KAAA,EAiCgC6I,EAAaS,mBAAmB,CACpDpF,eAAe,EACfE,cAAe2E,GAAwB1E,aAnCnD,cAiCcgF,EAjCdhI,EAAApB,MAsCcpE,EAAWwN,EAAUpN,IAAI,SAACmL,GAC5B,OAAOD,GAAyBC,MAG3BmC,QAAQ,SAACnC,GACT/U,EAAKyW,MAAMI,IAAI9B,EAAQxP,KACxBvF,EAAKyW,MAAM7B,IAAIG,EAAQxP,GAAIwP,KA5C3C/F,EAAAlB,OAAA,SAgDetE,GAhDf,wBAAAwF,EAAAjB,SAAAe,EAAAvO,SAAA,yBAAAwW,EAAA/I,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uBAAAtI,MAAA,eAAAkT,EAAA9W,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EAmD+BqG,GAnD/B,IAAAc,EAAAQ,EAAAJ,EAAA,OAAAxJ,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAoDc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAtD/BkD,EAAA3B,KAAA,EAyDgC6I,EAAaS,mBAAmB,CACpDpF,eAAe,EACfE,cAAe2E,GAAwB1E,aA3DnD,UAyDcgF,EAzDd1H,EAAA1B,KA+DcgJ,EAAWI,EAAUI,KAAK,SAACC,GAC7B,OAAOA,EAAE1B,UAAYD,IAhEjC,CAAApG,EAAA3B,KAAA,eAAA2B,EAAAxB,OAAA,SAoEmB,MApEnB,cAAAwB,EAAAxB,OAAA,SAuEegH,GAAyB8B,IAvExC,wBAAAtH,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAA4O,GAAA,OAAAgI,EAAAnJ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,2BAAAtI,MAAA,eAAAqT,EAAAjX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6C,EA0EmCuF,GA1EnC,IAAAc,EAAAQ,EAAA,OAAA5J,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cA2Ec6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA7E/BqE,EAAA9C,KAAA,EAgFgC6I,EAAaS,mBAAmB,CACpDpF,eAAe,EACfE,cAAe2E,GAAwB1E,aAlFnD,cAgFcgF,EAhFdvG,EAAA7C,KAAA6C,EAAA3C,OAAA,SAsFekJ,EACFzM,OAAO,SAAC8M,GACL,OAAOA,EAAE1B,UAAYD,IAExB9L,IAAI,SAACyN,GACF,OAAOvC,GAAyBuC,MA3FhD,wBAAA5G,EAAA1C,SAAAoC,EAAA5P,SAAA,gBAAAgP,GAAA,OAAA+H,EAAAtJ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,wBAAAtI,MAAA,eAAAsT,EAAAlX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA0D,EA+FgC0E,GA/FhC,IAAAc,EAAAQ,EAAA,OAAA5J,GAAAC,EAAAG,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAgGc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAlG/B8E,EAAAvD,KAAA,EAqGgC6I,EAAagB,oBAAoB,CACrD3F,eAAe,EACfE,cAAe2E,GAAwB1E,aAvGnD,cAqGcgF,EArGd9F,EAAAtD,KAAAsD,EAAApD,OAAA,SA2GekJ,EACFzM,OAAO,SAAC8M,GACL,OAAOA,EAAE1B,UAAYD,IAExB9L,IAAI,SAACyN,GACF,OAAOvC,GAAyBuC,MAhHhD,wBAAAnG,EAAAnD,SAAAiD,EAAAzQ,SAAA,gBAAAsQ,GAAA,OAAA0G,EAAAvJ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gCAAAtI,MAAA,eAAAwT,EAAApX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAgE,EAuHwCoE,GAvHxC,IAAAc,EAAAhN,EAAA,OAAA4D,GAAAC,EAAAG,KAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,cAwHc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA1H/BoF,EAAA9D,KAAA,EAAA8D,EAAA7D,KAAA,EA8I8B6I,EAAakB,iBAAiBhC,EAAgB,CAC5D7D,eAAe,EACfE,cAAe2E,GAAwB1E,aAhJvD,OAAAR,EAAAvC,GAkJqB,SAAC8F,GACF,OAAOD,GAAyBC,IALxCvL,EA9IZgI,EAAA5D,KAkJiBhE,IAlJjB4H,EAAAvC,IAAAuC,EAAA7D,KAAA,gBAAA6D,EAAA9D,KAAA,EAAA8D,EAAAmG,GAAAnG,EAAA,SAsJYhI,EAAW,GAtJvB,eAAAgI,EAAA1D,OAAA,SAyJetE,GAzJf,yBAAAgI,EAAAzD,SAAAuD,EAAA/Q,KAAA,4BAAAuQ,GAAA,OAAA2G,EAAAzJ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,yBAAAtI,MAAA,eAAA2T,EAAAvX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAkF,EA4JiCkD,GA5JjC,IAAAc,EAAAQ,EAAA,OAAA5J,GAAAC,EAAAG,KAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,cA6Jc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA/J/BuG,EAAAhF,KAAA,EAkKgC6I,EAAaS,mBAAmB,CACpDpF,eAAe,EACfE,cAAe2E,GAAwB1E,aApKnD,cAkKcgF,EAlKdrE,EAAA/E,KAAA+E,EAAA7E,OAAA,SAwKekJ,EACFzM,OAAO,SAAC8M,GACL,OAAOA,EAAE1B,UAAYD,IAExB9L,IAAI,SAACyN,GACF,OAAOvC,GAAyBuC,MA7KhD,wBAAA1E,EAAA5E,SAAAyE,EAAAjS,SAAA,gBAAA4Q,GAAA,OAAAyG,EAAA5J,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,6BAAAtI,MAAA,eAAA4T,EAAAxX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAoG,IAAA,IAAA8C,EAAAQ,EAAAxN,EAAA0C,EAAA3L,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAoG,GAAA,cAAAA,EAAAlG,KAAAkG,EAAAjG,MAAA,cAmLc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QArL/BwH,EAAAjG,KAAA,EAwLgC6I,EAAaS,mBAAmB,CACpDpF,eAAe,EACfE,cAAe2E,GAAwB1E,aA1LnD,cAwLcgF,EAxLdpD,EAAAhG,MA6LcpE,EAAWwN,EAAUpN,IAAI,SAACmL,GAC5B,OAAOD,GAAyBC,KACjCxK,OAAO,SAACwK,GACP,OAAQA,EAAQtT,OAAShD,GAAYwW,cAGhCiC,QAAQ,SAACnC,GACT7I,EAAKuK,MAAMI,IAAI9B,EAAQxP,KACxB2G,EAAKuK,MAAM7B,IAAIG,EAAQxP,GAAIwP,KArM3CnB,EAAA9F,OAAA,SAyMetE,GAzMf,wBAAAoK,EAAA7F,SAAA2F,EAAAnT,SAAA,yBAAAsX,EAAA7J,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,mCAAAtI,MAAA,eAAA6T,EAAAzX,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAyG,EA4M2C2B,GA5M3C,IAAAqC,EAAA,OAAA3K,GAAAC,EAAAG,KAAA,SAAAiH,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA9G,MAAA,cAAA8G,EAAA9G,KAAA,EA6MkCpN,KAAKyX,6BA7MvC,cA6McD,EA7MdtD,EAAA7G,KAAA6G,EAAA3G,OAAA,SA8MeiK,EAAYxN,OAAO,SAAC0N,GACvB,OAAQA,EAAWvC,iBAAmBA,KA/MlD,wBAAAjB,EAAA1G,SAAAgG,EAAAxT,SAAA,gBAAA6Q,GAAA,OAAA0G,EAAA9J,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,qBAAAtI,MAAA,eAAAiU,EAAA7X,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6K,IAAA,IAAA3B,EAAAQ,EAAAxN,EAAA4O,EAAA7X,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAA6K,GAAA,cAAAA,EAAA3K,KAAA2K,EAAA1K,MAAA,cAoNc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAtN/BiM,EAAA1K,KAAA,EAyNgC6I,EAAagB,oBAAoB,CACrD3F,eAAe,EACfE,cAAe2E,GAAwB1E,aA3NnD,cAyNcgF,EAzNdqB,EAAAzK,MA8NcpE,EAAWwN,EAAUpN,IAAI,SAACmL,GAC5B,OAAOD,GAAyBC,MAG3BmC,QAAQ,SAACnC,GACTqD,EAAK3B,MAAMI,IAAI9B,EAAQxP,KACxB6S,EAAK3B,MAAM7B,IAAIG,EAAQxP,GAAIwP,KApO3CsD,EAAAvK,OAAA,SAwOetE,GAxOf,wBAAA6O,EAAAtK,SAAAoK,EAAA5X,SAAA,yBAAA2X,EAAAlK,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,0BAAAtI,MAAA,eAAAqU,EAAAjY,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAiL,EA2OkC7C,GA3OlC,IAAAc,EAAAQ,EAAAJ,EAAA,OAAAxJ,GAAAC,EAAAG,KAAA,SAAAgL,GAAA,cAAAA,EAAA9K,KAAA8K,EAAA7K,MAAA,cA4Oc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA9O/BoM,EAAA7K,KAAA,EAiPgC6I,EAAagB,oBAAoB,CACrD3F,eAAe,EACfE,cAAe2E,GAAwB1E,aAnPnD,UAiPcgF,EAjPdwB,EAAA5K,KAuPcgJ,EAAWI,EAAUI,KAAK,SAACC,GAC7B,OAAQA,EAAE1B,UAAYD,IAxPlC,CAAA8C,EAAA7K,KAAA,eAAA6K,EAAA1K,OAAA,SA4PmB,MA5PnB,cAAA0K,EAAA1K,OAAA,SA+PegH,GAAyB8B,IA/PxC,wBAAA4B,EAAAzK,SAAAwK,EAAAhY,SAAA,gBAAAkR,GAAA,OAAA6G,EAAAtK,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uCAAAtI,MAAA,eAAAwU,EAAApY,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAoL,EAkQ+ChD,GAlQ/C,IAAAc,EAAAmC,EAAA,OAAAvL,GAAAC,EAAAG,KAAA,SAAAoL,GAAA,cAAAA,EAAAlL,KAAAkL,EAAAjL,MAAA,cAmQc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QArQ/BwM,EAAAjL,KAAA,EAwQoC6I,EAAakB,iBAAiBhC,EAAgB,CACtE7D,eAAe,EACfE,cAAe2E,GAAwB1E,aA1QnD,cAwQc2G,EAxQdC,EAAAhL,KAAAgL,EAAA9K,OAAA,SA6Qe6K,EAAc/O,IAAI,SAACmL,GACtB,OAAOD,GAAyBC,MA9Q5C,wBAAA6D,EAAA7K,SAAA2K,EAAAnY,SAAA,gBAAAsS,GAAA,OAAA4F,EAAAzK,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,iCAAAtI,MAAA,eAAA4U,EAAAxY,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwL,EAoSyC7E,GApSzC,IAAAuC,EAAAmC,EAAAI,EAAA,OAAA3L,GAAAC,EAAAG,KAAA,SAAAwL,GAAA,cAAAA,EAAAtL,KAAAsL,EAAArL,MAAA,cAqSc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAvS/B4M,EAAArL,KAAA,EA0SoCsL,QAAQC,IAAIjF,EAASrK,IAAI,SAACwG,GAClD,OAAOoG,EAAakB,iBAAiBtH,EAAS,CAC1CyB,eAAe,EACfE,cAAe2E,GAAwB1E,gBA7SvD,cA0Sc2G,EA1SdK,EAAApL,KAiTcmL,EAAcJ,EAAcQ,OAAO,SAACJ,EAAavP,GACnD,OAAOuP,EAAY3K,OAAO5E,IAC3B,IAnTXwP,EAAAlL,OAAA,SAqTeiL,EAAYnP,IAAI,SAACmL,GACpB,OAAOD,GAAyBC,MAtT5C,wBAAAiE,EAAAjL,SAAA+K,EAAAvY,SAAA,gBAAAuS,GAAA,OAAA+F,EAAA7K,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,eAAAmV,EAAA/Y,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+L,EA0TwB9H,GA1TxB,IAAAiF,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAA8L,GAAA,cAAAA,EAAA5L,KAAA4L,EAAA3L,MAAA,cA2Tc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA7T/BkN,EAAA3L,KAAA,EAgU8B6I,EAAa+C,cAAc,CAC7ChI,cAjUZ,cAgUcwD,EAhUduE,EAAA1L,KAAA0L,EAAAxL,OAAA,SAmUegH,GAAyBC,IAnUxC,wBAAAuE,EAAAvL,SAAAsL,EAAA9Y,SAAA,gBAAAwS,GAAA,OAAAqG,EAAApL,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,eAAAuV,EAAAnZ,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAmM,EAsUwBlI,GAtUxB,IAAAiF,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAAkM,GAAA,cAAAA,EAAAhM,KAAAgM,EAAA/L,MAAA,cAuUc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAzU/BsN,EAAA/L,KAAA,EA4U8B6I,EAAamD,cAAc,CAC7CpI,cA7UZ,cA4UcwD,EA5Ud2E,EAAA9L,KAAA8L,EAAA5L,OAAA,SA+UegH,GAAyBC,IA/UxC,wBAAA2E,EAAA3L,SAAA0L,EAAAlZ,SAAA,gBAAAsT,GAAA,OAAA2F,EAAAxL,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,cAAAtI,MAAA,eAAA2V,EAAAvZ,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAuM,EAkVsBtI,GAlVtB,IAAAiF,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAAsM,GAAA,cAAAA,EAAApM,KAAAoM,EAAAnM,MAAA,cAmVc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QArV/B0N,EAAAnM,KAAA,EAwV8B6I,EAAauD,YAAY,CAC3CxI,cAzVZ,cAwVcwD,EAxVd+E,EAAAlM,KAAAkM,EAAAhM,OAAA,SA2VegH,GAAyBC,IA3VxC,wBAAA+E,EAAA/L,SAAA8L,EAAAtZ,SAAA,gBAAAsU,GAAA,OAAA+E,EAAA5L,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uBAAAtI,MAAA,eAAA+V,EAAA3Z,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA2M,EA8V+B1I,GA9V/B,IAAAiF,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAA0M,GAAA,cAAAA,EAAAxM,KAAAwM,EAAAvM,MAAA,cA+Vc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAjW/B8N,EAAAvM,KAAA,EAoW8B6I,EAAamD,cAAc,CAC7CpI,cArWZ,cAoWcwD,EApWdmF,EAAAtM,KAAAsM,EAAApM,OAAA,SAuWegH,GAAyBC,IAvWxC,wBAAAmF,EAAAnM,SAAAkM,EAAA1Z,SAAA,gBAAA4Z,GAAA,OAAAH,EAAAhM,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uBAAAtI,MAAA,eAAAmW,EAAA/Z,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+M,EA0W+B9I,GA1W/B,IAAAiF,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAA8M,GAAA,cAAAA,EAAA5M,KAAA4M,EAAA3M,MAAA,cA2Wc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA7W/BkO,EAAA3M,KAAA,EAgX8B6I,EAAauD,YAAY,CAC3CxI,cAjXZ,cAgXcwD,EAhXduF,EAAA1M,KAAA0M,EAAAxM,OAAA,SAmXegH,GAAyBC,IAnXxC,wBAAAuF,EAAAvM,SAAAsM,EAAA9Z,SAAA,gBAAAga,GAAA,OAAAH,EAAApM,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,sBAAAtI,MAAA,eAAAuW,EAAAna,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAmN,EAsX8BrK,EAAiBtG,GAtX/C,IAAA0M,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAkN,GAAA,cAAAA,EAAAhN,KAAAgN,EAAA/M,MAAA,cAuXc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAzX/BsO,EAAA5M,OAAA,SA4Xe0I,EAAamE,kBAAkB,CAClCvK,UACAtG,aAEC+C,KAAK,SAACkI,GACH,OAAOD,GAAyBC,MAjYhD,wBAAA2F,EAAA3M,SAAA0M,EAAAla,SAAA,gBAAAqa,EAAAC,GAAA,OAAAL,EAAAxM,MAAAzN,KAAA0N,YAAA,MAAAsI,EAAA,GC9LauE,GAAb,WAMI,SAAAA,EAAA/a,GAAiD,IAAnCsM,EAAmCtM,EAAnCsM,IAAKD,EAA8BrM,EAA9BqM,MAA8B/L,OAAAC,EAAA,EAAAD,CAAAE,KAAAua,GAAAva,KALjD8L,SAKiD,EAAA9L,KAJjD6L,WAIiD,EAC7C7L,KAAK8L,IAAMA,EACX9L,KAAK6L,MAAQA,GAAS,KAR9B,OAAA/L,OAAAiM,EAAA,EAAAjM,CAAAya,EAAA,EAAAvO,IAAA,cAAAtI,MAAA,SAWgBsK,EAAgBwM,GACxB,MAAO,CACHC,QAAS,MACTzM,OAA+BhO,KAAK0a,YAAand,OAAS,IAAMyQ,EAChEhJ,GAAI2M,OAAOgJ,KAAKC,UAAUC,MAAM,GAChC1J,OAAQ,CAACqJ,MAhBrB,CAAAxO,IAAA,mBAAAtI,MAAA,SAoBqBsK,GACb,MAAO,CACHyM,QAAS,MACTzM,OAA+BhO,KAAK0a,YAAand,OAAS,IAAMyQ,EAChEhJ,GAAI2M,OAAOgJ,KAAKC,UAAUC,MAAM,GAChC1J,OAAQ,QAzBpBoJ,EAAA,GAAaA,GAIFhd,cA4BJ,IAAMud,GAAb,SAAAC,GAGI,SAAAD,EAAY3J,GAA6B,IAAA1R,EAErC,GAFqCK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8a,IACrCrb,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgb,GAAA3a,KAAAH,KAAMmR,KAHVtF,WAEyC,GAEhCsF,EAAOtF,MACR,MAAM,IAAItL,MAAM,oCAHiB,OAKrCd,EAAKoM,MAAQsF,EAAOtF,MALiBpM,EAH7C,OAAAK,OAAAe,EAAA,EAAAf,CAAAgb,EAAAC,GAAAjb,OAAAiM,EAAA,EAAAjM,CAAAgb,EAAA,EAAA9O,IAAA,WAAAtI,MAAA,SAWasX,EAAcR,GACnB,OAAOvO,MAAMjM,KAAK8L,IAAK,CACnBkC,OAAQ,OACR3B,KAAM,OACN6J,MAAO,WACPhK,QAAS,CACLC,cAAenM,KAAK6L,MACpBkC,eAAgB,mBAChB3B,OAAQ,oBAEZwB,KAAMK,KAAKC,UAAUlO,KAAKib,YAAYD,EAAMR,MAE3ClO,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,kBAAoBgM,EAASe,OAAS,KAAOf,EAAS4B,YAE1E,OAAgB5B,EAASC,aA3BzCsO,EAAA,CAA6CP,ICehCW,GAAb,SAAAC,GAII,SAAAD,EAAY/J,GAAkC,OAAArR,OAAAC,EAAA,EAAAD,CAAAE,KAAAkb,GAAApb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAob,GAAA/a,KAAAH,KACpCmR,IALd,OAAArR,OAAAe,EAAA,EAAAf,CAAAob,EAAAC,GAAArb,OAAAiM,EAAA,EAAAjM,CAAAob,EAAA,EAAAlP,IAAA,aAAAtI,MAAA,WA2BQ,OAAOuI,MAAMjM,KAAK8L,IAAK,CACnBkC,OAAQ,OACR3B,KAAM,OACN6J,MAAO,WACPhK,QAAS,CACLC,cAAenM,KAAK6L,MACpBkC,eAAgB,mBAChB3B,OAAQ,oBAEZwB,KAAMK,KAAKC,UAAUlO,KAAKob,iBAAiB,cAE1C9O,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAM,+BAAiCgM,EAASe,OAAS,KAAOf,EAAS4B,YAEvF,OAAO5B,EAASC,WA1ChC,CAAAR,IAAA,iBAAAtI,MAAA,eAAA2X,EAAAvb,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EA8CyBzD,GA9CzB,OAAAsD,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WA+CY8N,EAAkBI,aAAahF,IAAI/M,GA/C/C,CAAA2D,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAgDmBmL,QAAQ6C,QAAQL,EAAkBI,aAAalN,IAAI7E,KAhDtE,cAAA2D,EAAAK,OAAA,SAmDevN,KAAKwb,SAAS,mBAAoB,CAACjS,IACrC+C,KAAK,SAACG,GACH,OAAOA,EAAOA,OAAO,GAAG,MArDxC,wBAAAS,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAA0M,EAAA5N,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,oBAAAtI,MAAA,eAAA+X,EAAA3b,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EAyD4B0B,GAzD5B,OAAApD,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cA2DQ8N,EAAkBI,aAAaI,OAAOzL,EAAOqF,KAAK/L,UA3D1DkF,EAAAlB,OAAA,SA4DevN,KAAKwb,SAAS,sBAAuB,CAAEG,QAAS1L,IAClD3D,KAAK,eA7DlB,wBAAAmC,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA4O,GAAA,OAAA6M,EAAAhO,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,kBAAAtI,MAAA,eAAAkY,EAAA9b,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EAuE0B+M,GAvE1B,OAAAhP,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAAxB,OAAA,SAwEevN,KAAKwb,SAAS,mBAAoBK,GACpCvP,KAAK,SAACG,GACH,OAAOA,EAAOA,OAAO,MA1ErC,wBAAAsC,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAAgP,GAAA,OAAA4M,EAAAnO,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,cAAAtI,MAAA,eAAAoY,EAAAhc,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6C,IAAA,OAAA/C,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA3C,OAAA,SA+EevN,KAAKwb,SAAS,eAAgB,CAAExR,OAAQ,KAC1CsC,KAAK,SAACG,GACH,OAAOA,EAAOA,OAAO,MAjFrC,wBAAAyD,EAAA1C,SAAAoC,EAAA5P,SAAA,yBAAA8b,EAAArO,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,cAAAtI,MAAA,eAAAqY,EAAAjc,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA0D,EAqFsBW,GArFtB,OAAAvE,GAAAC,EAAAG,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAApD,OAAA,SAsFevN,KAAKwb,SAAS,eAAgB,CAAExR,OAAQoH,IAC1C9E,KAAK,SAACG,GACH,OAAOA,EAAOA,OAAO,MAxFrC,wBAAAkE,EAAAnD,SAAAiD,EAAAzQ,SAAA,gBAAAsQ,GAAA,OAAAyL,EAAAtO,MAAAzN,KAAA0N,YAAA,MAAAwN,EAAA,CAAuCJ,IC/CvC,SAASkB,GAAcL,GACnB,IAAIM,EACJ,OAAKN,EAAQA,QAAQO,UAejBD,EADsC,UAAtCN,EAAQA,QAAQO,SAASD,SACdN,EAAQA,QAAQO,SAASC,cAEzBR,EAAQA,QAAQO,SAASD,SAGjC,CACH1S,SAAUoS,EAAQrG,KAAK/L,SACvB6S,SAAUT,EAAQrG,KAAK8G,SACvBC,KAAMV,EAAQA,QAAQO,SAASG,KAC/Brb,MAAO2a,EAAQA,QAAQO,SAASlb,MAChCsb,QAASX,EAAQA,QAAQO,SAASI,QAClCC,MAAON,EACPxV,aAAckV,EAAQA,QAAQO,SAASzV,aACvC+V,aAAcb,EAAQA,QAAQO,SAASM,aACvCC,aAAcd,EAAQA,QAAQe,OAAOD,aACrCE,gBAAiBhB,EAAQA,QAAQO,SAASS,kBA7BnC,CACHpT,SAAUoS,EAAQrG,KAAK/L,SACvB6S,SAAUT,EAAQrG,KAAK8G,SACvBC,KAAM,KACNrb,MAAO,KACPsb,QAAS,KACTC,MAAO,KACP9V,aAAc,KACd+V,aAAc,KACdC,aAAc,KACdE,gBAAiB,MDkChBzB,GACF3d,OAAiB,cADf2d,GAEFI,aAAyC,IAAIpQ,ICKjD,ICvCK0R,GAgDA3e,GAkBA4e,GAmDAC,GAgDA1e,GD9HC2e,GAAb,WAOI,SAAAA,EAAY5L,GAA0BrR,OAAAC,EAAA,EAAAD,CAAAE,KAAA+c,GAAA/c,KALtCmR,YAKqC,EAAAnR,KAJrCgd,uBAIqC,EAAAhd,KAFrCkW,WAEqC,EACjClW,KAAKmR,OAASA,EACdnR,KAAKgd,kBAAoB,IAAI9B,GAAkB,CAC3CpP,IAAK9L,KAAKmR,OAAO8L,sBACjBpR,MAAO7L,KAAKmR,OAAOtF,QAEvB7L,KAAKkW,MAAQ,IAAIhL,IAbzB,OAAApL,OAAAiM,EAAA,EAAAjM,CAAAid,EAAA,EAAA/Q,IAAA,UAAAtI,MAAA,eAAAwZ,EAAApd,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAgBkBzD,GAhBlB,IAAA4T,EAAA7H,EAAA,OAAAzI,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAiBYpN,KAAKkW,MAAMI,IAAI/M,GAjB3B,CAAA2D,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAkBmBvN,KAAKkW,MAAM9H,IAAI7E,IAlBlC,cAAA2D,EAAAE,KAAA,EAqBkCpN,KAAKgd,kBAAkBI,eAAe7T,GArBxE,cAqBc4T,EArBdjQ,EAAAG,KAsBciI,EAAO0G,GAAcmB,GAC3Bnd,KAAKkW,MAAM7B,IAAI9K,EAAU+L,GAvBjCpI,EAAAK,OAAA,SAwBe+H,GAxBf,wBAAApI,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAAuO,EAAAzP,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,WAAAtI,MAAA,eAAA2Z,EAAAvd,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EA2BmBsN,GA3BnB,IAAApP,EAAA6Q,EAAAC,EAAA9d,EAAAO,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cA4BcX,EAA8B,IAAIvB,IAElCoS,EAA2B,GAEjCzB,EAAUlF,QAAQ,SAACpN,GACX9J,EAAKyW,MAAMI,IAAI/M,GACfkD,EAAO4H,IAAI9K,EAAU9J,EAAKyW,MAAM9H,IAAI7E,IAEpC+T,EAAQjN,KAAK9G,KApC7BkF,EAAArB,KAAA,EAwCmCpN,KAAKgd,kBAAkBQ,gBAAgBF,GAxC1E,cAwCcC,EAxCd9O,EAAApB,KAyCsBkQ,EAAalU,IAAI,SAACsS,GAC5B,OAAOK,GAAcL,KAGzB4B,EAAa5G,QAAQ,SAACwG,GAClB,IAAM7H,EAAO0G,GAAcmB,GAC3B1d,EAAKyW,MAAM7B,IAAIiB,EAAK/L,SAAU+L,GAC9B7I,EAAO4H,IAAIiB,EAAK/L,SAAU+L,KAhDtC7G,EAAAlB,OAAA,SAmDed,GAnDf,wBAAAgC,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA4O,GAAA,OAAAyO,EAAA5P,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,cAAAtI,MAAA,eAAAqY,EAAAjc,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EAsDsBsC,GAtDtB,IAAAqM,EAAA,OAAA5Q,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EAuD4BpN,KAAKgd,kBAAkBU,YAAYtM,EAAMA,OAvDrE,cAuDcqM,EAvDd1O,EAAA1B,KAAA0B,EAAAxB,OAAA,SAwDekQ,EACFzT,OAAO,SAAAxK,GAAkB,IAAf+J,EAAe/J,EAAf+J,SACP,OAAmD,IAA3C6H,EAAMuM,cAAchd,QAAQ4I,KAEvCF,IAAI,SAAAoJ,GACD,MAAO,CACHlJ,SAFyBkJ,EAAzBlJ,SAEU6S,SAFe3J,EAAf2J,aA5D9B,wBAAArN,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAAgP,GAAA,OAAA+M,EAAAtO,MAAAzN,KAAA0N,YAAA,MAAAqP,EAAA,GEvEqBa,2HAGiBC,GAC9B,IAAMC,EAAoBD,EAAEE,OAAOH,EAAWI,gBAC9C,IAA2B,IAAvBF,EACA,OAAO,EAEX,IAAMG,EAAcH,EAAoB,EAAI,EAAI,EAAIA,EAAoB,EAClEI,EAASL,EAAEhD,MAAMoD,EAAaH,GAC9BK,EAAQN,EAAEhD,MAAMiD,EAAoB,EAAGA,EAAoB,GACjE,6CAAAjQ,OAA8CiQ,EAA9C,OAAAjQ,OAAqEqQ,EAArE,OAAArQ,OAAiFsQ,yCAGhEnZ,GAEjB,GAAkB,IAAdA,EAAGwK,OACH,MAAO,CACHxK,EAAI,CACA9D,KAAMnD,EAAoBqgB,iBAC1Bze,QAAS,mCACTmD,YAAa,IAAIC,OAI7B,GAAIiC,EAAGqZ,MAAM,MACT,MAAO,CACHrZ,EAAI,CACA9D,KAAMnD,EAAoBkI,MAC1BtG,QAAS,0CACTmD,YAAa,IAAIC,OAK7B,GAAIiC,EAAGwK,OAAS,IACZ,MAAO,CACHxK,EAAI,CACA9D,KAAMnD,EAAoBkI,MAC1BtG,QAAS,wDACTmD,YAAa,IAAIC,OAM7B,OAAKiC,EAAGqZ,MADQ,gBAWT,CAACrZ,EAAI,CACR9D,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,OAXV,CACHiC,EAAI,CACA9D,KAAMnD,EAAoBkI,MAC1BtG,QAAS,mGACTmD,YAAa,IAAIC,+CAWVzC,GACnB,OAAoB,IAAhBA,EAAKkP,OACE,CACHlP,EAAM,CACFY,KAAMnD,EAAoBqgB,iBAC1Bze,QAAS,qCACTmD,YAAa,IAAIC,OAGzBzC,EAAKkP,OAAS,IACP,CACHlP,EAAM,CACFY,KAAMnD,EAAoBkI,MAC1BtG,QAAS,0DACTmD,YAAa,IAAIC,OAGtB,CACHzC,EAAM,CACFY,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,kDAIHkB,GACtB,GAAgB,OAAZA,GAAgC,KAAZA,EACpB,MAAO,CACHA,EAAS,CACL/C,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,OAI7B,GAAIkB,EAAQuL,OAAS,IACjB,MAAO,CACHvL,EAAS,CACL/C,KAAMnD,EAAoBkI,MAC1BtG,QAAS,kDACTmD,YAAa,IAAIC,OAG7B,IACI,IAAM+I,EAAM,IAAIwS,IAAIra,GACpB,IAAK6H,EAAIyS,SAASF,MAAM,eACpB,MAAO,CACHpa,EAAS,CACL/C,KAAMnD,EAAoBkI,MAC1BtG,QAAS,sBAAwBmM,EAAIyS,SAAW,2BAChDzb,YAAa,IAAIC,OAG7B,IAAK+I,EAAIyS,SAASF,MAAM,YACpB,MAAO,CACHpa,EAAS,CACL/C,KAAMnD,EAAoBkI,MAC1BtG,QAAS,yCACTmD,YAAa,IAAIC,OAG/B,MAAOyb,GACL,MAAO,CACHva,EAAS,CACL/C,KAAMnD,EAAoBkI,MAC1BtG,QAAS,sBAAwB6e,EAAG7e,QACpCmD,YAAa,IAAIC,OAG7B,MAAO,CACHkB,EAAS,CACL/C,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,kDAIHuB,GACtB,GAAgB,OAAZA,GAAgC,KAAZA,EACpB,MAAO,CACHA,EAAS,CACLpD,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,OAI7B,GAAIuB,EAAQkL,OAAS,IACjB,MAAO,CACHlL,EAAS,CACLpD,KAAMnD,EAAoBkI,MAC1BtG,QAAS,kDACTmD,YAAa,IAAIC,OAG7B,IACI,IAAM+I,EAAM,IAAIwS,IAAIha,GAIpB,IAAKwH,EAAIyS,SAASF,MAAM,eACpB,MAAO,CACH/Z,EAAS,CACLpD,KAAMnD,EAAoBkI,MAC1BtG,QAAS,sBAAwBmM,EAAIyS,SAAW,2BAChDzb,YAAa,IAAIC,OAG/B,MAAOyb,GACL,MAAO,CACHla,EAAS,CACLpD,KAAMnD,EAAoBkI,MAC1BtG,QAAS,sBAAwB6e,EAAG7e,QACpCmD,YAAa,IAAIC,OAG7B,MAAO,CACHuB,EAAS,CACLpD,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,4DAIO4B,GAChC,OAAiC,IAA7BA,EAAkB6K,OACX,CACHlP,KAAM,CACFY,KAAMnD,EAAoBqgB,iBAC1Bze,QAAS,sCACTmD,YAAa,IAAIC,OAIzB4B,EAAkB6K,OAAS,IACpB,CACH7K,EAAmB,CACfzD,KAAMnD,EAAoBkI,MAC1BtG,QAAS,2DACTmD,YAAa,IAAIC,OAGtB,CACH4B,EAAmB,CACfzD,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,sDAICwC,GAC1B,OAA2B,IAAvBA,EAAYiK,OAKL,CAAClP,KAAM,CACVY,KAAMnD,EAAoBkI,MAC1BtG,QAAS,4CACTmD,YAAa,IAAIC,OAarBwC,EAAYiK,OAAS,KACd,CACHjK,EAAa,CACTrE,KAAMnD,EAAoBkI,MAC1BtG,QAAS,mEACTmD,YAAa,IAAIC,OAGtB,CACHwC,EAAa,CACTrE,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,mDAKFwZ,GAEvB,OAAIA,EAAM/M,OADa,IAEZ,CACH+M,EAAO,CACHrb,KAAMnD,EAAoBkI,MAC1BtG,QAAO,uCAAAkO,OALI,IAKJ,eACP/K,YAAa,IAAIC,OAGtB,CACHwZ,EAAO,CACHrb,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,gBDrD1B,SAAS0b,GACZC,EACAnV,EACAiL,EACAkD,GAEA,GAAIgH,EAAI5V,OAASgU,GAAiB6B,qBAC9B,OAAInK,GAAWA,EAAQc,OAAS/L,EACrB,CACHrI,KAAM0b,GAA2BgC,uBACjC5N,UAAWwD,EAAQxP,IAEhB0S,GAAcA,EAAWpC,OAAS/L,EAClC,CACHrI,KAAM0b,GAA2BiC,0BACjC7N,UAAW0G,EAAW1S,IAGnB,CACH9D,KAAM0b,GAA2BtZ,MAK7C,GAAIiG,IAAamV,EAAII,MAAMvV,SACvB,MAAO,CACHrI,KAAM0b,GAA2BmC,OAGrC,IAAMzV,EAASoV,EAAItV,QAAQyN,KAAK,SAACvN,GAC7B,OAAQA,EAAOC,WAAaA,IAEhC,IAAID,EAmBG,OAAIkL,GAAWA,EAAQc,OAAS/L,EAC5B,CACHrI,KAAM0b,GAA2BgC,uBACjC5N,UAAWwD,EAAQxP,IAEhB0S,GAAcA,EAAWpC,OAAS/L,EAClC,CACHrI,KAAM0b,GAA2BiC,0BACjC7N,UAAW0G,EAAW1S,IAGnB,CACH9D,KAAM0b,GAA2BtZ,MA9BrC,OAAQgG,EAAOpI,MACX,KAAKjD,GAAW4L,OACZ,MAAO,CACH3I,KAAM0b,GAA2B/S,QAEzC,KAAK5L,GAAWwL,MACZ,MAAO,CACHvI,KAAM0b,GAA2BnT,OAEzC,KAAKxL,GAAW8gB,MACZ,MAAO,CACH7d,KAAM0b,GAA2BmC,OAEzC,QACI,MAAO,CACH7d,KAAM0b,GAA2BtZ,OAqBzD,SAAS0b,GAAqCC,GAC1C,OAAQA,GACJ,IAAK,OACD,OAAOpC,GAAwBvZ,KACnC,IAAK,OACD,OAAOuZ,GAAwBqC,KACnC,IAAK,QACD,OAAOrC,GAAwBsC,KACnC,IAAK,QACD,OAAOtC,GAAwBpT,MACnC,IAAK,MACD,OAAOoT,GAAwBkC,MACnC,QACI,MAAM,IAAIxe,MAAM,mCAAqC0e,IAIjE,SAASG,GAAY3B,EAAgDlU,EAAkB8V,GACnF,IAAM/J,EAAOmI,EAAMrP,IAAI7E,GACvB,OAAK+L,EAGEA,EAAK8G,SAFDiD,EAKR,SAASC,GAAoBvP,EAAwBwP,EAAuB9B,GAI/E,IAAMqB,EAAgB,CAClBvV,SAAUwG,EAAM+O,MAAMxe,KACtB8b,SAAUgD,GAAY3B,EAAO1N,EAAM+O,MAAMxe,KAAM,OAC/Ckf,SAAU,IAAIzc,KAAKgN,EAAM+O,MAAMW,QAC/BC,cAAe3P,EAAM+O,MAAMa,UAAY,IAAI5c,KAAKgN,EAAM+O,MAAMa,WAAa,KACzEze,KAAMjD,GAAW8gB,MACjBxC,MAAOxM,EAAM+O,MAAM1P,OAAOmN,OAIxBnT,EAA0B,GAE7ByE,OAAOkC,EAAM6P,OAAOvW,IAAI,SAACwW,GACxB,MAAO,CACHtW,SAAUsW,EAAMvf,KAChB8b,SAAUgD,GAAY3B,EAAOoC,EAAMvf,KAAM,OACzCkf,SAAU,IAAIzc,KAAK8c,EAAMJ,QACzBC,cAAeG,EAAMF,UAAY,IAAI5c,KAAK8c,EAAMF,WAAa,KAC7Dze,KAAMjD,GAAWwL,MACjB8S,MAAOsD,EAAMzQ,OAAOmN,UAExB1O,OAAOkC,EAAM3G,QAAQC,IAAI,SAACC,GAC1B,MAAO,CACHC,SAAUD,EAAOhJ,KACjB8b,SAAUgD,GAAY3B,EAAOnU,EAAOhJ,KAAM,OAC1Ckf,SAAU,IAAIzc,KAAKuG,EAAOmW,QAC1BC,cAAepW,EAAOqW,UAAY,IAAI5c,KAAKuG,EAAOqW,WAAa,KAC/Dze,KAAMjD,GAAW4L,OACjB0S,MAAOjT,EAAO8F,OAAOmN,UAIvBuD,EAAuC/P,EAAMgQ,UAAUC,UAAU3W,IAAI,SAACxJ,GACxE,MAAO,CACHiS,YAAamO,SAASpgB,EAAKqgB,IAAK,IAChC3D,MAAO1c,EAAKsgB,SACZC,SAAUvgB,EAAKwgB,OACfC,WAAYtB,GAAqCnf,EAAK0gB,MACtD/K,UAAW,IAAIzS,KAAKlD,EAAK2gB,YACzBC,UAAW,IAAI1d,KAAKlD,EAAKgW,SACzBtQ,YAAa1F,EAAK0F,YAClBmb,QAAwB,OAAf7gB,EAAK8gB,MAAiB,KAAO,IAAI5d,KAAKlD,EAAK8gB,UAM5D,MAAO,CACH7X,KAAMgU,GAAiB/T,OACvB/D,GAAI+K,EAAM/K,GACV1E,KAAMyP,EAAMzP,KACZsF,UAAWmK,EAAMZ,QACjByR,SAA0B,SAAf7Q,EAAM8Q,KACjBC,QAAyB,UAAf/Q,EAAM8Q,MAAmC,UAAf9Q,EAAM8Q,KAC1CE,QAAyB,UAAfhR,EAAM8Q,KAChBG,SAAUC,GAAwBlR,EAAM8Q,MACxC5c,QAAS8L,EAAMX,OAAOC,SAAW,KACjC/K,QAASyL,EAAMX,OAAOG,SAAW,KACjC5K,kBAAmBoL,EAAMX,OAAOE,mBAAqB,GACrD/J,YAAawK,EAAMX,OAAO7J,YAC1BuZ,MAAOA,EACPoC,kBAAmBnR,EAAMoR,eACzB/X,QAASA,EACTwM,WAAY,IAAI7S,KAAKgN,EAAM8F,SAC3BL,UAAW,IAAIzS,KAAKgN,EAAM0F,YAC1BiK,cAAe3P,EAAM4P,UAAY,IAAI5c,KAAKgN,EAAM4P,WAAa,KAC7DG,WAAYA,EACZsB,KAAM,GACNC,YAAatR,EAAMuR,SACnBC,eAAgBxR,EAAMyR,SAASxB,WAAa,EAC5CyB,SAAU1R,EAAMyR,SAASE,eAAiB,EAC1CC,qBAAsB5R,EAAMX,QAASW,EAAMX,OAAOe,cAAgBJ,EAAMX,OAAOe,cAAcvP,MAAM,KAAY,IAIhH,SAASghB,GAA2B7R,EAA2CwP,GAClF,MAAO,CACHzW,KAAMgU,GAAiB6B,qBACvB3Z,GAAI+K,EAAM/K,GACVY,UAAWmK,EAAMZ,QAEjB6R,SAAUC,GAAwBlR,EAAM8Q,OAqBzC,SAASgB,GAAYC,EAAgCC,GACxD,IAAMC,EAAgBD,EAAY1Y,IAAI,SAAC4Y,GACnC,OAAO,IAAIC,OAAOD,EAAM,OAa5B,OAXqBH,EAAK9X,OAAO,SAAC0U,GAC9B,OAA2B,IAAvBqD,EAAYvS,QAGTwS,EAAcG,MAAM,SAACC,GACxB,OAAOA,EAAOC,KAAK3D,EAAIpe,OACnB8hB,EAAOC,KAAK3D,EAAI/Z,mBAAqB,KACrCyd,EAAOC,KAAK3D,EAAII,MAAMvV,WACtB6Y,EAAOC,KAAK3D,EAAII,MAAM1C,cAMtC,SAASkG,GAASC,GACd,IAAMC,EAAID,EAAE3Q,UACZ,OAAO+I,KAAK8H,MAAMD,EAAC,OAGvB,SAASE,GAAoBC,EAAmBC,EAAmB9V,EAAsB+V,GACrF,OAAQF,GACJ,IAAK,UACD,OAAOC,GAAaN,GAASxV,EAAE0I,WAAa8M,GAASO,EAAErN,YAC3D,IAAK,WACL,IAAK,UACD,OAAOoN,GAAaN,GAASxV,EAAE8I,YAAc0M,GAASO,EAAEjN,aAC5D,IAAK,OACD,OAAOgN,EAAY9V,EAAExM,KAAKwiB,cAAcD,EAAEviB,MAC9C,IAAK,QAGD,OAAOsiB,EAAY9V,EAAEgS,MAAMvV,SAASuZ,cAAcD,EAAE/D,MAAMvV,UAC9D,IAAK,iBACD,OAAOqZ,GAAa9V,EAAEyU,eAAiBsB,EAAEtB,gBAC7C,IAAK,cACD,OAAOqB,GAAa9V,EAAEuU,YAAcwB,EAAExB,aAC1C,QAEI,OADA3f,QAAQC,KAAK,6BAA+BghB,GACrC,GAInB,SAASI,GAAUC,EAAyCL,EAAmBnR,GAC3E,IAAMoR,EAAYpR,IAAkBhT,EAAcykB,UAAY,GAAK,EACnE,OAAOD,EAAcnI,QAAQqI,KAAK,SAACpW,EAAG+V,GAClC,OAAOH,GAAoBC,EAAWC,EAAW9V,EAAG+V,IAAMH,GAAoB,OAAQ,EAAG5V,EAAG+V,KAIpG,SAAS5B,GAAwBJ,GAC7B,OAAQA,GACJ,IAAK,OAAQ,OAAOjE,GAA2BtZ,KAC/C,IAAK,SAAU,OAAOsZ,GAA2B/S,OACjD,IAAK,QAAS,OAAO+S,GAA2BnT,MAChD,IAAK,QAAS,OAAOmT,GAA2BmC,MAChD,QAAS,MAAM,IAAIxe,MAAM,iBAAmBsgB,IAUpD,SAASsC,GAAYH,EAArBxjB,EAAoG+J,GAAwD,IAA5F6Z,EAA4F5jB,EAA5F4jB,SAAUC,EAAkF7jB,EAAlF6jB,MAAOC,EAA2E9jB,EAA3E8jB,QAiD7E,OAAON,EAAchZ,OAAO,SAAC0U,GACzB,OAjDJ,SAAuBA,GACnB,OAAQ0E,GACJ,IAAK,SACD,MAAO,CACHxG,GAA2B/S,OAC3B+S,GAA2BnT,MAC3BmT,GAA2BmC,OAC7B3O,SAASsO,EAAIsC,UACnB,IAAK,YACD,OAAQ,CACJpE,GAA2B/S,OAC3B+S,GAA2BnT,MAC3BmT,GAA2BmC,OAC7B3O,SAASsO,EAAIsC,UACnB,IAAK,MACL,QACI,OAAO,GAiCRuC,CAAc7E,IA9BzB,SAAmBA,GACf,OAAqB,IAAjB2E,EAAM7T,QAGH6T,EAAMG,KAAK,SAAC3C,GACf,OAAQA,GACJ,IAAK,SACD,OAAQnC,EAAIsC,WAAapE,GAA2B/S,OACxD,IAAK,QACD,OAAQ6U,EAAIsC,WAAapE,GAA2BnT,MACxD,IAAK,QACD,OAAQiV,EAAIsC,WAAapE,GAA2BmC,MACxD,QACI,OAAO,KAiBU0E,CAAU/E,IAb3C,SAAsBA,GAClB,OAAQ4E,GACJ,IAAK,SACD,OAAQ5E,EAAI9Y,UAChB,IAAK,UACD,OAAO8Y,EAAI9Y,UACf,IAAK,MACD,OAAO,EACX,QACI,OAAO,GAIgC8d,CAAahF,KAKpE,SAASiF,GAA4BvZ,GACjC,OAAQA,GACJ,IAAK,OACD,OAAO,SAAC0C,EAAsB+V,GAC1B,OAAO/V,EAAEyP,MAAMuG,cAAcD,EAAEtG,QAEvC,IAAK,UACD,OAAO,SAACzP,EAAsB+V,GAC1B,OAAOA,EAAEpC,UAAU7O,UAAY9E,EAAE2T,UAAU7O,WAEnD,QACA,IAAK,QACD,OAAO,SAAC9E,EAAsB+V,GAC1B,OAAkB,OAAd/V,EAAE4T,QACgB,OAAdmC,EAAEnC,QACK,EAGA,EAGO,OAAdmC,EAAEnC,SACM,EAEDmC,EAAEnC,QAAQ9O,UAAY9E,EAAE4T,QAAQ9O,YA0CxD,SAASgS,GAAgB9D,EAAsC1O,GAGlE,OArCG,SAA4B0O,EAAsC1V,GACrE,OAAKA,EAGE0V,EAAWjF,QAAQqI,KAAK,SAACpW,EAAsB+V,GAClD,IAAMgB,EAAKF,GAA4BvZ,EAA5BuZ,CAAoC7W,EAAG+V,GAClD,OAAW,IAAPgB,GACe,SAAXzZ,EACOuZ,GAA4B,OAA5BA,CAAoC7W,EAAG+V,GAG/CgB,IATA/D,EAkCIgE,CArBZ,SAA8BhE,EAAsCtV,GACvE,IAAMuZ,EAASvZ,EAAS5J,MAAM,OAAOyI,IAAI,SAACwC,GACtC,OAAO,IAAIqW,OAAOrW,EAAO,OAE7B,OAAsB,IAAlBkY,EAAOvU,OACAsQ,EAEJA,EAAWjF,QAAQ7Q,OAAO,SAACga,GAC9B,OAAOD,EAAO5B,MAAM,SAACtW,GACjB,OAAQA,EAAMwW,KAAK2B,EAAUzH,WAWpB0H,CAAqBnE,EAAY1O,EAAM5G,UACZ4G,EAAMhH,QAMtD,SAAS8Z,GAAyB9Z,GAC9B,OAAQA,GACJ,IAAK,OAGD,OAAO,SAAC0C,EAAW+V,GACf,OAAO/V,EAAEvD,SAASuZ,cAAcD,EAAEtZ,WAE1C,QACA,IAAK,QACD,OAAO,SAACuD,EAAW+V,GACf,OAAOA,EAAErD,SAAS5N,UAAY9E,EAAE0S,SAAS5N,YAwClD,SAASuS,GAAa/a,EAAwBgI,GAGjD,OAtCG,SAA0BhI,EAAwBgB,GACrD,OAAKA,EAGEhB,EAAQyR,QAAQqI,KAAK,SAACpW,EAAW+V,GACpC,IAAMgB,EAAKK,GAAyB9Z,EAAzB8Z,CAAiCpX,EAAG+V,GAC/C,OAAW,IAAPgB,GACe,SAAXzZ,EACO8Z,GAAyB,OAAzBA,CAAiCpX,EAAG+V,GAG5CgB,IATAza,EAmCIgb,CAtBZ,SAA4Bhb,EAAwBoB,GACvD,IAAMuZ,EAASvZ,EAAS5J,MAAM,OAAOyI,IAAI,SAACwC,GACtC,OAAO,IAAIqW,OAAOrW,EAAO,OAE7B,OAAsB,IAAlBkY,EAAOvU,OACApG,EAEJA,EAAQyR,QAAQ7Q,OAAO,SAACV,GAC3B,OAAOya,EAAO5B,MAAM,SAACtW,GACjB,OAAQA,EAAMwW,KAAK/Y,EAAOC,WACtBsC,EAAMwW,KAAK/Y,EAAOiT,OAAS,QAWtB8H,CAAmBjb,EAASgI,EAAM5G,UACT4G,EAAMhH,QC/oB/BwT,GACVI,eAAiB,uBD+BhBpB,kNAgDA3e,2FAkBA4e,6HAmDAC,oGAgDA1e,qFAgeL,IAAMkmB,GAAb,WAOI,SAAAA,EAAYnT,GAA4BrR,OAAAC,EAAA,EAAAD,CAAAE,KAAAskB,GAAAtkB,KALxCmR,YAKuC,EAAAnR,KAJvCiW,kBAIuC,EAAAjW,KAHvCukB,iBAGuC,EACnCvkB,KAAKmR,OAASA,EACdnR,KAAKiW,aAAe,IAAIE,GAAuB,CAC3CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAEvB7L,KAAKukB,YAAc,IAAIC,GAAoB,CACvCvH,sBAAuBjd,KAAKmR,OAAO8L,sBACnCpR,MAAO7L,KAAKmR,OAAOtF,QAf/B,OAAA/L,OAAAiM,EAAA,EAAAjM,CAAAwkB,EAAA,EAAAtY,IAAA,SAAAtI,MAAA,eAAA+gB,EAAA3kB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAoBiBhI,GApBjB,IAAA+K,EAAA2U,EAAA7I,EAAA4B,EAAA,OAAA5Q,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAqB4BpN,KAAKiW,aAAa0O,aAAa3f,GArB3D,UAyB2B,UAJb+K,EArBd7C,EAAAG,MAyBkBwT,OAAmB9Q,EAAMZ,QAzB3C,CAAAjC,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SA0BmBqU,GAA2B7R,EAA6C/P,KAAKmR,OAAO5H,WA1BvG,cA8BkBsS,EAA2B,IACvBxL,MAHJqU,EAAI3U,GAGO+O,MAAMxe,MACvBokB,EAAE9E,OAAOjJ,QAAQ,SAACkJ,GACdhE,EAAUxL,KAAKwP,EAAMvf,QAEzBokB,EAAEtb,QAAQuN,QAAQ,SAACrN,GACfuS,EAAUxL,KAAK/G,EAAOhJ,QApCtC4M,EAAAE,KAAA,GAuCgCpN,KAAKukB,YAAYK,SAAS/I,GAvC1D,eAuCkB4B,EAvClBvQ,EAAAG,KAAAH,EAAAK,OAAA,SAyCmB+R,GAAoBoF,EAAG1kB,KAAKmR,OAAO5H,SAAUkU,IAzChE,yBAAAvQ,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAA8V,EAAAhX,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,eAAAmhB,EAAA/kB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EA6CwBwB,GA7CxB,IAAA8L,EAAA,OAAAhP,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cA+CcyO,EAA2B,IACvBxL,KAAKN,EAAM+O,MAAMxe,MAC3ByP,EAAM6P,OAAOjJ,QAAQ,SAACkJ,GAClBhE,EAAUxL,KAAKwP,EAAMvf,QAEzByP,EAAM3G,QAAQuN,QAAQ,SAACrN,GACnBuS,EAAUxL,KAAK/G,EAAOhJ,QArDlCmO,EAAArB,KAAA,EAwDqBpN,KAAKukB,YAAYK,SAAS/I,GAxD/C,cAAApN,EAAAlB,OAAA,SAAAkB,EAAApB,MAAA,wBAAAoB,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA4O,GAAA,OAAAiW,EAAApX,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,kBAAAtI,MAAA,eAAAohB,EAAAhlB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EA2D0B9J,GA3D1B,IAAA+K,EAAA0N,EAAA,OAAA5Q,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EA4D4BpN,KAAKiW,aAAa0O,aAAa3f,GA5D3D,UA6D2B,UADb+K,EA5DdhB,EAAA1B,MA6DkBwT,OAAmB9Q,EAAMZ,QA7D3C,CAAAJ,EAAA3B,KAAA,cA8DkB,IAAI7M,MAAM,6BA9D5B,cAAAwO,EAAA3B,KAAA,EAiE4BpN,KAAK+kB,cAA+BhV,GAjEhE,cAiEc0N,EAjEd1O,EAAA1B,KAAA0B,EAAAxB,OAAA,SAmEe+R,GAAoBvP,EAA0B/P,KAAKmR,OAAO5H,SAAUkU,IAnEnF,wBAAA1O,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAAgP,GAAA,OAAA8V,EAAArX,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,UAAAtI,MAAA,eAAAshB,EAAAllB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6C,EAsEkBqV,GAtElB,IAAAxlB,EAAAO,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA3C,OAAA,SAuEemL,QAAQC,IAAIsM,EAAI5b,IAAI,SAACrE,GACxB,OAAOvF,EAAKylB,OAAOlgB,OAxE/B,wBAAAkL,EAAA1C,SAAAoC,MAAA,gBAAAU,GAAA,OAAA0U,EAAAvX,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,aAAAtI,MAAA,eAAAyhB,EAAArlB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA0D,IAAA,IAAAqR,EAAAsD,EAAA,OAAAvY,GAAAC,EAAAG,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAAvD,KAAA,EA6E2BpN,KAAKqlB,cA7EhC,cA6EcvD,EA7EdnR,EAAAtD,KA+Ec+X,EAAUtD,EACX9X,OAAO,SAAC0U,GAGL,OAAQA,EAAIsC,WAAapE,GAA2BtZ,OAnFpEqN,EAAApD,OAAA,SAsFe6X,GAtFf,wBAAAzU,EAAAnD,SAAAiD,EAAAzQ,SAAA,yBAAAmlB,EAAA1X,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,+BAAAtI,MAAA,SAyFiCqM,EAA6B0N,GACtD,MAAO,CACHzY,GAAI+K,EAAM/K,GACV1E,KAAMyP,EAAMzP,KACZ2D,QAAS8L,EAAMX,OAAOC,SAAW,KACjCzJ,UAAWmK,EAAMZ,QACjB7K,QAASyL,EAAMX,OAAOG,SAAW,KACjC5K,kBAAmBoL,EAAMX,OAAOE,mBAAqB,KACrDwP,MAAO,CACHvV,SAAUwG,EAAM+O,MAChB1C,SAAUgD,GAAY3B,EAAO1N,EAAM+O,MAAO,OAC1CY,cAAe,KACfxe,KAAMjD,GAAW8gB,MACjBS,SAAU,IAAIzc,KAAKgN,EAAM0F,YACzB8G,MAAO,SAEXyE,SAAUC,GAAwBlR,EAAM8Q,MACxCD,SAA0B,SAAf7Q,EAAM8Q,KACjBC,QAAyB,UAAf/Q,EAAM8Q,MAAmC,UAAf9Q,EAAM8Q,KAC1CE,QAAyB,UAAfhR,EAAM8Q,KAChBrL,UAAW,IAAIzS,KAAKgN,EAAM0F,YAC1BG,WAAY,IAAI7S,KAAKgN,EAAM8F,SAC3B6J,cAAe3P,EAAM4P,UAAY,IAAI5c,KAAKgN,EAAM4P,WAAa,KAC7D0B,YAAatR,EAAMuR,UAAY,EAC/BC,eAAgBxR,EAAMyR,SAASxB,WAAa,EAC5C2B,qBAAsB5R,EAAMX,QAASW,EAAMX,OAAOe,cAAgBJ,EAAMX,OAAOe,cAAcvP,MAAM,KAAY,MAlH3H,CAAAoL,IAAA,cAAAtI,MAAA,eAAA4hB,EAAAxlB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAgE,IAAA,IAAAwU,EAAAC,EAAA3J,EAAA4B,EAAA9R,EAAA3L,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,OAuHYmY,EAAyC,GAvHrD,cAAAtU,EAAA7D,KAAA,EA0H2BpN,KAAKiW,aAAawP,aA1H7C,OA0HYD,EA1HZvU,EAAA5D,KA2HYkY,EAAYA,EAAU1X,OAAO2X,GA3HzC,ULrqB2C,MKiyB1BA,EAAOhW,OA5HxB,CAAAyB,EAAA7D,KAAA,sBA8HcyO,EAAyB,IAAI6J,IACnCH,EAAU5O,QAAQ,SAAC+N,GACf7I,EAAU8J,IAAIjB,EAAE5F,SAhI5B7N,EAAA7D,KAAA,GAoI4BpN,KAAKukB,YAAYK,SAASgB,MAAMC,KAAKhK,EAAUiK,WApI3E,eAoIcrI,EApIdxM,EAAA5D,KAAA4D,EAAA1D,OAAA,SAsIegY,EAAUlc,IAAI,SAAC0G,GAClB,OAAOpE,EAAKoa,6BAA6BhW,EAAO0N,MAvI5D,yBAAAxM,EAAAzD,SAAAuD,EAAA/Q,SAAA,yBAAAslB,EAAA7X,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,YAAAtI,MAAA,eAAAsiB,EAAAlmB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAkF,EA2IoBb,GA3IpB,IAAA0Q,EAAAmE,EAAAC,EAAAC,EAAA,OAAAtZ,GAAAC,EAAAG,KAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,cAAAgF,EAAAhF,KAAA,EA4I2BpN,KAAKqlB,cA5IhC,cA4IcvD,EA5Id1P,EAAA/E,KA8Ic4Y,EAAW9C,GAAYrB,EAAM1Q,EAAMpH,OAAQoH,EAAM7H,UACjD2c,EAAWrE,GAAYoE,EAAU7U,EAAM2Q,aACvCoE,EAASpD,GAAUmD,EAAU9U,EAAMuR,UAAWvR,EAAMI,eAhJlEY,EAAA7E,OAAA,SAkJe,CACHyV,cAAemD,EACfC,MAAOtE,EAAKtS,SApJxB,wBAAA4C,EAAA5E,SAAAyE,EAAAjS,SAAA,gBAAAuQ,GAAA,OAAAyV,EAAAvY,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,UAAAtI,MAAA,eAAA2iB,EAAAvmB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAoG,EAwJkB5J,GAxJlB,IAAAuY,EAAAsD,EAAA,OAAAvY,GAAAC,EAAAG,KAAA,SAAAoG,GAAA,cAAAA,EAAAlG,KAAAkG,EAAAjG,MAAA,cAAAiG,EAAAjG,KAAA,EAyJ2BpN,KAAKqlB,cAzJhC,cAyJcvD,EAzJdzO,EAAAhG,KA0Jc+X,EAAUtD,EAAK9X,OAAO,SAAC0U,GACzB,OAAQA,EAAIsC,WAAapE,GAA2BtZ,OA3JhE+P,EAAA9F,OAAA,SA8Je,CACHyV,cAAeoC,EACfgB,MAAOhB,EAAQ5V,SAhK3B,wBAAA6D,EAAA7F,SAAA2F,EAAAnT,SAAA,gBAAA4Q,GAAA,OAAAyV,EAAA5Y,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,kBAAAtI,MAAA,eAAA4iB,EAAAxmB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAyG,EAoK0BxC,GApK1B,IAAAiF,EAAAsQ,EAAA,OAAA1Z,GAAAC,EAAAG,KAAA,SAAAiH,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA9G,MAAA,cAqKc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAvK/BqI,EAAA9G,KAAA,EA0Kc6I,EAAauQ,mCAAmC,CAAExV,cA1KhE,cAAAkD,EAAA9G,KAAA,EA2K0B6I,EAAaM,WAAWvF,GA3KlD,cA2KcuV,EA3KdrS,EAAA7G,KAAA6G,EAAA3G,OAAA,SA4KekZ,GAAsCF,IA5KrD,wBAAArS,EAAA1G,SAAAgG,EAAAxT,SAAA,gBAAA6Q,GAAA,OAAAyV,EAAA7Y,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,SAAAtI,MAAA,eAAAgjB,EAAA5mB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6K,EA+KiB+O,EAA8Bpd,GA/K/C,IAAA0M,EAAAlG,EAAA0N,EAAA,OAAA5Q,GAAAC,EAAAG,KAAA,SAAA6K,GAAA,cAAAA,EAAA3K,KAAA2K,EAAA1K,MAAA,UAgLc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAIlB8a,EAAO3hB,GAAGpC,gBAAgB1B,OAASnD,EAAoB8E,IACvD8jB,EAAOrmB,KAAKsC,gBAAgB1B,OAASnD,EAAoB8E,IACzD8jB,EAAO1iB,QAAQrB,gBAAgB1B,OAASnD,EAAoB8E,IAC5D8jB,EAAOphB,YAAY3C,gBAAgB1B,OAASnD,EAAoB8E,IAChE8jB,EAAO/gB,UAAUhD,gBAAgB1B,OAASnD,EAAoB8E,GA1L3E,CAAAiV,EAAA1K,KAAA,eAAA0K,EAAAvK,OAAA,SA4LmBmL,QAAQkO,OAAO,IAAIrmB,MAAM,oCA5L5C,cAAAuX,EAAA1K,KAAA,EA+L4B6I,EAAa4Q,YAAY,CACzC7hB,GAAI2hB,EAAO3hB,GAAGtB,MACdpD,KAAMqmB,EAAOrmB,KAAKoD,MAClBO,QAAS0iB,EAAO1iB,QAAQP,MACxBY,QAASqiB,EAAOriB,QAAQZ,MACxBiB,kBAAmBgiB,EAAOhiB,kBAAkBjB,MAC5C6B,YAAaohB,EAAOphB,YAAY7B,MAChCkC,UAAW+gB,EAAO/gB,UAAUlC,QAtMxC,cA+LcqM,EA/Ld+H,EAAAzK,KAAAyK,EAAA1K,KAAA,EAyM4BpN,KAAK+kB,cAAchV,GAzM/C,cAyMc0N,EAzMd3F,EAAAzK,KAAAyK,EAAAvK,OAAA,SA2Me+R,GAAoBvP,EAAOxG,EAAUkU,IA3MpD,yBAAA3F,EAAAtK,SAAAoK,EAAA5X,SAAA,gBAAAkR,EAAAoB,GAAA,OAAAoU,EAAAjZ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,YAAAtI,MAAA,eAAAojB,EAAAhnB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAiL,EA+MoBhT,GA/MpB,IAAAiR,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAgL,GAAA,cAAAA,EAAA9K,KAAA8K,EAAA7K,MAAA,cAgNc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAlN/BoM,EAAA1K,OAAA,SAoNe0I,EAAa8Q,YAAY/hB,GAC3BsH,KAAK,SAAAmG,GACF,OADkBA,EAAb/F,UArNrB,wBAAAuL,EAAAzK,SAAAwK,EAAAhY,SAAA,gBAAAuS,GAAA,OAAAuU,EAAArZ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,YAAAtI,MAAA,eAAAsjB,EAAAlnB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAoL,EA0NoBnT,EAAYiiB,GA1NhC,IAAAhR,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAoL,GAAA,cAAAA,EAAAlL,KAAAkL,EAAAjL,MAAA,cA4Nc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA9N/BwM,EAAA9K,OAAA,SAoOe0I,EAAaiR,YAAYliB,EAAI,CAChC1E,KAAM2mB,EAAU3mB,KAChB2D,QAASgjB,EAAUhjB,QACnBK,QAAS2iB,EAAU3iB,QACnBK,kBAAmBsiB,EAAUtiB,kBAC7BY,YAAa0hB,EAAU1hB,YACvB4J,QAAS8X,EAAUrhB,aA1O/B,wBAAAyS,EAAA7K,SAAA2K,EAAAnY,SAAA,gBAAAwS,EAAAc,GAAA,OAAA0T,EAAAvZ,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,SA8OkBsB,GACV,OAAO4Y,GAAWuJ,cAAcniB,KA/OxC,CAAAgH,IAAA,kBAAAtI,MAAA,SAkPoBpD,GACZ,OAAOsd,GAAWwJ,gBAAgB9mB,KAnP1C,CAAA0L,IAAA,yBAAAtI,MAAA,SAsP2B6B,GACnB,OAAOqY,GAAWyJ,uBAAuB9hB,KAvPjD,CAAAyG,IAAA,yBAAAtI,MAAA,eAAA4jB,EAAAxnB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwL,EA0PiCpD,EAAgCrD,GA1PjE,IAAAmE,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAwL,GAAA,cAAAA,EAAAtL,KAAAsL,EAAArL,MAAA,cA2Pc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA7P/B4M,EAAAlL,OAAA,SAgQe0I,EAAasR,eAChBpS,EACA,YACAxD,OAAOG,KAnQnB,wBAAA2G,EAAAjL,SAAA+K,EAAAvY,SAAA,gBAAAsU,EAAAsF,GAAA,OAAA0N,EAAA7Z,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uBAAAtI,MAAA,eAAA8jB,EAAA1nB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+L,EAuQ+BjJ,EAAiBsC,GAvQhD,IAAA8D,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAA8L,GAAA,cAAAA,EAAA5L,KAAA4L,EAAA3L,MAAA,cAwQc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA1Q/BkN,EAAA3L,KAAA,EA6Qc6I,EAAawR,oBAAoB5X,EAAS,YAAasC,GA7QrE,wBAAA4G,EAAAvL,SAAAsL,EAAA9Y,SAAA,gBAAAga,EAAAK,GAAA,OAAAmN,EAAA/Z,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,oBAAAtI,MAAA,eAAAgkB,EAAA5nB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAmM,EAgR4BlU,GAhR5B,IAAAiR,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAAkM,GAAA,cAAAA,EAAAhM,KAAAgM,EAAA/L,MAAA,cAiRc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAnR/BsN,EAAA/L,KAAA,EAsR8B6I,EAAa0R,kBAAkB,CACjD9X,QAAS7K,IAvRrB,cAsRcwP,EAtRd2E,EAAA9L,KAAA8L,EAAA5L,OAAA,SAyRekZ,GAAsCjS,IAzRrD,wBAAA2E,EAAA3L,SAAA0L,EAAAlZ,SAAA,gBAAAsa,GAAA,OAAAoN,EAAAja,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,+BAAAtI,MAAA,eAAAkkB,EAAA9nB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAuM,EA4RuCzJ,EAAiBiC,GA5RxD,IAAAmE,EAAAzB,EAAA,OAAA3H,GAAAC,EAAAG,KAAA,SAAAsM,GAAA,cAAAA,EAAApM,KAAAoM,EAAAnM,MAAA,cA6Rc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA/R/B0N,EAAAnM,KAAA,EAkS8B6I,EAAa4R,sBAAsB,CACrDhY,QAASA,EACTiC,YAAaA,IApSzB,WAsSiC,KAJnB0C,EAlSd+E,EAAAlM,MAsSoB0E,SAtSpB,CAAAwH,EAAAnM,KAAA,eAAAmM,EAAAhM,OAAA,UAuSmB,GAvSnB,cAAAgM,EAAAhM,OAAA,SAySmBkZ,GAAsCjS,IAzSzD,wBAAA+E,EAAA/L,SAAA8L,EAAAtZ,SAAA,gBAAA8nB,EAAAC,GAAA,OAAAH,EAAAna,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,eAAAskB,EAAAloB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA2M,EA6SwB7J,EAAiBvG,GA7SzC,IAAA2M,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAA0M,GAAA,cAAAA,EAAAxM,KAAAwM,EAAAvM,MAAA,cA8Sc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAhT/B8N,EAAApM,OAAA,SAmTe0I,EAAagS,cAAc,CAC9BpY,UACAvG,YArTZ,wBAAAqQ,EAAAnM,SAAAkM,EAAA1Z,SAAA,gBAAAkoB,EAAAC,GAAA,OAAAH,EAAAva,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,gBAAAtI,MAAA,eAAA0kB,EAAAtoB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+M,EAyTwBjK,EAAiBvG,GAzTzC,IAAA2M,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAA8M,GAAA,cAAAA,EAAA5M,KAAA4M,EAAA3M,MAAA,cA0Tc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA5T/BkO,EAAAxM,OAAA,SA+Te0I,EAAaoS,cAAc,CAC9BxY,UACAvG,YAjUZ,wBAAAyQ,EAAAvM,SAAAsM,EAAA9Z,SAAA,gBAAAsoB,EAAAC,GAAA,OAAAH,EAAA3a,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,eAAAtI,MAAA,eAAA8kB,EAAA1oB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAmN,EAoUuBrK,EAAiBvG,GApUxC,IAAA2M,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAkN,GAAA,cAAAA,EAAAhN,KAAAgN,EAAA/M,MAAA,cAqUc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAvU/BsO,EAAA5M,OAAA,SA0Ue0I,EAAawS,aAAa,CAC7B5Y,UACAvG,YA5UZ,wBAAA6Q,EAAA3M,SAAA0M,EAAAla,SAAA,gBAAA0oB,EAAAC,GAAA,OAAAH,EAAA/a,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,eAAAtI,MAAA,eAAAklB,EAAA9oB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA8b,EAgVuBhZ,EAAiBrG,EAAwByG,GAhVhE,IAAAgG,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAA6b,GAAA,cAAAA,EAAA3b,KAAA2b,EAAA1b,MAAA,cAiVc6I,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAnV/Bid,EAAAvb,OAAA,SAsVe0I,EAAa8S,aAAa,CAAElZ,UAASrG,iBAAgByG,YAtVpE,wBAAA6Y,EAAAtb,SAAAqb,EAAA7oB,SAAA,gBAAAgpB,EAAAC,EAAAC,GAAA,OAAAN,EAAAnb,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,WAAAtI,MAAA,eAAAylB,EAAArpB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAqc,EAAA1W,GAAA,IAAAyC,EAAAc,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAoc,GAAA,cAAAA,EAAAlc,KAAAkc,EAAAjc,MAAA,cAyVqB+H,EAzVrBzC,EAyVqByC,eACPc,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA5V/Bwd,EAAA9b,OAAA,SA8Ve0I,EAAaqT,WAAW,CAAEzZ,QAASsF,KA9VlD,wBAAAkU,EAAA7b,SAAA4b,EAAAppB,SAAA,gBAAAupB,GAAA,OAAAJ,EAAA1b,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,wBAAAtI,MAAA,eAAA8lB,EAAA1pB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA0c,EAAA9W,GAAA,IAAA+W,EAAAzT,EAAA0T,EAAAld,EAAAmd,EAAAC,EAAAC,EAAAC,EAAAC,EAAAlX,EAAAD,EAAAhD,EAAAvC,EAAA2G,EAAA,OAAApH,GAAAC,EAAAG,KAAA,SAAAgd,GAAA,cAAAA,EAAA9c,KAAA8c,EAAA7c,MAAA,cAiWkCsc,EAjWlC/W,EAiWkC+W,gBACpBzT,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QApW/Boe,EAAA7c,KAAA,EAsWmC6I,EAAaiU,gBAAgB,CAAExW,SAAUgW,IAtW5E,OAwWQ,IAFMC,EAtWdM,EAAA5c,KAuWcZ,EAAS,IAAIvB,IAvW3B0e,GAAA,EAAAC,GAAA,EAAAC,OAAAK,EAAAF,EAAA9c,KAAA,EAwWQ4c,EAAgCJ,EAAaxV,UAA7CiW,OAAAC,cAAAT,GAAAI,EAAAD,EAAA3c,QAAAkd,MAAAV,GAAA,EAAwD9W,EAAAkX,EAAAtmB,MAAAmP,EAAA/S,OAAAsU,GAAA,EAAAtU,CAAAgT,EAAA,GAA5CjD,EAA4CgD,EAAA,GAAnCvF,EAAmCuF,EAAA,GAC9CoB,EAA+BsW,GAAsBjd,GAC3Db,EAAO4H,IAAoBxE,EAASoE,GA1WhDgW,EAAA7c,KAAA,iBAAA6c,EAAA9c,KAAA,GAAA8c,EAAAvb,GAAAub,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAAvb,GAAA,QAAAub,EAAA9c,KAAA,GAAA8c,EAAA9c,KAAA,GAAAyc,GAAA,MAAAG,EAAAS,QAAAT,EAAAS,SAAA,WAAAP,EAAA9c,KAAA,IAAA0c,EAAA,CAAAI,EAAA7c,KAAA,eAAA0c,EAAA,eAAAG,EAAAQ,OAAA,mBAAAR,EAAAQ,OAAA,mBAAAR,EAAA1c,OAAA,SA4Wed,GA5Wf,yBAAAwd,EAAAzc,SAAAic,EAAAzpB,KAAA,+CAAA0qB,GAAA,OAAAlB,EAAA/b,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,uBAAAtI,MAAA,eAAAinB,EAAA7qB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA6d,EAAA7X,GAAA,IAAAoC,EAAAc,EAAA0T,EAAAkB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7X,EAAAH,EAAA3F,EAAA,OAAAT,GAAAC,EAAAG,KAAA,SAAAie,GAAA,cAAAA,EAAA/d,KAAA+d,EAAA9d,MAAA,cA+WiC+H,EA/WjCpC,EA+WiCoC,eACnBc,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAlX/Bqf,EAAA9d,KAAA,EAoXmC6I,EAAaiU,gBAAgB,CAAExW,SAAU,CAACyB,KApX7E,OAoXcwU,EApXduB,EAAA7d,KAAAwd,GAAA,EAAAC,GAAA,EAAAC,OAAAZ,EAAAe,EAAA/d,KAAA,EAAA6d,EAqXwCrB,EAAaxV,UArXrDiW,OAAAC,YAAA,WAAAQ,GAAAI,EAAAD,EAAA5d,QAAAkd,KAAA,CAAAY,EAAA9d,KAAA,gBAAAgG,EAAA6X,EAAAvnB,MAAAuP,EAAAnT,OAAAsU,GAAA,EAAAtU,CAAAsT,EAAA,GAAAH,EAAA,GAqX6B3F,EArX7B2F,EAAA,GAAAiY,EAAA3d,OAAA,SAsXmBgd,GAAsBjd,IAtXzC,QAAAud,GAAA,EAAAK,EAAA9d,KAAA,iBAAA8d,EAAA9d,KAAA,iBAAA8d,EAAA/d,KAAA,GAAA+d,EAAAxc,GAAAwc,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAAxc,GAAA,QAAAwc,EAAA/d,KAAA,GAAA+d,EAAA/d,KAAA,GAAA0d,GAAA,MAAAG,EAAAR,QAAAQ,EAAAR,SAAA,WAAAU,EAAA/d,KAAA,IAAA2d,EAAA,CAAAI,EAAA9d,KAAA,eAAA2d,EAAA,eAAAG,EAAAT,OAAA,mBAAAS,EAAAT,OAAA,kBAwXc,IAAIlqB,MAAM,qCAxXxB,yBAAA2qB,EAAA1d,SAAAod,EAAA5qB,KAAA,+CAAAmrB,GAAA,OAAAR,EAAAld,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,yBAAAtI,MAAA,eAAA0nB,EAAAtrB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAse,EAAA5X,GAAA,IAAA0B,EAAAmW,EAAArV,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAAse,GAAA,cAAAA,EAAApe,KAAAoe,EAAAne,MAAA,cA2XmC+H,EA3XnC1B,EA2XmC0B,eAAgBmW,EA3XnD7X,EA2XmD6X,sBACrCrV,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QA9X/B0f,EAAAne,KAAA,EAgYqB6I,EAAauV,gBAAgBrW,EAAgBmW,GAhYlE,cAAAC,EAAAhe,OAAA,SAAAge,EAAAle,MAAA,wBAAAke,EAAA/d,SAAA6d,EAAArrB,SAAA,gBAAAyrB,GAAA,OAAAL,EAAA3d,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,4BAAAtI,MAAA,eAAAgoB,EAAA5rB,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA4e,EAAAC,GAAA,IAAAzW,EAAAmW,EAAArV,EAAA,OAAApJ,GAAAC,EAAAG,KAAA,SAAA4e,GAAA,cAAAA,EAAA1e,KAAA0e,EAAAze,MAAA,cAmYsC+H,EAnYtCyW,EAmYsCzW,eAAgBmW,EAnYtDM,EAmYsDN,sBACxCrV,EAAe,IAAIE,GAAuB,CAC5CrK,IAAK9L,KAAKmR,OAAOiF,iBACjBvK,MAAO7L,KAAKmR,OAAOtF,QAtY/BggB,EAAAze,KAAA,EAwYqB6I,EAAa6V,mBAAmB3W,EAAgBmW,GAxYrE,cAAAO,EAAAte,OAAA,SAAAse,EAAAxe,MAAA,wBAAAwe,EAAAre,SAAAme,EAAA3rB,SAAA,gBAAA+rB,GAAA,OAAAL,EAAAje,MAAAzN,KAAA0N,YAAA,MAAA4W,EAAA,GA4YA,SAASiG,GAAsBjd,GAC3B,OAAQA,EAAO0e,KACX,IAAK,OAAQ,OAAO5tB,GAAckF,KAClC,IAAK,MAAO,OAAOlF,GAAc6tB,IACjC,IAAK,MAAO,OAAO7tB,GAAc4E,IACjC,QAAS,MAAM,IAAIzC,MAAM,gCAAkC+M,4BEziC5D,SAAS4e,GAAT1sB,GAOL,IANIE,EAMJF,EANIE,KAAMC,EAMVH,EANUG,QAASC,EAMnBJ,EANmBI,OAAQusB,EAM3B3sB,EAN2B2sB,QAAS/rB,EAMpCZ,EANoCY,MAAOP,EAM3CL,EAN2CK,KAOzC,MAAO,CACHH,OAAMC,UAASC,SACfoF,GAAIonB,OACJC,GAAI,IAAItpB,KACRopB,UAAS/rB,QAAOP,QCwNjB,SAASysB,GAAWxK,EAA8C1Q,GACrE,IAAMmb,EAAYnb,EAAMxQ,MAAM,OAAOyI,IAAI,SAAC4Y,GACtC,OAAO,IAAIC,OAAOD,EAAM,OAG5B,OAAOH,EAAK9X,OAAO,SAAA2I,GAAsB,IAAnBlM,EAAmBkM,EAAnBlM,aAClB,OAAO8lB,EAAUpK,MAAM,SAACqK,GACpB,OACIA,EAAGnK,KAAK5b,EAAanG,OAErBksB,EAAGnK,KAAK5b,EAAaqY,MAAMvV,cC8B5B,SAASxI,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWotB,mDACZ,OAxRL,SAAqBzrB,EAAmBC,GAC3C,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAAgC,CAC5B3rB,MAAO7B,EAAU0D,GACjBT,MAAO,KACPd,UAAW,CACPwH,KAAM5J,EAAmB0tB,oBACzBjL,qBAAsB3gB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAAakb,qBACrElb,aAAczF,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAChDomB,uBAAwB,CACpB7J,cAAe/hB,EAAO+hB,cACtB8J,QAAS7rB,EAAO+hB,cAChBxY,SAAU,IAEduiB,qBAAsB,iBA3BvC/rB,EAsRIkC,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW2tB,6CACZ,OAlPL,SAAgBhsB,EAAmBC,GACtC,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAAgC,CAC5B3rB,MAAO7B,EAAUmE,KACjBlB,MAAO,KACPd,UAAW,gBAlBxBN,EAgPIuC,CAAOvC,GAClB,KAAK3B,EAAW4tB,0DACZ,OAvNL,SAA4BjsB,EAAmBC,GAClD,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAEX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAEX,GAA4F,OAAxFA,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAC1E,OAAON,EAEX,IAAMksB,EAAgBlsB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAAUurB,uBAEpG7J,EAAgBkK,EAAclK,cAAc3Z,IAAI,SAAC8jB,GAMnD,OALIA,EAAW1mB,aAAazB,KAAO/D,EAAO8rB,qBAAqBtmB,aAAazB,GACxEmoB,EAAWC,YAAa,EAExBD,EAAWC,YAAa,EAErBD,IAGX,OAAOrtB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAA+B7sB,OAAAyB,EAAA,EAAAzB,CAAA,GACxBkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BADpB,CAE1BrrB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UADxE,CAELyrB,qBAAsB9rB,EAAO8rB,qBAC7BF,uBAAwB,CACpB7J,cAAeA,EACf8J,QAASO,GAAmBrK,EAAekK,EAAc1iB,UACzDA,SAAU0iB,EAAc1iB,wBAgLzC8iB,CAAmBtsB,EAAOC,GACrC,KAAK5B,EAAWkuB,+DACZ,OAvKL,SAAyBvsB,EAAmBC,GAC/C,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAEX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAEX,GAA4F,OAAxFA,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAC1E,OAAON,EAEX,IAAMksB,EAAgBlsB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAAUurB,uBACpGW,EAAiBxsB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAAakb,qBAAqB9T,OAAO,CAAC5M,EAAOkU,iBAEpGsY,EAAmBP,EAAclK,cAAc3Z,IAAI,SAAC8jB,GAMtD,OALIK,EAAepd,SAAS+c,EAAW1mB,aAAazB,IAChDmoB,EAAWO,WAAY,EAEvBP,EAAWO,WAAY,EAEpBP,IAGX,OAAOrtB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAD7B,CAERkb,qBAAsB6L,IAE1Bd,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAA+B7sB,OAAAyB,EAAA,EAAAzB,CAAA,GACxBkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BADpB,CAE1BrrB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UADxE,CAELurB,uBAAwB,CACpB7J,cAAeyK,EACfX,QAASO,GAAmBI,EAAkBP,EAAc1iB,UAC5DA,SAAU0iB,EAAc1iB,wBA4HzCmjB,CAAgB3sB,EAAOC,GAClC,KAAK5B,EAAWuuB,kEACZ,OAnHL,SAA4B5sB,EAAmBC,GAElD,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAGX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAGX,GAA4F,OAAxFA,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAC1E,OAAON,EAIX,IAAM6sB,EAAc7sB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAAakb,qBAAqB3X,OAAO,SAACmL,GAC5F,OAAQA,IAAmBlU,EAAOkU,iBAGhC+X,EAAgBlsB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAAUurB,uBAGpGY,EAAmBP,EAAclK,cAAchZ,OAAO,SAACmjB,GAIzD,OAHIA,EAAW1mB,aAAazB,KAAO/D,EAAOkU,iBACtCgY,EAAWO,WAAY,GAEpBP,IAGX,OAAOrtB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAD7B,CAERkb,qBAAsBkM,IAE1BnB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAA+B7sB,OAAAyB,EAAA,EAAAzB,CAAA,GACxBkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BADpB,CAE1BrrB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UADxE,CAELurB,uBAAwB,CACpB7J,cAAeyK,EACfX,QAASO,GAAmBI,EAAkBP,EAAc1iB,UAC5DA,SAAU0iB,EAAc1iB,wBAiEzCsjB,CAAmB9sB,EAAOC,GACrC,KAAK5B,EAAW0uB,qDACZ,OAvDL,SAAuB/sB,EAAmBC,GAE7C,OAAKD,EAAMI,MAAMyH,YAAYvH,UAIzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OACzD/H,EAGiF,OAAxFA,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UACnEN,EAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJC,+BAA+B7sB,OAAAyB,EAAA,EAAAzB,CAAA,GACxBkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BADpB,CAE1BrrB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UADxE,CAELurB,uBAAuB/sB,OAAAyB,EAAA,EAAAzB,CAAA,GAChBkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASC,+BAA+BrrB,UAAUurB,uBADrE,CAElBC,QAAS7rB,EAAO+hB,cAChBxY,SAAUvJ,EAAOuJ,yBA5BtCxJ,EAoDIgtB,CAAchtB,EAAOC,GAChC,QACI,OAAO,MCrQJ,SAASF,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAW4uB,2DACZ,OAnCL,SAA4BjtB,EAAmBC,GAElD,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAGX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAGX,IAAM6sB,EAAc7sB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAAakb,qBAAqB3X,OAAO,SAACmL,GAC5F,OAAQA,IAAmBlU,EAAOkU,iBAGtC,OAAOrV,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAD7B,CAERkb,qBAAsBkM,YAW3BC,CAAmB9sB,EAAOC,GACrC,QACI,OAAO,MCyQJF,OApCf,SAAiBC,EAAyBC,GAItC,OAAQA,EAAOC,MACX,KAAK7B,EAAW6uB,oBACZ,OAxQL,SAAmBltB,EAAyBC,GAC/C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAa,CACTtG,aAAc4rB,EAA4B3rB,QAC1CJ,MAAO,KACPd,UAAW,UAgQRmB,CAAUzB,GACrB,KAAK3B,EAAW+uB,6BACZ,OA5PL,SAA2BptB,EAAyBC,GACvD,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAa,CACTtG,aAAc4rB,EAA4BxrB,QAC1CP,MAAO,KACPd,UAAW,CACPwH,KAAMqlB,EAA2BplB,OACjCtC,aAAcxF,EAAOwF,aACrBua,SAAU/f,EAAO+f,SACjBqN,YAAaptB,EAAOotB,YACpBjW,cAAenX,EAAOmX,cACtBkW,iBAAkBrtB,EAAOqtB,iBACzBtlB,aAAc/H,EAAO+H,aACrB6B,cAAe5J,EAAO4J,cACtB0jB,iBAAkBttB,EAAOutB,iBACzBC,mBAAoB,GACpB3O,WAAY7e,EAAO6e,WACnB3V,cAAelJ,EAAOkJ,cACtBf,QAASnI,EAAOmI,QAChBmB,gBAAiB,GACjBmiB,SAAU,CACNC,+BAAgC,CAC5B3rB,MAAOmtB,EAAgB7qB,KACvBhC,UAAW,KACXc,MAAO,MAEXssB,eAAgB,CACZ1tB,MAAOmtB,EAAgB7qB,KACvBhC,UAAW,KACXc,MAAO,MAEXusB,qBAAsB,CAClB3tB,MAAOmtB,EAAgB7qB,KACvBhC,UAAW,KACXc,MAAO,MAEXwsB,qBAAsB,CAClB5tB,MAAOmtB,EAAgB7qB,KACvBhC,UAAW,KACXc,MAAO,aAkNhBysB,CAAkB7tB,EAAOC,GACpC,KAAK5B,EAAWyvB,+BACZ,OA3ML,SAA6B9tB,EAAyBC,GACzD,IAAMK,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,OAAkB,OAAdA,EACON,EAEPM,EAAUwH,OAASqlB,EAA2BplB,OACvC/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPtG,aAAc4rB,EAA4BxrB,QAC1CP,MAAO,KACPd,UAAW,CACPwH,KAAMqlB,EAA2BplB,OACjCtC,aAAcxF,EAAOwF,aACrBua,SAAU/f,EAAO+f,SACjBqN,YAAaptB,EAAOotB,YACpBjW,cAAenX,EAAOmX,cACtBkW,iBAAkBrtB,EAAOqtB,iBACzBtlB,aAAc/H,EAAO+H,aACrB6B,cAAe5J,EAAO4J,cACtB0jB,iBAAkBttB,EAAOutB,iBACzBC,mBAAoB,GACpB3O,WAAY7e,EAAO6e,WACnB3V,cAAelJ,EAAOkJ,cACtBf,QAASnI,EAAOmI,QAChBmB,gBAAiB,GACjBmiB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFwB,EAAUorB,iBA2KlBqC,CAAoB/tB,EAAOC,GACtC,KAAK5B,EAAW2vB,2CACZ,OArKL,SAAwChuB,EAAyBC,GACpE,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAa,CACTtG,aAAc4rB,EAA4BxrB,QAC1CP,MAAO,KACPd,UAAW,CACPwH,KAAMqlB,EAA2Bc,qBACjCxoB,aAAcxF,EAAOwF,aACrBua,SAAU/f,EAAO+f,SACjBnW,cAAe5J,EAAO4J,oBAyJvBqkB,CAA+BluB,EAAOC,GACjD,KAAK5B,EAAW8vB,oBACZ,OApJL,SAAmBnuB,EAAyBC,GAC/C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAa,CACTtG,aAAc4rB,EAA4BloB,MAC1C7D,MAAOnB,EAAOmB,MACdd,UAAW,UA4IR8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAW+vB,gBACZ,OAxIL,SAAgBpuB,EAAyBC,GAC5C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAa,CACTtG,aAAc4rB,EAA4B7qB,KAC1ClB,MAAO,KACPd,UAAW,UAgIRiC,CAAOvC,GAClB,KAAK3B,EAAWgwB,kCACZ,OA5HL,SAAgCruB,EAAyBC,GAC5D,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAGX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAASqlB,EAA2BplB,OACtE,OAAO/H,EAEX,IACMsuB,EADatuB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAAaqZ,WACjC9V,OAAO,SAACga,GACrC,OAAQA,EAAUlS,cAAgB7Q,EAAO6U,cAEvCyZ,EAAuBvuB,EAAMI,MAAMyH,YAAYvH,UAAUwe,WAAW9V,OAAO,SAACga,GAC9E,OAAQA,EAAUlS,cAAgB7Q,EAAO6U,cAG7C,OAAOhW,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMyH,YAAYvH,UAAUmF,aAD7B,CAERqZ,WAAYwP,EACZ/N,eAAgB+N,EAAc9f,SAElCsQ,WAAYyP,UA+FbC,CAAuBxuB,EAAOC,GACzC,KAAK5B,EAAWowB,kCACZ,OA1FL,SAAgCzuB,EAAyBC,GAC5D,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAASqlB,EAA2BplB,OAC/D/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmF,aAAcxF,EAAOwF,aACrBqZ,WAAY7e,EAAO6e,mBAdxB9e,EAwFI0uB,CAAuB1uB,EAAOC,GACzC,KAAK5B,EAAWswB,iCACZ,OArEL,SAA+B3uB,EAAyBC,GAC3D,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAASqlB,EAA2BplB,OAC/D/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELitB,iBAAkBttB,EAAOmJ,OACzB0V,WAAY7e,EAAO6e,mBAdxB9e,EAmEI4uB,CAAsB5uB,EAAOC,GACxC,KAAK5B,EAAWwwB,mCACZ,OAhDL,SAAiC7uB,EAAyBC,GAC7D,OAAKD,EAAMI,MAAMyH,YAAYvH,UAGzBN,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAASqlB,EAA2BplB,OAC/D/H,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELmtB,mBAAoBxtB,EAAOuJ,SAC3BsV,WAAY7e,EAAO6e,mBAdxB9e,EA8CI8uB,CAAwB9uB,EAAOC,GAG9C,OAAO8uB,GAAmB/uB,EAAOC,IAC7B+uB,GAAiBhvB,EAAOC,IACxBgvB,GAAoBjvB,EAAOC,IAC3BivB,GAAYlvB,EAAOC,IACnBkvB,GAA2BnvB,EAAOC,IAClC0gB,GAAqB3gB,EAAOC,IAC5B0gB,GAAqB3gB,EAAOC,IC/GpC,SAASmvB,GAAapvB,EAAuBC,GAIzC,OAAQA,EAAOC,MACX,KAAK7B,EAAWgxB,yBACZ,OA/BZ,SAAqBrvB,EAAuBC,GAA6C,IAAAqvB,EAI/ErvB,EAHEsvB,iBACJC,EAFiFF,EAEjFE,iBAAkBxN,EAF+DsN,EAE/DtN,cAAe2G,EAFgD2G,EAEhD3G,aAAc5H,EAFkCuO,EAElCvO,YAAaY,EAFqB2N,EAErB3N,UAAWnR,EAFU8e,EAEV9e,cAAexH,EAFLsmB,EAEKtmB,OACtFymB,EAHiFH,EAGjFG,WAAYC,EAHqEJ,EAGrEI,cAAeC,EAHsDL,EAGtDK,uBAAwBvuB,EAH8BkuB,EAG9BluB,MAAOwuB,EAHuBN,EAGvBM,UAG9D,OAAO9wB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIuB,aAAc9D,EAAsBkE,QACpCP,MAAO,KACPd,UAAW,CACPkvB,mBAAkBxN,gBAAe2G,eAAc5H,cAAaY,YAAWnR,gBAAexH,SACtFymB,aAAYC,gBAAeC,yBAAwBvuB,QAAOwuB,eAmBnD1tB,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAWwxB,mBACZ,OA1KL,SAAoB7vB,EAAuBC,GAC9C,OAAwB,OAApBD,EAAMM,WACNI,QAAQC,KAAK,gCACNX,GAsBJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELqvB,uBAAwB,KACxB5O,YAAa9gB,EAAO8gB,YACpB6O,WAAW,MA2IJE,CAAW9vB,EAAOC,GAC7B,KAAK5B,EAAW0xB,yBACZ,OAxIL,SAAyB/vB,EAAuBC,GACnD,OAAwB,OAApBD,EAAMM,WACNI,QAAQC,KAAK,gCACNX,GAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELygB,YAAa9gB,EAAO8gB,YACpB6O,WAAW,MA8HJI,CAAgBhwB,EAAOC,GAClC,KAAK5B,EAAW4xB,2BACZ,OA3HL,SAA2BjwB,EAAuBC,GACrD,OAAwB,OAApBD,EAAMM,WACNI,QAAQC,KAAK,gCACNX,GAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAEL0hB,cAAe/hB,EAAO+hB,cACtB2G,aAAc1oB,EAAO0oB,aACrB8G,WAAYxvB,EAAOwvB,WACnBC,cAAezvB,EAAO+hB,cAAcxT,OACpCohB,WAAW,MA8GJM,CAAkBlwB,EAAOC,GACpC,KAAK5B,EAAW8xB,yBACZ,OAzGL,SAAyBnwB,EAAuBC,GACnD,OAAwB,OAApBD,EAAMM,WACNI,QAAQC,KAAK,gCACNX,GAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELsvB,WAAW,EACXxuB,MAAOnB,EAAOmB,UA8FPgvB,CAAgBpwB,EAAOC,GAGlC,KAAK5B,EAAWgyB,uBACZ,OA5FL,SAAuBrwB,EAAuBC,GACjD,OAAwB,OAApBD,EAAMM,WACNI,QAAQC,KAAK,gCACNX,GAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELqhB,UAAW1hB,EAAO0hB,UAClBnR,cAAevQ,EAAOuQ,cACtBof,WAAW,MAgFJU,CAActwB,EAAOC,GAChC,KAAK5B,EAAWkyB,yBACZ,OA/DZ,SAAyBvwB,EAAuBC,GAC5C,GAAwB,OAApBD,EAAMM,UAEN,OADAI,QAAQC,KAAK,gCACNX,EAHkF,IAMrFgJ,EAAW/I,EAAX+I,OAER,OAAOlK,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAEL0I,SACA4mB,WAAW,MAkDJY,CAAgBxwB,EAAOC,GAClC,KAAK5B,EAAWoyB,mBACZ,MA7BD,CACHlvB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MA2BX,QACI,OAAO,MCpIJP,OAff,SAAiBC,EAAmBC,GAChC,OAAQA,EAAOC,MACX,KAAK7B,EAAWqyB,iBACZ,OAnEL,SAAwB1wB,EAAmBC,GAC9C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEI2wB,KAAM,CACFrkB,OAAQjP,EAAUuzB,SAClBjyB,QAAS,GACTkyB,cAAe,CACXhmB,MAAO,GACPtC,SAAU,GACV6S,SAAU,GACViH,MAAO,OAyDJyO,CAAe9wB,GAC1B,KAAK3B,EAAW0yB,gBACZ,OArCL,SAAwB/wB,EAAmBC,GAC9C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEI2wB,KAAM,CACFrkB,OAAQjP,EAAU2zB,WAClBryB,QAAS,GACTkyB,cAAe,CACXhmB,MAAO5K,EAAO4K,MACdtC,SAAUtI,EAAOsI,SACjB6S,SAAUnb,EAAOmb,SACjBiH,MAAOpiB,EAAOoiB,UA2BX4O,CAAejxB,EAAOC,GACjC,KAAK5B,EAAW6yB,kBACZ,OAvBL,SAA0BlxB,EAAmBC,GAChD,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEI2wB,KAAM,CACFrkB,OAAQjP,EAAU8zB,aAClBxyB,QAAS,GACTkyB,cAAe,CACXhmB,MAAO,GACPtC,SAAU,GACV6S,SAAU,GACViH,MAAO,OAaJ+O,CAAiBpxB,GAC5B,KAAK3B,EAAWgzB,iBACZ,OAzDL,SAAwBrxB,EAAmBC,GAC9C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEI2wB,KAAM,CACFrkB,OAAQjP,EAAU4H,MAClBtG,QAASsB,EAAOmB,MAAMzC,QACtBkyB,cAAe,CACXhmB,MAAO,GACPtC,SAAU,GACV6S,SAAU,GACViH,MAAO,OA+CJiP,CAAetxB,EAAOC,GACjC,QACI,OAAO,OCzDJF,OATf,SAAiBC,EAAmBC,GAChC,OAAQA,EAAOC,MACX,KAAK7B,EAAWkzB,YACZ,OAbL,SAAoBvxB,EAAmBC,GAC1C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIwxB,IAAK,CACDllB,OAAQ/O,EAASk0B,MACjBC,OAAQzxB,EAAOyxB,UAQRC,CAAW3xB,EAAOC,GAC7B,QACI,OAAO,OC2FJF,OAjBf,SAAiBC,EAAmBC,GAChC,OAAQA,EAAOC,MACX,KAAK7B,EAAWuzB,iCACZ,OA5FL,SACH5xB,EACAC,GACA,OAAOD,EAyFQyB,CAAUzB,GACrB,KAAK3B,EAAWwzB,mCACZ,OAxFL,SACH7xB,EACAC,GACA,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAED0xB,+BAAgC,CAC5BvwB,aAAc9D,EAAsBkE,QACpCP,MAAO,KACPd,UAAW,CACPmF,aAAcxF,EAAOwF,aACrBwC,SAAUhI,EAAOgI,SACjBuO,YAAavW,EAAOuW,kBA2ErBtU,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW0zB,iCACZ,OAtEL,SACH/xB,EACAC,GACA,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAED0xB,+BAAgC,CAC5BvwB,aAAc9D,EAAsBwH,MACpC7D,MAAOnB,EAAOmB,MACdd,UAAW,UA4DR8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAW2zB,6BACZ,OAvDL,SAAgBhyB,EAAmBC,GACtC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAED0xB,+BAAgC,CAC5BvwB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,UA+CRiC,CAAOvC,GAClB,KAAK3B,EAAW4zB,8CACZ,OA3CL,SAA8BjyB,EAAmBC,GAIpD,IAAKD,EAAMI,MAAM0xB,+BAA+BxxB,UAC5C,OAAON,EAEX,IACMkyB,EADWlyB,EAAMI,MAAM0xB,+BAA+BxxB,UAAU2H,SACzCI,IAAI,SAACmL,GAC9B,OAAIA,EAAQxP,GAAK/D,EAAOuT,QAAQxP,IACrB/D,EAAOuT,QAEXA,IAGX,OAAO1U,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAED0xB,+BAA+BhzB,OAAAyB,EAAA,EAAAzB,CAAA,GACxBkB,EAAMI,MAAM0xB,+BADW,CAE1BxxB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GAEHkB,EAAMI,MAAM0xB,+BAA+BxxB,UAFzC,CAGL2H,SAAUiqB,UAmBXC,CAAqBnyB,EAAOC,GACvC,QACI,OAAO,OC2DJF,OAtBf,SAAiBC,EAAmBC,GAIhC,OAAQA,EAAOC,MACX,KAAK7B,EAAW+zB,wBACZ,OAjJL,SAAmBpyB,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX9wB,aAAc9D,EAAsB+D,QACpClB,UAAW,KACXc,MAAO,WAwIJK,CAAUzB,GACrB,KAAK3B,EAAWi0B,0BACZ,OArHL,SAAqBtyB,EAAmBC,GAC3C,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX9wB,aAAc9D,EAAsBkE,QACpCrB,UAAW,CACPmF,aAAcxF,EAAOwF,aACrBua,SAAU/f,EAAO+f,UAErB5e,MAAO,WAyGJc,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAWk0B,wBACZ,OArGL,SAAmBvyB,EAAmBC,GACzC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX9wB,aAAc9D,EAAsBwH,MACpC3E,UAAW,KACXc,MAAOnB,EAAOmB,YA4FXgB,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAWm0B,oBACZ,OAxIL,SAAgBxyB,EAAmBC,GACtC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX9wB,aAAc9D,EAAsB6E,KACpChC,UAAW,KACXc,MAAO,WA+HJmB,CAAOvC,GAClB,KAAK3B,EAAWo0B,sCACZ,OA1FL,SAA+BzyB,EAAmBC,GACrD,GAA8C,OAA1CD,EAAMI,MAAMiyB,gBAAgB/xB,UAC5B,OAAON,EAF6F,IAWlGoI,EAJFpI,EADAI,MAASiyB,gBAAmB/xB,UAKNmF,aAAa2C,QAAQC,IAAI,SAACC,GAChD,OAAIA,EAAOC,WAAatI,EAAOuI,gBAC3BF,EAAOpI,KAAOjD,EAAWwL,MAClBH,GAEAA,IAIf,OAAOxJ,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX/xB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMiyB,gBAAgB/xB,UAD1B,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMiyB,gBAAgB/xB,UAAWmF,aADlC,CAER2C,QAASA,YA4DdO,CAAsB3I,EAAOC,GACxC,KAAK5B,EAAWq0B,sCACZ,OAtDL,SAA+B1yB,EAAmBC,GACrD,GAA8C,OAA1CD,EAAMI,MAAMiyB,gBAAgB/xB,UAC5B,OAAON,EAF6F,IAWlGoI,EAJFpI,EADAI,MAASiyB,gBAAmB/xB,UAKNmF,aAAa2C,QAAQC,IAAI,SAACC,GAChD,OAAIA,EAAOC,WAAatI,EAAOuI,gBAC3BF,EAAOpI,KAAOjD,EAAW4L,OAClBP,GAEAA,IAIf,OAAOxJ,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDiyB,gBAAgBvzB,OAAAyB,EAAA,EAAAzB,CAAA,GACTkB,EAAMI,MAAMiyB,gBADJ,CAEX/xB,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMiyB,gBAAgB/xB,UAD1B,CAELmF,aAAa3G,OAAAyB,EAAA,EAAAzB,CAAA,GACNkB,EAAMI,MAAMiyB,gBAAgB/xB,UAAWmF,aADlC,CAER2C,QAASA,YAwBdU,CAAsB9I,EAAOC,GACxC,QACI,OAAO,OC1BnB,SAASmvB,GAAapvB,EAAkCC,GACpD,OAAQA,EAAOC,MACX,KAAK7B,EAAWs0B,uBACZ,MAnID,CACH3yB,MAAO7B,EAAUqD,QACjBlB,UAAW,KACXc,MAAO,MAiIP,KAAK/C,EAAWu0B,yBACZ,OA9HL,SAAqB5yB,EAAkCC,GAC1D,MAAO,CACHD,MAAO7B,EAAU0D,GACjBT,MAAO,KACPd,UAAW,CACPQ,UAAWnD,EAAoBk1B,QAC/BpW,MAAOxc,EAAOwc,MACdhX,aAAcxF,EAAOwF,aACrBqtB,aAAc,OAsHP5wB,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW00B,uBACZ,OAnHL,SAAmB/yB,EAAkCC,GACxD,MAAO,CACHD,MAAO7B,EAAU8G,MACjB7D,MAAOnB,EAAOmB,MACdd,UAAW,MA+GA8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAW20B,mBACZ,MA5GD,CAEHhzB,MAAO7B,EAAUmE,KACjBlB,MAAO,KACPd,UAAW,MAyGX,KAAKjC,EAAW40B,iCACZ,OAtGL,SAA4BjzB,EAAkCC,GAEjE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELmc,MAAOxc,EAAOwc,UA6FPyW,CAAmBlzB,EAAOC,GACrC,KAAK5B,EAAW80B,gCACZ,OA1FL,SAA2BnzB,EAAkCC,GAChE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELwyB,aAAc,CACVxe,KAAMrU,EAAOqU,KACb0L,SAAU/f,EAAO+f,cAgFdoT,CAAkBpzB,EAAOC,GACpC,KAAK5B,EAAWg1B,kCACZ,OA5EL,SAA6BrzB,EAAkCC,GAClE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELQ,UAAWnD,EAAoB21B,YAoExBC,CAAoBvzB,GAC/B,KAAK3B,EAAWm1B,oCACZ,OAjEL,SAA+BxzB,EAAkCC,GACpE,GAAwB,OAApBD,EAAMM,UACN,OAAON,EAF2H,IAAAyzB,EAKvFzzB,EAAvCM,UAAawyB,EALiHW,EAKjHX,aAAcrW,EALmGgX,EAKnGhX,MAGnC,IAAKqW,EACD,MAAM,IAAIvzB,MAAM,yBAIpB,GAFAuzB,EAAa9S,SAAW0T,GAAoC7V,2BAEvDpB,EACD,MAAM,IAAIld,MAAM,iBAEpB,IAAMo0B,EAAWlX,EAAMpU,IAAI,SAACiM,GAIxB,OAHIA,EAAK/L,WAAauqB,EAAaxe,KAAK/L,WACpC+L,EAAK0L,SAAW0T,GAAoC7V,2BAEjDvJ,IAGX,OAAOxV,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAGIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELQ,UAAWnD,EAAoBgE,QAC/BmxB,aAAcA,EACdrW,MAAOkX,MAmCAC,CAAsB5zB,GACjC,KAAK3B,EAAWw1B,kCACZ,OAhCL,SAA6B7zB,EAAkCC,GAClE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELQ,UAAWnD,EAAoBsH,UAwBxB6uB,CAAoB9zB,GAC/B,QACI,OAAO,MA8DJD,OAjCf,SAAiBC,EAAmBC,GAChC,IA1BJ,SAAqBA,GACjB,OAAQA,EAAOC,MACX,KAAK7B,EAAWs0B,uBAEhB,KAAKt0B,EAAWu0B,yBAEhB,KAAKv0B,EAAW00B,uBAEhB,KAAK10B,EAAW20B,mBAEhB,KAAK30B,EAAW40B,iCAEhB,KAAK50B,EAAW80B,gCAEhB,KAAK90B,EAAWg1B,kCAEhB,KAAKh1B,EAAWm1B,oCAEhB,KAAKn1B,EAAWw1B,kCACZ,OAAO,EACX,QACI,OAAO,GAKVE,CAAY9zB,GACb,OAAO,KAEX,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAEX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAEX,IACMg0B,EAAe5E,GADwBpvB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASgC,eAC3CztB,GAC7C,OAAqB,OAAjB+zB,EACO,KAEJl1B,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJgC,eAAgBsG,aCjKxC,SAAS7uB,KAKL,MAJ2B,CACvBjF,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,MA2CzB,SAASqD,GAAoB9E,GACzB,OAAIA,EAAU2zB,sBAAsB1Y,MAAM5Y,YAAc9F,EAAU+F,MACvD9F,EAAU2F,OAGd3F,EAAUiE,SAoJrB,SAASquB,GAAapvB,EAAwCC,GAC1D,OAAQA,EAAOC,MACX,KAAK7B,EAAW61B,sCACZ,OAvPL,SAAmBl0B,EAAwCC,GAC9D,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIA,MAAO7B,EAAUqD,QACjBJ,MAAO,KACPd,UAAW,OAkPAmB,CAAUzB,GACrB,KAAK3B,EAAW81B,wCACZ,OAhPL,SAAqBn0B,EAAwCC,GAChE,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIA,MAAO7B,EAAU0D,GACjBT,MAAO,KACPd,UAAW,CACPmF,aAAcxF,EAAOwF,aACrBwuB,sBAAuBh0B,EAAOg0B,sBAC9BnzB,UAAWhE,EAAUiE,SACrBP,UAAWxD,EAAUgF,IACrBJ,gBAAiBuD,QAsOVjD,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW+1B,sCACZ,OAnOL,SAAmBp0B,EAAwCC,GAC9D,MAAO,CACHD,MAAO7B,EAAU8G,MACjB7D,MAAOnB,EAAOmB,MACdd,UAAW,MA+NA8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAWg2B,kCACZ,OA7NL,SAAgBr0B,EAAwCC,GAC3D,OAAwB,OAApBD,EAAMM,UACCN,EAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIA,MAAO7B,EAAUmE,KACjBlB,MAAO,KACPd,UAAW,OAoNAiC,CAAOvC,GAClB,KAAK3B,EAAWi2B,gDACZ,OA1ML,SAA4Bt0B,EAAwCC,GACvE,GAAwB,OAApBD,EAAMM,UACN,OAAON,EAGX,IACI2C,EADE4xB,EAAev0B,EAAMM,UAAU2zB,sBAGjCtxB,EADA1C,EAAOsb,QAAUgZ,EAAahZ,MAAMlV,YACxBxJ,EAAU+F,MAEV/F,EAAUkJ,MAE1B,IAAMO,EAAQxH,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAEL2zB,sBAAsBn1B,OAAAyB,EAAA,EAAAzB,CAAA,GACfkB,EAAMM,UAAU2zB,sBADF,CAEjB1Y,MAAO,CACH7Y,MAAOzC,EAAOsb,MACdlV,YAAapG,EAAOsb,MACpB5Y,UAAWA,EACXf,gBAAiBuD,YAM3BrE,EAAYsE,GAAoBkB,EAAShG,WAE/C,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAwH,EADP,CAEIhG,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHwH,EAAShG,UADP,CAELQ,UAAWA,MAwKJ0zB,CAAmBx0B,EAAOC,GACrC,KAAK5B,EAAWo2B,4CACZ,OA9JZ,SAAyBz0B,EAAwCC,GAC7D,GAAwB,OAApBD,EAAMM,UACN,OAAON,EAGX,IAAMc,EAAYsE,GAAoBpF,EAAMM,WAE5C,OAAOxB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELQ,UAAWA,EACXc,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,UAgJd2yB,CAAgB10B,GAC3B,KAAK3B,EAAWs2B,0CACZ,OA5IZ,SAAuB30B,EAAwCC,GAC3D,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELsB,gBAAiB,CACb1B,KAAMnD,EAAoBkI,MAC1BtG,QAAS,sBACTmD,YAAa,IAAIC,UAiId6yB,CAAc50B,GACzB,KAAK3B,EAAWw2B,wCACZ,OA7HL,SAAqB70B,EAAwCC,GAChE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELQ,UAAWhE,EAAUiE,SACrBP,UAAWxD,EAAUgE,MACrBizB,sBAAsBn1B,OAAAyB,EAAA,EAAAzB,CAAA,GACfkB,EAAMM,UAAU2zB,sBADF,CAEjB1Y,MAAMzc,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMM,UAAU2zB,sBAAsB1Y,MADxC,CAED5Y,UAAW9F,EAAUkJ,cA+GtB9E,CAAYjB,GAGvB,QACI,OAAO,MAqBJ,SAASD,GAAQC,EAAmBC,GAC/C,IAlBJ,SAAqBA,GACjB,OAAQA,EAAOC,MACX,KAAK7B,EAAW61B,sCAChB,KAAK71B,EAAW81B,wCAChB,KAAK91B,EAAW+1B,sCAChB,KAAK/1B,EAAWg2B,kCAChB,KAAKh2B,EAAWi2B,gDAChB,KAAKj2B,EAAWo2B,4CAChB,KAAKp2B,EAAWs2B,0CAChB,KAAKt2B,EAAWw2B,wCAEZ,OAAO,EACX,QACI,OAAO,GAKVd,CAAY9zB,GACb,OAAO,KAEX,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAEX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAEX,IACMg0B,EAAe5E,GAD8BpvB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASkC,qBACjD3tB,GAC7C,OAAqB,OAAjB+zB,EACO,KAEJl1B,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJkC,qBAAsBoG,YChRvC,SAASc,GAAiB90B,EAAwCC,GACrE,OAAwB,OAApBD,EAAMM,UACCN,EAGJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELE,UAAWxD,EAAUyD,WAgHjC,SAAS2uB,GAAapvB,EAAwCC,GAC1D,OAAQA,EAAOC,MACX,KAAK7B,EAAW02B,iCACZ,MA7JD,CAEH/0B,MAAO7B,EAAUqD,QACjBJ,MAAO,KACPd,UAAW,MA0JX,KAAKjC,EAAW22B,mCACZ,OAtJL,SAAqBh1B,EAAwCC,GAChE,MAAO,CACHD,MAAO7B,EAAU0D,GACjBT,MAAO,KACPd,UAAW,CACPmF,aAAcxF,EAAOwF,aACrBqZ,WAAY7e,EAAO6e,WACnBmW,kBAAmB,KACnBjV,SAAU/f,EAAO+f,SACjB5e,MAAO,KACP8zB,eAAgBn3B,EAAeuE,KAC/B9B,UAAWxD,EAAUgE,QA2IdkB,CAAYlC,EAAOC,GAC9B,KAAK5B,EAAW82B,iCACZ,OAxIL,SAAmBn1B,EAAwCC,GAC9D,MAAO,CACHD,MAAO7B,EAAU8G,MACjB7D,MAAOnB,EAAOmB,MACdd,UAAW,MAoIA8B,CAAUpC,EAAOC,GAC5B,KAAK5B,EAAW+2B,iCACZ,OAAON,GAAiB90B,GAC5B,KAAK3B,EAAWg3B,mCACZ,OAtHL,SAA4Br1B,EAAwCC,GACvE,GAAwB,OAApBD,EAAMM,UACN,OAAON,EAGX,IAAMsG,EAAyCxH,OAAAyB,EAAA,EAAAzB,CAAA,GACxCkB,EADwC,CAE3CM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELE,UAAWxD,EAAUgE,UAIvBV,EAAYgG,EAAShG,UAI3B,IAAKA,EACD,MAAM,IAAIf,MAAM,sBAGpB,IAAM01B,EAAoB30B,EAAU20B,kBAoBpC,OAhBuB,IAAnBh1B,EAAOuT,QACPlT,EAAUwe,WAAaxe,EAAUwe,WAAWzW,IAAI,SAACitB,GAI7C,OAHIA,EAAatS,UAAUlS,cAAgBmkB,EAAmBjS,UAAUlS,cACpEwkB,EAAahpB,OAAS1O,EAAe23B,YAElCD,IAGXh1B,EAAUwe,WAAaxe,EAAUwe,WAAWzW,IAAI,SAACitB,GAI7C,OAHIA,EAAatS,UAAUlS,cAAgBmkB,EAAmBjS,UAAUlS,cACpEwkB,EAAahpB,OAAS1O,EAAe43B,WAElCF,IAIRhvB,EA6EQmvB,CAAmBz1B,EAAOC,GACrC,KAAK5B,EAAW82B,iCACZ,OAAOL,GAAiB90B,GAC5B,KAAK3B,EAAWq3B,6CACZ,OAhEL,SAA8B11B,EAAwCC,GACzE,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIoB,MAAO,KACPd,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,aAwDFq1B,CAAqB31B,GAChC,KAAK3B,EAAWu3B,+CACZ,OArDL,SAAgC51B,EAAwCC,GAC3E,OAAwB,OAApBD,EAAMM,UACCN,EAEGlB,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EADO,CAEVoB,MAAO,KACPd,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAEL20B,kBAAmBh1B,EAAO+iB,cA4CnB6S,CAAuB71B,EAAOC,GACzC,KAAK5B,EAAWy3B,6BACZ,MAvCD,CACH91B,MAAO7B,EAAUmE,KACjBlB,MAAO,KACPd,UAAW,MAqCX,KAAKjC,EAAW03B,mCACZ,OAlCZ,SAAqB/1B,EAAwCC,GACzD,OAAwB,OAApBD,EAAMM,UACCN,EAEJlB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIM,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMM,UADJ,CAELwe,WAAY7e,EAAO6e,eA0BZkX,CAAYh2B,EAAOC,GAC9B,QACI,OAAO,MAqBJ,SAASF,GAAQC,EAAmBC,GAC/C,IAlBJ,SAAqBA,GACjB,OAAQA,EAAOC,MACX,KAAK7B,EAAW02B,iCAChB,KAAK12B,EAAW22B,mCAChB,KAAK32B,EAAW82B,iCAChB,KAAK92B,EAAW+2B,iCAChB,KAAK/2B,EAAWg3B,mCAChB,KAAKh3B,EAAW82B,iCAChB,KAAK92B,EAAWu3B,+CAChB,KAAKv3B,EAAWy3B,6BAChB,KAAKz3B,EAAW03B,mCACZ,OAAO,EACX,QACI,OAAO,GAKVhC,CAAY9zB,GACb,OAAO,KAEX,IAAKD,EAAMI,MAAMyH,YAAYvH,UACzB,OAAON,EAEX,GAAIA,EAAMI,MAAMyH,YAAYvH,UAAUwH,OAAS9J,EAAqB+J,OAChE,OAAO/H,EAEX,IACMg0B,EAAe5E,GAD8BpvB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SAASiC,qBACjD1tB,GAC7C,OAAqB,OAAjB+zB,EACO,KAEJl1B,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAEDyH,YAAY/I,OAAAyB,EAAA,EAAAzB,CAAA,GACLkB,EAAMI,MAAMyH,YADR,CAEPvH,UAAUxB,OAAAyB,EAAA,EAAAzB,CAAA,GACHkB,EAAMI,MAAMyH,YAAYvH,UADtB,CAELorB,SAAS5sB,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMI,MAAMyH,YAAYvH,UAAUorB,SADjC,CAEJiC,qBAAsBqG,YCtN/B,SAASj0B,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAW43B,iCACZ,OAnBZ,SAAqBj2B,EAAmBC,GACpC,IAAMi2B,EAAU,IAAIhsB,IAAIlK,EAAMm2B,SAASnU,cAAcoU,MAGrD,OAFAF,EAAQ7iB,IAAIpT,EAAOwF,aAAazB,GAAI/D,EAAOwF,cAEpC3G,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIm2B,SAASr3B,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMm2B,SADL,CAEJnU,cAAcljB,OAAAyB,EAAA,EAAAzB,CAAA,GACPkB,EAAMm2B,SAASnU,cAAcoU,KADvB,CAETA,KAAMF,QASHh0B,CAAYlC,EAAOC,GAC9B,QACI,OAAO,MCgCJ,SAASF,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWg4B,2BACZ,OAtDZ,SAA2Br2B,EAAmBC,GAC1C,IAAMwc,EAAQzc,EAAMm2B,SAAS1Z,MAK7B,OAHAA,EAAM2Z,KAAK/iB,IAAIpT,EAAOqU,KAAK/L,SAAUtI,EAAOqU,MAGrCxV,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIm2B,SAASr3B,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMm2B,SADL,CAEJ1Z,MAAM3d,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMm2B,SAAS1Z,MADjB,CAED2Z,KAAM,IAAIlsB,IAAIuS,EAAM2Z,YA0CjBE,CAAkBt2B,EAAOC,GACpC,KAAK5B,EAAWk4B,mCACZ,OAtCZ,SAAmCv2B,EAAmBC,GAClD,IAAMu2B,EAAUx2B,EAAMm2B,SAASrV,KAAKsV,KAGpC,OAFAI,EAAQnjB,IAAIpT,EAAOwF,aAAazB,GAAI/D,EAAOwF,cAEpC3G,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIm2B,SAASr3B,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMm2B,SADL,CAEJrV,KAAKhiB,OAAAyB,EAAA,EAAAzB,CAAA,GACEkB,EAAMm2B,SAASrV,KADlB,CAEAsV,KAAM,IAAIlsB,IAAIssB,SA4BXC,CAA0Bz2B,EAAOC,GAC5C,KAAK5B,EAAWq4B,8BACZ,OAxBZ,SAA8B12B,EAAmBC,GAC7C,IAAM6e,EAAa9e,EAAMm2B,SAASrX,WAElC,OADAA,EAAWsX,KAAK/iB,IAAIpT,EAAO+iB,UAAUlS,YAAa7Q,EAAO+iB,WAClDlkB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEIm2B,SAASr3B,OAAAyB,EAAA,EAAAzB,CAAA,GACFkB,EAAMm2B,SADL,CAEJrX,WAAWhgB,OAAAyB,EAAA,EAAAzB,CAAA,GACJkB,EAAMm2B,SAASrX,WADZ,CAENsX,KAAM,IAAIlsB,IAAI4U,EAAWsX,YAetBO,CAAqB32B,EAAOC,GAG3C,OAAO22B,GAAqB52B,EAAOC,GCpDxB,SAASF,GAAQC,EAAmBC,GAC/C,OAAQA,EAAOC,MACX,KAAK7B,EAAWw4B,0BACZ,OAZZ,SAAqB72B,EAAmBC,GACpC,OAAOnB,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEI82B,GAAGh4B,OAAAyB,EAAA,EAAAzB,CAAA,GACIkB,EAAM82B,MAQF50B,CAAYlC,GACvB,QACI,OAAO,MCcJD,IC3BVg3B,GD2BUh3B,GAjBR,SAAiBC,EAAmBC,GACvC,OAAO+2B,EAAch3B,EAAOC,IACxBg3B,EAAej3B,EAAOC,IX0Mf,SAAiBD,EAAmBC,GAC/C,IAAMi3B,EAAiB9H,GAAapvB,EAAMI,MAAM82B,eAAgBj3B,GAChE,OAAKi3B,EAGEp4B,OAAAyB,EAAA,EAAAzB,CAAA,GACAkB,EADP,CAEII,MAAMtB,OAAAyB,EAAA,EAAAzB,CAAA,GACCkB,EAAMI,MADR,CAED82B,qBANG,KW5MPC,CAAkBn3B,EAAOC,IACzBm3B,GAAep3B,EAAOC,IACtBo3B,GAAYr3B,EAAOC,IACnBq3B,GAAWt3B,EAAOC,IAClBs3B,GAA2Bv3B,EAAOC,IAClCivB,GAAYlvB,EAAOC,IACnBu3B,GAAWx3B,EAAOC,IAClBw3B,GAAiBz3B,EAAOC,IACxBy3B,GAAoB13B,EAAOC,IAC3Bk2B,GAASn2B,EAAOC,IAChB03B,GAAa33B,EAAOC,IACpBD,yFEjBa43B,eACjB,SAAAA,EAAYC,GAAsB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA44B,GAAA94B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA84B,GAAAz4B,KAAAH,KACxB64B,iFAIN,OAAK74B,KAAK64B,MAAM50B,QAMZ60B,EAAA,qBAAKC,IAAK/4B,KAAK64B,MAAM50B,QAAS+0B,MAAOh5B,KAAK64B,MAAMI,OAJ5CH,EAAA,gEASLI,EAAkBC,GAErB,IAAMtV,EAAKqV,EAASE,WAAWD,GAC/B,GAAItV,GAAM,OAAUA,GAAM,OAAUqV,EAAS1pB,OAAS2pB,EAAW,EAAG,CAChE,IAAME,EAAKH,EAASE,WAAWD,EAAW,GAC1C,GAAIE,EAAK,OAAUA,GAAM,MACrB,OAAOH,EAASI,UAAUH,EAAU,GAG5C,OAAOD,EAASI,UAAUH,EAAU,kDAIpC,IAAMI,EAAUv5B,KAAKw5B,OAAOx5B,KAAK64B,MAAMY,iBAAkB,GAAGC,cAItDC,EAFOC,KAAI55B,KAAK64B,MAAM1jB,gBAET0kB,OAAO,EAAG,GAK7B,OACIf,EAAA,qBAAKE,MAAOh5B,KAAK64B,MAAMI,KAAMa,OAAQ95B,KAAK64B,MAAMI,KAAMc,MAAO,CAAEC,OAAQ,uCACnElB,EAAA,sBAAMmB,EAAE,MAAMC,EAAE,MAAMC,GAAI,EAAGC,WAAW,SAASC,iBAAiB,SAASC,SAAUt6B,KAAK64B,MAAMI,KAAO,GAAIsB,KAAM,IAAMZ,EAAOa,WAAW,cAAcjB,yCAM/J,OAAIv5B,KAAK64B,MAAM50B,QACJjE,KAAKy6B,gBAETz6B,KAAK06B,wDAIZ,OAAO16B,KAAK26B,oBAtDiBC,mGCmCtBC,GAlCf,SAAAC,GACI,SAAAD,EAAYhC,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA66B,GAAA/6B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+6B,GAAA16B,KAAAH,KACvB64B,IAFd,OAAA/4B,OAAAe,EAAA,EAAAf,CAAA+6B,EAAAC,GAAAh7B,OAAAiM,EAAA,EAAAjM,CAAA+6B,EAAA,EAAA7uB,IAAA,eAAAtI,MAAA,SAKiB4R,GACT,OAAQA,EAAKkH,cAAgB,YACzB,IAAK,WACD,IAAMG,EAAkBrH,EAAKqH,iBAAmB,YAC1CF,EAAenH,EAAKmH,aAC1B,OAAIA,EACO,mCAAqCA,EAAe,oBAAsBE,EAE1Eoe,KAEf,IAAK,aACL,IAAK,aACL,QACI,OAAOA,QAlBvB,CAAA/uB,IAAA,SAAAtI,MAAA,WAuBQ,IAAMs3B,EAAYh7B,KAAKi7B,aAAaj7B,KAAK64B,MAAMvjB,MAC/C,OACIwjB,EAAA,qBACIC,IAAKiC,EACLjB,MAAO,CAAEf,MAAOh5B,KAAK64B,MAAMI,YA3B3C4B,EAAA,CAA4BD,aFO5B,SAASM,GAAYC,GACjB,OAAQA,GACJ,KAAKpD,GAAKqD,QACN,OAAOrD,GAAKhvB,OAChB,KAAKgvB,GAAKhvB,OACN,OAAOgvB,GAAKqD,mBApBnBrD,qEAwBgBsD,eACjB,SAAAA,EAAYxC,GAAmB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAq7B,IAC3B57B,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAu7B,GAAAl7B,KAAAH,KAAM64B,KAED73B,MAAQ,CACTs6B,KAAMvD,GAAKqD,SAJY37B,8EAS3BO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,6CAKjC,OACIxC,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,iDAOJ,GAAIlB,KAAK64B,MAAM4C,WACX,OACI3C,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,8CAO1E,IAAMC,EACF/C,EAAA,yBACIA,EAAA,yBACK94B,KAAK64B,MAAMvjB,KAAK8G,UAErB0c,EAAA,yBACIA,EAAA,0BAAMA,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAM,MAC1C,IACDH,EAAA,0BAAO94B,KAAK64B,MAAMvjB,KAAK/L,YAInC,OACIuvB,EAAA,qBAAK4C,UAAU,eAQV17B,KAAK87B,eAENhD,EAAA,qBAAK4C,UAAU,iBACX5C,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACVzf,MAAOsf,GACP/C,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,qDAatG,OACI0c,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,iBACX5C,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,WAEtF0c,EAAA,qBAAK4C,UAAU,kBACV17B,KAAK64B,MAAMvjB,KAAK/L,UAYrBuvB,EAAA,qBAAK4C,UAAU,eACV17B,KAAK64B,MAAMvjB,KAAKiH,OAASuc,EAAA,oDAE9BA,EAAA,qBAAK4C,UAAU,sBACV17B,KAAK64B,MAAMvjB,KAAK7O,cAAgBqyB,EAAA,2DAErCA,EAAA,qBAAK4C,UAAU,kBACV,CAAC17B,KAAK64B,MAAMvjB,KAAK+G,KAAMrc,KAAK64B,MAAMvjB,KAAKtU,MAAOhB,KAAK64B,MAAMvjB,KAAKgH,SAAStS,OAAO,SAAAiwB,GAAC,OAAIA,IAAGnsB,KAAK,OAASgrB,EAAA,sGASrH,OAAO94B,KAAKs8B,uBAxHe1B,aGkEtB2B,GAAb,SAAAC,GAGI,SAAAD,EAAYprB,GAA6B,IAAAxF,EAErC,GAFqC7L,OAAAC,EAAA,EAAAD,CAAAE,KAAAu8B,IACrC5wB,EAAA7L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAy8B,GAAAp8B,KAAAH,KAAMmR,KAHVtF,WAEyC,GAEhCsF,EAAOtF,MACR,MAAM,IAAItL,MAAM,oCAHiB,OAKrCoL,EAAKE,MAAQsF,EAAOtF,MALiBF,EAH7C,OAAA7L,OAAAe,EAAA,EAAAf,CAAAy8B,EAAAC,GAAA18B,OAAAiM,EAAA,EAAAjM,CAAAy8B,EAAA,EAAAvwB,IAAA,WAAAtI,MAAA,eAAA+4B,EAAA38B,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAA+B,EAWmBkM,EAAcR,GAXjC,IAAAjO,EAAA,OAAAM,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EAY+BnB,MAAMjM,KAAK8L,IAAK,CACnCkC,OAAQ,OACR3B,KAAM,OACN6J,MAAO,WACPhK,QAAS,CACLC,cAAenM,KAAK6L,MACpBkC,eAAgB,mBAChB3B,OAAQ,oBAEZwB,KAAMK,KAAKC,UAAUlO,KAAKib,YAAYD,EAAMR,MArBxD,cAYcjO,EAZdwC,EAAA1B,KAAA0B,EAAAxB,OAAA,SAuBevN,KAAK08B,gBAAgBnwB,IAvBpC,wBAAAwC,EAAAvB,SAAAsB,EAAA9O,SAAA,gBAAAsQ,EAAAC,GAAA,OAAAksB,EAAAhvB,MAAAzN,KAAA0N,YAAA,MAAA6uB,EAAA,CA3EA,WAKI,SAAAI,EAAAn9B,GAAyD,IAA3CsM,EAA2CtM,EAA3CsM,IAAKD,EAAsCrM,EAAtCqM,MAAOtO,EAA+BiC,EAA/BjC,OAA+BuC,OAAAC,EAAA,EAAAD,CAAAE,KAAA28B,GAAA38B,KAJzD8L,SAIyD,EAAA9L,KAHzD6L,WAGyD,EAAA7L,KAFzDzC,YAEyD,EACrDyC,KAAK8L,IAAMA,EACX9L,KAAK6L,MAAQA,GAAS,KACtB7L,KAAKzC,OAASA,EARtB,OAAAuC,OAAAiM,EAAA,EAAAjM,CAAA68B,EAAA,EAAA3wB,IAAA,cAAAtI,MAAA,SAWgBsK,EAAgBwM,GACxB,MAAO,CACHC,QAAS,MACTzM,OAAQhO,KAAKzC,OAAS,IAAMyQ,EAC5BhJ,GAAI2M,OAAOgJ,KAAKC,UAAUC,MAAM,GAChC1J,OAAQqJ,KAhBpB,CAAAxO,IAAA,mBAAAtI,MAAA,SAoBqBsK,GACb,MAAO,CACHyM,QAAS,MACTzM,OAAQhO,KAAKzC,OAAS,IAAMyQ,EAC5BhJ,GAAI2M,OAAOgJ,KAAKC,UAAUC,MAAM,GAChC1J,OAAQ,MAzBpB,CAAAnF,IAAA,kBAAAtI,MAAA,eAAAk5B,EAAA98B,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EA6B0BT,GA7B1B,IAAAkG,EAAAhG,EAAAowB,EAAAnqB,EAAAoqB,EAAAzuB,EAAA,OAAAxB,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UA8BgC,MAApBb,EAASe,OA9BrB,CAAAJ,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EA+B4Cb,EAASC,OA/BrD,UAAAiG,EAAAvF,EAAAG,KA+BoBZ,EA/BpBgG,EA+BoBhG,OAAQrK,EA/B5BqQ,EA+B4BrQ,OACZqK,EAhChB,CAAAS,EAAAE,KAAA,gBAAAF,EAAAK,OAAA,SAiCuB,CAACd,EAAQ,OAjChC,eAAAS,EAAAK,OAAA,SAmCuB,CAAC,KAAMnL,IAnC9B,QAAA8K,EAAAE,KAAA,oBAsCuC,MAApBb,EAASe,OAtC5B,CAAAJ,EAAAE,KAAA,gBAAAF,EAAAK,OAAA,SAuCmB,CAAC,KAAM,OAvC1B,WAyCgC,MAApBhB,EAASe,OAzCrB,CAAAJ,EAAAE,KAAA,YA0CyD,qBAAzCb,EAASL,QAAQkC,IAAI,gBA1CrC,CAAAlB,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GA2CwCb,EAASC,OA3CjD,eAAAkG,EAAAxF,EAAAG,KA2CwBjL,EA3CxBsQ,EA2CwBtQ,MA3CxB8K,EAAAK,OAAA,SA4CuB,CAAC,KAAMnL,IA5C9B,eAAA8K,EAAAE,KAAA,GA8CmCb,EAAS8B,OA9C5C,eA8CsBA,EA9CtBnB,EAAAG,KAAAH,EAAAK,OAAA,SA+CuB,CAAC,KAAM,CACV7N,KAAM,EACNY,KAAM,mCACNX,QAAS,4CACTyC,MAAOiM,KAnD3B,cAuDc,IAAI9N,MAAM,wBAA0BgM,EAASe,OAAS,KAAOf,EAAS4B,YAvDpF,yBAAAjB,EAAAM,SAAAR,MAAA,gBAAA2B,GAAA,OAAAiuB,EAAAnvB,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,WAAAtI,MAAA,eAAAq5B,EAAAj9B,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EA0DmByM,EAAcR,GA1DjC,IAAA/a,EAAAO,KAAA,OAAA6M,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAAlB,OAAA,SA2DetB,MAAMjM,KAAK8L,IAAK,CACnBkC,OAAQ,OACR3B,KAAM,OACN6J,MAAO,WACPhK,QAAS,CACL6B,eAAgB,mBAChB3B,OAAQ,oBAEZwB,KAAMK,KAAKC,UAAUlO,KAAKib,YAAYD,EAAMR,MAE3ClO,KAAK,SAACC,GACH,OAAO9M,EAAKi9B,gBAAgBnwB,MAtE5C,wBAAAkC,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA4O,EAAAI,GAAA,OAAA+tB,EAAAtvB,MAAAzN,KAAA0N,YAAA,MAAAivB,EAAA,wBCSaK,GAAb,SAAA7hB,GAII,SAAA6hB,EAAY7rB,GAAoC,OAAArR,OAAAC,EAAA,EAAAD,CAAAE,KAAAg9B,GAAAl9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAk9B,GAAA78B,KAAAH,KACtCmR,IALd,OAAArR,OAAAe,EAAA,EAAAf,CAAAk9B,EAAA7hB,GAAArb,OAAAiM,EAAA,EAAAjM,CAAAk9B,EAAA,EAAAhxB,IAAA,mBAAAtI,MAAA,SASqByN,GACb,OAAOnR,KAAKwb,SAAS,qBAAsBrK,GACtC7E,KAAK,SAACG,GACH,GAAIA,EAAOA,QACPA,EAAOA,OAAO+C,OAAS,EAAG,CAC1B,IAAMytB,EAAYxwB,EAAOA,OAAO,GAChC,IAAKwwB,EACD,MAAM,IAAI18B,MAAM,gCAEpB,OAAO08B,EAEP,MAAM,IAAI18B,MAAM,sCApBpCy8B,EAAA,CAAyCliB,IAA5BkiB,GAEFz/B,OAAiB,gBCTrB,IA2MH2/B,GAAc,IA3MlB,WASI,SAAAC,EAAA39B,GAAgG,IAAlF49B,EAAkF59B,EAAlF49B,aAAcC,EAAoE79B,EAApE69B,oBAAqBC,EAA+C99B,EAA/C89B,cAAeC,EAAgC/9B,EAAhC+9B,gBAAgCz9B,OAAAC,EAAA,EAAAD,CAAAE,KAAAm9B,GAAAn9B,KAPhGkW,WAOgG,EAAAlW,KANhGw9B,mBAMgG,EAAAx9B,KALhGq9B,yBAKgG,EAAAr9B,KAJhGs9B,mBAIgG,EAAAt9B,KAHhGu9B,qBAGgG,EAAAv9B,KAFhGy9B,kBAEgG,EAC5Fz9B,KAAKkW,MAAQ,IAAIhL,IAGjBlL,KAAKw9B,cAAgBJ,GAAgB,KAIrCp9B,KAAKq9B,oBAAsBA,GAAuB,IAMlDr9B,KAAKs9B,cAAgBA,GAAiB,IACtCt9B,KAAKu9B,gBAAkBA,GAAmB,IAE1Cv9B,KAAKy9B,cAAe,EA1B5B,OAAA39B,OAAAiM,EAAA,EAAAjM,CAAAq9B,EAAA,EAAAnxB,IAAA,aAAAtI,MAAA,WA6BiB,IAAAjE,EAAAO,KACLA,KAAKy9B,eAGTz9B,KAAKy9B,cAAe,EACpBC,OAAOC,WAAW,WACd,IAAMC,EAAW,IAAI1yB,IACjB2yB,GAAe,EACnB/9B,OAAOg+B,KAAKr+B,EAAKyW,OAAOS,QAAQ,SAAC3R,GAC7B,IAAM+4B,EAAOt+B,EAAKyW,MAAM9H,IAAIpJ,GACvBvF,EAAKu+B,UAAUD,KAChBH,EAASvpB,IAAIrP,EAAI+4B,GACjBF,GAAe,KAGvBp+B,EAAKyW,MAAQ0nB,EACbn+B,EAAKg+B,cAAe,EAChBI,GACAp+B,EAAKw+B,cAEVj+B,KAAKq9B,wBAjDhB,CAAArxB,IAAA,YAAAtI,MAAA,SAoDcw6B,GAGN,OAFY,IAAIn7B,MAAO6O,UACDssB,EAAU1oB,UACdxV,KAAKw9B,gBAvD/B,CAAAxxB,IAAA,aAAAtI,MAAA,SA0Dew6B,GACP,OAAOA,EAAUC,WA3DzB,CAAAnyB,IAAA,UAAAtI,MAAA,SA8DYsB,GACJ,QAA2BmlB,IAAvBnqB,KAAKkW,MAAM9H,IAAIpJ,GACf,OAAO,KAEX,IAAMo5B,EAASp+B,KAAKkW,MAAM9H,IAAIpJ,GAC9B,IAAIhF,KAAKg+B,UAAUI,GAInB,OAAOA,EAHHp+B,KAAKkW,MAAMwF,OAAO1W,KApE9B,CAAAgH,IAAA,gBAAAtI,MAAA,SA0EkBq6B,GAA4C,IAAApyB,EAAA3L,KACtD,OAAO,IAAIq+B,KAAuB,SAAC9iB,EAASqL,GACxC,IAAM0X,GAAU,IAAIv7B,MAAO6O,WAGZ,SAAT2sB,IAIFb,OAAOC,WAAW,WACd,GAAIhyB,EAAKuK,MAAMI,IAAIynB,EAAK/4B,IAQpB,OAAO2G,EAAK6yB,gBAAgB,CACxBx5B,GAAI+4B,EAAK/4B,GACTy5B,QAASV,EAAKU,UAEbnyB,KAAK,WAIFiP,EAAQ5P,EAAKuK,MAAM9H,IAAI2vB,EAAK/4B,OAE/B05B,MAAM,SAACC,GACJ/X,EAAO+X,KAGnB,GAAKZ,EAAKI,SAEH,CACH,IAAMS,GAAU,IAAI77B,MAAO6O,UAAY0sB,EACnCM,EAAUjzB,EAAK2xB,eACf3xB,EAAKuK,MAAMwF,OAAOqiB,EAAK/4B,IACvB4hB,EAAO,IAAIrmB,MACP,iEACEoL,EAAK2xB,cAAgB,YAAcsB,KAEzCL,SATJhjB,EAAQwiB,IAYbpyB,EAAK4xB,iBAEZgB,OAzHZ,CAAAvyB,IAAA,kBAAAtI,MAAA,SAAA+O,GA6HiF,IAAAoF,EAAA7X,KAA3DgF,EAA2DyN,EAA3DzN,GAAIy5B,EAAuDhsB,EAAvDgsB,QAElBz+B,KAAK6+B,YAAY75B,EAAIy5B,GAGrB,IAAMK,EAAeL,IAChBnyB,KAAK,SAACG,GAEH,OADAoL,EAAKknB,QAAQ/5B,EAAIyH,EAAQgyB,GAClBhyB,IAEVuyB,QAAQ,WAIDF,EAAaG,eACbpnB,EAAK3B,MAAM9H,IAAIpJ,KAG3B,OAAO85B,IA/If,CAAA9yB,IAAA,kBAAAtI,MAAA,SAAAgP,GAkJiF,IAA3D1N,EAA2D0N,EAA3D1N,GAAIy5B,EAAuD/rB,EAAvD+rB,QACZL,EAASp+B,KAAKkW,MAAM9H,IAAIpJ,GAC9B,GAAIo5B,EAAQ,CACR,IAAIp+B,KAAKg+B,UAAUI,GAEZ,OAAIp+B,KAAKk/B,WAAWd,GAChBp+B,KAAKm/B,cAAcf,GACrB9xB,KAAK,SAAC8xB,GACH,OAAOA,EAAO16B,QAGf26B,KAAS9iB,QAAQ6iB,EAAO16B,OAP/B1D,KAAKkW,MAAMwF,OAAO1W,GAW1B,OAAOhF,KAAKw+B,gBAAgB,CAAEx5B,KAAIy5B,cAjK1C,CAAAzyB,IAAA,cAAAtI,MAAA,SAoKgBsB,EAAYy5B,GACpBz+B,KAAKkW,MAAM7B,IAAIrP,EAAI,CACfA,GAAIA,EACJwQ,WAAW,IAAIzS,MAAO6O,UACtBusB,UAAU,EACVz6B,MAAO,KACP+6B,QAASA,MA1KrB,CAAAzyB,IAAA,UAAAtI,MAAA,SA8KYsB,EAAYtB,EAAU+6B,GAC1B,GAAIz+B,KAAKkW,MAAMI,IAAItR,GAAK,CACpB,IAAM+4B,EAAO/9B,KAAKkW,MAAM9H,IAAIpJ,GACxB+4B,GAAQA,EAAKI,UACbJ,EAAKI,UAAW,EAChBJ,EAAKr6B,MAAQA,EACbq6B,EAAKU,QAAUA,GAGfz+B,KAAKkW,MAAM7B,IAAIrP,EAAI,CACfA,GAAIA,EACJwQ,WAAW,IAAIzS,MAAO6O,UACtB6sB,QAASA,EACTN,UAAU,EACVz6B,MAAOA,SAIf1D,KAAKkW,MAAM7B,IAAIrP,EAAI,CACfA,GAAIA,EACJwQ,WAAW,IAAIzS,MAAO6O,UACtB6sB,QAASA,EACTN,UAAU,EACVz6B,MAAOA,IAGf1D,KAAKi+B,iBAxMbd,EAAA,GA2MkB,CAAe,CAC7BC,aAAc,KACdC,oBAAqB,IACrBC,cAAe,IACfC,gBAAiB,MAuBR6B,GAAb,WASI,SAAAA,EAAAzsB,GAAsF,IAAxE9G,EAAwE8G,EAAxE9G,MAAOC,EAAiE6G,EAAjE7G,IAAK2O,EAA4D9H,EAA5D8H,QAAS4kB,EAAmD1sB,EAAnD0sB,QAASC,EAA0C3sB,EAA1C2sB,WAMxC,GANkFx/B,OAAAC,EAAA,EAAAD,CAAAE,KAAAo/B,GAAAp/B,KARtF6L,WAQsF,EAAA7L,KAPtFq/B,aAOsF,EAAAr/B,KANtFs/B,gBAMsF,EAAAt/B,KALtF8L,SAKsF,EAAA9L,KAJtFya,aAIsF,EAElFza,KAAK6L,MAAQA,EACb7L,KAAKq/B,QAAUA,GAAW,IAC1Br/B,KAAKs/B,WAAaA,GAAc,MAE3BxzB,EACD,MAAM,IAAIvL,MAAM,8CAEpBP,KAAK8L,IAAMA,EAEX9L,KAAKya,QAAUA,GAAW,KACV,SAAZA,IACAza,KAAKya,QAAU,MAtB3B,OAAA3a,OAAAiM,EAAA,EAAAjM,CAAAs/B,EAAA,EAAApzB,IAAA,UAAAtI,MAAA,WA2BQ,MAAO,CACH27B,QAASr/B,KAAKq/B,QACdxN,cAAe7xB,KAAK6L,MACpByzB,WAAYt/B,KAAKs/B,cA9B7B,CAAAtzB,IAAA,YAAAtI,MAAA,WAmCQ,OAAqC1D,KAAK0a,YAAand,SAnC/D,CAAAyO,IAAA,WAAAtI,MAAA,WAuCQ,IAAI67B,EAMJ,OAFIA,EAHCv/B,KAAKya,QAGKza,KAAKw/B,YAAc,IAAMx/B,KAAKya,QAF9Bza,KAAKw/B,YAAc,QAI3BD,IA7Cf,CAAAvzB,IAAA,YAAAtI,MAAA,SAgDc+6B,GACN,OAAOvB,GAAYuC,gBAAgB,CAC/Bz6B,GAAIhF,KAAKu/B,WACTd,QAASA,MAnDrB,CAAAzyB,IAAA,eAAAtI,MAAA,WA2DmB,IAAAg8B,EAAA1/B,KACX,OAAOA,KAAK2/B,UAAU,WAGDD,EAAKF,YACTE,EAAKjlB,QAHlB,IAOMmlB,EAAS,IAAI5C,GAAoB,CACnClxB,IAAK4zB,EAAK5zB,IACVD,MAAO6zB,EAAK7zB,QAGhB,OAAOwyB,KAAS9iB,QACZqkB,EAAOC,iBAAiB,CACpBC,YAAaJ,EAAKF,YAClB/kB,QAASilB,EAAKjlB,eA5ElC,CAAAzO,IAAA,WAAAtI,MAAA,SAkFaq8B,EAAkB5uB,GAAa,IAAA6uB,EAAAhgC,KACpC,OAAOA,KAAKigC,eACP3zB,KAAK,SAAC4zB,GACH,IAAMN,EAAS,IAAIrD,GAAwB,CACvCh/B,OAAQ2iC,EAAcJ,YACtBh0B,IAAKo0B,EAAcp0B,IACnBD,MAAOm0B,EAAKn0B,QAEhB,OAAOwyB,KAAS9iB,QACZqkB,EAAOpkB,SAASukB,EAAU5uB,MAGjCutB,MAAM,SAACC,GAEJ,MADAj9B,QAAQU,MAAM,UAAYu8B,EAAIr+B,KAAO,MAAQq+B,EAAIh/B,QAASg/B,GACpDA,QAhGtBS,EAAA,GAAaA,GAOF7hC,cC9MJ,IChDKqB,GAWAuhC,GA4DAC,GDvBCC,GAAb,SAAAC,GAII,SAAAD,EAAYlvB,GAAuC,OAAArR,OAAAC,EAAA,EAAAD,CAAAE,KAAAqgC,GAAAvgC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAugC,GAAAlgC,KAAAH,KACzCmR,IALd,OAAArR,OAAAe,EAAA,EAAAf,CAAAugC,EAAAC,GAAAxgC,OAAAiM,EAAA,EAAAjM,CAAAugC,EAAA,EAAAr0B,IAAA,iBAAAtI,MAAA,eAAA68B,EAAAzgC,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EASyB9L,GATzB,IAAA1B,EAAAiT,EAAAhG,EAAA,OAAAI,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWsCpN,KAAKwb,SAAS,kBAAmB,CAAC,CAC5Dta,KAAMA,KAZlB,UAAA1B,EAAA0N,EAAAG,KAAAoF,EAAA3S,OAAAsU,GAAA,EAAAtU,CAAAN,EAAA,GAWeiN,EAXfgG,EAAA,GAAAA,EAAA,IAiBYhG,IAAUA,EAAO,GAjB7B,CAAAS,EAAAE,KAAA,gBAAAF,EAAAK,OAAA,SAkBmBd,EAAO,IAlB1B,cA4BkB,IAAIlM,MAAM,sBA5B5B,yBAAA2M,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAA4xB,EAAA9yB,MAAAzN,KAAA0N,YAAA,MAAA2yB,EAAA,CAA4CjB,IEM5C,SAASoB,GAAcC,GACnB,IACMC,EADQ,6EACUC,KAAKF,GAC7B,IAAKC,EACD,MAAM,IAAIE,UAAU,2BAA6BH,GAGrD,IAAMI,EAASH,EAAU,GAAKA,EAAU,GAAK,IAAMA,EAAU,IACvDI,EAAgBJ,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAAKG,EAC9I,OAAO,IAAI99B,KAAK+9B,GAGb,SAASC,GAAsBC,GAClC,MAAO,CACHh8B,GAAIg8B,EAAO,GACX1gC,KAAM0gC,EAAO,GACbliB,MAAOkiB,EAAO,GACdprB,WAAY4qB,GAAcQ,EAAO,IACjCC,YAAaD,EAAO,GACpBE,eAAgBF,EAAO,GACvBG,qBAAoC,MAAdH,EAAO,GAC7BI,WAAYJ,EAAO,GACnBK,SAAUL,EAAO,IAIlB,SAASM,GAAmBC,GAC/B,IAAMrgC,EAAOqgC,EAAK,GAAG3gC,MAAM,QAE3B,MAAO,CACHoE,GAAIu8B,EAAK,GACTjhC,KAAMihC,EAAK,GAEXrgC,KAAM,CACF8D,GAAIu8B,EAAK,GACThkC,OAAQ2D,EAAK,GACbZ,KAAMY,EAAK,GACXsgC,aAAcvhB,SAAS/e,EAAK,GAAI,IAChCugC,aAAcxhB,SAAS/e,EAAK,GAAI,KAEpCwgC,QAASlB,GAAce,EAAK,IAC5B9mB,QAAS8mB,EAAK,GACdI,QAASJ,EAAK,GACdzvB,YAAayvB,EAAK,GAClBK,cAAeL,EAAK,GACpBM,SAAUN,EAAK,GACftI,KAAMsI,EAAK,GACXF,SAAUE,EAAK,IACfO,IAAKP,EAAK,GAAK,IAAMA,EAAK,GAAK,IAAMA,EAAK,IFtDrClB,GAEF9iC,OAAiB,4BClDhBqB,yGAWAuhC,6HA4DAC,2DAcL,IAAM2B,GAAb,WAII,SAAAA,EAAY5wB,GAA+BrR,OAAAC,EAAA,EAAAD,CAAAE,KAAA+hC,GAAA/hC,KAF3CmR,YAE0C,EACtCnR,KAAKmR,OAASA,EALtB,OAAArR,OAAAiM,EAAA,EAAAjM,CAAAiiC,EAAA,EAAA/1B,IAAA,mBAAAtI,MAAA,eAAAs+B,EAAAliC,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAU2BmI,GAV3B,IAAA8sB,EAAAhsB,EAAAisB,EAAA1iC,EAAAiT,EAAA0vB,EAAA17B,EAAA27B,EAAAC,EAAA,OAAAx1B,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAWc60B,EAAyB,IAAI5B,GAAuB,CACtDv0B,IAAK9L,KAAKmR,OAAOmxB,iBACjBz2B,MAAO7L,KAAKmR,OAAOtF,MACnBwzB,QAAS,MAGPppB,EAAe,IAAIye,GAA2B,CAChD7oB,MAAO7L,KAAKmR,OAAOtF,MACnBtC,SAAUvJ,KAAKmR,OAAO5H,SACtB6M,iBAAkBpW,KAAKmR,OAAOiF,iBAC9B6G,sBAAuBjd,KAAKmR,OAAO8L,wBAIjCilB,EAAgB,IAAIzb,GAA2B,CACjD5a,MAAO7L,KAAKmR,OAAOtF,MACnBtC,SAAUvJ,KAAKmR,OAAO5H,SACtB6M,iBAAkBpW,KAAKmR,OAAOiF,mBA5B1ClJ,EAAAE,KAAA,EA+BwEsL,QAAQC,IAAI,CACxEspB,EAAuBM,eAAe,QACtCtsB,EAAaiP,OAAO/P,GACpB+sB,EAAcM,yBAAyBrtB,KAlCnD,UAAA3V,EAAA0N,EAAAG,KAAAoF,EAAA3S,OAAAsU,GAAA,EAAAtU,CAAAN,EAAA,GA+Be2iC,EA/Bf1vB,EAAA,GA+BiChM,EA/BjCgM,EAAA,GA+B+C2vB,EA/B/C3vB,EAAA,GAqCYhM,EAAaqC,OAAS4rB,GAA0B/V,qBArC5D,CAAAzR,EAAAE,KAAA,eAsCkB,IAAI7M,MAAM,mEAtC5B,eAyCc8hC,EAAkB57B,EAAaqZ,WAAWzW,IAAI,SAAC2a,GACjD,OAAOA,EAAUlS,cA1C7B5E,EAAAK,OAAA,SA6Ce40B,EAAiBriB,WACnBzW,IAAI,SAACo5B,GACF,MAAO,CACHC,cAAwBC,GAAmCF,EAAIG,IAC/DC,WAAYF,GAAgCF,EAAIA,QAGvDz4B,OAAO,SAACy4B,GACL,MAAoD,UAA5CA,EAAIC,cAAcrB,SAASyB,eAEtCz5B,IAAI,SAAC2a,GAeF,MAAO,CACH1W,QAbyD,IAAzD+0B,EAAgB1hC,QAAQqjB,EAAU0e,cAAc19B,IACvCpG,GAAe23B,WACjB6L,EAAgBvrB,KAAK,SAACrC,GAG7B,OAAQA,EAAQtC,eAAiBuU,GAAiC3R,WAC9DN,EAAQsB,cAAgBnE,OAAOqS,EAAU0e,cAAc19B,MAElDpG,GAAe43B,UAEf53B,GAAe0E,KAIxB0gB,UAAW,CACP+e,OAAQ5C,GAAgBphB,MACxBqB,SAAU4D,EAAU0e,cAAcvB,qBAClCrvB,YAAakS,EAAU0e,cAAc19B,GACrCg+B,SAAUhf,EAAU6e,WAAW79B,GAC/BuX,MAAOyH,EAAU0e,cAAcrB,SAAS4B,oBACxCnkB,MAAOkF,EAAU0e,cAAc5jB,MAC/BokB,YAAalf,EAAU6e,WAAWnB,QAClCyB,YAAanf,EAAU6e,WAAWlB,YAK7Cze,KAAK,SAACpW,EAAG+V,GACN,OAAQ/V,EAAEkX,UAAUzH,MAAMuG,cAAcD,EAAEmB,UAAUzH,UAtFpE,yBAAArP,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAAqzB,EAAAv0B,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,YAAAtI,MAAA,SAqIcwf,GACN,OAAQA,GACJ,KAAKkd,GAAKgD,MACN,OAAO,SAACt2B,EAA0B+V,GAC9B,OAAO/V,EAAEkX,UAAUzH,MAAMuG,cAAcD,EAAEmB,UAAUzH,QAE3D,KAAK6jB,GAAKiD,WACN,OAAO,SAACv2B,EAA0B+V,GAC9B,OAAOA,EAAEmB,UAAUkf,YAAYtxB,UAAY9E,EAAEkX,UAAUkf,YAAYtxB,WAE3E,QACI,MAAM,IAAIrR,MAAM,wBAhJhC,CAAAyL,IAAA,6BAAAtI,MAAA,SA0J+Boc,EAA0CoD,GACjE,IAAIogB,EAAStjC,KAAKujC,UAAUrgB,GAE5B,OAAOpD,EAAWoD,KAAKogB,GAAQzoB,MAAM,KA7J7C,CAAA7O,IAAA,eAAAtI,MAAA,eAAA8/B,EAAA1jC,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EAqKuBuD,GArKvB,IAAA2xB,EAAA/wB,EAAAC,EAAA+wB,EAAAhB,EAAA5sB,EAAA6tB,EAAA/wB,EAAAC,EAAA+wB,EAAAf,EAAAgB,EAAA,OAAAh3B,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAsKcq2B,EAAkB,IAAIlH,GAAwB,CAChDh/B,OAAQ,YACRuO,IAAK9L,KAAKmR,OAAO2yB,oBACjBj4B,MAAO7L,KAAKmR,OAAOtF,QAzK/B4C,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,EA4KoEq2B,EAAgBjoB,SAAS,qBAAsB,CAAC,CACpGxW,GAAI8M,KA7KpB,UAAAY,EAAAjE,EAAApB,KAAAsF,EAAA7S,OAAAsU,GAAA,EAAAtU,CAAA4S,EAAA,GA4KmBgxB,EA5KnB/wB,EAAA,IAAAA,EAAA,IAAAlE,EAAArB,KAAA,gBAAAqB,EAAAlB,OAAA,SAkLuB,CACHuE,YAAaA,EACbixB,OAAQ5C,GAAgB78B,OApL5C,WAwLkBo/B,EAAwCC,GAAmCe,EAAiB,IAE5F5tB,EAAc4sB,EAAcrB,SAASrd,UA1LvD,CAAAvV,EAAArB,KAAA,gBAAAqB,EAAAlB,OAAA,SA4LuB,CACHuE,YAAaA,EACbixB,OAAQ5C,GAAgB78B,OA9L5C,eAiMkB0/B,EAAW/iB,SAASnK,EAAa,IAjMnDrH,EAAArB,KAAA,GAmM8Dq2B,EAAgBjoB,SAAS,mBAAoB,CAAC,CAC5FuoB,QAAS,CAAC,CACNC,KAAMlyB,EACNmyB,MAAOjB,IAEXkB,gBAAiB,EACjBC,aAAc,KAzM9B,WAAAvxB,EAAAnE,EAAApB,KAAAwF,EAAA/S,OAAAsU,GAAA,EAAAtU,CAAA8S,EAAA,GAmMmBgxB,EAnMnB/wB,EAAA,IAAAA,EAAA,IAAApE,EAAArB,KAAA,gBAAAqB,EAAAlB,OAAA,SA6MuB,CACHuE,YAAaA,EACbixB,OAAQ5C,GAAgB78B,OA/M5C,QAmNkBu/B,EAAsCF,GAAgCiB,EAAc,GAAGQ,MAAM,IAnN/G31B,EAAAC,GAsNoBg0B,EAAcxB,eAtNlCzyB,EAAArB,KAuNqB,MAvNrBqB,EAAAC,GAAA,GA8NqB,MA9NrBD,EAAAC,GAAA,GAiOqB,MAjOrBD,EAAAC,GAAA,GAoOqB,MApOrBD,EAAAC,GAAA,wBAwNwBg0B,EAAcvB,qBAxNtC,CAAA1yB,EAAArB,KAAA,gBAyNwB21B,EAAS5C,GAAgBjhB,KAzNjDzQ,EAAAlB,OAAA,0BA4N8B,IAAIhN,MAAM,wDA5NxC,eA+NoBwiC,EAAS5C,GAAgBjhB,KA/N7CzQ,EAAAlB,OAAA,2BAkOoBw1B,EAAS5C,GAAgBhhB,KAlO7C1Q,EAAAlB,OAAA,2BAsOwBw1B,EADAL,EAAc5jB,QAAU9e,KAAKmR,OAAO5H,SAC3B42B,GAAgBphB,MAEhBohB,GAAgB12B,MAxOjDgF,EAAAlB,OAAA,0BA4O0B,IAAIhN,MAAM,iCAAmCmiC,EAAcxB,gBA5OrF,eAAAzyB,EAAAlB,OAAA,SA+OmB,CACHuE,YAAa4wB,EAAc19B,GAC3B+9B,OAAQA,EACR3iB,SAAUsiB,EAAcvB,qBACxB6B,SAAUH,EAAW79B,GACrBuX,MAAOmmB,EAAcrB,SAAS4B,qBAAuB,UACrDnkB,MAAO4jB,EAAc5jB,MACrBokB,YAAaL,EAAWnB,QACxByB,YAAaN,EAAWlB,UAvPxC,cAAAlzB,EAAAtB,KAAA,GAAAsB,EAAA2I,GAAA3I,EAAA,SA0PY/M,QAAQU,MAAM,4BAAdqM,EAAA2I,IA1PZ3I,EAAA2I,GAAA,yBAAA3I,EAAAjB,SAAAe,EAAAvO,KAAA,6BAAA4O,GAAA,OAAA40B,EAAA/1B,MAAAzN,KAAA0N,YAAA,MAAAq0B,EAAA,GExCO,SAASsC,GAAWC,GACvB,sBAAA9kC,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAA6mB,EAAAiS,EAAAC,EAAA,OAAA/3B,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EArBG,CACHrjC,KAAM7B,EAAWwlC,2BAmBdJ,EAMCD,IANDE,EAAAD,EAIC9S,KAAQE,cAAiBhmB,EAJ1B64B,EAI0B74B,MAJ1B64B,EAIiCn7B,SACzBmpB,EALR+R,EAKCjS,IAAOE,OAGLiS,EAAQ,IAAIngB,GAAoB,CAClC3Y,QACAoR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAVpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAcoBu3B,EAAMK,QAAQV,GAdlC,OAcOhvB,EAdPpI,EAAAG,KAeCk3B,GA9BsBjvB,EA8BKA,EA7B5B,CACHpU,KAAM7B,EAAWg4B,2BACjB/hB,KAAMA,KAYHpI,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAiBCq3B,GAzBoBniC,EAyBK,CACrB1C,KAAM,QACNC,QAASuN,EAAAwB,GAAG/O,SA1BjB,CACHuB,KAAM7B,EAAW4lC,yBACjB7iC,MAAOA,KAKJ,yBAAA8K,EAAAM,OARJ,IAAyBpL,EAPEkT,GAevBtI,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GAiHG,SAASw3B,GAAcpzB,GAC1B,sBAAAY,EAAA5S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAW,EAAAC,EAAAv5B,EAAAtC,EAAAmpB,EAAA2S,EAAAC,EAAA,OAAAz4B,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cACHm3B,EAA6B,CACzBrjC,KAAM7B,EAAWkmC,8BAFlBJ,EAQCX,IARDY,EAAAD,EAMCxT,KAAQE,cAAiBhmB,EAN1Bu5B,EAM0Bv5B,MAAOtC,EANjC67B,EAMiC77B,SACzBmpB,EAPRyS,EAOC3S,IAAOE,OAGL2S,EAAkB,IAAIG,GAA8B,CACtD35B,QAAOtC,WACPu6B,oBAAqBpR,EAAOoS,SAASW,UAAU35B,IAC/CsK,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCw2B,iBAAkB5P,EAAOoS,SAASa,cAAc75B,IAChDmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAfpDiD,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAmByBi4B,EAAgBO,aAAa9zB,GAnBtD,OAmBOkS,EAnBPjV,EAAA1B,KAoBCk3B,EAA+B,CAC3BrjC,KAAM7B,EAAWq4B,8BACjB1T,UAAWA,IAtBhBjV,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAL,GAAAK,EAAA,SAyBCw1B,EAA6B,CACzBrjC,KAAM7B,EAAWwmC,4BACjBzjC,MAAO,CACH1C,KAAMqP,EAAAL,GAAGpO,KACTX,QAASoP,EAAAL,GAAG/O,WA7BrB,yBAAAoP,EAAAvB,SAAAsB,EAAA,kBAAP,gBAAAyB,EAAAK,GAAA,OAAA8B,EAAAjF,MAAAzN,KAAA0N,YAAA,OCxJEo4B,eAEF,SAAAA,EAAYjN,GAAoB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,IAC5BrmC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KAAM64B,KAFVkN,WACgC,EAE5BtmC,EAAKsmC,MAAQ,EAFetmC,wEAO5B,OADAO,KAAK+lC,OAAS,EACV/lC,KAAK64B,MAAMvjB,KAEPwjB,EAAA,cAACkN,GAAD,CAAO1wB,KAAMtV,KAAK64B,MAAMvjB,KAAMsmB,WAAY57B,KAAK64B,MAAM+C,WAAYH,WAAYz7B,KAAK64B,MAAM4C,aAIxF3C,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAAa,IAD5B,gEAQHlB,KAAK64B,MAAMvjB,MACZtV,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAMtvB,iBAxBpBqxB,aAiENsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHvjB,KAAMtU,EAAMm2B,SAAS1Z,MAAM2Z,KAAKhpB,IAAIyqB,EAAMtvB,YAIlD,SAA4Bg7B,GACxB,MAAO,CACH0B,OAAQ,SAAC3B,GACLC,EAASlX,GAAmBiX,OAKzB4B,CAA8FJ,WC1EtG,SAASK,GAAYC,GAAkD,IAMtEC,EAASC,EAAYC,EANeC,EAAkC94B,UAAA8B,OAAA,QAAA2a,IAAAzc,UAAA,GAAAA,UAAA,GAAJ,GAChE+4B,EAAUD,EAAQE,KAAO,IAAI3jC,KAE7B67B,EAAUjkB,KAAK8H,OAAOgkB,EAAQ70B,UAAYw0B,EAASx0B,WAAa,KAChE+0B,EAAahsB,KAAKisB,IAAIhI,GAI5B,GAAI+H,EAAa,OADDH,EAAQK,eAAiB,IACA,CACrC,GAAmB,IAAfF,EACA,MAAO,MACAA,EAAa,IACpBN,EAAUzH,EACV0H,EAAaK,EACbJ,EAAO,UACAI,EAAa,MACpBN,EAAU1rB,KAAK8H,MAAMmc,EAAU,IAC/B0H,EAAa3rB,KAAK8H,MAAMkkB,EAAa,IACrCJ,EAAO,UACAI,EAAa,OACpBN,EAAU1rB,KAAK8H,MAAMmc,EAAU,MAC/B0H,EAAa3rB,KAAK8H,MAAMkkB,EAAa,MACrCJ,EAAO,SAEPF,EAAU1rB,KAAK8H,MAAMmc,EAAO,OAC5B0H,EAAa3rB,KAAK8H,MAAMkkB,EAAU,OAClCJ,EAAO,OAGPD,EAAa,IACbC,GAAQ,KAGZ,IAAIO,EAAS,KACTC,EAAS,KAOb,OANIV,EAAU,EACVS,EAAS,KACFT,EAAU,IACjBU,EAAS,QAGLD,EAASA,EAAS,IAAM,IAAMR,EAAa,IAAMC,GAAQQ,EAAS,IAAMA,EAAS,IAGzF,OAAIP,EAAQQ,aAAeP,EAAQQ,gBAAkBb,EAASa,cACnDC,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,IAAK,YACNC,OAAOlB,GAEHc,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAOlB,GC1CtB,IAAMoB,GAAY,CAEd,CAAC,IAAW,KAEZ,CAAC,KAAgB,KAEjB,CAAC,MAAqB,MAEtB,CAACC,IAAU,QAGMC,eAGjB,SAAAA,EAAY7O,GAA6B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA0nC,IACrCjoC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4nC,GAAAvnC,KAAAH,KAAM64B,KAHV8O,cAEyC,EAAAloC,EADzCmoC,cACyC,EAGrCnoC,EAAKkoC,SAAW,KAEhBloC,EAAKuB,MAAQ,CACT0lC,IAAK,IAAI3jC,MAGbtD,EAAKmoC,SAAWnoC,EAAKooC,eATgBpoC,8EAcrC,IADA,IAAMm/B,EAAU5+B,KAAKgB,MAAM0lC,IAAI90B,UAAY5R,KAAK64B,MAAMttB,KAAKqG,UAC3DiC,EAAA,EAAAA,EAA+B2zB,GAA/Bh4B,OAAAqE,IAA0C,KAAAnB,EAAX80B,GAAW3zB,GAAApB,EAAA3S,OAAAsU,GAAA,EAAAtU,CAAA4S,EAAA,GAA9Bo1B,EAA8Br1B,EAAA,GAAxBm1B,EAAwBn1B,EAAA,GACtC,GAAImsB,EAAUkJ,EACV,OAAOF,EAGf,MAAM,IAAIrnC,MAAM,kEAIhBP,KAAKu7B,SAAS,CAAEmL,IAAK,IAAI3jC,OACzB,IAAM6kC,EAAW5nC,KAAK6nC,eAClB7nC,KAAK4nC,WAAaA,IAClB5nC,KAAK4nC,SAAWA,EAChB5nC,KAAK+nC,mEAIQ,IAAAp8B,EAAA3L,KACbA,KAAK2nC,UACLjK,OAAOsK,cAAchoC,KAAK2nC,UAE9B3nC,KAAK2nC,SAAWjK,OAAOuK,YAAY,WAC/Bt8B,EAAKu8B,kBACNloC,KAAK4nC,sDAIR5nC,KAAK+nC,oEAID/nC,KAAK2nC,UACLjK,OAAOsK,cAAchoC,KAAK2nC,2CAK9B,IAA+B,IAA3B3nC,KAAK64B,MAAMsP,YACX,OACIrP,EAAA,0BACKqN,GAAYnmC,KAAK64B,MAAMttB,KAAM,CAAEs7B,cAAe,GAAIH,IAAK1mC,KAAKgB,MAAM0lC,OAK/E,IAcI7K,EAdEuM,EACFtP,EAAA,0BAEQoO,KAAKC,eAAe,QAAS,CACzBC,MAAO,QACPC,IAAK,UACLE,KAAM,UACNc,KAAM,UACNC,OAAQ,UACRC,aAAc,UACfjB,OAAOtnC,KAAK64B,MAAMttB,OAejC,OATIswB,EADA77B,KAAK64B,MAAM2P,cAEP1P,EAAA,0BACK94B,KAAK64B,MAAM2P,cACXJ,GAICA,EAGVtP,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACnCsK,GAAYnmC,KAAK64B,MAAMttB,KAAM,CAAEs7B,cAAe,GAAIH,IAAK1mC,KAAKgB,MAAM0lC,cAzFtC9L,aCV7C,SAASM,GAAYC,GACjB,OAAQA,GACJ,KAAKx9B,EAAcy9B,QACf,OAAOz9B,EAAcoL,OACzB,KAAKpL,EAAcoL,OACf,OAAOpL,EAAcy9B,aAIZqN,eACjB,SAAAA,EAAY5P,GAA+B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAyoC,IACvChpC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2oC,GAAAtoC,KAAAH,KAAM64B,KACD73B,MAAQ,CACTs6B,KAAM39B,EAAcy9B,SAHe37B,8EAQvCO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,2CAI1B5c,GACP,OACIoa,EAAA,cAAC4P,GAAD,CAASzkC,QAASya,EAAIza,QAASg1B,KAAM,GAAIQ,iBAAkB/a,EAAIpe,KAAM6U,eAAgBuJ,EAAI1Z,2CAInF0Z,GACV,IAAKA,EAAIpa,QACL,OACIw0B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACVzf,MAAM,iDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,+BAI9C,IAAMkC,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,+EAKR,OACIA,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAOsf,GAEP/C,EAAA,mBAAGmD,KAAMvd,EAAIpa,QAAS43B,OAAO,UACzBpD,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,yDAOVwd,GACjB,OAAKA,EAAI6C,eAQLuX,EAAA,0BACKpa,EAAI6C,gBAPLuX,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,SAAtB,kDAYMjb,GACd,OAAuB,GAAnBA,EAAI2C,YAEAyX,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,SAAtB,QAMJb,EAAA,0BACKpa,EAAI2C,YAAc,0CAKhB3C,GACX,OAAQA,EAAIsC,UACR,KAAM0T,GAAoCpxB,KACtC,OACIw1B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEAENuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAI3B,KAAMwzB,GAAoCxV,KACtC,OACI4Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAGvB,KAAMwzB,GAAoC9V,uBACtC,OACIka,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,sCAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,YALtC,oBAKqEb,EAAA,kCALrE,eASR,KAAMpE,GAAoC7V,0BACtC,OACIia,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,mDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,WAG9C,KAAMjF,GAAoC7qB,OACtC,OACIivB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,yCAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAGvB,KAAMwzB,GAAoCjrB,MACtC,OACIqvB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,iDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAGvB,KAAMwzB,GAAoC3V,MACtC,OACI+Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,0CAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,oDAQ3B,OADYlB,KAAK64B,MAAMpyB,aACfb,UAEAkzB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEACNuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAMnB43B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,iEACNuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,wDAOZwd,GACf,IACIkqB,EACJ,GAFclqB,EAAIgB,eAAkBhB,EAAI9I,WAAWhE,UAAY8M,EAAIgB,cAAc9N,UAEtE,CAEPg3B,EACI9P,EAAA,yBACIA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,WAAWzf,MAHxB,0FAIFuc,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,MAAOW,SAAU,SAEnCxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,mBAMxCD,EACI9P,EAAA,yBACIA,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,cAAeW,SAAU,SAC3CxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,aAMxC,IAEIC,EAWJ,OAHIA,EAAgB,KAIhBhQ,EAAA,yBACK8P,EACAE,4CAMT,GAAM9oC,KAAK64B,MAAMpyB,aAAaua,WAAa0T,GAAoCjrB,OAC3EzJ,KAAK64B,MAAMpyB,aAAaua,WAAa0T,GAAoC3V,MAD7E,CAIA,IAAIpf,EACAopC,EACJ,OAAQ/oC,KAAK64B,MAAMmQ,oBACf,KAAKtU,GAAuBpxB,KAExB3D,EAAU,mDACVopC,EAAY,2BACZ,MACJ,KAAKrU,GAAuB1xB,IACxBrD,EAAU,kEACVopC,EAAY,MACZ,MACJ,KAAKrU,GAAuBzI,IACxBtsB,EAAU,gDACVopC,EAAY,OACZ,MACJ,KAAKrU,GAAuBuU,aACxB,OACJ,QAEI,YADAvnC,QAAQC,KAAK,gCAAkC3B,KAAK64B,MAAMmQ,oBAGlE,IAAMzsB,EACFuc,EAAA,0BACKn5B,GAGT,OACIm5B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,WACVzf,MAAOA,GACPuc,EAAA,sBAAMiB,MAAO,CAAEJ,MAAOoP,EAAWzO,SAAU,QACvCxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,wDAOpC,IAAMK,EACFpQ,EAAA,yBACIA,EAAA,yJAIAA,EAAA,mBAAGiB,MAAO,CAAES,WAAY,YAAa2O,WAAY,SAC5CzL,OAAO0L,SAASC,OADrB,SACmCrpC,KAAK64B,MAAMpyB,aAAazB,KAU7DskC,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CACIpN,QARU,SAAA38B,GAA8BA,EAA3BwM,IACjBw9B,KAAM3pC,KAAK,CACP0c,MAAO,gBACPktB,QAASP,MAOTpQ,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,QAAf,mBAKR,OACI8sB,EAAA,cAAC6Q,GAAA,EAAD,CACIC,QAASN,EACTO,QAAS,CAAC,QAAS,gBACnB/Q,EAAA,mBAAGmD,KAAM,UAAYj8B,KAAK64B,MAAMpyB,aAAazB,IACzC8zB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,oDAMVwd,GACb,OACIoa,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB6Q,EAAI1Z,KACjChF,KAAK26B,WAAWjc,KAGzBoa,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,qBAAK4C,UAAU,iCACV17B,KAAKgqC,eAAetrB,IAEzBoa,EAAA,qBAAK4C,UAAU,gCACV17B,KAAKiqC,iBAGVnR,EAAA,qBAAK4C,UAAU,iCACV17B,KAAKkqC,cAAcxrB,KAG5Boa,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,qCACV17B,KAAKmqC,mBAAmBzrB,IAE7Boa,EAAA,qBAAK4C,UAAU,qCACV17B,KAAKoqC,kBAEVtR,EAAA,qBAAK4C,UAAU,wCACV17B,KAAKqqC,2DAOZ9nB,GACV,OAAO2kB,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,IAAK,UACLE,KAAM,UACNc,KAAM,UACNC,OAAQ,UACRgC,OAAQ,UACR/B,aAAc,UACfjB,OAAO/kB,yCAGA7D,GACV,OACIoa,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,sEACVhd,EAAI/Z,mBAGTm0B,EAAA,qBAAK4C,UAAU,6DACX5C,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,sBAAM4C,UAAU,4CAAhB,UAEJ5C,EAAA,qBAAK4C,UAAU,mCAEX5C,EAAA,cAACyR,GAAD,CAAOhhC,SAAUmV,EAAII,MAAMvV,SAAUqyB,WAAY,GAAIH,YAAY,EAAOzvB,IAAK0S,EAAII,MAAMvV,aAG/FuvB,EAAA,qBAAK4C,UAAU,+DACX5C,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,sBAAM4C,UAAU,4CAAhB,YAEJ5C,EAAA,qBAAK4C,UAAU,mCAEX5C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAOvc,KAAKwqC,cAAc9rB,EAAIlJ,YAC9BsjB,EAAA,0BACKoO,KAAKC,eAAe,QAAS,CAC1BC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAO5oB,EAAIlJ,wDAS1BkJ,GACZ,IACI+rB,EADEppB,EAAc3C,EAAI2C,YAAc,EAuBtC,OAnBQopB,EAFJppB,EACoB,IAAhBA,EAEIyX,EAAA,sCACaA,EAAA,4BADb,gCAMAA,EAAA,uCACcA,EAAA,uBAAIzX,GADlB,iCAOJyX,EAAA,uCACcA,EAAA,qCADd,yBAMJA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOkuB,GACpC3R,EAAA,qBAAK4C,UAAU,+DACX5C,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,mCACV17B,KAAK0qC,kBAAkBhsB,iDAOzBA,GACf,IACImd,EADE8O,EAAQjsB,EAAI6C,eAuBlB,OAnBQsa,EAFJ8O,EACc,IAAVA,EAEI7R,EAAA,sCACaA,EAAA,4BADb,mCAMAA,EAAA,uCACcA,EAAA,uBAAI6R,GADlB,oCAOJ7R,EAAA,uCACcA,EAAA,wCADd,yBAMJA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACpC/C,EAAA,qBAAK4C,UAAU,+DACX5C,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,mCACV17B,KAAK4qC,qBAAqBlsB,gDAO7BA,GACd,IAAMmd,EACF/C,EAAA,+DAEK,IACDA,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAYuyB,aAAa,KAG5D,OACIrP,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACpC/C,EAAA,qBAAK4C,UAAU,+DACX5C,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAYuyB,aAAa,8CAOzDzpB,GACX,OACIoa,EAAA,cAACA,EAAA,SAAD,KACK94B,KAAK8qC,gBAAgBpsB,GACrB1e,KAAK+qC,mBAAmBrsB,GACxB1e,KAAKgrC,kBAAkBtsB,2CAMhC,IAAMA,EAAM1e,KAAK64B,MAAMpyB,aACvB,OACIqyB,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,qBAAK4C,UAAU,0BAIX5C,EAAA,qBAAK4C,UAAU,6BACV17B,KAAKirC,iBAAiBvsB,IAE3Boa,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,qBAAK4C,UAAU,iCACX5C,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,4DACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB6Q,EAAI1Z,KACjC0Z,EAAIpe,SAKrBw4B,EAAA,qBAAK4C,UAAU,iCACX5C,EAAA,qBAAK4C,UAAU,kCACV17B,KAAKkrC,cAAcxsB,IAExBoa,EAAA,qBAAK4C,UAAU,kCACV17B,KAAKmrC,eAAezsB,yCAU7C,OAAO1e,KAAKorC,sBAliB2BxQ,aCTlCyQ,GAAb,SAAAvQ,GACI,SAAAuQ,EAAYxS,GAA2B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAqrC,IACnC5rC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAurC,GAAAlrC,KAAAH,KAAM64B,KAED73B,MAAQ,CACT+gB,YAAa,IAJkBtiB,EAD3C,OAAAK,OAAAe,EAAA,EAAAf,CAAAurC,EAAAvQ,GAAAh7B,OAAAiM,EAAA,EAAAjM,CAAAurC,EAAA,EAAAr/B,IAAA,kBAAAtI,MAAA,SASoBgb,GACZ,OACIoa,EAAA,uCAXZ,CAAA9sB,IAAA,YAAAtI,MAAA,SAiBcinC,EAAeW,EAAkBC,GACvC,OAAc,IAAVZ,GAAeA,EAAQ,EAChBY,EAEJD,IArBf,CAAAt/B,IAAA,eAAAtI,MAAA,WAyBQ,IAMI/D,EALAm5B,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQ/3B,KAAK,WAA1B,UAGA43B,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQ/3B,KAAK,WAA1B,UA8BJ,OA1BIvB,EADAK,KAAK64B,MAAM4S,iBAEP3S,EAAA,yBACIA,EAAA,uHAGAA,EAAA,0CACoBA,EAAA,8CADpB,0EAE6CA,EAAA,mCAF7C,wEAaJA,EAAA,yBACIA,EAAA,0DAQRA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UACR64B,MAAO,CAAE4R,SAAU,OAAQC,OAAQ,oBACnCjsC,QAASA,MA9DzB,CAAAqM,IAAA,aAAAtI,MAAA,WAkEiB,IAAAiI,EAAA3L,KACT,OAAIA,KAAK64B,MAAM7V,cAAcxT,OAAS,EAE9BxP,KAAK64B,MAAM7V,cAAc3Z,IAAI,SAAC5C,EAAcolC,GACxC,IAAMv+B,EAAS3B,EAAKktB,MAAMlP,aAAavb,IAAI3H,EAAazB,KAAO,KAC/D,OACI8zB,EAAA,qBAAK9sB,IAAK2F,OAAOk6B,GAAQnQ,UAAU,cAC/B5C,EAAA,cAACgT,GAAD,CAAmBrlC,aAAcA,EAAcuiC,mBAAoB17B,OAM5EtN,KAAK+rC,iBA/ExB,CAAA//B,IAAA,SAAAtI,MAAA,WAoFQ,OACIo1B,EAAA,qBAAK4C,UAAU,iBACX5C,EAAA,qBAAKiB,MAAO,CAAEiS,UAAW,OAAQC,QAAS,OAAQC,cAAe,WAC5DlsC,KAAKmsC,mBAvF1Bd,EAAA,CAAmCzQ,aCoBpBsL,mBAtBR,SAAyBllC,GAE5B,GAA6C,OAAzCA,EAAMI,MAAM82B,eAAe52B,UAC3B,MAAM,IAAIf,MAAM,kBAHuC,IAAA6rC,EAWvDprC,EALAI,MACI82B,eACI52B,UAKZ,MAAO,CACH0hB,cAduDopB,EAQlCppB,cAMN2G,aAdwCyiB,EAQnBziB,eAUrC,SAA4B4a,GAC/B,MAAO,IAGI2B,CAA8FmF,kCCkb9FgB,uBAnbX,SAAAA,EAAYxT,GAAkC,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAqsC,IAC1C5sC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAusC,GAAAlsC,KAAAH,KAAM64B,KALVyT,iBAI8C,EAAA7sC,EAH9C8sC,kBAG8C,EAAA9sC,EAF9C+sC,wBAE8C,EAG1C/sC,EAAK6sC,YAAc1R,cACnBn7B,EAAK8sC,aAAe3R,cAEpBn7B,EAAK+sC,mBAAqB,CACtB,CACIC,MAAO,SACP/oC,MAAO,UAEX,CACI+oC,MAAO,QACP/oC,MAAO,SAEX,CACI+oC,MAAO,QACP/oC,MAAO,UAIfjE,EAAKuB,MAAQ,CACTsrC,YAAa,GACbI,iBAAkB,SAClBC,aAAc,GACdC,gBAAiB,MACjBC,sBAAsB,GA1BgBptC,mFAgC1CO,KAAK64B,MAAMiU,aAAa,uCAIxB,GAAiC,OAA7B9sC,KAAKssC,YAAYS,QAArB,CAGA,IAAMhrB,EAAc/hB,KAAKssC,YAAYS,QAAQrpC,MAAM9C,MAAM,SAEzDZ,KAAK64B,MAAMiU,aAAa/qB,8CAIxB,SAAI/hB,KAAKgB,MAAMsrC,aAAetsC,KAAKgB,MAAMsrC,YAAY98B,OAAS,iDAO9D,IAAIw9B,EAEAA,EADAhtC,KAAKssC,YAAYS,QACS/sC,KAAKssC,YAAYS,QAAQrpC,MAEzB,GAE9B1D,KAAKu7B,SAAS,CAAE+Q,YAAaU,qCAGxBC,GACLA,EAAEC,iBACFltC,KAAKmtC,kDAGMzpC,GACX,OAAQA,GACJ,IAAK,QACD1D,KAAK64B,MAAMuU,WAAW,QAAS5uC,EAAcykB,WAC7C,MACJ,IAAK,OACDjjB,KAAK64B,MAAMuU,WAAW,OAAQ5uC,EAAcykB,WAC5C,MACJ,IAAK,gBACDjjB,KAAK64B,MAAMuU,WAAW,UAAW5uC,EAAciT,YAC/C,MACJ,IAAK,kBACDzR,KAAK64B,MAAMuU,WAAW,UAAW5uC,EAAciT,YAC/C,MACJ,IAAK,cACDzR,KAAK64B,MAAMuU,WAAW,cAAe5uC,EAAciT,YACnD,MACJ,IAAK,iBACDzR,KAAK64B,MAAMuU,WAAW,iBAAkB5uC,EAAciT,2DAK5Cw7B,GAClBjtC,KAAK64B,MAAMuU,WAAWptC,KAAK64B,MAAMzuB,OAAQ6iC,EAAE/Q,OAAOx4B,wDAG7BupC,GACrB,IAAII,EACJrtC,KAAKu7B,SAAS,CAAEmR,iBAAkBO,EAAE/Q,OAAOx4B,QACpB,WAAnBupC,EAAE/Q,OAAOx4B,OACT1D,KAAKu7B,SAAS,CAAEoR,aAAc,KAC9BU,EAASvtC,OAAAyB,EAAA,EAAAzB,CAAA,GACFE,KAAK64B,MAAM7uB,OADT,CAELoZ,SAAU6pB,EAAE/Q,OAAOx4B,UAGvB2pC,EAASvtC,OAAAyB,EAAA,EAAAzB,CAAA,GACFE,KAAK64B,MAAM7uB,OADT,CAELoZ,SAAU6pB,EAAE/Q,OAAOx4B,MACnB2f,MAAO,KAEXrjB,KAAKu7B,SAAS,CAAEoR,aAAc,MAElC3sC,KAAK64B,MAAMyU,aAAaD,gDAGPE,GACjB,IAAIF,EACJrtC,KAAKu7B,SAAS,CAAEoR,aAAcY,IACD,IAAzBA,EAAc/9B,QACdxP,KAAKu7B,SAAS,CAAEmR,iBAAkB,WAClCW,EAASvtC,OAAAyB,EAAA,EAAAzB,CAAA,GACFE,KAAK64B,MAAM7uB,OADT,CAELoZ,SAAU,SACVC,MAAOkqB,MAGXvtC,KAAKu7B,SAAS,CAAEmR,iBAAkB,WAClCW,EAASvtC,OAAAyB,EAAA,EAAAzB,CAAA,GACFE,KAAK64B,MAAM7uB,OADT,CAELoZ,SAAU,SACVC,MAAOkqB,KAIfvtC,KAAK64B,MAAMyU,aAAaD,mDAGJJ,GACpBjtC,KAAKu7B,SAAS,CAAEqR,gBAAiBK,EAAE/Q,OAAOx4B,QAC1C,IAAM2pC,EAASvtC,OAAAyB,EAAA,EAAAzB,CAAA,GACRE,KAAK64B,MAAM7uB,OADH,CAEXsZ,QAAS2pB,EAAE/Q,OAAOx4B,QAEtB1D,KAAK64B,MAAMyU,aAAaD,2CAIS,OAA7BrtC,KAAKssC,YAAYS,UAGrB/sC,KAAKssC,YAAYS,QAAQrpC,MAAQ,GACjC1D,KAAKwtC,sBACLxtC,KAAKmtC,2DAIL,OAA8B,IAA1BntC,KAAK64B,MAAMpI,WAEPqI,EAAA,qBAAK4C,UAAU,uCAAf,kBAKyB,IAA7B17B,KAAK64B,MAAMnI,cAEPoI,EAAA,qBAAK4C,UAAU,uCAAf,SAGK17B,KAAK64B,MAAMpI,WACX,IAJL,QAUJzwB,KAAK64B,MAAMpI,aAAezwB,KAAK64B,MAAMnI,cAEjCoI,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,uBAAI94B,KAAK64B,MAAMpI,YACd,IAFL,QASJqI,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,uBAAI94B,KAAK64B,MAAMnI,eADnB,IAGK1wB,KAAK64B,MAAMpI,WACX,IAJL,mDAWJ,OAAIzwB,KAAK64B,MAAMjI,UACHkI,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAEf43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,sDAInB,OACI43B,EAAA,sBAAM9zB,GAAG,aAAa02B,UAAU,iCAAiC+R,SAAUztC,KAAKytC,SAASpR,KAAKr8B,OAC1F84B,EAAA,uBACI4C,UAAU,mCACVgS,YAAY,uBACZC,SAAU3tC,KAAKwtC,oBAAoBnR,KAAKr8B,MACxC4tC,WAAS,EACT9L,IAAK9hC,KAAKssC,cACdxT,EAAA,cAAC0S,GAAA,EAAD,CACIqC,UAAW7tC,KAAK8tC,kBAChBhM,IAAK9hC,KAAKusC,aACVwB,KAAK,aACL/hC,IAAI,SACJgiC,SAAS,UACRhuC,KAAKiuC,oBAEVnV,EAAA,cAAC0S,GAAA,EAAD,CACIrP,QAASn8B,KAAKkuC,cAAc7R,KAAKr8B,MACjC6tC,UAAW7tC,KAAK8tC,kBAChBtS,KAAK,UAGRx7B,KAAKmuC,kEAMd,OACIrV,EAAA,qBAAK4C,UAAU,qCACX5C,EAAA,qBAAK4C,UAAU,sCACV17B,KAAKouC,oBAEVtV,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAG,oBAAmBjR,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,UAAUs6B,KAAK,cAAczB,MAAO,CAAEsU,YAAa,SAAhE,wEAU3C,OACIvV,EAAA,cAACwV,GAAA,EAAD,CACIX,SAAU3tC,KAAKuuC,eAAelS,KAAKr8B,MACnCqf,aAAcrf,KAAK64B,MAAMzuB,OACzBokC,0BAA0B,EAC1BzU,MAAO,CAAEf,MAAO,SAChBF,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,kBAAkBsI,IAAI,WAA3C,gBACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,gBAAgBsI,IAAI,UAAzC,oBACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,OAAOsI,IAAI,QAAhC,YACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,cAAcsI,IAAI,eAAvC,aACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,iBAAiBsI,IAAI,kBAA1C,4DAQR,GAAIhM,KAAKgB,MAAM6rC,qBAAsB,CACjC7sC,KAAKu7B,SAAS,CAAEsR,sBAAsB,IADL,IAAA6B,EAEE1uC,KAAK64B,MAAM7uB,OAAxCoZ,EAF2BsrB,EAE3BtrB,SAAUC,EAFiBqrB,EAEjBrrB,MAFiBqrB,EAEVprB,QAClB,CAAC,SAAU,OAAOlT,SAASgT,KAC5BA,EAAW,SACXpjB,KAAKu7B,SAAS,CAAEmR,iBAAkB,YAEtC1sC,KAAKu7B,SAAS,CAAEoR,aAAc,GAAIC,gBAAiB,QACnDvpB,EAAQ,GACE,MACVrjB,KAAK64B,MAAMyU,aAAa,CACpBlqB,WAAUC,QAAOC,QAFX,aAKVtjB,KAAKu7B,SAAS,CAAEsR,sBAAsB,mDAK1C,OAAI7sC,KAAKgB,MAAM6rC,qBAEP/T,EAAA,cAAC0C,GAAA,EAAD,CACIt6B,KAAK,WACLw6B,UAAU,2BACVS,QAASn8B,KAAK2uC,iBAAiBtS,KAAKr8B,QAIxC84B,EAAA,cAAC0C,GAAA,EAAD,CACIt6B,KAAK,WACLw6B,UAAU,mBACVS,QAASn8B,KAAK2uC,iBAAiBtS,KAAKr8B,qDAMhD,IAAM4uC,EAAa,CACf3C,QAAS,QACTnS,OAAQ,OACR+U,WAAY,QAEhB,OAAI7uC,KAAKgB,MAAM6rC,qBAEP/T,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAACgW,GAAA,EAAMC,MAAP,CACIpB,SAAU3tC,KAAKgvC,yBAAyB3S,KAAKr8B,MAC7C0D,MAAO1D,KAAKgB,MAAM0rC,kBAElB5T,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,SAASq2B,MAAO6U,GAA7B,WACA9V,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,MAAMq2B,MAAO6U,GAA1B,YACC5uC,KAAKivC,uBACNnW,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,YAAYq2B,MAAO6U,GAAhC,eACA9V,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,SAASq2B,MAAO6U,GAA7B,kBAGJ9V,EAAA,cAACoW,GAAA,EAASH,MAAV,CACIvI,QAASxmC,KAAKwsC,mBACd9oC,MAAO1D,KAAKgB,MAAM2rC,aAClBjR,UAAU,qCACViS,SAAU3tC,KAAKmvC,qBAAqB9S,KAAKr8B,SAKjD84B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAACgW,GAAA,EAAMC,MAAP,CACIpB,SAAU3tC,KAAKgvC,yBAAyB3S,KAAKr8B,MAC7C0D,MAAO1D,KAAKgB,MAAM0rC,kBAElB5T,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,SAASq2B,MAAO6U,GAA7B,WACA9V,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,MAAMq2B,MAAO6U,GAA1B,YACC5uC,KAAKivC,yEAQtB,GAAKjvC,KAAKgB,MAAM6rC,qBAAhB,CAGA,IAAM+B,EAAa,CACf3C,QAAS,QACTnS,OAAQ,OACR+U,WAAY,OACZjD,OAAQ,OAEZ,OACI9S,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAACgW,GAAA,EAAMC,MAAP,CACIpB,SAAU3tC,KAAKovC,wBAAwB/S,KAAKr8B,MAC5C0D,MAAO1D,KAAKgB,MAAM4rC,iBAClB9T,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,MAAMq2B,MAAO6U,GAA1B,OACA9V,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,SAASq2B,MAAO6U,GAA7B,WACA9V,EAAA,cAACgW,GAAA,EAAD,CAAOprC,MAAM,UAAUq2B,MAAO6U,GAA9B,2DAOZ,OAAI5uC,KAAK64B,MAAMz2B,MAEP02B,EAAA,cAAC4S,GAAA,EAAD,CACIxqC,KAAK,QACLvB,QAASK,KAAK64B,MAAMz2B,MAAM1C,KAC1B6F,YAAavF,KAAK64B,MAAMz2B,MAAMzC,WAalC8rC,IAR+B,WAA/BzrC,KAAK64B,MAAM7uB,OAAOoZ,UACiB,IAAnCpjB,KAAK64B,MAAM7uB,OAAOqZ,MAAM7T,QACM,QAA9BxP,KAAK64B,MAAM7uB,OAAOsZ,SAEhBtjB,KAAKssC,YAAYS,SAC2B,IAA1C/sC,KAAKssC,YAAYS,QAAQrpC,MAAM8L,QAOnCspB,EAAA,cAACuW,GAAD,CAAe5D,iBAAkBA,KAdrC,IAAIA,+CAoBR,OACI3S,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,eAAf,WACC17B,KAAKsvC,sBAENxW,EAAA,qBAAK4C,UAAU,cAAc3B,MAAO,CAAEwV,UAAW,SAAjD,UAECvvC,KAAKwvC,qBAELxvC,KAAKgB,MAAM6rC,qBACR/T,EAAA,qBAAK4C,UAAU,cAAc3B,MAAO,CAAEwV,UAAW,SAAjD,cACC,KACJvvC,KAAKyvC,wBAEN3W,EAAA,qBAAKiB,MAAO,CAAEwV,UAAW,OAAQG,UAAW,WACxC5W,EAAA,oBAAIiB,MAAO,CAAEC,OAAQ,EAAG2V,UAAW,qCAAsC3W,MAAO,SAChFF,EAAA,mBAAGmD,KAAK,kFAAkFC,OAAO,UAAjG,0CAOZ,OACIpD,EAAA,qBAAK4C,UAAU,+CACV17B,KAAK4vC,kBACN9W,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,qBAAK4C,UAAU,uDACV17B,KAAK6vC,uBAEV/W,EAAA,qBAAK4C,UAAU,kCACV17B,KAAK8vC,+BA/aKlV,cCkD5B,SAAStJ,GAAc3O,EAAmBnR,GAC7C,MAAO,CACHtQ,KAAM7B,EAAWgyB,uBACjB1O,UAAWA,EACXnR,cAAeA,GAqCvB,SAASwf,GAAgBjP,GACrB,MAAO,CACH7gB,KAAM7B,EAAW0xB,yBACjBhP,eAIR,SAASmP,GAAkBlO,EAAkDyN,EAAoB9G,GAC7F,MAAO,CACHzoB,KAAM7B,EAAW4xB,2BACjBjO,cAAeA,EACfyN,WAAYA,EACZ9G,aAAcA,GAItB,SAASyH,GAAgBhvB,GACrB,MAAO,CACHlB,KAAM7B,EAAW8xB,yBACjB/uB,MAAOA,GAkBR,SAASovB,GAAgBxnB,GAC5B,MAAO,CACH9I,KAAM7B,EAAWkyB,yBACjBvnB,OAAQA,GC3FDk8B,mBA3CR,SAAyB6J,GAC5B,IAAKA,EAAW3uC,MAAM82B,eAAe52B,UACjC,MAAM,IAAIf,MAAM,kBAFgD,IAAAyvC,EAahED,EAPA3uC,MACI82B,eACI52B,UACI0hB,EAToDgtB,EASpDhtB,cAAe2G,EATqCqmB,EASrCrmB,aAAcvnB,EATuB4tC,EASvB5tC,MAM7C,MAAO,CACH4gB,gBACA2G,eACA8G,WAlBgEuf,EAUpDvf,WASZC,cAnBgEsf,EAUxCtf,cAUxB1mB,OApBgEgmC,EAUzBhmC,OAWvC5H,QACAwuB,UAtBgEof,EAUjBpf,YAiBhD,SAA4B2T,GAC/B,MAAO,CACHuI,aAAc,SAAC/qB,GAEXwiB,ED0LL,SAAoBxiB,GACvB,sBAAArP,EAAA5S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAyL,EAAA/X,EAAAgY,EAAArkC,EAAAtC,EAAAmpB,EAAAyd,EAAAxtB,EAAAnR,EAAAxH,EAAAomC,EAAAz9B,EAAA09B,EAAAjqB,EAAAkqB,EAAAC,EAAA,OAAA1jC,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,UACHm3B,EAASvT,GAAgBjP,IADtBkuB,EAOCzL,IAHStM,EAJV+X,EAIC7uC,MAAS82B,eAJVgY,EAAAD,EAKCte,KAAQE,cAAiBhmB,EAL1BqkC,EAK0BrkC,MAAOtC,EALjC2mC,EAKiC3mC,SACzBmpB,EANRud,EAMCzd,IAAOE,OAGsB,OAA7BwF,EAAe52B,UAThB,CAAAmN,EAAArB,KAAA,eAUCm3B,EAASnT,GAAgB,CACrB1xB,KAAM,gBACNC,QAAS,0DAZd8O,EAAAlB,OAAA,wBAAA4iC,EAiByDjY,EAApD52B,UAAaqhB,EAjBlBwtB,EAiBkBxtB,UAAWnR,EAjB7B2+B,EAiB6B3+B,cAAexH,EAjB5CmmC,EAiB4CnmC,OACzComC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MArBpD2C,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,GAyBwCgjC,EAAUI,UAAU,CACvDzuB,YAAaA,EACbY,YAAWnR,gBAAexH,SAAQT,aA3BvC,WAAAoJ,EAAAlE,EAAApB,KAyBS2V,EAzBTrQ,EAyBSqQ,cAAeoD,EAzBxBzT,EAyBwByT,SAOjBkqB,EAAYttB,EACbhZ,OAAO,SAAC0U,GACL,OACIA,EAAIsC,WAAa0T,GAAoCjrB,OACrDiV,EAAIsC,WAAa0T,GAAoC3V,QAG5D1V,IAAI,SAACqV,GACF,OAAOA,EAAI1Z,MAGLwK,OAAS,GA3CxB,CAAAf,EAAArB,KAAA,gBAAAqB,EAAArB,KAAA,GA4C0BgjC,EAAUK,sBAAsB,CAAE/mB,gBAAiB4mB,IA5C7E,QA4CK3mB,EA5CLlb,EAAApB,KAAAoB,EAAArB,KAAA,iBA8CKuc,EAAe,IAAIze,IA9CxB,QAiDCq5B,EAASrT,GAAkBlO,EAAeoD,EAAOuD,IAjDlDlb,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAC,GAAAD,EAAA,SAmDC/M,QAAQU,MAAM,sBAAuBqM,EAAAC,GAAGpO,KAAMmO,EAAAC,GAAG/O,SACjD4kC,EAASnT,GAAgB,CACrB1xB,KAAM+O,EAAAC,GAAGpO,KACTX,QAAS8O,EAAAC,GAAG/O,WAtDjB,yBAAA8O,EAAAjB,SAAAe,EAAA,kBAAP,gBAAAS,EAAAsB,GAAA,OAAAoC,EAAAjF,MAAAzN,KAAA0N,YAAA,GC3LiB2f,CAAmBtL,KAEhCqrB,WAAY,SAAChjC,EAAgBoH,GAEzB+yB,EDmPL,SAAkB5hB,EAAmBnR,GACxC,sBAAAoB,EAAA9S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAW,EAAAjN,EAAAkN,EAAAv5B,EAAAtC,EAAAmpB,EAAA0d,EAAAM,EAAA3uB,EAAA/X,EAAA6I,EAAA89B,EAAAvqB,EAAAkqB,EAAAM,EAAA,OAAA/jC,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,UACHm3B,EAASjT,GAAc3O,EAAWnR,IAD/B2zB,EAMqBX,IAFXtM,EAJViN,EAIC/jC,MAAS82B,eAJVkN,EAAAD,EAKCxT,KAAQE,cAAiBhmB,EAL1Bu5B,EAK0Bv5B,MAAOtC,EALjC67B,EAKiC77B,SACzBmpB,EANRyS,EAMC3S,IAAOE,OAEL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGtB,OAA7BosB,EAAe52B,UAdhB,CAAAyN,EAAA3B,KAAA,eAeCm3B,EAASnT,GAAgB,CACrB1xB,KAAM,gBACNC,QAAS,0DAjBdoP,EAAAxB,OAAA,wBAAAmjC,EAsB4CxY,EAAvC52B,UAAaygB,EAtBlB2uB,EAsBkB3uB,YAAa/X,EAtB/B0mC,EAsB+B1mC,OAtB/B+E,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,GAyBwCgjC,EAAUI,UAAU,CACvDzuB,cAAa/X,SAAQT,WACrBoZ,YAAWnR,kBA3BhB,WAAAqB,EAAA9D,EAAA1B,KAyBS2V,EAzBTnQ,EAyBSmQ,cAAeoD,EAzBxBvT,EAyBwBuT,SAOjBkqB,EAAYttB,EACbhZ,OAAO,SAAC0U,GACL,OACIA,EAAIsC,WAAa0T,GAAoCjrB,OACrDiV,EAAIsC,WAAa0T,GAAoC3V,QAG5D1V,IAAI,SAACqV,GACF,OAAOA,EAAI1Z,MAGLwK,OAAS,GA3CxB,CAAAT,EAAA3B,KAAA,gBAAA2B,EAAA3B,KAAA,GA4C0BgjC,EAAUK,sBAAsB,CAAE/mB,gBAAiB4mB,IA5C7E,QA4CK3mB,EA5CL5a,EAAA1B,KAAA0B,EAAA3B,KAAA,iBA8CKuc,EAAe,IAAIze,IA9CxB,QAiDCq5B,EAASrT,GAAkBlO,EAAeoD,EAAOuD,IAjDlD5a,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAL,GAAAK,EAAA,SAmDCrN,QAAQU,MAAM,sBAAuB2M,EAAAL,GAAGpO,KAAMyO,EAAAL,GAAG/O,SACjD4kC,EAASnT,GAAgB,CACrB1xB,KAAMqP,EAAAL,GAAGpO,KACTX,QAASoP,EAAAL,GAAG/O,WAtDjB,yBAAAoP,EAAAvB,SAAAsB,EAAA,kBAAP,gBAAAyB,EAAAK,GAAA,OAAAgC,EAAAnF,MAAAzN,KAAA0N,YAAA,GCpPiB2f,CAAiBjjB,EAAQoH,KAEtC87B,aAAc,SAACtjC,GACXu6B,ED6SL,SAAoBv6B,GACvB,sBAAA8I,EAAAhT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA6C,EAAO20B,EAAmDC,GAA1D,IAAAqM,EAAA3Y,EAAA4Y,EAAAjlC,EAAAtC,EAAAmpB,EAAA0d,EAAAW,EAAAhvB,EAAAY,EAAAnR,EAAAuB,EAAAi+B,EAAA5qB,EAAAkqB,EAAAW,EAAA,OAAApkC,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,UACHm3B,EAAS/S,GAAgBxnB,IADtB6mC,EAMqBrM,IAFXtM,EAJV2Y,EAICzvC,MAAS82B,eAJV4Y,EAAAD,EAKClf,KAAQE,cAAiBhmB,EAL1BilC,EAK0BjlC,MAAOtC,EALjCunC,EAKiCvnC,SACzBmpB,EANRme,EAMCre,IAAOE,OAEL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGtB,OAA7BosB,EAAe52B,UAdhB,CAAA4O,EAAA9C,KAAA,eAeCm3B,EAASnT,GAAgB,CACrB1xB,KAAM,gBACNC,QAAS,0DAjBduQ,EAAA3C,OAAA,wBAAAwjC,EAsB8D7Y,EAAzD52B,UAAaygB,EAtBlBgvB,EAsBkBhvB,YAAaY,EAtB/BouB,EAsB+BpuB,UAAWnR,EAtB1Cu/B,EAsB0Cv/B,cAtB1CtB,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,GAyBwCgjC,EAAUI,UAAU,CACvDzuB,cAAa/X,SAAQT,WACrBoZ,YAAWnR,kBA3BhB,WAAAuB,EAAA7C,EAAA7C,KAyBS2V,EAzBTjQ,EAyBSiQ,cAAeoD,EAzBxBrT,EAyBwBqT,SAOjBkqB,EAAYttB,EACbhZ,OAAO,SAAC0U,GACL,OACIA,EAAIsC,WAAa0T,GAAoCjrB,OACrDiV,EAAIsC,WAAa0T,GAAoC3V,QAG5D1V,IAAI,SAACqV,GACF,OAAOA,EAAI1Z,MAGLwK,OAAS,GA3CxB,CAAAU,EAAA9C,KAAA,gBAAA8C,EAAA9C,KAAA,GA4C0BgjC,EAAUK,sBAAsB,CAAE/mB,gBAAiB4mB,IA5C7E,QA4CK3mB,EA5CLzZ,EAAA7C,KAAA6C,EAAA9C,KAAA,iBA8CKuc,EAAe,IAAIze,IA9CxB,QAiDCq5B,EAASrT,GAAkBlO,EAAeoD,EAAOuD,IAjDlDzZ,EAAA9C,KAAA,iBAAA8C,EAAA/C,KAAA,GAAA+C,EAAAxB,GAAAwB,EAAA,SAmDCxO,QAAQU,MAAM,sBAAuB8N,EAAAxB,GAAGpO,KAAM4P,EAAAxB,GAAG/O,SACjD4kC,EAASnT,GAAgB,CACrB1xB,KAAMwQ,EAAAxB,GAAGpO,KACTX,QAASuQ,EAAAxB,GAAG/O,WAtDjB,yBAAAuQ,EAAA1C,SAAAoC,EAAA,kBAAP,gBAAAiB,EAAAK,GAAA,OAAA4B,EAAArF,MAAAzN,KAAA0N,YAAA,GC9SiB2f,CAAmBrjB,OAKzBk8B,CAA6CmG,cCxDtDvG,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,iFAIN,IAAMl5B,EACFm5B,EAAA,oDAEK,IACDA,EAAA,cAACoY,GAAA,EAAD,OAGR,OACIpY,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO,CACxCf,MAAO,OACPmY,QAAS,OACTvF,OAAQ,qDAMhB,GAAK5rC,KAAK64B,MAAMyC,KAAKl5B,MAGrB,OACI02B,EAAA,mCACY94B,KAAK64B,MAAMyC,KAAKl5B,MAAMzC,0CAMtC,OAAQK,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAE3B,KAAK7E,EAAsB+D,QACvB,OAAOxC,KAAKoxC,gBAChB,KAAK3yC,EAAsBwH,MACvB,OAAOjG,KAAKqxC,cAChB,KAAK5yC,EAAsBkE,QACvB,OACIm2B,EAAA,cAACwY,GAAD,CAAWlnC,OAAO,gEAM9B,OAAQpK,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAEvBtD,KAAK64B,MAAMoN,yDAKnBjmC,KAAK64B,MAAM0Y,kBAzDE3W,aAmGNsL,ICsbXsL,GDtbWtL,eAjBf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHyC,KAAMt6B,EAAMI,MAAM82B,iBAI1B,SAA4BqM,GACxB,MAAO,CACH0B,OAAQ,WACJ1B,EF6DR,eAAA/kC,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAAqB,EAAAC,EAAAC,EAAAC,EAAAn/B,EAAAo/B,EAAAzrB,EAAAkqB,EAAAwB,EAAAC,EAAA,OAAAllC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EAxIG,CACHrjC,KAAM7B,EAAW2yC,yBAsIdvN,EAMCD,IANDE,EAAAD,EAIC9S,KAAQE,cAAiBhmB,EAJ1B64B,EAI0B74B,MAAOtC,EAJjCm7B,EAIiCn7B,SACzBmpB,EALR+R,EAKCjS,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGjD2lC,EAAoC,GAIpCC,EAAmB,iBACnBC,EAAuBnzC,EAAciT,WACrCmgC,EAAgB,CAAExuB,SAAU,SAAUC,MAAO,GAAIC,QAAS,OApB7DpW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAuBwCgjC,EAAUI,UAAU,CACvDzuB,YAAa0vB,EACb9uB,UAAW+uB,EACXlgC,cAAemgC,EACf3nC,OAAQ4nC,EACRroC,aA5BL,WAAAkJ,EAAAvF,EAAAG,KAuBS2V,EAvBTvQ,EAuBSuQ,cAAeoD,EAvBxB3T,EAuBwB2T,SAQjBkqB,EAAYttB,EACbhZ,OAAO,SAAC0U,GACL,OACIA,EAAIsC,WAAa0T,GAAoCjrB,OACrDiV,EAAIsC,WAAa0T,GAAoC3V,QAG5D1V,IAAI,SAACqV,GACF,OAAOA,EAAI1Z,MAGLwK,OAAS,GA1CxB,CAAAtC,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GA2C0BgjC,EAAUK,sBAAsB,CAAE/mB,gBAAiB4mB,IA3C7E,QA2CK3mB,EA3CLzc,EAAAG,KAAAH,EAAAE,KAAA,iBA6CKuc,EAAe,IAAIze,IA7CxB,QAkDOqlB,EAAwC,CAC1CC,iBAAkBxN,EAClBA,cAAeA,EACf2G,aAAcA,EACd8G,WAAYrK,EACZsK,cAAe1N,EAAcxT,OAC7BmT,UAAW+uB,EACXlgC,cAAemgC,EACf3nC,OAAQ4nC,EACR7vB,YAAa0vB,EACb9gB,uBAAwB,KACxBC,WAAW,EACXxuB,MAAO,MAGXmiC,GAnMShU,EAmMYA,EAlMtB,CACHrvB,KAAM7B,EAAWgxB,yBACjBE,iBAAkBA,KA+HfrjB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAmECxL,QAAQU,MAAM,sBAAuB8K,EAAAwB,GAAGpO,KAAM4M,EAAAwB,GAAG/O,SACjD4kC,EAASnT,GAAgB,CACrB1xB,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,WAtEjB,yBAAAuN,EAAAM,OAlIX,IAAqB+iB,GAkIVvjB,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,KE3DI6jC,SAAU,WACNhN,EFzDD,CACHrjC,KAAM7B,EAAWoyB,wBE6DVyU,CAA8FJ,IEpH/EmM,cAM1B,SAAAA,EAAAzyC,GAA0C,IAA5B0yC,EAA4B1yC,EAA5B0yC,MAA4BpyC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiyC,GAAAjyC,KAJ1CkyC,WAI0C,EAAAlyC,KAH1CmyC,cAG0C,EAAAnyC,KAF1CoyC,WAE0C,EACtCpyC,KAAKkyC,MAAQA,EACblyC,KAAKmyC,UAAW,EAChBnyC,KAAKoyC,MAAQ,yDAKT,IAAA3yC,EAAAO,KACAA,KAAKoyC,OACL1U,OAAO2U,aAAaryC,KAAKoyC,OAE7BpyC,KAAKoyC,MAAQ1U,OAAOC,WAAP79B,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAkB,SAAAC,IAAA,OAAAH,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACtB3N,EAAK0yC,SADiB,CAAAjlC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMb3N,EAAK6yC,OANQ,OAAAplC,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAwB,GAAAxB,EAAA,SAQnBxL,QAAQC,KAAK,iCAAmCuL,EAAAwB,GAAG/O,SARhC,OAAAuN,EAAAE,KAAA,iBAWvB3N,EAAK0yC,UAAW,EAXO,QAa3B1yC,EAAK2yC,MAAQ,KAbc,yBAAAllC,EAAAM,SAAAR,EAAA,iBAc5BhN,KAAKkyC,wCAIJlyC,KAAKoyC,QACLpyC,KAAKmyC,UAAW,YClBfI,GAAb,SAAAjS,GAII,SAAAiS,EAAYphC,GAAgC,OAAArR,OAAAC,EAAA,EAAAD,CAAAE,KAAAuyC,GAAAzyC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyyC,GAAApyC,KAAAH,KAClCmR,IALd,OAAArR,OAAAe,EAAA,EAAAf,CAAAyyC,EAAAjS,GAAAxgC,OAAAiM,EAAA,EAAAjM,CAAAyyC,EAAA,EAAAvmC,IAAA,gBAAAtI,MAAA,eAAA8uC,EAAA1yC,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAAAxN,GAAA,IAAAsM,EAAAuzB,EAAA5sB,EAAAC,EAAA+/B,EAAAhmC,EAAAkyB,EAAA+T,EAAA,OAAA7lC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAQ0BtB,EAR1BtM,EAQ0BsM,IAAKuzB,EAR/B7/B,EAQ+B6/B,QAR/BnyB,EAAAE,KAAA,EASmDpN,KAAKwb,SAAS,kBAAmB,CACxE,CAAE1P,MAAKuzB,aAVnB,UAAA5sB,EAAAvF,EAAAG,KAAAqF,EAAA5S,OAAAsU,GAAA,EAAAtU,CAAA2S,EAAA,GAAAggC,EAAA3yC,OAAAsU,GAAA,EAAAtU,CAAA4S,EAAA,MASgBjG,EAThBgmC,EAAA,GASwB9T,EATxB8T,EAAA,KAS8BC,EAT9BhgC,EAAA,KAAAxF,EAAAE,KAAA,eAckB,IAAI7M,MAAMmyC,EAAY/yC,SAdxC,YAiBYg/B,EAjBZ,CAAAzxB,EAAAE,KAAA,eAkBkB,IAAI7M,MAAMo+B,EAAG,SAlB/B,eAAAzxB,EAAAK,OAAA,SAqBed,GArBf,yBAAAS,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAA6jC,EAAA/kC,MAAAzN,KAAA0N,YAAA,KAAA1B,IAAA,eAAAtI,MAAA,eAAAivC,EAAA7yC,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAwB,EAAAoE,GAAA,IAAA7G,EAAAuzB,EAAAzsB,EAAAC,EAAA+/B,EAAAnmC,EAAAkyB,EAAA+T,EAAA,OAAA7lC,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAwByBtB,EAxBzB6G,EAwByB7G,IAAKuzB,EAxB9B1sB,EAwB8B0sB,QAxB9B5wB,EAAArB,KAAA,EAyBmDpN,KAAKwb,SAAS,iBAAkB,CACvE,CAAE1P,MAAKuzB,aA1BnB,UAAAzsB,EAAAnE,EAAApB,KAAAwF,EAAA/S,OAAAsU,GAAA,EAAAtU,CAAA8S,EAAA,GAAAggC,EAAA9yC,OAAAsU,GAAA,EAAAtU,CAAA+S,EAAA,MAyBgBpG,EAzBhBmmC,EAAA,GAyBwBjU,EAzBxBiU,EAAA,KAyB8BF,EAzB9B7/B,EAAA,KAAApE,EAAArB,KAAA,eA8BkB,IAAI7M,MAAMmyC,EAAY/yC,SA9BxC,YAiCYg/B,EAjCZ,CAAAlwB,EAAArB,KAAA,eAkCkB,IAAI7M,MAAMo+B,EAAG,SAlC/B,eAAAlwB,EAAAlB,OAAA,SAqCed,GArCf,yBAAAgC,EAAAjB,SAAAe,EAAAvO,SAAA,gBAAA4O,GAAA,OAAA+jC,EAAAllC,MAAAzN,KAAA0N,YAAA,MAAA6kC,EAAA,CAAqCnT,IFkM9B,SAAS/8B,GAAUD,GACtB,MAAO,CACHlB,KAAM7B,EAAW6C,mBACjBE,MAAOA,GAwCR,SAASywC,KACZ,MAAO,CACH3xC,KAAM7B,EAAW2G,yBA4BlB,SAASX,GAAaL,GACzB,MAAO,CACH9D,KAAM7B,EAAW+F,uBACjBJ,GAAIA,GAaL,SAASZ,GAAmBH,EAAwB7B,GACvD,MAAO,CACHlB,KAAM7B,EAAW8E,8BACjBF,QAASA,EACT7B,MAAOA,GAaR,SAASqC,GAAmBR,EAAwB7B,GACvD,MAAO,CACHlB,KAAM7B,EAAWmF,8BACjBF,QAASL,EACT7B,MAAOA,GAMR,SAAS+C,GAAcH,EAAY5C,GACtC,MAAO,CACHlB,KAAM7B,EAAW6F,wBACjBF,GAAIA,EACJ5C,MAAOA,GAqBR,SAAS0wC,KACZ,OAAO,SAACvO,EAAmDC,GACvDD,EArIG,CACHrjC,KAAM7B,EAAWiD,qBAsIjB,IAlIaW,EAkIP0jB,EAA+B,CACjC3hB,GAAI,CACAtB,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWuJ,cAAc,IAAI,IAElD7mB,KAAM,CACFoD,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWwJ,gBAAgB,IAAI,IAEpDnjB,QAAS,CACLP,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWm1B,mBAAmB,IAAI,IAEvDzuC,QAAS,CACLZ,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWo1B,mBAAmB,IAAI,IAEvDruC,kBAAmB,CACfjB,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWq1B,6BAA6B,IAAI,IAEjE1tC,YAAa,CACT7B,MAAO,GACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiBgb,GAAWyJ,uBAAuB,IAAI,IAE3DzhB,UAAW,CACPlC,OAAO,EACP2D,YAAa,KACb1D,UAAW9F,EAAUkJ,MACrBnE,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,QAI7BwhC,GAjLathC,EAiLQ0jB,EAhLlB,CACHzlB,KAAM7B,EAAWqD,qBACjBO,gBAAiBA,KA+KjBshC,EAAS2O,OAIV,SAASC,KACZ,OAAO,SAAC5O,EAAmDC,GACvD,IAAMxjC,EAAQwjC,IAOd,GAAKxjC,EAAMI,MAAMC,WAAWC,UAA5B,CAUAijC,EApOG,CACHrjC,KAAM7B,EAAW+zC,qBAiNqE,IAAAC,EA0BlFryC,EALA2wB,KAAQE,cAAiBhmB,EArByDwnC,EAqBzDxnC,MAAOtC,EArBkD8pC,EAqBlD9pC,SAEDtG,EAG/BjC,EAJAI,MACIC,WAAcC,UAAa2B,gBAExByvB,EACP1xB,EADAwxB,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGlD7I,EAQLmtC,EAAU+C,OAAOlwC,EAAiBsG,GAC7B+C,KAAK,SAACoS,GACH6lB,EAzPT,SAAqB7lB,GACxB,MAAO,CACHxd,KAAM7B,EAAWwC,qBACjB4E,aAAciY,GAsPGzc,CAAYyc,MAExBggB,MAAM,SAACt8B,GACJV,QAAQU,MAAM,eAAgBa,EAAiBb,GAI/CmiC,EAASliC,GAAU,CACf3C,KAAM0C,EAAM1C,MAAQ0C,EAAM9B,KAC1BX,QAASyC,EAAMzC,QACf2zC,UAAWlxC,OAnBnBmiC,EAASliC,GAAU,CACf3C,KAAM,MACNC,QAAS,uDA5Bb4kC,EAASliC,GAAU,CACf3C,KAAM,UACNC,QAAS,0CAiDlB,SAASuzC,KACZ,OAAO,SAAC3O,EAAmDC,GACvD,IAAMxjC,EAAQwjC,IACd,GAAKxjC,EAAMI,MAAMC,WAAWC,UAA5B,CAFsF,IAAAiyC,EAelFvyC,EAJAI,MACIC,WACIC,UAAwB2B,GAbkDswC,EAa7DzxC,UAb6DyxC,EAalDtwC,iBAI/BA,GAKDA,EAAgB3C,KAAKsC,gBAAgB1B,OAASnD,EAAoB8E,IAKlEI,EAAgB+B,GAAGpC,gBAAgB1B,OAASnD,EAAoB8E,IAOhEI,EAAgBgB,QAAQrB,gBAAgB1B,OAASnD,EAAoB8E,IAKrEI,EAAgBqB,QAAQ1B,gBAAgB1B,OAASnD,EAAoB8E,IAKrEI,EAAgB0B,kBAAkB/B,gBAAgB1B,OAASnD,EAAoB8E,IAK/EI,EAAgBsC,YAAY3C,gBAAgB1B,OAASnD,EAAoB8E,GAK7E0hC,EAnRG,CACHrjC,KAAM7B,EAAWyG,sBA8Oby+B,EAASsO,WAfTtO,EAASliC,GAAU,CACf3C,KAAM,UACNC,QAAS,0CAqDzB,SAAS6zC,GAAkBxyC,GAAmB,IAAAyyC,EAGlBzyC,EADpB2wB,KAAQE,cAAiBhmB,EAFa4nC,EAEb5nC,MAAOtC,EAFMkqC,EAENlqC,SACzBmpB,EAAa1xB,EAApBwxB,IAAOE,OACX,OAAO,IAAIgC,GAA2B,CAClC7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAIpD,SAAS4nC,GAAWpzC,GACvB,OAAO,SAACikC,GAAsD,IAAAoP,EAC3B/1B,GAAWwJ,gBAAgB9mB,GADAszC,EAAA9zC,OAAAsU,GAAA,EAAAtU,CAAA6zC,EAAA,GACnDE,EADmDD,EAAA,GACpCxxC,EADoCwxC,EAAA,GAGtDxxC,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAnRL,SAAyBjkC,EAAc8B,GAC1C,MAAO,CACHlB,KAAM7B,EAAWyE,0BACjBxD,KAAMA,EACN8B,MAAOA,GA+QM2B,CAAgB8vC,EAAezxC,IAExCmiC,EA5RL,SAA2BjkC,GAC9B,MAAO,CACHY,KAAM7B,EAAWmE,4BACjBlD,KAAMA,GAyROuD,CAAkBgwC,IAE/BtP,EAAS2O,OEnhBJX,GAEFh1C,OAAiB,gBF2pBxBu2C,GApIEC,eAMF,SAAAA,EAAAv0C,GAAqN,IAAAC,EAAvMyyC,EAAuM1yC,EAAvM0yC,MAAO3N,EAAgM/kC,EAAhM+kC,SAAUz4B,EAAsLtM,EAAtLsM,IAAKuzB,EAAiL7/B,EAAjL6/B,QAASiD,EAAwK9iC,EAAxK8iC,iBAAkBz2B,EAAsJrM,EAAtJqM,MAAsJ,OAAA/L,OAAAC,EAAA,EAAAD,CAAAE,KAAA+zC,IACjNt0C,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAi0C,GAAA5zC,KAAAH,KAAM,CAAEkyC,YANZ3N,cAKqN,EAAA9kC,EAJrNqM,SAIqN,EAAArM,EAHrN4/B,aAGqN,EAAA5/B,EAFrN6iC,sBAEqN,EAAA7iC,EADrNoM,WACqN,EAGjNpM,EAAK8kC,SAAWA,EAChB9kC,EAAKqM,IAAMA,EACXrM,EAAK6iC,iBAAmBA,EACxB7iC,EAAKoM,MAAQA,EACbpM,EAAK4/B,QAAUA,EAPkM5/B,yMAYvMmgC,EAAS,IAAI2S,GAAgB,CAC/BzmC,IAAK9L,KAAKsiC,iBACVz2B,MAAO7L,KAAK6L,iBAEK+zB,EAAOoU,cAAc,CAAEloC,IAAK9L,KAAK8L,IAAKuzB,QAASr/B,KAAKq/B,oBAAnE5yB,UAEFzM,KAAKmyC,8DAIL1lC,EAAOwnC,0BACPj0C,KAAKukC,UAlSgBtgC,EAkScjE,KAAK8L,IAjS7C,CACH5K,KAAM7B,EAAW2E,gCACjBC,QAASA,kCAiSOwI,EAAOrK,MAAM1C,YACZ,sBAOA,iCAOA,yDAbDM,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sEAIbK,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,yBAA2B8M,EAAOrK,MAAMvC,KAAK,uDAI1DG,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,8DAIbK,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sGAMrBK,KAAKmyC,4DAGTnyC,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,4BAA8BuN,EAAAkK,GAAGzX,mBAGlDK,KAAKukC,SAAS2O,wCA7Uf,IAA8BjvC,kFAqQKguC,QAsIpCiC,eAMF,SAAAA,EAAAzhC,GAAqN,IAAA9G,EAAvMumC,EAAuMz/B,EAAvMy/B,MAAO3N,EAAgM9xB,EAAhM8xB,SAAUz4B,EAAsL2G,EAAtL3G,IAAKuzB,EAAiL5sB,EAAjL4sB,QAASiD,EAAwK7vB,EAAxK6vB,iBAAkBz2B,EAAsJ4G,EAAtJ5G,MAAsJ,OAAA/L,OAAAC,EAAA,EAAAD,CAAAE,KAAAk0C,IACjNvoC,EAAA7L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAo0C,GAAA/zC,KAAAH,KAAM,CAAEkyC,YANZ3N,cAKqN,EAAA54B,EAJrNG,SAIqN,EAAAH,EAHrN0zB,aAGqN,EAAA1zB,EAFrN22B,sBAEqN,EAAA32B,EADrNE,WACqN,EAGjNF,EAAK44B,SAAWA,EAChB54B,EAAKG,IAAMA,EACXH,EAAK22B,iBAAmBA,EACxB32B,EAAKE,MAAQA,EACbF,EAAK0zB,QAAUA,EAPkM1zB,yMAYvMi0B,EAAS,IAAI2S,GAAgB,CAC/BzmC,IAAK9L,KAAKsiC,iBACVz2B,MAAO7L,KAAK6L,iBAEK+zB,EAAOuU,aAAa,CAAEroC,IAAK9L,KAAK8L,IAAKuzB,QAASr/B,KAAKq/B,oBAAlE5yB,UAEFzM,KAAKmyC,8DAIL1lC,EAAOwnC,0BACPj0C,KAAKukC,UAvZgBtgC,EAuZcjE,KAAK8L,IAtZ7C,CACH5K,KAAM7B,EAAWgF,gCACjBC,QAASL,kCAsZOwI,EAAOrK,MAAM1C,YACZ,sBAOA,iCAOA,yDAbDM,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sEAIbK,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,yBAA2B8M,EAAOrK,MAAMvC,KAAK,uDAI1DG,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,8DAIbK,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sGAMrBK,KAAKmyC,4DAGTnyC,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,4BAA8B8O,EAAA2I,GAAGzX,mBAGlDK,KAAKukC,SAAS2O,wCAlcf,IAA8BjvC,kFA0XKguC,QA+LtCmC,GAzCEC,eAIF,SAAAA,EAAA3hC,GAAiK,IAAAmF,EAAnJq6B,EAAmJx/B,EAAnJw/B,MAAOvN,EAA4IjyB,EAA5IiyB,MAAOJ,EAAqI7xB,EAArI6xB,SAAUv/B,EAA2H0N,EAA3H1N,GAA2H,OAAAlF,OAAAC,EAAA,EAAAD,CAAAE,KAAAq0C,IAC7Jx8B,EAAA/X,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAu0C,GAAAl0C,KAAAH,KAAM,CAAEkyC,YAJZvN,WAGiK,EAAA9sB,EAFjK0sB,cAEiK,EAAA1sB,EADjK7S,QACiK,EAG7J6S,EAAK8sB,MAAQA,EACb9sB,EAAK0sB,SAAWA,EAChB1sB,EAAK7S,GAAKA,EALmJ6S,gNAUpI7X,KAAK2kC,MAAM2P,UAAUt0C,KAAKgF,cAAzC0H,UACF1M,KAAKmyC,0DAGLzlC,EACA1M,KAAKukC,SAASp/B,GAAcnF,KAAKgF,GAAI,CACjC9D,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,mCAGbK,KAAKukC,UA1kBWv/B,EA0kBchF,KAAKgF,GAzkBxC,CACH9D,KAAM7B,EAAW0F,0BACjBC,GAAIA,yDA0kBIhF,KAAKmyC,4DAGTnyC,KAAKukC,SAASp/B,GAAcnF,KAAKgF,GAAI,CACjC9D,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,wCAA0CoP,EAAAL,GAAG/O,mBAG9DK,KAAKukC,SAAS2O,wCAtlBf,IAAyBluC,iFAijBGitC,IA0G5B,SAASsC,GAAkBhvC,GAC9B,OAAO,SAACg/B,EAAmDC,GACzCgP,GAAkBhP,KAAhC,IADsFgQ,EAGhD52B,GAAWyJ,uBAAuB9hB,GAHckvC,EAAA30C,OAAAsU,GAAA,EAAAtU,CAAA00C,EAAA,GAG/EE,EAH+ED,EAAA,GAGzDryC,EAHyDqyC,EAAA,GAKlFryC,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAjmBL,SAAgCh/B,EAAqBnD,GACxD,MAAO,CACHlB,KAAM7B,EAAWoG,iCACjBF,YAAaA,EACbnD,MAAOA,GA6lBMsD,CAAuBgvC,EAAsBtyC,IAEtDmiC,EA1mBL,SAAkCh/B,GACrC,MAAO,CACHrE,KAAM7B,EAAWiG,mCACjBC,YAAaA,GAumBAC,CAAyBkvC,IAEtCnQ,EAAS2O,gFGhBFyB,uBAt4BX,SAAAA,EAAY9b,GAA6B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA20C,IACrCl1C,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA60C,GAAAx0C,KAAAH,KAAM64B,KAHVwQ,YAEyC,EAErC5pC,EAAKuB,MAAQ,CACT4zC,iBAAiB,EACjBC,WAAW,GAEfp1C,EAAK4pC,OAASyL,SAAS1L,SAAUC,OANI5pC,wFAShB,IAAAkM,EAAA3L,KACrB,GAAKA,KAAK+0C,aAAV,CAUAvL,KAAMwL,QAAQ,CACVz4B,MAAO,oBACPktB,QACI3Q,EAAA,yBACIA,EAAA,kFAEAA,EAAA,6FAAsEA,EAAA,8CAAtE,KAEAA,EAAA,uBAAGA,EAAA,0DAGXmc,KAhBY,WACZtpC,EAAK4vB,SAAS,CAAEqZ,iBAAiB,KAgBjCM,SAdW,aAeXC,OAAQ,MACRC,WAAY,YAvBZp1C,KAAKu7B,SAAS,CAAEqZ,iBAAiB,qCA2BhC3H,GACLA,EAAEC,iBACFltC,KAAK64B,MAAMwc,8CAGFpI,GACTA,EAAEqI,UACFt1C,KAAK64B,MAAM0c,aAAatI,EAAE/Q,OAAOx4B,mDAGjBupC,GAChBA,EAAEqI,UACFt1C,KAAK64B,MAAM2c,oBAAoBvI,EAAE/Q,OAAOx4B,0CAGjCupC,GACPA,EAAEqI,UACFt1C,KAAK64B,MAAM4c,WAAWxI,EAAE/Q,OAAOx4B,+CAGnBupC,GACZA,EAAEqI,UACFt1C,KAAK64B,MAAM6c,gBAAgBzI,EAAE/Q,OAAOx4B,+CAGxBupC,GACZA,EAAEqI,UACFt1C,KAAK64B,MAAM8c,gBAAgB1I,EAAE/Q,OAAOx4B,yDAGdupC,GACtBA,EAAEqI,UACFt1C,KAAK64B,MAAM+c,0BAA0B3I,EAAE/Q,OAAOx4B,iDAGhCupC,GACdjtC,KAAK64B,MAAMgd,kBAAkB5I,EAAE/Q,OAAO4Z,2CAItC,OACI91C,KAAK64B,MAAM/2B,YAAchE,EAAU2F,QACnCzD,KAAK64B,MAAMj2B,gBAAgB1B,OAASnD,EAAoB8E,KACvD7C,KAAK64B,MAAMr3B,YAAcxD,EAAUgF,KAChChD,KAAK64B,MAAMr3B,YAAcxD,EAAUy0B,OACnCzyB,KAAK64B,MAAMr3B,YAAcxD,EAAUgE,4CAK3C,OACIhC,KAAK64B,MAAM/2B,YAAchE,EAAU2F,QACnCzD,KAAK64B,MAAMr3B,YAAcxD,EAAUgF,2CAI5B+yC,GACX,OAAQA,EAAMnzC,gBAAgB1B,MAG1B,KAAMnD,EAAoBkI,MAE1B,KAAMlI,EAAoBqgB,iBACtB,MAAO,wBAGf,OAAQ23B,EAAMpyC,WACV,KAAM9F,EAAU+F,MACZ,MAAO,kBACX,QACI,MAAO,+DAIFmyC,GACb,OAAIA,EAAMnzC,gBAAgB1B,OAASnD,EAAoB8E,GAS5C,GARHkzC,EAAMpyC,YAAc9F,EAAU+F,MAE1Bk1B,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,QACjBoc,EAAMnzC,gBAAgBjD,cAHnC,wCAYMq2C,EAA2BrI,GACrC,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mIAGAA,EAAA,+FAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAIJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,+CASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,UAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAOsyC,EAAUtyC,OAAS,GAC7Bg4B,UAAW17B,KAAKk2C,eAAeF,GAC/BtI,YAdA,mCAeAE,WAAS,EACTD,SAAUA,IACb3tC,KAAKm2C,iBAAiBH,0CAO/BI,EAAyBzI,GACjC,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iKAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAIJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,2CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,iDASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,QAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO0yC,EAAQ1yC,OAAS,GAC3Bg4B,UAAW17B,KAAKk2C,eAAeE,GAC/B1I,YAdA,oCAeAC,SAAUA,IACb3tC,KAAKm2C,iBAAiBC,+CAO1BC,EAAsC1I,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iSAKAA,EAAA,qPAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,+BAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,+EACwDA,EAAA,yBADxD,kBAEmBA,EAAA,gCAFnB,2BAUpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,cAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO2yC,EAAa3yC,OAAS,GAChCg4B,UAAW17B,KAAKk2C,eAAeG,GAC/B3I,YAfJ,kDAgBIC,SAAU3tC,KAAKs2C,gBAAgBja,KAAKr8B,QACvCA,KAAKm2C,iBAAiBE,IAE3Bvd,EAAA,qBAAK4C,UAAU,oCACV17B,KAAKu2C,kBAAkBF,qDAU5C,OACIvd,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,+DAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB64B,MAAO,CAAEJ,MAAO,wDAKvC6c,GACjB,GAA2B,OAAvBA,EAAa9yC,OAAgD,IAA9B8yC,EAAa9yC,MAAM8L,OAAc,CAEhE,OACIspB,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAHI,8DAITuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,YAMlD,GAAI6c,EAAa5zC,gBAAgB1B,OAASnD,EAAoB8E,GAC1D,OACIi2B,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKy2C,uBAMlB,OACI3d,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAHI,0CAITuc,EAAA,mBAAGmD,KAAMua,EAAa9yC,MAAOw4B,OAAO,UAChCpD,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qDAOds1C,EAAsC7I,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iLAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,+BAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,qEAC8CA,EAAA,yBAD9C,kBAEmBA,EAAA,gCAFnB,QAEoCA,EAAA,gCAFpC,2BAUpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,mBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO8yC,EAAa9yC,OAAS,GAChCg4B,UAAW17B,KAAKk2C,eAAeM,GAC/B9I,YAfJ,uDAgBIC,SAAUA,IACb3tC,KAAKm2C,iBAAiBK,IAE3B1d,EAAA,qBAAK4C,UAAU,oCACV17B,KAAK02C,qBAAqBF,8CAQpC/M,GAQX,OACI3Q,EAAA,cAAC6d,GAAA,EAAD,CAAUC,UAAU,GAChB9d,EAAA,cAAC6d,GAAA,EAASE,MAAV,CAAgBC,OAAO,6BAA6B9qC,IAAI,SAAS+tB,MAT3D,CACVgd,WAAY,cACZC,aAAc,EACdpL,OAAQ,EACR5R,OAAQ,EACRid,SAAU,WAKDxN,mDAMMyN,EAAiCvJ,GACpD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iKAIAA,EAAA,qTAKAA,EAAA,iKAkBAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,kCAQpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,aAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,yBACIA,EAAA,cAACoW,GAAA,EAAD,CACI4G,QAASoB,EAAexzC,MACxBg4B,UAAW17B,KAAKk2C,eAAegB,GAC/BvJ,SAAUA,IACb3tC,KAAKm3C,gBAAgBD,EAAexzC,QAExC1D,KAAKm2C,iBAAiBe,yDAOhBE,EAAwCzJ,GAC/D,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,4GAGAA,EAAA,oLAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,2CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,gDASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,wBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BAEX5C,EAAA,cAACue,GAAAvqC,EAAD,CAAUpJ,MAAO0zC,EAAuB1zC,OAAS,GAC7Cg4B,UAAW17B,KAAKk2C,eAAekB,GAA0B,6CACzDE,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjC9J,YAhBA,kFAiBAC,SAAUA,IACb3tC,KAAKm2C,iBAAiBiB,mDAOtBK,EAAkC9J,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,yHAGAA,EAAA,gDAC0BA,EAAA,mBAAGmD,KAAK,sDAAsDC,OAAO,UAArE,YAD1B,4EAIApD,EAAA,kJAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,oCACaA,EAAA,mBAAGmD,KAAK,sDAAsDC,OAAO,UAArE,iBAQjC,OACIpD,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,iBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAAC4e,GAAA,EAAD,CAAMC,iBAAiB,SAASC,UAAU,GACtC9e,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAI,SAAS9rC,IAAI,UAC3B8sB,EAAA,cAACue,GAAAvqC,EAAD,CAAUpJ,MAAO+zC,EAAiB/zC,OAAS,GACvCg4B,UAAW17B,KAAKk2C,eAAeuB,GAAoB,uCACnDH,SAAU,CAAEC,QAAS,EAAGC,QAAS,IACjC9J,YAjBR,gDAkBQC,SAAUA,IACb3tC,KAAKm2C,iBAAiBsB,IAE3B3e,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAI,UAAU9rC,IAAI,WAC5B8sB,EAAA,qBAAK4C,UAAU,sCACXqc,wBAA0B,CAAEC,OAAQC,UAAOC,MAAMT,EAAiB/zC,OAAS,yDAWvG,OACIo1B,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,yBAEf5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAKiB,MAAO,CAAEoe,KAAM,YAChBrf,EAAA,8FAQhB,OACIA,EAAA,sBAAM9zB,GAAG,sBAAsB02B,UAAU,iDAAiD+R,SAAUztC,KAAKytC,SAASpR,KAAKr8B,OAClHA,KAAKo4C,qBACNtf,EAAA,qBAAK4C,UAAU,wBACV17B,KAAKq4C,cAAcr4C,KAAK64B,MAAM51B,gBAAgB3C,KAAMN,KAAKs4C,aAAajc,KAAKr8B,OAC3EA,KAAKu4C,YAAYv4C,KAAK64B,MAAM51B,gBAAgB+B,GAAIhF,KAAKw4C,WAAWnc,KAAKr8B,OACrEA,KAAKy4C,iBAAiBz4C,KAAK64B,MAAM51B,gBAAgBgB,QAASjE,KAAKs2C,gBAAgBja,KAAKr8B,OACpFA,KAAK04C,iBAAiB14C,KAAK64B,MAAM51B,gBAAgBqB,QAAStE,KAAK24C,gBAAgBtc,KAAKr8B,OACpFA,KAAK44C,uBAAuB54C,KAAK64B,MAAM51B,gBAAgB2C,UAAW5F,KAAK64C,kBAAkBxc,KAAKr8B,OAC9FA,KAAK84C,2BAA2B94C,KAAK64B,MAAM51B,gBAAgB0B,kBAAmB3E,KAAK+4C,0BAA0B1c,KAAKr8B,OAClHA,KAAKg5C,qBAAqBh5C,KAAK64B,MAAM51B,gBAAgBsC,YAAavF,KAAKi5C,oBAAoB5c,KAAKr8B,OACjG84B,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,yBAEf5C,EAAA,qBAAK4C,UAAU,uBAAuB3B,MAAO,CAAE2V,UAAW,WACtD5W,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,sBAAM4C,UAAU,oBACX17B,KAAKk5C,oBAEVpgB,EAAA,sBAAM4C,UAAU,oBACX17B,KAAKm5C,0DAU/BjgB,EAAkBC,GACrB,IAAMtV,EAAKqV,EAASE,WAAWD,GAC/B,GAAItV,GAAM,OAAUA,GAAM,OAAUqV,EAAS1pB,OAAS2pB,EAAW,EAAG,CAChE,IAAME,EAAKH,EAASE,WAAWD,EAAW,GAC1C,GAAIE,EAAK,OAAUA,GAAM,MACrB,OAAOH,EAASI,UAAUH,EAAU,GAG5C,OAAOD,EAASI,UAAUH,EAAU,sCAG7Bza,GACP,OACIoa,EAAA,cAAC4P,GAAD,CAASzkC,QAAS,KAAMg1B,KAAM,GAAIQ,iBAAkB/a,EAAIpe,KAAKoD,MAAOyR,eAAgBuJ,EAAI1Z,GAAGtB,gDAInFkC,GACZ,OAAIA,EAEIkzB,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,4BACsD43B,EAAA,+BADtD,qCAMJA,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAY,IAD3B,6FAOJ,IAAMlB,KAAK64B,MAAM51B,gBAAgB3C,KAAKoD,QAAS1D,KAAK64B,MAAM51B,gBAAgB+B,GAAGtB,MAAQ,CAEjF,OACIo1B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,wEAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAW64B,MAAO,CAAEJ,MAAO,WAKlD,IAAMJ,EAAUv5B,KAAKw5B,OAAOx5B,KAAK64B,MAAM51B,gBAAgB3C,KAAKoD,MAAO,GAAGg2B,cAGhEC,EAFOC,KAAI55B,KAAK64B,MAAM51B,gBAAgB+B,GAAGtB,OAE5Bm2B,OAAO,EAAG,GAC7B,OACIf,EAAA,qBAAKE,MAHI,GAGSc,OAHT,GAGuBC,MAAO,CAAEC,OAAQ,uCAC7ClB,EAAA,sBAAMmB,EAAE,MAAMC,EAAE,MAAMC,GAAI,EAAGC,WAAW,SAASC,iBAAiB,SAASC,SAAUrB,GAAWsB,KAAM,IAAMZ,EAAOa,WAAW,cAAcjB,+CAOpJ,OACIT,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,qFAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB64B,MAAO,CAAEJ,MAAO,qDAK1C0c,GACd,OAA2B,OAAvBA,EAAa3yC,OAAgD,IAA9B2yC,EAAa3yC,MAAM8L,OAE9CspB,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKo5C,qBAKd/C,EAAazzC,gBAAgB1B,OAASnD,EAAoB8E,GAEtDi2B,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKq5C,oBAMdvgB,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,qBAAKC,IAAKsd,EAAa3yC,MAAOs1B,MAAO,4CAKnC,IAAAsgB,EACwCt5C,KAAK64B,MACjD4T,EAAQ,SAFJ6M,EACFx3C,UAC6B,YAF3Bw3C,EACS12C,gBACkD,WAF3D02C,EAC0B93C,UAEpC,OACIs3B,EAAA,sBAAMiB,MAAO,CAAEsU,YAAa,SAAW5B,yCAK3CzsC,KAAKu7B,SAAS,CAAEsZ,WAAY70C,KAAKgB,MAAM6zC,kDAG7B,IAAAh9B,EAAA7X,KACV,GAAIA,KAAK64B,MAAMz2B,OAASpC,KAAKgB,MAAM6zC,UAAW,CAC1C,IAMIz0C,EAgBJ,OAfIJ,KAAK64B,MAAMz2B,MAAMhC,QACjBA,EAAQJ,KAAK64B,MAAMz2B,MAAMhC,MAAMiJ,IAAI,SAACkwC,EAAM1N,GACtC,OACI/S,EAAA,qBAAK9sB,IAAK,QAAU6/B,GAAQ0N,MAIpCn5C,IACAA,EACI04B,EAAA,yBACIA,EAAA,kCACC14B,IAKT04B,EAAA,cAAC0gB,GAAA,EAAD,CAAOC,SAAS,EACZl9B,MAAM,QACNm9B,OAAO,SACPvE,OAAO,QACPC,WAAW,cACXF,SAzBS,WACbr9B,EAAK0jB,SAAS,CAAEsZ,WAAW,KAyBvBI,KA7BK,WACTp9B,EAAK0jB,SAAS,CAAEsZ,WAAW,MA6BvB/b,EAAA,qBAAKiB,MAAO,CAAEoP,WAAY,SACrBnpC,KAAK64B,MAAMz2B,MAAM1C,MAEtBo5B,EAAA,yBACK94B,KAAK64B,MAAMz2B,MAAMzC,SAErBS,+CAOb,OACI04B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTuS,KAAK,sBACL/hC,IAAI,SACJ6hC,UAAW7tC,KAAK25C,QAAQx5C,KAAKH,MAC7BguC,SAAS,UAJb,qDAWJ,OACIlV,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,SAASi7B,QAASn8B,KAAK45C,uBAAuBvd,KAAKr8B,OAC5D84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAW,IAD1B,qDAOJ,IAAI24C,EAQJ,OAPI75C,KAAK64B,MAAMz2B,QACXy3C,EACI/gB,EAAA,sBAAM4C,UAAU,oBACZ5C,EAAA,cAAC0S,GAAA,EAAD,CAAQsO,MAAM,SAASte,KAAK,cAAct6B,KAAK,SAASi7B,QAASn8B,KAAK+5C,YAAY1d,KAAKr8B,UAK/F84B,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,sBAAM4C,UAAU,oBACZ5C,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,UAAUi7B,QAASn8B,KAAK45C,uBAAuBvd,KAAKr8B,OAC7D84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAAc,IAD7B,SAIJ43B,EAAA,sBAAM4C,UAAU,oBACX17B,KAAKk5C,oBAETW,oCAMT,OAAI75C,KAAKgB,MAAM4zC,gBACJ9b,EAAA,cAACkhB,GAAA,EAAD,CAAU3pC,MAAI,EAAC05B,GAAG,mBAIzB/pC,KAAK64B,MAAMr3B,YAAcxD,EAAUgE,MAC5B82B,EAAA,cAACkhB,GAAA,EAAD,CAAU3pC,MAAI,EAAC05B,GAAI,qBAAuB/pC,KAAK64B,MAAM51B,gBAAgB+B,GAAGtB,QAI/Eo1B,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,qBAAK4C,UAAU,+CACV17B,KAAKi6C,gBAGTj6C,KAAKqxC,sBAn4BQzW,cC8CfsL,mBAlDR,SAAyBllC,GAC5B,IAAKA,EAAMI,MAAMC,WAAWC,UACxB,MAAM,IAAIf,MAAM,+BAFuC,IAAAgzC,EAUvDvyC,EALAI,MACIC,WACIC,UAKZ,MAAO,CACHQ,UAbuDyxC,EAOlCzxC,UAOrBN,UAduD+xC,EAOvB/xC,UAQhCoB,gBAfuD2wC,EAOZ3wC,gBAS3CK,gBAhBuDswC,EAOKtwC,gBAU5Db,MAjBuDmxC,EAOsBnxC,QAc9E,SAA4BmiC,GAC/B,MAAO,CACH8Q,OAAQ,WACJ9Q,EAAS4O,OAEboC,aAAc,SAACj1C,GACXikC,EAASmP,GAAWpzC,KAExBo1C,gBAAiB,SAACzxC,GACdsgC,EJ0jBL,SAAuBtgC,GAC1B,OAAO,SAACsgC,EAAmDC,GACnDgN,IACAA,GAAoB0I,SAF8D,IAAAC,EAKpDv8B,GAAWm1B,mBAAmB9uC,GALsBm2C,EAAAt6C,OAAAsU,GAAA,EAAAtU,CAAAq6C,EAAA,GAK/EE,EAL+ED,EAAA,GAK7Dh4C,EAL6Dg4C,EAAA,GAOtF,GAAIh4C,EAAMlB,OAASnD,EAAoB8E,IAiBvC,GAPA0hC,EAAS,CACLrjC,KAAM7B,EAAW2E,gCACjBC,QAASo2C,IAGb9V,EAAS2O,MAEgB,OAArBmH,GAA6BA,EAAiB7qC,OAAS,EAAG,KAAAi1B,EAItDD,IAFyB34B,EAF6B44B,EAEtD9S,KAAQE,cAAiBhmB,MAC0By2B,EAHGmC,EAGtDjS,IAAOE,OAAUoS,SAAYa,cAAiB75B,KAGlD0lC,GAAsB,IAAIuC,GAA4B,CAClD7B,MAAO,IACPpmC,IAAKuuC,EACLhb,QAAS,IACTkF,WAAUjC,mBAAkBz2B,WAGZyuC,cA7BpB/V,EAAS,CACLrjC,KAAM7B,EAAW8E,8BACjBF,QAASA,EACT7B,MAAOA,KItkBFm4C,CAAct2C,KAE3BwxC,WAAY,SAACzwC,GACTu/B,EJ4zBL,SAAkBv/B,GACrB,sBAAA2N,EAAA7S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA6C,EAAO20B,EAAmDC,GAA1D,IAAAgW,EAAAC,EAAAC,EAAAt4C,EAAAuiC,EAAA,OAAA93B,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,UACCgnC,IACAA,GAAe8F,SAFhBM,EAK0B58B,GAAWuJ,cAAcniB,GALnDy1C,EAAA36C,OAAAsU,GAAA,EAAAtU,CAAA06C,EAAA,GAKIE,EALJD,EAAA,IAKiBr4C,EALjBq4C,EAAA,IAMOv5C,OAASnD,EAAoB8E,GANpC,CAAAqN,EAAA9C,KAAA,eAOCm3B,EAASp/B,GAAcu1C,EAAat4C,IACpCmiC,EAAS2O,MARVhjC,EAAA3C,OAAA,oBAeHg3B,EAASl/B,GAAaL,IAMlBw/B,IAHApjC,MACIC,WAAcC,UAnBnB,CAAA4O,EAAA9C,KAAA,gBAAA8C,EAAA3C,OAAA,kBAuCGo3B,EAAQ6O,GAAkBhP,MAEhC4P,GAAiB,IAAIC,GAAqB,CACtCnC,MAAO,IACPltC,GAAI01C,EACJnW,SAAUA,EACVI,MAAOA,KAGI2V,QAhDZ,yBAAApqC,EAAA1C,SAAAoC,MAAP,gBAAAjB,EAAAC,GAAA,OAAA+D,EAAAlF,MAAAzN,KAAA0N,YAAA,GI7zBiBitC,CAAS31C,KAEtBwwC,oBAAqB,SAACjwC,GAClBg/B,EAASgQ,GAAkBhvC,KAE/BswC,kBAAmB,SAACjwC,GAChB2+B,EJqvBL,SAAyB3+B,GAC5B,OAAO,SAAC2+B,GAGJA,EAAS,CACLrjC,KAAM7B,EAAWsG,kCACjBC,cAEJ2+B,EAAS2O,OI7vBI0H,CAAgBh1C,KAE7B+vC,gBAAiB,SAACrxC,GACdigC,EJorBL,SAAuBjgC,GAC1B,OAAO,SAACigC,EAAmDC,GACnDsP,IACAA,GAAoBoG,SAF8D,IAAAW,EAKpDj9B,GAAWo1B,mBAAmB1uC,GALsBw2C,EAAAh7C,OAAAsU,GAAA,EAAAtU,CAAA+6C,EAAA,GAK/EE,EAL+ED,EAAA,GAK7D14C,EAL6D04C,EAAA,GAOtF,GAAI14C,EAAMlB,OAASnD,EAAoB8E,IAiBvC,GAPA0hC,EAAS,CACLrjC,KAAM7B,EAAWgF,gCACjBC,QAASy2C,IAGbxW,EAAS2O,MAEgB,OAArB6H,GAA6BA,EAAiBvrC,OAAS,EAAG,KAAAygC,EAItDzL,IAFyB34B,EAF6BokC,EAEtDte,KAAQE,cAAiBhmB,MAC0By2B,EAHG2N,EAGtDzd,IAAOE,OAAUoS,SAAYa,cAAiB75B,KAGlDgoC,GAAsB,IAAII,GAA4B,CAClDhC,MAAO,IACPpmC,IAAKivC,EACL1b,QAAS,IACTkF,WAAUjC,mBAAkBz2B,WAGZyuC,cA7BpB/V,EAAS,CACLrjC,KAAM7B,EAAWmF,8BACjBF,QAASA,EACTlC,MAAOA,KIhsBF44C,CAAc12C,KAE3BsxC,0BAA2B,SAACjxC,GACxB4/B,EJ4tBL,SAAiC5/B,GACpC,OAAO,SAAC4/B,GAAsD,IAAA0W,EACdr9B,GAAWq1B,6BAA6BtuC,GAD1Bu2C,EAAAp7C,OAAAsU,GAAA,EAAAtU,CAAAm7C,EAAA,GACnDE,EADmDD,EAAA,GACvB94C,EADuB84C,EAAA,GAGtD94C,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAAS,CACLrjC,KAAM7B,EAAWwF,wCACjBF,kBAAmBw2C,EACnB/4C,MAAOA,IAGXmiC,EAAS,CACLrjC,KAAM7B,EAAWqF,0CACjBC,kBAAmBw2C,KIzuBdC,CAAwBz2C,OAK9BuhC,CAA8FmV,ICnEvGvV,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,iFAIN,OACIC,EAAA,uGAMI12B,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAE3B,KAAK7E,EAAsB+D,QACvB,OAAOxC,KAAKoxC,gBAChB,KAAK3yC,EAAsBwH,MACvB,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAY,CACpB3xC,KAAM,gBACNC,QAAS,oCAGrB,KAAKlB,EAAsBkE,QAC3B,QACI,OACIm2B,EAAA,cAACwiB,GAAD,mDAMZ,OAAQt7C,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAEvBtD,KAAK64B,MAAMoN,yDAMnBjmC,KAAK64B,MAAM0Y,kBAzDE3W,aAkGNsL,mBAjBf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHyC,KAAMt6B,EAAMI,MAAMC,aAI1B,SAA4BkjC,GACxB,MAAO,CACH0B,OAAQ,WACJ1B,EAASlX,OAEbkkB,SAAU,WACNhN,ELuID,CACHrjC,KAAM7B,EAAWgE,oBKnIV6iC,CAA8FJ,IC5FhGyV,GAAb,WAII,SAAAA,EAAYpqC,GAA0BrR,OAAAC,EAAA,EAAAD,CAAAE,KAAAu7C,GAAAv7C,KAFtCmR,YAEqC,EACjCnR,KAAKmR,OAASA,EALtB,OAAArR,OAAAiM,EAAA,EAAAjM,CAAAy7C,EAAA,EAAAvvC,IAAA,yBAAAtI,MAAA,eAAA83C,EAAA17C,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAA,SAAAC,EAQiCmI,GARjC,IAAAi7B,EAAAlO,EAAAz7B,EAAA+N,EAAAkD,EAAAsJ,EAAA5I,EAAA,OAAAvL,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAccgjC,EAAY,IAAI1b,GAA2B,CAC7C7oB,MAAO7L,KAAKmR,OAAOtF,MAAOtC,SAAUvJ,KAAKmR,OAAO5H,SAChD6M,iBAAkBpW,KAAKmR,OAAOiF,iBAC9B6G,sBAAuBjd,KAAKmR,OAAO8L,wBAGjCilB,EAAgB,IAAIzb,GAA2B,CACjD5a,MAAO7L,KAAKmR,OAAOtF,MAAOtC,SAAUvJ,KAAKmR,OAAO5H,SAChD6M,iBAAkBpW,KAAKmR,OAAOiF,mBAtB1ClJ,EAAAE,KAAA,EA0BmCgjC,EAAUlrB,OAAO/P,GA1BpD,cA0Bc1O,EA1BdyG,EAAAG,KAAAH,EAAAE,KAAA,EA6B8B80B,EAAcuZ,qBAAqBtmC,GA7BjE,cA6BcX,EA7BdtH,EAAAG,KAAAH,EAAAE,KAAA,GA+BiC80B,EAAcwZ,wBAAwBvmC,GA/BvE,WA+BcuC,EA/BdxK,EAAAG,MAoCc2T,EAAW0T,GAA2BjuB,EAAczG,KAAKmR,OAAO5H,SAAUiL,EAASkD,IAG5ExW,OAASwzB,GAAoCjrB,OACtDuX,EAAS9f,OAASwzB,GAAoC3V,MAxClE,CAAA7R,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAyCkC80B,EAAcyZ,qCAAqCxmC,GAzCrF,QAyCYiD,EAzCZlL,EAAAG,KAAAH,EAAAE,KAAA,iBA2CYgL,EAAgB,KA3C5B,eAAAlL,EAAAK,OAAA,SA8Ce,CACH9G,eAAc+N,UAASkD,aAAYsJ,WAAU5I,kBA/CzD,yBAAAlL,EAAAM,SAAAR,EAAAhN,SAAA,gBAAA2O,GAAA,OAAA6sC,EAAA/tC,MAAAzN,KAAA0N,YAAA,MAAA6tC,EAAA,GCKO,SAASzI,KACZ,sBAAAtzC,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,OAAA33B,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACHm3B,EAAS,CACLrjC,KAAM7B,EAAWu8C,0BAGrBrX,EAAS,CACLrjC,KAAM7B,EAAWw4B,4BANlB,wBAAA3qB,EAAAM,SAAAR,MAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GCqKG,SAASmuC,GAAqBz5C,GACjC,MAAO,CACHlB,KAAM7B,EAAWy8C,gCACjB15C,MAAOA,GAmGR,SAASstB,GAAuBjpB,EAAqCqZ,GACxE,MAAO,CACH5e,KAAM7B,EAAWowB,kCACjBhpB,eACAqZ,cAID,SAASi8B,GAAqB35C,GACjC,MAAO,CACHlB,KAAM7B,EAAW28C,gCACjB55C,MAAOA,GAuIR,SAAS8sB,GACZzoB,EACAua,EACAnW,GACA,MAAO,CACH3J,KAAM7B,EAAW2vB,2CACjBvoB,eAAcua,WACdnW,iBAID,SAASzH,GAAUhB,GACtB,MAAO,CACHlB,KAAM7B,EAAW8vB,oBACjB/sB,MAAOA,GAkBR,SAAS65C,GAAwB75C,GACpC,MAAO,CACHlB,KAAM7B,EAAW68C,4BACjB95C,MAAOA,GA2BR,SAAS+5C,KACZ,MAAO,CACHj7C,KAAM7B,EAAW+8C,uCA6ElB,SAAStJ,GAAK39B,GACjB,sBAAAxC,EAAA7S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA6C,EAAO20B,EAAmDC,GAA1D,IAAAyL,EAAAC,EAAArkC,EAAAtC,EAAAmpB,EAAA2pB,EAAAna,EAAAkO,EAAAx9B,EAAA0pC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlwC,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cACHm3B,EAhMG,CACHrjC,KAAM7B,EAAW6uB,sBA8Ld+hB,EAMCzL,IAND0L,EAAAD,EAICte,KAAQE,cAAiBhmB,EAJ1BqkC,EAI0BrkC,MAAOtC,EAJjC2mC,EAIiC3mC,SACzBmpB,EALRud,EAKCzd,IAAOE,OAGL2pB,EAAa,IAAIW,GAAoB,CACvCnxC,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCw2B,iBAAkB5P,EAAOoS,SAASa,cAAc75B,IAChDmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,IACnDg4B,oBAAqBpR,EAAOoS,SAASW,UAAU35B,MAG7Co2B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAGvCskC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAxBpDoE,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EA4B0CivC,EAAWY,uBAAuB9nC,GA5B5E,UAAAvC,EAAA1C,EAAA7C,KA4BS5G,EA5BTmM,EA4BSnM,aAAcua,EA5BvBpO,EA4BuBoO,SAClBva,EAAaqC,OAAS4rB,GAA0B3rB,OA7BrD,CAAAmH,EAAA9C,KAAA,gBAAA8C,EAAA9C,KAAA,GA8BgC80B,EAAcgb,sBAAsB/nC,GA9BpE,eA8BWnM,EA9BXkH,EAAA7C,KA+BKk3B,EAASrV,GAA+BzoB,EAAcua,EAAUhY,IA/BrEkH,EAAA3C,OAAA,qBAuCKyT,EAAS9f,OAASwzB,GAAoC3V,OACtDiC,EAAS9f,OAASwzB,GAAoCjrB,MAxC3D,CAAAyG,EAAA9C,KAAA,gBAAA8C,EAAA9C,KAAA,GAyCyB80B,EAAcyZ,qCAAqCxmC,GAzC5E,eAyCKunC,EAzCLxsC,EAAA7C,KAAA6C,EAAA9C,KAAA,GA0C4B80B,EAAcib,iCAAiChoC,GA1C3E,eA0CKwnC,EA1CLzsC,EAAA7C,KAAA6C,EAAA9C,KAAA,GA2CyBgjC,EAAUgN,qBAAqB,CAAEjoC,mBA3C1D,eA2CKkZ,EA3CLne,EAAA7C,KAAA6C,EAAA9C,KAAA,GA4C0B80B,EAAcmb,8BAA8BloC,GA5CtE,QA4CKnM,EA5CLkH,EAAA7C,KAAA6C,EAAA9C,KAAA,iBA8CKsvC,EAAc,KACdC,EAAiB,KACjBtuB,EAAcqG,GAAuBuU,aACrCjgC,EAAe,GAjDpB,eAAAkH,EAAA9C,KAAA,GAsD0D80B,EAAcob,uBAAuBnoC,GAtD/F,QAsDOtK,EAtDPqF,EAAA7C,KAyD0B,QACnByS,EAAa4U,GAAyBjuB,EAAaqZ,WAAY,CACjE1V,OAFqB,QAGrBI,SAAU,KAGQ,QAChBpB,EAAUsrB,GAAsBjuB,EAAa2C,QAAS,CACxDgB,OAFkB,QAGlBI,SAAU,KAGd+5B,GA9PR99B,EA8PmCA,EA7PnCua,EA6PiDA,EA5PjDqN,EA4P2DA,EA3P3DjW,EA2PwEskC,EA1PxEpuB,EA0PqFquB,EAzPrF3zC,EA0PYA,EAzPZ6B,EAyP0BA,EAxP1B2jB,EA2OiC,QA1OjC1O,EAuP2DA,EAtP3D3V,EA+O8B,QA9O9Bf,EAqPsFA,EApP/E,CACHlI,KAAM7B,EAAW+uB,6BACjB3nB,eAAcua,WAAUqN,cACxBjW,gBAAekW,mBACftlB,eAAc6B,gBACd2jB,mBACA1O,aAAY3V,gBAAef,aAwKxB8G,EAAA9C,KAAA,iBAAA8C,EAAA/C,KAAA,GAAA+C,EAAAxB,GAAAwB,EAAA,SAwECq0B,EAASnhC,GAAU,CACf1D,KAAMwQ,EAAAxB,GAAGpO,KACTX,QAASuQ,EAAAxB,GAAG/O,WA1EjB,yBAAAuQ,EAAA1C,OA1LJ,IACH/G,EACAua,EACAqN,EACAjW,EACAkW,EACAtlB,EACA6B,EACA2jB,EACA1O,EACA3V,EACAf,GA+KOwG,EAAA,kBAAP,gBAAAiB,EAAAK,GAAA,OAAAyB,EAAAlF,MAAAzN,KAAA0N,YAAA,GAgFG,SAAS6vC,GAAOpoC,GACnB,sBAAAtC,EAAA/S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA0D,EAAO8zB,EAAmDC,GAA1D,IAAAW,EAAAC,EAAAv5B,EAAAtC,EAAAmpB,EAAA2pB,EAAAna,EAAAkO,EAAApvC,EAAAM,EAAAwR,EAAA0qC,EAAAC,EAAAC,EAAAC,EAAAjB,EAAAC,EAAAiB,EAAAC,EAAAC,EAAAC,EAAA,OAAAlxC,GAAAC,EAAAG,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,UAAA+3B,EAICX,IAJDY,EAAAD,EAECxT,KAAQE,cAAiBhmB,EAF1Bu5B,EAE0Bv5B,MAAOtC,EAFjC67B,EAEiC77B,SACzBmpB,EAHRyS,EAGC3S,IAAOE,OAGL2pB,EAAa,IAAIW,GAAoB,CACvCnxC,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCw2B,iBAAkB5P,EAAOoS,SAASa,cAAc75B,IAChDmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,IACnDg4B,oBAAqBpR,EAAOoS,SAASW,UAAU35B,MAG7Co2B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAGvCskC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAtBpD6E,EAAAxD,KAAA,EA2BOnM,EAAQwjC,IACRljC,EAAYN,EAAMI,MAAMyH,YAAYvH,UA5B3C,CAAAqP,EAAAvD,KAAA,gBA+BKm3B,EAASnhC,GAAU,CACf1D,KAAM,QACNC,QAAS,mBAjClBgR,EAAApD,OAAA,qBAsCKjM,EAAUwH,OAAS9J,EAAqB+J,OAtC7C,CAAA4H,EAAAvD,KAAA,gBAuCKm3B,EAASnhC,GAAU,CACf1D,KAAM,QACNC,QAAS,gCAzClBgR,EAAApD,OAAA,yBAAAoD,EAAAvD,KAAA,GA8C0CivC,EAAWY,uBAAuB9nC,GA9C5E,WAAArC,EAAAnC,EAAAtD,KA8CS5G,EA9CTqM,EA8CSrM,aAAcua,EA9CvBlO,EA8CuBkO,SAClBva,EAAaqC,OAAS4rB,GAA0B3rB,OA/CrD,CAAA4H,EAAAvD,KAAA,gBAAAuD,EAAAvD,KAAA,GAgDgC80B,EAAcgb,sBAAsB/nC,GAhDpE,eAgDWnM,EAhDX2H,EAAAtD,KAiDKk3B,EAASrV,GAA+BzoB,EAAcua,EAAUhY,IAjDrE2H,EAAApD,OAAA,qBAwDKyT,EAAS9f,OAASwzB,GAAoC3V,OACtDiC,EAAS9f,OAASwzB,GAAoCjrB,MAzD3D,CAAAkH,EAAAvD,KAAA,gBAAAuD,EAAAvD,KAAA,GA0DyB80B,EAAcyZ,qCAAqCxmC,GA1D5E,eA0DKunC,EA1DL/rC,EAAAtD,KAAAsD,EAAAvD,KAAA,GA2D4B80B,EAAcib,iCAAiChoC,GA3D3E,eA2DKwnC,EA3DLhsC,EAAAtD,KAAAsD,EAAAvD,KAAA,GA4DyBgjC,EAAUgN,qBAAqB,CAAEjoC,mBA5D1D,QA4DKkZ,EA5DL1d,EAAAtD,KAAAsD,EAAAvD,KAAA,iBA8DKsvC,EAAc,KACdC,EAAiB,KACjBtuB,EAAcqG,GAAuBuU,aAhE1C,eAAAt4B,EAAAvD,KAAA,GAmEyD80B,EAAcmb,8BAA8BloC,GAnErG,eAmEOnM,EAnEP2H,EAAAtD,KAAAsD,EAAAvD,KAAA,GAoE0D80B,EAAcob,uBAAuBnoC,GApE/F,QAoEOtK,EApEP8F,EAAAtD,KAuE0B,QACnByS,EAAa4U,GAAyBjuB,EAAaqZ,WAAY,CACjE1V,OAAQ9I,EAAUitB,iBAClB/jB,SAAUlJ,EAAUmtB,qBAGF,QAChBrlB,EAAUsrB,GAAsBjuB,EAAa2C,QAAS,CACxDgB,OAAQ9I,EAAU6I,cAClBK,SAAUlJ,EAAUiJ,kBAGxBg6B,GAvUR99B,EAuUqCA,EAtUrCua,EAsUmDA,EArUnDqN,EAqU6DA,EApU7DjW,EAoU0EskC,EAnU1EpuB,EAmUuFquB,EAlUvF3zC,EAmUYA,EAlUZ6B,EAkU0BA,EAjU1B2jB,EAoTiC,QAnTjC1O,EAgU2DA,EA/T3D3V,EAwT8B,QAvT9Bf,EA8TsFA,EA7T/E,CACHlI,KAAM7B,EAAWyvB,+BACjBroB,eAAcua,WAAUqN,cACxBjW,gBAAekW,mBACftlB,eAAc6B,gBACd2jB,mBACA1O,aAAY3V,gBAAef,aAmOxBuH,EAAAvD,KAAA,iBAAAuD,EAAAxD,KAAA,GAAAwD,EAAAjC,GAAAiC,EAAA,SAsFC4zB,EAASnhC,GAAU,CACf1D,KAAMiR,EAAAjC,GAAGpO,KACTX,QAASgR,EAAAjC,GAAG/O,WAxFjB,yBAAAgR,EAAAnD,OArPJ,IACH/G,EACAua,EACAqN,EACAjW,EACAkW,EACAtlB,EACA6B,EACA2jB,EACA1O,EACA3V,EACAf,GA0OOqH,EAAA,kBAAP,gBAAA6B,EAAAC,GAAA,OAAAM,EAAApF,MAAAzN,KAAA0N,YAAA,GA8FG,SAASswC,KACZ,sBAAAjrC,EAAAjT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAgE,EAAOwzB,EAAmDC,GAA1D,IAAAxjC,EAAAi9C,EAAApyC,EAAAtC,EAAAmpB,EAAAjsB,EAAA2pC,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,WAEGpM,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAH1B,CAAA2P,EAAA7D,KAAA,eAICm3B,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qBANdsR,EAAA1D,OAAA,wBAAA0wC,EAiBCj9C,EALA2wB,KAAQE,cAAiBhmB,EAZ1BoyC,EAY0BpyC,MAAOtC,EAZjC00C,EAYiC10C,SACzBmpB,EAIP1xB,EAJAwxB,IAAOE,OAEyBjsB,EAEhCzF,EAHAI,MACIyH,YAAevH,UAAamF,aAI9B2pC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAtBpDmF,EAAA9D,KAAA,EAAA8D,EAAA7D,KAAA,EA0BOgjC,EAAUzoB,kBAAkBlhB,EAAazB,IA1BhD,OA2BCu/B,EA9TD,CACHrjC,KAAM7B,EAAW6+C,gCA8Tb3Z,EAASuO,GAAMrsC,EAAazB,KA5B7BiM,EAAA7D,KAAA,iBAAA6D,EAAA9D,KAAA,GAAA8D,EAAAvC,GAAAuC,EAAA,SA8BCszB,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAASsR,EAAAvC,GAAG/O,WAhCjB,yBAAAsR,EAAAzD,SAAAuD,EAAA,kBAAP,gBAAAyB,EAAAc,GAAA,OAAAP,EAAAtF,MAAAzN,KAAA0N,YAAA,GAsCG,SAASywC,GAAyBntC,GACrC,sBAAAgC,EAAAlT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAkF,EAAOsyB,EAAmDC,GAA1D,IAAAxjC,EAAAo9C,EAAAvyC,EAAAtC,EAAAmpB,EAAAwP,EAAAmc,EAAA,OAAAxxC,GAAAC,EAAAG,KAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,UACHm3B,EAjVG,CACHrjC,KAAM7B,EAAWi/C,+BAkVXt9C,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAJ1B,CAAA8Q,EAAAhF,KAAA,eAKCm3B,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qBAPdyS,EAAA7E,OAAA,wBAAA6wC,EAiB6Cp9C,EAJ5C2wB,KAAQE,cAAiBhmB,EAb1BuyC,EAa0BvyC,MAAOtC,EAbjC60C,EAaiC70C,SACzBmpB,EAGqC1xB,EAH5CwxB,IAAOE,OAGqC1xB,EAF5CI,MACIyH,YACIvH,UAAamF,aAEnBy7B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MArB1CsG,EAAAjF,KAAA,EAAAiF,EAAAhF,KAAA,GAyB0B80B,EAAclpB,cAAchI,GAzBtD,QAyBOqtC,EAzBPjsC,EAAA/E,KA0BCk3B,EA/UD,CACHrjC,KAAM7B,EAAWuL,uCA+Ub25B,EAASuO,GAAKuL,EAAWlpC,iBA3B1B/C,EAAAhF,KAAA,iBAAAgF,EAAAjF,KAAA,GAAAiF,EAAA1D,GAAA0D,EAAA,SA6BCmyB,GA7UkCniC,EA6UK,CACnClB,KAAMtD,EAAYqI,MAClBtG,QAASyS,EAAA1D,GAAG/O,SA9UjB,CACHuB,KAAM7B,EAAWk/C,mCACjBn8C,MAAOA,KA6SJ,yBAAAgQ,EAAA5E,OAhTJ,IAAuCpL,GAgTnC6P,EAAA,kBAAP,gBAAAqC,EAAAsF,GAAA,OAAA5G,EAAAvF,MAAAzN,KAAA0N,YAAA,GAqCG,SAAS8wC,GAAqBxtC,GACjC,sBAAAiC,EAAAnT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAoG,EAAOoxB,EAAmDC,GAA1D,IAAAxjC,EAAAy9C,EAAA5yC,EAAAtC,EAAAmpB,EAAAwP,EAAAmc,EAAA,OAAAxxC,GAAAC,EAAAG,KAAA,SAAAoG,GAAA,cAAAA,EAAAlG,KAAAkG,EAAAjG,MAAA,UACHm3B,EAAS4X,OAEHn7C,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAJ1B,CAAA+R,EAAAjG,KAAA,eAKCm3B,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qBAPd0T,EAAA9F,OAAA,wBAAAkxC,EAiB6Cz9C,EAJ5C2wB,KAAQE,cAAiBhmB,EAb1B4yC,EAa0B5yC,MAAOtC,EAbjCk1C,EAaiCl1C,SACzBmpB,EAGqC1xB,EAH5CwxB,IAAOE,OAGqC1xB,EAF5CI,MACIyH,YACIvH,UAAamF,aAEnBy7B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MArB1CuH,EAAAlG,KAAA,EAAAkG,EAAAjG,KAAA,GAyB0B80B,EAAcsc,qBAAqBxtC,GAzB7D,QAyBOqtC,EAzBPhrC,EAAAhG,KA0BCk3B,EAhWD,CACHrjC,KAAM7B,EAAWq/C,0CAiWbna,EAASuO,GAAKuL,EAAWlpC,iBA5B1B9B,EAAAjG,KAAA,iBAAAiG,EAAAlG,KAAA,GAAAkG,EAAA3E,GAAA2E,EAAA,SA8BCkxB,GA/V8BniC,EA+VK,CAC/B1C,KAAM2T,EAAA3E,GAAGpO,KACTX,QAAS0T,EAAA3E,GAAG/O,SAhWjB,CACHuB,KAAM7B,EAAWs/C,sCACjBv8C,MAAOA,KA8TJ,yBAAAiR,EAAA7F,OAjUJ,IAAmCpL,GAiU/B+Q,EAAA,kBAAP,gBAAA6G,EAAAK,GAAA,OAAApH,EAAAxF,MAAAzN,KAAA0N,YAAA,GAuCG,SAASkxC,GAAqB5tC,GACjC,sBAAAoC,EAAAtT,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAyG,EAAO+wB,EAAmDC,GAA1D,IAAAxjC,EAAA69C,EAAAhzC,EAAAtC,EAAAmpB,EAAAwP,EAAAmc,EAAA,OAAAxxC,GAAAC,EAAAG,KAAA,SAAAiH,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA9G,MAAA,UACHm3B,EAAS4X,OAEHn7C,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAJ1B,CAAA4S,EAAA9G,KAAA,eAKCm3B,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qBAPduU,EAAA3G,OAAA,wBAAAsxC,EAiB6C79C,EAJ5C2wB,KAAQE,cAAiBhmB,EAb1BgzC,EAa0BhzC,MAAOtC,EAbjCs1C,EAaiCt1C,SACzBmpB,EAGqC1xB,EAH5CwxB,IAAOE,OAGqC1xB,EAF5CI,MACIyH,YACIvH,UAAamF,aAEnBy7B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MArB1CoI,EAAA/G,KAAA,EAAA+G,EAAA9G,KAAA,GAyB0B80B,EAAc0c,qBAAqB5tC,GAzB7D,QAyBOqtC,EAzBPnqC,EAAA7G,KA0BCk3B,EAnXD,CACHrjC,KAAM7B,EAAWy/C,0CAmXbva,EAASuO,GAAKuL,EAAWlpC,iBA3B1BjB,EAAA9G,KAAA,iBAAA8G,EAAA/G,KAAA,GAAA+G,EAAAxF,GAAAwF,EAAA,SA6BCqwB,GAjX8BniC,EAiXK,CAC/B1C,KAAMwU,EAAAxF,GAAGpO,KACTX,QAASuU,EAAAxF,GAAG/O,SAlXjB,CACHuB,KAAM7B,EAAW0/C,sCACjB38C,MAAOA,KAiVJ,yBAAA8R,EAAA1G,OApVJ,IAAmCpL,GAoV/BoR,EAAA,kBAAP,gBAAA8G,EAAAwN,GAAA,OAAA1U,EAAA3F,MAAAzN,KAAA0N,YAAA,GCv0BG,SAAS0L,GAAcpI,GAC1B,sBAAAxR,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAqEC,GAA5E,IAAAxjC,EAAAM,EAAA+xC,EAAAxnC,EAAAtC,EAAAmpB,EAAAwP,EAAA8c,EAAAC,EAAA,OAAApyC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACGpM,EAAQwjC,IAII,QAFZljC,EAAYN,EAAMI,MAAMyH,YAAYvH,WAHvC,CAAA4L,EAAAE,KAAA,eAMCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,QACNC,QAAS,mBAVlBuN,EAAAK,OAAA,oBAiBCjM,EAAUwH,OAAS9J,EAAqB+J,OAjBzC,CAAAmE,EAAAE,KAAA,eAkBCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,gBACNC,QAAS,sCAtBlBuN,EAAAK,OAAA,wBA4BHg3B,EAAS,CACLrjC,KAAM7B,EAAW8/C,sCA7BlB9L,EAmCCryC,EAFA2wB,KAAQE,cAAiBhmB,EAjC1BwnC,EAiC0BxnC,MAAOtC,EAjCjC8pC,EAiCiC9pC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAILwP,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAxC1CoB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GA4CuB80B,EAAc9oB,cAAcpI,GA5CnD,eA4COwD,EA5CPtH,EAAAG,KAAAH,EAAAE,KAAA,GA+CqB80B,EAAcmb,8BAA8B/7C,EAAUmF,aAAazB,IA/CxF,QA+COi6C,EA/CP/xC,EAAAG,KAiDCk3B,EAAS,CACLrjC,KAAM7B,EAAWuJ,sCACjBK,SAAUg2C,IAEd1a,EAAS6a,GAAsB5qC,EAAQW,iBArDxCjI,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,UAwDCq3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,WA5DrB,yBAAAuN,EAAAM,SAAAR,EAAA,mBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,iBCwDW2xC,uBA7CX,SAAAA,EAAYxmB,EAAoBymB,GAA6B,IAAA7/C,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAq/C,IACzD5/C,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAu/C,GAAAl/C,KAAAH,KAAM64B,KAED73B,MAAQ,CACTu+C,gBAAiB,UAJoC9/C,gFASzD,GAAIO,KAAK64B,MAAM2mB,YACX,OACI1mB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,QAAQ64B,MAAO,CAAE0lB,cAAe,SAAUC,WAAY,MAAOrR,YAAa,iDAKjFpB,qCAWZ,OACInU,EAAA,qBAAK4C,UAAU,UACX5C,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,qBAAK4C,UAAU,sBACV17B,KAAK64B,MAAM2mB,aAEhB1mB,EAAA,qBAAK4C,UAAU,kBACV17B,KAAK64B,MAAM8mB,mBArCnB/kB,cC/Bd,SAAS1O,GAAT1sB,GAOL,IANIE,EAMJF,EANIE,KAAMC,EAMVH,EANUG,QAASC,EAMnBJ,EANmBI,OAAQusB,EAM3B3sB,EAN2B2sB,QAAS/rB,EAMpCZ,EANoCY,MAAOP,EAM3CL,EAN2CK,KAOzC,MAAO,CACHH,OAAMC,UAASC,SACfoF,GAAIonB,OACJC,GAAI,IAAItpB,KACRopB,UAAS/rB,QAAOP,QCqHjB,SAAS+/C,GAAep2C,GAC3B,OAAO,SAAC+6B,EAAmDC,GACvDD,EArBG,CACHrjC,KAAM7B,EAAWwgD,+CAmBqE,IAAA5P,EASlFzL,IATkF0L,EAAAD,EAIlFte,KAAQE,cAAiBhmB,EAJyDqkC,EAIzDrkC,MAAOtC,EAJkD2mC,EAIlD3mC,SACzBmpB,EAL2Eud,EAKlFzd,IAAOE,OAEYpxB,EAP+D2uC,EAMlF7uC,MACIyH,YAAevH,UAGvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,yBAEF,IAAIm0B,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAG7Cmc,cAAc3mB,EAAUmF,aAAazB,GAAIwE,GAC9C8C,KAAK,SAACoS,GACH6lB,EApCT,SAA+B/6B,GAClC,MAAO,CACHtI,KAAM7B,EAAW8J,+CACjBK,kBAiCiBG,CAAsBH,MAElCk1B,MAAM,SAACC,GA/Bb,IAA6Bv8B,EAgCpBmiC,GAhCoBniC,EAgCS,CACzB1C,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,SAjCtB,CACHuB,KAAM7B,EAAWygD,6CACjB19C,MAAOA,QA+ER,SAAS29C,GAAev2C,GAC3B,OAAO,SAAC+6B,EAAmDC,GACvDD,EArBG,CACHrjC,KAAM7B,EAAW2gD,+CAmBqE,IAAA7a,EASlFX,IATkFY,EAAAD,EAIlFxT,KAAQE,cAAiBhmB,EAJyDu5B,EAIzDv5B,MAAOtC,EAJkD67B,EAIlD77B,SACzBmpB,EAL2EyS,EAKlF3S,IAAOE,OAEYpxB,EAP+D6jC,EAMlF/jC,MACIyH,YAAevH,UAIvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,yBAEF,IAAIm0B,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAG7Cuc,cAAc/mB,EAAUmF,aAAazB,GAAIwE,GAC9C8C,KAAK,SAACoS,GACH6lB,EArCT,SAA+B/6B,GAClC,MAAO,CACHtI,KAAM7B,EAAWuK,+CACjBJ,eAAgBA,GAkCCM,CAAsBN,MAGlCk1B,MAAM,SAACC,GAjCb,IAA6Bv8B,EAkCpBmiC,GAlCoBniC,EAkCS,CACzB1C,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,SAnCtB,CACHuB,KAAM7B,EAAW4gD,6CACjB79C,MAAOA,QAgFR,SAASqmB,GAAajf,GACzB,OAAO,SAAC+6B,EAAmDC,GACvDD,EArBG,CACHrjC,KAAM7B,EAAW6gD,4CAmBqE,IAAArP,EASlFrM,IATkFsM,EAAAD,EAIlFlf,KAAQE,cAAiBhmB,EAJyDilC,EAIzDjlC,MAAOtC,EAJkDunC,EAIlDvnC,SACzBmpB,EAL2Eme,EAKlFre,IAAOE,OAEYpxB,EAP+DuvC,EAMlFzvC,MACIyH,YAAevH,UAGvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,yBAGF,IAAIm0B,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAG7C2c,aAAannB,EAAUmF,aAAazB,GAAIwE,GAC7C8C,KAAK,WAGFi4B,EAAS4b,GAAU7+C,EAAUmF,aAAazB,OAE7C05B,MAAM,SAACC,GAlCpB,IAA2Bv8B,EAmCXmiC,GAnCWniC,EAmCgB,CACvB1C,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,SApCtB,CACHuB,KAAM7B,EAAW+gD,0CACjBh+C,MAAOA,YCxRV21B,UAeL,SAASmD,GAAYC,GACjB,OAAQA,GACJ,KAAKpD,GAAKqD,QACN,OAAOrD,GAAKhvB,OAChB,KAAKgvB,GAAKhvB,OACN,OAAOgvB,GAAKqD,mBApBnBrD,qEAyJUsoB,eAhIX,SAAAA,EAAYxnB,GAAoB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAqgD,IAC5B5gD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAugD,GAAAlgD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTs6B,KAAMvD,GAAKqD,SAJa37B,8EAS5BO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,6CAKjC,OAAQt7B,KAAK64B,MAAMvvB,OAAOpI,MACtB,KAAKwzB,GAAoB3V,MACrB,OACI+Z,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,UAIR,KAAKwzB,GAAoBjrB,MACrB,OACIqvB,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,UAIR,KAAKwzB,GAAoB7qB,OACrB,OACIivB,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,oDAQZ,IAAMo/C,EACFxnB,EAAA,yBACK94B,KAAK64B,MAAMvvB,OAAOC,UAG3B,OACIuvB,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,kBACX5C,EAAA,qBAAK4C,UAAU,eACX5C,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAO+jC,GACpCxnB,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvvB,OAAOC,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,YAG5F0c,EAAA,qBAAK4C,UAAU,eACV17B,KAAKugD,aACL,YACDznB,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMvL,KAAK64B,MAAMvvB,OAAOkW,YAE7CsZ,EAAA,qBAAK4C,UAAU,gBACV17B,KAAK64B,MAAMvvB,OAAOiT,OAASvc,KAAK64B,MAAMvjB,KAAKiH,gDAQ5D,IAAM+jC,EACFxnB,EAAA,yBACK94B,KAAK64B,MAAMvvB,OAAOC,UAG3B,OACIuvB,EAAA,qBAAK4C,UAAU,sBACX5C,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,kBACX5C,EAAA,qBAAK4C,UAAU,eACX5C,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAO+jC,GACpCxnB,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvvB,OAAOC,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,YAG5F0c,EAAA,qBAAK4C,UAAU,eACV17B,KAAKugD,aACL,YACDznB,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMvL,KAAK64B,MAAMvvB,OAAOkW,YAE7CsZ,EAAA,qBAAK4C,UAAU,gBACV17B,KAAK64B,MAAMvvB,OAAOiT,OAASvc,KAAK64B,MAAMvjB,KAAKiH,OAEhDuc,EAAA,qBAAK4C,UAAU,uBACV17B,KAAK64B,MAAMvjB,KAAK7O,cAAgBqyB,EAAA,2DAErCA,EAAA,qBAAK4C,UAAU,mBACV,CAAC17B,KAAK64B,MAAMvjB,KAAK+G,KAAMrc,KAAK64B,MAAMvjB,KAAKtU,MAAOhB,KAAK64B,MAAMvjB,KAAKgH,SAAStS,OAAO,SAAAiwB,GAAC,OAAIA,IAAGnsB,KAAK,OAASgrB,EAAA,sGAQrH,OAAQ94B,KAAKgB,MAAMs6B,MACf,KAAKvD,GAAKqD,QACN,OAAOp7B,KAAKs8B,gBAEhB,KAAKvE,GAAKhvB,OACN,OAAO/I,KAAKorC,uBA5HPxQ,aCpBfkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,OAAI74B,KAAK64B,MAAMvjB,KAEPwjB,EAAA,cAAC0nB,GAAD,CAAQl3C,OAAQtJ,KAAK64B,MAAMvvB,OAAQgM,KAAMtV,KAAK64B,MAAMvjB,KAAMsmB,WAAY57B,KAAK64B,MAAM+C,aAIjF9C,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAAa,IAD5B,iEAQHlB,KAAK64B,MAAMvjB,MACZtV,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAMvvB,OAAOC,iBArB3BqxB,aA6DNsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHvjB,KAAMtU,EAAMm2B,SAAS1Z,MAAM2Z,KAAKhpB,IAAIyqB,EAAMvvB,OAAOC,YAIzD,SAA4Bg7B,GACxB,MAAO,CACH0B,OAAQ,SAAC3B,GACLC,EAASlX,GAAmBiX,OAKzB4B,CAA8FJ,ICjDxF2a,uBACjB,SAAAA,EAAY5nB,GAAqB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAygD,IAC7BhhD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2gD,GAAAtgD,KAAAH,KAAM64B,KACD73B,MAAQ,CACT0/C,qBAAsB,MAHGjhD,qFAOX6J,GAClBtJ,KAAKu7B,SAAS,CACVmlB,qBAAsB,CAClBp3C,OAAQA,0DAKS,IAAAqC,EAAA3L,KACzB,GAAKA,KAAKgB,MAAM0/C,qBAAhB,CAGA,IAAMp3C,EAAStJ,KAAKgB,MAAM0/C,qBAAqBp3C,OAazCmgC,EACF3Q,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,wFAGAA,EAAA,qBAAK4C,UAAU,aAAa3B,MAAO,CAAE4mB,aAAc,QAC/C7nB,EAAA,cAAC8nB,GAAD,CAAQt3C,OAAQA,EAAQsyB,WAAY,MAExC9C,EAAA,wHAIAA,EAAA,yMAMR,OACIA,EAAA,cAAC0gB,GAAA,EAAD,CACIj9B,MArBM,4BAsBNyc,MAAM,OACNygB,SAAS,EACTxE,KAAM,WAlCVtpC,EAAKktB,MAAMgoB,eAAev3C,EAAOC,UACjCoC,EAAK4vB,SAAS,CACVmlB,qBAAsB,QAiCtBxL,SAAU,WA7BdvpC,EAAK4vB,SAAS,CACVmlB,qBAAsB,QA6BtBvL,OAAO,WACN1L,yCAKAz9B,EAAa1C,GACtB,OAAQ0C,GACJ,IAAK,iBACDhM,KAAK64B,MAAMioB,uBAAuBx3C,EAAOC,UACzC,MACJ,IAAK,eACDvJ,KAAK+gD,sBAAsBz3C,wCAK3B0C,EAAa1C,GACrB,OAAQ0C,GACJ,IAAK,iBACDhM,KAAK64B,MAAMmoB,sBAAsB13C,EAAOC,oDAKnCD,GAAyB,IAAAuO,EAAA7X,KAChCspC,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAAS,SAAA38B,GAAa,IAAVwM,EAAUxM,EAAVwM,IAAY6L,EAAKopC,aAAa9gD,KAAK0X,EAAM7L,EAAK1C,KAC5DwvB,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,kBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,oBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,gBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,kBAKR,OACI43B,EAAA,yBACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAWw6B,UAAU,+DAMhCpyB,GAAyB,IAAAo2B,EAAA1/B,KAC/BspC,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAAS,SAAA1pB,GAAa,IAAVzG,EAAUyG,EAAVzG,IAAY0zB,EAAKwhB,YAAY/gD,KAAKu/B,EAAM1zB,EAAK1C,KAC3DwvB,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,kBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,qBAKR,OACI43B,EAAA,yBACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAWw6B,UAAU,+DAMhCpyB,GACZ,OACIwvB,EAAA,sEAIYxvB,GAChB,GAAMtJ,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoC3V,OACnE/e,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoCjrB,MAIrE,OAAQH,EAAOpI,MACX,KAAKwzB,GAAoB3V,MACrB,OAAO/e,KAAKmhD,gBAAgB73C,GAChC,KAAKorB,GAAoBjrB,MACrB,OAAOzJ,KAAKohD,gBAAgB93C,GAChC,KAAKorB,GAAoB7qB,OACrB,OAAO7J,KAAKqhD,iBAAiB/3C,4CAIzB,IACRF,EADQ42B,EAAAhgC,KAENL,EACFm5B,EAAA,qBAAKiB,MAAO,CAAEunB,UAAW,SAAU5R,UAAW,WAA9C,cAkCJ,OA5BItmC,EAD8B,IAA9BpJ,KAAK64B,MAAMzvB,QAAQoG,OAEfspB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,IAGtBK,KAAK64B,MAAMzvB,QAAQC,IAAI,SAACC,GAC9B,IAMMi4C,EAAa,CAAC,cAAe,cAInC,OAT8C,OAA1CvhB,EAAKnH,MAAMpyB,aAAaiZ,eAGhBsgB,EAAKnH,MAAMpyB,aAAaiZ,cAAc9N,UAAYtI,EAAOkW,SAAS5N,WAI1E2vC,EAAWlxC,KAAK,qBAGhByoB,EAAA,qBAAK4C,UAAW6lB,EAAWzzC,KAAK,KAAM9B,IAAK1C,EAAOC,UAC9CuvB,EAAA,qBAAK4C,UAAU,kBACX5C,EAAA,cAAC8nB,GAAD,CAAQt3C,OAAQA,EAAQsyB,WAAY,MAExC9C,EAAA,qBAAK4C,UAAU,gBACVsE,EAAKwhB,oBAAoBl4C,OAQ1CwvB,EAAA,qBAAK4C,UAAU,aACVtyB,6CAKK,IAAAq4C,EAAAzhD,KAId,OACI84B,EAAA,qBAAKiB,MAAO,CAAE2nB,aAAc,QACxB5oB,EAAA,cAACmd,GAAA,EAAD,CAAOlc,MAAO,CAAEf,MAAO,OAAQqV,YAAa,OACxCX,YAAY,yBACZC,SAPK,SAACV,GACdwU,EAAK5oB,MAAM8oB,gBAAgB1U,EAAE/Q,OAAOx4B,mDAW5B,IAAAk+C,EAAA5hD,KAIZ,OACI84B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,sBAAM4C,UAAU,eAAhB,QACA5C,EAAA,cAACwV,GAAA,EAAD,CAAQX,SANK,SAACjqC,GAClBk+C,EAAK/oB,MAAMgpB,cAAcn+C,IAMjBq2B,MAAO,CAAEf,MAAO,QAChBwV,0BAA0B,EAC1BnvB,aAAcrf,KAAK64B,MAAM1uB,eAEzB2uB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,OAAOsI,IAAI,QAAhC,QACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,QAAQsI,IAAI,SAAjC,wDAOZ,OACI8sB,EAAA,qBAAK4C,UAAU,qCACX5C,EAAA,qBAAK4C,UAAU,qCACV17B,KAAK4vC,mBAEV9W,EAAA,qBAAK4C,UAAU,mCACV17B,KAAK8hD,mDAOlB,IAAI9M,EAIJ,OAHIh1C,KAAKgB,MAAM0/C,uBACX1L,EAAUh1C,KAAK+hD,8BAGfjpB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,kDACX5C,EAAA,qBAAK4C,UAAU,kCACV17B,KAAKgiD,gBAEVlpB,EAAA,qBAAK4C,UAAU,uDACV17B,KAAKiiD,kBAGbjN,UAtPoBpa,cCuCtBsL,mBArCf,SAAyBllC,EAAmB63B,GACxC,IAAMv3B,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,wBAGpB,MAAO,CACHgK,gBAFgDjJ,EAA5CiJ,gBAEaJ,cAF+B7I,EAA3B6I,cAEWf,QAFgB9H,EAAZ8H,UAMrC,SAA4Bm7B,GAC/B,MAAO,CACH2d,oBAAqB,WACjB3d,EJcD,CACHrjC,KAAM7B,EAAW8iD,gCIbjBrB,uBAAwB,SAACt3C,GACrB+6B,EAASlX,GAAuB7jB,KAEpCw3C,sBAAuB,SAACoB,GACpB7d,EAASlX,GAAuB+0B,KAEpCvB,eAAgB,SAACr3C,GACb+6B,EAASlX,GAAqB7jB,KAElCm4C,gBAAiB,SAACn3C,GACd+5B,EJgXL,SAAuB/5B,GAC1B,OAAO,SAAC+5B,EAAmDC,GACvDD,EAAS,CACLrjC,KAAM7B,EAAWgjD,8BAGrB,IACM/gD,EADQkjC,IACUpjC,MAAMyH,YAAYvH,UAE1C,GAAKA,EAWL,GAAIA,EAAUwH,OAAS9J,EAAqB+J,OAA5C,CAnBsF,IAiChFod,EAASuO,GAHKpzB,EAAUmF,aAAtB2C,QAGsC,CAC1CgB,OAHW9I,EAAU6I,cAIrBK,SAAUA,IAGd+5B,EAAS,CACLrjC,KAAM7B,EAAWiL,gCACjBE,SAAUA,EACVpB,QAAS+c,SArBToe,EAAS,CACLrjC,KAAM7B,EAAWijD,4BACjBlgD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS,sCAfjB4kC,EAAS,CACLrjC,KAAM7B,EAAWijD,4BACjBlgD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS,qBI9XR0tB,CAAsB7iB,KAEnCq3C,cAAe,SAACz3C,GACZm6B,EJsSL,SAAqBn6B,GACxB,OAAO,SAACm6B,EAAmDC,GACvDD,EAAS,CACLrjC,KAAM7B,EAAWgjD,8BAGrB,IAEM/gD,EAFQkjC,IAEUpjC,MAAMyH,YAAYvH,UAE1C,GAAkB,OAAdA,EAWJ,GAAIA,EAAUwH,OAAS9J,EAAqB+J,OAA5C,CApBsF,IA+B9EK,EAAY9H,EAAUmF,aAAtB2C,QACFoB,EAAWlJ,EAAUiJ,gBAErB4b,EAASuO,GAAsBtrB,EAAS,CAC1CgB,OAAQA,EACRI,SAAUA,IAGd+5B,EAAS,CACLrjC,KAAM7B,EAAW6K,8BACjBd,QAAS+c,EACT/b,gBArBAm6B,EAAS,CACLrjC,KAAM7B,EAAWijD,4BACjBlgD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS,sCAfjB4kC,EAAS,CACLrjC,KAAM7B,EAAWijD,4BACjBlgD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS,qBIrTR0tB,CAAoBjjB,OAK1B87B,CAA8Fqc,IC9BtG,SAAS/oC,GAAYxI,GACxB,sBAAAxR,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAqEC,GAA5E,IAAAxjC,EAAAM,EAAA+xC,EAAAxnC,EAAAtC,EAAAmpB,EAAAwP,EAAA+c,EAAA,OAAApyC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACGpM,EAAQwjC,IAII,QAFZljC,EAAYN,EAAMI,MAAMyH,YAAYvH,WAHvC,CAAA4L,EAAAE,KAAA,eAMCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,QACNC,QAAS,mBAVlBuN,EAAAK,OAAA,oBAiBCjM,EAAUwH,OAAS9J,EAAqB+J,OAjBzC,CAAAmE,EAAAE,KAAA,eAkBCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,gBACNC,QAAS,sCAtBlBuN,EAAAK,OAAA,wBA4BHg3B,EAAS,CACLrjC,KAAM7B,EAAWmjD,sCA7BlBnP,EAmCCryC,EAFA2wB,KAAQE,cAAiBhmB,EAjC1BwnC,EAiC0BxnC,MAAOtC,EAjCjC8pC,EAiCiC9pC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAILwP,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAxC1CoB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GA4CO80B,EAAc1oB,YAAYxI,GA5CjC,eAAA9D,EAAAE,KAAA,GA+CqB80B,EAAcgb,sBAAsB57C,EAAUmF,aAAazB,IA/ChF,QA+COi6C,EA/CP/xC,EAAAG,KAiDCk3B,EAAS,CACLrjC,KAAM7B,EAAWqL,sCACjBzB,SAAUg2C,IAnDf/xC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,UAwDCq3B,EAAS,CACLrjC,KAAM7B,EAAWojD,oCACjBrgD,MAAO,CACH1C,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,WA5DrB,yBAAAuN,EAAAM,SAAAR,EAAA,mBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GCTG,SAASsL,GAAchI,GAC1B,sBAAAxR,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAxjC,EAAAM,EAAA+xC,EAAAxnC,EAAAtC,EAAAmpB,EAAAwP,EAAAwgB,EAAA,OAAA71C,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAWsjD,qCAGf3hD,EAAQwjC,IAII,QAFZljC,EAAYN,EAAMI,MAAMyH,YAAYvH,WAPvC,CAAA4L,EAAAE,KAAA,eAUCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,QACNC,QAAS,mBAdlBuN,EAAAK,OAAA,oBAqBCjM,EAAUwH,OAAS9J,EAAqB+J,OArBzC,CAAAmE,EAAAE,KAAA,eAsBCm3B,EAAS,CACLrjC,KAAM7B,EAAW6/C,oCACjB98C,MAAO,CACH1C,KAAM,gBACNC,QAAS,sCA1BlBuN,EAAAK,OAAA,wBAAA8lC,EAmCCryC,EAFA2wB,KAAQE,cAAiBhmB,EAjC1BwnC,EAiC0BxnC,MAAOtC,EAjCjC8pC,EAiCiC9pC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAGLwP,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAvC1CoB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GA2CuB80B,EAAclpB,cAAchI,GA3CnD,eAAA9D,EAAAG,KAAAH,EAAAE,KAAA,GA4CqD80B,EAAcob,uBAAuBh8C,EAAUmF,aAAazB,IA5CjH,QA4COiE,EA5CPiE,EAAAG,KA8CCk3B,EAAS,CACLrjC,KAAM7B,EAAWuL,qCACjB3B,aAhDLiE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,UAmDCq3B,EAAS,CACLrjC,KAAM7B,EAAWk/C,mCACjBn8C,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASuN,EAAAwB,GAAG/O,YAvDrB,yBAAAuN,EAAAM,SAAAR,EAAA,mBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,OClBCqqB,iBASL,SAASmD,GAAYC,GACjB,OAAQA,GACJ,KAAKpD,GAAKqD,QACN,OAAOrD,GAAKhvB,OAChB,KAAKgvB,GAAKhvB,OACN,OAAOgvB,GAAKqD,mBAdnBrD,qEAoHU6qB,eAxFX,SAAAA,EAAY/pB,GAAkB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA4iD,IAC1BnjD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8iD,GAAAziD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTs6B,KAAMvD,GAAKqD,SAJW37B,8EAS1BO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,gDAKjC,OACIxC,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,WAEtF0c,EAAA,yBACK94B,KAAK64B,MAAMvjB,KAAK/L,mDAQjC,OACIuvB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,WAEtF0c,EAAA,yBACK94B,KAAK64B,MAAMvjB,KAAK/L,UAErBuvB,EAAA,qBAAK4C,UAAU,gBACV17B,KAAK64B,MAAMvjB,KAAK7O,cAAgBqyB,EAAA,2DAErCA,EAAA,qBAAK4C,UAAU,YACV,CAAC17B,KAAK64B,MAAMvjB,KAAK+G,KAAMrc,KAAK64B,MAAMvjB,KAAKtU,MAAOhB,KAAK64B,MAAMvjB,KAAKgH,SAAStS,OAAO,SAAAiwB,GAAC,OAAIA,IAAGnsB,KAAK,OAASgrB,EAAA,sGAQrH,OAAQ94B,KAAKgB,MAAMs6B,MACf,KAAKvD,GAAKqD,QACN,OACItC,EAAA,qBAAK4C,UAAU,qBACV17B,KAAKs8B,iBAGlB,KAAKvE,GAAKhvB,OACN,OACI+vB,EAAA,qBAAK4C,UAAU,oBACV17B,KAAKorC,wBAlFXxQ,aCvBbkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,OAAI74B,KAAK64B,MAAMvjB,KAEPwjB,EAAA,cAAC+pB,GAAD,CAAMvtC,KAAMtV,KAAK64B,MAAMvjB,KAAMsmB,WAAY57B,KAAK64B,MAAM+C,aAIpD9C,EAAA,wFAQH94B,KAAK64B,MAAMvjB,MACZtV,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAMyL,eArBpB1J,aA2DNsL,IChEVnO,GDgEUmO,eAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHvjB,KAAMtU,EAAMm2B,SAAS1Z,MAAM2Z,KAAKhpB,IAAIyqB,EAAMyL,UAIlD,SAA4BC,GACxB,MAAO,CACH0B,OAAQ,SAAC3B,GACLC,EAASlX,GAAmBiX,OAKzB4B,CAA8FJ,WC3D7G,SAAS5K,GAAYC,GACjB,OAAQA,GACJ,KAAKpD,GAAKqD,QACN,OAAOrD,GAAKhvB,OAChB,KAAKgvB,GAAKhvB,OACN,OAAOgvB,GAAKqD,mBAVnBrD,qEAkBgB+qB,eACjB,SAAAA,EAAYjqB,GAAuB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8iD,IAC/BrjD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgjD,GAAA3iD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTs6B,KAAMvD,GAAKqD,SAJgB37B,8EAS/BO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,uDAIdtX,GACnB,OAAIA,EAAU5D,SAEN0Y,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,gDAAgDyf,UAAU,SACrElD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,sBAOJ43B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,6EAA6Eyf,UAAU,SAClGlD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,oEAQK8iB,GACjB,IAAIyoB,EACJ,OAAQzoB,EAAU+e,QACd,KAAKyC,GAA+BtmB,KAChCutB,EACI3T,EAAA,wCAAiBA,EAAA,uEAAjB,KAEJ,MACJ,KAAK0M,GAA+BrmB,KAChCstB,EACI3T,EAAA,mCAAYA,EAAA,uEAAZ,KAEJ,MACJ,KAAK0M,GAA+B/7B,MAChCgjC,EAAQ,QACR,MACJ,KAAKjH,GAA+BzmB,MAChC0tB,EAAQ,QACR,MACJ,QACIA,EAAQ,UAEhB,OACI3T,EAAA,0BACK2T,yCAKCzoB,GACV,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEO,SAAU,OAAQtB,MAAO,WAExDF,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UAClDlY,EAAUzH,QAGlB,IACDuc,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAACkqB,GAAD,CAAYpnB,WAAY,GAAI0I,OAAQtgB,EAAUlF,gDAOrDkF,GAET,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAGhE+vB,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEO,SAAU,OAAQtB,MAAO,WAExDF,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UAClDlY,EAAUzH,QAGlB,IACDuc,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAACkqB,GAAD,CAAYpnB,WAAY,GAAI0I,OAAQtgB,EAAUlF,UAGtDga,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,4BACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAEf43B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAGnB43B,EAAA,yBACK94B,KAAKijD,uBAAuBj/B,IAEjC8U,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,mBACC17B,KAAKkjD,qBAAqBl/B,IAM/B8U,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,cAAgDwL,KAAKC,eAAe,QAAS,CACzEC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAOtjB,EAAUkf,cAExBpK,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,MAAwC1X,EAAUmf,gDASlE,IAAMnf,EAAYhkB,KAAK64B,MAAM7U,UAC7B,GAAIA,EAAU+e,SAAWyC,GAA+BliC,KACpD,OACIw1B,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB64B,MAAO,CAAEJ,MAAO,YAC/C,IAFL,2CAOR,OAAQ35B,KAAKgB,MAAMs6B,MACf,KAAKvD,GAAKqD,QACN,OACItC,EAAA,qBAAK4C,UAAU,0BACV17B,KAAKs8B,cAActY,IAGhC,KAAK+T,GAAKhvB,OACN,OACI+vB,EAAA,qBAAK4C,UAAU,yBACV17B,KAAKorC,aAAapnB,YA9KJ4W,aCfjCkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,OAAI74B,KAAK64B,MAAM7U,UAEP8U,EAAA,cAACqqB,GAAD,CACIn/B,UAAWhkB,KAAK64B,MAAM7U,YAK1B8U,EAAA,6FAQH94B,KAAK64B,MAAM7U,WACZhkB,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM/mB,oBAvBpB8oB,aA8DNsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACH7U,UAAWhjB,EAAMm2B,SAASrX,WAAWsX,KAAKhpB,IAAIyqB,EAAM/mB,cAAgB,OAI5E,SAA4ByyB,GACxB,MAAO,CACH0B,OAAQ,SAACn0B,GACLyyB,EAASlX,GAAsBvb,OAK5Bo0B,CAA8FJ,ICxDxFsd,uBACjB,SAAAA,EAAYvqB,GAAsB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAojD,GAAAtjD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsjD,GAAAjjD,KAAAH,KACxB64B,mFAIN74B,KAAK64B,MAAMwqB,qBAAqBrjD,KAAK64B,MAAMrkB,mDAI3CxU,KAAK64B,MAAMyqB,qBAAqBtjD,KAAK64B,MAAMrkB,0DAGtBA,GACrB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,WACX,KAAK0R,GAAiC5R,KAClC,MAAO,GACX,KAAK4R,GAAiC3R,UAClC,OACIgkB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,QAK9E,KAAK2Q,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OACIikB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQc,KAAMsmB,WAAY,QAMpE,MAAO,iEAGYpnB,GACnB,OACIskB,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,uDAI3BpnB,GACtB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,2BACX,KAAK0R,GAAiC5R,KAClC,MAAO,+BACX,KAAK4R,GAAiC3R,UAClC,MAAO,iCAEnB,KAAK2R,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,MAAO,mCAGvB,MAAO,uEAGkBL,GACzB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,WACX,KAAK0R,GAAiC5R,KAClC,MAAO,GACX,KAAK4R,GAAiC3R,UAClC,OACIgkB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,OAE1DgjB,EAAA,qBAAK4C,UAAU,qBAAf,sBAIpB,KAAKjV,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,MAAO,IAGvB,MAAO,4DAGOL,GACd,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,gCAIA5C,EAAA,qBAAK4C,UAAU,qBAAf,QAEA5C,EAAA,qBAAK4C,UAAU,kBAAkB17B,KAAKwjD,uBAAuBhvC,IAE5DxU,KAAKyjD,qBAAqBjvC,mDAKhBA,GACnB,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,kCAIA5C,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,OAG1DgjB,EAAA,qBAAK4C,UAAU,qBAAf,QAEA5C,EAAA,qBAAK4C,UAAU,wBAAwB17B,KAAKwjD,uBAAuBhvC,IAElExU,KAAKyjD,qBAAqBjvC,iDAKlBA,GAEjB,OACIskB,EAAA,qBAAKiB,MAAO,CAAE2V,UAAW,WACrB5W,EAAA,cAAC0S,GAAA,EAAOuD,MAAR,CAAchV,MAAO,CAAEwV,UAAW,QAC9BzW,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,UAAUi7B,QAASn8B,KAAK0jD,gBAAgBrnB,KAAKr8B,OACtD84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,UAIA43B,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,SAASi7B,QAASn8B,KAAK2jD,gBAAgBtnB,KAAKr8B,OACrD84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,yDAaKsT,GACjB,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,mCAIA5C,EAAA,qBAAK4C,UAAU,kBAAkB17B,KAAK4jD,6BAA6BpvC,IAEnEskB,EAAA,qBAAK4C,UAAU,qBAAf,QAGA5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,KAE5C57B,KAAKyjD,qBAAqBjvC,yCAMnC,IAAMA,EAAUxU,KAAK64B,MAAMrkB,QAC3B,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OAAO7U,KAAK6jD,kBAAkBrvC,GAClC,KAAKiS,GAAiC3R,UAClC,OAAO9U,KAAK8jD,uBAAuBtvC,GACvC,KAAKiS,GAAiC1R,IAClC,OACI+jB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,oDAMpB,KAAKrS,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OAAO7U,KAAK+jD,qBAAqBvvC,GACrC,KAAKiS,GAAiC3R,UAMtC,KAAK2R,GAAiC1R,IAClC,OACI+jB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mFAQxB,IAAMtkB,EAAUxU,KAAK64B,MAAMrkB,QAC3B,OACIskB,EAAA,qBAAK9sB,IAAKwI,EAAQxP,GAAI02B,UAAU,uBAC5B5C,EAAA,qBAAK4C,UAAU,iBACX5C,EAAA,qBAAK4C,UAAU,iCACX5C,EAAA,qBAAK4C,UAAU,uCAGVwL,KAAKC,eAAe,QAAS,CAC1BC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,YAEtBsjB,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,sBAAM4C,UAAU,eAAhB,WACC,IACAyK,GAAY3xB,EAAQkB,aAIjCojB,EAAA,qBAAK4C,UAAU,eACV17B,KAAKgkD,sBA5OWppB,cCmBtBsL,mBAhBf,SAAyBllC,EAAmB63B,GACxC,MAAO,IAIX,SAA4B0L,GACxB,MAAO,CACH8e,qBAAsB,SAAC7uC,GACnB+vB,EAAS0f,GAA4BzvC,EAAQxP,MAEjDs+C,qBAAsB,SAAC9uC,GACnB+vB,EAAS2f,GAA0B1vC,EAAQxP,QAKxCkhC,CAA8Fie,ICpBxFf,uBACjB,SAAAA,EAAYvqB,GAAsB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAojD,GAAAtjD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsjD,GAAAjjD,KAAAH,KACxB64B,mFAwBN74B,KAAK64B,MAAMurB,sBAAsBpkD,KAAK64B,MAAMrkB,sDAI5C6vC,MAAM,qFAINA,MAAM,kFAKNA,MAAM,kFAINA,MAAM,yFAKe7vC,GACrB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,WACX,KAAK0R,GAAiC5R,KAClC,MAAO,GACX,KAAK4R,GAAiC3R,UAClC,OACIgkB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,QAK9E,KAAK2Q,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OACIikB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQc,KAAMsmB,WAAY,QAMpE,MAAO,iEAGYpnB,GACnB,OACIskB,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,uDAI3BpnB,GACtB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,2BACX,KAAK0R,GAAiC5R,KAClC,MAAO,+BACX,KAAK4R,GAAiC3R,UAClC,MAAO,iCAEnB,KAAK2R,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,MAAO,mCAGvB,MAAO,uEAGkBL,GACzB,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC1R,IAClC,MAAO,WACX,KAAK0R,GAAiC5R,KAClC,MAAO,GACX,KAAK4R,GAAiC3R,UAClC,OACIgkB,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,OAE1DgjB,EAAA,qBAAK4C,UAAU,qBAAf,sBAIpB,KAAKjV,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OACIikB,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQc,KAAMsmB,WAAY,MAI5D,MAAO,4DAGOpnB,GACd,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,gCAIC17B,KAAKyjD,qBAAqBjvC,mDAKhBA,GACnB,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,kCAIA5C,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,OAGzD9V,KAAKyjD,qBAAqBjvC,iDAKlBA,GAEjB,OACIskB,EAAA,qBAAKiB,MAAO,CAAE2V,UAAW,WACrB5W,EAAA,cAAC0S,GAAA,EAAOuD,MAAR,CAAchV,MAAO,CAAEwV,UAAW,QAC9BzW,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,SAASi7B,QAASn8B,KAAKskD,gBAAgBjoB,KAAKr8B,OACrD84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,yDAYKsT,GACjB,OACIskB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,qBAAf,mCAIA5C,EAAA,qBAAK4C,UAAU,qBAAf,WAIA5C,EAAA,qBAAK4C,UAAU,cACV17B,KAAK4jD,6BAA6BpvC,IAGtCxU,KAAKyjD,qBAAqBjvC,yCAMnC,IAAMA,EAAUxU,KAAK64B,MAAMrkB,QAC3B,OAAQA,EAAQtT,MACZ,KAAKulB,GAAyB9R,QAC1B,OAAQH,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OAAO7U,KAAK6jD,kBAAkBrvC,GAClC,KAAKiS,GAAiC3R,UAClC,OAAO9U,KAAK8jD,uBAAuBtvC,GACvC,KAAKiS,GAAiC1R,IAClC,OACI+jB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,oDAMpB,KAAKrS,GAAyB/R,WAC1B,OAAQF,EAAQtC,cACZ,KAAKuU,GAAiC5R,KAClC,OAAO7U,KAAK+jD,qBAAqBvvC,GACrC,KAAKiS,GAAiC3R,UAMtC,KAAK2R,GAAiC1R,IAClC,OACI+jB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mFAQxB,IAAMtkB,EAAUxU,KAAK64B,MAAMrkB,QAC3B,OACIskB,EAAA,qBAAK9sB,IAAKwI,EAAQxP,GAAI02B,UAAU,wBAC5B5C,EAAA,qBAAK4C,UAAU,iBACX5C,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,wCAGVwL,KAAKC,eAAe,QAAS,CAC1BC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,YAEtBsjB,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,sBAAM4C,UAAU,eAAhB,WACC,IACAyK,GAAY3xB,EAAQkB,aAIjCojB,EAAA,qBAAK4C,UAAU,eACV17B,KAAKgkD,sBArQWppB,cCgBtBsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,IAKX,SAA4B0L,GACxB,MAAO,CACH6f,sBAAuB,SAAC5vC,GACpB+vB,EAASggB,GAA4B/vC,EAAQxP,QAK1CkhC,CAA8Fse,ICsd9FC,eAvdX,SAAAA,EAAY5rB,GAAsB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAykD,IAC9BhlD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2kD,GAAAtkD,KAAAH,KAAM64B,KAED73B,MAAQ,CACT4zC,iBAAiB,EACjB8P,gBAAgB,GALUjlD,wFAY9BO,KAAKu7B,SAAS,CAAEqZ,iBAAiB,oDAIjC50C,KAAKu7B,SAAS,CAAEmpB,gBAAgB,gDAEhBlwC,GAChBxU,KAAK64B,MAAM8rB,oBAAoBnwC,6CAEjBA,GACdxU,KAAK64B,MAAM+rB,kBAAkBpwC,kDAEVA,GACnBxU,KAAK64B,MAAMgsB,uBAAuBrwC,2CAEtBA,GACZxU,KAAK64B,MAAMisB,gBAAgBtwC,yCAEjBjL,GACVm0B,OAAOqnB,KAAK,YAAcx7C,EAAU,+CAGpCigC,KAAM3pC,KAAK,CACP0c,MAAO,uBACPyc,MAAO,OACPyQ,QACI3Q,EAAA,yBACIA,EAAA,uGAMFx4B,GAEV,OAAIA,EAAKkP,OAAS,GACPlP,EAGPw4B,EAAA,0BACKx4B,EAAKua,MAAM,EAAG,IADnB,wDAQJ,IAAM2kC,EACF1mB,EAAA,mDAKJ,OACIA,EAAA,cAACksB,GAAD,CAAQxF,YAAaA,qDAIJhrC,GAAmC,IAAA7I,EAAA3L,KAClDuc,EACFuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,gBACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACV,IAJL,yBAQEmsB,EAAU,CACZyL,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAMxwB,EAAKg5C,oBAAoBxkD,KAAKwL,EAAM6I,KAHvD,WAMAskB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,SACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAMxwB,EAAKi5C,kBAAkBzkD,KAAKwL,EAAM6I,KAHrD,SAQJ,OACIskB,EAAA,cAACmsB,GAAA,EAAD,CAAMj5C,IAAKwI,EAAQxP,GACfuX,MAAOA,EACP2oC,WAAW,EACX73B,QAASA,EACT83B,UAAW,CAAEC,gBAAiB,0BAC9BrrB,MAAO,CAAE4mB,aAAc,SACvB7nB,EAAA,uBAAO4C,UAAU,iCACb5C,EAAA,2BACIA,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBACV5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,OAGrD9C,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,aAEtBsjB,EAAA,wBACIA,EAAA,mCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQkB,UAJlB,KAI+BywB,GAAY3xB,EAAQkB,UAJnD,6DAYIlB,GAAsC,IAAAqD,EAAA7X,KACxDuc,EACFuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,gBACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAEV,IANL,4BAUEmsB,EAAU,CACZyL,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,SACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAMtkB,EAAKgtC,uBAAuB1kD,KAAK0X,EAAMrD,KAH1D,WAQJ,OACIskB,EAAA,cAACmsB,GAAA,EAAD,CAAMj5C,IAAKwI,EAAQxP,GACfuX,MAAOA,EACP2oC,WAAW,EACX73B,QAASA,EACT83B,UAAW,CAAEC,gBAAiB,0BAC9BrrB,MAAO,CAAE4mB,aAAc,SACvB7nB,EAAA,uBAAO4C,UAAU,iCACb5C,EAAA,2BACIA,EAAA,wBACIA,EAAA,yCACAA,EAAA,oBAAI4C,UAAU,sBACV5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQc,KAAMsmB,WAAY,OAGhD9C,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,aAEtBsjB,EAAA,wBACIA,EAAA,mCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQkB,UAJlB,KAI+BywB,GAAY3xB,EAAQkB,UAJnD,2DAYE4K,GACtB,OAAQA,GACJ,KAAKoU,GAAiCpxB,KAClC,MAAO,OACX,KAAKoxB,GAAiCxV,KAClC,MAAO,YAEX,KAAKwV,GAAiCvV,KAClC,MAAO,OAEX,KAAKuV,GAAiCjrB,MAClC,MAAO,QAEX,KAAKirB,GAAiC3V,MAClC,MAAO,+DAKWvK,GAAwC,IA0B9D6wC,EA1B8D3lB,EAAA1/B,KAC5Duc,EACFuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,gBACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACV,IAJL,kCASEmsB,EAAU,CACZyL,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAMuD,EAAKilB,oBAAoBxkD,KAAKu/B,EAAMlrB,KAHvD,WAMAskB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,SACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAMuD,EAAKklB,kBAAkBzkD,KAAKu/B,EAAMlrB,KAHrD,SA4CJ,OAnCA6wC,EACIvsB,EAAA,cAACyqB,GAAD,CAAWzxC,YAAamO,SAASzL,EAAQsB,YAAa,MAmCtDgjB,EAAA,cAACmsB,GAAA,EAAD,CAAMj5C,IAAKwI,EAAQxP,GACfuX,MAAOA,EACP2oC,WAAW,EACX73B,QAASA,EACT83B,UAAW,CAAEC,gBAAiB,0BAC9BrrB,MAAO,CAAE4mB,aAAc,SACvB7nB,EAAA,uBAAO4C,UAAU,iCACb5C,EAAA,2BACIA,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBACV5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,OAGrD9C,EAAA,wBACIA,EAAA,qCACAA,EAAA,oBAAI4C,UAAU,sBACT2pB,IAGTvsB,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,aAEtBsjB,EAAA,wBACIA,EAAA,mCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQkB,UAJlB,KAI+BywB,GAAY3xB,EAAQkB,UAJnD,yDAYAlB,GAAkC,IAAAwrB,EAAAhgC,KAChDuc,EACFuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,gBACX43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SACV,IAJL,sBAQEmsB,EAAU,CACZyL,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAM6D,EAAK2kB,oBAAoBxkD,KAAK6/B,EAAMxrB,KAHvD,WAMAskB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,SACL64B,MAAO,CAAE6R,OAAQ,SACjBzP,QAAS,kBAAM6D,EAAK4kB,kBAAkBzkD,KAAK6/B,EAAMxrB,KAHrD,SAQJ,OACIskB,EAAA,cAACmsB,GAAA,EAAD,CAAMj5C,IAAKwI,EAAQxP,GACfuX,MAAOA,EACP2oC,WAAW,EACX73B,QAASA,EACT83B,UAAW,CAAEC,gBAAiB,0BAC9BrrB,MAAO,CAAE4mB,aAAc,SACvB7nB,EAAA,uBAAO4C,UAAU,iCACb5C,EAAA,2BACIA,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBACV5C,EAAA,cAACkqB,GAAD,CAAM1e,OAAQ9vB,EAAQa,UAAWumB,WAAY,OAGrD9C,EAAA,wBACIA,EAAA,+BACAA,EAAA,oBAAI4C,UAAU,sBACTlnB,EAAQuB,QAGjB+iB,EAAA,wBACIA,EAAA,gCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQgB,aAEtBsjB,EAAA,wBACIA,EAAA,mCACAA,EAAA,oBAAI4C,UAAU,sBAAsBwL,KAAKC,eAAe,QAAS,CAC7DC,MAAO,OACPC,IAAK,UACLE,KAAM,YACPD,OAAO9yB,EAAQkB,UAJlB,KAI+BywB,GAAY3xB,EAAQkB,UAJnD,+CAapB,IAAIupC,EACJ,GAAgC,IAA5Bj/C,KAAK64B,MAAMomB,MAAMzvC,OACjByvC,EACInmB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAAQ,4BAE5B,CACH,IAAMsJ,EAAWjJ,KAAK64B,MAAMomB,MAAM51C,IAAI,SAACmL,GACnC,OACIskB,EAAA,qBAAK9sB,IAAKwI,EAAQxP,IACd8zB,EAAA,cAACwsB,GAAD,CACI9wC,QAASA,OAIzByqC,EACInmB,EAAA,qBAAKiB,MAAO,CAAEiS,UAAW,SACpB/iC,GAIb,OACI6vB,EAAA,cAACA,EAAA,SAAD,KACKmmB,0CAMT,IAAIsG,EACJ,GAAiC,IAA7BvlD,KAAK64B,MAAM0sB,OAAO/1C,OAClB+1C,EACIzsB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAAQ,4BAE5B,CACH,IAAMsJ,EAAWjJ,KAAK64B,MAAM0sB,OAAOl8C,IAAI,SAACmL,GACpC,OACIskB,EAAA,qBAAK9sB,IAAKwI,EAAQxP,IACd8zB,EAAA,cAAC0sB,GAAD,CACIhxC,QAASA,OAIzB+wC,EACIzsB,EAAA,qBAAKiB,MAAO,CAAEiS,UAAW,SACpB/iC,GAIb,OACI6vB,EAAA,cAACA,EAAA,SAAD,KACKysB,mCAKLvkC,GACJ,OACIA,EAAS9f,OAASwzB,GAAoCjrB,OACtDuX,EAAS9f,OAASwzB,GAAoC3V,uCAK1D,GAAI/e,KAAK8gB,QAAQ9gB,KAAK64B,MAAM7X,UAAW,CACnC,IAAMykC,EAAczlD,KAAK64B,MAAM0sB,OAAO/1C,OAChCk2C,EAAa1lD,KAAK64B,MAAMomB,MAAMzvC,OAEpC,OACIspB,EAAA,qBAAK4C,UAAU,YACX5C,EAAA,qBAAK4C,UAAU,0BAAf,UAAgDgqB,EAAhD,KACC1lD,KAAK2lD,cACN7sB,EAAA,qBAAK4C,UAAU,0BAAf,WAAiD+pB,EAAjD,KACCzlD,KAAK4lD,gBAId,IAAMH,EAAczlD,KAAK64B,MAAM0sB,OAAO/1C,OAEtC,OACIspB,EAAA,qBAAK4C,UAAU,YACX5C,EAAA,qBAAK4C,UAAU,0BAAf,WAAiD+pB,EAAjD,KACCzlD,KAAK4lD,uBAldQhrB,aCmBnBsL,mBArBf,SAAyBllC,EAAyB63B,GAC9C,MAAO,IAGJ,SAA4B0L,GAC/B,MAAO,CACHogB,oBAAqB,SAACnwC,GAClB+vB,EAAS0f,GAA4BzvC,EAAQxP,MAEjD4/C,kBAAmB,SAACpwC,GAChB+vB,EAAS2f,GAA0B1vC,EAAQxP,MAE/C6/C,uBAAwB,SAACrwC,GACrB+vB,EAASshB,GAAmCrxC,EAAQxP,MAExD8/C,gBAAiB,SAACtwC,OAMX0xB,CAAoGmV,WC7BnH,SAASngB,GAAYC,GACjB,OAAQA,GACJ,KAAKx9B,EAAcy9B,QACf,OAAOz9B,EAAcoL,OACzB,KAAKpL,EAAcoL,OACf,OAAOpL,EAAcy9B,aAIZqN,eACjB,SAAAA,EAAY5P,GAA+B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAyoC,IACvChpC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2oC,GAAAtoC,KAAAH,KAAM64B,KACD73B,MAAQ,CACTs6B,KAAM39B,EAAcy9B,SAHe37B,8EAQvCO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,2CAI1B5c,GACP,OACIoa,EAAA,cAAC4P,GAAD,CAASzkC,QAASya,EAAIza,QAASg1B,KAAM,GAAIQ,iBAAkB/a,EAAIpe,KAAM6U,eAAgBuJ,EAAI1Z,2CAInF0Z,GACV,IAAKA,EAAIpa,QACL,OACIw0B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACVzf,MAAM,iDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,+BAI9C,IAAMkC,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,+EAKR,OACIA,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAOsf,GAEP/C,EAAA,mBAAGmD,KAAMvd,EAAIpa,QAAS43B,OAAO,UACzBpD,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,yDAOVwd,GACjB,OAAKA,EAAI6C,eAQLuX,EAAA,0BACKpa,EAAI6C,gBAPLuX,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,SAAtB,kDAYMjb,GACd,OAAuB,GAAnBA,EAAI2C,YAEAyX,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,SAAtB,QAMJb,EAAA,0BACKpa,EAAI2C,YAAc,0CAKhB3C,GACX,OAAQA,EAAIsC,UACR,KAAM0T,GAAoCpxB,KACtC,OACIw1B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEAENuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAI3B,KAAMwzB,GAAoCxV,KACtC,OACI4Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAGvB,KAAMwzB,GAAoC9V,uBACtC,OACIka,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,sCAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,YALtC,oBAKqEb,EAAA,kCALrE,eASR,KAAMpE,GAAoC7V,0BACtC,OACIia,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,mDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,WAG9C,KAAMjF,GAAoC7qB,OACtC,OACIivB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,yCAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAGvB,KAAMwzB,GAAoCjrB,MACtC,OACIqvB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,iDAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAGvB,KAAMwzB,GAAoC3V,MACtC,OACI+Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,0CAENuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,oDAQ3B,OADYlB,KAAK64B,MAAMpyB,aACfb,UAEAkzB,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEACNuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAMnB43B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,iEACNuc,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,wDAOZwd,GACf,IACIkqB,EACJ,GAFclqB,EAAIgB,eAAkBhB,EAAI9I,WAAWhE,UAAY8M,EAAIgB,cAAc9N,UAEtE,CAEPg3B,EACI9P,EAAA,yBACIA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,WAAWzf,MAHxB,0FAIFuc,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,MAAOW,SAAU,SAEnCxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,mBAMxCD,EACI9P,EAAA,yBACIA,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,cAAeW,SAAU,SAC3CxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,aAMxC,IAEIC,EAWJ,OAHIA,EAAgB,KAIhBhQ,EAAA,yBACK8P,EACAE,4CAMT,GAAM9oC,KAAK64B,MAAMpyB,aAAaua,WAAa0T,GAAoCjrB,OAC3EzJ,KAAK64B,MAAMpyB,aAAaua,WAAa0T,GAAoC3V,MAD7E,CAIA,IAAIpf,EACAopC,EACJ,OAAQ/oC,KAAK64B,MAAMmQ,oBACf,KAAKtU,GAAuBpxB,KAExB3D,EAAU,mDACVopC,EAAY,2BACZ,MACJ,KAAKrU,GAAuB1xB,IACxBrD,EAAU,kEACVopC,EAAY,MACZ,MACJ,KAAKrU,GAAuBzI,IACxBtsB,EAAU,gDACVopC,EAAY,OACZ,MACJ,KAAKrU,GAAuBuU,aACxB,OACJ,QAEI,YADAvnC,QAAQC,KAAK,gCAAkC3B,KAAK64B,MAAMmQ,oBAGlE,IAAMzsB,EACFuc,EAAA,0BACKn5B,GAGT,OACIm5B,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,WACVzf,MAAOA,GACPuc,EAAA,sBAAMiB,MAAO,CAAEJ,MAAOoP,EAAWzO,SAAU,QACvCxB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO2nC,MAAM,wDAOpC,IAAMK,EACFpQ,EAAA,yBACIA,EAAA,yJAIAA,EAAA,mBAAGiB,MAAO,CAAES,WAAY,YAAa2O,WAAY,SAC5CzL,OAAO0L,SAASC,OADrB,SACmCrpC,KAAK64B,MAAMpyB,aAAazB,KAU7DskC,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CACIpN,QARU,SAAA38B,GAA8BA,EAA3BwM,IACjBw9B,KAAM3pC,KAAK,CACP0c,MAAO,gBACPktB,QAASP,MAOTpQ,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,QAAf,mBAKR,OACI8sB,EAAA,cAAC6Q,GAAA,EAAD,CACIC,QAASN,EACTO,QAAS,CAAC,QAAS,gBACnB/Q,EAAA,mBAAGmD,KAAM,UAAYj8B,KAAK64B,MAAMpyB,aAAazB,IACzC8zB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,oDAMVwd,GACb,OACIoa,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB6Q,EAAI1Z,KACjChF,KAAK26B,WAAWjc,KAGzBoa,EAAA,qBAAK4C,UAAU,qCACX5C,EAAA,qBAAK4C,UAAU,uCACV17B,KAAKgqC,eAAetrB,IAEzBoa,EAAA,qBAAK4C,UAAU,sCACV17B,KAAKiqC,iBAGVnR,EAAA,qBAAK4C,UAAU,uCACV17B,KAAKkqC,cAAcxrB,KAG5Boa,EAAA,qBAAK4C,UAAU,wCACX5C,EAAA,qBAAK4C,UAAU,2CACV17B,KAAKmqC,mBAAmBzrB,IAE7Boa,EAAA,qBAAK4C,UAAU,2CACV17B,KAAKoqC,kBAEVtR,EAAA,qBAAK4C,UAAU,8CACV17B,KAAKqqC,2DAOZ9nB,GACV,OAAO2kB,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,IAAK,UACLE,KAAM,UACNc,KAAM,UACNC,OAAQ,UACRgC,OAAQ,UACR/B,aAAc,UACfjB,OAAO/kB,yCAGA7D,GAENoa,EAAA,+DAEK,IACDA,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAYuyB,aAAa,KAG5D,OACIrP,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,wEACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB6Q,EAAI1Z,KACjC0Z,EAAIpe,OAIbw4B,EAAA,qBAAK4C,UAAU,kFACVhd,EAAI/Z,mBAGTm0B,EAAA,qBAAK4C,UAAU,yEACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,kDAAhB,UAEJ5C,EAAA,qBAAK4C,UAAU,yCAEX5C,EAAA,cAACyR,GAAD,CAAOhhC,SAAUmV,EAAII,MAAMvV,SAAUqyB,WAAY,GAAIH,YAAY,MAGzE3C,EAAA,qBAAK4C,UAAU,2EACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,kDAAhB,YAEJ5C,EAAA,qBAAK4C,UAAU,yCAEX5C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAOvc,KAAKwqC,cAAc9rB,EAAIlJ,YAC9BsjB,EAAA,0BACKoO,KAAKC,eAAe,QAAS,CAC1BC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAO5oB,EAAIlJ,eAM9BsjB,EAAA,qBAAK4C,UAAU,yEACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,eAAhB,YAEJ5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAY4yB,cAAc,mFAOzD9pB,GACZ,IACI+rB,EADEppB,EAAc3C,EAAI2C,YAAc,EAuBtC,OAnBQopB,EAFJppB,EACoB,IAAhBA,EAEIyX,EAAA,sCACaA,EAAA,4BADb,gCAMAA,EAAA,uCACcA,EAAA,uBAAIzX,GADlB,iCAOJyX,EAAA,uCACcA,EAAA,qCADd,yBAMJA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOkuB,GACpC3R,EAAA,qBAAK4C,UAAU,2EACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,yCACV17B,KAAK0qC,kBAAkBhsB,iDAOzBA,GACf,IACImd,EADE8O,EAAQjsB,EAAI6C,eAuBlB,OAnBQsa,EAFJ8O,EACc,IAAVA,EAEI7R,EAAA,sCACaA,EAAA,4BADb,mCAMAA,EAAA,uCACcA,EAAA,uBAAI6R,GADlB,oCAOJ7R,EAAA,uCACcA,EAAA,wCADd,yBAMJA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACpC/C,EAAA,qBAAK4C,UAAU,2EACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,yCACV17B,KAAK4qC,qBAAqBlsB,gDAO7BA,GACd,IAAMmd,EACF/C,EAAA,+DAEK,IACDA,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAYuyB,aAAa,KAG5D,OACIrP,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACpC/C,EAAA,qBAAK4C,UAAU,2EACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,eAAc5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAE7C43B,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMmT,EAAI9I,WAAYuyB,aAAa,kDAQpE,OACIrP,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,qBAAK4C,UAAU,oBACV17B,KAAK64B,MAAMitB,qDAexB,OACIhtB,EAAA,cAAC0S,GAAA,EAAD,CAAQtqC,KAAK,SAASi7B,QAASn8B,KAAK64B,MAAMktB,qBAA1C,+CAMOrnC,GACX,OACIoa,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,qBAAK4C,UAAU,qCAAqC3B,MAAO,CAAE4mB,aAAc,SACvE7nB,EAAA,qBAAK4C,UAAU,aACV17B,KAAKgmD,qBAGdltB,EAAA,qBAAK4C,UAAU,sCACV17B,KAAKimD,4DAOlB,IAAMvnC,EAAM1e,KAAK64B,MAAMpyB,aACvB,OACIqyB,EAAA,qBAAK4C,UAAU,qBACX5C,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,qBAAK4C,UAAU,mCACV17B,KAAKirC,iBAAiBvsB,IAE3Boa,EAAA,qBAAK4C,UAAU,mCAEX5C,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,qBAAK4C,UAAU,wCACV17B,KAAKkrC,cAAcxsB,IAExBoa,EAAA,qBAAK4C,UAAU,wCACV17B,KAAKmrC,eAAezsB,yCAU7C,OAAO1e,KAAKorC,sBA5kB2BxQ,wBCd1BsrB,eACjB,SAAAA,EAAYrtB,GAA2B,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAkmD,GAAApmD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAomD,GAAA/lD,KAAAH,KAC7B64B,+EAGItW,GACV,OAAO2kB,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,IAAK,UACLE,KAAM,UACNc,KAAM,UACNC,OAAQ,UACRgC,OAAQ,UACR/B,aAAc,UACfjB,OAAO/kB,sCAGH7D,GACP,OACIoa,EAAA,cAAC4P,GAAD,CAASzkC,QAASya,EAAIza,QAASg1B,KAAM,GAAIQ,iBAAkB/a,EAAIpe,KAAM6U,eAAgBuJ,EAAI1Z,sCAK7F,IAAM0Z,EAAM1e,KAAK64B,MAAMpyB,aACvB,OACIqyB,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,yCACV17B,KAAK26B,WAAWjc,IAErBoa,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB6Q,EAAI1Z,KACjC0Z,EAAIpe,OAGbw4B,EAAA,qBAAK4C,UAAU,mDACVhd,EAAI/Z,mBAETm0B,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,cAACyR,GAAD,CAAOhhC,SAAUmV,EAAII,MAAMvV,SAAUkyB,YAAY,EAAOG,WAAY,eAxClDhB,aCHrBsrB,uBACjB,SAAAA,EAAYrtB,GAA2B,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAkmD,GAAApmD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAomD,GAAA/lD,KAAAH,KAC7B64B,0EAIN,OACIC,EAAA,qBAAK4C,UAAU,oCACX5C,EAAA,qBAAK4C,UAAU,2CACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAEf43B,EAAA,qBAAK4C,UAAU,2CACX5C,EAAA,qBAAK4C,UAAU,wCAAf,iCAZsBd,kBCEpCkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,IAAI74B,KAAK64B,MAAMpyB,aAkBX,OACIqyB,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAnBnB,OAAQlB,KAAK64B,MAAMpyB,aAAaqC,MAC5B,KAAK4rB,GAA0B3rB,OAC3B,OACI+vB,EAAA,cAACqtB,GAAD,CAAc1/C,aAAczG,KAAK64B,MAAMpyB,eAE/C,KAAKiuB,GAA0B/V,qBAC3B,OACIma,EAAA,cAACstB,GAAD,CAA0B3/C,aAAczG,KAAK64B,MAAMpyB,eAE3D,QACI,OACIqyB,EAAA,sGAeX94B,KAAK64B,MAAMpyB,cACZzG,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,uBAlCpBylB,aAyENsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHpyB,aAAczF,EAAMm2B,SAASnU,cAAcoU,KAAKhpB,IAAIyqB,EAAM1jB,iBAAmB,OAIrF,SAA4BovB,GACxB,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,ECnDL,SAAcpvB,GACjB,sBAAA3V,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAqEC,GAA5E,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAAkM,EAAA,OAAAzvC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EAAoB,CAChBrjC,KAAM7B,EAAWgnD,iCAFlB5hB,EAQCD,IARDE,EAAAD,EAMC9S,KAAQE,cAAiBhmB,EAN1B64B,EAM0B74B,MAAOtC,EANjCm7B,EAMiCn7B,SACzBmpB,EAPR+R,EAOCjS,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAbpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAiB4BgjC,EAAUlrB,OAAO/P,GAjB7C,OAiBO1O,EAjBPyG,EAAAG,KAkBCk3B,EAAsB,CAClBrjC,KAAM7B,EAAW43B,iCACjBxwB,iBApBLyG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAuBCq3B,EAAoB,CAChBrjC,KAAM7B,EAAWinD,+BACjBlkD,MAAO8pB,GAAU,CACbxsB,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,YA3BrB,yBAAAuN,EAAAM,SAAAR,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GDkDiB2f,CAAalY,OAKnB+wB,CAA8FJ,cEvExFygB,uBACjB,SAAAA,EAAYp1C,GAAoC,OAAArR,OAAAC,EAAA,EAAAD,CAAAE,KAAAumD,GAAAzmD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAymD,GAAApmD,KAAAH,KACtCmR,uFAINnR,KAAK64B,MAAM2tB,8DAIX,OACI1tB,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQrP,QAASn8B,KAAKwmD,oBAAoBnqB,KAAKr8B,OAA/C,wDAOAgM,EAAamJ,GACrB,OAAQnJ,GACJ,IAAK,iBAEDhM,KAAK64B,MAAM4tB,4BAA4BzmD,KAAK64B,MAAMpyB,aAAazB,GAAImQ,2CAMhEA,GAAyC,IAAA1V,EAAAO,KACpD,GAAKA,KAAK64B,MAAMpyB,aAAaqa,QAA7B,CAGA,IAAMwoB,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAAS,SAAA38B,GAAa,IAAVwM,EAAUxM,EAAVwM,IAAYvM,EAAKyhD,YAAY/gD,KAAKV,EAAMuM,EAAKmJ,KAC3D2jB,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,kBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,WAKR,OACI43B,EAAA,yBACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAWw6B,UAAU,6DAMnC,IAAA/vB,EAAA3L,KACT,GAA+C,IAA3CA,KAAK64B,MAAMlX,qBAAqBnS,OAAc,CAC9C,IAAM7P,EACFm5B,EAAA,mDAIJ,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,IAGpC,IAAM+mD,EAAUC,aAAgBC,IAC1B/4B,EAAc7tB,KAAK64B,MAAMlX,qBAAqBtY,IAAI,SAAC8L,GACrD,OACI2jB,EAAA,qBAAK9sB,IAAKmJ,EAAgBumB,UAAU,0CAGhC5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAAC4tB,EAAD,CAASvxC,eAAgBA,KAE7B2jB,EAAA,qBAAK4C,UAAU,mCACV/vB,EAAKk7C,eAAe1xC,OAKrC,OACI2jB,EAAA,qBAAK4C,UAAU,sCACV7N,oCAMT,OACIiL,EAAA,qBAAK4C,UAAU,+CAIX5C,EAAA,qBAAK4C,UAAU,uDACV17B,KAAKgkD,sBAzFwBppB,cC8BnCsL,mBAtBf,SAAyBllC,EAAmB63B,GACxC,IAAMv3B,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,wBAGpB,MAAO,CACHgK,gBAFgDjJ,EAA5CiJ,gBAEaJ,cAF+B7I,EAA3B6I,cAEWf,QAFgB9H,EAAZ8H,UAMrC,SAA4Bm7B,GAC/B,MAAO,CACHkiB,4BAA6B,SAACtxC,EAAyCmW,GACnEiZ,ECgDL,SAA4BpvB,EAAyCmW,GACxE,sBAAA9rB,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAWynD,2DAFlBriB,EAWCD,IAXDE,EAAAD,EAMC9S,KAAQE,cAAiBhmB,EAN1B64B,EAM0B74B,MAAOtC,EANjCm7B,EAMiCn7B,SACzBmpB,EAPR+R,EAOCjS,IAAOE,OAKO,OAZf+R,EAQCrjC,MACIyH,YAAevH,UATpB,CAAA4L,EAAAE,KAAA,cAaO,IAAI7M,MAAM,yBAbjB,cAeG6vC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAlBpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAqBOgjC,EAAU2W,0BAA0B,CAAE5xC,iBAAgBmW,0BArB7D,OAsBCiZ,EAAS,CACLrjC,KAAM7B,EAAW4uB,2DACjB9Y,eAAgBmW,IAxBrBpe,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SA4BCq3B,EAAS,CACLrjC,KAAM7B,EAAW2nD,yDACjB5kD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASuN,EAAAwB,GAAG/O,YAhCrB,yBAAAuN,EAAAM,SAAAR,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GDjDiB2f,CAA2BlY,EAAgBmW,OAKjD4a,CAA8FmV,IE9BxF4L,8BACjB,SAAAA,EAAYpuB,GAAoC,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAinD,GAAAnnD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmnD,GAAA9mD,KAAAH,KACtC64B,iFAIN,GAAI74B,KAAK64B,MAAMquB,uBAAuBx5B,UAClC,OACIoL,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,QAAQ64B,MAAO,CAAEJ,MAAO,4CAM3C,OACIb,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,oCACV17B,KAAKmnD,iBAEVruB,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,qBAAK4C,UAAU,iCACX5C,EAAA,cAAC4P,GAAD,CAASzkC,QAASjE,KAAK64B,MAAMquB,uBAAuBzgD,aAAaxC,QAC7Dg1B,KAAM,GACNQ,iBAAkBz5B,KAAK64B,MAAMquB,uBAAuBzgD,aAAanG,KACjE6U,eAAgBnV,KAAK64B,MAAMquB,uBAAuBzgD,aAAazB,MAEvE8zB,EAAA,qBAAK4C,UAAU,oCACX5C,EAAA,qBAAK4C,UAAU,8BAA8B17B,KAAK64B,MAAMquB,uBAAuBzgD,aAAanG,MAC5Fw4B,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACyR,GAAD,CAAOhhC,SAAUvJ,KAAK64B,MAAMquB,uBAAuBzgD,aAAaqY,MAAMvV,SAClEqyB,WAAY,GAAIH,YAAY,OAI5C3C,EAAA,qBAAK4C,UAAU,4CAlCoBd,cCS9BwsB,eACjB,SAAAA,EAAYvuB,GAAyC,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAonD,GAAAtnD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsnD,GAAAjnD,KAAAH,KAC3C64B,6FAID74B,KAAK64B,MAAM9L,sBAGhB/sB,KAAK64B,MAAMwuB,kBAAkBrnD,KAAK64B,MAAMpyB,aAAazB,GAAIhF,KAAK64B,MAAM9L,qBAAqBtmB,aAAazB,2DAIjGhF,KAAK64B,MAAM9L,sBAGhB/sB,KAAK64B,MAAMyuB,qBAAqBtnD,KAAK64B,MAAMpyB,aAAazB,GAAIhF,KAAK64B,MAAM9L,qBAAqBtmB,aAAazB,2CAG9FioC,GACXA,EAAEqI,UACFt1C,KAAK64B,MAAM0uB,SAASta,EAAE/Q,OAAOx4B,wDAI7B,OACIo1B,EAAA,qBAAK4C,UAAU,gDACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvI,YAAY,iCAAiCC,SAAU3tC,KAAKwnD,eAAenrB,KAAKr8B,uDAK7E,IAAAP,EAAAO,KAClB,OAAOA,KAAK64B,MAAM7V,cAAc3Z,IAAI,SAACqV,GACjC,IAGI+oC,EAAU,CAAC,aAAc,oDAI7B,OAHI/oC,EAAI0O,YACJq6B,EAAQp3C,KAAK,uCAGbyoB,EAAA,qBAAK4C,UAAW+rB,EAAQ35C,KAAK,KAAMquB,QARrB,WACd18B,EAAKo5B,MAAM6uB,qBAAqBhpC,IAOuB1S,IAAK0S,EAAIjY,aAAazB,IACzE8zB,EAAA,cAAC6uB,GAAD,CAAuBT,uBAAwBxoC,mDAO3D,IAAIkpC,EACAne,EACA4a,EACAwD,EAAa,CACblH,aAAc,OAElB,GAAK3gD,KAAK64B,MAAM9L,qBAoBZ0c,EACI3Q,EAAA,qBAAK4C,UAAU,mDACX5C,EAAA,cAACgT,GAAD,CAAmBrlC,aAAczG,KAAK64B,MAAM9L,qBAAqBtmB,aAAcuiC,mBAAoB,QAGvGhpC,KAAK64B,MAAM9L,qBAAqBW,WAChC22B,EACIvrB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UAAUvB,QAAQ,yBAAyBo6B,MAAO8tB,IAElED,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,SACL2sC,SAA8C,OAApC7tC,KAAK64B,MAAM9L,qBACrBoP,QAASn8B,KAAK8nD,6BAA6BzrB,KAAKr8B,OAHpD,wBAQJ4nD,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACL2sC,SAA8C,OAApC7tC,KAAK64B,MAAM9L,qBACrBoP,QAASn8B,KAAK+nD,0BAA0B1rB,KAAKr8B,OAHjD,wBAvC0B,CAClC,IAAML,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iHAKRurB,EACIvrB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO8tB,IAEhDD,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACL2sC,SAA8C,OAApC7tC,KAAK64B,MAAM9L,qBACrBoP,QAASn8B,KAAK+nD,0BAA0B1rB,KAAKr8B,OAHjD,oBAqCR,OACI84B,EAAA,cAACA,EAAA,SAAD,KACKurB,EACA5a,EACD3Q,EAAA,qBAAK4C,UAAU,wCACVksB,qCAMR,IAAAj8C,EAAA3L,KACL,OACI84B,EAAA,qBAAK4C,UAAU,qDACX5C,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQrP,QAAS,kBAAMxwB,EAAKktB,MAAMmvB,YAAY9mD,KAAK,UAC/C43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aACV,IAFL,SAMJ43B,EAAA,qBAAK4C,UAAU,0DACX5C,EAAA,qBAAK4C,UAAU,4CACX5C,EAAA,oBAAIiB,MAAO,CAAE2V,UAAW,WAAxB,2BACC1vC,KAAKioD,yBACNnvB,EAAA,qBAAK4C,UAAU,4CACV17B,KAAKkoD,wBAGdpvB,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,oBAAIiB,MAAO,CAAE2V,UAAW,WAAxB,yBACC1vC,KAAKmoD,8BAxI0BvtB,aCqCzCsL,mBAtCf,SAAyBllC,EAAmB63B,GACxC,IAAMv3B,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,wBAKpB,GAAoE,OAAhEe,EAAUorB,SAASC,+BAA+BrrB,UAClD,MAAM,IAAIf,MAAM,iCAZiD,IAAA6nD,EAcqC9mD,EAAUorB,SAASC,+BAA+BrrB,UAE5J,MAAO,CACHmF,aAjBiE2hD,EAc7D3hD,aAGUuc,cAjBmDolC,EAc/Cv7B,uBAA0BC,QAGNnL,qBAjB2BymC,EAcVzmC,qBAGKoL,qBAjBKq7B,EAcYr7B,uBAO9E,SAA4BwX,GAC/B,MAAO,CACHmjB,qBAAsB,SAAChpC,GACnB6lB,E3E4CL,SAA4B7lB,GAC/B,MAAO,CACHxd,KAAM7B,EAAW4tB,0DACjBF,qBAAsBrO,G2E/CT2O,CAA2B3O,KAExC2oC,kBAAmB,SAAClyC,EAAyCmW,GACzDiZ,E3EqEL,SAAyBpvB,EAAyCmW,GACrE,sBAAA7Y,EAAA3S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAyL,EAAAC,EAAArkC,EAAAtC,EAAAmpB,EAAA0d,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAWgpD,+DAFlBpY,EAWCzL,IAXD0L,EAAAD,EAMCte,KAAQE,cAAiBhmB,EAN1BqkC,EAM0BrkC,MAAOtC,EANjC2mC,EAMiC3mC,SACzBmpB,EAPRud,EAOCzd,IAAOE,OAKO,OAZfud,EAQC7uC,MACIyH,YAAevH,UATpB,CAAAmN,EAAArB,KAAA,cAaO,IAAI7M,MAAM,yBAbjB,cAeG6vC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAlBpD2C,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,EAqBOgjC,EAAUkY,uBAAuB,CAAEnzC,iBAAgBmW,0BArB1D,OAsBCiZ,EAAS,CACLrjC,KAAM7B,EAAWkuB,+DACjBpY,eAAgBmW,IAxBrB7c,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAC,GAAAD,EAAA,SA2BC81B,EAAS,CACLrjC,KAAM7B,EAAWkpD,6DACjBnmD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS8O,EAAAC,GAAG/O,YA/BrB,yBAAA8O,EAAAjB,SAAAe,EAAA,kBAAP,gBAAAS,EAAAsB,GAAA,OAAAmC,EAAAhF,MAAAzN,KAAA0N,YAAA,G2EtEiB2f,CAAwBlY,EAAgBmW,KAErDg8B,qBAAsB,SAACnyC,EAAyCmW,GAC5DiZ,E3E8HL,SAA4BpvB,EAAyCmW,GACxE,sBAAA5Y,EAAA5S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAW,EAAAC,EAAAv5B,EAAAtC,EAAAmpB,EAAA0d,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAWmpD,kEAFlBrjB,EAWCX,IAXDY,EAAAD,EAMCxT,KAAQE,cAAiBhmB,EAN1Bu5B,EAM0Bv5B,MAAOtC,EANjC67B,EAMiC77B,SACzBmpB,EAPRyS,EAOC3S,IAAOE,OAKO,OAZfyS,EAQC/jC,MACIyH,YAAevH,UATpB,CAAAyN,EAAA3B,KAAA,cAaO,IAAI7M,MAAM,yBAbjB,cAeG6vC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAlBpDiD,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAqBOgjC,EAAU2W,0BAA0B,CAAE5xC,iBAAgBmW,0BArB7D,OAsBCiZ,EAAS,CACLrjC,KAAM7B,EAAWuuB,kEACjBzY,eAAgBmW,IAxBrBvc,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAL,GAAAK,EAAA,SA4BCw1B,EAAS,CACLrjC,KAAM7B,EAAW2nD,yDACjB5kD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASoP,EAAAL,GAAG/O,YAhCrB,yBAAAoP,EAAAvB,SAAAsB,EAAA,kBAAP,gBAAAyB,EAAAK,GAAA,OAAA8B,EAAAjF,MAAAzN,KAAA0N,YAAA,G2E/HiB2f,CAA2BlY,EAAgBmW,KAExDi8B,SAAU,SAAC/8C,G3E0MZ,IAAgB4G,E2EzMXmzB,G3EyMWnzB,E2EzMa5G,E3E0MhC,eAAAoI,EAAA9S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA6C,EAAO20B,EAAmDC,GAA1D,IAAAqM,EAAAC,EAAAjlC,EAAAtC,EAAAmpB,EAAApxB,EAAAmnD,EAAAv7B,EAAA,OAAArgB,GAAAC,EAAAG,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAWqpD,qDAFlB7X,EAWCrM,IAXDsM,EAAAD,EAMClf,KAAQE,cAAiBhmB,EAN1BilC,EAM0BjlC,MAAOtC,EANjCunC,EAMiCvnC,SACzBmpB,EAPRme,EAOCre,IAAOE,OAKO,QAHKpxB,EATpBuvC,EAQCzvC,MACIyH,YAAevH,WATpB,CAAA4O,EAAA9C,KAAA,cAaO,IAAI7M,MAAM,yBAbjB,UAeCe,EAAUwH,OAAS9J,EAAqB+J,OAfzC,CAAAmH,EAAA9C,KAAA,cAgBO,IAAI7M,MAAM,sBAhBjB,UAoBQ,QADLkoD,EAAKnnD,EAAUorB,SAASC,+BAA+BrrB,WAnB1D,CAAA4O,EAAA9C,KAAA,cAqBO,IAAI7M,MAAM,cArBjB,OAwBe,IAAIm0B,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAEvD,IACUohB,EAAgBZ,GAAWm8B,EAAG57B,uBAAuB7J,cAAe5R,GAE1EmzB,EAAS,CACLrjC,KAAM7B,EAAW0uB,qDACjB/K,cAAekK,EACf1iB,SAAU4G,IAGhB,MAAOoN,GACL+lB,EAAS,CACLrjC,KAAM7B,EAAWspD,mDACjBvmD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS6e,EAAG7e,YA3CrB,yBAAAuQ,EAAA1C,SAAAoC,MAAP,gBAAAiB,EAAAK,GAAA,OAAA0B,EAAAnF,MAAAzN,KAAA0N,YAAA,Q2ErMWw4B,CAA8FkhB,IChDvGthB,eACF,SAAAA,EAAYjN,GAAe,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACjB64B,iFAIN,IAAMl5B,EACFm5B,EAAA,oEAEK,IACDA,EAAA,cAACoY,GAAA,EAAD,OAGR,OACIpY,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO,CACxCf,MAAO,OACPmY,QAAS,OACTvF,OAAQ,mDAKRxpC,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAKmtB,EAAgB7qB,KAErB,KAAK6qB,EAAgB3rB,QACjB,OAAOxC,KAAKoxC,gBAChB,KAAKjjB,EAAgBloB,MACjB,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAY,CACpB3xC,KAAM,gBACNC,QAAS,oCAGrB,QACI,OACIm5B,EAAA,cAAC8vB,GAAD,CAAWZ,SAAUhoD,KAAK64B,MAAMmvB,wDAM5C,OAAQhoD,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAKmtB,EAAgB7qB,KACjBtD,KAAK64B,MAAMoN,yDAKnBjmC,KAAK64B,MAAM0Y,kBA/DE3W,aAkHNsL,mBAzBf,SAAyBllC,EAAyB63B,GAC9C,IACMgwB,EADI7nD,EAAMI,MAAMyH,YACRvH,UACd,GAAY,OAARunD,EACA,MAAM,IAAItoD,MAAM,cAEpB,GAAIsoD,EAAI//C,OAASqlB,EAA2BplB,OACxC,MAAM,IAAIxI,MAAM,oBAEpB,MAAO,CACH+6B,KAAMutB,EAAIn8B,SAASC,iCAIpB,SAA4B4X,GAC/B,MAAO,CACH0B,OAAQ,WACJ1B,E5E1FR,eAAA/kC,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAApxB,EAAAmF,EAAA2pC,EAAAtuB,EAAAgnC,EAAA,OAAAj8C,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACHm3B,EAAS,CACLrjC,KAAM7B,EAAW0pD,mDAFlBtkB,EAWCD,IAXDE,EAAAD,EAMC9S,KAAQE,cAAiBhmB,EAN1B64B,EAM0B74B,MAAOtC,EANjCm7B,EAMiCn7B,SACzBmpB,EAPR+R,EAOCjS,IAAOE,OAKO,QAHKpxB,EATpBmjC,EAQCrjC,MACIyH,YAAevH,WATpB,CAAA4L,EAAAE,KAAA,cAaO,IAAI7M,MAAM,yBAbjB,UAeCe,EAAUwH,OAAS9J,EAAqB+J,OAfzC,CAAAmE,EAAAE,KAAA,cAgBO,IAAI7M,MAAM,sBAhBjB,cAkBKkG,EAAiBnF,EAAjBmF,aACF2pC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAtBpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GA0BoBgjC,EAAU/qB,cA1B9B,QA0BOvD,EA1BP5U,EAAAG,KA2BOy7C,EAAiBhnC,EAAKzY,IAAI,SAACqV,GAE7B,MAAO,CACHgP,UAFcjnB,EAAakb,qBAAqBvR,SAASsO,EAAI1Z,IAG7DooB,YAAY,EACZ3mB,aAAciY,KAGtB6lB,EAAS,CACLrjC,KAAM7B,EAAWotB,mDACjBzJ,cAAe8lC,IArCpB57C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAwCCq3B,EAAS,CACLrjC,KAAM7B,EAAW2pD,iDACjB5mD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASuN,EAAAwB,GAAG/O,YA5CrB,yBAAAuN,EAAAM,SAAAR,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,K4E4FI6jC,SAAU,WACNhN,E5EzCD,CACHrjC,KAAM7B,EAAW2tB,kD4E6CVkZ,CAAoGJ,ICtE5G,SAAS1iC,GAAUhB,GACtB,MAAO,CACHlB,KAAM7B,EAAW00B,uBACjB3xB,MAAOA,GAyEf,SAAS8xB,GAAmBzW,GACxB,MAAO,CACHvc,KAAM7B,EAAW40B,iCACjBxW,MAAOA,GA6Kf,SAASwrC,GAAgB7mD,GACrB,MAAO,CACHlB,KAAM7B,EAAW6pD,8BACjB9mD,MAAOA,GAyBf,SAAS+mD,GAAgB7zC,EAAY7O,GACjC,GAAI6O,EAAK/L,WAAa9C,EAAaqY,MAAMvV,SACrC,OAAOmrB,GAAoC3V,MAE/C,IAAMzV,EAAS7C,EAAa2C,QAAQyN,KAAK,SAACvN,GACtC,OAAOA,EAAOC,WAAa+L,EAAK/L,WAEpC,GAAID,EACA,OAAQA,EAAOpI,MACX,KAAKjD,EAAWwL,MACZ,OAAOirB,GAAoCjrB,MAC/C,KAAKxL,EAAW8gB,MACZ,OAAO2V,GAAoC3V,MAC/C,KAAK9gB,EAAW4L,OACZ,OAAO6qB,GAAoC7qB,OAavD,OAAO6qB,GAAoCxV,KAG/C,SAASkqC,GAAWpoD,GAA8C,IAGvCM,EAEnBN,EAHAI,MACIyH,YAAevH,UAGvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,8CAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,8CAV0C,IAYtDmuB,EAAmBptB,EAAUorB,SAA7BgC,eACR,GAAuB,OAAnBA,EACA,MAAM,IAAInuB,MAAM,8CAEpB,OAAOmuB,EAuFJ,SAASoG,GAAoB1yB,GAChC,MAAO,CACHlB,KAAM7B,EAAWw1B,kCACjBzyB,MAAOA,GAIR,SAASinD,KACZ,OAAO,SAAC9kB,EAAmDC,GACvDD,EApBG,CACHrjC,KAAM7B,EAAWg1B,oCAqBjB,IAEIiH,EAFEt6B,EAAQwjC,IAGd,IACIlJ,EAAO8tB,GAAWpoD,GACpB,MAAOwd,GAKL,YAJA+lB,EAAS0kB,GAAgB/8B,GAAU,CAC/BxsB,KAAM,gBACNC,QAAS6e,EAAG7e,YAXkE,IAAA0zC,EAmBlFryC,EAFA2wB,KAAQE,cAAiBhmB,EAjByDwnC,EAiBzDxnC,MAAOtC,EAjBkD8pC,EAiBlD9pC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAGX,GAAuB,OAAnB4I,EAAKh6B,UAAT,CArBsF,IAAAgoD,EA6BvChuB,EAAKh6B,UAA5CwyB,EA7B8Ew1B,EA6B9Ex1B,aAA8B9uB,EA7BgDskD,EA6BhE7iD,aAAgBzB,GAEtC,GAAK8uB,EAIiB,IAAIrN,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MAG/By9C,oBAAoBvkD,EAAI8uB,EAAaxe,KAAK/L,UACnD+C,KAAK,SAACkI,GACH+vB,EAvDL,CACHrjC,KAAM7B,EAAWm1B,sCAuDT+P,EAAS6a,GAAsBp6C,MAElC05B,MAAM,SAACC,GACJ4F,EAASzP,GAAoB5I,GAAU,CACnCxsB,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,mBA1BrB4kC,EAASzP,GAAoB5I,GAAU,CACnCxsB,KAAM,QACNC,QAAS,yCC5cVijD,eA5BX,SAAAA,EAAY/pB,GAAmB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA4iD,GAAA9iD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8iD,GAAAziD,KAAAH,KACrB64B,0EAIN,OACIC,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAMj5B,KAAK64B,MAAM+C,YAAc,MAElE9C,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,UACjF,IAFL,SAGMpc,KAAK64B,MAAMvjB,KAAK/L,SAHtB,UAKAuvB,EAAA,qBAAK4C,UAAU,gBACV17B,KAAK64B,MAAMvjB,KAAK7O,cAAgBqyB,EAAA,2DAErCA,EAAA,qBAAK4C,UAAU,YACV,CAAC17B,KAAK64B,MAAMvjB,KAAK+G,KAAMrc,KAAK64B,MAAMvjB,KAAKtU,MAAOhB,KAAK64B,MAAMvjB,KAAKgH,SAAStS,OAAO,SAAAiwB,GAAC,OAAIA,IAAGnsB,KAAK,OAASgrB,EAAA,4EArB1G8B,uBCkEJ4uB,uBAlEX,SAAAA,EAAY3wB,EAAsBymB,GAA6B,IAAA7/C,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAwpD,IAC3D/pD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0pD,GAAArpD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTu+C,gBAAiB,UAJsC9/C,+EAQ/CwtC,yCAcZ,OACInU,EAAA,cAAC2wB,GAAA,EAAD,CAAOC,OAAQ,SAAAlqD,GAA2BA,EAAxB2sB,QAAwB,IAClCw9B,EAA8B,GAClC,OAFsCnqD,EAAf4pC,SAENwgB,UACb,IAAK,iBACDD,EAAe,CAAC,WAChB,MACJ,IAAK,mBACDA,EAAe,CAAC,UAGxB,OACI7wB,EAAA,cAACyQ,GAAA,EAAD,CAEIogB,aAAcA,EACd5vB,MAAO,CAAEqrB,gBAAiB,eAC1B/4C,KAAK,mDAerB,OACIysB,EAAA,qBAAK4C,UAAU,YACX5C,EAAA,qBAAK4C,UAAU,iBACV17B,KAAK6pD,cAEV/wB,EAAA,qBAAK4C,UAAU,oBACV17B,KAAK64B,MAAM8mB,iBA5DT/kB,cCejBkvB,eASF,SAAAA,EAAYjxB,GAAwB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8pD,IAChCrqD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgqD,GAAA3pD,KAAAH,KAAM64B,KARVkxB,kBAOoC,EAAAtqD,EAHpC6sC,iBAGoC,EAAA7sC,EAFpC8sC,kBAEoC,EAGhC9sC,EAAKsqD,aAAe,KACpBtqD,EAAK6sC,YAAc1R,cACnBn7B,EAAK8sC,aAAe3R,cAEpBn7B,EAAKuB,MAAQ,CACTgpD,oBAAqB,IAROvqD,uFAahCO,KAAK64B,MAAMmvB,sDAIXhoD,KAAK64B,MAAMoxB,qDAIX,QAAIjqD,KAAK64B,MAAM/E,8CAMVmZ,GAEL,IAAID,EADJC,EAAEC,iBAGEF,EADAhtC,KAAKssC,YAAYS,QACS/sC,KAAKssC,YAAYS,QAAQrpC,MAEzB,GAE9B1D,KAAKkqD,cAAcld,iDAKfhtC,KAAKssC,YAAYS,SACS/sC,KAAKssC,YAAYS,QAAQrpC,4CAO7CA,IASgB,OAAtB1D,KAAK+pD,eACJ,IAAIhnD,MAAO6O,UAAY5R,KAAK+pD,aAAan4C,UAAYk4C,EAAWK,kBACjEnqD,KAAK+pD,aAAe,IAAIhnD,KACxB/C,KAAK64B,MAAMuxB,cAAc,CACrBh5C,MAAO1N,EACPia,cAAe,2CAKdrI,GACTtV,KAAK64B,MAAMwxB,aAAa/0C,EAAK/L,gDAGnBjJ,GAEV,OAAIA,EAAKkP,OAAS,GACPlP,EAGPw4B,EAAA,0BACKx4B,EAAKua,MAAM,EAAG,IADnB,gDAOM,IAAAlP,EAAA3L,KACV,IAAKA,KAAK64B,MAAMpb,MAAO,CAEnB,OACIqb,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAFP,2FAEyB2qD,UAAQ,IAGrD,OAAgC,IAA5BtqD,KAAK64B,MAAMpb,MAAMjO,OAEbspB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UAAUvB,QAAQ,iBAAiB2qD,UAAQ,IAGxDtqD,KAAK64B,MAAMpb,MAAMpU,IAAI,SAACiM,GACzB,OAAIA,EAAK0L,WAAa0T,GAAoCpxB,KAElDw1B,EAAA,qBACI4C,UAAU,0BACV1vB,IAAKsJ,EAAK/L,SACV4yB,QAAS,WAAQxwB,EAAK0+C,aAAalqD,KAAKwL,EAAM2J,KAC9CwjB,EAAA,qBAAK4C,UAAU,SAEVpmB,EAAK8G,SAFV,KAEsB9G,EAAK/L,SAF3B,MAQJuvB,EAAA,qBACI4C,UAAU,sBACV1vB,IAAKsJ,EAAK/L,SACV4yB,QAAS,WAAQxwB,EAAK0+C,aAAalqD,KAAKwL,EAAM2J,KAC9CwjB,EAAA,qBAAK4C,UAAU,SAEVpmB,EAAK8G,SAFV,KAEsB9G,EAAK/L,SAF3B,gDAWhB,OACIuvB,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,sBAAM4C,UAAU,eAAhB,QACA5C,EAAA,0BAAO94B,KAAK64B,MAAMpyB,aAAanG,OAEnCw4B,EAAA,qBAAK4C,UAAU,eACX5C,EAAA,sBAAM4C,UAAU,eAAhB,eACA5C,EAAA,0BAAO94B,KAAK64B,MAAMpyB,aAAalB,8DAO3C,IAAIqiD,EACAjoD,EAuCJ,OAtCIK,KAAK64B,MAAM/E,aACP9zB,KAAK64B,MAAM/E,aAAa9S,WAAa0T,GAAoCxV,KACzE0oC,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACLi7B,QAASn8B,KAAKiqD,iBAAiB5tB,KAAKr8B,OAFxC,oBAKJ4nD,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACIqC,UAAQ,EACR3sC,KAAK,WAFT,mBAMJvB,EACIm5B,EAAA,4DACoCA,EAAA,yBAC/B94B,KAAKgqC,eAAehqC,KAAK64B,MAAM/E,aAAa9S,WAGrDrhB,EACIm5B,EAAA,cAAC4S,GAAA,EAAD,CACIxqC,KAAK,UACLvB,QAASA,EACT2qD,UAAQ,MAKpB1C,EACI9uB,EAAA,cAAC0S,GAAA,EAAD,CACIqC,UAAQ,EACR3sC,KAAK,WAFT,mBAKJvB,EAAU,wBAGVm5B,EAAA,qBAAK4C,UAAU,kBACX5C,EAAA,qBAAKiB,MAAO,CAAE2V,UAAW,SAAUH,UAAW,SACzCqY,GAEL9uB,EAAA,qBAAKiB,MAAO,CAAE2V,UAAW,SAAUH,UAAW,SACzC5vC,qDAOb,OAAQK,KAAK64B,MAAM/2B,WACf,KAAKnD,EAAoB2E,KACrB,OACIw1B,EAAA,iCAER,KAAKn6B,EAAoBk1B,QACrB,OACIiF,EAAA,oCAER,KAAKn6B,EAAoB4rD,SACrB,OACIzxB,EAAA,qCAER,KAAKn6B,EAAoB21B,QACrB,OACIwE,EAAA,oCAER,KAAKn6B,EAAoBgE,QACrB,OACIm2B,EAAA,8CAER,KAAKn6B,EAAoBsH,MACrB,OACI6yB,EAAA,0CAER,QACI,OACIA,EAAA,8EAKD9X,GACX,OAAQA,GACJ,KAAM0T,GAAoCpxB,KACtC,OACIw1B,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,QAER,KAAMwzB,GAAoCxV,KACtC,OACI4Z,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,iBAER,KAAMwzB,GAAoC9V,uBACtC,OAAQka,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,YAAxC,sBAAyEb,EAAA,kCAAzE,eACZ,KAAMpE,GAAoC7V,0BACtC,OAAQia,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,UAAxC,kBAAmEb,EAAA,kCAAnE,YACZ,KAAMpE,GAAoC7qB,OACtC,OAAQivB,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,cAAqC43B,EAAA,iCAArC,yBACZ,KAAMpE,GAAoCjrB,MACtC,OAAQqvB,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAjB,cAAuC43B,EAAA,gCAAvC,yBACZ,KAAMpE,GAAoC3V,MACtC,OAEI+Z,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAjB,gBAAwC43B,EAAA,gCAAxC,uEAMZ,OAAgC,OAA5B94B,KAAK64B,MAAM/E,aAEPgF,EAAA,qBAAK4C,UAAU,gBACX5C,EAAA,mBAAG4C,UAAU,eAAb,yBAOJ5C,EAAA,qBAAK4C,UAAU,gBACX5C,EAAA,cAAC0xB,GAAD,CAAel1C,KAAMtV,KAAK64B,MAAM/E,aAAaxe,OAC5CtV,KAAKgqC,eAAehqC,KAAK64B,MAAM/E,aAAa9S,kDAOzD,OACI8X,EAAA,qBAAK4C,UAAU,wDAMnB,OAAQ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,uDAInB,OACI43B,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,WACTt6B,KAAK,SACLi7B,QAASn8B,KAAKyqD,sBAAsBpuB,KAAKr8B,OAF7C,2CAWZ,OACI84B,EAAA,qBAAK4C,UAAU,qCACX5C,EAAA,cAAC4xB,GAAD,CAAU/K,QAAS3/C,KAAK2qD,sBACxB7xB,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,qBAAK4C,UAAU,8CACX5C,EAAA,iDACAA,EAAA,sBAAM9zB,GAAG,aAAa02B,UAAU,YAC5B+R,SAAUztC,KAAKytC,SAASpR,KAAKr8B,OAC7B84B,EAAA,uBACIgJ,IAAK9hC,KAAKssC,YACVsB,WAAS,EACTD,SAAU3tC,KAAKwtC,oBAAoBnR,KAAKr8B,MACxC0tC,YAAY,sBAEhB5U,EAAA,cAAC0S,GAAA,EAAD,CACI9P,UAAU,eACVqS,KAAK,aACL/hC,IAAI,SACJgiC,SAAS,UAERhuC,KAAK4qD,uBAGd9xB,EAAA,qBAAK4C,UAAU,cACV17B,KAAK6qD,gBAGd/xB,EAAA,qBAAK4C,UAAU,gBACX5C,EAAA,yCACC94B,KAAK8qD,qBACL9qD,KAAK+qD,yBAIb/qD,KAAKgrD,uBApVGpwB,aAAnBkvB,GAIKK,eAAyB,IAsVrBL,UC7TA5jB,mBA7Bf,SAAyBllC,EAAyB63B,GAC9C,IAAMv3B,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAASqlB,EAA2BplB,OAC9C,MAAM,IAAIxI,MAAM,wBAEpB,GAAoD,OAAhDe,EAAUorB,SAASgC,eAAeptB,UAClC,MAAM,IAAIf,MAAM,iCAGpB,OAAOe,EAAUorB,SAASgC,eAAeptB,WAGtC,SAA4BijC,GAC/B,MAAO,CACH6lB,cAAe,SAAA5qD,GAA8B,IAA3B4R,EAA2B5R,EAA3B4R,MAAOuM,EAAoBne,EAApBme,cACrB4mB,EJsGL,SAA+BnzB,GAClC,sBAAAqB,EAAA3S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAyL,EAAAC,EAAArkC,EAAA6mB,EAAApxB,EAAAod,EAAAusC,EAAAnsC,EAAAosC,EAAA9hD,EAAA+hD,EAAAC,EAAAC,EAAAC,EAAA,OAAAz+C,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,UACHm3B,EArBG,CACHrjC,KAAM7B,EAAWksD,iCAsBU,IAAvBn6C,EAAMA,MAAM5B,OAHb,CAAAf,EAAArB,KAAA,eAICm3B,EAASrQ,GAAmB,OAJ7BzlB,EAAAlB,OAAA,oBAAA0iC,EAcCzL,IAdD0L,EAAAD,EASCte,KAAQE,cAAiBhmB,EAT1BqkC,EAS0BrkC,MAT1BqkC,EASiC3mC,SACzBmpB,EAVRud,EAUCzd,IAAOE,OAKO,QAHKpxB,EAZpB2uC,EAWC7uC,MACIyH,YAAevH,WAZpB,CAAAmN,EAAArB,KAAA,cAgBO,IAAI7M,MAAM,yBAhBjB,UAkBCe,EAAUwH,OAAS9J,EAAqB+J,OAlBzC,CAAA0F,EAAArB,KAAA,cAmBO,IAAI7M,MAAM,sBAnBjB,cAyCGme,EAAMpd,EAAUmF,aAEhBwkD,EAAa,IAAIzmC,GAAoB,CACvC3Y,QACAoR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAOnDgT,EAAgBJ,EAAII,MAAMvV,SAC1B2hD,EAA4B,GAC5B9hD,EAAyB,GACzB+hD,EAAyB,GACzBC,EAA2B,GAE/B1sC,EAAItV,QAAQuN,QAAQ,SAACrN,GACjB,OAAQA,EAAOpI,MACX,KAAKjD,EAAW4L,OACZT,EAAQiH,KAAK/G,EAAOC,UACxB,KAAKtL,EAAWwL,MACZyhD,EAAW76C,KAAK/G,EAAOC,aA/DhCkF,EAAAtB,KAAA,GAAAsB,EAAArB,KAAA,GAuFqB69C,EAAWvtC,YAAYtM,GAvF5C,QAuFOqM,EAvFPhP,EAAApB,KA6FOi+C,EAAoC7tC,EAAMpU,IAAI,SAAAqJ,GAA4B,IAAzBnJ,EAAyBmJ,EAAzBnJ,SAenD,MAAO,CACHA,WAAU6S,SAhB8D1J,EAAf0J,SAiBzD4E,SAfAzX,IAAauV,EACF4V,GAAoC3V,MACxCmsC,EAAWvqD,QAAQ4I,IAAa,EAC5BmrB,GAAoCjrB,MACxC0hD,EAAQxqD,QAAQ4I,IAAa,EACzBmrB,GAAoC7V,0BACxCusC,EAAUzqD,QAAQ4I,IAAa,EAC3BmrB,GAAoC9V,uBACxCxV,EAAQzI,QAAQ4I,IAAa,EACzBmrB,GAAoC7qB,OAEpC6qB,GAAoCpxB,QAOvDihC,EAASrQ,GAAmBo3B,IAjH7B78C,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAC,GAAAD,EAAA,UAmHC81B,GA3HcniC,EA2HY8pB,GAAU,CAChCxsB,KAAM+O,EAAAC,GAAGpO,KACTX,QAAS8O,EAAAC,GAAG/O,UA5HjB,CACHuB,KAAM7B,EAAWmsD,+BACjBppD,MAAOA,KAKJ,yBAAAqM,EAAAjB,OARX,IAA0BpL,GAQfmM,EAAA,mBAAP,gBAAAS,EAAAsB,GAAA,OAAAmC,EAAAhF,MAAAzN,KAAA0N,YAAA,GIvGiB2f,CAA8B,CAAEjc,QAAOuM,oBAEpD0sC,aAAc,SAAC9gD,GJwVhB,IAAoBkiD,EIvVflnB,GJuVeknB,EIvValiD,EJwVpC,eAAAoJ,EAAA7S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAxjC,EAAAs6B,EAAAzvB,EAAA6mB,EAAAu4B,EAAArmB,EAAA2X,EAAA,OAAA1vC,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,OACHm3B,EAjGG,CACHrjC,KAAM7B,EAAWqsD,gCAkGX1qD,EAAQwjC,IAHXz1B,EAAA5B,KAAA,EAOCmuB,EAAO8tB,GAAWpoD,GAPnB+N,EAAA3B,KAAA,uBAAA2B,EAAA5B,KAAA,EAAA4B,EAAAL,GAAAK,EAAA,SASCw1B,EAAS0kB,GAAgB/8B,GAAU,CAC/BxsB,KAAM,gBACNC,QAASoP,EAAAL,GAAG/O,YAXjBoP,EAAAxB,OAAA,qBAgBoB,OAAnB+tB,EAAKh6B,UAhBN,CAAAyN,EAAA3B,KAAA,gBAiBCm3B,EAAS0kB,GAAgB/8B,GAAU,CAC/BxsB,KAAM,QACNC,QAAS,yBAnBdoP,EAAAxB,OAAA,yBAyB0B1B,EAEzB7K,EAFA2wB,KAAQE,cAAiBhmB,MAClB6mB,EACP1xB,EADAwxB,IAAOE,OAGLu4B,EAAa,IAAIzmC,GAAoB,CACvC3Y,QACAoR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MA/BpDiD,EAAA5B,KAAA,GAAA4B,EAAA3B,KAAA,GAmCoB69C,EAAWjmB,QAAQymB,GAnCvC,QAmCOn2C,EAnCPvG,EAAA1B,KAoCO2T,EAAWmoC,GAAgB7zC,EAAMgmB,EAAKh6B,UAAUmF,cACtD89B,GAhIejvB,EAgIYA,EAhIA0L,EAgIMA,EA/HlC,CACH9f,KAAM7B,EAAW80B,gCACjB7e,KAAMA,EACN0L,SAAUA,KAuFPjS,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAqI,GAAArI,EAAA,UAuCCw1B,EAAS0kB,GAAgB/8B,GAAU,CAC/BxsB,KAAMqP,EAAAqI,GAAG9W,KACTX,QAASoP,EAAAqI,GAAGzX,YAzCjB,yBAAAoP,EAAAvB,OA3FX,IAA2B8H,EAAY0L,GA2F5BlS,EAAA,yBAAP,gBAAAyB,EAAAK,GAAA,OAAA+B,EAAAlF,MAAAzN,KAAA0N,YAAA,MItVIu8C,iBAAkB,WACd1lB,EAASlX,SAKN6Y,CAAoG4jB,ICvC7G6B,eACF,SAAAA,EAAY9yB,GAA+B,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2rD,GAAA7rD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6rD,GAAAxrD,KAAAH,KACjC64B,iFAIN,IAAMl5B,EACFm5B,EAAA,uCAEK,IACDA,EAAA,cAACoY,GAAA,EAAD,OAGR,OACIpY,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO,CACxCf,MAAO,OACPmY,QAAS,OACTvF,OAAQ,mDAKRxpC,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KAEf,KAAKnE,EAAUqD,QACX,OAAOxC,KAAKoxC,gBAChB,KAAKjyC,EAAU8G,MACX,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAYnlB,GAAU,CAC9BxsB,KAAM,gBACNC,QAAS,qCAGrB,QACI,OACIm5B,EAAA,cAAC8yB,GAAD,CAAW5D,SAAUhoD,KAAK64B,MAAMmvB,wDAM5C,OAAQhoD,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KACXtD,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,gEAKrCnV,KAAK64B,MAAM0Y,kBA/DY3W,aAgHhBsL,mBA1Bf,SAAyBllC,EAAmB63B,GACxC,IACMgwB,EADI7nD,EAAMI,MAAMyH,YACRvH,UACd,GAAY,OAARunD,EACA,MAAM,IAAItoD,MAAM,cAEpB,GAAIsoD,EAAI//C,OAAS9J,EAAqB+J,OAClC,MAAM,IAAIxI,MAAM,oBAEpB,MAAO,CACH+6B,KAAMutB,EAAIn8B,SAASgC,iBAIpB,SAA4B6V,GAC/B,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,ELlDL,SAAcpvB,GACjB,sBAAA3V,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAA1xB,EAAA,OAAA7R,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EA5BG,CACHrjC,KAAM7B,EAAWs0B,yBA0Bd8Q,EAMCD,IANDE,EAAAD,EAIC9S,KAAQE,cAAiBhmB,EAJ1B64B,EAI0B74B,MAAOtC,EAJjCm7B,EAIiCn7B,SACzBmpB,EALR+R,EAKCjS,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAXpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAemBgjC,EAAUlrB,OAAO/P,GAfpC,WAeOuJ,EAfPxR,EAAAG,MAgBSvE,OAAS4rB,GAA0B3rB,OAhB5C,CAAAmE,EAAAE,KAAA,gBAiBKm3B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAM,gBACNC,QAAS,yCAnBlBuN,EAAAK,OAAA,kBAuBCg3B,GA7CgB99B,EA6CKiY,EA5CtB,CACHxd,KAAM7B,EAAWu0B,yBACjBntB,aAAcA,EACdgX,MAAO,QAkBJvQ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAyBCq3B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,YA3BjB,yBAAAuN,EAAAM,OAtBJ,IAAqB/G,GAsBjBuG,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GKiDiB2f,CAAalY,KAE1Bo8B,SAAU,WACNhN,EL1DD,CACHrjC,KAAM7B,EAAW20B,wBK+DVkS,CAA8FylB,cCzF9F/I,uBA3BX,SAAAA,EAAY/pB,GAAmB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA4iD,GAAA9iD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8iD,GAAAziD,KAAAH,KACrB64B,0EAIN,IAAMgD,EACF/C,EAAA,yBACIA,EAAA,yBACK94B,KAAK64B,MAAMvjB,KAAK8G,UAErB0c,EAAA,yBACIA,EAAA,0BAAMA,EAAA,cAAC6C,GAAD,CAAQrmB,KAAMtV,KAAK64B,MAAMvjB,KAAM2jB,KAAM,MAC1C,IACDH,EAAA,0BAAO94B,KAAK64B,MAAMvjB,KAAK/L,YAInC,OACIuvB,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,EAASG,UAAU,eAC/BlD,EAAA,mBAAGmD,KAAM,YAAcj8B,KAAK64B,MAAMvjB,KAAK/L,SAAU2yB,OAAO,UAAUl8B,KAAK64B,MAAMvjB,KAAK8G,mBArBnFwe,cCCbkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,OAAI74B,KAAK64B,MAAMvjB,KAEPwjB,EAAA,cAAC+yB,GAAD,CAAYv2C,KAAMtV,KAAK64B,MAAMvjB,KAAMsmB,WAAY57B,KAAK64B,MAAM+C,aAI1D9C,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAAa,IAD5B,+DAQHlB,KAAK64B,MAAMvjB,MACZtV,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAMyL,eArBpB1J,aA4DNsL,IC/DVnO,GD+DUmO,eAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHvjB,KAAMtU,EAAMm2B,SAAS1Z,MAAM2Z,KAAKhpB,IAAIyqB,EAAMyL,UAIlD,SAA4BC,GACxB,MAAO,CACH0B,OAAQ,SAAC3B,GACLC,EAASlX,GAAmBiX,OAKzB4B,CAA8FJ,WC1D7G,SAAS5K,GAAYC,GACjB,OAAQA,GACJ,KAAKpD,GAAKqD,QACN,OAAOrD,GAAKhvB,OAChB,KAAKgvB,GAAKhvB,OACN,OAAOgvB,GAAKqD,mBAVnBrD,qEAkBgB+qB,eACjB,SAAAA,EAAYjqB,GAAuB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8iD,IAC/BrjD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgjD,GAAA3iD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTs6B,KAAMvD,GAAKqD,SAJgB37B,8EAS/BO,KAAKu7B,SAAS,CACVD,KAAMJ,GAAYl7B,KAAKgB,MAAMs6B,uDAIdtX,GACnB,OAAIA,EAAU5D,SAEN0Y,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,gDAAgDyf,UAAU,SACrElD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,sBAOJ43B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,6EAA6Eyf,UAAU,SAClGlD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,oEAqCK8iB,GACjB,IAAI8nC,EACAjwB,EACJ,OAAQ7X,EAAU+e,QACd,KAAKyC,GAA+BtmB,KAChC4sC,EAAW,MACXjwB,EACI/C,EAAA,wCAAiBA,EAAA,uEAAjB,KAEJ,MACJ,KAAK0M,GAA+BrmB,KAChC2sC,EAAW,OACXjwB,EACI/C,EAAA,oEAA6CA,EAAA,+BAA7C,YAAiEA,EAAA,uEAAjE,KAEJ,MACJ,KAAK0M,GAA+B/7B,MAChCqiD,EAAW,SACXjwB,EACI/C,EAAA,oEAC2CA,EAAA,iCAD3C,qCAIJ,MACJ,KAAK0M,GAA+BzmB,MAChC+sC,EAAW,QACXjwB,EACI/C,EAAA,iEAMZ,OACIA,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACVzf,MAAOsf,GACP/C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAM4qD,oDAKD9nC,GACnB,IAAI8nC,EACAjwB,EAQJ,OAPI7X,EAAU5D,UACV0rC,EAAW,SACXjwB,EAAU,mEAEViwB,EAAW,OACXjwB,EAAU,8FAGV/C,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACVzf,MAAOsf,GACP/C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAM4qD,+CAKNvpC,GACd,IAAMsZ,EACF/C,EAAA,0BAEQoO,KAAKC,eAAe,QAAS,CACzBC,MAAO,QACPC,IAAK,UACLE,KAAM,YACPD,OAAO/kB,IAItB,OACIuW,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cAAczf,MAAOsf,GACnCsK,GAAY5jB,0CAKXyB,GACV,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAMhE+vB,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UAClDlY,EAAUzH,QAGlB,KACDuc,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAACizB,GAAD,CAAYnwB,WAAY,GAAI0I,OAAQtgB,EAAUlF,UAItDga,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,4BACV17B,KAAKkjD,qBAAqBl/B,IAE/B8U,EAAA,qBAAK4C,UAAU,oBACV17B,KAAKgsD,uBAAuBhoC,KAGrC8U,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,WACA5C,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMyY,EAAUkf,sDAyBxClf,GAET,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,mBAAGqD,QAASn8B,KAAKo8B,aAAaC,KAAKr8B,MAC/B07B,UAAS,cAAA7tB,OAAgB7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,UAAY,KAEvE+vB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAI,GAAA2M,OAAK7N,KAAKgB,MAAMs6B,OAASvD,GAAKhvB,OAAS,KAAO,YAMhE+vB,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UAClDlY,EAAUzH,QAGlB,KACDuc,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAACizB,GAAD,CAAYnwB,WAAY,GAAI0I,OAAQtgB,EAAUlF,UAGtDga,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,4BACV17B,KAAKkjD,qBAAqBl/B,IAE/B8U,EAAA,qBAAK4C,UAAU,oBACV17B,KAAKgsD,uBAAuBhoC,KAcrC8U,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,cACC17B,KAAKisD,kBAAkBjoC,EAAUkf,cAEtCpK,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,MACA5C,EAAA,cAACizB,GAAD,CAAYnwB,WAAY,GAAI0I,OAAQtgB,EAAUmf,yDAOlDnf,GACZ,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,WACX5C,EAAA,yBACIA,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UAClDlY,EAAUzH,QAGlB,KACDuc,EAAA,qBAAK4C,UAAU,mBACX5C,EAAA,cAACizB,GAAD,CAAYnwB,WAAY,GAAI0I,OAAQtgB,EAAUlF,UAItDga,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,4BACV17B,KAAKkjD,qBAAqBl/B,IAE/B8U,EAAA,qBAAK4C,UAAU,oBACV17B,KAAKgsD,uBAAuBhoC,KAGrC8U,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eACZ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAEf43B,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMyY,EAAUkf,YAAasF,cAAc,oDAQ5E,IAAMxkB,EAAYhkB,KAAK64B,MAAM7U,UAC7B,OAAIA,EAAU+e,SAAWyC,GAA+BliC,KAEhDw1B,EAAA,oEAmBD94B,KAAKksD,gBAAgBloC,UAjUG4W,aClBjCkL,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,0EAIN,OAAI74B,KAAK64B,MAAM7U,UAEP8U,EAAA,cAACqzB,GAAD,CACInoC,UAAWhkB,KAAK64B,MAAM7U,YAK1B8U,EAAA,6FAQH94B,KAAK64B,MAAM7U,WACZhkB,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM/mB,oBAvBpB8oB,aA8DNsL,mBAdf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACH7U,UAAWhjB,EAAMm2B,SAASrX,WAAWsX,KAAKhpB,IAAIyqB,EAAM/mB,cAAgB,OAI5E,SAA4ByyB,GACxB,MAAO,CACH0B,OAAQ,SAACn0B,GACLyyB,EAASlX,GAAsBvb,OAK5Bo0B,CAA8FJ,ICzDxFsmB,uBACjB,SAAAA,EAAYvzB,GAAc,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAosD,IACtB3sD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAssD,GAAAjsD,KAAAH,KAAM64B,KACD73B,MAAQ,CACTqrD,eAAe,GAHG5sD,iFAQtBO,KAAK64B,MAAMisB,gBAAgB9kD,KAAK64B,MAAM7U,qDAItChkB,KAAKu7B,SAAS,CAAE8wB,eAAe,mDAI/BrsD,KAAKu7B,SAAS,CAAE8wB,eAAe,sDAGTroC,GAAuC,IACzDyoB,EACA6f,EACAC,EACAC,EAJyD7gD,EAAA3L,KAK7D,OAAQgkB,EAAU1D,YACd,KAAKoU,GAAiCpxB,KAC9B0gB,EAAU5D,UACVmsC,EAAoB,kIACpB9f,EACI3T,EAAA,gDAIJ0zB,EAAgB,yJAChBF,EACIxzB,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQkD,QAAS,WAAQxwB,EAAKm5C,gBAAgB3kD,KAAKwL,KAAhE,2BAKJ4gD,EAAoB,2FACpB9f,EACI3T,EAAA,uCAIJ0zB,EAAgB,uGAChBF,EACIxzB,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQkD,QAAS,WAAQxwB,EAAKm5C,gBAAgB3kD,KAAKwL,KAAhE,0BAKR,MACJ,KAAK+oB,GAAiCxV,KAClCqtC,EAAoB,oGACpB9f,EACI3T,EAAA,uCAIJ0zB,EAAgB,yFAChBF,EACIxzB,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQkD,QAAS,WAAQxwB,EAAK8gD,gBAAgBtsD,KAAKwL,KAAhE,6BAIJ,MACJ,KAAK+oB,GAAiCvV,KAClCotC,EAAoB,wFACpB9f,EACI3T,EAAA,kCAIJ0zB,EAAgB,4GAChBF,EACIxzB,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQkD,QAAS,WAAQxwB,EAAK8gD,gBAAgBtsD,KAAKwL,KAAhE,wBAIJ,MACJ,KAAK+oB,GAAiCjrB,MAClC8iD,EAAoB,2FACpB9f,EACI3T,EAAA,mCAIJ,MACJ,KAAKpE,GAAiC3V,MAClCwtC,EAAoB,6EACpB9f,EACI3T,EAAA,mCAIJ,MACJ,QACI2T,EACI3T,EAAA,qCAMZ,OACIA,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOgwC,EAAmBvwB,UAAU,SACzClD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,sBAAM4C,UAAU,eAAhB,mBACC+Q,IAGR,IACD3T,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOiwC,EAAexwB,UAAU,SACpCswB,mDAMMtoC,GACnB,OAAIA,EAAU5D,SAEN0Y,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,gDAAgDyf,UAAU,SACrElD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,sBAOJ43B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,6EAA6Eyf,UAAU,SAClGlD,EAAA,sBAAMiB,MAAO,CAAEgpB,OAAQ,SACnBjqB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,iEASZ,IAAM8iB,EAAYhkB,KAAK64B,MAAM7U,UAC7B,OAAIhkB,KAAK64B,MAAMpyB,aAAama,SACpBoD,EAAU1D,aAAeoU,GAAiCpxB,MACzD0gB,EAAU5D,SAWX0Y,EAAA,cAAC4zB,GAAD,CAAW56C,YAAakS,EAAUlS,cAT9BgnB,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mBAAGmD,KAAM,cAAgBjY,EAAUlS,YAAaoqB,OAAO,UACnDpD,EAAA,qBAAK4C,UAAU,SAAS1X,EAAUzH,QAEtCuc,EAAA,yBAAM94B,KAAK2sD,0BAA0B3oC,KASjD8U,EAAA,cAAC4zB,GAAD,CAAW56C,YAAakS,EAAUlS,uDAKtC,OACIgnB,EAAA,yBACIA,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eAAhB,SACA5C,EAAA,0BACIA,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMvL,KAAK64B,MAAM7U,UAAUxO,gDAOvD,IACDo3C,EADC/0C,EAAA7X,KAgBL,OAdIA,KAAKgB,MAAMqrD,gBAEXO,EACI9zB,EAAA,cAAC+zB,GAAA,EAAD,CAAQtwC,MAAM,8BACVyf,UAAU,QACV8wB,UAAU,EACVrT,SAAS,EACTsT,QAAS,WAAQl1C,EAAKm1C,qBAAqB7sD,KAAK0X,KAJpD,yBAYJihB,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,sCACV17B,KAAKksD,mBAKTU,UA3MkChyB,cCM9BqyB,uBACjB,SAAAA,EAAYp0B,GAAyB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAitD,GAAAntD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmtD,GAAA9sD,KAAAH,KAC3B64B,yFAIN74B,KAAK64B,MAAMq0B,kEAGGlpC,GAAuC,IAAAvkB,EAAAO,KAI/CL,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,+FAGAA,EAAA,4HAGAA,EAAA,yGAKR0Q,KAAMwL,QAAQ,CACVz4B,MAAO,UACPktB,QAAS9pC,EACTq5B,MAAO,OACPmc,OAAQ,UACRF,KAAM,WApBNx1C,EAAKo5B,MAAMs0B,kBAAkBnpC,8CA0BrBhY,EAAagY,GACzB,OAAQhY,GACJ,IAAK,kBACDhM,KAAKmtD,kBAAkBnpC,gDAKfA,GAAuC,IAEnDslB,EAFmD39B,EAAA3L,KAGvD,OAFiBA,KAAK64B,MAAM7X,SAEX9f,MACb,KAAMwzB,GAAoCpxB,KAEtC,MACJ,KAAMoxB,GAAoCxV,KAC1C,KAAMwV,GAAoC9V,uBAC1C,KAAM8V,GAAoC7V,0BAC1C,KAAM6V,GAAoC7qB,OACtC,MACJ,KAAM6qB,GAAoCjrB,MAC1C,KAAMirB,GAAoC3V,MACtCuqB,EACIxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAAS,SAAA38B,GAAa,IAAVwM,EAAUxM,EAAVwM,IAAYL,EAAKyhD,gBAAgBphD,EAAKgY,KACpD8U,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,mBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAS64B,MAAO,CAAEJ,MAAO,aADxC,wCAMhB,GAAK2P,EAGL,OACIxQ,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAWw6B,UAAU,gEAK1B,IAAA7jB,EAAA7X,KAId,OACI84B,EAAA,qBAAKiB,MAAO,CAAE2nB,aAAc,QACxB5oB,EAAA,cAACmd,GAAA,EAAD,CAAOlc,MAAO,CAAEf,MAAO,OAAQqV,YAAa,OACxCX,YAAY,6BACZC,SAPK,SAACV,GACdp1B,EAAKghB,MAAMw0B,mBAAmBpgB,EAAE/Q,OAAOx4B,mDAc/B,IAAAg8B,EAAA1/B,KAKZ,OACI84B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,sBAAM4C,UAAU,eAAhB,QACA5C,EAAA,cAACwV,GAAA,EAAD,CAAQX,SAPK,SAACjqC,GAClBg8B,EAAK7G,MAAMy0B,iBAAiB5pD,IAOpBq2B,MAAO,CAAEf,MAAO,QAChBwV,0BAA0B,EAC1BnvB,aAAcrf,KAAK64B,MAAMtK,kBAEzBuK,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,OAAOsI,IAAI,QAAhC,QACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,QAAQsI,IAAI,SAAjC,cACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,UAAUsI,IAAI,WAAnC,mEAMSgY,GACrB,IAAMupC,EAAiBvtD,KAAK64B,MAAMpyB,aAAaiZ,cACzCgB,EAAUsD,EAAUtD,QAepB6gC,EAAa,CAAC,wCAAyC,cAI7D,OAjBuB,OAAnBgM,IAOgB,OAAZ7sC,GAGQ6sC,EAAe37C,UAAY8O,EAAQ9O,YAK/C2vC,EAAWlxC,KAAK,4CAGhByoB,EAAA,qBAAK4C,UAAW6lB,EAAWzzC,KAAK,KAAM9B,IAAK2F,OAAOqS,EAAUlS,cACxDgnB,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,cAAC00B,GAAD,CACIxpC,UAAWA,EACXvd,aAAczG,KAAK64B,MAAMpyB,aACzBq+C,gBAAiB9kD,KAAK64B,MAAMisB,mBAEpChsB,EAAA,qBAAK4C,UAAU,yCACV17B,KAAKytD,oBAAoBzpC,sDAMjB,IAiBjB0pC,EAjBiB1tB,EAAAhgC,KACf2tD,EAAS,CACX70B,EAAA,cAAC0S,GAAA,EAAD,CACIx/B,IAAI,eACJitB,KAAK,QACLkD,QAASn8B,KAAKktD,sBAAsB7wB,KAAKr8B,OACzC84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAJf,2BAiBAwsD,EADiC,IAAjC1tD,KAAK64B,MAAM/Y,WAAWtQ,OAElBspB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAAQ,4DAGbK,KAAK64B,MAAM/Y,WAAWzW,IAAI,SAAC2a,GACzC,OAAOgc,EAAK4tB,yBAAyB5pC,KAK7C,IAAMzC,EAAiBvhB,KAAK64B,MAAMpyB,aAAa8a,eACzChF,EACFuc,EAAA,sBAAM4C,UAAU,qCACZ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,cAAc64B,MAAO,CAAEsU,YAAa,SADnD,aAGK,IACDvV,EAAA,sBAAM4C,UAAU,0CAAhB,IAA2Dna,EAA3D,MAGR,OACIuX,EAAA,qBAAK4C,UAAU,sDACX5C,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,qBAAK4C,UAAU,0CACVnf,GAELuc,EAAA,qBAAK4C,UAAU,0CACViyB,IAGT70B,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,qBAAK4C,UAAU,iDACV17B,KAAK4vC,mBAEV9W,EAAA,qBAAK4C,UAAU,+CACV17B,KAAK8hD,kBAGdhpB,EAAA,qBAAK4C,UAAU,8CACX5C,EAAA,qBAAK4C,UAAU,+CACVgyB,yDAOO,IACpBrJ,EAoCAqJ,EArCoBjM,EAAAzhD,KAElB6tD,EAAmB7tD,KAAK64B,MAAMpyB,aAAaqZ,WAAWtQ,OACtDs+C,EAAuB9tD,KAAK64B,MAAMpyB,aAAa8a,eAAiBvhB,KAAK64B,MAAMpyB,aAAaqZ,WAAWtQ,OACnGq4C,EAAa,CACflH,aAAc,QAElB,GAAIkN,GACA,GAAIC,EAAsB,CACtB,IAAMnuD,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iHACAA,EAAA,uBAAIg1B,EAAJ,qBAAqE,IAAzBA,EAA6B,UAAY,QAArF,kBAGRzJ,EACIvrB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO8tB,UAIpD,GAAIiG,EAAsB,CACtB,IAAMnuD,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,sJACAA,EAAA,uBAAIg1B,EAAJ,qBAAqE,IAAzBA,EAA6B,UAAY,QAArF,kBAGRzJ,EACIvrB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO8tB,SAGhDxD,EACIvrB,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAAQ,0DAA0Do6B,MAAO8tB,IAMpGgG,IACAH,EAAkB1tD,KAAK64B,MAAM/Y,WAAWzW,IAAI,SAAC2a,GAEzC,OACI8U,EAAA,qBAAK4C,UAAU,mDAAmD1vB,IAAK2F,OAAOqS,EAAUlS,cACpFgnB,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,cAAC00B,GAAD,CACIxpC,UAAWA,EACXvd,aAAcg7C,EAAK5oB,MAAMpyB,aACzBq+C,gBAAiBrD,EAAK5oB,MAAMisB,mBAEpChsB,EAAA,qBAAK4C,UAAU,yCACV+lB,EAAKgM,oBAAoBzpC,QAQ9C,IAAMzH,EACFuc,EAAA,sBAAM4C,UAAU,qCACZ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,cAAc64B,MAAO,CAAEsU,YAAa,SADnD,aAGK,IACDvV,EAAA,sBAAM4C,UAAU,0CAAhB,IAA2D17B,KAAK64B,MAAMpyB,aAAa8a,eAAnF,MAGR,OACIuX,EAAA,qBAAK4C,UAAU,sDACX5C,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,qBAAK4C,UAAU,0CACVnf,GAELuc,EAAA,qBAAK4C,UAAU,4CAGnB5C,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,qBAAK4C,UAAU,iDACV17B,KAAK4vC,mBAEV9W,EAAA,qBAAK4C,UAAU,+CACV17B,KAAK8hD,kBAGdhpB,EAAA,qBAAK4C,UAAU,8CACX5C,EAAA,qBAAK4C,UAAU,qCACV2oB,EACAqJ,sCAQjB,OAAI1tD,KAAK64B,MAAMpyB,aAAama,SACjB5gB,KAAK+tD,yBAEL/tD,KAAKguD,mCAxTgBpzB,cC0BjC,SAASx3B,GAAUhB,GACtB,MAAO,CACHlB,KAAM7B,EAAW+1B,sCACjBhzB,MAAOA,GAwOf,SAAS6rD,GAAgBjtD,GACrB,IAAMs6B,EApBV,SAAoBt6B,GAAoD,IAG7CM,EAEnBN,EAHAI,MACIyH,YAAevH,UAGvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,kCAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,kCAVgD,IAY5DquB,EAAyBttB,EAAUorB,SAAnCkC,qBACR,GAA6B,OAAzBA,EACA,MAAM,IAAIruB,MAAM,kCAEpB,OAAOquB,EAIMw6B,CAAWpoD,GACxB,GAAuB,OAAnBs6B,EAAKh6B,UACL,MAAM,IAAIf,MAAM,kCAEpB,OAAO+6B,EAAKh6B,UAGT,SAAS4sD,KACZ,OAAO,SAAC3pB,EAAmDC,GACrCypB,GAAgBzpB,KAC1BvP,sBAEkB1Y,MAAM3Z,gBAAgB1B,OAASnD,EAAoB8E,GAO7E0hC,EAAS,CACLrjC,KAAM7B,EAAWo2B,8CAPjB8O,EAAS,CACLrjC,KAAM7B,EAAWs2B,6CAkH1B,SAASw4B,GAAmBh5C,GAC/B,OAAO,SAACovB,EAAmDC,GACvDD,EArBG,CACHrjC,KAAM7B,EAAW+uD,yDAmBqE,IAAAvd,EASlFrM,IATkFsM,EAAAD,EAIlFlf,KAAQE,cAAiBhmB,EAJyDilC,EAIzDjlC,MAAOtC,EAJkDunC,EAIlDvnC,SACzBmpB,EAL2Eme,EAKlFre,IAAOE,OAEYpxB,EAP+DuvC,EAMlFzvC,MACIyH,YAAevH,UAIvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,yBAEF,IAAIm0B,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAG7Cuc,cAAc/mB,EAAUmF,aAAazB,GAAIuE,GAC9C+C,KAAK,SAACoS,GACH6lB,EArCT,SAAmCpvB,GACtC,MAAO,CACHjU,KAAM7B,EAAWgvD,yDACjBl5C,eAAgBA,GAkCCm5C,CAA0Bn5C,IACnCovB,EAAS6a,GAAsB99C,EAAUmF,aAAazB,OAGzD05B,MAAM,SAACC,GAlCb,IAAiCv8B,EAmCxBmiC,GAnCwBniC,EAmCS8pB,GAAU,CACvCxsB,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,UApCtB,CACHuB,KAAM7B,EAAWkvD,uDACjBnsD,MAAOA,mBClFAosD,eA1SX,SAAAA,EAAY31B,GAA+B,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwuD,GAAA1uD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0uD,GAAAruD,KAAAH,KACjC64B,8EAGG,IAAAp5B,EAAAO,KACHyuD,EAAa,WACfhvD,EAAKivD,uBACNryB,KAAKr8B,MACRwpC,KAAMwL,QAAQ,CACVz4B,MAAO,kCACPktB,QACI3Q,EAAA,kDAIJE,MAAO,OACPic,KAAM,WACFwZ,wCAMRzuD,KAAK64B,MAAMmvB,yDAKXhoD,KAAK64B,MAAM81B,oBAAoB3uD,KAAK64B,MAAMpyB,aAAazB,IACvDhF,KAAK64B,MAAMmvB,0DAGQ,IAAAr8C,EAAA3L,KACbyuD,EAAa,WACf9iD,EAAKijD,iCACNvyB,KAAKr8B,MACRwpC,KAAMwL,QAAQ,CACVz4B,MAAO,qCACPktB,QACI3Q,EAAA,2LAMJE,MAAO,OACPic,KAAM,WACFwZ,+DAMRzuD,KAAK64B,MAAMg2B,qBAAqB7uD,KAAK64B,MAAMpyB,aAAazB,sCAIxD,OACIhF,KAAK64B,MAAM/2B,YAAchE,EAAU2F,QACnCzD,KAAK64B,MAAMj2B,gBAAgB1B,OAASnD,EAAoB8E,KACvD7C,KAAK64B,MAAMr3B,YAAcxD,EAAUgF,KAChChD,KAAK64B,MAAMr3B,YAAcxD,EAAUy0B,OACnCzyB,KAAK64B,MAAMr3B,YAAcxD,EAAUgE,wCAItCirC,GACLA,EAAEC,iBACFltC,KAAK64B,MAAMwc,+CAGDpI,GACVA,EAAEqI,UACFt1C,KAAK64B,MAAMi2B,cAAc7hB,EAAE/Q,OAAOx4B,6CAGxBpD,GAEV,OAAIA,EAAKkP,OAAS,GACPlP,EAGPw4B,EAAA,0BACKx4B,EAAKua,MAAM,EAAG,IADnB,iDAOOk7B,GACX,OAAQA,EAAMnzC,gBAAgB1B,MAG1B,KAAMnD,EAAoBkI,MAE1B,KAAMlI,EAAoBqgB,iBACtB,MAAO,oCAGf,OAAQ23B,EAAMpyC,WACV,KAAM9F,EAAU+F,MACZ,MAAO,8BACX,QACI,MAAO,iFAKf,IAAImrD,EACJ,OAAQ/uD,KAAK64B,MAAMpyB,aAAaua,UAC5B,KAAK0T,GAAoC7qB,OACrCklD,EACIj2B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SACTt6B,KAAK,SACLi7B,QAASn8B,KAAKgvD,WAAW3yB,KAAKr8B,OAFlC,uBAQR,MACJ,KAAK00B,GAAoCjrB,MACrC,IAAMwlD,EACFn2B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,gGAIAA,EAAA,+GAMRi2B,EACIj2B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAACiD,GAAA,EAAD,CACIxf,MAAO0yC,GACPn2B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTt6B,KAAK,UACL2sC,UAAU,GAFd,kDASZ,MACJ,KAAKnZ,GAAoC3V,MACrC,IAAMmwC,EACFp2B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,6GAMRi2B,EACIj2B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAACiD,GAAA,EAAD,CACIxf,MAAO2yC,GACPp2B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTt6B,KAAK,UACL2sC,UAAU,GAFd,+BAWpB,OAAOkhB,uDAIP,OAAQ/uD,KAAK64B,MAAMpyB,aAAaua,UAC5B,KAAK0T,GAAoCjrB,MACrC,OACIqvB,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTt6B,KAAK,UACLi7B,QAASn8B,KAAK6uD,qBAAqBxyB,KAAKr8B,OAF5C,oEAYhB,IAAM67B,EACF/C,EAAA,uEAIJ,OACIA,EAAA,qBAAK4C,UAAU,oCACX5C,EAAA,qBAAK4C,UAAU,sDACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,sBAAM4C,UAAU,2CACZ5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,WAKR/C,EAAA,qBAAK4C,UAAU,2CACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO1D,KAAK64B,MAAM5D,sBAAsB1Y,MAAM7Y,OAAS,GAC1Dg4B,UAAW17B,KAAKk2C,eAAel2C,KAAK64B,MAAM5D,sBAAsB1Y,OAChEoxB,SAAU3tC,KAAKmvD,cAAc9yB,KAAKr8B,wDAQtD,OACI84B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SACTt6B,KAAK,SACLi7B,QAASn8B,KAAKovD,OAAO/yB,KAAKr8B,OAF9B,sDAUR,OACI84B,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTuS,KAAK,iBACL/hC,IAAI,SACJ6hC,UAAW7tC,KAAK25C,QAAQx5C,KAAKH,MAC7BguC,SAAS,UAJb,gDAYR,OACIlV,EAAA,sBAAM9zB,GAAG,iBACL02B,UAAU,sDACV+R,SAAUztC,KAAKytC,SAASpR,KAAKr8B,OAC7B84B,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,qBAAK4C,UAAU,uDAAf,mCAIJ5C,EAAA,qBAAK4C,UAAU,4BACV17B,KAAKqvD,iBACNv2B,EAAA,qBAAK4C,UAAU,iCACX5C,EAAA,qBAAK4C,UAAU,aACV17B,KAAKk5C,mBACLl5C,KAAKm5C,qBACLn5C,KAAKsvD,uBACLtvD,KAAKuvD,6EAS1B,OACIz2B,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,WACTt6B,KAAK,SACLi7B,QAASn8B,KAAKovD,OAAO/yB,KAAKr8B,OAF9B,2CAWZ,OACI84B,EAAA,qBAAK4C,UAAU,2CAEX5C,EAAA,qBAAK4C,UAAU,gDACX5C,EAAA,qBAAK4C,UAAU,gDACV17B,KAAKi6C,yBAlSCrf,aCkDhBsL,mBAhDf,SAAyBllC,EAAmB63B,GAA6B,IAExCtvB,EACzBvI,EADA2wB,KAAQE,cAAiBtoB,SAGvBjI,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,wBAEpB,GAA0D,OAAtDe,EAAUorB,SAASkC,qBAAqBttB,UACxC,MAAM,IAAIf,MAAM,iCAGpB,IAAMivD,EAA0CluD,EAAUorB,SAASkC,qBAAqBttB,UAUxF,MAAO,CACHiI,WAAU9C,aAPVnF,EADAmF,aAQwBwuB,sBAHxBu6B,EADAv6B,sBAI+CnzB,UAH/C0tD,EADuB1tD,UAImCN,UAH1DguD,EADkChuD,UAImCoB,gBAHrE4sD,EAD6C5sD,kBAQ9C,SAA4B2hC,GAC/B,MAAO,CACHoqB,oBAAqB,SAACx5C,GAClBovB,EFyFL,SAAkBpvB,GACrB,sBAAA1C,EAAA3S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAyL,EAAAC,EAAArkC,EAAAtC,EAAAmpB,EAAA0d,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACHm3B,EAAU,CACNrjC,KAAM7B,EAAWowD,6CAFlBxf,EAQCzL,IARD0L,EAAAD,EAMCte,KAAQE,cAAiBhmB,EAN1BqkC,EAM0BrkC,MAAOtC,EANjC2mC,EAMiC3mC,SACzBmpB,EAPRud,EAOCzd,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGvD,IACIskC,EAAU3nB,aAAatT,EAAgB5L,GACvCg7B,EAAS,CACLrjC,KAAM7B,EAAWqwD,+CAErBnrB,EAAS6a,GAAsBjqC,IACjC,MAAOqJ,GACL9c,QAAQU,MAAM,oBAAqBoc,GACnC+lB,EAAS,CACLrjC,KAAM7B,EAAWswD,2CACjBvtD,MAAO,CACH1C,KAAM8e,EAAGle,KACTX,QAAS6e,EAAG7e,WA5BrB,wBAAA8O,EAAAjB,SAAAe,MAAP,gBAAAS,EAAAsB,GAAA,OAAAmC,EAAAhF,MAAAzN,KAAA0N,YAAA,GE1FiB2f,CAAiBlY,KAE9B25C,cAAe,SAACvyC,GACZgoB,EFoKL,SAAqBhoB,GACxB,OAAO,SAACgoB,GAAsD,IAAAqrB,EAC1BhyC,GAAWiyC,oBAAoBtzC,GADLuzC,EAAAhwD,OAAAsU,GAAA,EAAAtU,CAAA8vD,EAAA,GACnDG,EADmDD,EAAA,GACnC1tD,EADmC0tD,EAAA,GAGtD1tD,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAAS,CACLrjC,KAAM7B,EAAW2wD,8CACjB5tD,MAAO8pB,GAAU,CACbxsB,KAAM,UACNC,QAASyC,EAAMzC,YAIvB4kC,EAAS,CACLrjC,KAAM7B,EAAWi2B,gDACjB/Y,MAAOwzC,IAGfxrB,EAAS2pB,OEtLI7gC,CAAoB9Q,KAEjC84B,OAAQ,WACJ9Q,EFiQR,eAAA7xB,EAAA5S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAljC,EAAAmF,EAAAwuB,EAAAkQ,EAAAC,EAAAv5B,EAAAtC,EAAAmpB,EAAAziB,EAAAmgC,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cACHm3B,EAAS,CACLrjC,KAAM7B,EAAW4wD,wCAGf3uD,EAAY2sD,GAAgBzpB,KAC1B/9B,EAAwCnF,EAAxCmF,aAAcwuB,EAA0B3zB,EAA1B2zB,sBANnBkQ,EAWCX,IAXDY,EAAAD,EASCxT,KAAQE,cAAiBhmB,EAT1Bu5B,EAS0Bv5B,MAAOtC,EATjC67B,EASiC77B,SACzBmpB,EAVRyS,EAUC3S,IAAOE,OAGLziB,EAAS,CACXsM,MAAO0Y,EAAsB1Y,MAAM7Y,OAGjC0sC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MApBpDiD,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAwBOgjC,EAAUrnB,aAAatiB,EAAazB,GAAIuE,EAAU0G,GAxBzD,OAyBCs0B,EAAS,CACLrjC,KAAM7B,EAAWw2B,0CA1BtB9mB,EAAA3B,KAAA,iBAAA2B,EAAA5B,KAAA,GAAA4B,EAAAL,GAAAK,EAAA,SA6BCrN,QAAQU,MAAM,8BAAd2M,EAAAL,IACA61B,EAAS,CACLrjC,KAAM7B,EAAW6wD,sCACjB9tD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASoP,EAAAL,GAAG/O,YAlCrB,QAsCH4kC,EAAS2pB,MAtCN,yBAAAn/C,EAAAvB,SAAAsB,EAAA,kBAAP,gBAAAyB,EAAAK,GAAA,OAAA8B,EAAAjF,MAAAzN,KAAA0N,YAAA,KE/PImhD,qBAAsB,SAAC15C,GACnBovB,EAASlX,GAA2BlY,OAKjC+wB,CAA8FmV,IC5DvGvV,eACF,SAAAA,EAAYjN,GAAe,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACjB64B,iFAIN,IAAMl5B,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAAa,IAD5B,8BAIJ,OACI43B,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EACxBo6B,MAAO,CAAEoX,QAAS,OAAQnY,MAAO,OAAQ4S,OAAQ,mBAAoB8D,UAAW,gDAIhFttC,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KAEf,KAAKnE,EAAUqD,QACX,OAAOxC,KAAKoxC,gBAChB,KAAKjyC,EAAU8G,MACX,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAYnlB,GAAU,CAC9BxsB,KAAM,gBACNC,QAAS,qCAGrB,QACI,OACIm5B,EAAA,cAACq3B,GAAD,CAAWnI,SAAUhoD,KAAK64B,MAAMmvB,wDAM5C,OAAQhoD,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KACXtD,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,gEAKrCnV,KAAK64B,MAAM0Y,kBA1DE3W,aA8GNsL,ICiZXsL,GDjZWtL,eA3Bf,SAAyBllC,EAAmB63B,GAGxC,IACMgwB,EADI7nD,EAAMI,MAAMyH,YACRvH,UACd,GAAY,OAARunD,EACA,MAAM,IAAItoD,MAAM,cAEpB,GAAIsoD,EAAI//C,OAAS9J,EAAqB+J,OAClC,MAAM,IAAIxI,MAAM,oBAEpB,MAAO,CACH+6B,KAAMutB,EAAIn8B,SAASkC,uBAIpB,SAA4B2V,GAC/B,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,EH1DL,SAAcpvB,GACjB,sBAAA3V,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAA1xB,EAAA0xC,EAAAC,EAAA,OAAAxjD,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EA5BG,CACHrjC,KAAM7B,EAAW61B,wCA0BduP,EAMCD,IANDE,EAAAD,EAIC9S,KAAQE,cAAiBhmB,EAJ1B64B,EAI0B74B,MAAOtC,EAJjCm7B,EAIiCn7B,SACzBmpB,EALR+R,EAKCjS,IAAOE,OAGL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAXpDoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAgBmBgjC,EAAUlrB,OAAO/P,GAhBpC,WAgBOuJ,EAhBPxR,EAAAG,MAiBSvE,OAAS4rB,GAA0B3rB,OAjB5C,CAAAmE,EAAAE,KAAA,gBAkBKm3B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAM,gBACNC,QAAS,4CApBlBuN,EAAAK,OAAA,qBAyBMmR,EAAIkC,SAzBV,CAAA1T,EAAAE,KAAA,gBA0BKm3B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAM,WACNC,QAAS,aAAe4J,EAAW,oCA5B5C2D,EAAAK,OAAA,sBAiCK6iD,EAAa1xC,EAAItV,QAAQyN,KAAK,SAACvN,GAC/B,OAAOA,EAAOC,WAAaA,MAIvBmV,EAAII,MAAMvV,WAAaA,IACvB6mD,EAAa1xC,EAAII,OAIpBsxC,EA3CN,CAAAljD,EAAAE,KAAA,gBA4CKm3B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAM,WACNC,QAAS,aAAe4J,EAAW,0CA9C5C2D,EAAAK,OAAA,kBAmDO8iD,EAAkD,CACpD9zC,MAAO,CACH7Y,MAAO0sD,EAAW7zC,OAAS,GAC3BlV,YAAa+oD,EAAW7zC,MACxB5Y,UAAW9F,EAAUmF,IACrBJ,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,QAI7BwhC,GApFgB99B,EAoFKiY,EApFgCuW,EAoF3Bo7B,EAnF3B,CACHnvD,KAAM7B,EAAW81B,wCACjB1uB,aAAcA,EACdwuB,sBAAuBA,KAkBpB/nB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAiECxL,QAAQU,MAAM,WAAd8K,EAAAwB,IACA61B,EAASnhC,GAAU8oB,GAAU,CACzBxsB,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,YApEjB,yBAAAuN,EAAAM,OAtBJ,IAAqB/G,EAAqCwuB,GAsBtDjoB,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GGyDiB2f,CAAalY,KAE1Bo8B,SAAU,WACNhN,EHlED,CACHrjC,KAAM7B,EAAWg2B,uCGsEV6Q,CAA8FJ,IC6FtG,SAASn9B,KACZ,MAAO,CACHzH,KAAM7B,EAAWqJ,0BAwBlB,SAASxB,GAAiB9E,GAC7B,MAAO,CACHlB,KAAM7B,EAAW4H,oBACjB7E,MAAOA,GA8BR,SAAS8B,GAAqBD,GACjC,MAAO,CACH/C,KAAM7B,EAAWqI,iCACjBzD,QAASA,GAIV,SAASG,GAAmBH,EAAwB7B,GACvD,MAAO,CACHlB,KAAM7B,EAAWuI,+BACjB3D,QAASA,EACT7B,MAAOA,GAgCR,SAAS0wC,GAAK39B,GACjB,OAAO,SAACovB,EAAmDC,GACvDD,EA1IG,CACHrjC,KAAM7B,EAAWiH,sBAwIqE,IAAAm+B,EAMlFD,IANkFE,EAAAD,EAIlF9S,KAAQE,cAAiBhmB,EAJyD64B,EAIzD74B,MAAOtC,EAJkDm7B,EAIlDn7B,SACzBmpB,EAL2E+R,EAKlFjS,IAAOE,OAiBX,OANkB,IAAIgC,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGtCoZ,OAAO/P,GACnB7I,KAAK,SAACoS,GACH,GAAIA,EAAI5V,OAAS4rB,GAA0B3rB,OACvC,MAAM,IAAIxI,MAAM,6CAEpB,IA/JY8F,EAA0CI,EA+JhD6pD,EAAoC,CACtCtrD,GAAI,CACAtB,MAAOgb,EAAI1Z,GACXqC,YAAaqX,EAAI1Z,GACjBrB,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWuJ,cAAczI,EAAI1Z,IAAI,IAEtD1E,KAAM,CACFoD,MAAOgb,EAAIpe,KACX+G,YAAaqX,EAAIpe,KACjBqD,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWwJ,gBAAgB1I,EAAIpe,MAAM,IAE1D2D,QAAS,CACLP,MAAOgb,EAAIza,QACXoD,YAAaqX,EAAIza,QACjBN,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWm1B,mBAAmBr0B,EAAIza,SAAS,IAEhEK,QAAS,CACLZ,MAAOgb,EAAIpa,QACX+C,YAAaqX,EAAIpa,QACjBX,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWo1B,mBAAmBt0B,EAAIpa,SAAS,IAEhEK,kBAAmB,CACfjB,MAAOgb,EAAI/Z,kBACX0C,YAAaqX,EAAI/Z,kBACjBhB,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWq1B,6BAA6Bv0B,EAAI/Z,mBAAmB,IAEpFY,YAAa,CACT7B,MAAOgb,EAAInZ,YACX8B,YAAaqX,EAAInZ,YACjB5B,UAAW9F,EAAUmF,IACrBJ,gBAAiBgb,GAAWyJ,uBAAuB3I,EAAInZ,aAAa,IAExEK,UAAW,CACPlC,MAAOgb,EAAI9Y,UACXyB,YAAaqX,EAAI9Y,UACjBjC,UAAW9F,EAAUmF,IACrBJ,gBAAiB,CACb1B,KAAMnD,EAAoB8E,GAC1BC,YAAa,IAAIC,QAI7BwhC,GA9MYl+B,EA8MSiqD,EA9MiC7pD,EA8MpBiY,EA7MvC,CACHxd,KAAM7B,EAAWmH,sBACjBH,mBAAoBA,EACpBI,aAAcA,OA4MTi4B,MAAM,SAACC,GAxMb,IAAmBv8B,EAyMVV,QAAQU,MAAM,iBAAkBu8B,GAChC4F,GA1MUniC,EA0MS,CACf1C,KAAMi/B,EAAIr+B,KACVX,QAASg/B,EAAIh/B,SA3MtB,CACHuB,KAAM7B,EAAWqH,oBACjBtE,MAAOA,QA+MR,SAASmuD,KACZ,OAAO,SAAChsB,EAAmDC,GACvDD,EAhLG,CACHrjC,KAAM7B,EAAWuH,sBAiLjB,IAAM5F,EAAQwjC,IACd,IAAKxjC,EAAMI,MAAMmF,YAAYjF,UACzB,MAAM,IAAIf,MAAM,uBALkE,IAAA8yC,EAe9DryC,EANpB2wB,KAAQE,cAAiBhmB,EATyDwnC,EASzDxnC,MAAOtC,EATkD8pC,EASlD9pC,SATkDinD,EAe9DxvD,EALpBI,MACImF,YACIjF,UAAamF,EAZ6D+pD,EAY7D/pD,aAAcJ,EAZ+CmqD,EAY/CnqD,mBAG5BqsB,EAAa1xB,EAApBwxB,IAAOE,OAEL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGvD,GAAKzF,EAAL,CAQA,IAAM4J,EAAS,CACX3P,KAAM+F,EAAmB/F,KAAKoD,MAC9BO,QAASoC,EAAmBpC,QAAQP,MACpC6B,YAAac,EAAmBd,YAAY7B,MAC5CkC,UAAWS,EAAmBT,UAAUlC,MACxCY,QAAS+B,EAAmB/B,QAAQZ,MACpCiB,kBAAmB0B,EAAmB1B,kBAAkBjB,OAG5D0sC,EAAUqgB,UAAUhqD,EAAazB,GAAIiL,GAChC3D,KAAK,WACFi4B,EAnNL,CACHrjC,KAAM7B,EAAWyH,0BAoNZ43B,MAAM,SAACt8B,GACJV,QAAQU,MAAM,eAAgBiE,EAAoBjE,GAClDmiC,EAASr9B,GAAiB,CACtBxH,KAAM,UACNC,QAASyC,EAAMzC,kBAxBvB4kC,EAASr9B,GAAiB,CACtBxH,KAAM,MACNC,QAAS,mDA4BlB,SAAS+wD,KACZ,OAAO,SAACnsB,EAAmDC,GACvD,IAAMxjC,EAAQwjC,IACd,IAAKxjC,EAAMI,MAAMmF,YAAYjF,UACzB,MAAM,IAAIf,MAAM,uBAHkE,IAUtE8F,EAIZrF,EAPAI,MACImF,YACIjF,UACI+E,mBAMXA,GAKDA,EAAmB/F,KAAKsC,gBAAgB1B,OAASnD,EAAoB8E,IAKrEwD,EAAmBpC,QAAQrB,gBAAgB1B,OAASnD,EAAoB8E,IAKxEwD,EAAmB/B,QAAQ1B,gBAAgB1B,OAASnD,EAAoB8E,IAKxEwD,EAAmB1B,kBAAkB/B,gBAAgB1B,OAASnD,EAAoB8E,IAKlFwD,EAAmBd,YAAY3C,gBAAgB1B,OAASnD,EAAoB8E,GAKhF0hC,EAxSG,CACHrjC,KAAM7B,EAAWmJ,uBA0Qb+7B,EAAS57B,OAiCd,SAAS+qC,GAAWpzC,GACvB,OAAO,SAACikC,GAAsD,IAAAoP,EAC3B/1B,GAAWwJ,gBAAgB9mB,GADAszC,EAAA9zC,OAAAsU,GAAA,EAAAtU,CAAA6zC,EAAA,GACnDE,EADmDD,EAAA,GACpCxxC,EADoCwxC,EAAA,GAGtDxxC,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAlQL,SAAgCjkC,EAAc8B,GACjD,MAAO,CACHlB,KAAM7B,EAAWmI,2BACjBlH,KAAMA,EACN8B,MAAOA,GA8PMqF,CAAuBosC,EAAezxC,IAE/CmiC,EA3QL,SAAkCjkC,GACrC,MAAO,CACHY,KAAM7B,EAAW8H,6BACjB7G,KAAMA,GAwQOiH,CAAyBssC,IAEtCtP,EAASmsB,WAuHb5c,GAjHEC,eAMF,SAAAA,EAAAv0C,GAAqN,IAAAC,EAAvMyyC,EAAuM1yC,EAAvM0yC,MAAO3N,EAAgM/kC,EAAhM+kC,SAAUz4B,EAAsLtM,EAAtLsM,IAAKuzB,EAAiL7/B,EAAjL6/B,QAASiD,EAAwK9iC,EAAxK8iC,iBAAkBz2B,EAAsJrM,EAAtJqM,MAAsJ,OAAA/L,OAAAC,EAAA,EAAAD,CAAAE,KAAA+zC,IACjNt0C,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAi0C,GAAA5zC,KAAAH,KAAM,CAAEkyC,YANZ3N,cAKqN,EAAA9kC,EAJrNqM,SAIqN,EAAArM,EAHrN4/B,aAGqN,EAAA5/B,EAFrN6iC,sBAEqN,EAAA7iC,EADrNoM,WACqN,EAGjNpM,EAAK8kC,SAAWA,EAChB9kC,EAAKqM,IAAMA,EACXrM,EAAK6iC,iBAAmBA,EACxB7iC,EAAKoM,MAAQA,EACbpM,EAAK4/B,QAAUA,EAPkM5/B,yMAYvMmgC,EAAS,IAAI2S,GAAgB,CAC/BzmC,IAAK9L,KAAKsiC,iBACVz2B,MAAO7L,KAAK6L,iBAEK+zB,EAAOoU,cAAc,CAAEloC,IAAK9L,KAAK8L,IAAKuzB,QAASr/B,KAAKq/B,oBAAnE5yB,UAEFzM,KAAKmyC,8DAIL1lC,EAAOwnC,0BACPj0C,KAAKukC,SAASrgC,GAAqBlE,KAAK8L,mCAEhCW,EAAOrK,MAAM1C,YACZ,sBAOA,iCAOA,yDAbDM,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sEAIbK,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,yBAA2B8M,EAAOrK,MAAMvC,KAAK,uDAI1DG,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,8DAIbK,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sGAMrBK,KAAKmyC,4DAGTnyC,KAAKukC,SAASngC,GAAmBpE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,4BAA8BuN,EAAAkK,GAAGzX,mBAGlDK,KAAKukC,SAASmsB,yHAxEoBze,QAmHpCiC,eAMF,SAAAA,EAAAzhC,GAAqN,IAAA9G,EAAvMumC,EAAuMz/B,EAAvMy/B,MAAO3N,EAAgM9xB,EAAhM8xB,SAAUz4B,EAAsL2G,EAAtL3G,IAAKuzB,EAAiL5sB,EAAjL4sB,QAASiD,EAAwK7vB,EAAxK6vB,iBAAkBz2B,EAAsJ4G,EAAtJ5G,MAAsJ,OAAA/L,OAAAC,EAAA,EAAAD,CAAAE,KAAAk0C,IACjNvoC,EAAA7L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAo0C,GAAA/zC,KAAAH,KAAM,CAAEkyC,YANZ3N,cAKqN,EAAA54B,EAJrNG,SAIqN,EAAAH,EAHrN0zB,aAGqN,EAAA1zB,EAFrN22B,sBAEqN,EAAA32B,EADrNE,WACqN,EAGjNF,EAAK44B,SAAWA,EAChB54B,EAAKG,IAAMA,EACXH,EAAK22B,iBAAmBA,EACxB32B,EAAKE,MAAQA,EACbF,EAAK0zB,QAAUA,EAPkM1zB,yMAYvMi0B,EAAS,IAAI2S,GAAgB,CAC/BzmC,IAAK9L,KAAKsiC,iBACVz2B,MAAO7L,KAAK6L,iBAEK+zB,EAAOuU,aAAa,CAAEroC,IAAK9L,KAAK8L,IAAKuzB,QAASr/B,KAAKq/B,oBAAlE5yB,UAEFzM,KAAKmyC,8DAIL1lC,EAAOwnC,0BACPj0C,KAAKukC,UA+CSjgC,EA/CqBtE,KAAK8L,IAgD7C,CACH5K,KAAM7B,EAAWyI,iCACjBxD,0CAhDgBmI,EAAOrK,MAAM1C,YACZ,sBAOA,iCAOA,yDAbDM,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sEAIbK,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,yBAA2B8M,EAAOrK,MAAMvC,KAAK,uDAI1DG,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,8DAIbK,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,sGAMrBK,KAAKmyC,4DAGTnyC,KAAKukC,SAAS9/B,GAAmBzE,KAAK8L,IAAK,CACvC5K,KAAMnD,EAAoBkI,MAC1BnD,YAAa,IAAIC,KACjBpD,QAAS,4BAA8B8O,EAAA2I,GAAGzX,mBAGlDK,KAAKukC,SAASmsB,wCAItB,IAA8BpsD,kFA5EY2tC,IAmF1C,SAASxtC,GAAmBH,EAAiBlC,GACzC,MAAO,CACHlB,KAAM7B,EAAW2I,+BACjB1D,UAASlC,SAkEV,SAASmyC,GAAkBhvC,GAC9B,OAAO,SAACg/B,EACJC,GAA+B,IAAAqM,EAI3BrM,IAJ2BsM,EAAAD,EAE3Blf,KAAQE,cAFmB2oB,GAAA1J,EAEFjlC,MAFEilC,EAEKvnC,SAFLsnC,EAG3Bre,IAAOE,OAG2B9U,GAAWyJ,uBAAuB9hB,IANzCk1C,EAAA36C,OAAAsU,GAAA,EAAAtU,CAAA06C,EAAA,GAMxB9F,EANwB+F,EAAA,GAMFr4C,EANEq4C,EAAA,GAQ3Br4C,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAhfL,SAAuCh/B,EAAqBnD,GAC/D,MAAO,CACHlB,KAAM7B,EAAWiJ,kCACjB/C,YAAaA,EACbnD,MAAOA,GA4eMmG,CAA8BmsC,EAAsBtyC,IAE7DmiC,EAzfL,SAAyCh/B,GAC5C,MAAO,CACHrE,KAAM7B,EAAWgJ,oCACjB9C,YAAaA,GAsfAorD,CAAgCjc,IAE7CnQ,EAASmsB,WC7wBZE,4GA2gCUC,eA3/BX,SAAAA,EAAYh4B,GAA8B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA6wD,IACtCpxD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+wD,GAAA1wD,KAAAH,KAAM64B,KAHVwQ,YAE0C,EAGtC5pC,EAAKuB,MAAQ,CACT4zC,iBAAiB,EACjB8P,gBAAgB,EAChBoM,WAAYF,GAAWttD,MAG3B7D,EAAK4pC,OAASyL,SAAS1L,SAAUC,OATK5pC,0EAatCO,KAAK64B,MAAMmvB,gDAIXxe,KAAM3pC,KAAK,CACP0c,MAAO,2BACPyc,MAAO,OACPyQ,QACI3Q,EAAA,yBACIA,EAAA,kHAMS,IAAAntB,EAAA3L,KACrB,GAAKA,KAAK+0C,aAAV,CAUAvL,KAAMwL,QAAQ,CACVz4B,MAAO,oBACPktB,QACI3Q,EAAA,yBACIA,EAAA,mEAEAA,EAAA,sEAA+CA,EAAA,oDAA/C,KAEAA,EAAA,uBAAGA,EAAA,0DAGXmc,KAhBY,WACZtpC,EAAK4vB,SAAS,CAAEqZ,iBAAiB,KAgBjCM,SAdW,aAeXC,OAAQ,MACRC,WAAY,YAvBZp1C,KAAKu7B,SAAS,CAAEqZ,iBAAiB,oDA2BjB,IAAA/8B,EAAA7X,KACpB,GAAKA,KAAK+0C,aAAV,CAUAvL,KAAMwL,QAAQ,CACVz4B,MAAO,oBACPktB,QACI3Q,EAAA,yBACIA,EAAA,mEAEAA,EAAA,sEAA+CA,EAAA,oDAA/C,KAEAA,EAAA,uBAAGA,EAAA,0DAGXmc,KAhBY,WACZp9B,EAAK0jB,SAAS,CAAEmpB,gBAAgB,KAgBhCxP,SAdW,aAeXC,OAAQ,MACRC,WAAY,YAvBZp1C,KAAKu7B,SAAS,CAAEmpB,gBAAgB,qCA2B/BzX,GACLA,EAAEC,iBACFltC,KAAK64B,MAAMk4B,qDAGF9jB,GACTA,EAAEqI,UACFt1C,KAAK64B,MAAM0c,aAAatI,EAAE/Q,OAAOx4B,mDAGjBupC,GAChBA,EAAEqI,UACFt1C,KAAK64B,MAAM2c,oBAAoBvI,EAAE/Q,OAAOx4B,0CAGjCupC,GACPA,EAAEqI,UACF5zC,QAAQC,KAAK,sEAGCsrC,GACdjtC,KAAK64B,MAAMgd,kBAAkB5I,EAAE/Q,OAAO4Z,iDAG1B7I,GACZA,EAAEqI,UACFt1C,KAAK64B,MAAM6c,gBAAgBzI,EAAE/Q,OAAOx4B,+CAGxBupC,GACZA,EAAEqI,UACFt1C,KAAK64B,MAAM8c,gBAAgB1I,EAAE/Q,OAAOx4B,yDAGdupC,GACtBA,EAAEqI,UACFt1C,KAAK64B,MAAM+c,0BAA0B3I,EAAE/Q,OAAOx4B,yCAI9C,OACI1D,KAAK64B,MAAM/2B,YAAchE,EAAU2F,QACnCzD,KAAK64B,MAAMj2B,gBAAgB1B,OAASnD,EAAoB8E,KACvD7C,KAAK64B,MAAMr3B,YAAcxD,EAAUgF,KAChChD,KAAK64B,MAAMr3B,YAAcxD,EAAUy0B,OACnCzyB,KAAK64B,MAAMr3B,YAAcxD,EAAUgE,4CAK3C,OACIhC,KAAK64B,MAAM/2B,YAAchE,EAAU2F,SAClCzD,KAAK64B,MAAMr3B,YAAcxD,EAAUgF,KAChChD,KAAK64B,MAAMr3B,YAAcxD,EAAUy0B,8CAIhCsjB,GACX,OAAQA,EAAMnzC,gBAAgB1B,MAG1B,KAAMnD,EAAoBkI,MAE1B,KAAMlI,EAAoBqgB,iBACtB,MAAO,wBAGf,OAAQ23B,EAAMpyC,WACV,KAAM9F,EAAU+F,MACZ,MAAO,kBACX,QACI,MAAO,+DAIFmyC,GACb,OAAIA,EAAMnzC,gBAAgB1B,OAASnD,EAAoB8E,GAS5C,GARHkzC,EAAMpyC,YAAc9F,EAAU+F,MAE1Bk1B,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,QACjBoc,EAAMnzC,gBAAgBjD,cAHnC,2CAaJ,IAAMk8B,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mIAGAA,EAAA,+FAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAIJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,+CASpB,OACIA,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,UAKR/C,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO1D,KAAK64B,MAAMxyB,mBAAmB/F,KAAKoD,OAAS,GACtDg4B,UAAW17B,KAAKk2C,eAAel2C,KAAK64B,MAAMxyB,mBAAmB/F,MAC7DotC,YAdA,mCAeAE,WAAS,EACTD,SAAU3tC,KAAKs4C,aAAajc,KAAKr8B,QACpCA,KAAKm2C,iBAAiBn2C,KAAK64B,MAAMxyB,mBAAmB/F,QAG7Dw4B,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,iCACV17B,KAAK64B,MAAMxyB,mBAAmB/F,KAAKoD,OAAS,4CAOnDsyC,EAA2BrI,GACrC,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,mIAGAA,EAAA,+FAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAIJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,+CASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,UAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAOsyC,EAAUtyC,OAAS,GAC7Bg4B,UAAW17B,KAAKk2C,eAAeF,GAC/BtI,YAdA,mCAeAE,WAAS,EACTD,SAAUA,IACb3tC,KAAKm2C,iBAAiBH,6CAQvC,IAAMna,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iKAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,2CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,iDASpB,OACIA,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,QAKR/C,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,gCACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO1D,KAAK64B,MAAMxyB,mBAAmBrB,GAAGtB,OAAS,GACpDg4B,UAAW17B,KAAKk2C,eAAel2C,KAAK64B,MAAMxyB,mBAAmBrB,IAC7D0oC,YAdA,oCAeAC,SAAU3tC,KAAKw4C,WAAWnc,KAAKr8B,QAClCA,KAAKm2C,iBAAiBn2C,KAAK64B,MAAMxyB,mBAAmBrB,MAG7D8zB,EAAA,qBAAK4C,UAAU,yBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,sBAAMiB,MAAO,CAAEJ,MAAO,WAAa35B,KAAKqpC,OAAxC,UACCrpC,KAAK64B,MAAMxyB,mBAAmBrB,GAAGtB,OAAUo1B,EAAA,sBAAMiB,MAAO,CAAEunB,UAAW,WAA1B,+DAOpDlL,EAAyBzI,GACjC,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iKAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAIJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,2CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,iDASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,QAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO0yC,EAAQ1yC,OAAS,GAC3Bg4B,UAAW17B,KAAKk2C,eAAeE,GAC/B1I,YAdA,oCAeAC,SAAUA,IACb3tC,KAAKm2C,iBAAiBC,+CAQ1BC,EAAsC1I,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iSAKAA,EAAA,qPAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,+BAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,+EACwDA,EAAA,yBADxD,kBAEmBA,EAAA,gCAFnB,2BAUpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,cAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO2yC,EAAa3yC,OAAS,GAChCg4B,UAAW17B,KAAKk2C,eAAeG,GAC/B3I,YAfJ,kDAgBIC,SAAU3tC,KAAKs2C,gBAAgBja,KAAKr8B,QACvCA,KAAKm2C,iBAAiBE,IAE3Bvd,EAAA,qBAAK4C,UAAU,oCACV17B,KAAKu2C,kBAAkBF,qDAW5C,OACIvd,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,+DAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB64B,MAAO,CAAEJ,MAAO,wDAKvC6c,GACjB,GAA2B,OAAvBA,EAAa9yC,MAAgB,CAE7B,OACIo1B,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAHI,8DAITuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,YAMlD,GAAI6c,EAAa5zC,gBAAgB1B,OAASnD,EAAoB8E,GAC1D,OACIi2B,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKy2C,uBAMlB,OACI3d,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAHI,0CAITuc,EAAA,mBAAGmD,KAAMua,EAAa9yC,MAAOw4B,OAAO,UAChCpD,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qDAOds1C,EAAsC7I,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iLAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,+BAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,qEAC8CA,EAAA,yBAD9C,kBAEmBA,EAAA,gCAFnB,QAEoCA,EAAA,gCAFpC,2BAUpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,mBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,6BACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAACmd,GAAA,EAAD,CAAOvyC,MAAO8yC,EAAa9yC,OAAS,GAChCg4B,UAAW17B,KAAKk2C,eAAeM,GAC/B9I,YAfJ,uDAgBIC,SAAUA,IACb3tC,KAAKm2C,iBAAiBK,IAE3B1d,EAAA,qBAAK4C,UAAU,oCACV17B,KAAK02C,qBAAqBF,8CAQpC/M,GAQX,OACI3Q,EAAA,cAAC6d,GAAA,EAAD,CAAUC,UAAU,GAChB9d,EAAA,cAAC6d,GAAA,EAASE,MAAV,CAAgBC,OAAO,6BAA6B9qC,IAAI,SAAS+tB,MAT3D,CACVgd,WAAY,cACZC,aAAc,EACdpL,OAAQ,EACR5R,OAAQ,EACRid,SAAU,WAKDxN,mDAMMyN,EAAiCvJ,GACpD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iKAIAA,EAAA,qTAKAA,EAAA,iKAkBAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,kCAQpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,aAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,yBACIA,EAAA,cAACoW,GAAA,EAAD,CACI4G,QAASoB,EAAexzC,MACxBg4B,UAAW17B,KAAKk2C,eAAegB,GAC/BvJ,SAAUA,IACb3tC,KAAKm3C,gBAAgBD,EAAexzC,QAExC1D,KAAKm2C,iBAAiBe,yDAQhBE,EAAwCzJ,GAC/D,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,4GAGAA,EAAA,oLAIAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,2CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,gDASpB,OACIA,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,wBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BAEX5C,EAAA,cAACue,GAAAvqC,EAAD,CAAUpJ,MAAO0zC,EAAuB1zC,OAAS,GAC7Cg4B,UAAW17B,KAAKk2C,eAAekB,GAA0B,6CACzDE,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjC9J,YAhBA,kFAiBAC,SAAUA,IACb3tC,KAAKm2C,iBAAiBiB,mDAOtBK,EAAkC9J,GACnD,IAAM9R,EACF/C,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,yHAGAA,EAAA,gDAC0BA,EAAA,mBAAGmD,KAAK,sDAAsDC,OAAO,UAArE,YAD1B,4EAIApD,EAAA,kJAGAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,oCAGAA,EAAA,gCAKJA,EAAA,wBACIA,EAAA,sCAGAA,EAAA,4CAIJA,EAAA,wBACIA,EAAA,mCAGAA,EAAA,oCACaA,EAAA,mBAAGmD,KAAK,sDAAsDC,OAAO,UAArE,iBAQjC,OACIpD,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAOsf,GAAhB,iBAKR/C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,cAAC4e,GAAA,EAAD,CAAMC,iBAAiB,SAASC,UAAU,GACtC9e,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAI,SAAS9rC,IAAI,UAC3B8sB,EAAA,cAACue,GAAAvqC,EAAD,CAAUpJ,MAAO+zC,EAAiB/zC,OAAS,GACvCg4B,UAAW17B,KAAKk2C,eAAeuB,GAAoB,uCACnDH,SAAU,CAAEC,QAAS,EAAGC,QAAS,IACjC9J,YAjBR,gDAkBQC,SAAUA,IACb3tC,KAAKm2C,iBAAiBsB,IAE3B3e,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAI,UAAU9rC,IAAI,WAC5B8sB,EAAA,qBAAK4C,UAAU,sCACXqc,wBAA0B,CAAEC,OAAQC,UAAOC,MAAMT,EAAiB/zC,OAAS,uDAWvG,OACIo1B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTuS,KAAK,uBACL/hC,IAAI,SACJ6hC,UAAW7tC,KAAK25C,QAAQx5C,KAAKH,MAC7BguC,SAAS,UAJb,qDAWJ,OACIlV,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QACTt6B,KAAK,SACLi7B,QAASn8B,KAAKgoD,SAAS3rB,KAAKr8B,OAFhC,uDASJ,OACI84B,EAAA,qBAAK4C,UAAU,uBACX5C,EAAA,qBAAK4C,UAAU,yBAEf5C,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAKiB,MAAO,CAAEoe,KAAM,YAChBrf,EAAA,4FAQhB,OACIA,EAAA,sBAAM9zB,GAAG,uBAAuB02B,UAAU,iDAAiD+R,SAAUztC,KAAKytC,SAASpR,KAAKr8B,OACnHA,KAAKo4C,qBACNtf,EAAA,qBAAK4C,UAAU,yBACV17B,KAAKq4C,cAAcr4C,KAAK64B,MAAMxyB,mBAAmB/F,KAAMN,KAAKs4C,aAAajc,KAAKr8B,OAC9EA,KAAKu4C,YAAYv4C,KAAK64B,MAAMxyB,mBAAmBrB,GAAIhF,KAAKw4C,WAAWnc,KAAKr8B,OACxEA,KAAKy4C,iBAAiBz4C,KAAK64B,MAAMxyB,mBAAmBpC,QAASjE,KAAKs2C,gBAAgBja,KAAKr8B,OACvFA,KAAK04C,iBAAiB14C,KAAK64B,MAAMxyB,mBAAmB/B,QAAStE,KAAK24C,gBAAgBtc,KAAKr8B,OACvFA,KAAK44C,uBAAuB54C,KAAK64B,MAAMxyB,mBAAmBT,UAAW5F,KAAK64C,kBAAkBxc,KAAKr8B,OACjGA,KAAK84C,2BAA2B94C,KAAK64B,MAAMxyB,mBAAmB1B,kBAAmB3E,KAAK+4C,0BAA0B1c,KAAKr8B,OACrHA,KAAKg5C,qBAAqBh5C,KAAK64B,MAAMxyB,mBAAmBd,YAAavF,KAAKi5C,oBAAoB5c,KAAKr8B,OACpG84B,EAAA,qBAAK4C,UAAU,wBACX5C,EAAA,qBAAK4C,UAAU,0BAEf5C,EAAA,qBAAK4C,UAAU,wBAAwB3B,MAAO,CAAE2V,UAAW,WACvD5W,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,sBAAM4C,UAAU,oBACX17B,KAAKk5C,oBAEVpgB,EAAA,sBAAM4C,UAAU,oBACX17B,KAAKm5C,mEAUtBvzC,GACZ,OAAIA,EAEIkzB,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,4BACsD43B,EAAA,+BADtD,qCAMJA,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAY,IAD3B,6FAOJ,IAAMlB,KAAK64B,MAAMxyB,mBAAmB/F,KAAKoD,QAAS1D,KAAK64B,MAAMxyB,mBAAmBrB,GAAGtB,MAAQ,CAEvF,OACIo1B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,wEAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAW64B,MAAO,CAAEJ,MAAO,WAKlD,IAAMJ,EAAUv5B,KAAKw5B,OAAOx5B,KAAK64B,MAAMxyB,mBAAmB/F,KAAKoD,MAAO,GAAGg2B,cAGnEC,EAFOC,KAAI55B,KAAK64B,MAAMxyB,mBAAmBrB,GAAGtB,OAE/Bm2B,OAAO,EAAG,GAC7B,OACIf,EAAA,qBAAKE,MAHI,GAGSc,OAHT,GAGuBC,MAAO,CAAEC,OAAQ,uCAC7ClB,EAAA,sBAAMmB,EAAE,MAAMC,EAAE,MAAMC,GAAI,EAAGC,WAAW,SAASC,iBAAiB,SAASC,SAAUrB,GAAWsB,KAAM,IAAMZ,EAAOa,WAAW,cAAcjB,+CAOpJ,OACIT,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAFQ,qFAGbuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB64B,MAAO,CAAEJ,MAAO,qDAK1C0c,GACd,OAA2B,OAAvBA,EAAa3yC,MAETo1B,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKo5C,qBAKd/C,EAAazzC,gBAAgB1B,OAASnD,EAAoB8E,GAEtDi2B,EAAA,qBAAK4C,UAAU,8BACV17B,KAAKq5C,oBAMdvgB,EAAA,qBAAK4C,UAAU,8BACX5C,EAAA,qBAAKC,IAAKsd,EAAa3yC,MAAOs1B,MAAO,qCAK1CE,EAAkBC,GACrB,IAAMtV,EAAKqV,EAASE,WAAWD,GAC/B,GAAItV,GAAM,OAAUA,GAAM,OAAUqV,EAAS1pB,OAAS2pB,EAAW,EAAG,CAChE,IAAME,EAAKH,EAASE,WAAWD,EAAW,GAC1C,GAAIE,EAAK,OAAUA,GAAM,MACrB,OAAOH,EAASI,UAAUH,EAAU,GAG5C,OAAOD,EAASI,UAAUH,EAAU,yCAG1B,IAAAmgB,EACwCt5C,KAAK64B,MACjD4T,EAAQ,SAFJ6M,EACFx3C,UAC6B,YAF3Bw3C,EACS12C,gBACkD,WAF3D02C,EAC0B93C,UAEpC,OACIs3B,EAAA,sBAAMiB,MAAO,CAAEsU,YAAa,SAAW5B,+CAK3C,OACI3T,EAAA,sBAAM4C,UAAU,aACZ5C,EAAA,sBAAM4C,UAAU,oBACZ5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,WACTt6B,KAAK,SACLi7B,QAASn8B,KAAKgoD,SAAS3rB,KAAKr8B,OAFhC,UAMJ84B,EAAA,sBAAM4C,UAAU,oBACZ5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OACTuS,KAAK,uBACL/hC,IAAI,SACJ6hC,UAAW7tC,KAAK25C,QAAQx5C,KAAKH,MAC7BguC,SAAS,UAJb,2CAaZ,OAAIhuC,KAAKgB,MAAM0jD,eACJ5rB,EAAA,cAACkhB,GAAA,EAAD,CAAU3pC,MAAI,EAAC05B,GAAI,qBAAuB/pC,KAAK64B,MAAMpyB,aAAazB,KAGzE8zB,EAAA,qBAAK4C,UAAU,2CACX5C,EAAA,qBAAK4C,UAAU,gDACV17B,KAAKi6C,wBAx/BKrf,aC2ChBsL,mBAlDR,SAAyBllC,GAC5B,IAAKA,EAAMI,MAAMmF,YAAYjF,UACzB,MAAM,IAAIf,MAAM,yBAFuC,IAAAiwD,EAUvDxvD,EALAI,MACImF,YACIjF,UAKZ,MAAO,CACHQ,UAbuD0uD,EAOlC1uD,UAOrBN,UAduDgvD,EAOvBhvD,UAQhCoB,gBAfuD4tD,EAOZ5tD,gBAS3CyD,mBAhBuDmqD,EAOKnqD,mBAU5DI,aAjBuD+pD,EAOyB/pD,eAcjF,SAA4B89B,GAC/B,MAAO,CACHwsB,cAAe,WACXxsB,EAASgsB,OAEbhb,aAAc,SAACj1C,GACXikC,EAASmP,GAAWpzC,KAExBo1C,gBAAiB,SAACzxC,GACdsgC,EF4hBL,SAAuBtgC,GAC1B,OAAO,SAACsgC,EAAmDC,GACnDgN,IACAA,GAAoB0I,SAF8D,IAAAC,EAIpDv8B,GAAWm1B,mBAAmB9uC,GAJsBm2C,EAAAt6C,OAAAsU,GAAA,EAAAtU,CAAAq6C,EAAA,GAI/EE,EAJ+ED,EAAA,GAI7Dh4C,EAJ6Dg4C,EAAA,GAMtF,GAAIh4C,EAAMlB,OAASnD,EAAoB8E,GAGnC,OAFA0hC,EAASngC,GAAmBi2C,EAAkBj4C,SAC9CmiC,EAASmsB,MAQb,GAJAnsB,EAASrgC,GAAqBm2C,IAE9B9V,EAASmsB,MAEgB,OAArBrW,GAA6BA,EAAiB7qC,OAAS,EAAG,KAAAygC,EAItDzL,IAFyB34B,EAF6BokC,EAEtDte,KAAQE,cAAiBhmB,MAC0By2B,EAHG2N,EAGtDzd,IAAOE,OAAUoS,SAAYa,cAAiB75B,KAGlD0lC,GAAsB,IAAIuC,GAA4B,CAClD7B,MAAO,IACPpmC,IAAKuuC,EACLhb,QAAS,IACTkF,WAAUjC,mBAAkBz2B,WAGZyuC,UE1jBXC,CAAct2C,KAK3BuxC,oBAAqB,SAACjwC,GAClBg/B,EAASgQ,GAAkBhvC,KAE/BswC,kBAAmB,SAACjwC,GAChB2+B,EFquBL,SAAyB3+B,GAC5B,OAAO,SAAC2+B,GAEJA,EAAS,CACLrjC,KAAM7B,EAAW+I,mCACjBxC,UAAWA,IAEf2+B,EAASmsB,OE5uBI9V,CAAgBh1C,KAE7B+vC,gBAAiB,SAACrxC,GACdigC,EFipBL,SAAuBjgC,GAC1B,OAAO,SAACigC,EAAmDC,GACnDsP,IACAA,GAAoBoG,SAF8D,IAAAW,EAKpDj9B,GAAWo1B,mBAAmB1uC,GALsBw2C,EAAAh7C,OAAAsU,GAAA,EAAAtU,CAAA+6C,EAAA,GAK/EE,EAL+ED,EAAA,GAK7D14C,EAL6D04C,EAAA,GAOtF,GAAI14C,EAAMlB,OAASnD,EAAoB8E,GAOnC,OANA0hC,EAAS,CACLrjC,KAAM7B,EAAW2I,+BACjB1D,QAASy2C,EACT34C,MAAOA,SAEXmiC,EAASmsB,MAUb,GAPAnsB,EAAS,CACLrjC,KAAM7B,EAAWyI,iCACjBxD,QAASy2C,IAGbxW,EAASmsB,MAEgB,OAArB3V,GAA6BA,EAAiBvrC,OAAS,EAAG,KAAA21B,EAItDX,IAFyB34B,EAF6Bs5B,EAEtDxT,KAAQE,cAAiBhmB,MAC0By2B,EAHG6C,EAGtD3S,IAAOE,OAAUoS,SAAYa,cAAiB75B,KAGlDgoC,GAAsB,IAAII,GAA4B,CAClDhC,MAAO,IACPpmC,IAAKivC,EACL1b,QAAS,IACTkF,WAAUjC,mBAAkBz2B,WAGZyuC,UEtrBXU,CAAc12C,KAE3BsxC,0BAA2B,SAACjxC,GACxB4/B,EFwrBL,SAAiC5/B,GACpC,OAAO,SAAC4/B,GAAsD,IAAA0W,EACdr9B,GAAWq1B,6BAA6BtuC,GAD1Bu2C,EAAAp7C,OAAAsU,GAAA,EAAAtU,CAAAm7C,EAAA,GACnDE,EADmDD,EAAA,GACvB94C,EADuB84C,EAAA,GAGtD94C,EAAMlB,OAASnD,EAAoB8E,GACnC0hC,EAAS,CACLrjC,KAAM7B,EAAW8I,yCACjBxD,kBAAmBw2C,EACnB/4C,MAAOA,IAGXmiC,EAAS,CACLrjC,KAAM7B,EAAW6I,2CACjBvD,kBAAmBw2C,IAG3B5W,EAASmsB,OExsBItV,CAAwBz2C,OAK9BuhC,CAA8F2qB,ICpEvG/qB,eACF,SAAAA,EAAYjN,GAAqB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACvB64B,iFAIN,IAAMl5B,EACFm5B,EAAA,6CAEK,IACDA,EAAA,cAACoY,GAAA,EAAD,OAGR,OACIpY,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO,CACxCf,MAAO,OACPmY,QAAS,OACTvF,OAAQ,qDAMhB,GAAK5rC,KAAK64B,MAAMyC,KAAKl5B,MAGrB,OACI02B,EAAA,mCACY94B,KAAK64B,MAAMyC,KAAKl5B,MAAMzC,0CAMtC,OAAQK,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAE3B,KAAK7E,EAAsB+D,QACvB,OAAOxC,KAAKoxC,gBAChB,KAAK3yC,EAAsBwH,MACvB,OAAOjG,KAAKqxC,cAChB,KAAK5yC,EAAsBkE,QACvB,OACIm2B,EAAA,cAACk4B,GAAD,CAAWhJ,SAAUhoD,KAAK64B,MAAMmvB,wDAM5C,OAAQhoD,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK9D,EAAsB6E,KAEvBtD,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,gEAKrCnV,KAAK64B,MAAM0Y,kBAzDE3W,aAmGNsL,mBAjBf,SAAyBllC,EAAmB63B,GACxC,MAAO,CACHyC,KAAMt6B,EAAMI,MAAMmF,cAI1B,SAA4Bg+B,GACxB,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,EAASlX,GAAalY,KAE1Bo8B,SAAU,WACNhN,EH+FD,CACHrjC,KAAM7B,EAAWsH,qBG3FVu/B,CAA8FJ,IClGxFmrB,8BAEjB,SAAAA,EAAYp4B,GAAwB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAixD,IAChCxxD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmxD,GAAA9wD,KAAAH,KAAM64B,KAFViJ,SACoC,EAEhCriC,EAAKqiC,IAAMlH,cAFqBn7B,2EAgBhC,IAAKO,KAAK8hC,IAAIiL,QACV,OAAO,EAGX,IAAMxqB,EAAIviB,KAAK64B,MAAMq4B,oBACrB,IAAK3uC,EACD,OAAO,EAGX,IAAM4uC,EAASnxD,KAAK64B,MAAMs4B,OAASnxD,KAAK64B,MAAMu4B,qBAExCC,EAAsB12C,KAAK22C,IAAI/uC,EAAEgvC,UAAYJ,EAAQ,GACrDK,EAAyBjvC,EAAEgvC,UAAYhvC,EAAEkvC,aAAeN,EAExDO,EAAI1xD,KAAK8hC,IAAIiL,QAAQ4kB,aACrBnvC,EAAIxiB,KAAK8hC,IAAIiL,QAAQ6kB,UAS3B,OAPqBpvC,GAAK6uC,GACF7uC,GAAKgvC,GAELhvC,EAAIkvC,GAAKL,GACN7uC,EAAIkvC,GAAKF,mCAQpC,OADaxxD,KAAK6xD,YAGV/4B,EAAA,qBAAK4C,UAAU,sBAAsBoG,IAAK9hC,KAAK8hC,KAC1C9hC,KAAK64B,MAAMi5B,UAKhBh5B,EAAA,qBAAK4C,UAAU,wBAAwB3B,MAAO,CAAED,OAAQ95B,KAAK64B,MAAMu4B,sBAAwBtvB,IAAK9hC,KAAK8hC,KAChG9hC,KAAK64B,MAAMk5B,2BAxDQn3B,cCJlBo3B,WAElB,SAAAA,IAAelyD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgyD,GAAAhyD,KADfiyD,iBACc,EACVjyD,KAAKiyD,YAAc,IAkBdC,GAAb,SAAAp3B,GAOI,SAAAo3B,EAAY/gD,GAAoC,IAAA1R,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAkyD,IAC5CzyD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoyD,GAAA/xD,KAAAH,KAAMmR,KANVghD,yBAKgD,EAAA1yD,EAJhD2yD,eAIgD,EAAA3yD,EAHhD4yD,mBAGgD,EAAA5yD,EAFhD6yD,qBAEgD,EAAA7yD,EAkChD8yD,gBAAkB,WACd,IAAMC,EAAoB/yD,EAAKgzD,sBAC/B,GAAKD,EAAL,CAIA,IAAME,EAAiBjzD,EAAKuB,MAAMkwD,oBAC7BwB,GAGGF,EAAkBb,eAAiBe,EAAef,cAClDa,EAAkBjB,YAAcmB,EAAenB,WAC/CiB,EAAkBf,eAAiBiB,EAAejB,cAJtDhyD,EAAK87B,SAAS,CAAE21B,oBAAqBsB,MAvCzC/yD,EAAKuB,MAAQ,CACTkwD,oBAAqB,MAGzBzxD,EAAK0yD,oBAAsBv3B,cAC3Bn7B,EAAK2yD,UAAY,GACjB3yD,EAAK4yD,cAAgB,KACrB5yD,EAAK6yD,gBAAkB,IAVqB7yD,EAPpD,OAAAK,OAAAe,EAAA,EAAAf,CAAAoyD,EAAAp3B,GAAAh7B,OAAAiM,EAAA,EAAAjM,CAAAoyD,EAAA,EAAAlmD,IAAA,sBAAAtI,MAAA,WAqBQ,OAAyC,OAArC1D,KAAKmyD,oBAAoBplB,QAClB,KAEC,CACR4kB,aAAc3xD,KAAKmyD,oBAAoBplB,QAAQ4kB,aAC/CJ,UAAWvxD,KAAKmyD,oBAAoBplB,QAAQwkB,UAC5CE,aAAczxD,KAAKmyD,oBAAoBplB,QAAQ0kB,gBA3B3D,CAAAzlD,IAAA,UAAAtI,MAAA,SAgCYivD,GACA3yD,KAAKqyD,eACL30B,OAAO2U,aAAaryC,KAAKqyD,eAE7BryD,KAAKqyD,cAAgB30B,OAAOC,WAAW,WACnCg1B,KACD3yD,KAAKsyD,mBAtChB,CAAAtmD,IAAA,oBAAAtI,MAAA,WA2DwB,IAAAiI,EAAA3L,KAChB,GAAyC,OAArCA,KAAKmyD,oBAAoBplB,QACzB,OAAO,EAGX,IAAM6lB,EAAgB,WAClBjnD,EAAKknD,QAAQ,WAAQlnD,EAAK4mD,qBAG9BvyD,KAAKmyD,oBAAoBplB,QAAQ+lB,iBAAiB,SAAUF,GAC5D5yD,KAAKoyD,UAAU/hD,KAAK,CAChB6rB,OAAQl8B,KAAKmyD,oBAAoBplB,QACjC7rC,KAAM,SACN6xD,SAAUH,IAGd,IAAMI,EAAgB,WAClBrnD,EAAKknD,QAAQ,WAAQlnD,EAAK4mD,qBAE9B70B,OAAOo1B,iBAAiB,SAAUE,GAClChzD,KAAKoyD,UAAU/hD,KAAK,CAChB6rB,OAAQwB,OACRx8B,KAAM,SACN6xD,SAAUC,IAGdhzD,KAAKuyD,oBArFb,CAAAvmD,IAAA,uBAAAtI,MAAA,WAyFQ1D,KAAKoyD,UAAUz7C,QAAQ,SAACo8C,GACpBA,EAAS72B,OAAO+2B,oBAAoBF,EAAS7xD,KAAM6xD,EAASA,cA1FxE,CAAA/mD,IAAA,SAAAtI,MAAA,WAiGQ,IAHK,IAAAmU,EAAA7X,KACDkzD,EAA0B,GAErBC,EAAI,EAAGA,EAAInzD,KAAK64B,MAAMu6B,WAAWn6B,OAAQk6B,GAAK,EACnDD,EAAI7iD,KACAyoB,EAAA,cAACu6B,GAAD,CAAYxnB,MAAOsnB,EAAGnnD,IAAK2F,OAAOwhD,GAC9BjC,oBAAqBlxD,KAAKgB,MAAMkwD,oBAChCC,OAAQ,EAAGC,qBAAsB,GAAIW,iBAAkB,WAAQ,OAAOl6C,EAAKghB,MAAMu6B,WAAWE,gBAC3FtzD,KAAK64B,MAAMu6B,WAAW1J,OAAOyJ,KAK1C,OACIr6B,EAAA,qBAAK4C,UAAU,wBAAwBoG,IAAK9hC,KAAKmyD,qBAC5Ce,OA7GjBhB,EAAA,CAA2Ct3B,aCTrC24B,eAGF,SAAAA,EAAYC,EAA6CC,GAAkB,IAAAh0D,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAuzD,IACvE9zD,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyzD,GAAApzD,KAAAH,QAHJwzD,iBAE2E,EAAA/zD,EAD3Eg0D,cAC2E,EAGvEh0D,EAAK+zD,YAAcA,EACnB/zD,EAAKg0D,SAAWA,EAJuDh0D,sEAQvE,OAAOO,KAAKyzD,wCAGT5nB,GACH,OAAO7rC,KAAKwzD,YAAY3nB,yCAIxB,OACI/S,EAAA,qBAAK4C,UAAU,uCACX5C,EAAA,qBAAK4C,UAAU,0CAA0C3B,MAAO,CAAEf,MAAO,SAAzE,QACAF,EAAA,qBAAK4C,UAAU,0CAA0C3B,MAAO,CAAEf,MAAO,QAAzE,QACAF,EAAA,qBAAK4C,UAAU,0CAA0C3B,MAAO,CAAEf,MAAO,SAAzE,gBAvBgBg5B,IAofjB0B,GAvdf,SAAA54B,GACI,SAAA44B,EAAY76B,GAAc,IAAAltB,EAAA,OAAA7L,OAAAC,EAAA,EAAAD,CAAAE,KAAA0zD,IACtB/nD,EAAA7L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4zD,GAAAvzD,KAAAH,KAAM64B,KAED73B,MAAQ,CACTkwD,oBAAqB,MAJHvlD,EAD9B,OAAA7L,OAAAe,EAAA,EAAAf,CAAA4zD,EAAA54B,GAAAh7B,OAAAiM,EAAA,EAAAjM,CAAA4zD,EAAA,EAAA1nD,IAAA,WAAAtI,MAAA,WAWQ1D,KAAK64B,MAAMmvB,aAXnB,CAAAh8C,IAAA,oBAAAtI,MAAA,SAcsBsgB,GACdhkB,KAAK64B,MAAM86B,kBAAkB3vC,KAfrC,CAAAhY,IAAA,gBAAAtI,MAAA,WAmB6C,OAAjC1D,KAAK64B,MAAM5C,kBAIfj2B,KAAK64B,MAAM+6B,cAAc5zD,KAAK64B,MAAMpyB,aAAazB,GAAIhF,KAAK64B,MAAM5C,kBAAkBjS,UAAUlS,aAHxFpQ,QAAQC,KAAK,wDApBzB,CAAAqK,IAAA,iBAAAtI,MAAA,WA2BQ,QAAI1D,KAAK64B,MAAM5C,oBA3BvB,CAAAjqB,IAAA,gBAAAtI,MAAA,SAiCkBpD,GAEV,OAAIA,EAAKkP,OAAS,GACPlP,EAGPw4B,EAAA,0BACKx4B,EAAKua,MAAM,EAAG,IADnB,YAvCZ,CAAA7O,IAAA,mBAAAtI,MAAA,SA8CqBsgB,GACb,OAAQA,EAAU+e,QACd,KAAKyC,GAA+BtmB,KAChC,OACI4Z,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,QADf,SAIR,KAAKskC,GAA+BrmB,KAChC,OACI2Z,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,SAIR,KAAKskC,GAA+B/7B,MAChC,OACIqvB,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,UAIR,KAAKskC,GAA+BzmB,MAChC,OACI+Z,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UADf,UAIR,QACI,OACI43B,EAAA,sCA1EpB,CAAA9sB,IAAA,yBAAAtI,MAAA,SAiF2BsgB,GACnB,OAAIA,EAAU5D,SAEN0Y,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WADf,WAMA43B,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,cA1FhB,CAAA8K,IAAA,kBAAAtI,MAAA,SAiGoBsgB,GACZ,OACI8U,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,qBAAK4C,UAAU,0BACV1X,EAAUzH,OAGfuc,EAAA,qBAAK4C,UAAU,qCACV17B,KAAKijD,uBAAuBj/B,IAEjC8U,EAAA,qBAAK4C,UAAU,+BACX5C,EAAA,sBAAM4C,UAAU,eACZ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAEd,IACD43B,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMyY,EAAUkf,YAAasF,cAAc,oBAhHhF,CAAAx8B,IAAA,qBAAAtI,MAAA,SAsHuB4yB,GAAqC,IAahDu9B,EAbgDh8C,EAAA7X,KAC5CsN,EAAsBgpB,EAAtBhpB,OAAQ0W,EAAcsS,EAAdtS,UAQZu9B,EAAa,CAAC,kCAKlB,UAXIvhD,KAAK64B,MAAM5C,mBACXjS,EAAUlS,cAAgB9R,KAAK64B,MAAM5C,kBAAkBjS,UAAUlS,cAOjEyvC,EAAWlxC,KAAK,6BAGZ/C,GACJ,KAAK1O,EAAe23B,WAChBgrB,EAAWlxC,KAAK,mCAChBwjD,EACI/6B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,+DACXuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,QAAQ64B,MAAO,CAAEJ,MAAO,YAG3C,MACJ,KAAK/6B,EAAe43B,UAChB+qB,EAAWlxC,KAAK,mCAChBwjD,EACI/6B,EAAA,cAACiD,GAAA,EAAD,CAASxf,MAAM,gFACXuc,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU64B,MAAO,CAAEJ,MAAO,aAG7C,MACJ,QACI4nB,EAAWlxC,KAAK,sCAGxB,OACIyoB,EAAA,qBACI4C,UAAW6lB,EAAWzzC,KAAK,KAC3BquB,QAAS,WAAQtkB,EAAK87C,kBAAkBxzD,KAAK0X,EAAMye,KAEnDwC,EAAA,qBAAK4C,UAAU,kCACVm4B,GAEL/6B,EAAA,qBAAK4C,UAAU,8BAEV17B,KAAKksD,gBAAgB51B,EAAatS,eAnKvD,CAAAhY,IAAA,mBAAAtI,MAAA,WAyKuB,IAAAg8B,EAAA1/B,KACf,GAAqC,IAAjCA,KAAK64B,MAAM/Y,WAAWtQ,OACtB,OACIspB,EAAA,qBAAK4C,UAAU,WAAf,kCAKR,IAGMo4B,EAAoB,IAAIP,GAHV,SAAC1nB,GACjB,OAAOnM,EAAKq0B,mBAAmBr0B,EAAK7G,MAAM/Y,WAAW+rB,KAEI7rC,KAAK64B,MAAM/Y,WAAWtQ,QACnF,OACIspB,EAAA,cAACk7B,GAAD,CAAuBZ,WAAYU,MAtL/C,CAAA9nD,IAAA,iBAAAtI,MAAA,eAAAsI,IAAA,mBAAAtI,MAAA,WA+LQ,OAAI1D,KAAK64B,MAAMjI,UACHkI,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAEf43B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,aAlM3B,CAAA8K,IAAA,kBAAAtI,MAAA,WAsMQ,OACIo1B,EAAA,sBAAM9zB,GAAG,aACL02B,UAAU,6BACV+R,SAAUztC,KAAKi0D,eAAe53B,KAAKr8B,OACnC84B,EAAA,uBACI4U,YAAY,yBAEZE,WAAS,IAEb9U,EAAA,cAAC0S,GAAA,EAAD,CACI9P,UAAU,0BACVqS,KAAK,aACL/hC,IAAI,SACJgiC,SAAS,UACRhuC,KAAKiuC,uBApN1B,CAAAjiC,IAAA,oBAAAtI,MAAA,WA2NQ,OACIo1B,EAAA,mCAEK,IAEGoO,KAAKgtB,aAAa,QAAS,CACvBn6B,MAAO,UACPo6B,aAAa,IACd7sB,OAAOtnC,KAAK64B,MAAM/Y,WAAWtQ,QAEnC,IATL,gBA5NZ,CAAAxD,IAAA,iBAAAtI,MAAA,SA2OmBA,GACX,OAAQA,GACJ,IAAK,QACD1D,KAAK64B,MAAMu7B,SAAS5uB,GAAoBpC,OACxC,MACJ,IAAK,UACDpjC,KAAK64B,MAAMu7B,SAAS5uB,GAAoBnC,eAjPxD,CAAAr3B,IAAA,wBAAAtI,MAAA,eAAAsI,IAAA,iBAAAtI,MAAA,eAAAsI,IAAA,sBAAAtI,MAAA,WA6PQ,OACIo1B,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,sBAAM4C,UAAU,eAAhB,WACA5C,EAAA,cAACwV,GAAA,EAAD,CAAQX,SAAU3tC,KAAKuuC,eAAelS,KAAKr8B,MACvCqf,aAAcrf,KAAK64B,MAAMzuB,OACzB2vB,MAAO,CAAEf,MAAO,OAChBwV,0BAA0B,GAC1B1V,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,QAAQsI,IAAI,SAAjC,SACA8sB,EAAA,cAACwV,GAAA,EAAOG,OAAR,CAAe/qC,MAAM,UAAUsI,IAAI,WAAnC,kBArQpB,CAAAA,IAAA,0BAAAtI,MAAA,WA4QQ,OACIo1B,EAAA,qBAAK4C,UAAU,6DACX5C,EAAA,qBAAKiB,MAAO,CAAEkS,QAAS,OAAQC,cAAe,QAI1CpT,EAAA,qBAAKiB,MAAO,CAAEoe,KAAM,YACfn4C,KAAKq0D,wBAGdv7B,EAAA,qBAAK4C,UAAU,gCACV17B,KAAKs0D,qBAEVx7B,EAAA,qBAAK4C,UAAU,sDACX5C,EAAA,qBAAK4C,UAAU,2DACV17B,KAAKu0D,wBA3R9B,CAAAvoD,IAAA,gCAAAtI,MAAA,WA+SQ,IAAI8wD,EAZJ,GAAKx0D,KAAK64B,MAAM5C,kBAGhB,OAAIj2B,KAAK64B,MAAM5C,kBAAkB3oB,SAAW1O,EAAe23B,WAEnDuC,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAAQ,wDAExBK,KAAK64B,MAAM5C,kBAAkB3oB,SAAW1O,EAAe43B,UAE1DsC,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UAAUvB,QAAQ,2EAMlC60D,EAFAx0D,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoCjrB,OACjEzJ,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoC3V,MACnD,yCAEA,4DAGd+Z,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACLi7B,QAASn8B,KAAK4zD,cAAcv3B,KAAKr8B,MACjC6tC,UAAW7tC,KAAKy0D,eAAet0D,KAAKH,OACtCw0D,MA3Td,CAAAxoD,IAAA,0BAAAtI,MAAA,WAgUQ,GAAI1D,KAAK64B,MAAM5C,kBACX,OACI6C,EAAA,qBAAK4C,UAAU,sCACX5C,EAAA,qBAAK4C,UAAU,0BACV17B,KAAK64B,MAAM5C,kBAAkBjS,UAAUzH,OAE5Cuc,EAAA,yBACIA,EAAA,sBAAM4C,UAAU,eACZ5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAEd,IACD43B,EAAA,cAAC+R,GAAD,CAAiBt/B,KAAMvL,KAAK64B,MAAM5C,kBAAkBjS,UAAUkf,YAAasF,cAAc,kBAKrG,GAAIxoC,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoC7qB,OAAQ,CACzE,IAAMlK,EACFm5B,EAAA,0IAKJ,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,IAGhC,IAAMA,EACFm5B,EAAA,6HAIJ,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,MAjWhD,CAAAqM,IAAA,oBAAAtI,MAAA,WAwWQ,OACIo1B,EAAA,qBAAK4C,UAAU,aACX5C,EAAA,qBAAK4C,UAAU,oBACX5C,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,WACTt6B,KAAK,SACLi7B,QAASn8B,KAAKgoD,SAAS3rB,KAAKr8B,OAFhC,YA3WpB,CAAAgM,IAAA,cAAAtI,MAAA,WAsXQ,GAAI1D,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoC7qB,OAAQ,CACzE,IAAM6qD,EACF57B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,0IAIAA,EAAA,4KAIAA,EAAA,2FAGAA,EAAA,8HAKR,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UACRvB,QAAS+0D,EACT36B,MAAO,CAAE4mB,aAAc,UAG/B,IAAM+T,EACF57B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,gJAIAA,EAAA,2FAGAA,EAAA,8HAMR,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UACRvB,QAAS+0D,EACT36B,MAAO,CAAE4mB,aAAc,YAja3C,CAAA30C,IAAA,sBAAAtI,MAAA,WAuaQ,GAAI1D,KAAK64B,MAAM5C,mBAAqBj2B,KAAK64B,MAAM5C,kBAAkB3oB,SAAW1O,EAAe0E,MACnFtD,KAAK64B,MAAM7X,SAAS9f,OAASwzB,GAAoC7qB,OAAQ,CACzE,IAAM6qD,EACF57B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,wKAIAA,EAAA,4HAKR,OACIA,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,UACRvB,QAAS+0D,EACT36B,MAAO,CAAE4mB,aAAc,OAAQpR,UAAW,aAvblE,CAAAvjC,IAAA,SAAAtI,MAAA,WA8bQ,OACIo1B,EAAA,qBAAK4C,UAAU,2CACX5C,EAAA,cAAC4xB,GAAD,CAAU/K,QAAS3/C,KAAK2qD,sBACxB7xB,EAAA,qBAAK4C,UAAU,gDACX5C,EAAA,qBAAK4C,UAAU,8DACX5C,EAAA,kFACC94B,KAAK20D,2BAEV77B,EAAA,qBAAK4C,UAAU,yCACX5C,EAAA,8CAEC94B,KAAK40D,0BACL50D,KAAK60D,sBACN/7B,EAAA,qBAAK4C,UAAU,+CACV17B,KAAK80D,mCAIlBh8B,EAAA,qBAAK4C,UAAU,iCAhd/Bg4B,EAAA,CAAyC94B,aCmFlC,SAASm6B,GAAgB/wC,GAC5B,OAAO,SAACugB,EAAmDC,GACvDD,EArBG,CACHrjC,KAAM7B,EAAWq3B,+CAmBqE,IAAAuZ,EAK9DzL,IAL8D0L,EAAAD,EAIlFte,KAAQE,cAJ0Eqe,EAIzDrkC,MAJyDqkC,EAIlD3mC,SAJkD0mC,EAKlFzd,IAAOE,OAGX6R,EAvBD,SAAgCvgB,GACnC,MAAO,CACH9iB,KAAM7B,EAAWu3B,+CACjB5S,UAAWA,GAoBF6S,CAAuB7S,KAwGxC,SAASolC,GAAWpoD,GAAoD,IAG7CM,EAEnBN,EAHAI,MACIyH,YAAevH,UAGvB,GAAkB,OAAdA,EACA,MAAM,IAAIf,MAAM,8CAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,8CAVgD,IAY5DouB,EAAyBrtB,EAAUorB,SAAnCiC,qBACR,GAA6B,OAAzBA,EACA,MAAM,IAAIpuB,MAAM,8CAEpB,OAAOouB,ECvMIuX,mBAxCf,SAAyBllC,EAAyB63B,GAC9C,IAAMv3B,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAASqlB,EAA2BplB,OAC9C,MAAM,IAAIxI,MAAM,wBAEpB,GAA0D,OAAtDe,EAAUorB,SAASiC,qBAAqBrtB,UACxC,MAAM,IAAIf,MAAM,iCAGpB,IAAMivD,EAA0CluD,EAAUorB,SAASiC,qBAAqBrtB,UAMxF,MAAO,CACHmF,aAHA+oD,EADA/oD,aAIcua,SAHdwuC,EADcxuC,SAIUlB,WAHxB0vC,EADwB1vC,WAIYmW,kBAHpCu5B,EADoCv5B,kBAKpCrF,WAAW,EACXxmB,OAAQ,QACRJ,OAAQ,KAIhB,SAA4Bu6B,GACxB,MAAO,CACHqvB,cAAe,SAAC/jD,EAAiBiC,GAC7ByyB,EDsIL,SAAqB10B,EAAiBiC,GACzC,sBAAAa,EAAA7S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAW,EAAAC,EAAAv5B,EAAAtC,EAAAmpB,EAAA0d,EAAA4kB,EAAA,OAAAnoD,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cACHm3B,EArBG,CACHrjC,KAAM7B,EAAW+2B,mCAmBd+O,EAKqBX,IALrBY,EAAAD,EAICxT,KAAQE,cAAiBhmB,EAJ1Bu5B,EAI0Bv5B,MAAOtC,EAJjC67B,EAIiC77B,SACzBmpB,EALRyS,EAKC3S,IAAOE,OAEL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAVpD2C,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,EAcuBgjC,EAAU6kB,6BAA6BplD,EAASiC,GAdvE,OAcO0C,EAdP/F,EAAApB,KAeCk3B,GA9BuB/vB,EA8BKA,EA7B7B,CACHtT,KAAM7B,EAAWg3B,mCACjB7hB,QAASA,KA4BL+vB,EAAS6a,GAAsBvvC,IAhBhCpB,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAC,GAAAD,EAAA,SAkBC81B,GA1BqBniC,EA0BK8pB,GAAU,CAChCxsB,KAAM+O,EAAAC,GAAGpO,KACTX,QAAS8O,EAAAC,GAAG/O,UA3BjB,CACHuB,KAAM7B,EAAW61D,iCACjB9yD,MAAOA,KAKJ,yBAAAqM,EAAAjB,OARJ,IAA0BpL,EAPEoS,GAexBjG,EAAA,kBAAP,gBAAAS,EAAAsB,GAAA,OAAAqC,EAAAlF,MAAAzN,KAAA0N,YAAA,GCvIiB2f,CAAoBxd,EAASiC,KAE1C6hD,kBAAmB,SAAC3vC,GAChBugB,EAASlX,GAAwBrJ,KAErCowC,SAAU,SAAChqD,GDgNZ,IAAc8Y,EC/MTqhB,GD+MSrhB,EC/Ma9Y,EDgN9B,eAAAwI,EAAA9S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAxjC,EAAAs6B,EAAA+X,EAAAxnC,EAAAtC,EAAAmpB,EAAA2S,EAAAlf,EAAA,OAAAtZ,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,OACHm3B,EAAS,CACLrjC,KAAM7B,EAAW81D,mCAGfn0D,EAAQwjC,IALXz1B,EAAA5B,KAAA,EASCmuB,EAAO8tB,GAAWpoD,GATnB+N,EAAA3B,KAAA,uBAAA2B,EAAA5B,KAAA,EAAA4B,EAAAL,GAAAK,EAAA,SAWCw1B,EAAS,CACLrjC,KAAM7B,EAAW+1D,iCACjBhzD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAASoP,EAAAL,GAAG/O,YAfrBoP,EAAAxB,OAAA,qBAqBoB,OAAnB+tB,EAAKh6B,UArBN,CAAAyN,EAAA3B,KAAA,gBAsBCm3B,EAAS,CACLrjC,KAAM7B,EAAW+1D,iCACjBhzD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS,yBA1BlBoP,EAAAxB,OAAA,kBAAA8lC,EAmCCryC,EAFA2wB,KAAQE,cAAiBhmB,EAjC1BwnC,EAiC0BxnC,MAAOtC,EAjCjC8pC,EAiCiC9pC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAGL2S,EAAkB,IAAIG,GAA8B,CACtD35B,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCw2B,iBAAkB5P,EAAOoS,SAASa,cAAc75B,IAChDg4B,oBAAqBpR,EAAOoS,SAASW,UAAU35B,IAC/CmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGvD,IACUqa,EAASkf,EAAgBgwB,2BAA2B/5B,EAAKh6B,UAAUwe,WAAYoD,GACrFqhB,EAAS,CACLrjC,KAAM7B,EAAW03B,mCACjBjX,WAAYqG,IAElB,MAAO3H,GACL+lB,EAAS,CACLrjC,KAAM7B,EAAW+1D,iCACjBhzD,MAAO8pB,GAAU,CACbxsB,KAAM,QACNC,QAAS6e,EAAG7e,YAxDrB,yBAAAoP,EAAAvB,SAAAsB,EAAA,iBAAP,gBAAAyB,EAAAK,GAAA,OAAAgC,EAAAnF,MAAAzN,KAAA0N,YAAA,QC3MWw4B,CAAoGmV,ICxD7GvV,eACF,SAAAA,EAAYjN,GAAe,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,GAAAhmC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KACjB64B,iFAIN,IAAMl5B,EACFm5B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,YAAa,IAD5B,8BAIJ,OACI43B,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EACxBo6B,MAAO,CAAEoX,QAAS,OAAQnY,MAAO,OAAQ4S,OAAQ,mBAAoB8D,UAAW,gDAIhFttC,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KAEf,KAAKnE,EAAUqD,QACX,OAAOxC,KAAKoxC,gBAChB,KAAKjyC,EAAU8G,MACX,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAYnlB,GAAU,CAC9BxsB,KAAM,gBACNC,QAAS,qCAGrB,QACI,OACIm5B,EAAA,cAACw8B,GAAD,CAAWtN,SAAUhoD,KAAK64B,MAAMmvB,wDAM5C,OAAQhoD,KAAK64B,MAAMyC,KAAKt6B,OACpB,KAAK7B,EAAUmE,KACXtD,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,gEAKrCnV,KAAK64B,MAAM0Y,kBA1DE3W,aAmHNsL,IC5GV0qB,GAQA2E,GDoGUrvB,eA3Bf,SAAyBllC,EAAmB63B,GAGxC,IACMgwB,EADI7nD,EAAMI,MAAMyH,YACRvH,UACd,GAAY,OAARunD,EACA,MAAM,IAAItoD,MAAM,cAEpB,GAAIsoD,EAAI//C,OAAS9J,EAAqB+J,OAClC,MAAM,IAAIxI,MAAM,oBAEpB,MAAO,CACH+6B,KAAMutB,EAAIn8B,SAASiC,uBAIpB,SAA4B4V,GAC/B,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,EFlEL,SAAcpvB,GACjB,sBAAA3V,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAA0d,EAAA/K,EAAAnD,EAAAzvB,EAAAC,EAAAgM,EAAA82C,EAAAxW,EAAAtnC,EAAA6kC,EAAA,OAAA1vC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHm3B,EArBG,CACHrjC,KAAM7B,EAAW02B,mCAmBd0O,EAKqBD,IALrBE,EAAAD,EAIC9S,KAAQE,cAAiBhmB,EAJ1B64B,EAI0B74B,MAAOtC,EAJjCm7B,EAIiCn7B,SACzBmpB,EALR+R,EAKCjS,IAAOE,OAEL0d,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAEjDu5B,EAAkB,IAAIG,GAA8B,CACtD35B,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCw2B,iBAAkB5P,EAAOoS,SAASa,cAAc75B,IAChDg4B,oBAAqBpR,EAAOoS,SAASW,UAAU35B,IAC/CmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAEjDo2B,EAAgB,IAAIzb,GAA2B,CACjD5a,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,MArB1CoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAyBsDsL,QAAQC,IAAI,CAC7Dy3B,EAAUqlB,gBAAgBtgD,GAC1BkwB,EAAgBqwB,iBAAiBvgD,GACjC+sB,EAAcuZ,qBAAqBtmC,GACnC+sB,EAAcwZ,wBAAwBvmC,KA7B3C,OAAA1C,EAAAvF,EAAAG,KAAAqF,EAAA5S,OAAAsU,GAAA,EAAAtU,CAAA2S,EAAA,GAyBQiM,EAzBRhM,EAAA,GAyBaoN,EAzBbpN,EAAA,GAyByB8B,EAzBzB9B,EAAA,GAyBkCgF,EAzBlChF,EAAA,GAgCOsO,EAAW0T,GAA2BhW,EAAKnV,EAAUiL,EAASkD,GACpE6sB,GAhDgB99B,EAgDKiY,EAhDgCoB,EAgD3BA,EAhDoFkB,EAgDxEA,EA/CvC,CACH9f,KAAM7B,EAAW22B,mCACjBvvB,eAAcqZ,aAAYkB,cAYvB9T,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAmCCxL,QAAQU,MAAM,gBAAd8K,EAAAwB,IACA61B,GA5CcniC,EA4CK8pB,GAAU,CACzBxsB,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,UA7CjB,CACHuB,KAAM7B,EAAW82B,iCACjB/zB,MAAOA,KAKJ,yBAAA8K,EAAAM,OARJ,IAAmBpL,EAPEqE,EAAqCqZ,EAAyDkB,GAe/GhU,EAAA,kBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,GEiEiB2f,CAAalY,KAE1Bo8B,SAAU,WACNhN,EFuGD,CACHrjC,KAAM7B,EAAWy3B,kCEnGVoP,CAA8FJ,IE7GxF6vB,8BACjB,SAAAA,EAAY98B,GAAsB,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAA21D,GAAA71D,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA61D,GAAAx1D,KAAAH,KACxB64B,+EAMN74B,KAAK64B,MAAM+8B,0DAIX,IAAM50C,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMg9B,oBAAoB70C,EAAShQ,wDAIxC,GAAKhR,KAAK64B,MAAMv3B,UAAUmF,aAA1B,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMi9B,mBAAmB90C,EAAShQ,yDAIvC,GAAKhR,KAAK64B,MAAMv3B,UAAUmF,aAA1B,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMk9B,mBAAmB/0C,EAAShQ,mDAIvC,OADkCxR,EAAxBwM,KAEN,IAAK,qBACDhM,KAAK64B,MAAMm9B,gBAAgB/2D,EAASg3D,mBACpC,MACJ,IAAK,UACDj2D,KAAK64B,MAAMm9B,gBAAgB/2D,EAASi3D,mBACpC,MACJ,IAAK,aACDl2D,KAAK64B,MAAMm9B,gBAAgB/2D,EAASk3D,aACpC,MACJ,IAAK,eACDn2D,KAAK64B,MAAMm9B,gBAAgB/2D,EAASm3D,eACpC,MACJ,IAAK,oBACDp2D,KAAK64B,MAAMm9B,gBAAgB/2D,EAAS2tB,8DAQhC5sB,KAAK64B,MAAMv3B,UAAUmF,aACjC,OAAQzG,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,MAClC,KAAMwzB,GAAoCpxB,KAQ1C,KAAMoxB,GAAoCxV,KACtC,OACI4Z,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACLi7B,QAASn8B,KAAKq2D,YAAYh6B,KAAKr8B,OAFnC,0BAMR,KAAM00B,GAAoC9V,uBACtC,OACIka,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,SACV2M,gBAAiB,GACjBpsB,MAAM,0FAENuc,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SAASt6B,KAAK,SAASi7B,QAASn8B,KAAK61D,oBAAoBx5B,KAAKr8B,OAA3E,wBAIZ,KAAM00B,GAAoC7V,0BACtC,OACIia,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,0EACAA,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAQt6B,KAAK,UAAU+3B,KAAK,QAAQkD,QAASn8B,KAAK81D,mBAAmBz5B,KAAKr8B,OAAvF,UACA84B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OAAOt6B,KAAK,SAAS+3B,KAAK,QAAQkD,QAASn8B,KAAK+1D,mBAAmB15B,KAAKr8B,OAArF,WAGZ,KAAM00B,GAAoC7qB,OACtC,IAAMy/B,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,gBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,yBAKR,OACI43B,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAASnN,UAAU,mCAG1D,KAAMhH,GAAoCjrB,MACtC,IAAM8sD,EACFz9B,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,WACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,iBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,cACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,eAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,qBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAKR,OACI43B,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAAS2sB,EAAW1sB,QAAS,CAAC,UACpC/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAASnN,UAAU,mCAG1D,KAAMhH,GAAoC3V,MACtC,IAAMy3C,EACF19B,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,WACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,iBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,cACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,eAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,gBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,qBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAKR,OACI43B,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAAS4sB,EAAW3sB,QAAS,CAAC,UACpC/Q,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAASnN,UAAU,qEAO9D,OACI5C,EAAA,cAACA,EAAA,SAAD,KACK94B,KAAKy2D,wBAjKe77B,wBDChCg2B,+LAQA2E,uDAw/BUmB,eAz9BX,SAAAA,EAAY79B,GAA8B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA02D,IACtCj3D,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA42D,GAAAv2D,KAAAH,KAAM64B,KAED73B,MAAQ,CACT21D,UAAU,EACV7F,WAAYF,GAAWttD,KACvB+oD,cAAe,CACXroC,UAAW,MAEf4yC,eAAgBrB,GAAesB,GAC/BC,QAAS73D,EAAS8J,QAVgBtJ,qFAetCO,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAAS2tB,6DAIlC5sB,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASk3D,sDAGtBW,GACZ92D,KAAKu7B,SAAS,CAAEu7B,2FAOhB92D,KAAK64B,MAAM+8B,0DAIX,IAAM50C,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMg9B,oBAAoB70C,EAAShQ,wDAIxC,GAAKhR,KAAK64B,MAAMv3B,UAAUmF,aAA1B,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMi9B,mBAAmB90C,EAAShQ,yDAIvC,GAAKhR,KAAK64B,MAAMv3B,UAAUmF,aAA1B,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtChhB,KAAK64B,MAAMk9B,mBAAmB/0C,EAAShQ,4DAIvChR,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASm3D,0DAGpBpyC,GACdhkB,KAAK64B,MAAMs0B,kBAAkBnpC,2CAGjBhY,EAAagY,GACzB,OAAQhY,GACJ,IAAK,kBACDhM,KAAK64B,MAAMs0B,kBAAkBnpC,yCAOrCwlB,KAAM3pC,KAAK,CACP0c,MAAO,yBACPyc,MAAO,OACPyQ,QACI3Q,EAAA,+FAOG9U,GAMXhkB,KAAKu7B,SAAS,CAAE8wB,cAAe,CAAEroC,UAAWA,oDAK5ChkB,KAAKu7B,SAAS,CAAE8wB,cAAe,CAAEroC,UAAW,8CAI5C,OACI8U,EAAA,yBACK94B,KAAK+2D,yDASd,GAAI/2D,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoCjrB,OAC3EzJ,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoC3V,MAC3E,OACI+Z,EAAA,mBAAGiB,MAAO,CAAE2V,UAAW,WAAvB,uCACwC5W,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB7N,KAAK64B,MAAMv3B,UAAUmF,aAAczB,KAAM8zB,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAb,SADnH,mDAQR,GAAIx7B,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoCjrB,OAC3EzJ,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoC3V,MAC3E,OACI+Z,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAE,qBAAAl8B,OAAuB7N,KAAK64B,MAAMv3B,UAAUmF,aAAczB,KAAM8zB,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAb,+DAOnF,GAAKx7B,KAAK64B,MAAMv3B,UAAUmF,aAG1B,OACIqyB,EAAA,qBAAK4C,UAAU,+DACX5C,EAAA,qBAAK4C,UAAU,mCACXqc,wBAA0B,CAAEC,OAAQC,UAAOC,MAAMl4C,KAAK64B,MAAMv3B,UAAUmF,aAAalB,aAAe,gDAOlGmZ,GACZ,OACIoa,EAAA,qBAAK4C,UAAU,cACX5C,EAAA,qBAAK4C,UAAU,iBAEX5C,EAAA,qBAAK4C,UAAU,SACX5C,EAAA,mBAAGmD,KAAM,YAAcvd,EAAII,MAAMvV,SAAU2yB,OAAO,UAAUxd,EAAII,MAAMvV,UACrE,IAFL,SAGMmV,EAAII,MAAMvV,SAHhB,mDAgBDyX,GACX,OAAQA,EAAS9f,MACb,KAAMwzB,GAAoCpxB,KACtC,OACIw1B,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,QAER,KAAMwzB,GAAoCxV,KACtC,OACI4Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,gEAENuc,EAAA,yBAAKA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,MAAM64B,MAAO,CAAEsU,YAAa,SAA5C,6CACAvV,EAAA,qBAAKiB,MAAO,CAAEwV,UAAW,SACrBzW,EAAA,cAAC0S,GAAA,EAAD,CACIrP,QAASn8B,KAAKq2D,YAAYh6B,KAAKr8B,OADnC,4BAOhB,KAAM00B,GAAoC9V,uBACtC,OACIka,EAAA,yBACIA,EAAA,yBAAKA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,UAAYuX,MAAM,IAAzD,mBAAiFpY,EAAA,kCAAjF,eACAA,EAAA,yBAAKA,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SAASt6B,KAAK,SAASi7B,QAASn8B,KAAK61D,oBAAoBx5B,KAAKr8B,OAA3E,oBAGjB,KAAM00B,GAAoC7V,0BACtC,OACIia,EAAA,yBACIA,EAAA,yBAAKA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,OAAO64B,MAAO,CAAEJ,MAAO,UAAvC,iBAAiEb,EAAA,kCAAjE,8BACAA,EAAA,qBAAKiB,MAAO,CAAEwV,UAAW,SACrBzW,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAQt6B,KAAK,UAAUi7B,QAASn8B,KAAK81D,mBAAmBz5B,KAAKr8B,OAA1E,qBACA84B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OAAOt6B,KAAK,SAASi7B,QAASn8B,KAAK+1D,mBAAmB15B,KAAKr8B,OAAxE,uBAIhB,KAAM00B,GAAoC7qB,OACtC,OAAQivB,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,UACZ,KAAMwzB,GAAoCjrB,MACtC,OAAQqvB,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WAAjB,SACZ,KAAMwzB,GAAoC3V,MACtC,OACI+Z,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,cACV2M,gBAAiB,GACjBpsB,MAAM,oBAENuc,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAS2nC,MAAM,SAAS9O,MAAO,CAAEsU,YAAa,SAA/D,kEAOhB,QAAKruC,KAAK64B,MAAMv3B,UAAUmF,eAGtBzG,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoC3V,OAC3E/e,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoCjrB,OAC3EzJ,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoC7qB,gDAO/E,OAAK7J,KAAK4gB,WAMNkY,EAAA,cAACk+B,GAAD,CACIvwD,aAAczG,KAAK64B,MAAMv3B,UAAUmF,aACnCua,SAAUhhB,KAAK64B,MAAMv3B,UAAU0f,SAC/Bi2C,YAAaj3D,KAAK64B,MAAMo+B,cAPxBn+B,EAAA,cAAC4S,GAAA,EAAD,CAAO/rC,QAAQ,0CAA0CuB,KAAK,0DAatE,IAYIg2D,EAZEl2C,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SAChC/X,EAAWjJ,KAAK64B,MAAMv3B,UAAU8W,cAChCZ,EAAcxX,KAAK64B,MAAMv3B,UAAUgtB,iBAEzC,IAAMtN,EAAS9f,OAASwzB,GAAoCjrB,OACxDuX,EAAS9f,OAASwzB,GAAoC3V,SAIzC,OAAb9V,GAAqC,OAAhBuO,GAmCzB,OA9BI0/C,EADAjuD,EAASuG,OAELspB,EAAA,0DAMAA,EAAA,yBACIA,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB2nC,MAAM,UAAUsuB,aAAa,WADjE,aAEK,IACDr+B,EAAA,sBAAMiB,MAAO,CAAEoP,WAAY,SAAWlgC,EAASuG,QAC9C,IAJL,kBAKoBvG,EAASuG,OAAS,EAAI,IAAM,GAC3C,IANL,MAQK,IACDspB,EAAA,sBAAMiB,MAAO,CAAEoP,WAAY,SAAW3xB,EAAYhI,QACjD,IAVL,kBAWoBgI,EAAYhI,OAAS,EAAI,IAAM,IAGnDspB,EAAA,yBACIA,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAI,+BAAiC/pC,KAAK64B,MAAMv3B,UAAUmF,aAAazB,IAC5E8zB,EAAA,cAAC0S,GAAA,EAAD,2BAOhB1S,EAAA,qBAAK4C,UAAU,OACX5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,sBAAM4C,UAAU,SAAhB,UAEJ5C,EAAA,qBAAK4C,UAAU,QACX5C,EAAA,qBAAK4C,UAAU,YACVw7B,iDAQDjuD,EAAuCuO,GACvD,OAAKvO,EAASuG,OAQNspB,EAAA,yBACIA,EAAA,yBACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,qBAAqB2nC,MAAM,UAAUsuB,aAAa,WADjE,SAEK,IACAluD,EAASuG,OAAS,EAAI,MAAQ,KAC9B,IACDspB,EAAA,sBAAMiB,MAAO,CAAEoP,WAAY,SAAWlgC,EAASuG,QAC9C,IANL,kBAOoBvG,EAASuG,OAAS,EAAI,IAAM,GAC3C,IARL,MAUK,IACDspB,EAAA,sBAAMiB,MAAO,CAAEoP,WAAY,SAAW3xB,EAAYhI,QACjD,IAZL,qBAauBgI,EAAYhI,OAAS,EAAI,IAAM,IAEtDspB,EAAA,yBACIA,EAAA,cAACgR,GAAA,EAAD,CAASC,GAAI,+BAAiC/pC,KAAK64B,MAAMv3B,UAAUmF,aAAczB,IAC7E8zB,EAAA,cAAC0S,GAAA,EAAD,2BAxBZ1S,EAAA,qBAAK4C,UAAU,WAAf,yEAgCQ1a,GAChB,OAAQA,EAAS9f,MACb,KAAMwzB,GAAoCpxB,KAE1C,KAAMoxB,GAAoCxV,KACtC,MAAO,UACX,KAAMwV,GAAoC9V,uBACtC,MAAO,iCACX,KAAM8V,GAAoC7V,0BACtC,MAAO,oCACX,KAAM6V,GAAoC7qB,OAE1C,KAAM6qB,GAAoCjrB,MAE1C,KAAMirB,GAAoC3V,MACtC,MAAO,4DAMf,OACI+Z,EAAA,sBAAM4C,UAAU,aAWX17B,KAAKo3D,qEAMd,IAAMp2C,EAAWhhB,KAAK64B,MAAMv3B,UAAU0f,SACtC,GAAMA,EAAS9f,OAASwzB,GAAoCjrB,OACxDuX,EAAS9f,OAASwzB,GAAoC3V,MAD1D,CAFe,IAAAs4C,EAO6Br3D,KAAK64B,MAAMv3B,UAA/C8W,EAPOi/C,EAOPj/C,cAAekW,EAPR+oC,EAOQ/oC,iBACvB,GAAyB,OAArBA,GAA+C,OAAlBlW,EAAjC,CAGA,IAAMuyB,EAAQvyB,EAAc5I,OAAS8e,EAAiB9e,OAChD+M,EACFuc,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,WACZ,IADL,iBAGK,IACD43B,EAAA,sBAAM4C,UAAU,+BAAhB,IAAgDiP,EAAhD,MAGR,OACI7R,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,cAACmsB,GAAA,EAAD,CACIvpB,UAAU,2CACVypB,UAAW,CAAEC,gBAAiB,OAAQzrB,MAAO,SAC7Cpd,MAAOA,GACNvc,KAAKs3D,oBAAoBl/C,EAAekW,kDAOrD,GAAKtuB,KAAK64B,MAAMv3B,UAAUmF,cAGtBzG,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoCxV,KAG/E,OACI4Z,EAAA,cAAC0S,GAAA,EAAD,CACIrP,QAASn8B,KAAKq2D,YAAYh6B,KAAKr8B,OADnC,wEASJ,IAAMw/C,EACF1mB,EAAA,4CAIJ,OACIA,EAAA,cAACksB,GAAD,CAAQxF,YAAaA,+CAKzB,OACI1mB,EAAA,qBAAK4C,UAAU,sDACV17B,KAAKu3D,uBACLv3D,KAAKiiD,yDAKFztC,GACZxU,KAAK64B,MAAM6qB,gBAAgBlvC,EAAQxP,mDAKnC,OAAQhF,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,MAClC,KAAKwzB,GAAoCpxB,KAEzC,KAAKoxB,GAAoC7qB,OACrC,OACJ,KAAK6qB,GAAoCjrB,MAYzC,KAAKirB,GAAoC3V,MACrC,OACI+Z,EAAA,qBAAK4C,UAAU,mCACX5C,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cACfzf,MAAM,iDACNuc,EAAA,cAAC0S,GAAA,EAAD,CACIvS,KAAK,QACLc,MAAO,CAAEf,MAAO,QAChBmD,QAASn8B,KAAKw3D,aAAan7B,KAAKr8B,OAAO84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAHtD,kEAWpB,OAAQlB,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,MAClC,KAAKwzB,GAAoCpxB,KAEzC,KAAKoxB,GAAoC7qB,OACrC,OACJ,KAAK6qB,GAAoCjrB,MASzC,KAAKirB,GAAoC3V,MACrC,OACI+Z,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,cAACiD,GAAA,EAAD,CAASC,UAAU,cACfzf,MAAM,sCACNuc,EAAA,cAAC0S,GAAA,EAAD,CAAQvS,KAAK,QAAQkD,QAASn8B,KAAKw3D,aAAan7B,KAAKr8B,OAAO84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,mDAOjF,IAgBNmgB,EAhBM1V,EAAA3L,KACJ8gB,EAAW9gB,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoCjrB,OACxFzJ,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,OAASwzB,GAAoC3V,MAEzE6B,EAAW5gB,KAAK64B,MAAMv3B,UAAUmF,aAAama,SAU7C62C,EAAO,GAiBb,GAbIp2C,EADArhB,KAAK64B,MAAMv3B,UAAUmF,aAAa4a,YAAc,EAClC1P,OAAO3R,KAAK64B,MAAMv3B,UAAUmF,aAAa4a,YAAc,GAEvD,OAElBo2C,EAAKpnD,KACDyoB,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CACIC,IAAKhf,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAjB,WAAkC43B,EAAA,sBAAM4C,UAAU,6BAAhB,IAA8Cra,EAA9C,MACvCrV,IAAI,UACJ+tB,MAAO,CAAEmS,cAAe,WACvBlsC,KAAK03D,qBAIV92C,EACA,GAAIE,EAAS,CACT,IAAM62C,EAAoB33D,KAAK64B,MAAMv3B,UAAU0H,aAAawG,OAASxP,KAAK64B,MAAMv3B,UAAUuJ,cAAc2E,OAClGooD,EACF9+B,EAAA,sBAAM4C,UAAU,6BAAhB,IACMi8B,GAAqB,OAD3B,KAIJF,EAAKpnD,KACDyoB,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAKhf,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAjB,YAAqC02D,EAArC,KAA6D5rD,IAAI,QAAQ+tB,MAAO,CAAEmS,cAAe,WAChHpT,EAAA,cAAC++B,GAAD,CAAU5Y,MAAOj/C,KAAK64B,MAAMv3B,UAAU0H,aAAcu8C,OAAQvlD,KAAK64B,MAAMv3B,UAAUuJ,cAAemW,SAAUhhB,KAAK64B,MAAMv3B,UAAU0f,iBAGpI,CACH,IACI82C,EADEC,EAAa/3D,KAAK64B,MAAMv3B,UAAUuJ,cAAc2E,OAGlDsoD,EADAC,EACapmD,OAAOomD,GAEP,OAEjBN,EAAKpnD,KACDyoB,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAKhf,EAAA,0BAAMA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAjB,YAAoC43B,EAAA,sBAAM4C,UAAU,6BAAhB,IAA8Co8B,EAA9C,MAA0E9rD,IAAI,SAAS+tB,MAAO,CAAEmS,cAAe,WAClKpT,EAAA,cAAC++B,GAAD,CAAU5Y,MAAO,GAAIsG,OAAQvlD,KAAK64B,MAAMv3B,UAAUuJ,cAAemW,SAAUhhB,KAAK64B,MAAMv3B,UAAU0f,aAMhH,IAAMg3C,EAAkBh4D,KAAK64B,MAAMv3B,UAAUmF,aAAakb,qBAAqBnS,OACzEyoD,EACFn/B,EAAA,0BACIA,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SADf,gBAEiB43B,EAAA,sBAAM4C,UAAU,6BAAhB,IAA8Cs8B,EAA9C,MAYrB,OATAP,EAAKpnD,KACDyoB,EAAA,cAAC4e,GAAA,EAAKG,QAAN,CAAcC,IAAKmgB,EAAejsD,IAAI,cAAc+tB,MAAO,CAAEmS,cAAe,WACxEpT,EAAA,cAACo/B,GAAD,CACIv2C,qBAAsB3hB,KAAK64B,MAAMv3B,UAAUmF,aAAakb,qBACxDlb,aAAczG,KAAK64B,MAAMv3B,UAAUmF,aACnC+/C,oBAAqB,WAAQ76C,EAAK66C,2BAK1C1tB,EAAA,cAAC4e,GAAA,EAAD,CACIC,iBAAiB,UACjBjc,UAAU,wBACVkc,UAAU,EACV3e,KAAK,QACLk/B,YAAY,OAEXV,+CAMT,OACI3+B,EAAA,sBAAM4C,UAAU,aACZ5C,EAAA,sBAAM4C,UAAU,oBACZ5C,EAAA,qBAAK4C,UAAU,aAAaS,QAASn8B,KAAK+lD,oBAAoB1pB,KAAKr8B,OAC/D84B,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,2DAW3BlB,KAAKu7B,SAAS,CAAEu1B,WAAYF,GAAWwH,iDAIvC,OADkC54D,EAAxBwM,KAEN,IAAK,qBACDhM,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASg3D,oBAClC,MACJ,IAAK,cACDj2D,KAAKu7B,SAAS,CAAEu1B,WAAYF,GAAWyH,eACvC,MACJ,IAAK,UACDr4D,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASi3D,oBAClC,MACJ,IAAK,aACDl2D,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASk3D,cAClC,MACJ,IAAK,iBACDn2D,KAAKu7B,SAAS,CAAEu1B,WAAYF,GAAW0H,kBACvC,MACJ,IAAK,eACDt4D,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAASm3D,gBAClC,MACJ,IAAK,oBACDp2D,KAAKu7B,SAAS,CAAEu7B,QAAS73D,EAAS2tB,+DAM9B5sB,KAAK64B,MAAMv3B,UAAUmF,aACjC,OAAQzG,KAAK64B,MAAMv3B,UAAU0f,SAAS9f,MAClC,KAAMwzB,GAAoCpxB,KAa1C,KAAMoxB,GAAoCxV,KACtC,OACI4Z,EAAA,0BACIA,EAAA,cAAC0S,GAAA,EAAD,CACItqC,KAAK,UACLi7B,QAASn8B,KAAKq2D,YAAYh6B,KAAKr8B,OAFnC,2BAOZ,KAAM00B,GAAoC9V,uBACtC,OACIka,EAAA,0BACIA,EAAA,cAACiD,GAAA,EAAD,CACIC,UAAU,SACV2M,gBAAiB,GACjBpsB,MAAM,0FAENuc,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SAASt6B,KAAK,SAASi7B,QAASn8B,KAAK61D,oBAAoBx5B,KAAKr8B,OAA3E,yBAKhB,KAAM00B,GAAoC7V,0BACtC,OACIia,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,0EACAA,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAQt6B,KAAK,UAAU+3B,KAAK,QAAQkD,QAASn8B,KAAK81D,mBAAmBz5B,KAAKr8B,OAAvF,UACA84B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OAAOt6B,KAAK,SAAS+3B,KAAK,QAAQkD,QAASn8B,KAAK+1D,mBAAmB15B,KAAKr8B,OAArF,WAGZ,KAAM00B,GAAoC7qB,OACtC,IAAMy/B,EACFxQ,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,gBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,yBAKR,OACI43B,EAAA,0BACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAASN,EAAMO,QAAS,CAAC,UAC/B/Q,EAAA,cAAC0S,GAAA,EAAD,CAAQsO,MAAM,UACVhhB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAAS9O,MAAO,CAAEO,SAAU,aAK3E,KAAM5F,GAAoCjrB,MACtC,IAAM8sD,EACFz9B,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,WACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,iBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,cACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,eAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,qBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAKR,OACI43B,EAAA,0BACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAAS2sB,EAAW1sB,QAAS,CAAC,UACpC/Q,EAAA,cAAC0S,GAAA,EAAD,CAAQsO,MAAM,UACVhhB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAAS9O,MAAO,CAAEO,SAAU,aAK3E,KAAM5F,GAAoC3V,MACtC,IAAMy3C,EACF19B,EAAA,cAACyQ,GAAA,EAAD,CAAMpN,QAASn8B,KAAKs2D,YAAYj6B,KAAKr8B,OACjC84B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,sBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,WACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,iBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,cACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,eAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,gBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAGA43B,EAAA,cAACyQ,GAAA,EAAKG,KAAN,CAAW19B,IAAI,qBACX8sB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAAU,IADzB,wBAKR,OACI43B,EAAA,0BACIA,EAAA,cAAC6Q,GAAA,EAAD,CAAUC,QAAS4sB,EAAW3sB,QAAS,CAAC,UACpC/Q,EAAA,cAAC0S,GAAA,EAAD,CAAQsO,MAAM,UACVhhB,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,UAAU2nC,MAAM,SAAS9O,MAAO,CAAEO,SAAU,wDAU/Et6B,KAAKu7B,SAAS,CACVq7B,eAAgB52D,KAAKgB,MAAM41D,iBAAmBrB,GAAesB,GAAKtB,GAAegD,KAAOhD,GAAesB,sDAK3G,IAAI/K,EAMJ,OAJIA,EADA9rD,KAAKgB,MAAM41D,iBAAmBrB,GAAesB,GAClC,aAEA,WAGX/9B,EAAA,qBAAK4C,UAAU,6BAA6BS,QAASn8B,KAAKw4D,gBAAgBn8B,KAAKr8B,OAC3E84B,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,mCAEf5C,EAAA,qBAAK4C,UAAU,mCAEf5C,EAAA,qBAAK4C,UAAU,oCAGnB5C,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,mCAEf5C,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAM4qD,KAEhBhzB,EAAA,qBAAK4C,UAAU,oCAMnB5C,EAAA,qBAAK4C,UAAU,kCACX5C,EAAA,qBAAK4C,UAAU,mCAEf5C,EAAA,qBAAK4C,UAAU,mCAEf5C,EAAA,qBAAK4C,UAAU,gFAU3B,IAAI+8B,EACAC,EAUJ,OATI14D,KAAKgB,MAAM41D,iBAAmBrB,GAAesB,IAC7C4B,EAAc,2DACdC,EAAqB,kEAErBD,EAAc,yDACdC,EAAqB,mEAEzBD,GAAe,0BACfC,GAAsB,0BAElB5/B,EAAA,qBAAK4C,UAAU,mDACX5C,EAAA,qBAAK4C,UAAU,uDACX5C,EAAA,qBAAK4C,UAAW+8B,EAAa1+B,MAAO,CAAE4+B,UAAW,QAC5C34D,KAAK44D,aAEV9/B,EAAA,qBAAK4C,UAAU,iCACV17B,KAAK64D,0BAEV//B,EAAA,qBAAK4C,UAAWg9B,GAGZ5/B,EAAA,cAACggC,GAAD,CACIryD,aAAczG,KAAK64B,MAAMv3B,UAAUmF,aACnCqZ,WAAY9f,KAAK64B,MAAMv3B,UAAUwe,WACjCkB,SAAUhhB,KAAK64B,MAAMv3B,UAAU0f,SAC/BuN,iBAAkBvuB,KAAK64B,MAAMv3B,UAAUitB,iBACvCE,mBAAoBzuB,KAAK64B,MAAMv3B,UAAUmtB,mBACzC6+B,iBAAkBttD,KAAK64B,MAAMy0B,iBAC7BD,mBAAoBrtD,KAAK64B,MAAMw0B,mBAC/BF,kBAAmBntD,KAAK64B,MAAMs0B,kBAC9BrI,gBAAiB9kD,KAAK64B,MAAMisB,gBAC5BoI,sBAAuBltD,KAAKktD,sBAAsB7wB,KAAKr8B,UAInE84B,EAAA,qBAAK4C,UAAU,+BACV17B,KAAK+4D,sEAMQ,IAAAlhD,EAAA7X,KAM1B,OACI84B,EAAA,cAACkgC,GAAD,CAIIhR,SAVS,WACbnwC,EAAK0jB,SAAS,CACVu7B,QAAS73D,EAAS8J,4DAYN,IAAA22B,EAAA1/B,KAMpB,OACI84B,EAAA,cAACmgC,GAAD,CAAYjR,SANC,WACbtoB,EAAKnE,SAAS,CACVu7B,QAAS73D,EAAS8J,UAIUoM,eAAgBnV,KAAK64B,MAAMv3B,UAAUmF,aAAazB,sDAIjE,IAAAg7B,EAAAhgC,KAMrB,OACI84B,EAAA,cAACogC,GAAD,CAAkBlR,SANL,WACbhoB,EAAKzE,SAAS,CACVu7B,QAAS73D,EAAS8J,UAIgBoM,eAAgBnV,KAAK64B,MAAMv3B,UAAUmF,aAAazB,sDAIvE,IAAAy8C,EAAAzhD,KAMrB,OACI84B,EAAA,cAACqgC,GAAD,CAAkBnR,SANL,WACbvG,EAAKlmB,SAAS,CACVu7B,QAAS73D,EAAS8J,UAIgBoM,eAAgBnV,KAAK64B,MAAMv3B,UAAUmF,aAAazB,kDAI3E,IAAA48C,EAAA5hD,KAMjB,OACI84B,EAAA,cAACsgC,GAAD,CAAqBpR,SANR,WACbpG,EAAKrmB,SAAS,CACVu7B,QAAS73D,EAAS8J,UAImBoM,eAAgBnV,KAAK64B,MAAMv3B,UAAUmF,aAAazB,0CAK/F,OAAQhF,KAAKgB,MAAM81D,SACf,KAAK73D,EAAS2tB,oBACV,OAAO5sB,KAAKq5D,8BAChB,KAAKp6D,EAASk3D,YACV,OAAOn2D,KAAKs5D,wBAChB,KAAKr6D,EAASg3D,kBACV,OAAOj2D,KAAKu5D,yBAChB,KAAKt6D,EAASi3D,kBACV,OAAOl2D,KAAKw5D,yBAChB,KAAKv6D,EAASm3D,cACV,OAAOp2D,KAAKy5D,qBAChB,KAAKx6D,EAAS8J,OACd,QACI,OAAO/I,KAAK05D,qDAKpB,OAAQ15D,KAAKgB,MAAM8vD,YACf,KAAKF,GAAWwH,QACZ,OAAOt/B,EAAA,cAACkhB,GAAA,EAAD,CAAU3pC,MAAI,EAAC05B,GAAI,mBAC9B,KAAK6mB,GAAWttD,MAKpB,IACMq2D,EADO35D,KAAK64B,MAAMv3B,UAAUmF,aAK5Bq/C,EAAUhtB,EAAA,cAAC8gC,GAAD,CACZt4D,UAAWtB,KAAK64B,MAAMv3B,UACtBs0D,UAAW51D,KAAK64B,MAAM+8B,UACtBC,oBAAqB71D,KAAK64B,MAAMg9B,oBAChCC,mBAAoB91D,KAAK64B,MAAMi9B,mBAC/BC,mBAAoB/1D,KAAK64B,MAAMk9B,mBAC/BC,gBAAiBh2D,KAAKg2D,gBAAgB35B,KAAKr8B,QAI/C,OACI84B,EAAA,qBAAK4C,UAAU,4CACX5C,EAAA,qBAAK4C,UAAU,oCACX5C,EAAA,cAAC+gC,GAAD,CACIpzD,aAAckzD,EACd3wB,mBAAoBhpC,KAAK64B,MAAMv3B,UAAU+sB,YACzCy3B,QAASA,EACTC,oBAAqB/lD,KAAK+lD,oBAAoB1pB,KAAKr8B,SAG1DA,KAAK85D,qBAn9BSl/B,aEsChBsL,ICxFV0qB,GDwFU1qB,eArDf,SAAyBllC,GACrB,IAAMM,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqB+J,OACxC,MAAM,IAAIxI,MAAM,wBAIpB,MAAO,CACHe,cAID,SAA4BijC,GAC/B,MAAO,CACHw1B,UAAW,SAAC/0D,GACRu/B,EAASlX,GAAaroB,KAE1BiyD,YAAa,SAACjyD,GACVu/B,EAASlX,GAAeroB,KAE5B4wD,UAAW,WACPrxB,EAASlX,OAEbwoC,oBAAqB,SAAC7kD,GAClBuzB,EAASlX,GAAiCrc,KAE9C8kD,mBAAoB,SAAC9kD,GACjBuzB,EAASlX,GAA6Brc,KAE1C+kD,mBAAoB,SAAC/kD,GACjBuzB,EAASlX,GAA6Brc,KAE1Cm8C,kBAAmB,SAACnpC,GAChBugB,E7DyHL,SAAyBvgB,GAC5B,sBAAAxkB,EAAAM,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAC,EAAOu3B,EAAmDC,GAA1D,IAAAxjC,EAAAqyC,EAAAxnC,EAAAtC,EAAAmpB,EAAApxB,EAAAmF,EAAAoJ,EAAAugC,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACHm3B,EAvBG,CACHrjC,KAAM7B,EAAW26D,mCA0BXh5D,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAN1B,CAAA4L,EAAAE,KAAA,eAOCm3B,EAASsX,GAAqB,CAC1Bn8C,KAAM,YACNC,QAAS,oCATduN,EAAAK,OAAA,oBAAA8lC,EAsBaryC,EAPZ2wB,KAAQE,cAAiBhmB,EAf1BwnC,EAe0BxnC,MAAOtC,EAfjC8pC,EAeiC9pC,SACzBmpB,EAMK1xB,EANZwxB,IAAOE,QAGCpxB,EAGIN,EALZI,MACIyH,YACIvH,WAKEwH,OAAS9J,EAAqB+J,OAxBzC,CAAAmE,EAAAE,KAAA,eAyBCm3B,EAASsX,GAAqB,CAC1Bn8C,KAAM,YACNC,QAAS,oCA3BduN,EAAAK,OAAA,oBAgCK9G,EAAiBnF,EAAjBmF,aAhCL,CAAAyG,EAAAE,KAAA,gBAmCCm3B,EAASsX,GAAqB,CAC1Bn8C,KAAM,YACNC,QAAS,oCArCduN,EAAAK,OAAA,yBA0CGsC,EAAUpJ,EAAazB,GAEvBorC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MA/CpDoB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAoDOgjC,EAAU6pB,uBAAuBpqD,EAASmU,EAAUlS,aApD3D,QAqDCyyB,GAtE2BzuB,EAsEKkO,EAAUlS,YArE3C,CACH5Q,KAAM7B,EAAWgwB,kCACjBvZ,iBAcG5I,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,UAuDCq3B,EAASsX,GAAqB,CAC1Bn8C,KAAMwN,EAAAwB,GAAGpO,KACTX,QAASuN,EAAAwB,GAAG/O,WAzDjB,yBAAAuN,EAAAM,OAjBJ,IAAgCsI,GAiB5B9I,EAAA,mBAAP,gBAAA2B,EAAAC,GAAA,OAAApP,EAAAiO,MAAAzN,KAAA0N,YAAA,G6D1HiB2f,CAAwBrJ,KAErC8gC,gBAAiB,SAAC9gC,GACdugB,E7DoOL,SAAyBvgB,GAC5B,sBAAAvR,EAAA3S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAAwB,EAAOg2B,EAAmDC,GAA1D,IAAAxjC,EAAAM,EAAAmF,EAAA8nB,EAAAE,EAAAglB,EAAA5nC,EAAAtC,EAAAmpB,EAAAvd,EAAAhD,EAAAi+B,EAAA1xB,EAAA82C,EAAA0E,EAAA,OAAArtD,GAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,UACHm3B,EAxBG,CACHrjC,KAAM7B,EAAW86D,mCAyBXn5D,EAAQwjC,KACHpjC,MAAMyH,YAAYvH,UAJ1B,CAAAmN,EAAArB,KAAA,eAKCm3B,EAASwX,GAAqB,CAC1Br8C,KAAM,QACNC,QAAS,mBAPd8O,EAAAlB,OAAA,qBAYGjM,EAAYN,EAAMI,MAAMyH,YAAYvH,WAC5BwH,OAAS9J,EAAqB+J,OAbzC,CAAA0F,EAAArB,KAAA,eAcCm3B,EAASwX,GAAqB,CAC1Br8C,KAAM,QACNC,QAAS,oBAhBd8O,EAAAlB,OAAA,wBAqBK9G,EAAuDnF,EAAvDmF,aAAc8nB,EAAyCjtB,EAAzCitB,iBAAkBE,EAAuBntB,EAAvBmtB,mBArBrCglB,EA0BCzyC,EAFA2wB,KAAQE,cAAiBhmB,EAxB1B4nC,EAwB0B5nC,MAAOtC,EAxBjCkqC,EAwBiClqC,SACzBmpB,EACP1xB,EADAwxB,IAAOE,OAGLvd,EAAiB1O,EAAazB,GAC9BmN,EAAaR,OAAOqS,EAAUlS,aAE9Bs+B,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAlCpD2C,EAAAtB,KAAA,GAAAsB,EAAArB,KAAA,GAsCOgjC,EAAUgqB,qBAAqBjlD,EAAgBhD,GAtCtD,eAAA1D,EAAArB,KAAA,GA+CmBgjC,EAAUlrB,OAAO/P,GA/CpC,YA+COuJ,EA/CPjQ,EAAApB,MAiDSvE,OAAS4rB,GAA0B3rB,OAjD5C,CAAA0F,EAAArB,KAAA,gBAkDKm3B,EAASwX,GAAqB,CAC1Br8C,KAAM,QACNC,QAAS,sBApDlB8O,EAAAlB,OAAA,kBAyDOuS,EAAapB,EAAIoB,WAEjBo6C,EAAqBxlC,GAAyB5U,EAAY,CAC5D1V,OAAQmkB,EACR/jB,SAAUikB,IAGd8V,EAASW,GAAclhB,EAAUlS,cACjCyyB,EAAS7U,GAAuBhR,EAAKw7C,IAjEtCzrD,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAC,GAAAD,EAAA,UAmEC81B,EAASwX,GAAqB,CAC1Br8C,KAAM,QACNC,QAAS8O,EAAAC,GAAG/O,WArEjB,yBAAA8O,EAAAjB,SAAAe,EAAA,mBAAP,gBAAAS,EAAAsB,GAAA,OAAAmC,EAAAhF,MAAAzN,KAAA0N,YAAA,G6DrOiB2f,CAAwBrJ,KAErC0/B,gBAAiB,SAAC1yC,GACduzB,EAAS81B,GAAwCrpD,KAErDs8C,iBAAkB,SAACljD,GACfm6B,E7D+0BL,SAAwBn6B,GAC3B,OAAO,SAACm6B,EAAmDC,GACvDD,EAAS,CACLrjC,KAAM7B,EAAWi7D,iCAGrB,IAEMh5D,EAFQkjC,IAEUpjC,MAAMyH,YAAYvH,UAE1C,GAAKA,EAQL,GAAIA,EAAUwH,OAAS9J,EAAqB+J,OAA5C,CAjBsF,IAyB9E+W,EAAexe,EAAUmF,aAAzBqZ,WACFtV,EAAWlJ,EAAUmtB,mBAErBtI,EAASuO,GAAyB5U,EAAY,CAChD1V,OAAQA,EACRI,SAAUA,IAMd+5B,EAAS,CACLrjC,KAAM7B,EAAWswB,iCACjB7P,WAAYqG,EACZ/b,gBArBAm6B,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qCAVb4kC,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,sB6D51BJ0tB,CAAuBjjB,KAEpCijD,mBAAoB,SAAC7iD,GACjB+5B,E7Dm5BL,SAA0B/5B,GAC7B,OAAO,SAAC+5B,EAAmDC,GACvDD,EAAS,CACLrjC,KAAM7B,EAAWi7D,iCAGrB,IAEMh5D,EAFQkjC,IAEUpjC,MAAMyH,YAAYvH,UAE1C,GAAKA,EAQL,GAAIA,EAAUwH,OAAS9J,EAAqB+J,OAA5C,CAjBsF,IA4BhFod,EAASuO,GAHQpzB,EAAUmF,aAAzBqZ,WAG4C,CAChD1V,OAHW9I,EAAUitB,iBAIrB/jB,SAAUA,IAGd+5B,EAAS,CACLrjC,KAAM7B,EAAWwwB,mCACjBrlB,SAAUA,EACVsV,WAAYqG,SAlBZoe,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,qCAVb4kC,EAAS0X,GAAwB,CAC7B/6C,KAAMtD,EAAYqI,MAClBtG,QAAS,sB6Dh6BJ0tB,CAAyB7iB,OAK/B07B,CAA8FwwB,qBCxFxG9F,6FAyNU8F,eAjMX,SAAAA,EAAY79B,GAA8B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA02D,IACtCj3D,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA42D,GAAAv2D,KAAAH,KAAM64B,KAED73B,MAAQ,CACT21D,UAAU,EACV7F,WAAYF,GAAWttD,KACvB+oD,cAAe,CACXroC,UAAW,OAPmBvkB,4EActC+pC,KAAM3pC,KAAK,CACP0c,MAAO,yBACPyc,MAAO,OACPyQ,QACI3Q,EAAA,yBACIA,EAAA,+CAAwBA,EAAA,kCAAxB,KACAA,EAAA,qIACAA,EAAA,6GACAA,EAAA,wKAOZ94B,KAAK64B,MAAM+8B,0DAIX,IAAM50C,EAAWhhB,KAAK64B,MAAM7X,SAC5BhhB,KAAK64B,MAAMg9B,oBAAoB70C,EAAShQ,wDAIxC,GAAKhR,KAAK64B,MAAMpyB,aAAhB,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAM7X,SAC5BhhB,KAAK64B,MAAMi9B,mBAAmB90C,EAAShQ,yDAIvC,GAAKhR,KAAK64B,MAAMpyB,aAAhB,CAGA,IAAMua,EAAWhhB,KAAK64B,MAAM7X,SAC5BhhB,KAAK64B,MAAMk9B,mBAAmB/0C,EAAShQ,oDAIvC,OAAQhR,KAAK64B,MAAM7X,SAAS9f,MACxB,KAAMwzB,GAAoCpxB,KACtC,OACIw1B,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,+CAAwBA,EAAA,kCAAxB,8BACAA,EAAA,qIACAA,EAAA,wGACAA,EAAA,gIAGZ,KAAMpE,GAAoC9V,uBACtC,OACIka,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,4FAGZ,KAAMpE,GAAoC7V,0BACtC,OACIia,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,+EAGZ,QACI,OACIA,EAAA,mCACY94B,KAAK64B,MAAM7X,SAAS9f,KADhC,0CAQZ,IAAMvB,EACFm5B,EAAA,kDAIEvzB,EACFuzB,EAAA,cAACA,EAAA,SAAD,KACK94B,KAAKu6D,gBACNzhC,EAAA,yBACK94B,KAAKw6D,qBAIlB,OACI1hC,EAAA,cAAC4S,GAAA,EAAD,CACI/rC,QAASA,EACT4F,YAAaA,EACbrE,KAAK,OACLopD,UAAU,EACV9uB,KAAO1C,EAAA,cAAC0C,GAAA,EAAD,CAAMt6B,KAAK,SAClB64B,MAAO,CAAEf,MAAO,OAAQ4S,OAAQ,aAChClQ,UAAU,4FAIF1a,GAChB,OAAQA,EAAS9f,MACb,KAAMwzB,GAAoCpxB,KAE1C,KAAMoxB,GAAoCxV,KACtC,MAAO,UACX,KAAMwV,GAAoC9V,uBACtC,MAAO,iCACX,KAAM8V,GAAoC7V,0BACtC,MAAO,oCACX,KAAM6V,GAAoC7qB,OAE1C,KAAM6qB,GAAoCjrB,MAE1C,KAAMirB,GAAoC3V,MACtC,MAAO,sDAKf,OAAQ/e,KAAK64B,MAAM7X,SAAS9f,MACxB,KAAMwzB,GAAoCpxB,KACtC,OACIw1B,EAAA,cAAC0S,GAAA,EAAD,CACIrP,QAASn8B,KAAKq2D,YAAYh6B,KAAKr8B,OADnC,0BAMR,KAAM00B,GAAoC9V,uBACtC,OACIka,EAAA,yBACIA,EAAA,yBAAKA,EAAA,cAAC0S,GAAA,EAAD,CACDhQ,KAAK,SACLt6B,KAAK,SACLi7B,QAASn8B,KAAK61D,oBAAoBx5B,KAAKr8B,OAHtC,oBAOjB,KAAM00B,GAAoC7V,0BACtC,OACIia,EAAA,yBACIA,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,QAAQt6B,KAAK,UAAUi7B,QAASn8B,KAAK81D,mBAAmBz5B,KAAKr8B,OAA1E,qBACC,IACD84B,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,OAAOt6B,KAAK,SAASi7B,QAASn8B,KAAK+1D,mBAAmB15B,KAAKr8B,OAAxE,sBAGZ,QACI,OACI84B,EAAA,mCACY94B,KAAK64B,MAAM7X,SAAS9f,KADhC,6CAQZ,IAAMs+C,EACF1mB,EAAA,qBAAKiB,MAAO,CAAEoe,KAAM,cAGlBwH,EACF7mB,EAAA,cAACA,EAAA,SAAD,KAEIA,EAAA,cAAC0S,GAAA,EAAD,CAAQsO,MAAM,SAASte,KAAK,OAAOW,QAASn8B,KAAKy6D,WAAWp+B,KAAKr8B,SAGzE,OACI84B,EAAA,cAACksB,GAAD,CAAQxF,YAAaA,EAAaG,QAASA,qCAK/C,OACI7mB,EAAA,qBAAK4C,UAAU,+DACV17B,KAAKgiD,eACLhiD,KAAK44D,oBA5LSh+B,aC0ChBsL,mBAnCf,SAAyBllC,EAAmB05D,GACxC,IAAMp5D,EAAYN,EAAMI,MAAMyH,YAAYvH,UAC1C,IAAKA,EACD,MAAM,IAAIf,MAAM,4BAEpB,GAAIe,EAAUwH,OAAS9J,EAAqBiwB,qBACxC,MAAM,IAAI1uB,MAAM,wBAOpB,MAAO,CACHkG,aAJAnF,EADAmF,aAKcua,SAJd1f,EADc0f,SAKUnW,cAJxBvJ,EADwBuJ,gBASzB,SAA4B05B,GAC/B,MAAO,CACHqxB,UAAW,WACPrxB,EAASlX,OAEbwoC,oBAAqB,SAAC7kD,GAClBuzB,EAASlX,GAAiCrc,KAE9C8kD,mBAAoB,SAAC9kD,GACjBuzB,EAASlX,GAA6Brc,KAE1C+kD,mBAAoB,SAAC/kD,GACjBuzB,EAASlX,GAA6Brc,OAKnCk1B,CAA8FwwB,IC1DvG5wB,eAIF,SAAAA,EAAYjN,GAAc,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8lC,IACtBrmC,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgmC,GAAA3lC,KAAAH,KAAM64B,KAHV8hC,4BAE0B,EAGtBl7D,EAAKk7D,uBAAyB,KAHRl7D,+EAOtB,IAAME,EACFm5B,EAAA,mDAEK,IACDA,EAAA,cAACoY,GAAA,EAAD,OAGR,OACIpY,EAAA,cAAC4S,GAAA,EAAD,CAAOxqC,KAAK,OAAOvB,QAASA,EAASo6B,MAAO,CACxCf,MAAO,OACPmY,QAAS,OACTvF,OAAQ,mDAKRxpC,GACR,OACI02B,EAAA,kCAEIA,EAAA,yBACK12B,EAAMzC,2CAOnB,OAAQK,KAAK64B,MAAMyC,KAAK/4B,cACpB,KAAK4rB,EAA4B7qB,KAEjC,KAAK6qB,EAA4B3rB,QAC7B,OAAOxC,KAAKoxC,gBAChB,KAAKjjB,EAA4BloB,MAC7B,OAAIjG,KAAK64B,MAAMyC,KAAKl5B,MACTpC,KAAKqxC,YAAYrxC,KAAK64B,MAAMyC,KAAKl5B,OAEjCpC,KAAKqxC,YAAY,CACpB3xC,KAAM,gBACNC,QAAS,oCAGrB,KAAKwuB,EAA4BxrB,QACjC,QACI,OAAkC,OAA9B3C,KAAK64B,MAAMyC,KAAKh6B,UACTtB,KAAKqxC,YAAY,CACpB3xC,KAAM,aACNC,QAAS,uDAGbK,KAAK64B,MAAMyC,KAAKh6B,UAAUmF,aAAaqC,OAASgU,GAAiB6B,qBAE7Dma,EAAA,cAAC8hC,GAAD,MAIJ9hC,EAAA,cAAC+hC,GAAD,kDAKGC,GACXA,EAAc3lD,iBAAmBnV,KAAK64B,MAAM1jB,gBAC5CnV,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,4DAK7BnV,KAAK64B,MAAMyC,KAAK/4B,eAAiB4rB,EAA4B7qB,MAC7DtD,KAAK64B,MAAMoN,OAAOjmC,KAAK64B,MAAM1jB,+DAKjCnV,KAAK64B,MAAM0Y,kBArFE3W,aAgINsL,mBAjBf,SAAyBllC,EAAyB63B,GAC9C,MAAO,CACHyC,KAAMt6B,EAAMI,MAAMyH,cAInB,SAA4B07B,GAC/B,MAAO,CACH0B,OAAQ,SAAC9wB,GACLovB,EAASlX,GAAalY,KAE1Bo8B,SAAU,WACNhN,EhE0ZR,eAAA7xB,EAAA5S,OAAA8M,GAAA,EAAA9M,CAAA+M,GAAAC,EAAAC,KAAO,SAAA+B,EAAOy1B,EAAmDC,GAA1D,IAAAC,EAAAC,EAAA74B,EAAAtC,EAAAmpB,EAAApxB,EAAA8uC,EAAA,OAAAvjC,GAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,UAAAq3B,EAMCD,IANDE,EAAAD,EAGC9S,KAAQE,cAAiBhmB,EAH1B64B,EAG0B74B,MAAOtC,EAHjCm7B,EAGiCn7B,SACzBmpB,EAJR+R,EAICjS,IAAOE,OACiBpxB,EALzBmjC,EAKCrjC,MAASyH,YAAevH,UALzB,CAAAyN,EAAA3B,KAAA,cASO,IAAI7M,MAAM,6BATjB,UAYG6vC,EAAY,IAAI1b,GAA2B,CAC7C7oB,QAAOtC,WACP6M,iBAAkBsc,EAAOoS,SAASY,OAAO55B,IACzCmR,sBAAuByV,EAAOoS,SAASC,YAAYj5B,MAGnDxK,EAAUmF,aAAaua,WAAa0T,GAAoC7qB,QACxEvI,EAAUmF,aAAaua,WAAa0T,GAAoCjrB,OACxEnI,EAAUmF,aAAaua,WAAa0T,GAAoC3V,MApBzE,CAAAhQ,EAAA3B,KAAA,eAAA2B,EAAA3B,KAAA,EAqBOgjC,EAAU2qB,SAAS,CAAE5lD,eAAgB7T,EAAUmF,aAAazB,KArBnE,OAwBHu/B,EAAS5L,MAET4L,EAAS,CACLrjC,KAAM7B,EAAW+vB,kBA3BlB,wBAAArgB,EAAAvB,SAAAsB,MAAP,gBAAAyB,EAAAK,GAAA,OAAA8B,EAAAjF,MAAAzN,KAAA0N,YAAA,OgErZWw4B,CAAoGJ,ICJpGk1B,uBA7HX,SAAAA,EAAYniC,GAAwB,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAg7D,IAChCv7D,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAk7D,GAAA76D,KAAAH,KAAM64B,KAHVoiC,cAEoC,EAGhCx7D,EAAKw7D,SAAWrgC,cAEhBn7B,EAAKo5B,MAAMqiC,YALqBz7D,+EAShCO,KAAK64B,MAAMsiC,+DAIX,GAA8B,OAA1Bn7D,KAAKi7D,SAASluB,QAAlB,CAGA,IAAMlhC,EAAQ7L,KAAKi7D,SAASluB,QAAQrpC,MACf,IAAjBmI,EAAM2D,QAGVxP,KAAK64B,MAAMuiC,mBAAmBvvD,4CAI9B,OACIitB,EAAA,qBAAK4C,UAAU,aAAf,UACW5C,EAAA,uBAAOgJ,IAAK9hC,KAAKi7D,SAAUlhC,MAAO,CAAEf,MAAO,UAClDF,EAAA,cAAC0S,GAAA,EAAD,CACIhQ,KAAK,OACLwS,SAAS,SACT7R,QAASn8B,KAAKq7D,aAAah/B,KAAKr8B,OAHpC,4DAWR,OACI84B,EAAA,qBAAK4C,UAAU,gBAAf,gBACiB5C,EAAA,uBAAGA,EAAA,0BAAO94B,KAAK64B,MAAMhH,cAAcA,cAAczV,UAAjD,KAAmE0c,EAAA,0BAAO94B,KAAK64B,MAAMhH,cAAcA,cAActoB,WADlI,IAEK,IACDuvB,EAAA,cAAC0S,GAAA,EAAD,CAAQhQ,KAAK,SAASW,QAASn8B,KAAKs7D,cAAcj/B,KAAKr8B,gDAM/D,OAAQA,KAAK64B,MAAMhH,cAAcvkB,QAC7B,KAAK6gB,EAAgB7qB,KACrB,KAAK6qB,EAAgByD,SACjB,OACIkH,EAAA,0BAER,KAAK3K,EAAgB6D,WACjB,OACI8G,EAAA,qBAAK4C,UAAU,+CACV17B,KAAKu7D,mBACLv7D,KAAK64B,MAAMi5B,UAGxB,KAAK3jC,EAAgBgE,aACjB,OACI2G,EAAA,qBAAK4C,UAAU,iDACX5C,EAAA,mEACC94B,KAAKw7D,iBAGlB,KAAKrtC,EAAgBloB,MACjB,OACI6yB,EAAA,qBAAK4C,UAAU,iDACX5C,EAAA,gCACC94B,KAAK64B,MAAMhH,cAAclyB,SAGtC,QACI,OACIm5B,EAAA,mEAMZ,OAAQ94B,KAAK64B,MAAMhH,cAAcvkB,QAC7B,KAAK6gB,EAAgB7qB,KACrB,KAAK6qB,EAAgByD,SACjB,OACIkH,EAAA,0BAER,KAAK3K,EAAgB6D,WACjB,OACI8G,EAAA,qBAAK4C,UAAU,+CACV17B,KAAK64B,MAAMi5B,UAGxB,KAAK3jC,EAAgBgE,aACjB,OACI2G,EAAA,qBAAK4C,UAAU,iDACX5C,EAAA,2CAGZ,KAAK3K,EAAgBloB,MACjB,OACI6yB,EAAA,qBAAK4C,UAAU,0CACX5C,EAAA,qCAGZ,QACI,OACIA,EAAA,4DAOZ,OACIA,EAAA,qBAAK4C,UAAU,+BACV17B,KAAK64B,MAAM4iC,OAASz7D,KAAK07D,gBAAkB17D,KAAK27D,uBA1H9C/gC,uBCoBbghC,GACI,GADJA,GAES,eAFTA,GAGK,YAuDEC,GAAb,WAGI,SAAAA,EAAAr8D,GAAsC,IAAxBsM,EAAwBtM,EAAxBsM,IAAwBhM,OAAAC,EAAA,EAAAD,CAAAE,KAAA67D,GAAA77D,KAFtC8L,SAEsC,EAClC9L,KAAK8L,IAAMA,EAJnB,OAAAhM,OAAAiM,EAAA,EAAAjM,CAAA+7D,EAAA,EAAA7vD,IAAA,WAAAtI,MAAA,SAOaiK,GACL,MAAoB,kBAATA,EACA,CAAC3N,KAAK8L,KAAK+B,OAAO,CAACF,IAAOG,KAAK,KAEnC,CAAC9N,KAAK8L,KAAK+B,OAAOF,GAAMG,KAAK,OAX5C,CAAA9B,IAAA,OAAAtI,MAAA,WAgBQ,OAAOuI,MAAMjM,KAAK87D,SAAS,CAACF,KAAkB,CAC1C1vD,QAAS,CACLE,OAAQ,oBAEZC,KAAM,SAELC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MA1BvB,CAAAT,IAAA,eAAAtI,MAAA,SA8BiBmI,GACT,OAAOI,MAAMjM,KAAK87D,SAAS,CAACF,KAAuB,CAC/C1vD,QAAS,CACLE,OAAQ,mBACRD,cAAeN,GAEnBQ,KAAM,SAELC,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAMgM,EAAS4B,YAE7B,OAAO5B,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,MA7CvB,CAAAT,IAAA,QAAAtI,MAAA,SAiDUmI,GACF,OAAOI,MAAMjM,KAAK87D,SAAS,CAACF,KAAmB,CAC3C1vD,QAAS,CACLE,OAAQ,mBACRD,cAAeN,GAEnBQ,KAAM,SAELC,KAAK,SAACC,GACH,GAAwB,MAApBA,EAASe,OACT,MAAM,IAAI/M,MAAMgM,EAAS4B,YAE7B,OAAO5B,EAASC,SAEnBF,KAAK,SAACG,GACH,OAAOA,QAhEvBovD,EAAA,GCpCO,SAASvpC,GAAelwB,GAC3B,MAAO,CACHlB,KAAM7B,EAAWgzB,iBACjBjwB,SAID,SAAS6vB,GAAepmB,EAAetC,EAAkB6S,EAAkBiH,GAC9E,MAAO,CACHniB,KAAM7B,EAAW0yB,gBACjBlmB,QAAOtC,WAAU6S,WAAUiH,SAI5B,SAAS+O,KACZ,MAAO,CACHlxB,KAAM7B,EAAW6yB,mBAmBlB,SAASgpC,KACZ,OAAO,SAAC32B,EAAmDC,GACvDD,EA1CG,CACHrjC,KAAM7B,EAAWqyB,mBAwCqE,IAO9D5lB,EAIpB04B,IAPAhS,IACIE,OACIoS,SACIk2B,KAAQlvD,IAQlBD,EAAQkwD,OAAY,iBAC1B,GAAKlwD,EAAL,CAKA,IAAM8lB,EAAO,IAAIkqC,GAAW,CAAE/vD,IAAKA,IACnC4M,QAAQC,IAAI,CACRgZ,EAAKqqC,aAAanwD,GAClB8lB,EAAKsqC,MAAMpwD,KAEVS,KAAK,SAAA9M,GAA0B,IAAAiT,EAAA3S,OAAAsU,GAAA,EAAAtU,CAAAN,EAAA,GAAb08D,GAAazpD,EAAA,GAAAA,EAAA,IACtB4Q,EAAQ64C,EAAQ74C,MAAMha,IAAI,SAAAqJ,GAAA,IAAG1N,EAAH0N,EAAG1N,GAAH0N,EAAOypD,KAAP,OAAkBn3D,IAClDu/B,EAAStS,GAAepmB,EAAOqwD,EAAQ5mD,KAAM4mD,EAAQjwB,QAAS5oB,MAEjEqb,MAAM,SAACC,GACJj9B,QAAQU,MAAM,mBAAoBu8B,GAClC4F,EAASjS,GAAe,CACpB5yB,KAAM,QACNC,QAASg/B,EAAIh/B,kBAjBrB4kC,EAASnS,OCxDN8T,mBAzBf,SAAyBllC,EAAmB63B,GAExC,MAAO,CACHhH,cAFa7wB,EAAT2wB,OAUL,SAA4B4S,GAC/B,MAAO,CACH22B,UAAW,WACP32B,EAASlX,OAEb8tC,sBAAuB,WACnB52B,EDwFD,SAACA,EAAmDC,GAEvDu3B,UAAe,iBAGfx3B,EAASnS,SC3FTgpC,mBAAoB,SAACvvD,GACjB04B,ED8FL,SAA8B14B,GACjC,OAAO,SAAC04B,EAAmDC,GAA+B,IAM9D14B,EAIpB04B,IAPAhS,IACIE,OACIoS,SACIk2B,KAAQlvD,IAOxBiwD,OAAY,gBAAiBlwD,GAG7B,IAAM8lB,EAAO,IAAIkqC,GAAW,CAAE/vD,IAAKA,IACnC4M,QAAQC,IAAI,CACRgZ,EAAKqqC,aAAanwD,GAClB8lB,EAAKsqC,MAAMpwD,KAEVS,KAAK,SAAAqG,GAA0B,IAAAC,EAAA9S,OAAAsU,GAAA,EAAAtU,CAAA6S,EAAA,GAAbupD,GAAatpD,EAAA,GAAAA,EAAA,IACtByQ,EAAQ64C,EAAQ74C,MAAMha,IAAI,SAAAwJ,GAAA,IAAG7N,EAAH6N,EAAG7N,GAAH,OAAA6N,EAAOspD,KAAWn3D,IAClDu/B,EAAStS,GAAepmB,EAAOqwD,EAAQ5mD,KAAM4mD,EAAQjwB,QAAS5oB,MAEjEqb,MAAM,SAACC,GACJj9B,QAAQU,MAAM,mBAAoBu8B,GAClC4F,EAASjS,GAAe,CACpB5yB,KAAM,QACNC,QAASg/B,EAAIh/B,cC5HZ0tB,CAA6BxhB,OAKnCq6B,CAA8F80B,ICzCvGoB,GAKF,SAAAA,EAAA58D,GAA0D,IAA5Cc,EAA4Cd,EAA5Cc,KAAM+7D,EAAsC78D,EAAtC68D,UAAWC,EAA2B98D,EAA3B88D,QAA2Bx8D,OAAAC,EAAA,EAAAD,CAAAE,KAAAo8D,GAAAp8D,KAJ1DM,UAI0D,EAAAN,KAH1Dq8D,eAG0D,EAAAr8D,KAF1Ds8D,aAE0D,EACtDt8D,KAAKM,KAAOA,EACZN,KAAKq8D,UAAYA,EACjBr8D,KAAKs8D,QAAUA,GAUjBC,eAIF,SAAAA,EAAYprD,GAA+B,IAAA1R,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAu8D,IACvC98D,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAy8D,GAAAp8D,KAAAH,KAAMmR,KAJVmtB,aAG2C,EAAA7+B,EAF3C4/B,aAE2C,EAEvC5/B,EAAK6+B,QAAU,IAAIv7B,KACnBtD,EAAK4/B,QAAUluB,EAAOkuB,SAAW,IAHM5/B,6BAJjB28D,IAgBxBI,cAQF,SAAAA,EAAA/pD,GAA0F,IAA5EnS,EAA4EmS,EAA5EnS,KAAM4O,EAAsEuD,EAAtEvD,QAASutD,EAA6DhqD,EAA7DgqD,UAA6D38D,OAAAC,EAAA,EAAAD,CAAAE,KAAAw8D,GAAAx8D,KAP1FM,UAO0F,EAAAN,KAN1FkP,aAM0F,EAAAlP,KAL1FgF,QAK0F,EAAAhF,KAJ1F08D,aAI0F,EAAA18D,KAH1Fy8D,eAG0F,EAAAz8D,KAF1F28D,cAE0F,EACtF38D,KAAKM,KAAOA,EACZN,KAAKkP,QAAUA,EACflP,KAAKgF,GAAK43D,OACV58D,KAAK08D,QAAU,IAAI35D,KACnB/C,KAAKy8D,UAAYA,EACjBz8D,KAAK28D,SAAW,8DAIhB,MAAO,CACHA,SAAU,CACN33D,GAAIhF,KAAKgF,GACT03D,QAAS18D,KAAK08D,QACdD,UAAWz8D,KAAKy8D,WAEpBn8D,KAAMN,KAAKM,KACX4O,QAASlP,KAAKkP,kBAgBb2tD,GAAb,WAgBI,SAAAA,EAAY1rD,GAKR,GALgCrR,OAAAC,EAAA,EAAAD,CAAAE,KAAA68D,GAAA78D,KAfpC09B,YAemC,EAAA19B,KAdnC88D,UAcmC,EAAA98D,KAbnCgF,QAamC,EAAAhF,KAZnC+8D,sBAYmC,EAAA/8D,KAXnCg9D,sBAWmC,EAAAh9D,KAVnCoyD,eAUmC,EAAApyD,KATnCi9D,YASmC,EAAAj9D,KARnCk9D,eAQmC,EAAAl9D,KAPnCm9D,mBAOmC,EAAAn9D,KANnCo9D,4BAMmC,EAAAp9D,KALnCq9D,sCAKmC,EAAAr9D,KAJnCs9D,6BAImC,EAAAt9D,KAHnCu9D,kCAGmC,EAAAv9D,KAFnCw9D,qBAEmC,EAE/Bx9D,KAAK09B,OAASvsB,EAAOusB,QAAUA,OAGF,OAAzB19B,KAAK09B,OAAOoX,SACZ,MAAM,IAAIv0C,MAAM,eAEpB,GAAsC,OAAlCP,KAAK09B,OAAOoX,SAAS1L,SACrB,MAAM,IAAI7oC,MAAM,eAEpBP,KAAK88D,KAAO3rD,EAAO2rD,MAAQ98D,KAAK09B,OAAOoX,SAAS1L,SAASC,OAIzDrpC,KAAKgF,GAAKmM,EAAOsrD,WAAaG,OAE9B58D,KAAK+8D,iBAAmB,IAAI7xD,IAC5BlL,KAAKg9D,iBAAmB,IAAI9xD,IAC5BlL,KAAKoyD,UAAY,IAAIlnD,IAErBlL,KAAKi9D,OAAS,EACdj9D,KAAKk9D,UAAY,EACjBl9D,KAAKm9D,cAAgB,EAErBn9D,KAAKo9D,uBAAyB,EAC9Bp9D,KAAKq9D,iCAAmC,IACxCr9D,KAAKs9D,yBAA0B,EAC/Bt9D,KAAKu9D,6BAA+B,EACpCv9D,KAAKw9D,gBAAkB,KA7C/B,OAAA19D,OAAAiM,EAAA,EAAAjM,CAAA+8D,EAAA,EAAA7wD,IAAA,QAAAtI,MAAA,WAkDQ,OADA1D,KAAKi9D,QAAU,EACR,OAAStrD,OAAO3R,KAAKi9D,UAlDpC,CAAAjxD,IAAA,iBAAAtI,MAAA,SAqDmB+5D,GACX,IAAM99D,EAAU89D,EAAal8B,KAC7B,IAAK5hC,EAKD,OAJAK,KAAKo9D,8BACDp9D,KAAKs9D,yBACL57D,QAAQC,KAAK,sCAAuC87D,IAI5D,IAAK99D,EAAQg9D,SAKT,OAJA38D,KAAKo9D,8BACDp9D,KAAKs9D,yBACL57D,QAAQC,KAAK,uDAAwD87D,IAI7E,GAAM99D,EAAQg9D,SAASF,YAAcz8D,KAAKgF,GAKtC,OAJAhF,KAAKo9D,8BACDp9D,KAAKs9D,yBACL57D,QAAQC,KAAK,oDAAsDhC,EAAQg9D,SAAUh9D,EAAQg9D,SAASF,UAAWz8D,KAAKgF,KAoB9H,GAhBIhF,KAAKu9D,6BAA+Bv9D,KAAKq9D,mCACzCr9D,KAAKs9D,yBAA0B,EAC/B57D,QAAQC,KAAK,4CAA8C3B,KAAKu9D,6BAA+B,gBAc/F59D,EAAQg9D,SAAS33D,IAAMhF,KAAK+8D,iBAAiBzmD,IAAI3W,EAAQg9D,SAAS33D,IAClE,IACI,IAAMuH,EAAWvM,KAAK+8D,iBAAiB3uD,IAAIzO,EAAQg9D,SAAS33D,IAC5DhF,KAAK+8D,iBAAiBrhD,OAAO/b,EAAQg9D,SAAS33D,IAC1CuH,GACAA,EAASmxD,QAAQ/9D,EAAQuP,SAE/B,MAAOsP,GACL9c,QAAQU,MAAM,uCAAwCzC,EAAS6e,GAOvE,GAAIxe,KAAKg9D,iBAAiB1mD,IAAI3W,EAAQW,MAAO,CACzC,IAAMq9D,EAAW39D,KAAKg9D,iBAAiB5uD,IAAIzO,EAAQW,MACnDN,KAAKg9D,iBAAiBthD,OAAO/b,EAAQW,MACrCq9D,EAAShnD,QAAQ,SAACo8C,GACd,IACIA,EAASsJ,UAAU18D,EAAQuP,SAC7B,MAAOsP,GACL9c,QAAQU,MAAM,sCAAuCzC,EAAS6e,GAC1Du0C,EAASuJ,SACTvJ,EAASuJ,QAAQ99C,MAO7Bxe,KAAKoyD,UAAU97C,IAAI3W,EAAQW,OAC3BN,KAAKoyD,UAAUhkD,IAAIzO,EAAQW,MAAOqW,QAAQ,SAACo8C,GAClCA,EAASsJ,WACV36D,QAAQC,KAAK,2BAA4BoxD,GAE7C,IACIA,EAASsJ,UAAU18D,EAAQuP,SAC7B,MAAOsP,GACL9c,QAAQU,MAAM,sCAAuCzC,EAAS6e,GAC1Du0C,EAASuJ,SACTvJ,EAASuJ,QAAQ99C,QArIzC,CAAAxS,IAAA,SAAAtI,MAAA,SA4IWqvD,GACE/yD,KAAKoyD,UAAU97C,IAAIy8C,EAASzyD,OAC7BN,KAAKoyD,UAAU/9C,IAAI0+C,EAASzyD,KAAM,IAEtCN,KAAKoyD,UAAUhkD,IAAI2kD,EAASzyD,MAAO+P,KAAK0iD,KAhJhD,CAAA/mD,IAAA,KAAAtI,MAAA,SAmJOk6D,EAAmBC,EAAgCz7D,GAClDpC,KAAK89D,OAAO,IAAI1B,GAAS,CACrB97D,KAAMs9D,EACNvB,UAAWwB,EACXvB,QAASl6D,OAvJrB,CAAA4J,IAAA,cAAAtI,MAAA,SA2JgB/D,GACRK,KAAK09B,OAAOqgC,YAAYp+D,EAAQq+D,aAAch+D,KAAK88D,QA5J3D,CAAA9wD,IAAA,OAAAtI,MAAA,SA+JSpD,EAAc4O,GACf,IAAMvP,EAAU,IAAI68D,GAAQ,CAAEl8D,OAAM4O,UAASutD,UAAWz8D,KAAKgF,KAC7DhF,KAAKi+D,YAAYt+D,KAjKzB,CAAAqM,IAAA,cAAAtI,MAAA,SAoKgB/D,EAAkB+9D,GAC1B19D,KAAK+8D,iBAAiB1oD,IAAI,aAAc,CACpCiqB,QAAS,IAAIv7B,KACb26D,QAASA,IAGb19D,KAAKi+D,YAAYt+D,KA1KzB,CAAAqM,IAAA,UAAAtI,MAAA,SA6KYpD,EAAc4O,GAAkB,IAAAvD,EAAA3L,KACpC,OAAO,IAAI0Y,QAAQ,SAAC6C,EAASqL,GACzB,IACIjb,EAAKuyD,YAAY,IAAI1B,GAAQ,CAAEl8D,OAAM4O,UAASutD,UAAW9wD,EAAK3G,KAAO,SAACuH,GAClEgP,EAAQhP,KAEd,MAAOiS,GACLoI,EAAOpI,QApLvB,CAAAxS,IAAA,eAAAtI,MAAA,WAyLmB,IAAAmU,EAAA7X,KACX09B,OAAOC,WAAW,WACd,IAAM+I,GAAM,IAAI3jC,MAAO6O,UADHgY,GAAA,EAAAC,GAAA,EAAAC,OAAAK,EAAA,IAIpB,IAJoB,IAIpBH,EAJoBm0C,EAAA,eAAAzrD,EAAAsX,EAAAtmB,MAIRsB,GAJQ2N,EAAA7S,OAAAsU,GAAA,EAAAtU,CAAA4S,EAAA,OAwBY,IAxBZC,EAAA,GAKe3I,OAAO,SAAC+oD,GACnC,GAAIA,aAAoBwJ,GAAiB,CACrC,IAAM39B,EAAU8H,EAAMqsB,EAASz0B,QAAQ1sB,UACvC,GAAIgtB,EAAUm0B,EAAS1zB,QAAS,CAC5B,IACQ0zB,EAASuJ,SACTvJ,EAASuJ,QAAQ,IAAI/7D,MAAM,gBAAkBq+B,IAEnD,MAAOpgB,GACL9c,QAAQU,MAAM,8BAA+B4C,EAAIwZ,GAErD,OAAO,EAEP,OAAO,EAGX,OAAO,IAGEhP,QACbqI,EAAKmlD,iBAAiBthD,OAAO1W,IArBrC+kB,EAA8BlS,EAAKmlD,iBAAiB7oD,UAApDiW,OAAAC,cAAAT,GAAAI,EAAAD,EAAA3c,QAAAkd,MAAAV,GAAA,EAA+D,KAAAjX,EAAAwrD,KAJ3C,MAAAx/B,GAAA9U,GAAA,EAAAC,EAAA6U,EAAA,YAAA/U,GAAA,MAAAG,EAAAS,QAAAT,EAAAS,SAAA,WAAAX,EAAA,MAAAC,GA6BhBjS,EAAKmlD,iBAAiB/jC,KAAO,GAC7BphB,EAAKumD,gBAEV,OA1NX,CAAApyD,IAAA,aAAAtI,MAAA,SA6NeqvD,GACF/yD,KAAKg9D,iBAAiB1mD,IAAIy8C,EAASzyD,OACpCN,KAAKg9D,iBAAiB3oD,IAAI0+C,EAASzyD,KAAM,IAE7CN,KAAKg9D,iBAAiB5uD,IAAI2kD,EAASzyD,MAAO+P,KAAK0iD,GAC3CA,EAAS1zB,SACTr/B,KAAKo+D,iBAnOjB,CAAApyD,IAAA,OAAAtI,MAAA,SAuOSpD,EAAcu9D,EAAqCz7D,GACpDpC,KAAKq+D,WAAW,IAAI9B,GAAgB,CAChCj8D,KAAMA,EACN+7D,UAAWwB,EACXvB,QAASl6D,OA3OrB,CAAA4J,IAAA,OAAAtI,MAAA,SA+OSpD,EAAc++B,GAAiB,IAAAK,EAAA1/B,KAChC,OAAO,IAAI0Y,QAAQ,SAAC6C,EAASqL,GACzB,OAAO8Y,EAAK2+B,WAAW,IAAI9B,GAAgB,CACvCj8D,KAAMA,EACN++B,QAASA,EACTg9B,UAAW,SAACntD,GACRqM,EAAQrM,IAEZotD,QAAS,SAACl6D,GACNwkB,EAAOxkB,WAxP3B,CAAA4J,IAAA,QAAAtI,MAAA,WA+PQ,MAAO,CACH2J,KAAMrN,KAAKk9D,UACXoB,SAAUt+D,KAAKm9D,iBAjQ3B,CAAAnxD,IAAA,SAAAtI,MAAA,SAqQWg6B,GACH19B,KAAK09B,OAASA,IAtQtB,CAAA1xB,IAAA,QAAAtI,MAAA,WAyQY,IAAAs8B,EAAAhgC,KACJA,KAAKw9D,gBAAkB,SAAC79D,GACpBqgC,EAAKu+B,eAAe5+D,IAExBK,KAAK09B,OAAOo1B,iBAAiB,UAAW9yD,KAAKw9D,iBAAiB,KA7QtE,CAAAxxD,IAAA,OAAAtI,MAAA,WAiRY1D,KAAKw9D,iBACLx9D,KAAK09B,OAAOu1B,oBAAoB,UAAWjzD,KAAKw9D,iBAAiB,OAlR7EX,EAAA,GCRe2B,cArCX,SAAAA,IAAe1+D,OAAAC,EAAA,EAAAD,CAAAE,KAAAw+D,GAAAx+D,KAHfmR,YAGc,EAAAnR,KAFdy+D,aAEc,EACVz+D,KAAKmR,OAAS,KAIdnR,KAAKy+D,QAAU,IAAI5B,GAAQ,CACvBn/B,OAAQA,OACRo/B,KAAMhoB,SAAS1L,SAAUC,2EAM7B,MAAO,CACHozB,UAAWz8D,KAAKy+D,QAAQz5D,GACxB05D,QAAStyC,OACTjb,OAAQ,CACJiF,iBAAkB,mBAClB6G,sBAAuB,6BACvB6mB,oBAAqB,eACrBxB,iBAAkB,2BAClBq8B,eAAgB,iBAChBC,aAAc,GACdtjC,KAAM,KACNujC,WAAY,MAMhBC,WAAYhqB,SAAS1L,SAAUC,iBCpD9B01B,GAAb,oBAAAA,IAAAj/D,OAAAC,EAAA,EAAAD,CAAAE,KAAA++D,GAAA,OAAAj/D,OAAAiM,EAAA,EAAAjM,CAAAi/D,EAAA,EAAA/yD,IAAA,sBAAAtI,MAAA,WAEQ,IAAKg6B,OAAOshC,aACR,OAAO,KAEX,IAAKthC,OAAOshC,aAAaC,aAAa,eAElC,OAAO,KAEX,IAAM9tD,EAASusB,OAAOshC,aAAaE,aAAa,eAChD,OAAe,OAAX/tD,EAEO,KAEUlD,KAAKiqC,MAAMinB,mBAAmBhuD,MAd3D,CAAAnF,IAAA,eAAAtI,MAAA,WAkBQ,OAAKg6B,OAAOshC,cAGPthC,OAAOshC,aAAaC,aAAa,gBAG/BvhC,OAAOshC,aAAaE,aAAa,gBAL7B,OAnBnB,CAAAlzD,IAAA,mBAAAtI,MAAA,WA2BQ,OAAOg6B,OAAOshC,cAAgB,SA3BtCD,EAAA,GCYO,SAASpsC,GAAWD,GACvB,MAAO,CACHxxB,KAAM7B,EAAWkzB,YACjBG,OAAQA,cCiDD0sC,eAjEX,SAAAA,EAAYvmC,GAA8B,IAAAp5B,EAAA,OAAAK,OAAAC,EAAA,EAAAD,CAAAE,KAAAo/D,IACtC3/D,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAs/D,GAAAj/D,KAAAH,KAAM64B,KAHV4lC,aAE0C,EAOtCh/D,EAAKg/D,QAAU,KAPuBh/D,8EAWlCO,KAAK64B,MAAM4jC,YAEXz8D,KAAKy+D,QAAU,IAAI5B,GAAQ,CACvBJ,UAAWz8D,KAAK64B,MAAM4jC,YAG1Bz8D,KAAKy+D,QAAQY,GAAG,WAAY,SAAA7/D,GAAoBA,EAAjBuqC,GAAiBvqC,EAAb2R,QAEhC,SAACwtB,GACAj9B,QAAQU,MAAM,yCAGlBpC,KAAKy+D,QAAQnkB,QAEbt6C,KAAKy+D,QAAQa,KAAK,QAAS,CACvB7C,UAAWz8D,KAAK64B,MAAM4jC,UACtB8C,SAAU,oGAUlBv/D,KAAK64B,MAAM2mC,0DAIXx/D,KAAKy/D,8DAILz/D,KAAK0/D,mDAIL,OAAI1/D,KAAK64B,MAAMvrB,SAAW/O,EAAS+E,KAE3Bw1B,EAAA,qBAAK4C,UAAU,oBAAf,cAOJ5C,EAAA,qBAAK4C,UAAU,2CACV17B,KAAK64B,MAAMi5B,iBA/DGl3B,aCyBhBsL,mBAfR,SAAyBllC,EAAyB63B,GAA6B,IAAA8mC,EAClB3+D,EAAxDwxB,IAAOllB,EADmEqyD,EACnEryD,OADmEsyD,EAAAD,EAC3DjtC,OACvB,MAAO,CACHplB,SAAQuyD,YAHsED,EACjDC,YAERpD,UAHyDmD,EACpCnD,YAM3C,SAA4Bl4B,GAC/B,MAAO,CACHi7B,WAAY,WACRj7B,EFYD,SAACA,EAAyDC,GAE7D,IACIs7B,GADc,IAAIf,IACSgB,sBAG/B,GAAID,EAAc,CACd,IAAID,EAGApD,EAAYqD,EAAarD,UAG7B,OAAQqD,EAAa3uD,OAAOmqB,MACxB,IAAK,MACDukC,EAAc,qBAAuBC,EAAa3uD,OAAO0tD,WAAW75D,GACpE04B,OAAOvR,QAAQ6zC,UAAU,KAAM,OAAQH,GACvC,MACJ,QACIA,EAAc,iBACdniC,OAAOvR,QAAQ6zC,UAAU,KAAM,gBAAiB,kBAKxDz7B,EAAS5R,GAAW,CAChBstC,QAAS,GACTn7B,SAAU,CACNY,OAAQ,CACJ55B,IAAKg0D,EAAa3uD,OAAOiF,kBAE7B2uB,YAAa,CACTj5B,IAAKg0D,EAAa3uD,OAAO8L,uBAE7BwoB,UAAW,CACP35B,IAAKg0D,EAAa3uD,OAAO2yB,qBAE7B6B,cAAe,CACX75B,IAAKg0D,EAAa3uD,OAAOmxB,kBAE7B04B,KAAM,CACFlvD,IAAKg0D,EAAa3uD,OAAOwtD,iBAGjCkB,cACApD,oBAKJl4B,EAAS5R,GAAW,CAChBstC,QAAS,GACTn7B,SAAU,CACNY,OAAQ,CACJ55B,KALZg0D,GAAe,IAAItB,IAAkBuB,uBAKP5uD,OAAOiF,kBAE7B2uB,YAAa,CACTj5B,IAAKg0D,EAAa3uD,OAAO8L,uBAE7BwoB,UAAW,CACP35B,IAAKg0D,EAAa3uD,OAAO2yB,qBAE7B6B,cAAe,CACX75B,IAAKg0D,EAAa3uD,OAAOmxB,kBAE7B04B,KAAM,CACFlvD,IAAKg0D,EAAa3uD,OAAOwtD,iBAGjCkB,YAAa,iBACbpD,UAAW,aE7EZv2B,CAAoGk5B,IC9BtGc,GAAb,oBAAAA,IAAApgE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkgE,GAAA,OAAApgE,OAAAiM,EAAA,EAAAjM,CAAAogE,EAAA,OAAAl0D,IAAA,mBAAAtI,MAAA,WAEQ,MAAO,CACHyzB,SAAU,CACN1Z,MAAO,CACH2Z,KAAM,IAAIlsB,IACVyN,IAAK,IAETmJ,KAAM,CACFsV,KAAM,IAAIlsB,IACVyN,IAAK,IAET1P,SAAU,CACNmuB,KAAM,IAAIlsB,IACVyN,IAAK,IAETmH,WAAY,CACRsX,KAAM,IAAIlsB,KAEd8X,cAAe,CACXoU,KAAM,IAAIlsB,MAGlB4sB,GAAI,GAEJ12B,MAAO,CACH82B,eAAgB,CACZ31B,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MAEfD,WAAY,CACRkB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MAEfiF,YAAa,CACThE,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MAEfwxB,+BAAgC,CAC5BvwB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MAEf+xB,gBAAiB,CACb9wB,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,MAiBfuH,YAAa,CACTtG,aAAc9D,EAAsB6E,KACpClB,MAAO,KACPd,UAAW,OAGnBqwB,KAAM,CACFrkB,OAAQjP,EAAUiF,KAClB3D,QAAS,GACTkyB,cAAe,CACXhmB,MAAO,GACPtC,SAAU,GACV6S,SAAU,GACViH,MAAO,KAGfjhB,MAAO,KACPowB,IAAK,CACDllB,OAAQ/O,EAAS+E,KACjBovB,OAAQ,CACJutC,QAAS,GACTn7B,SAAU,CACNY,OAAQ,CACJ55B,IAAK,IAETi5B,YAAa,CACTj5B,IAAK,IAET25B,UAAW,CACP35B,IAAK,IAET65B,cAAe,CACX75B,IAAK,IAETkvD,KAAM,CACFlvD,IAAK,KAGb+zD,YAAa,GACbpD,UAAW,OAInBhM,UAAW,CACP0P,SAAS,QA9GzBD,EAAA,GCIqBE,eACjB,SAAAA,EAAYvnC,GAAe,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAogE,GAAAtgE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsgE,GAAAjgE,KAAAH,KACjB64B,sFAIN74B,KAAK64B,MAAMoN,wDAIXjmC,KAAK64B,MAAM0Y,4CAIX,OAAOvxC,KAAK64B,MAAMi5B,gBAdgBl3B,aCyB3BsL,mBAjBf,SAAyBllC,EAAmB63B,GACxC,MAAO,IAKX,SAA4B0L,GACxB,MAAO,CACH0B,OAAQ,WACJ1B,EAASlX,OAEbkkB,SAAU,WACNhN,E9EgCD,CACHrjC,KAAM7B,EAAWghE,yB8E5BVn6B,CAA8FmV,IC9BvGiE,GAAU1kB,gBAAuC,MAE1C0lC,GAAqBhhB,GAAQihB,SACRjhB,GAAQkhB,SCQ1CC,KAAQ96C,IAAI+6C,KAAWC,KAAUC,KAASC,UAYpCC,eACJ,SAAAA,EAAYt6B,GAA0B,OAAA1mC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8gE,GAAAhhE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAghE,GAAA3gE,KAAAH,KAC9BwmC,sEAEHvK,EAAc1f,EAAelO,GAChC,GAAIrO,KAAKwmC,QAAQu6B,SAAU,CACzB,IAAIC,EAEJ,IACEA,EAAO7B,mBAAmBn/D,KAAKwmC,QAAQy6B,SAAUhlC,IAC9CilC,QAAQ,UAAW,IACnBC,cAEL,MAAOl0B,GACL,OAAO5+B,EAGT,GAEkC,IAAhC2yD,EAAKrgE,QAAQ,gBACoB,IAA9BqgE,EAAKrgE,QAAQ,cACa,IAA1BqgE,EAAKrgE,QAAQ,SAEhB,OAAO0N,EAIX,IAAI6kD,EAAM,YAAcj3B,EAAO,IAQ/B,OANI1f,IACF22C,GAAO,WAAa32C,EAAQ,KAG9B22C,GAAO,oBAAsB7kD,EAAO,cAjCN+yD,cAuCpB,IAAIC,kBACVC,SAAW,IAAIR,GACvB7oB,UAAOspB,WAAW,CAAED,SAAU,IAAIR,KAQlC,IAAMrF,KAAS/9B,OAAOshC,aAIhBwC,GAAetB,GAAeuB,mBAK9BC,GAAQC,YAAYC,GAAmBJ,GAAqBK,YAAQC,YAAgBC,OAmBpFC,GAA6B,SAACnpC,GAClC,OACEopC,EAAAn1D,EAAAo1D,cAACC,GAAD,CAAkBhtD,eAAgB0jB,EAAMxa,MAAMlN,OAAOnM,MAoD1Co9D,eApCb,SAAAA,EAAYvpC,GAAa,OAAA/4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAoiE,GAAAtiE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsiE,GAAAjiE,KAAAH,KACjB64B,0EAMN,OACEopC,EAAAn1D,EAAAo1D,cAAC5B,GAAD,CAAoB58D,MAAO,CAAE2e,KAAM,OACjC4/C,EAAAn1D,EAAAo1D,cAACG,EAAA,EAAD,CAAUX,MAAOA,IACfO,EAAAn1D,EAAAo1D,cAACI,GAAD,KACEL,EAAAn1D,EAAAo1D,cAACK,GAAD,CAAM9G,OAAQA,IACZwG,EAAAn1D,EAAAo1D,cAACM,GAAD,KACEP,EAAAn1D,EAAAo1D,cAACO,EAAA,EAAD,CAAeC,SAAS,KACtBT,EAAAn1D,EAAAo1D,cAAA,OAAKxmC,UAAU,8BACbumC,EAAAn1D,EAAAo1D,cAAA,OAAKxmC,UAAU,mCAEbumC,EAAAn1D,EAAAo1D,cAACS,EAAA,EAAD,KACEV,EAAAn1D,EAAAo1D,cAACU,EAAA,EAAD,CAAOj1D,KAAK,iBAAiBk1D,UAAWx2B,KACxC41B,EAAAn1D,EAAAo1D,cAACU,EAAA,EAAD,CAAOj1D,KAAK,mBAAmBk1D,UAAWluB,KAC1CstB,EAAAn1D,EAAAo1D,cAACU,EAAA,EAAD,CAAOj1D,KAAK,wBAAwBm1D,OAAO,EAAMD,UAAWb,KAE5DC,EAAAn1D,EAAAo1D,cAACa,EAAA,EAAD,CAAUl9C,KAAK,IAAIkkB,GAAG,iBAAiB+4B,OAAO,oBAvBpDznB,kCCjHlB2nB,IAAStZ,OAAOuY,EAAAn1D,EAAAo1D,cAACe,GAAD,MAASnuB,SAASouB,eAAe","file":"static/js/main.9113f05d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import * as userProfile from \"../data/apis/userProfile\"\nimport * as groups from \"../data/apis/groups\"\nimport * as orgModel from '../data/models/organization/model'\nimport * as userModel from \"../data/models/user\"\nimport * as requestModel from '../data/models/requests'\nimport * as narrativeModel from '../data/models/narrative'\nimport { AnError } from \"../combo/error/api\";\n\n/* Types from the organization service (approximately) */\n\n/*\n    Organization\n*/\n\n\nexport enum ComponentView {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport enum UIErrorType {\n    NONE = 0,\n    INFO,\n    WARNING,\n    ERROR\n}\n\nexport interface UIError {\n    type: UIErrorType\n    message?: string\n}\n\nexport enum SyncState {\n    NONE = 0,\n    NEW,\n    DIRTY,\n    CLEAN\n}\n\nexport enum EditState {\n    NONE = 'NONE',\n    UNEDITED = 'UNEDITED',\n    EDITED = 'EDITED'\n}\n\n\n// export enum ValidationState {\n//     NONE = 0,\n//     VALID,\n//     INVALID,\n//     // DIRTY = 'DIRTY',\n//     MISSING\n// }\n\nexport enum ValidationErrorType {\n    OK = 0,\n    ERROR,\n    REQUIRED_MISSING\n}\n\nexport interface ValidationStateBase {\n    type: ValidationErrorType\n    validatedAt: Date\n}\n\nexport interface ValidationStateOk extends ValidationStateBase {\n    type: ValidationErrorType.OK\n}\n\nexport interface ValidationStateError extends ValidationStateBase {\n    type: ValidationErrorType.ERROR\n    message: string\n}\n\nexport interface ValidationStateRequiredMissing extends ValidationStateBase {\n    type: ValidationErrorType.REQUIRED_MISSING\n    message: string\n}\n\n// export interface ValidationStateAsyncError extends ValidationStateBase {\n//     type: ValidationErrorType.ASYNC_ERROR\n//     message: string\n//     \n// }\n\nexport type ValidationState = ValidationStateOk | ValidationStateError | ValidationStateRequiredMissing\n\nexport interface Editable {\n    value: any\n    remoteValue: any\n    syncState: SyncState\n    // editState: EditState\n    // validationState: ValidationState\n    validationState: ValidationState\n    // validatedAt: Date | null\n    // error: UIError\n}\nexport interface EditableString extends Editable {\n    value: string,\n    remoteValue: string | null\n}\n\nexport interface EditableNullableString extends Editable {\n    value: string | null\n    remoteValue: string | null\n}\n\nexport interface EditableBoolean extends Editable {\n    value: boolean\n    remoteValue: boolean | null\n}\n\nexport interface EditableOrganization {\n    id: EditableString\n    name: EditableString\n    description: EditableString\n    isPrivate: EditableBoolean\n    logoUrl: EditableNullableString\n    homeUrl: EditableNullableString\n    researchInterests: EditableString\n}\n\n\n// TODO: or CLEAN to replace new and saved\nexport enum SaveState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    READY = 'READY',\n    SAVING = 'SAVING',\n    SAVED = 'SAVED',\n    SAVE_ERROR = 'SAVE_ERROR'\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    user: User,\n    type: MemberType\n}\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport type Username = string\n\nexport interface App {\n    id: string,\n    module: string,\n    func: string,\n    version: string,\n    title: string,\n    category: string\n}\n\nexport interface AppResource {\n    id: string\n}\n\nexport interface EditedOrganization {\n    id: {\n        value: string,\n        error?: UIError\n    }\n    name: {\n        value: string,\n        error?: UIError\n    }\n    description: {\n        value: string,\n        error?: UIError\n    }\n}\n\n/*\n    Collection of organizations\n*/\n\n/* REDUX */\n\nexport enum AuthState {\n    NONE = 0,\n    CHECKING,\n    AUTHORIZED,\n    UNAUTHORIZED,\n    ERROR\n}\n\nexport interface UserAuthorization {\n    token: string,\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\n\nexport interface Authorization {\n    status: AuthState,\n    message: string,\n    authorization: UserAuthorization\n}\n\nexport enum ViewOrgState {\n    NONE = 0,\n    INITIAL,\n    FETCHING,\n    READY,\n    ERROR\n}\n\nexport enum AppState {\n    NONE = 0,\n    LOADING,\n    READY,\n    ERROR\n}\n\nexport enum SortDirection {\n    ASCENDING = 'asc',\n    DESCENDING = 'desc'\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface ManageOrganizationRequestsViewModel {\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface ManageOrganizationRequestsView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageOrganizationRequestsViewModel | null\n}\n\nexport interface ViewMembersViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface ViewMembersView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: ViewMembersViewModel | null\n}\n\nexport enum BrowseOrgsState {\n    NONE = 0,\n    SEARCHING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface BrowseOrgsViewModel {\n    rawOrganizations: Array<orgModel.BriefOrganization>\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    sortField: string\n    sortDirection: SortDirection\n    filter: orgModel.Filter\n    searchTerms: Array<string>\n    selectedOrganizationId: string | null,\n    // TODO: let's make a new interface for running operations...\n    searching: boolean\n    error: AppError | null\n}\n\nexport interface BrowseOrgsView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: BrowseOrgsViewModel | null\n}\n\nexport enum InviteUserViewState {\n    NONE = 0,\n    EDITING,\n    SENDABLE,\n    SENDING,\n    SUCCESS,\n    ERROR\n}\n\n// user info we get out of user profile search\n\n\n// a user who may or may not be in an org, with org relation info\n// todo: fetch more profile info.\nexport interface OrganizationUser {\n    username: string\n    realname: string\n    relation: orgModel.UserRelationToOrganization\n}\n\n// View Model / Invite User (for admins)\n\nexport interface InviteUserViewModel {\n    organization: orgModel.Organization\n    users: Array<OrganizationUser> | null\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState\n}\n\n\n\nexport interface ManageMembershipViewModel {\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\n// export interface ManageMembershipView {\n//     loadingState: ComponentLoadingState\n//     error: AnError | null\n//     viewModel: ManageMembershipViewModel | null\n// }\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport interface Narrative {\n    workspaceId: number\n    objectId: number\n    title: string\n    status: NarrativeState\n    owner: Username\n    modifiedAt: Date\n}\n\nexport enum ProcessingState {\n    NONE = 0,\n    PROCESSING,\n    SUCCESS,\n    ERROR\n}\n\n\nexport enum RequestNarrativeState {\n    NONE = 0,\n    LOADING,\n    ERROR,\n    LOADED,\n    SELECTING,\n    SELECTED,\n    SENDING,\n    SENT\n}\n\nexport enum SelectionState {\n    NONE = 0,\n    SELECTING,\n    SELECTED\n}\n\n// ViewModel / RequestAddNarrative\n\nexport interface RequestNarrativeViewModel {\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    relation: orgModel.Relation\n    error: AnError | null\n    selectionState: SelectionState\n    saveState: SaveState\n}\n\n// Add Org\n\nexport interface AddOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    error: AppError | null\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n}\n\nexport interface AddOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: AddOrgViewModel | null\n}\n\n// Entities\n\nexport interface UserEntity {\n    userId: string\n    profile: userProfile.UserProfile\n}\n\nexport interface OrganizationEntity {\n    groupId: string\n    group: groups.Group\n}\n\nexport interface RequestEntity {\n    requestId: string\n    request: groups.Request\n}\n\nexport enum ViewOrgViewModelKind {\n    NORMAL = 0,\n    PRIVATE_INACCESSIBLE\n}\n\n// TODO: just for view org view, should be namespaced or something.\nexport enum SubViews {\n    NORMAL = 0,\n    MANAGE_RELATED_ORGS,\n    INVITE_USER,\n    MANAGE_MEMBERSHIP,\n    EDIT_ORGANIZATION,\n    ADD_NARRATIVE\n}\n\nexport interface ViewOrgViewModel {\n    kind: ViewOrgViewModelKind.NORMAL,\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string\n    searchMembersBy: string\n    members: Array<orgModel.Member>\n\n    subViews: {\n        manageRelatedOrganizationsView: View<ManageRelatedOrgsViewModel>\n        inviteUserView: View<InviteUserViewModel>\n        requestNarrativeView: View<RequestNarrativeViewModel>\n        manageMembershipView: View<ManageMembershipViewModel>\n    }\n}\n\nexport interface ViewInaccessiblePrivateOrgViewModel {\n    kind: ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface ViewOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ViewOrgViewModel | ViewInaccessiblePrivateOrgViewModel | null\n}\n\nexport enum ViewOrgSubViewKind {\n    NONE = 0,\n    MANAGE_RELATED_ORGS\n}\n\nexport interface NoneViewModel {\n    kind: ViewOrgSubViewKind.NONE\n}\n\nexport enum ViewState {\n    NONE = 0,\n    LOADING,\n    OK,\n    ERROR\n}\nexport interface View<T> {\n    state: ViewState\n    error: AnError | null\n    viewModel: T | null\n}\n\nexport interface SelectableRelatableOrganization {\n    organization: orgModel.BriefOrganization\n    isRelated: boolean\n    isSelected: boolean\n}\n\nexport interface ManageRelatedOrgsViewModel {\n    kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS\n    organization: orgModel.Organization\n    availableOrganizations: {\n        organizations: Array<SelectableRelatableOrganization>\n        queried: Array<SelectableRelatableOrganization>\n        searchBy: string\n    }\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\nexport type ViewOrgSubView = View<NoneViewModel> | View<ManageRelatedOrgsViewModel>\n\n\nexport interface EditOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    saveError: AppError | null\n}\n\nexport interface EditOrgView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: EditOrgViewModel | null\n}\n\nexport interface StoreState {\n    // new!!\n    entities: {\n        users: {\n            byId: Map<userModel.Username, userModel.User>\n            all: Array<string>\n        }\n        orgs: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n            all: Array<string>\n        }\n        requests: {\n            byId: Map<requestModel.RequestID, requestModel.Request>\n            all: Array<string>\n        }\n        narratives: {\n            byId: Map<narrativeModel.WorkspaceID, narrativeModel.Narrative>\n        }\n        organizations: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n        }\n    }\n\n    db: {\n    }\n\n    auth: Authorization\n    error: AppError | null\n\n    app: {\n        status: AppState\n        config: AppConfig\n        error?: AppError,\n    }\n\n    views: {\n        browseOrgsView: BrowseOrgsView\n        addOrgView: AddOrgView\n        viewOrgView: ViewOrgView\n        editOrgView: EditOrgView\n        manageOrganizationRequestsView: ManageOrganizationRequestsView\n        viewMembersView: ViewMembersView\n        // inviteUserView: InviteUserView\n        // manageMembershipView: ManageMembershipView\n        // requestNarrativeView: RequestNarrativeView\n        // organizationCentricView: OrganizationCentricView\n    }\n    updateOrg: {\n        pending: boolean\n    }\n}\n\nexport enum ErrorCode {\n    NONE = 0,\n    ERROR\n}\n\n/* COMPONENT PROPS */\n\nexport interface SomeError {\n    code: ErrorCode\n    message: string\n    detail: string\n    id: string\n    at: Date\n\n    errorHistory?: Array<AppError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport interface AppError {\n    code: string\n    message: string\n    generatedAt?: Date\n    trace?: Array<string>\n    errors?: Array<AppError>\n    exception?: AppException\n}\n\nexport class AppException extends Error {\n    code: string\n    message: string\n    detail?: string\n    trace?: Array<string>\n    errors?: Array<AppException>\n    info?: Map<string, any>\n    constructor({ code, message, detail, info }: { code: string, message: string, detail?: string, info?: Map<string, any> }) {\n        super(message)\n        this.name = 'AppException'\n        this.code = code\n        this.message = message\n        this.detail = detail\n        this.info = info\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppException)\n        }\n\n        if (this.stack) {\n            if (this.stack.indexOf('\\n') >= 0) {\n                this.trace = this.stack.split('\\n')\n            } else {\n                this.trace = [this.stack]\n            }\n        }\n    }\n}\n\nexport interface AppConfig {\n    baseUrl: string\n    services: {\n        Groups: {\n            url: string\n        }\n        UserProfile: {\n            url: string\n        }\n        Workspace: {\n            url: string\n        }\n        ServiceWizard: {\n            url: string\n        }\n        Auth: {\n            url: string\n        }\n    }\n    defaultPath: string,\n    channelId: string | null\n}\n\nexport interface AuthProps {\n    authorization: Authorization,\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n    hosted: boolean,\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nexport interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        authServiceURL: string\n        originalPath: string | null,\n        view: string | null,\n        viewParams: any\n    },\n    parentHost: string\n}","export enum ActionFlag {\n    APP = 1,\n    APP_START,\n    APP_SUCCESS,\n    // APP_SUCCESS_IFRAME,\n    // APP_SUCCESS_SOLO,\n    APP_ERROR,\n\n    BROWSE_ORGS_LOAD,\n    BROWSE_ORGS_LOAD_START,\n    BROWSE_ORGS_LOAD_SUCCESS,\n    BROWSE_ORGS_LOAD_ERROR,\n    BROWSE_ORGS_UNLOAD,\n\n    BROWSE_ORGS_SORT,\n    BROWSE_ORGS_SORT_START,\n    BROWSE_ORGS_SORT_SUCCESS,\n    BROWSE_ORGS_SORT_ERROR,\n\n    BROWSE_ORGS_FILTER,\n    BROWSE_ORGS_FILTER_START,\n    BROWSE_ORGS_FILTER_SUCCESS,\n    BROWSE_ORGS_FILTER_ERROR,\n\n    BROWSE_ORGS_SEARCH,\n    BROWSE_ORGS_SEARCH_START,\n    BROWSE_ORGS_SEARCH_SUCCESS,\n    BROWSE_ORGS_SEARCH_ERROR,\n\n    UPDATE_ORG,\n    UPDATE_ORG_START,\n    UPDATE_ORG_SUCCESS,\n    UPDATE_ORG_ERROR,\n\n    // viewing org\n    VIEW_ORG_LOAD,\n    VIEW_ORG_LOAD_START,\n    VIEW_ORG_LOAD_SUCCESS,\n    VIEW_ORG_LOAD_ERROR,\n    VIEW_ORG_UNLOAD,\n    VIEW_ORG_RELOAD,\n    VIEW_ORG_ADD_NARRATIVE,\n\n    VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n    VIEW_ORG_LOAD_NORMAL_SUCCESS,\n    VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n\n    // Requests\n\n    VIEW_ORG_JOIN_REQUEST,\n    VIEW_ORG_JOIN_REQUEST_START,\n    VIEW_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_CANCEL_JOIN_REQUEST,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_START,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_ACCEPT_JOIN_INVITATION,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_START,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_ACCEPT_INBOX_REQUEST,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_START,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_INBOX_REQUEST,\n    VIEW_ORG_REJECT_INBOX_REQUEST_START,\n    VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_JOIN_INVITATION,\n    VIEW_ORG_REJECT_JOIN_INVITATION_START,\n    VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_REMOVE_NARRATIVE,\n    VIEW_ORG_REMOVE_NARRATIVE_START,\n    VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n\n    VIEW_ORG_ACCESS_NARRATIVE,\n    VIEW_ORG_ACCESS_NARRATIVE_START,\n    VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n\n    VIEW_ORG_SORT_NARRATIVES,\n    VIEW_ORG_SORT_NARRATIVES_START,\n    VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n    VIEW_ORG_SORT_NARRATIVES_ERROR,\n\n    VIEW_ORG_SEARCH_NARRATIVES,\n    VIEW_ORG_SEARCH_NARRATIVES_START,\n    VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n    VIEW_ORG_SEARCH_NARRATIVES_ERROR,\n\n    VIEW_ORG_SORT_MEMBERS,\n    VIEW_ORG_SORT_MEMBERS_START,\n    VIEW_ORG_SORT_MEMBERS_SUCCESS,\n    VIEW_ORG_SORT_MEMBERS_ERROR,\n\n    VIEW_ORG_SEARCH_MEMBERS,\n    VIEW_ORG_SEARCH_MEMBERS_START,\n    VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n    VIEW_ORG_SEARCH_MEMBERS_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD,\n\n    // keep these ones simple...\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n\n    // PRIVATE ORG\n\n    VIEW_PRIVATE_ORG_JOIN_REQUEST,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_START,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_ERROR,\n\n    // MEMBERS\n\n    VIEW_ORG_VIEW_MEMBERS_LOAD,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_START,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_ORG_VIEW_MEMBERS_UNLOAD,\n\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // Manage Membership\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_CONFIRMED,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE,\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR,\n\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n    VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n\n\n    // add org fields\n\n    ADD_ORG_LOAD,\n    ADD_ORG_LOAD_START,\n    ADD_ORG_LOAD_SUCCESS,\n    ADD_ORG_LOAD_ERROR,\n    ADD_ORG_UNLOAD,\n\n    ADD_ORG_UPDATE_NAME,\n    ADD_ORG_UPDATE_NAME_SUCCESS,\n    ADD_ORG_UPDATE_NAME_ERROR,\n\n    ADD_ORG_UPDATE_LOGO_URL,\n    ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n    ADD_ORG_UPDATE_LOGO_URL_ERROR,\n\n    ADD_ORG_UPDATE_ID,\n    ADD_ORG_UPDATE_ID_SUCCESS,\n    ADD_ORG_UPDATE_ID_ERROR,\n    ADD_ORG_UPDATE_ID_PASS,\n    ADD_ORG_EVALUATE_ID,\n\n    ADD_ORG_UPDATE_DESCRIPTION,\n    ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    ADD_ORG_UPDATE_IS_PRIVATE,\n    ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    ADD_ORG_UPDATE_HOME_URL,\n    ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n    ADD_ORG_UPDATE_HOME_URL_ERROR,\n\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    ADD_ORG_EVALUATE,\n    ADD_ORG_EVALUATE_OK,\n    ADD_ORG_EVALUATE_ERRORS,\n\n    ADD_ORG_SAVE,\n    ADD_ORG_SAVE_START,\n    ADD_ORG_SAVE_SUCCESS,\n    ADD_ORG_SAVE_ERROR,\n\n\n    // editing org\n    EDIT_ORG_LOAD,\n    EDIT_ORG_LOAD_START,\n    EDIT_ORG_LOAD_SUCCESS,\n    EDIT_ORG_LOAD_ERROR,\n    EDIT_ORG_UNLOAD,\n\n    EDIT_ORG_SAVE,\n    EDIT_ORG_SAVE_START,\n    EDIT_ORG_SAVE_SUCCESS,\n    EDIT_ORG_SAVE_ERROR,\n\n    // edit org, field level updates\n    EDIT_ORG_UPDATE_NAME,\n    EDIT_ORG_UPDATE_NAME_SUCCESS,\n    EDIT_ORG_UPDATE_NAME_ERROR,\n\n    EDIT_ORG_UPDATE_LOGO_URL,\n    EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n\n    EDIT_ORG_UPDATE_DESCRIPTION,\n    EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    EDIT_ORG_UPDATE_IS_PRIVATE,\n    EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    EDIT_ORG_UPDATE_HOME_URL,\n    EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n    EDIT_ORG_UPDATE_HOME_URL_ERROR,\n\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    EDIT_ORG_EVALUATE,\n    EDIT_ORG_EVALUATE_OK,\n    EDIT_ORG_EVALUATE_ERRORS,\n\n    // Auth\n    AUTH_CHECK,\n    AUTH_CHECK_START,\n    AUTH_CHECK_ERROR,\n    AUTH_AUTHORIZED,\n    AUTH_UNAUTHORIZED,\n    AUTH_REMOVE_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_LOAD,\n    ADMIN_MANAGE_REQUESTS_LOAD_START,\n    ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    ADMIN_MANAGE_REQUESTS_UNLOAD,\n\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n\n    // MEMBERS\n    VIEW_MEMBERS_LOAD,\n    VIEW_MEMBERS_LOAD_START,\n    VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_MEMBERS_UNLOAD,\n\n    VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // INVITE USER\n    INVITE_USER_LOAD,\n    INVITE_USER_LOAD_START,\n    INVITE_USER_LOAD_SUCCESS,\n    INVITE_USER_LOAD_ERROR,\n    INVITE_USER_UNLOAD,\n\n    INVITE_USER_SEARCH_USERS,\n    INVITE_USER_SEARCH_USERS_START,\n    INVITE_USER_SEARCH_USERS_SUCCESS,\n    INVITE_USER_SEARCH_USERS_ERROR,\n\n    INVITE_USER_SELECT_USER,\n    INVITE_USER_SELECT_USER_START,\n    INVITE_USER_SELECT_USER_SUCCESS,\n    INVITE_USER_SELECT_USER_ERROR,\n\n    INVITE_USER_SEND_INVITATION,\n    INVITE_USER_SEND_INVITATION_START,\n    INVITE_USER_SEND_INVITATION_SUCCESS,\n    INVITE_USER_SEND_INVITATION_ERROR,\n\n\n    // Narrative add requests\n    REQUEST_ADD_NARRATIVE_LOAD,\n    REQUEST_ADD_NARRATIVE_LOAD_START,\n    REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n    REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n    REQUEST_ADD_NARRATIVE_UNLOAD,\n\n    REQUEST_ADD_NARRATIVE_SEND,\n    REQUEST_ADD_NARRATIVE_SEND_START,\n    REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SEND_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SORT,\n    REQUEST_ADD_NARRATIVE_SORT_START,\n    REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SORT_ERROR,\n\n    // VIEWS\n\n    ORGANIZATION_CENTRIC_VIEW_LOAD,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_START,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    ORGANIZATION_CENTRIC_VIEW_UNLOAD,\n\n    // ENTITIES\n\n    ENTITY_USER_LOADER,\n    ENTITY_USER_LOADER_START,\n    ENTITY_USER_LOADER_SUCCESS,\n    ENTITY_USER_LOADER_ERROR,\n\n    ENTITY_ORGANIZATION_LOADER,\n    ENTITY_ORGANIZATION_LOADER_START,\n    ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    ENTITY_ORGANIZATION_LOADER_ERROR,\n\n    ENTITY_NARRATIVE_LOAD,\n    ENTITY_NARRATIVE_LOAD_START,\n    ENTITY_NARRATIVE_LOAD_SUCCESS,\n    ENTITY_NARRATIVE_LOAD_ERROR,\n\n    ENTITY_ORGANIZATION_LOAD,\n    ENTITY_ORGANIZATION_LOAD_START,\n    ENTITY_ORGANIZATION_LOAD_SUCCESS,\n    ENTITY_ORGANIZATION_LOAD_ERROR,\n\n    // GLOBAL ACTIONS\n    // GLOBAL_ACCESS_NARRATIVE,\n    // GLOBAL_ACCESS_NARRATIVE_START,\n    // GLOBAL_ACCESS_NARRATIVE_SUCCESS,\n    // GLOBAL_ACCESS_NARRATIVE_ERROR,\n\n    // USER PROFILE\n    DATA_SERVICE_LOAD,\n    DATA_SERVICE_LOAD_START,\n    DATA_SERVICE_LOAD_SUCCESS,\n    DATA_SERVICE_LOAD_ERROR,\n    DATA_SERVICE_UNLOAD,\n\n    DATA_SERVICE_LOAD_REFRESH,\n    DATA_SERVICE_LOAD_REFRESH_START,\n    DATA_SERVICE_LOAD_REFRESH_SUCCESS,\n    DATA_SERVICE_LOAD_REFRESH_ERROR\n}\n","import { Action } from 'redux'\nimport {\n    StoreState, EditState, SaveState, ComponentLoadingState,\n    SyncState, ValidationErrorType\n} from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, Unload,\n    SaveError, SaveStart, SaveSuccess, AddOrgEvaluateOK, AddOrgEvaluateErrors,\n    LoadSuccess, UpdateNameSuccess, UpdateNameError,\n    UpdateIdSuccess, UpdateIdError, UpdateDescriptionSuccess,\n    UpdateDescriptionError,\n    LoadError,\n    UpdateIdPass,\n    UpdateIsPrivateSuccess,\n    UpdateLogoUrlSuccess,\n    UpdateLogoUrlError,\n    UpdateHomeUrlSuccess,\n    UpdateHomeUrlError,\n    UpdateResearchInterestsSuccess,\n    UpdateResearchInterestsError\n} from '../actions/addOrg'\n\n// ADD ORG\n\nexport function saveStart(state: StoreState, action: SaveStart): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveStart without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: SaveSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function saveError(state: StoreState, action: SaveError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateOk(state: StoreState, action: AddOrgEvaluateOK): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateErrors(state: StoreState, action: AddOrgEvaluateErrors): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'TODO: form error',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    },\n                    saveState: SaveState.NEW,\n                    error: null,\n                    newOrganization: action.newOrganization\n                }\n            }\n        }\n    }\n}\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// Name\nexport function updateNameSuccess(state: StoreState, action: UpdateNameSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateNameError(state: StoreState, action: UpdateNameError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo URL\nexport function updateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL error without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Home URL\nexport function updateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Home URL (success) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to home url without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Research Interests\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Research Interests without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to research interests (error) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\nexport function updateIdSuccess(state: StoreState, action: UpdateIdSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdError(state: StoreState, action: UpdateIdError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdPass(state: StoreState, action: UpdateIdPass): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY\n                            // validationState: {\n                            //     type: ValidationErrorType.OK,\n                            //     validatedAt: new Date()\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: UpdateDescriptionSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionError(state: StoreState, action: UpdateDescriptionError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        isPrivate: {\n                            ...state.views.addOrgView.viewModel.newOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.ADD_ORG_SAVE:\n            return saveStart(state, action as SaveStart)\n        case ActionFlag.ADD_ORG_SAVE_SUCCESS:\n            return saveSuccess(state, action as SaveSuccess)\n        case ActionFlag.ADD_ORG_SAVE_ERROR:\n            return saveError(state, action as SaveError)\n\n        case ActionFlag.ADD_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.ADD_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.ADD_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.ADD_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS:\n            return updateNameSuccess(state, action as UpdateNameSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_NAME_ERROR:\n            return updateNameError(state, action as UpdateNameError)\n\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return updateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR:\n            return updateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS:\n            return updateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR:\n            return updateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS:\n            return updateIdSuccess(state, action as UpdateIdSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_ID_ERROR:\n            return updateIdError(state, action as UpdateIdError)\n        case ActionFlag.ADD_ORG_UPDATE_ID_PASS:\n            return updateIdPass(state, action as UpdateIdPass)\n\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as UpdateDescriptionSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR:\n            return updateDescriptionError(state, action as UpdateDescriptionError)\n\n        case ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        case ActionFlag.ADD_ORG_EVALUATE_OK:\n            return addOrgEvaluateOk(state, action as AddOrgEvaluateOK)\n        case ActionFlag.ADD_ORG_EVALUATE_ERRORS:\n            return addOrgEvaluateErrors(state, action as AddOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport {\n    StoreState, EditState, SaveState, ComponentLoadingState,\n    ValidationErrorType, SyncState, ValidationState, ValidationStateOk, EditOrgViewModel\n} from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, LoadSuccess, LoadError,\n    EditOrgEvaluateOK, EditOrgEvaluateErrors,\n    EditOrgSave, EditOrgSaveStart, EditOrgSaveError, EditOrgSaveSuccess,\n    EditOrgUpdateNameSuccess, EditOrgUpdateNameError,\n    // EditOrgUpdateIdSuccess, EditOrgUpdateIdError,\n    EditOrgUpdateDescriptionSuccess, EditOrgUpdateDescriptionError,\n    UpdateIsPrivateSuccess, UpdateLogoUrlSuccess, UpdateLogoUrlError,\n    UpdateHomeUrlSuccess, UpdateHomeUrlError, UpdateResearchInterestsError,\n    UpdateResearchInterestsSuccess, Unload\n} from '../actions/editOrg'\nimport { StateInstances } from '../state';\n\n\n\n// EDIT ORG\n\n// Edit session loading\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: validationStateOk(),\n                    // validationState: {\n                    //     type: ValidationErrorType.OK,\n                    //     validatedAt: new Date()\n                    // },\n                    saveState: SaveState.NEW,\n                    // TODO: get rid of this...\n                    // organizationId: action.id,\n                    organization: action.organization,\n                    saveError: null,\n                    editedOrganization: action.editedOrganization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// save\n\nexport function editOrgSaveStart(state: StoreState, action: EditOrgSaveStart): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveSuccess(state: StoreState, action: EditOrgSaveSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editedOrganization: {\n                        id: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.id,\n                            syncState: SyncState.CLEAN\n                        },\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            syncState: SyncState.CLEAN\n                        },\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            syncState: SyncState.CLEAN\n                        },\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            syncState: SyncState.CLEAN\n                        },\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveError(state: StoreState, action: EditOrgSaveError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    saveError: action.error\n                }\n            }\n        }\n    }\n}\n\n// Evaluate edit session\n\nexport function editOrgEvaluateOk(state: StoreState, action: EditOrgEvaluateOK): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgEvaluateErrors(state: StoreState, action: EditOrgEvaluateErrors): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation errors',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateEditorState(viewModel: EditOrgViewModel): EditState {\n    if (viewModel.editedOrganization.name.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.id.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.logoUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.homeUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.researchInterests.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.isPrivate.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.description.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\n\n\n// Name\nexport function editOrgUpdateNameSuccess(state: StoreState, action: EditOrgUpdateNameSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.name !== editedOrg.name.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    // editState: editState,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateNameError(state: StoreState, action: EditOrgUpdateNameError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo url\nexport function editOrgUpdateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Home Url\n\n// Logo url\nexport function editOrgUpdateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Research Interests\n\n// Logo url\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: EditOrgUpdateDescriptionSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.description !== editedOrg.description.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateDescriptionError(state: StoreState, action: EditOrgUpdateDescriptionError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.isPrivate !== editedOrg.isPrivate.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.EDIT_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.EDIT_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.EDIT_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n\n        case ActionFlag.EDIT_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.EDIT_ORG_SAVE_START:\n            return editOrgSaveStart(state, action as EditOrgSaveStart)\n        case ActionFlag.EDIT_ORG_SAVE_SUCCESS:\n            return editOrgSaveSuccess(state, action as EditOrgSaveSuccess)\n        case ActionFlag.EDIT_ORG_SAVE_ERROR:\n            return editOrgSaveError(state, action as EditOrgSaveError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS:\n            return editOrgUpdateNameSuccess(state, action as EditOrgUpdateNameSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR:\n            return editOrgUpdateNameError(state, action as EditOrgUpdateNameError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return editOrgUpdateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR:\n            return editOrgUpdateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS:\n            return editOrgUpdateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR:\n            return editOrgUpdateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS:\n        //     return editOrgUpdateIdSuccess(state, action as EditOrgUpdateIdSuccess)\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_ERROR:\n        //     return editOrgUpdateIdError(state, action as EditOrgUpdateIdError)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as EditOrgUpdateDescriptionSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR:\n            return editOrgUpdateDescriptionError(state, action as EditOrgUpdateDescriptionError)\n        case ActionFlag.EDIT_ORG_EVALUATE_OK:\n            return editOrgEvaluateOk(state, action as EditOrgEvaluateOK)\n        case ActionFlag.EDIT_ORG_EVALUATE_ERRORS:\n            return editOrgEvaluateErrors(state, action as EditOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/acceptInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function acceptInboxRequestSuccess(state: StoreState, action: actions.AcceptRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS:\n            return acceptInboxRequestSuccess(state, action as actions.AcceptRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/viewMembers'\nimport { StoreState, MemberType, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n// export function loadStart(state: StoreState, action: actions.LoadStart) {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.LOADING,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function unload(state: StoreState, action: actions.Unload): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.NONE,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.SUCCESS,\n//                 viewModel: {\n//                     organization: action.organization,\n//                     relation: action.relation\n//                 },\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadError(state: StoreState, action: actions.LoadError): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.ERROR,\n//                 viewModel: null,\n//                 error: action.error\n//             }\n//         }\n//     }\n// }\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    const sortedMembers = viewModel.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function removeMemberSuccess(state: StoreState, action: actions.RemoveMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    const sortedMembers = viewModel.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function sortMembersSuccess(state: StoreState, action: actions.SortMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortMembersBy: action.sortBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nexport function searchMembersSuccess(state: StoreState, action: actions.SearchMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchMembersBy: action.searchBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        // case ActionFlag.VIEW_MEMBERS_LOAD_START:\n        //     return loadStart(state, action as actions.LoadStart)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n        //     return loadSuccess(state, action as actions.LoadSuccess)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n        //     return loadError(state, action as actions.LoadError)\n        // case ActionFlag.VIEW_MEMBERS_UNLOAD:\n        //     return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS:\n            return removeMemberSuccess(state, action as actions.RemoveMemberSuccess)\n        case ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS:\n            return sortMembersSuccess(state, action as actions.SortMembersSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS:\n            return searchMembersSuccess(state, action as actions.SearchMembersSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/denyInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function rejectInboxRequestSuccess(state: StoreState, action: actions.RejectInboxRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS:\n            return rejectInboxRequestSuccess(state, action as actions.RejectInboxRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/cancelOutboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function cancelRequestSuccess(state: StoreState, action: actions.CancelJoinRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestOutbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS:\n            return cancelRequestSuccess(state, action as actions.CancelJoinRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { AppException } from \"../../types\";\n\nexport const MAX_GROUPS_PER_LIST_REQUEST = 100\n\nexport interface GroupsServiceInfo {\n    servname: string;\n    version: string;\n    servertime: number;\n    gitcommithash: string\n}\n\nexport type Username = string\nexport type GroupID = string\n\nexport interface Member {\n    name: Username,\n    joined: number,\n    lastvisit: number | null,\n    custom: {\n        title: string\n    }\n}\n\nexport interface Resource {\n    rid: string\n    added: number | null\n}\n\nexport interface WorkspaceInfo extends Resource {\n    name: string\n    narrname: string\n    narrcreate: number\n    public: boolean\n    perm: string\n    description: string\n    moddate: number\n}\n\nexport interface AppInfo extends Resource {\n}\n\nexport type Role = \"None\" | \"Member\" | \"Admin\" | \"Owner\"\n\nexport interface GroupCustomFields {\n    logourl?: string\n    description: string\n    researchinterests: string\n    homeurl?: string\n    relatedgroups?: string\n}\n\nexport interface BriefGroup {\n    id: GroupID\n    name: string\n    createdate: number\n    moddate: number\n    lastvisit: number | null\n    private: boolean\n    role: Role\n\n    custom: GroupCustomFields\n    // owner: Member\n    owner: Username\n\n    memcount: number\n    rescount: {\n        workspace: number\n    }\n}\n\nexport interface InaccessiblePrivateGroup {\n    id: GroupID\n    private: boolean\n    role: Role\n}\n\nexport interface Group {\n    id: GroupID\n    private: boolean\n    privatemembers: boolean\n    name: string\n    role: Role\n    owner: Member\n    admins: Array<Member>\n    members: Array<Member>\n    memcount: number\n    createdate: number\n    moddate: number\n    lastvisit: number\n    resources: {\n        workspace: Array<WorkspaceInfo>,\n        catalogmethod: Array<AppInfo>\n    }\n    rescount: {\n        workspace: number\n        catalogmethod: number\n    }\n    custom: GroupCustomFields\n}\n\nexport interface NewGroup {\n    id: string\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    isPrivate: boolean\n}\n\nexport interface GroupUpdate {\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    private: boolean\n}\n\nexport interface Request {\n    id: string\n    groupid: string\n    requester: Username\n    type: string\n    status: string\n    resource: string\n    resourcetype: string\n    createdate: number\n    expiredate: number\n    moddate: number\n}\n\nexport interface RequestWithCompletion extends Request {\n    complete: false\n}\n\nexport interface Completion {\n    complete: true\n}\n\nexport interface ErrorInfo {\n    appcode: number\n    apperror: string\n    callid: string\n    httpcode: number\n    httpstatus: string\n    message: string\n    time: number\n}\n\nexport interface ErrorResult {\n    error: ErrorInfo\n}\n\n// Error types: (appcode)\n// 10000\tAuthentication failed\n// 10010\tNo authentication token\n// 10020\tInvalid token\n// 20000\tUnauthorized\n// 30000\tMissing input parameter\n// 30001\tIllegal input parameter\n// 30010\tIllegal user name\n// 40000\tGroup already exists\n// 40010\tRequest already exists\n// 40020\tUser already group member\n// 40030\tWorkspace already in group\n// 50000\tNo such group\n// 50010\tNo such request\n// 50020\tNo such user\n// 50030\tNo such workspace\n// 60000\tUnsupported operation\n\nexport interface GroupExists {\n    exists: boolean\n}\n\n// export interface GroupRequest {\n//     id: string,\n//     groupid: string,\n//     requester: Username,\n//     type: string,\n//     status: string,\n//     resource: string\n//     resourcetype: string\n//     createdate: number,\n//     expiredate: number,\n//     moddate: number\n// }\n\nexport enum SortDirection {\n    ASCENDING = 0,\n    DESCENDING\n}\n\nexport interface GetRequestsParams {\n    includeClosed?: boolean,\n    sortDirection?: SortDirection,\n    startAt?: Date\n}\n\nexport interface RequestMemebershipParams {\n    groupId: string\n}\n\nexport interface RequestNarrativeParams {\n    workspaceId: number\n    groupId: string\n}\n\nfunction promiseTry<T>(fun: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        try {\n            return resolve(fun())\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n}\n\nexport interface GroupError {\n    httpcode: number\n    httpstatus: string\n    appcode: number\n    apperror: string\n    message: string\n    callid: string\n    time: number\n}\n\nexport class Exception extends Error {\n\n}\n\nexport class GroupException extends AppException {\n    originalError: GroupError\n    constructor(error: GroupError) {\n        super({\n            code: 'group-exception',\n            message: error.apperror,\n            detail: error.message,\n            info: new Map<string, any>([\n                ['httpcode', error.httpcode],\n                ['httpstatus', error.httpstatus],\n                ['appcode', error.appcode],\n                ['apperror', error.apperror],\n                ['message', error.message],\n                ['callid', error.callid],\n                ['time', error.time]\n            ])\n        })\n        this.name = 'GroupException'\n        this.originalError = error\n    }\n}\n\nexport interface RequestStatus {\n    new: 'None' | 'New' | 'Old'\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport class GroupsClient {\n    token: string;\n    url: string;\n\n    constructor({ token, url }: { token: string, url: string }) {\n        this.token = token\n        this.url = url\n    }\n\n    getInfo(): Promise<GroupsServiceInfo> {\n        return fetch(this.url + '/', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((result) => {\n                return result as GroupsServiceInfo;\n            });\n    }\n\n    groupExists(id: string): Promise<GroupExists> {\n        return fetch(this.url + '/group/' + id + '/exists')\n            .then((response) => {\n                return response.json()\n            })\n            .then((exists) => {\n                return exists as GroupExists\n            })\n    }\n\n    // getGroups(): Promise<GroupList> {\n    //     return fetch(this.url + '/group', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json()\n    //         })\n    //         .then((result: GroupList) => {\n    //             return result.filter(({ type }) => type === 'Organization')\n    //         })\n    // }\n\n    async listGroups(): Promise<Array<BriefGroup>> {\n        const response = await fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n        if (response.status !== 200) {\n            console.error('error fetching groups', response)\n            throw new Error('Error fetching groups')\n        }\n        return await response.json()\n    }\n\n    getGroupById(id: string): Promise<Group | InaccessiblePrivateGroup> {\n        return fetch(this.url + '/group/' + id, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status === 404) {\n                    return null\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Group\n            })\n    }\n\n    put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new GroupException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status === 200) {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                } else if (response.status === 204) {\n                    const result = null as unknown\n                    return result as T\n                } else {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    createGroup(newGroup: NewGroup): Promise<Group> {\n        // argh!! description should be mandatory, but now it is a custom \n        // field and it is not yet defined in the service.\n        // TODO: we need the groups service to have default custom fields.\n        // At that point, what IS the point of custom fields ... oh, I know that\n        // there are internal reasons for this due to re-using \"group\" for \n        // organization, project, etc., but that should not leak through the \n        // api.\n\n        // mandatory fields.\n        const payload: any = {\n            name: newGroup.name,\n            private: newGroup.isPrivate,\n            custom: {\n                logourl: newGroup.logoUrl,\n                researchinterests: newGroup.researchInterests,\n                homeurl: newGroup.homeUrl\n            }\n        }\n\n        // optional fields\n        if (newGroup.description.length > 0) {\n            payload.custom.description = newGroup.description\n        }\n\n        return this.put<Group>(['group', newGroup.id], payload)\n    }\n\n    updateGroup(id: string, groupUpdate: GroupUpdate): Promise<void> {\n        const payload: any = {\n            name: groupUpdate.name,\n            custom: {\n                logourl: groupUpdate.logoUrl,\n                homeurl: groupUpdate.homeUrl,\n                researchinterests: groupUpdate.researchInterests\n            },\n            private: groupUpdate.private\n        }\n        // TODO: remove this when we have descriptions restored to the\n        // groups service.\n        if (groupUpdate.description) {\n            payload.custom.description = groupUpdate.description\n        }\n        return fetch(this.url + '/group/' + id + '/update', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n\n            // TODO: build more intelligently\n            body: JSON.stringify(payload)\n        })\n            .then((response) => {\n                // response is an empty body.\n                if (response.status === 204) {\n                    return\n                }\n                throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n            })\n    }\n\n    async addRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is not already there\n        if (relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: relatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async removeRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is already there\n        if (!relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        const newRelatedGroups = relatedGroups.filter((groupId) => {\n            return groupId !== relatedGroupId\n        })\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: newRelatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async getRequest(requestId: string): Promise<Request> {\n        const path = ['request', 'id', requestId]\n        return await this.get<Request>(path)\n    }\n\n    getGroupRequests(groupId: string, params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n\n        return fetch(this.url + '/group/' + groupId + '/requests?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getTargetedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/targeted?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getCreatedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/created?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'appcliation/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    addOrRequestNarrative(params: RequestNarrativeParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            'workspace',\n            String(params.workspaceId)\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    async grantResourceAccess(groupId: string, resourceType: string, resourceId: string): Promise<null> {\n        const path = [\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId,\n            'getperm'\n        ]\n        return this.post<null>(path, null)\n    }\n\n    deleteResource(groupId: string, resourceType: string, resourceId: string): Promise<void> {\n        const url = [\n            this.url,\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    cancelRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/cancel', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    acceptRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/accept', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    grantReadAccessToRequestedResource({ requestId }: { requestId: string }): Promise<null> {\n        const path = ['request', 'id', requestId, 'getperm']\n        return this.post<null>(path, null)\n    }\n\n\n    denyRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/deny', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    memberToAdmin({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    adminToMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    updateMember({ groupId, memberUsername, update }: { groupId: string, memberUsername: string, update: any }): Promise<void> {\n        const path = [\n            'group', groupId, 'user', memberUsername, 'update'\n        ]\n\n        return this.put<void>(path, { custom: update })\n    }\n\n    removeMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n            })\n    }\n\n    requestMembership(params: RequestMemebershipParams): Promise<Request> {\n        return fetch(this.url + '/group/' + params.groupId + '/requestmembership', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    inviteUserToGroup({ groupId, username }: { groupId: string, username: string }): Promise<Request> {\n        const url = [\n            this.url, 'group', groupId, 'user', username\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    async visitGroup({ groupId }: { groupId: string }): Promise<void> {\n        const path = ['group', groupId, 'visit']\n        return this.put<void>(path, null)\n    }\n\n    async getOpenRequests({ groupIds }: { groupIds: Array<string> }): Promise<Map<GroupID, RequestStatus>> {\n        const path = ['request', 'groups', groupIds.join(','), 'new']\n        const result = await this.get<any>(path)\n        const requestStatuses = new Map<GroupID, RequestStatus>()\n        for (const [groupId, requestStatus] of Object.entries(result)) {\n            requestStatuses.set(groupId, <RequestStatus>requestStatus)\n        }\n        return requestStatuses\n    }\n}","import * as groupsApi from '../apis/groups'\nimport * as orgModel from './organization/model'\n\nexport type Username = string\n\nexport type RequestID = string\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport interface BaseRequest {\n    id: string\n    organizationId: string\n    requester: Username\n    type: RequestType\n    status: RequestStatus\n    resourceType: RequestResourceType\n    createdAt: Date\n    expireAt: Date\n    modifiedAt: Date\n}\n\nexport interface UserRequest extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.REQUEST\n    user: Username\n}\n\nexport interface UserInvitation extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.INVITATION\n    user: Username\n}\n\nexport interface WorkspaceRequest extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.REQUEST\n    narrativeId: string,\n}\n\nexport interface WorkspaceInvitation extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.INVITATION\n    narrativeId: string\n}\n\nexport interface AppRequest extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.REQUEST\n    appId: string\n}\n\nexport interface AppInvitation extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.INVITATION\n    appId: string\n}\n\nexport type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\n\nfunction stringToRequestType(type: string): RequestType {\n    switch (type) {\n        case 'Invite':\n            return RequestType.INVITATION\n        case 'Request':\n            return RequestType.REQUEST\n        default:\n            throw new Error('unknown request type: ' + type)\n    }\n}\n\nfunction stringToResourceType(type: string) {\n    switch (type) {\n        case 'user':\n            return RequestResourceType.USER\n        case 'workspace':\n            return RequestResourceType.WORKSPACE\n        case 'catalogmethod':\n            return RequestResourceType.APP\n        default:\n            throw new Error('unknown resource type: ' + type)\n    }\n}\n\nfunction stringToRequestStatus(status: string): RequestStatus {\n    return RequestStatus.OPEN\n}\n\nexport function groupRequestToOrgRequest(request: groupsApi.Request): Request {\n\n    const requestType = stringToRequestType(request.type)\n    const resourceType = stringToResourceType(request.resourcetype)\n    const requestStatus = stringToRequestStatus(request.status)\n\n    switch (resourceType) {\n        case RequestResourceType.USER:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserInvitation\n            }\n\n        case RequestResourceType.WORKSPACE:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceInvitation\n            }\n\n        case RequestResourceType.APP:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppInvitation\n            }\n        default:\n            throw new Error('resource type not handled yet: ' + request.resourcetype)\n    }\n}\n\ninterface RequestsModelParams {\n    groupsServiceURL: string\n    token: string\n    username: Username\n}\n\nexport class RequestsModel {\n\n    params: RequestsModelParams\n    groupsClient: groupsApi.GroupsClient\n    cache: Map<RequestID, Request>\n\n    constructor(params: RequestsModelParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map()\n    }\n\n    async getRequest(requestId: RequestID): Promise<Request> {\n        if (this.cache.has(requestId)) {\n            return this.cache.get(requestId)!\n        }\n\n        const grequest = await this.groupsClient.getRequest(requestId)\n        const request = groupRequestToOrgRequest(grequest)\n\n        this.cache.set(request.id, request)\n        return request\n    }\n\n    async getOutboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserRequestForOrg(organizationId: orgModel.OrganizationID): Promise<UserRequest | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return r.groupid === organizationId\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserRequest\n    }\n\n    async getPendingRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    /*\n        For a given organization (by id), return a list of all requests to that org \n    */\n    async getCombinedRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        let requests: Array<Request>\n\n        // const grequests = await groupsClient.getTargetedRequests({\n        //     includeClosed: false,\n        //     sortDirection: groupsApi.SortDirection.DESCENDING\n        // })\n\n        // // TODO should work in synchrony with above...\n        // return grequests\n        //     .filter((r) => {\n        //         return r.groupid === organizationId\n        //     })\n        //     .map((r) => {\n        //         return groupRequestToOrgRequest(r)\n        //     })\n\n        try {\n            requests = (await groupsClient.getGroupRequests(organizationId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            }))\n                .map((request) => {\n                    return groupRequestToOrgRequest(request)\n                })\n        } catch (ex) {\n            requests = []\n        }\n\n        return requests\n    }\n\n    async getRequestOutboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n\n    async getOrganizationInvitations(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        }).filter((request) => {\n            return (request.type === RequestType.INVITATION)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getOrganizationInvitationsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const invitations = await this.getOrganizationInvitations()\n        return invitations.filter((invitation) => {\n            return (invitation.organizationId === organizationId)\n        })\n    }\n\n    async getInboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserInvitationForOrg(organizationId: orgModel.OrganizationID): Promise<UserInvitation | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return (r.groupid === organizationId)\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserInvitation\n    }\n\n    async getPendingOrganizationRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await groupsClient.getGroupRequests(organizationId, {\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        return groupRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        // const [groupRequests, adminRequests] = await Promise.all([\n        //     groupsClient.getGroupRequests(groupId, {\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     }),\n        //     groupsClient.getCreatedRequests({\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     })\n        // ])\n        // const groupAdminRequests = adminRequests.filter((request) => {\n        //     return (request.groupid === groupId)\n        // })\n\n        // return Promise.all(groupRequests.concat(groupAdminRequests).map((request) => {\n        //     return groupRequestToOrgRequest(request)\n        // }))\n    }\n\n    async getPendingOrganizationRequests(groupIds: Array<string>): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await Promise.all(groupIds.map((groupId) => {\n            return groupsClient.getGroupRequests(groupId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            })\n        }))\n\n        const allRequests = groupRequests.reduce((allRequests, requests) => {\n            return allRequests.concat(requests)\n        }, [])\n\n        return allRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n    }\n\n    async cancelRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.cancelRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async denyRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async rejectJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async inviteUserToJoinOrg(groupId: string, username: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.inviteUserToGroup({\n            groupId,\n            username\n        })\n            .then((request) => {\n                return groupRequestToOrgRequest(request)\n            })\n    }\n}","export interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONResponse {\n    id: string\n    version: string\n    result: any\n    error: any\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null;\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: ServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    callFunc(func: string, param: any): Promise<JSONResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Request error: ' + response.status + ', ' + response.statusText)\n                }\n                return <unknown>response.json() as JSONResponse\n            })\n    }\n}\n\n","import { ServiceClientParams, ServiceClient, AuthorizedServiceClient } from \"./serviceClient\";\n\nexport interface User {\n    username: string,\n    realname: string,\n    thumbnail: string\n}\n\nexport type OrganizationSetting = {\n    settings: {\n        lastVisitedAt: Date | null\n    }\n}\n\nexport type OrganizationsSettings = {\n    orgSettings: any //Map<string, OrganizationSetting>\n}\n\nexport interface UserProfile {\n    user: User,\n    profile: {\n        synced: {\n            gravatarHash: string\n        }\n        userdata: {\n            jobTitle: string,\n            jobTitleOther: string,\n            organization: string\n            city: string\n            state: string\n            country: string\n            avatarOption: string\n            gravatarDefault: string\n        }\n        metadata: {\n            createdBy: string\n            created: string\n        }\n        plugins: {\n            organizations?: OrganizationsSettings\n        }\n    }\n}\n\n// Note that we are only supporting updating of the orgs plugin settings, \n// so make this strict-ish.\nexport interface UserProfileUpdate {\n    user: User,\n    profile: {\n        plugins: {\n            organizations: OrganizationsSettings\n        }\n    }\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\n\nexport interface UserProfileClientParams extends ServiceClientParams {\n}\n\nexport class UserProfileClient extends AuthorizedServiceClient {\n    static module: string = 'UserProfile'\n    static profileCache: Map<string, UserProfile> = new Map()\n\n    constructor(params: UserProfileClientParams) {\n        super(params)\n    }\n\n    // makePayload(method: string, param: any): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: [param]\n    //     }\n    // }\n\n    // makeEmptyPayload(method: string): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: []\n    //     }\n    // }\n\n    getVersion(): Promise<any> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makeEmptyPayload('version'))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    async getUserProfile(username: string): Promise<UserProfile> {\n        if (UserProfileClient.profileCache.has(username)) {\n            return Promise.resolve(UserProfileClient.profileCache.get(username)!)\n        }\n\n        return this.callFunc('get_user_profile', [username])\n            .then((result) => {\n                return result.result[0][0] as UserProfile\n            })\n    }\n\n    async updateUserProfile(update: UserProfileUpdate): Promise<void> {\n        // TODO: update user profile cache here...\n        UserProfileClient.profileCache.delete(update.user.username)\n        return this.callFunc('update_user_profile', { profile: update })\n            .then(() => {\n                return\n            })\n    }\n\n    // async setUserProfile(username: string, profile: UserProfile): Promise<void> {\n    //     // TODO: update user profile cache here...\n    //     this.callFunc('update_user_profile', profile)\n    // }\n\n    async getUserProfiles(usernames: Array<string>): Promise<Array<UserProfile>> {\n        return this.callFunc('get_user_profile', usernames)\n            .then((result) => {\n                return result.result[0] as Array<UserProfile>\n            })\n    }\n\n    async getAllUsers(): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: '' })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n\n    async searchUsers(query: string): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: query })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n}","import { UserProfileClient, UserProfile } from '../apis/userProfile'\n\n\nexport type Username = string\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\n\nfunction profileToUser(profile: UserProfile): User {\n    let jobTitle\n    if (!profile.profile.userdata) {\n        return {\n            username: profile.user.username,\n            realname: profile.user.realname,\n            city: null,\n            state: null,\n            country: null,\n            title: null,\n            organization: null,\n            avatarOption: null,\n            gravatarHash: null,\n            gravatarDefault: null\n        }\n    }\n    if (profile.profile.userdata.jobTitle === 'Other') {\n        jobTitle = profile.profile.userdata.jobTitleOther\n    } else {\n        jobTitle = profile.profile.userdata.jobTitle\n    }\n\n    return {\n        username: profile.user.username,\n        realname: profile.user.realname,\n        city: profile.profile.userdata.city,\n        state: profile.profile.userdata.state,\n        country: profile.profile.userdata.country,\n        title: jobTitle,\n        organization: profile.profile.userdata.organization,\n        avatarOption: profile.profile.userdata.avatarOption,\n        gravatarHash: profile.profile.synced.gravatarHash,\n        gravatarDefault: profile.profile.userdata.gravatarDefault\n    }\n}\n\nexport interface UserQuery {\n    query: string\n    excludedUsers: Array<string>\n}\n\nexport interface BriefUser {\n    username: string\n    realname: string\n}\n\n\n\n\ninterface UserModelParams {\n    userProfileServiceURL: string\n    token: string\n}\n\nexport class UserModel {\n\n    params: UserModelParams\n    userProfileClient: UserProfileClient\n\n    cache: Map<Username, User>\n\n    constructor(params: UserModelParams) {\n        this.params = params\n        this.userProfileClient = new UserProfileClient({\n            url: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map<Username, User>()\n    }\n\n    async getUser(username: Username): Promise<User> {\n        if (this.cache.has(username)) {\n            return this.cache.get(username)!\n        }\n\n        const userProfile = await this.userProfileClient.getUserProfile(username)\n        const user = profileToUser(userProfile)\n        this.cache.set(username, user)\n        return user\n    }\n\n    async getUsers(usernames: Array<Username>): Promise<Map<Username, User>> {\n        const result: Map<Username, User> = new Map()\n\n        const toFetch: Array<Username> = []\n\n        usernames.forEach((username) => {\n            if (this.cache.has(username)) {\n                result.set(username, this.cache.get(username)!)\n            } else {\n                toFetch.push(username)\n            }\n        })\n\n        const userProfiles = await this.userProfileClient.getUserProfiles(toFetch)\n        const users = userProfiles.map((profile) => {\n            return profileToUser(profile)\n        })\n\n        userProfiles.forEach((userProfile) => {\n            const user = profileToUser(userProfile)\n            this.cache.set(user.username, user)\n            result.set(user.username, user)\n        })\n\n        return result\n    }\n\n    async searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n        const users = await this.userProfileClient.searchUsers(query.query)\n        return users\n            .filter(({ username }) => {\n                return (query.excludedUsers.indexOf(username) === -1)\n            })\n            .map(({ username, realname }) => {\n                return {\n                    username, realname\n                }\n            })\n    }\n\n    // searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.searchUsers(query.query)\n    //         .then((users) => {\n    //             return users\n    //                 .filter(({ username }) => {\n    //                     return (query.excludedUsers.indexOf(username) === -1)\n    //                 })\n    //                 .map(({ username, realname }) => {\n    //                     return {\n    //                         username, realname\n    //                     }\n    //                 })\n\n    //         })\n    // }\n\n    // getUser(username: string): Promise<User> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.getUserProfile(username)\n    //         .then((userProfile) => {\n    //             return this.profileToUser(userProfile)\n    //         })\n    // }\n}","import * as groupsApi from '../../apis/groups'\nimport {\n    SortDirection, EditableOrganization, ValidationState, EditableString, ValidationErrorType\n} from '../../../types';\nimport * as requestModel from '../requests'\nimport * as userModel from '../user'\nimport Validation from './validation'\nimport { string } from 'prop-types';\n\nexport interface OrganizationUpdate {\n    name: string\n    logoUrl: string | null\n    description: string\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport interface EditableMemberProfile {\n    title: EditableString\n}\nexport enum UserRelationToOrganization {\n    NONE = 'NONE',\n    VIEW = 'VIEW',\n    MEMBER_REQUEST_PENDING = 'MEMBER_REQUEST_PENDING',\n    MEMBER_INVITATION_PENDING = 'MEMBER_INVITATION_PENDING',\n    MEMBER = 'MEMBER',\n    ADMIN = 'ADMIN',\n    OWNER = 'OWNER'\n}\n\nexport interface UserOrgRelation {\n    type: UserRelationToOrganization\n}\n\nexport interface NoRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.NONE\n}\n\nexport interface ViewRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.VIEW\n}\n\nexport interface MembershipRequestPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n    requestId: string\n}\n\nexport interface MembershipInvitationPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n    requestId: string\n}\n\nexport interface MemberRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER\n}\n\nexport interface AdminRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.ADMIN\n}\n\nexport interface OwnerRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.OWNER\n}\n\nexport type Relation = NoRelation | ViewRelation | MembershipRequestPendingRelation | MembershipInvitationPendingRelation | MemberRelation | AdminRelation | OwnerRelation\n\nexport type Username = string\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    username: groupsApi.Username\n    realname: string\n    joinedAt: Date\n    lastVisitedAt: Date | null\n    type: MemberType\n    title: string | null\n}\n\nexport interface MemberUpdate {\n    title?: string\n}\n\nexport enum UserWorkspacePermission {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport type WorkspaceID = number\n\nexport interface NarrativeResource {\n    workspaceId: number\n    title: string\n    permission: UserWorkspacePermission\n    isPublic: boolean\n    createdAt: Date\n    updatedAt: Date\n    addedAt: Date | null\n    description: string\n}\n\nexport type AppID = string\n\nexport interface AppInfo {\n    appId: AppID\n}\n\nexport interface BriefOrganization {\n    id: string\n    name: string\n    logoUrl: string | null\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string | null\n    // TODO: we need researchInterests here\n    owner: Member\n    relation: UserRelationToOrganization\n\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n\n    memberCount: number\n    narrativeCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\nexport enum OrganizationKind {\n    NORMAL = 0,\n    INACCESSIBLE_PRIVATE\n}\n\nexport interface InaccessiblePrivateOrganization {\n    kind: OrganizationKind.INACCESSIBLE_PRIVATE\n    id: string\n    isPrivate: boolean\n    relation: UserRelationToOrganization\n}\n\nexport interface Organization {\n    kind: OrganizationKind.NORMAL\n    id: string\n    name: string\n\n    isPrivate: boolean\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    relation: UserRelationToOrganization\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    owner: Member\n    areMembersPrivate: boolean\n    members: Array<Member>\n    // relation: UserOrgRelation\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n    narratives: Array<NarrativeResource>\n    apps: Array<AppInfo>\n    memberCount: number\n    narrativeCount: number\n    appCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\n// export interface RequestStatus {\n//     new: boolean,\n//     old: boolean\n// }\n\n// LEFT OF HERE - inapplicable should be set if the user is not an admin.\nexport enum RequestStatus {\n    INAPPLICABLE = 'INAPPLICABLE',\n    NONE = 'NONE',\n    OLD = 'OLD',\n    NEW = 'NEW'\n}\n\nexport function determineRelation(\n    org: Organization | InaccessiblePrivateOrganization,\n    username: userModel.Username,\n    request: requestModel.UserRequest | null,\n    invitation: requestModel.UserInvitation | null): Relation {\n\n    if (org.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n        if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n\n    if (username === org.owner.username) {\n        return {\n            type: UserRelationToOrganization.OWNER\n        } as OwnerRelation\n    } else {\n        const member = org.members.find((member) => {\n            return (member.username === username)\n        })\n        if (member) {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    return {\n                        type: UserRelationToOrganization.MEMBER\n                    } as MemberRelation\n                case MemberType.ADMIN:\n                    return {\n                        type: UserRelationToOrganization.ADMIN\n                    } as AdminRelation\n                case MemberType.OWNER:\n                    return {\n                        type: UserRelationToOrganization.OWNER\n                    } as OwnerRelation\n                default:\n                    return {\n                        type: UserRelationToOrganization.NONE\n                    } as NoRelation\n            }\n        } else if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n}\n\nfunction groupPermissionToWorkspacePermission(groupsPermission: string): UserWorkspacePermission {\n    switch (groupsPermission) {\n        case 'None':\n            return UserWorkspacePermission.NONE\n        case 'Read':\n            return UserWorkspacePermission.VIEW\n        case 'Write':\n            return UserWorkspacePermission.EDIT\n        case 'Admin':\n            return UserWorkspacePermission.ADMIN\n        case 'Own':\n            return UserWorkspacePermission.OWNER\n        default:\n            throw new Error('Invalid groups user permission: ' + groupsPermission)\n    }\n}\n\nfunction getRealname(users: Map<userModel.Username, userModel.User>, username: string, defaultValue: string) {\n    const user = users.get(username)\n    if (!user) {\n        return defaultValue\n    }\n    return user.realname\n}\n\nexport function groupToOrganization(group: groupsApi.Group, currentUser: Username, users: Map<userModel.Username, userModel.User>): Organization {\n\n\n\n    const owner: Member = {\n        username: group.owner.name,\n        realname: getRealname(users, group.owner.name, 'n/a'),\n        joinedAt: new Date(group.owner.joined),\n        lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n        type: MemberType.OWNER,\n        title: group.owner.custom.title\n    }\n\n    // We join admins and members, since they are all members, just different privileges in the org\n    const members = (<Array<Member>>[\n        // owner\n    ]).concat(group.admins.map((admin) => {\n        return {\n            username: admin.name,\n            realname: getRealname(users, admin.name, 'n/a'),\n            joinedAt: new Date(admin.joined),\n            lastVisitedAt: admin.lastvisit ? new Date(admin.lastvisit) : null,\n            type: MemberType.ADMIN,\n            title: admin.custom.title\n        }\n    })).concat(group.members.map((member) => {\n        return {\n            username: member.name,\n            realname: getRealname(users, member.name, 'n/a'),\n            joinedAt: new Date(member.joined),\n            lastVisitedAt: member.lastvisit ? new Date(member.lastvisit) : null,\n            type: MemberType.MEMBER,\n            title: member.custom.title\n        }\n    }))\n\n    const narratives: Array<NarrativeResource> = group.resources.workspace.map((info) => {\n        return {\n            workspaceId: parseInt(info.rid, 10),\n            title: info.narrname,\n            isPublic: info.public,\n            permission: groupPermissionToWorkspacePermission(info.perm),\n            createdAt: new Date(info.narrcreate),\n            updatedAt: new Date(info.moddate),\n            description: info.description,\n            addedAt: info.added === null ? null : new Date(info.added)\n        }\n    })\n    const apps: Array<AppInfo> = []\n\n\n    return {\n        kind: OrganizationKind.NORMAL,\n        id: group.id,\n        name: group.name,\n        isPrivate: group.private,\n        isMember: (group.role !== \"None\"),\n        isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n        isOwner: (group.role === \"Owner\"),\n        relation: groupRoleToUserRelation(group.role),\n        logoUrl: group.custom.logourl || null,\n        homeUrl: group.custom.homeurl || null,\n        researchInterests: group.custom.researchinterests || '',\n        description: group.custom.description,\n        owner: owner,\n        areMembersPrivate: group.privatemembers,\n        members: members,\n        modifiedAt: new Date(group.moddate),\n        createdAt: new Date(group.createdate),\n        lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n        narratives: narratives,\n        apps: [],\n        memberCount: group.memcount,\n        narrativeCount: group.rescount.workspace || 0,\n        appCount: group.rescount.catalogmethod || 0,\n        relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n    }\n}\n\nexport function groupToPrivateOrganization(group: groupsApi.InaccessiblePrivateGroup, currentUser: Username): InaccessiblePrivateOrganization {\n    return {\n        kind: OrganizationKind.INACCESSIBLE_PRIVATE,\n        id: group.id,\n        isPrivate: group.private,\n        // isMember: false,\n        relation: groupRoleToUserRelation(group.role)\n    }\n}\n\nexport type GroupID = string\nexport type OrganizationID = GroupID\n\n\nexport interface QueryResults {\n    organizations: Array<BriefOrganization>\n    total: number\n}\n\nexport interface Query {\n    searchTerms: Array<string>\n    username: groupsApi.Username\n    sortField: string\n    sortDirection: SortDirection\n    filter: Filter\n}\n\nexport function applySearch(orgs: Array<BriefOrganization>, searchTerms: Array<string>): Array<BriefOrganization> {\n    const searchTermsRe = searchTerms.map((term) => {\n        return new RegExp(term, 'i')\n    })\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTermsRe.every((termRe) => {\n            return termRe.test(org.name) ||\n                termRe.test(org.researchInterests || '') ||\n                termRe.test(org.owner.username) ||\n                termRe.test(org.owner.realname)\n        })\n    })\n    return filteredOrgs\n}\n\nfunction dateDays(d: Date) {\n    const t = d.getTime()\n    return Math.round(t / (1000 * 60 * 60 * 24))\n}\n\nfunction applySortComparison(sortField: string, direction: number, a: BriefOrganization, b: BriefOrganization) {\n    switch (sortField) {\n        case 'created':\n            return direction * (dateDays(a.createdAt) - dateDays(b.createdAt))\n        case 'modified':\n        case 'changed':\n            return direction * (dateDays(a.modifiedAt) - dateDays(b.modifiedAt))\n        case 'name':\n            return direction * a.name.localeCompare(b.name)\n        case 'owner':\n            // TODO: after the dust settles for org -> brief org conversion,\n            // we may need to convert the owner to a member via profile...\n            return direction * a.owner.username.localeCompare(b.owner.username)\n        case 'narrativeCount':\n            return direction * (a.narrativeCount - b.narrativeCount)\n        case 'memberCount':\n            return direction * (a.memberCount - b.memberCount)\n        default:\n            console.warn('unimplemented sort field: ' + sortField)\n            return 0;\n    }\n}\n\nfunction applySort(organizations: Array<BriefOrganization>, sortField: string, sortDirection: SortDirection): Array<BriefOrganization> {\n    const direction = sortDirection === SortDirection.ASCENDING ? 1 : -1\n    return organizations.slice().sort((a, b) => {\n        return applySortComparison(sortField, direction, a, b) || applySortComparison('name', 1, a, b)\n    })\n}\n\nfunction groupRoleToUserRelation(role: groupsApi.Role): UserRelationToOrganization {\n    switch (role) {\n        case 'None': return UserRelationToOrganization.NONE\n        case 'Member': return UserRelationToOrganization.MEMBER\n        case 'Admin': return UserRelationToOrganization.ADMIN\n        case 'Owner': return UserRelationToOrganization.OWNER\n        default: throw new Error('Unknown role: ' + role)\n    }\n}\n\nexport interface Filter {\n    roleType: string,\n    roles: Array<string>,\n    privacy: string\n}\n\nfunction applyFilter(organizations: Array<BriefOrganization>, { roleType, roles, privacy }: Filter, username: groupsApi.Username): Array<BriefOrganization> {\n    function applyRoleType(org: BriefOrganization) {\n        switch (roleType) {\n            case 'myorgs':\n                return [\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'notmyorgs':\n                return ![\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'all':\n            default:\n                return true\n        }\n    }\n    function applyRole(org: BriefOrganization) {\n        if (roles.length === 0) {\n            return true\n        }\n        return roles.some((role) => {\n            switch (role) {\n                case 'member':\n                    return (org.relation === UserRelationToOrganization.MEMBER)\n                case 'admin':\n                    return (org.relation === UserRelationToOrganization.ADMIN)\n                case 'owner':\n                    return (org.relation === UserRelationToOrganization.OWNER)\n                default:\n                    return false\n            }\n        })\n    }\n    function applyPrivacy(org: BriefOrganization) {\n        switch (privacy) {\n            case 'public':\n                return !org.isPrivate\n            case 'private':\n                return org.isPrivate\n            case 'any':\n                return true\n            default:\n                return false\n        }\n    }\n    return organizations.filter((org) => {\n        return applyRoleType(org) && applyRole(org) && applyPrivacy(org)\n    })\n}\n\n// Narrative Sort and Search\nfunction narrativeSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return a.title.localeCompare(b.title)\n            }\n        case 'updated':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return b.updatedAt.getTime() - a.updatedAt.getTime()\n            }\n        default:\n        case 'added':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                if (a.addedAt === null) {\n                    if (b.addedAt === null) {\n                        return 0\n                    } else {\n                        // nulls sort to bottom\n                        return 1\n                    }\n                } else {\n                    if (b.addedAt === null) {\n                        return -1\n                    } else {\n                        return b.addedAt.getTime() - a.addedAt.getTime()\n                    }\n                }\n\n            }\n    }\n}\n\nexport function applyNarrativeSort(narratives: Array<NarrativeResource>, sortBy: string) {\n    if (!sortBy) {\n        return narratives\n    }\n    return narratives.slice().sort((a: NarrativeResource, b: NarrativeResource) => {\n        const c1 = narrativeSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return narrativeSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyNarrativeSearch(narratives: Array<NarrativeResource>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return narratives\n    }\n    return narratives.slice().filter((narrative: NarrativeResource) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(narrative.title))\n        })\n    })\n}\n\nexport interface NarrativeQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryNarratives(narratives: Array<NarrativeResource>, query: NarrativeQuery) {\n    const searched = applyNarrativeSearch(narratives, query.searchBy)\n    const sorted = applyNarrativeSort(searched, query.sortBy)\n    return sorted\n}\n\n// Members Sort and Search\n\nfunction memberSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            // TODO: need to use user real name\n\n            return (a: Member, b: Member) => {\n                return a.username.localeCompare(b.username)\n            }\n        default:\n        case 'added':\n            return (a: Member, b: Member) => {\n                return b.joinedAt.getTime() - a.joinedAt.getTime()\n            }\n    }\n}\n\nexport function applyMembersSort(members: Array<Member>, sortBy: string) {\n    if (!sortBy) {\n        return members\n    }\n    return members.slice().sort((a: Member, b: Member) => {\n        const c1 = memberSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return memberSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyMembersSearch(members: Array<Member>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return members\n    }\n    return members.slice().filter((member: Member) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(member.username) ||\n                token.test(member.title || ''))\n        })\n    })\n}\n\nexport interface MembersQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryMembers(members: Array<Member>, query: MembersQuery) {\n    const searched = applyMembersSearch(members, query.searchBy)\n    const sorted = applyMembersSort(searched, query.sortBy)\n    return sorted\n}\n\n// function getCustomField(group: groupsApi.Group | groupsApi.BriefGroup, name: string): string | null {\n//     if (!group.custom) {\n//         return null\n//     }\n//     if (name in group.custom) {\n//         return group.custom[name]\n//     }\n//     return null\n// }\n\n\nexport interface ConstructorParams {\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    token: string\n    username: groupsApi.Username\n}\n\nexport class OrganizationModel {\n\n    params: ConstructorParams\n    groupsClient: groupsApi.GroupsClient\n    usersClient: userModel.UserModel\n    // organizations: Map<OrganizationID, Organization | InaccessiblePrivateOrganization>\n\n    constructor(params: ConstructorParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.usersClient = new userModel.UserModel({\n            userProfileServiceURL: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        // this.organizations = new Map<OrganizationID, Organization>()\n    }\n\n    async getOrg(id: OrganizationID): Promise<Organization | InaccessiblePrivateOrganization> {\n        const group = await this.groupsClient.getGroupById(id)\n\n        // get users from user model (profile)\n\n        if (group.role === \"None\" && group.private) {\n            return groupToPrivateOrganization(group as groupsApi.InaccessiblePrivateGroup, this.params.username)\n        } else {\n            const g = group as groupsApi.Group\n            // gather usernames from group\n            const usernames: Array<string> = []\n            usernames.push(g.owner.name)\n            g.admins.forEach((admin) => {\n                usernames.push(admin.name)\n            })\n            g.members.forEach((member) => {\n                usernames.push(member.name)\n            })\n\n            const users = await this.usersClient.getUsers(usernames)\n\n            return groupToOrganization(g, this.params.username, users)\n        }\n    }\n\n    async getGroupUsers(group: groupsApi.Group) {\n        // gather usernames from group\n        const usernames: Array<string> = []\n        usernames.push(group.owner.name)\n        group.admins.forEach((admin) => {\n            usernames.push(admin.name)\n        })\n        group.members.forEach((member) => {\n            usernames.push(member.name)\n        })\n\n        return await this.usersClient.getUsers(usernames)\n    }\n\n    async getOrganization(id: OrganizationID): Promise<Organization> {\n        const group = await this.groupsClient.getGroupById(id)\n        if (group.role === \"None\" && group.private) {\n            throw new Error('Inaccessible Organization')\n        }\n\n        const users = await this.getGroupUsers(<groupsApi.Group>group)\n\n        return groupToOrganization(group as groupsApi.Group, this.params.username, users)\n    }\n\n    async getOrgs(ids: Array<OrganizationID>): Promise<Array<Organization | InaccessiblePrivateOrganization>> {\n        return Promise.all(ids.map((id) => {\n            return this.getOrg(id)\n        }))\n    }\n\n    async getOwnOrgs(): Promise<Array<BriefOrganization>> {\n        const orgs = await this.getAllOrgs2()\n\n        const ownOrgs = orgs\n            .filter((org: BriefOrganization) => {\n                // ensure that user has some relationship to the org:\n                // member, admin, or owner\n                return (org.relation !== UserRelationToOrganization.NONE)\n            })\n\n        return ownOrgs\n    }\n\n    listGroupToBriefOrganization(group: groupsApi.BriefGroup, users: Map<userModel.Username, userModel.User>): BriefOrganization {\n        return {\n            id: group.id,\n            name: group.name,\n            logoUrl: group.custom.logourl || null,\n            isPrivate: group.private,\n            homeUrl: group.custom.homeurl || null,\n            researchInterests: group.custom.researchinterests || null,\n            owner: {\n                username: group.owner,\n                realname: getRealname(users, group.owner, 'n/a'),\n                lastVisitedAt: null,\n                type: MemberType.OWNER,\n                joinedAt: new Date(group.createdate),\n                title: 'Owner'\n            },\n            relation: groupRoleToUserRelation(group.role),\n            isMember: (group.role !== \"None\"),\n            isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n            isOwner: (group.role === \"Owner\"),\n            createdAt: new Date(group.createdate),\n            modifiedAt: new Date(group.moddate),\n            lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n            memberCount: group.memcount || 0,\n            narrativeCount: group.rescount.workspace || 0,\n            relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n        }\n    }\n\n    async getAllOrgs2(): Promise<Array<BriefOrganization>> {\n        let allGroups: Array<groupsApi.BriefGroup> = []\n        let groups: Array<groupsApi.BriefGroup>\n        do {\n            groups = await this.groupsClient.listGroups()\n            allGroups = allGroups.concat(groups)\n        } while (groups.length === groupsApi.MAX_GROUPS_PER_LIST_REQUEST)\n\n        const usernames: Set<string> = new Set()\n        allGroups.forEach((g) => {\n            usernames.add(g.owner)\n        })\n\n\n        const users = await this.usersClient.getUsers(Array.from(usernames.values()))\n\n        return allGroups.map((group) => {\n            return this.listGroupToBriefOrganization(group, users)\n        })\n    }\n\n    async queryOrgs(query: Query): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n\n        const filtered = applyFilter(orgs, query.filter, query.username)\n        const searched = applySearch(filtered, query.searchTerms)\n        const sorted = applySort(searched, query.sortField, query.sortDirection)\n\n        return {\n            organizations: sorted,\n            total: orgs.length\n        }\n    }\n\n    async ownOrgs(username: groupsApi.Username): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n        const ownOrgs = orgs.filter((org: BriefOrganization) => {\n            return (org.relation !== UserRelationToOrganization.NONE)\n        })\n\n        return {\n            organizations: ownOrgs,\n            total: ownOrgs.length\n        }\n    }\n\n    async grantViewAccess(requestId: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantReadAccessToRequestedResource({ requestId })\n        const req = await groupsClient.getRequest(requestId)\n        return requestModel.groupRequestToOrgRequest(req)\n    }\n\n    async addOrg(newOrg: EditableOrganization, username: groupsApi.Username): Promise<Organization> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n        if ((newOrg.id.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.name.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.logoUrl.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.description.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.isPrivate.validationState.type !== ValidationErrorType.OK)\n        ) {\n            return Promise.reject(new Error('One or more fields are invalid'))\n        }\n\n        const group = await groupsClient.createGroup({\n            id: newOrg.id.value,\n            name: newOrg.name.value,\n            logoUrl: newOrg.logoUrl.value,\n            homeUrl: newOrg.homeUrl.value,\n            researchInterests: newOrg.researchInterests.value,\n            description: newOrg.description.value,\n            isPrivate: newOrg.isPrivate.value\n        })\n\n        const users = await this.getGroupUsers(group)\n\n        return groupToOrganization(group, username, users)\n\n    }\n\n    async orgExists(id: string): Promise<boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.groupExists(id)\n            .then(({ exists }) => {\n                return exists\n            })\n    }\n\n    async updateOrg(id: string, orgUpdate: OrganizationUpdate): Promise<void> {\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n\n\n        return groupsClient.updateGroup(id, {\n            name: orgUpdate.name,\n            logoUrl: orgUpdate.logoUrl,\n            homeUrl: orgUpdate.homeUrl,\n            researchInterests: orgUpdate.researchInterests,\n            description: orgUpdate.description,\n            private: orgUpdate.isPrivate\n        })\n    }\n\n    validateOrgId(id: string): [string, ValidationState] {\n        return Validation.validateOrgId(id);\n    }\n\n    validateOrgName(name: string): [string, ValidationState] {\n        return Validation.validateOrgName(name)\n    }\n\n    validateOrgDescription(description: string): [string, ValidationState] {\n        return Validation.validateOrgDescription(description);\n    }\n\n    async removeNarrativeFromOrg(organizationId: OrganizationID, workspaceId: number): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'workspace',\n            String(workspaceId)\n        )\n    }\n\n    async grantNarrativeAccess(groupId: string, resourceId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantResourceAccess(groupId, 'workspace', resourceId)\n    }\n\n    async requestMembership(id: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.requestMembership({\n            groupId: id\n        })\n        return requestModel.groupRequestToOrgRequest(request)\n    }\n\n    async addOrRequestNarrativeToGroup(groupId: string, workspaceId: WorkspaceID): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestNarrative({\n            groupId: groupId,\n            workspaceId: workspaceId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    async memberToAdmin(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.memberToAdmin({\n            groupId,\n            member\n        })\n    }\n\n    async adminToMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.adminToMember({\n            groupId,\n            member\n        })\n    }\n    async removeMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.removeMember({\n            groupId,\n            member\n        })\n    }\n\n    async updateMember(groupId: string, memberUsername: string, update: MemberUpdate) {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.updateMember({ groupId, memberUsername, update })\n    }\n\n    async visitOrg({ organizationId }: { organizationId: string }): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.visitGroup({ groupId: organizationId })\n    }\n\n    async getOpenRequestsStatus({ organizationIds }: { organizationIds: Array<OrganizationID> }): Promise<Map<OrganizationID, RequestStatus>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: organizationIds })\n        const result = new Map<OrganizationID, RequestStatus>()\n        for (const [groupId, status] of openRequests.entries()) {\n            const requestStatus: RequestStatus = stringToRequestStatus(status)\n            result.set(<OrganizationID>groupId, requestStatus)\n        }\n        return result\n    }\n\n    async getOpenRequestStatus({ organizationId }: { organizationId: OrganizationID }): Promise<RequestStatus> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: [organizationId] })\n        for (const [groupId, status] of openRequests.entries()) {\n            return stringToRequestStatus(status)\n        }\n        throw new Error('expected request status, got none')\n    }\n\n    async addRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.addRelatedGroup(organizationId, relatedOrganizationId)\n    }\n\n    async removeRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.removeRelatedGroup(organizationId, relatedOrganizationId)\n    }\n}\n\nfunction stringToRequestStatus(status: groupsApi.RequestStatus): RequestStatus {\n    switch (status.new) {\n        case 'None': return RequestStatus.NONE\n        case 'Old': return RequestStatus.OLD\n        case 'New': return RequestStatus.NEW\n        default: throw new Error('Invalid open request status: ' + status)\n    }\n}\n\nexport function userPermissionToWorkspacePermission(userPermission: string, isOwner: boolean) {\n    if (isOwner) {\n        return UserWorkspacePermission.OWNER\n    }\n    switch (userPermission) {\n        case 'r':\n            return UserWorkspacePermission.VIEW\n        case 'w':\n            return UserWorkspacePermission.EDIT\n        case 'a':\n            return UserWorkspacePermission.ADMIN\n        default:\n            throw new Error('Invalid workspace user permission: ' + userPermission)\n    }\n}","import { ValidationState, ValidationErrorType } from \"../../../types\"\n\nexport default class Validation {\n    static nonPrintableRe = /[\\000-\\031]/\n\n    static testNonPrintableCharacters(s: string) {\n        const firstNonPrintable = s.search(Validation.nonPrintableRe)\n        if (firstNonPrintable === -1) {\n            return false\n        }\n        const beforeStart = firstNonPrintable - 5 < 0 ? 0 : firstNonPrintable - 5\n        const before = s.slice(beforeStart, firstNonPrintable)\n        const after = s.slice(firstNonPrintable + 1, firstNonPrintable + 6)\n        return `Non-printable character at position ${firstNonPrintable}: \"${before}___${after}`\n    }\n\n    static validateOrgId(id: string): [string, ValidationState] {\n        // May not be empty\n        if (id.length === 0) {\n            return [\n                id, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization id may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        // No spaces\n        if (id.match(/\\s/)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not contain a space',\n                    validatedAt: new Date()\n                }]\n        }\n        // May not exceed maximum size\n        // todo: what is the real limit?\n        if (id.length > 100) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not be longer than 100 characters',\n                    validatedAt: new Date()\n                }]\n        }\n\n        // May only consist if lower case alphanumeric\n        const alphaRe = /^[a-z0-9-]+$/\n        if (!id.match(alphaRe)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization ID may only contain lower case letters (a-z), numeric digits (0-9) and the dash \"-\"',\n                    validatedAt: new Date()\n                }\n            ]\n        }\n\n        return [id, {\n            type: ValidationErrorType.OK,\n            validatedAt: new Date()\n        }]\n    }\n\n    static validateOrgName(name: string): [string, ValidationState] {\n        if (name.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization name may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        if (name.length > 256) {\n            return [\n                name, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization name may not be longer than 256 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            name, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgLogoUrl(logoUrl: string | null): [string | null, ValidationState] {\n        if (logoUrl === null || logoUrl === '') {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (logoUrl.length > 1000) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Logo url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(logoUrl)\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n            if (!url.protocol.match(/^https:$/)) {\n                return [\n                    logoUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Only https (secure) urls are supported',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            logoUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgHomeUrl(homeUrl: string | null): [string | null, ValidationState] {\n        if (homeUrl === null || homeUrl === '') {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (homeUrl.length > 1000) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Home url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        try {\n            const url = new URL(homeUrl)\n            // ensure either http or https, followed by :// and then\n            // something then a dot then something then anything\n            // if (!url.protocol.match(/^http[s]?:\\/\\/[^.]+[.][^.]+.*$/)) {\n            if (!url.protocol.match(/^http[s]?:$/)) {\n                return [\n                    homeUrl, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Error parsing url: ' + url.protocol + ' is not a valid protocol',\n                        validatedAt: new Date()\n                    }]\n            }\n        } catch (ex) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Error parsing url: ' + ex.message,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            homeUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgResearchInterests(researchInterests: string): [string, ValidationState] {\n        if (researchInterests.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Research Interests may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n\n        if (researchInterests.length > 280) {\n            return [\n                researchInterests, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Research Interests may not be longer than 280 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            researchInterests, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgDescription(description: string): [string, ValidationState] {\n        if (description.length === 0) {\n            // return [name, {\n            //     type: ValidationErrorType.OK,\n            //     validatedAt: new Date()\n            // }]\n            return [name, {\n                type: ValidationErrorType.ERROR,\n                message: 'Organization description may not be empty',\n                validatedAt: new Date()\n            }]\n        }\n        // TODO: Is there really a limit?\n        // const nonPrintable = Validation.testNonPrintableCharacters(description)\n        // if (nonPrintable) {\n        //     return [\n        //         description, {\n        //             type: UIErrorType.ERROR,\n        //             message: nonPrintable\n        //         }\n        //     ]\n        // }\n        if (description.length > 4096) {\n            return [\n                description, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization description may not be longer than 4,096 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            description, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        ]\n    }\n\n    static validateMemberTitle(title: string): [string, ValidationState] {\n        const maxTitleLength = 100\n        if (title.length > maxTitleLength) {\n            return [\n                title, {\n                    type: ValidationErrorType.ERROR,\n                    message: `member title may not be longer than ${maxTitleLength} characters`,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            title, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n}","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\nexport interface Load extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n}\n\nexport interface LoadError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR\n    error: AnError\n}\n\nexport interface Unload extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n        } as LoadStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        const { organization } = viewModel\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const orgs = await orgClient.getAllOrgs2()\n            const selectableOrgs = orgs.map((org) => {\n                const isRelated = organization.relatedOrganizations.includes(org.id)\n                return {\n                    isRelated: isRelated,\n                    isSelected: false,\n                    organization: org\n                } as SelectableRelatableOrganization\n            })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n                organizations: selectableOrgs\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n    }\n}\n\nexport interface SelectOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    selectedOrganization: SelectableRelatableOrganization\n}\n\nexport function selectOrganization(org: SelectableRelatableOrganization): SelectOrganization {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n        selectedOrganization: org\n    }\n}\n\n// Add Org\n\nexport interface AddOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n}\n\nexport interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n        } as AddOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Search Orgs\n\nexport interface Search extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH,\n    query: string\n}\n\nexport interface SearchStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n}\n\nexport interface SearchSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n    searchBy: string\n}\n\nexport interface SearchError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n    error: AnError\n}\n\nexport function applyQuery(orgs: Array<SelectableRelatableOrganization>, query: string) {\n    const searchExp = query.split(/\\s+/).map((term) => {\n        return new RegExp(term, 'i')\n    })\n\n    return orgs.filter(({ organization }) => {\n        return searchExp.every((re) => {\n            return (\n                re.test(organization.name) ||\n                // TODO: realname\n                re.test(organization.owner.username)\n            )\n        })\n    })\n}\n\nexport function search(query: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_START\n        } as SearchStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n\n        const vm = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n        if (vm === null) {\n            throw new Error('vm is null')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            const availableOrgs = applyQuery(vm.availableOrganizations.organizations, query)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS,\n                organizations: availableOrgs,\n                searchBy: query\n            } as SearchSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageRelatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind, ViewOrgSubViewKind, ViewState, SelectableRelatableOrganization } from '../../../types';\nimport { ActionFlag } from '../../actions';\nimport { OrganizationModel } from '../../../data/models/organization/model';\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.OK,\n                            error: null,\n                            viewModel: {\n                                kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS,\n                                relatedOrganizations: state.views.viewOrgView.viewModel.organization.relatedOrganizations,\n                                organization: state.views.viewOrgView.viewModel.organization,\n                                availableOrganizations: {\n                                    organizations: action.organizations,\n                                    queried: action.organizations,\n                                    searchBy: ''\n                                },\n                                selectedOrganization: null\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.NONE,\n                            error: null,\n                            viewModel: null\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function selectOrganization(state: StoreState, action: actions.SelectOrganization): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations;\n\n    const organizations = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.selectedOrganization.organization.id) {\n            relatedOrg.isSelected = true\n        } else {\n            relatedOrg.isSelected = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                selectedOrganization: action.selectedOrganization,\n                                availableOrganizations: {\n                                    organizations: organizations,\n                                    queried: actions.applyQuery(organizations, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrganization(state: StoreState, action: actions.AddOrganizationSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n    const newRelatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.concat([action.organizationId])\n\n    const newAvailableOrgs = availableOrgs.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (newRelatedOrgs.includes(relatedOrg.organization.id)) {\n            relatedOrg.isRelated = true\n        } else {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: newRelatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganizationSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    // Remove from the related orgs\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    const availableOrgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations\n\n    // Update the related status of the org in the management interface.\n    const newAvailableOrgs = availableOrgs.organizations.filter((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.organizationId) {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    organizations: newAvailableOrgs,\n                                    queried: actions.applyQuery(newAvailableOrgs, availableOrgs.searchBy),\n                                    searchBy: availableOrgs.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport function searchSuccess(state: StoreState, action: actions.SearchSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                availableOrganizations: {\n                                    ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.availableOrganizations,\n                                    queried: action.organizations,\n                                    searchBy: action.searchBy\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION:\n            return selectOrganization(state, action as actions.SelectOrganization)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS:\n            return addOrganization(state, action as actions.AddOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as actions.SearchSuccess)\n        default:\n            return null\n    }\n}\n","import * as actions from '../../actions/viewOrganization/relatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { Action } from 'redux'\nimport { ActionFlag } from '../../actions'\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganization): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganization)\n        default:\n            return null\n    }\n}\n","import { Action } from 'redux'\nimport * as actions from '../actions/viewOrg'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport acceptInboxRequest from './viewOrganization/acceptInboxRequest'\nimport viewMembers from './viewOrganization/viewMembers'\nimport denyInboxRequest from './viewOrganization/denyInboxRequest'\nimport cancelOutboxRequest from './viewOrganization/cancelOutboxRequests'\nimport manageRelatedOrganizations from './viewOrganization/manageRelatedOrganizations'\nimport relatedOrganizations from './viewOrganization/relatedOrganizations'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\n\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadNormalSuccess(state: types.StoreState, action: actions.LoadNormalSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    sortNarrativesBy: action.narrativesSortBy,\n                    searchNarrativesBy: '',\n                    narratives: action.narratives,\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        manageRelatedOrganizationsView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        inviteUserView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        requestNarrativeView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        },\n                        manageMembershipView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        }\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function reloadNormalSuccess(state: types.StoreState, action: actions.ReloadNormalSuccess): types.StoreState {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (viewModel === null) {\n        return state\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    sortNarrativesBy: action.narrativesSortBy,\n                    searchNarrativesBy: '',\n                    narratives: action.narratives,\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        ...viewModel.subViews,\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(state: types.StoreState, action: actions.LoadInaccessiblePrivateSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n                    organization: action.organization,\n                    relation: action.relation,\n                    requestOutbox: action.requestOutbox\n                } as types.ViewInaccessiblePrivateOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function removeNarrativeSuccess(state: types.StoreState, action: actions.RemoveNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    // Argh!@\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const narratives = state.views.viewOrgView.viewModel.organization.narratives\n    const newNarratives = narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    const newDisplayNarratives = state.views.viewOrgView.viewModel.narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrativeId)\n    })\n    // const filteredSortedNarratives = \n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        narratives: newNarratives,\n                        narrativeCount: newNarratives.length\n                    },\n                    narratives: newDisplayNarratives,\n                }\n            }\n        }\n    }\n}\n\nexport function accessNarrativeSuccess(state: types.StoreState, action: actions.AccessNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: action.organization,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nexport function sortNarrativesSuccess(state: types.StoreState, action: actions.SortNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortNarrativesBy: action.sortBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nexport function searchNarrativesSuccess(state: types.StoreState, action: actions.SearchNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchNarrativesBy: action.searchBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS:\n            return loadNormalSuccess(state, action as actions.LoadNormalSuccess)\n        case ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS:\n            return reloadNormalSuccess(state, action as actions.ReloadNormalSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS:\n            return loadInaccessiblePrivateSuccess(state, action as actions.LoadInaccessiblePrivateSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS:\n            return removeNarrativeSuccess(state, action as actions.RemoveNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS:\n            return sortNarrativesSuccess(state, action as actions.SortNarrativesSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS:\n            return searchNarrativesSuccess(state, action as actions.SearchNarrativesSuccess)\n    }\n\n    return acceptInboxRequest(state, action) ||\n        denyInboxRequest(state, action) ||\n        cancelOutboxRequest(state, action) ||\n        viewMembers(state, action) ||\n        manageRelatedOrganizations(state, action) ||\n        relatedOrganizations(state, action) ||\n        relatedOrganizations(state, action)\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/browseOrgs'\nimport { StoreState, SortDirection, ComponentLoadingState, BrowseOrgsView } from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function applyOrgSearch(orgs: Array<orgModel.Organization>, searchTerms: Array<string>) {\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTerms.every((term) => {\n            // todo : make more efficient!!!\n            return (new RegExp(term, 'i').test(org.name));\n        })\n    })\n\n    return {\n        organizations: filteredOrgs,\n        totalCount: orgs.length,\n        filteredCount: filteredOrgs.length\n    }\n}\n\n// TODO:\n// dispatch the start of the request\n// do the request\n// dispatch the success (will be same for all queries?)\n// dispatch the error\n// FOR NOW:\n// do it here...\nexport function searchOrgs(state: BrowseOrgsView, action: actions.SearchOrgs): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    // const { viewModel: { filter, sortBy, sortDirection } } = state\n\n    // const query: Query = {\n    //     searchTerms: action.searchTerms,\n    //     filter: filter,\n    //     sortBy: sortBy,\n    //     sortDirection: sortDirection,\n    //     username: state.auth.authorization.username\n    // }\n    // const result = queryOrgs(state.rawOrganizations, query)\n    // rawOrganizations: Array<Organization>\n    // organizations: Array<Organization>\n    // totalCount: number\n    // filteredCount: number\n    // sortBy: string\n    // sortDirection: SortDirection\n    // filter: string\n    // searchTerms: Array<string>\n    // selectedOrganizationId: string | null\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedOrganizationId: null,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsStart(state: BrowseOrgsView, action: actions.SearchOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsSuccess(state: BrowseOrgsView, action: actions.SearchOrgsSuccess): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            organizations: action.organizations,\n            openRequests: action.openRequests,\n            totalCount: action.totalCount,\n            filteredCount: action.organizations.length,\n            searching: false\n        }\n    }\n}\n\n// TODO: hmm, uses the global error -- this was early in the development of this (a whole two weeks ago!)\n// and this should now go in the \"browseOrgs\" (or better named \"searchOrgs\") branch.\nexport function searchOrgsError(state: BrowseOrgsView, action: actions.SearchOrgsError): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: false,\n            error: action.error\n        }\n    }\n}\n\n\nexport function sortOrgsStart(state: BrowseOrgsView, action: actions.SortOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            sortField: action.sortField,\n            sortDirection: action.sortDirection,\n            searching: true\n        }\n    }\n}\n\n\ninterface Query {\n    searchTerms: Array<string>,\n    username: string,\n    sortField: string,\n    sortDirection: SortDirection,\n    filter: string\n}\n\ninterface QueryResults {\n    organizations: Array<orgModel.Organization>,\n    total: number\n}\n\nfunction filterOrgsStart(state: BrowseOrgsView, action: actions.FilterOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { filter } = action\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            filter,\n            searching: true\n        }\n    }\n}\n\nfunction loadSuccess(state: BrowseOrgsView, action: actions.LoadSuccess): BrowseOrgsView {\n    const { defaultViewModel: {\n        rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n        totalCount, filteredCount, selectedOrganizationId, error, searching\n    } } = action\n\n    return {\n        ...state,\n        loadingState: ComponentLoadingState.SUCCESS,\n        error: null,\n        viewModel: {\n            rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n            totalCount, filteredCount, selectedOrganizationId, error, searching\n        }\n    }\n}\n\nfunction unload(state: BrowseOrgsView, action: actions.Unload): BrowseOrgsView {\n    return {\n        loadingState: ComponentLoadingState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction localReducer(state: BrowseOrgsView, action: Action): BrowseOrgsView | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.BROWSE_ORGS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH:\n            return searchOrgs(state, action as actions.SearchOrgs)\n        case ActionFlag.BROWSE_ORGS_SEARCH_START:\n            return searchOrgsStart(state, action as actions.SearchOrgsStart)\n        case ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS:\n            return searchOrgsSuccess(state, action as actions.SearchOrgsSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH_ERROR:\n            return searchOrgsError(state, action as actions.SearchOrgsError)\n        // case ActionFlag.SORT_ORGS_STAR:\n        //     return sortOrgs(state, action as actions.SortOrgs)\n        case ActionFlag.BROWSE_ORGS_SORT_START:\n            return sortOrgsStart(state, action as actions.SortOrgsStart)\n        case ActionFlag.BROWSE_ORGS_FILTER_START:\n            return filterOrgsStart(state, action as actions.FilterOrgsStart)\n        case ActionFlag.BROWSE_ORGS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action<any>): StoreState | null {\n    const browseOrgsView = localReducer(state.views.browseOrgsView, action)\n    if (!browseOrgsView) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView\n        }\n    }\n}\n","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\nimport { StoreState, AuthState } from '../../types'\nimport { AuthCheckStart, AuthAuthorized, AuthUnauthorized, AuthCheckError } from '../actions/auth';\n\nexport function authCheckStart(state: StoreState, action: AuthCheckStart): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.CHECKING,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authCheckError(state: StoreState, action: AuthCheckError): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.ERROR,\n            message: action.error.message,\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authAuthorized(state: StoreState, action: AuthAuthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.AUTHORIZED,\n            message: '',\n            authorization: {\n                token: action.token,\n                username: action.username,\n                realname: action.realname,\n                roles: action.roles\n            }\n        }\n    }\n}\n\nexport function authUnauthorized(state: StoreState, action: AuthUnauthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.UNAUTHORIZED,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.AUTH_CHECK_START:\n            return authCheckStart(state, action as AuthCheckStart)\n        case ActionFlag.AUTH_AUTHORIZED:\n            return authAuthorized(state, action as AuthAuthorized)\n        case ActionFlag.AUTH_UNAUTHORIZED:\n            return authUnauthorized(state, action as AuthUnauthorized)\n        case ActionFlag.AUTH_CHECK_ERROR:\n            return authCheckError(state, action as AuthCheckError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { ActionFlag } from '../actions'\nimport { AppSuccess } from '../actions/app';\nimport { StoreState, AppState } from '../../types';\n\nexport function appSuccess(state: StoreState, action: AppSuccess): StoreState {\n    return {\n        ...state,\n        app: {\n            status: AppState.READY,\n            config: action.config\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.APP_SUCCESS:\n            return appSuccess(state, action as AppSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageOrganizationRequests'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(\n    state: StoreState,\n    action: actions.LoadStart): StoreState {\n    return state\n}\n\nexport function loadSuccess(\n    state: StoreState,\n    action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    requests: action.requests,\n                    invitations: action.invitations\n                },\n            }\n        }\n    }\n}\n\nexport function loadError(\n    state: StoreState,\n    action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function getViewAccessSuccess(state: StoreState, action: actions.GetViewAccessSuccess): StoreState {\n    // Note: we use the state object rather than peeling off the viewModel because\n    // TS can't trace the assertion (not falsy) of the variable back to the object \n    // property it was taken from.\n    if (!state.views.manageOrganizationRequestsView.viewModel) {\n        return state\n    }\n    const requests = state.views.manageOrganizationRequestsView.viewModel.requests\n    const newRequests = requests.map((request) => {\n        if (request.id = action.request.id) {\n            return action.request\n        }\n        return request\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                ...state.views.manageOrganizationRequestsView,\n                viewModel: {\n                    // TODO: below, \n                    ...state.views.manageOrganizationRequestsView.viewModel,\n                    requests: newRequests\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS:\n            return getViewAccessSuccess(state, action as actions.GetViewAccessSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.LOADING,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.NONE,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation\n                },\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.ERROR,\n                viewModel: null,\n                error: action.error\n            }\n        }\n    }\n}\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.ADMIN\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.MEMBER\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_MEMBERS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_MEMBERS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/inviteUser'\nimport { ViewOrgViewModel, StoreState, InviteUserViewModel, ViewState, View, InviteUserViewState } from '../../../types'\nimport { ActionFlag } from '../../actions'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { ViewOrgViewModelKind } from '../../../types';\n\nexport function loadStart(state: View<InviteUserViewModel>, action: actions.LoadStart): View<InviteUserViewModel> {\n    return {\n        state: ViewState.LOADING,\n        viewModel: null,\n        error: null\n    }\n}\n\nexport function loadSuccess(state: View<InviteUserViewModel>, action: actions.LoadSuccess): View<InviteUserViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            editState: InviteUserViewState.EDITING,\n            users: action.users,\n            organization: action.organization,\n            selectedUser: null\n        }\n    }\n}\n\nexport function loadError(state: View<InviteUserViewModel>, action: actions.LoadError): View<InviteUserViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<InviteUserViewModel>, action: actions.Unload): View<InviteUserViewModel> {\n    return {\n\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function searchUsersSuccess(state: View<InviteUserViewModel>, action: actions.SearchUsersSuccess): View<InviteUserViewModel> {\n    // TODO: better guards!\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            users: action.users\n        }\n    }\n}\n\nexport function selectUserSuccess(state: View<InviteUserViewModel>, action: actions.SelectUserSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedUser: {\n                user: action.user,\n                relation: action.relation\n            }\n        }\n    }\n}\n\nexport function sendInvitationStart(state: View<InviteUserViewModel>, action: actions.SendInvitationStart): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SENDING\n        }\n    }\n}\n\nexport function sendInvitationSuccess(state: View<InviteUserViewModel>, action: actions.SendInvitationSuccess): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const { viewModel: { selectedUser, users } } = state\n\n    // const selectedUser = state.inviteUserView.value.selectedUser\n    if (!selectedUser) {\n        throw new Error('selected user is null')\n    }\n    selectedUser.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n\n    if (!users) {\n        throw new Error('users is null')\n    }\n    const newUsers = users.map((user) => {\n        if (user.username === selectedUser.user.username) {\n            user.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n        }\n        return user\n    })\n\n    return {\n        ...state,\n\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.SUCCESS,\n            selectedUser: selectedUser,\n            users: newUsers\n        }\n    }\n}\n\nexport function sendInvitationError(state: View<InviteUserViewModel>, action: actions.SendInvitationError): View<InviteUserViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: InviteUserViewState.ERROR\n        }\n    }\n}\n\nfunction localReducer(state: View<InviteUserViewModel>, action: Action): View<InviteUserViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return searchUsersSuccess(state, action as actions.SearchUsersSuccess)\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return selectUserSuccess(state, action as actions.SelectUserSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return sendInvitationStart(state, action as actions.SendInvitationStart)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return sendInvitationSuccess(state, action as actions.SendInvitationSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return sendInvitationError(state, action as actions.SendInvitationError)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return true\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return true\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return true\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return true\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return true\n        default:\n            return false\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<InviteUserViewModel> = state.views.viewOrgView.viewModel.subViews.inviteUserView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        inviteUserView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageMembership'\nimport { StoreState, ComponentLoadingState, SyncState, ValidationStateOk, ValidationState, ValidationErrorType, SaveState, EditState, ManageMembershipViewModel, ViewOrgViewModelKind, View, ViewState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nexport function loadStart(state: View<ManageMembershipViewModel>, action: actions.LoadStart): View<ManageMembershipViewModel> {\n    return {\n        ...state,\n        state: ViewState.LOADING,\n        error: null,\n        viewModel: null\n    }\n}\n\nexport function loadSuccess(state: View<ManageMembershipViewModel>, action: actions.LoadSuccess): View<ManageMembershipViewModel> {\n    return {\n        ...state,\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            organization: action.organization,\n            editableMemberProfile: action.editableMemberProfile,\n            editState: EditState.UNEDITED,\n            saveState: SaveState.NEW,\n            validationState: validationStateOk()\n        }\n    }\n}\n\nexport function loadError(state: View<ManageMembershipViewModel>, action: actions.LoadError): View<ManageMembershipViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function unload(state: View<ManageMembershipViewModel>, action: actions.Unload): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function updateTitleSuccess(state: View<ManageMembershipViewModel>, action: actions.UpdateTitleSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const editedMember = state.viewModel.editableMemberProfile\n    let syncState\n    if (action.title !== editedMember.title.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n    const newState = {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editableMemberProfile: {\n                ...state.viewModel.editableMemberProfile,\n                title: {\n                    value: action.title,\n                    remoteValue: action.title,\n                    syncState: syncState,\n                    validationState: validationStateOk()\n                }\n            }\n        }\n    }\n\n    const editState = evaluateEditorState(newState.viewModel)\n\n    return {\n        ...newState,\n        viewModel: {\n            ...newState.viewModel,\n            editState: editState\n        }\n    }\n}\nfunction evaluateEditorState(viewModel: ManageMembershipViewModel): EditState {\n    if (viewModel.editableMemberProfile.title.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\nfunction evaluateSuccess(state: View<ManageMembershipViewModel>, action: actions.EvaluateSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const editState = evaluateEditorState(state.viewModel)\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: editState,\n            validationState: {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        }\n    }\n}\n\nfunction evaluateError(state: View<ManageMembershipViewModel>, action: actions.EvaluateError): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            validationState: {\n                type: ValidationErrorType.ERROR,\n                message: 'Validation error(s)',\n                validatedAt: new Date()\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: View<ManageMembershipViewModel>, action: actions.SaveSuccess): View<ManageMembershipViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            editState: EditState.UNEDITED,\n            saveState: SaveState.SAVED,\n            editableMemberProfile: {\n                ...state.viewModel.editableMemberProfile,\n                title: {\n                    ...state.viewModel.editableMemberProfile.title,\n                    syncState: SyncState.CLEAN\n                }\n            }\n        }\n    }\n}\n\n\n// export function demoteSelfToMemberSuccess(state: View<ManageMembershipViewModel>, action: actions.DemoteSelfToMemberSuccess): View<ManageMembershipViewModel> {\n//     if (!state.views.manageMembershipView.viewModel) {\n//         return state\n//     }\n\n//     const {\n//         views: { viewOrgView: { viewModel } }\n//     } = state\n\n//     if (viewModel === null) {\n//         return state\n//     }\n\n//     // TODO: ugh, cut this off before getting here.\n//     if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n//         return state\n//     }\n\n//     // TODO: probably better is to have to have the action handler do a call to get the members\n//     // and to populate the orgs membership struct from that...\n//     const members = viewModel.organization.members.map((member) => {\n//         if (member.username === action.memberUsername) {\n//             return {\n//                 ...member,\n//                 type: MemberType.MEMBER\n//             }\n//         } else {\n//             return member\n//         }\n//     })\n\n//     const sortedMembers = viewModel.members.map((member) => {\n//         if (member.username === action.memberUsername) {\n//             return {\n//                 ...member,\n//                 type: MemberType.MEMBER\n//             }\n//         } else {\n//             return member\n//         }\n//     })\n\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewOrgView: {\n//                 ...state.views.viewOrgView,\n//                 viewModel: {\n//                     ...viewModel,\n//                     organization: {\n//                         ...viewModel.organization,\n//                         members: members\n//                     },\n//                     members: sortedMembers\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// function reducer(state: StoreState, action: Action): StoreState | null {\n//     switch (action.type) {\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_START:\n//             return loadStart(state, action as actions.LoadStart)\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n//             return loadSuccess(state, action as actions.LoadSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR:\n//             return loadError(state, action as actions.LoadError)\n//         case ActionFlag.MANAGE_MEMBERSHIP_UNLOAD:\n//             return unload(state, action as actions.Unload)\n//         case ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n//             return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n//             return evaluateSuccess(state, action as actions.EvaluateSuccess)\n//         case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n//             return evaluateError(state, action as actions.EvaluateError)\n//         case ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n//             return saveSuccess(state, action as actions.SaveSuccess)\n//         // case ActionFlag.MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n//         //     return demoteSelfToMemberSuccess(state, action as actions.DemoteSelfToMemberSuccess)\n//         default:\n//             return null\n//     }\n// }\n\nfunction localReducer(state: View<ManageMembershipViewModel>, action: Action): View<ManageMembershipViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n            return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n            return evaluateSuccess(state, action as actions.EvaluateSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n            return evaluateError(state, action as actions.EvaluateError)\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            return saveSuccess(state, action as actions.SaveSuccess)\n        // case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n        //     return demoteSelfToMemberSuccess(state, action as actions.DemoteSelfToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n        case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            // case ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS:\n            return true\n        default:\n            return false\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<ManageMembershipViewModel> = state.views.viewOrgView.viewModel.subViews.manageMembershipView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageMembershipView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/requestAddNarrative'\nimport {\n    StoreState, SaveState, NarrativeState, View,\n    RequestNarrativeViewModel, ViewOrgViewModelKind,\n    ViewState,\n    SelectionState\n} from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nexport function loadStart(state: View<RequestNarrativeViewModel>, action: actions.LoadStart): View<RequestNarrativeViewModel> {\n    return {\n\n        state: ViewState.LOADING,\n        error: null,\n        viewModel: null\n    }\n\n}\n\nexport function loadSuccess(state: View<RequestNarrativeViewModel>, action: actions.LoadSuccess): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.OK,\n        error: null,\n        viewModel: {\n            organization: action.organization,\n            narratives: action.narratives,\n            selectedNarrative: null,\n            relation: action.relation,\n            error: null,\n            selectionState: SelectionState.NONE,\n            saveState: SaveState.SAVED\n        }\n    }\n}\n\nexport function loadError(state: View<RequestNarrativeViewModel>, action: actions.LoadError): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.ERROR,\n        error: action.error,\n        viewModel: null\n    }\n}\n\nexport function sendRequestStart(state: View<RequestNarrativeViewModel>, action: actions.SendRequestStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVING\n        }\n    }\n}\n\nexport function sendRequestSuccess(state: View<RequestNarrativeViewModel>, action: actions.SendRequestSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n\n    const newState: View<RequestNarrativeViewModel> = {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVED\n        }\n    }\n\n    const viewModel = newState.viewModel\n\n    // hmm, TS can't trace this fact from the original state (which we proved\n    // at the top of this function.)\n    if (!viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const selectedNarrative = viewModel.selectedNarrative\n\n    // If the request is by an admin, it will be returned as true, not the request\n    // (the api returns {complete: true})\n    if (action.request === true) {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.ASSOCIATED\n            }\n            return orgNarrative\n        })\n    } else {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.REQUESTED\n            }\n            return orgNarrative\n        })\n    }\n\n    return newState\n}\n\nexport function sendRequestError(state: View<RequestNarrativeViewModel>, action: actions.SendRequestError): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            saveState: SaveState.SAVE_ERROR,\n            error: action.error\n        }\n    }\n}\n\nexport function selectNarrativeStart(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeStart): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel\n        }\n    }\n}\n\nexport function selectNarrativeSuccess(state: View<RequestNarrativeViewModel>, action: actions.SelectNarrativeSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    const newState = {\n        ...state,\n        error: null,\n        viewModel: {\n            ...state.viewModel,\n            selectedNarrative: action.narrative\n        }\n    }\n    return newState\n}\n\nexport function unload(state: View<RequestNarrativeViewModel>, action: actions.Unload): View<RequestNarrativeViewModel> {\n    return {\n        state: ViewState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction sortSuccess(state: View<RequestNarrativeViewModel>, action: actions.SortSuccess): View<RequestNarrativeViewModel> {\n    if (state.viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            narratives: action.narratives\n        }\n    }\n}\n\nfunction localReducer(state: View<RequestNarrativeViewModel>, action: Action): View<RequestNarrativeViewModel> | null {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n            return sendRequestSuccess(state, action as actions.SendRequestSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START:\n            return selectNarrativeStart(state, action as actions.SelectNarrativeStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n            return selectNarrativeSuccess(state, action as actions.SelectNarrativeSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return sortSuccess(state, action as actions.SortSuccess)\n        default:\n            return null\n    }\n}\n\nfunction haveReducer(action: Action): boolean {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return true\n        default:\n            return false\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    if (!haveReducer(action)) {\n        return null\n    }\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const viewState: View<RequestNarrativeViewModel> = state.views.viewOrgView.viewModel.subViews.requestNarrativeView\n    const newViewState = localReducer(viewState, action)\n    if (newViewState === null) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        requestNarrativeView: newViewState\n                    }\n                }\n            }\n        }\n    }\n}\n\n","import * as actions from '../../actions/entities/organization'\nimport { StoreState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess) {\n    const newOrgs = new Map(state.entities.organizations.byId)\n    newOrgs.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            organizations: {\n                ...state.entities.organizations.byId,\n                byId: newOrgs\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: actions.OrganizationEntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}\n","\nimport * as actions from '../actions/entities'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport organizationsReducer from './entities/organization'\n\nfunction userLoaderSuccess(state: StoreState, action: actions.UserLoaderSuccess) {\n    const users = state.entities.users\n    // mutation ... horrible ;)\n    users.byId.set(action.user.username, action.user)\n    // return state\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            users: {\n                ...state.entities.users,\n                byId: new Map(users.byId)\n            }\n        }\n    }\n}\n\nfunction organizationLoaderSuccess(state: StoreState, action: actions.OrganizationLoaderSuccess) {\n    const orgsMap = state.entities.orgs.byId\n    orgsMap.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            orgs: {\n                ...state.entities.orgs,\n                byId: new Map(orgsMap)\n            }\n        }\n    }\n}\n\nfunction loadNarrativeSuccess(state: StoreState, action: actions.LoadNarrativeSuccess) {\n    const narratives = state.entities.narratives\n    narratives.byId.set(action.narrative.workspaceId, action.narrative)\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                ...state.entities.narratives,\n                byId: new Map(narratives.byId)\n            }\n        }\n    }\n}\n\n// TODO: start and error\n\nexport default function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n            return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n        case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n            return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n        case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n            return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n    }\n\n    return organizationsReducer(state, action)\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../actions/dataServices'\nimport { StoreState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport * as userProfileModel from '../../data/models/profile'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        db: {\n            ...state.db,\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.DATA_SERVICE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport { StoreState } from '../../types'\nimport addOrgReducer from './addOrg'\nimport editOrgReducer from './editOrg'\nimport viewOrgReducer from './viewOrg'\nimport browseOrgsReducer from './browseOrgs'\nimport authReducer from './auth'\nimport appReducer from './app'\nimport manageOrganizatiopRequests from './manageOrganizationRequests'\nimport viewMembers from './viewMembers'\nimport inviteUser from './viewOrganization/inviteUser'\nimport manageMembership from './viewOrganization/manageMembership'\nimport requestAddNarrative from './viewOrganization/requestAddNarrative'\nimport entities from './entities'\nimport dataServices from './dataServices'\n\n\nexport function reducer(state: StoreState, action: Action): StoreState {\n    return addOrgReducer(state, action) ||\n        editOrgReducer(state, action) ||\n        browseOrgsReducer(state, action) ||\n        viewOrgReducer(state, action) ||\n        authReducer(state, action) ||\n        appReducer(state, action) ||\n        manageOrganizatiopRequests(state, action) ||\n        viewMembers(state, action) ||\n        inviteUser(state, action) ||\n        manageMembership(state, action) ||\n        requestAddNarrative(state, action) ||\n        entities(state, action) ||\n        dataServices(state, action) ||\n        state;\n}\n\nexport default reducer","import * as React from 'react'\nimport './Owner.css'\n\nimport Avatar from './Avatar'\nimport { Icon, Tooltip } from 'antd';\nimport * as userModel from '../../data/models/user'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface OwnerProps {\n    user: userModel.User\n    avatarSize?: number\n    showAvatar: boolean\n}\n\ninterface OwnerState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class Owner extends React.Component<OwnerProps, OwnerState> {\n    constructor(props: OwnerProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        return (\n            <span>\n                <Icon type=\"crown\" /> owner\n        </span>\n        )\n    }\n\n    renderAvatar() {\n        if (this.props.showAvatar) {\n            return (\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n            )\n        }\n    }\n\n    renderCompact() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"Owner-owner\" >\n                {/* <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div> */}\n                {this.renderAvatar()}\n\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            title={tooltip}>\n                            <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n\n                    </div>\n                    {/* <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Owner View-NORMAL\" >\n                <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div>\n                    {/* <div className=\"role\">\n                        {this.renderRole()}\n                    </div> */}\n                    {/* <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div> */}\n                    <div className=\"Owner-title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"Owner-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Owner-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    render() {\n        return this.renderCompact()\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return this.renderCompact()\n\n        //     case View.NORMAL:\n        //         return this.renderNormal()\n        // }\n    }\n}\n\n","import * as React from 'react'\nimport md5 from 'md5'\n\nexport interface OrgLogoProps {\n    logoUrl: string | null\n    size: number\n    organizationName: string\n    organizationId: string\n}\n\nexport interface OrgLogoState {\n\n}\n\nexport default class OrgLogo extends React.Component<OrgLogoProps, OrgLogoState> {\n    constructor(props: OrgLogoProps) {\n        super(props)\n    }\n\n    renderLogoUrl() {\n        if (!this.props.logoUrl) {\n            return (\n                <span>n/a</span>\n            )\n        }\n        return (\n            <img src={this.props.logoUrl} width={this.props.size} />\n        )\n    }\n\n    // see: https://github.com/lautis/unicode-substring/blob/master/index.js\n    charAt(inString: string, position: number) {\n        // const c1 = inString.charAt(position)\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderDefaultInitial() {\n        const initial = this.charAt(this.props.organizationName, 0).toUpperCase()\n        // const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.organizationId)\n\n        const color = hash.substr(0, 6)\n        // return (\n        //     <span style={{ color: '\"#' + color + '\"', width: this.props.size, height: this.props.size, fontSize: this.props.size - 6 }}\n        //     >{initial}</span>\n        // )\n        return (\n            <svg width={this.props.size} height={this.props.size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={this.props.size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogo() {\n        if (this.props.logoUrl) {\n            return this.renderLogoUrl()\n        }\n        return this.renderDefaultInitial();\n    }\n\n    render() {\n        return this.renderLogo()\n    }\n}","import * as React from 'react'\nimport './Avatar.css'\nimport noUserPic from './nouserpic.png'\n\nimport { User } from '../../types'\n\nexport interface AvatarProps {\n    user: User,\n    size: number\n}\n\ninterface AvatarState {\n\n}\n\nexport class Avatar extends React.Component<AvatarProps, AvatarState> {\n    constructor(props: AvatarProps) {\n        super(props)\n    }\n\n    getAvatarUrl(user: User) {\n        switch (user.avatarOption || 'gravatar') {\n            case 'gravatar':\n                const gravatarDefault = user.gravatarDefault || 'identicon';\n                const gravatarHash = user.gravatarHash;\n                if (gravatarHash) {\n                    return 'https://www.gravatar.com/avatar/' + gravatarHash + '?s=60&amp;r=pg&d=' + gravatarDefault;\n                } else {\n                    return noUserPic;\n                }\n            case 'silhouette':\n            case 'mysteryman':\n            default:\n                return noUserPic;\n        }\n    }\n\n    render() {\n        const avatarUrl = this.getAvatarUrl(this.props.user)\n        return (\n            <img\n                src={avatarUrl}\n                style={{ width: this.props.size }}\n            />\n        )\n    }\n\n}\n\nexport default Avatar","export interface GenericClientParams {\n    url: string\n    module: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface ErrorResult {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport type JSONRPCResponse = [any, ErrorResult | null]\n\nexport class GenericClient {\n    url: string;\n    token: string | null\n    module: string\n\n    constructor({ url, token, module }: GenericClientParams) {\n        this.url = url\n        this.token = token || null\n        this.module = module\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: param\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse(response: Response): Promise<JSONRPCResponse> {\n        if (response.status === 200) {\n            const { result, error } = await response.json()\n            if (result) {\n                return [result, null]\n            } else {\n                return [null, error]\n            }\n\n        } else if (response.status === 204) {\n            return [null, null]\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                return [null, error]\n            } else {\n                const text = await response.text()\n                return [null, {\n                    code: 0,\n                    name: 'Internal Server Error (for real)',\n                    message: 'The service experienced an internal error',\n                    error: text\n                }]\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                return this.processResponse(response)\n            })\n    }\n}\n\nexport class AuthorizedGenericClient extends GenericClient {\n    token: string;\n\n    constructor(params: GenericClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        return this.processResponse(response)\n    }\n}\n\n","import { AuthorizedServiceClient, ServiceClientParams } from './serviceClient'\n\n// types from module\n\nexport interface Service {\n    module_name: string\n    version: string | null\n}\n\nexport interface ServiceStatus {\n    module_name: string\n    version: string\n    git_commit_hash: string\n    release_tags: Array<string>\n    hash: string\n    url: string\n    up: number // aka boolean\n    status: string\n    health: string\n}\n\n// impl\n\nexport interface ServiceWizardClientParams extends ServiceClientParams {\n\n}\n\nexport interface GetServiceStatusParams extends Service { }\n\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\nexport class ServiceWizardClient extends AuthorizedServiceClient {\n\n    static module: string = 'ServiceWizard'\n\n    constructor(params: ServiceWizardClientParams) {\n        super(params)\n    }\n\n\n    getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        return this.callFunc('get_service_status', params)\n            .then((result) => {\n                if (result.result &&\n                    result.result.length > 0) {\n                    const theResult = result.result[0]\n                    if (!theResult) {\n                        throw new Error('Crazy at it seems, no result')\n                    }\n                    return theResult as GetServiceStatusResult\n                } else {\n                    throw new Error('Crazy at it seems, no result')\n                }\n            })\n    }\n\n}","import Bluebird from 'bluebird'\nimport { AuthorizedServiceClient } from './serviceClient'\n\nimport { ServiceWizardClient } from './serviceWizard'\nimport { GenericClient, AuthorizedGenericClient } from './genericClient'\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Bluebird<T>\n\nexport interface CacheParams {\n    itemLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n}\n\nexport interface CacheItem<T> {\n    id: string\n    value: T | null\n    createdAt: number\n    fetcher: () => Bluebird<T>\n    reserved: boolean\n}\n\nexport class Cache<T> {\n\n    cache: Map<string, CacheItem<T>>\n    cacheLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n    isMonitoring: boolean\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>()\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        window.setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item)\n                    cacheRenewed = true\n                }\n            });\n            this.cache = newCache\n            this.isMonitoring = false\n            if (cacheRenewed) {\n                this.runMonitor()\n            }\n        }, this.monitoringFrequency)\n    }\n\n    isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return (elapsed > this.cacheLifetime);\n    }\n\n    isReserved(cacheItem: any) {\n        return cacheItem.reserved;\n    }\n\n    getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null\n        }\n        const cached = this.cache.get(id)\n        if (this.isExpired(cached)) {\n            this.cache.delete(id)\n            return;\n        }\n        return cached;\n    }\n\n    reserveWaiter(item: CacheItem<T>): Bluebird<CacheItem<T>> {\n        return new Bluebird<CacheItem<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const waiting = true;\n\n            const waiter = () => {\n                if (!waiting) {\n                    return;\n                }\n                window.setTimeout(() => {\n                    if (this.cache.has(item.id)) {\n                        // If on a wait-loop cycle we discover that the\n                        // cache item has been deleted, we volunteer\n                        // to attempt to fetch it ourselves.\n                        // The only case now for this is a cancellation\n                        // of the first request to any dynamic service,\n                        // which may cancel the initial service wizard\n                        // call rather than the service call.\n                        return this.reserveAndFetch({\n                            id: item.id,\n                            fetcher: item.fetcher\n                        })\n                            .then(() => {\n                                // resolve(result);\n                                // we resolve with the cache item just\n                                // as if we had waited for it.\n                                resolve(this.cache.get(item.id))\n                            })\n                            .catch((err: Error) => {\n                                reject(err);\n                            });\n                    }\n                    if (!item.reserved) {\n                        resolve(item);\n                    } else {\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed > this.waiterTimeout) {\n                            this.cache.delete(item.id)\n                            reject(new Error(\n                                'Timed-out waiting for cache item to become available; timeout '\n                                + this.waiterTimeout + ', waited ' + elapsed));\n                        } else {\n                            waiter();\n                        }\n                    }\n                }, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    reserveAndFetch({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        // now, reserve it.\n        this.reserveItem(id, fetcher)\n\n        // and then fetch it.\n        const fetchPromise = fetcher()\n            .then((result: any) => {\n                this.setItem(id, result, fetcher)\n                return result\n            })\n            .finally(() => {\n                // If the fetch was cancelled, we need to remove\n                // the reserved item. This should signal any queued waiters\n                // to spawn their own fetch.\n                if (fetchPromise.isCancelled()) {\n                    this.cache.get(id)\n                }\n            });\n        return fetchPromise;\n    }\n\n    getItemWithWait({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        const cached = this.cache.get(id)\n        if (cached) {\n            if (this.isExpired(cached)) {\n                this.cache.delete(id)\n            } else if (this.isReserved(cached)) {\n                return this.reserveWaiter(cached)\n                    .then((cached) => {\n                        return cached.value;\n                    });\n            } else {\n                return Bluebird.resolve(cached.value)\n            }\n        }\n\n        return this.reserveAndFetch({ id, fetcher });\n    }\n\n    reserveItem(id: string, fetcher: () => Bluebird<T>) {\n        this.cache.set(id, {\n            id: id,\n            createdAt: new Date().getTime(),\n            reserved: true,\n            value: null,\n            fetcher: fetcher\n        });\n    }\n\n    setItem(id: string, value: T, fetcher: () => Bluebird<T>) {\n        if (this.cache.has(id)) {\n            const item = this.cache.get(id)\n            if (item && item.reserved) {\n                item.reserved = false\n                item.value = value\n                item.fetcher = fetcher\n            } else {\n                // overwriting? should we allow this?\n                this.cache.set(id, {\n                    id: id,\n                    createdAt: new Date().getTime(),\n                    fetcher: fetcher,\n                    reserved: false,\n                    value: value\n                })\n            }\n        } else {\n            this.cache.set(id, {\n                id: id,\n                createdAt: new Date().getTime(),\n                fetcher: fetcher,\n                reserved: false,\n                value: value\n            })\n        }\n        this.runMonitor();\n    }\n}\nvar moduleCache = new Cache<any>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n})\n\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams {\n    token: string\n    url: string\n    version?: string\n    timeout?: number\n    rpcContext?: any\n}\n\nexport class DynamicServiceClient {\n    token: string\n    timeout: number\n    rpcContext: any\n    url: string\n    version: string | null\n\n    static module: string\n\n    constructor({ token, url, version, timeout, rpcContext }: DynamicServiceClientParams) {\n        // Establish an auth object which has properties token and user_id.\n        this.token = token;\n        this.timeout = timeout || 10000;\n        this.rpcContext = rpcContext || null;\n\n        if (!url) {\n            throw new Error('The service discovery url was not provided');\n        }\n        this.url = url;\n\n        this.version = version || null;\n        if (version === 'auto') {\n            this.version = null;\n        }\n    }\n\n    options() {\n        return {\n            timeout: this.timeout,\n            authorization: this.token,\n            rpcContext: this.rpcContext\n        };\n    }\n\n    getModule() {\n        return (<typeof DynamicServiceClient>this.constructor).module\n    }\n\n    moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.getModule() + ':auto';\n        } else {\n            moduleId = this.getModule() + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    getCached(fetcher: () => Bluebird<any>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    lookupModule() {\n        return this.getCached((): Bluebird<any> => {\n            const func = 'get_service_status';\n            const params = [{\n                module_name: this.getModule(),\n                version: this.version\n            }];\n            // NB: pass null for numRets (number of return values) so we get the\n            // full return structure.\n            const client = new ServiceWizardClient({\n                url: this.url,\n                token: this.token\n            })\n\n            return Bluebird.resolve(\n                client.getServiceStatus({\n                    module_name: this.getModule(),\n                    version: this.version\n                })\n            )\n        })\n    }\n\n    callFunc(funcName: string, params: any) {\n        return this.lookupModule()\n            .then((serviceStatus) => {\n                const client = new AuthorizedGenericClient({\n                    module: serviceStatus.module_name,\n                    url: serviceStatus.url,\n                    token: this.token\n                })\n                return Bluebird.resolve(\n                    client.callFunc(funcName, params)\n                )\n            })\n            .catch((err) => {\n                console.error('ERROR: ' + err.name + \" = \" + err.message, err)\n                throw err\n            })\n    }\n}\n","// import { AuthorizedServiceClient, ServiceClientParams, JSONPayload } from './serviceClient'\n\nimport { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nimport { RawObjectInfo, RawWorkspaceInfo, WorkspaceInfo, ObjectInfo, workspaceInfoToObject, objectInfoToObject } from './workspaceUtils'\n\nexport interface NarrativeServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface ListNarrativesParams {\n    type: string\n}\n\ntype Metadata = {}\n\n/* Information about an object, including user provided metadata.\n\n       obj_id objid - the numerical id of the object.\n       obj_name name - the name of the object.\n       type_string type - the type of the object.\n       timestamp save_date - the save date of the object.\n       obj_ver ver - the version of the object.\n       username saved_by - the user that saved or copied the object.\n       ws_id wsid - the workspace containing the object.\n       ws_name workspace - the workspace containing the object.\n       string chsum - the md5 checksum of the object.\n       int size - the size of the object in bytes.\n       usermeta meta - arbitrary user-supplied metadata about\n           the object.\n   */\n\n\n\n\nexport interface ListNarrativesResponseResult {\n    narratives: Array<{\n        ws: RawWorkspaceInfo\n        nar: RawObjectInfo\n    }>\n}\n\nexport interface ServiceResponse<T> {\n    id: string\n    version: string\n    result?: [T] | null\n    error?: any\n}\n\n\n\n// export type ListNarrativesResponse = ServiceResponse<ListNarrativesResponseResult>\n\n\n\nexport class NarrativeServiceClient extends DynamicServiceClient {\n\n    static module: string = 'NarrativeService'\n\n    constructor(params: NarrativeServiceClientParams) {\n        super(params)\n    }\n\n\n    async listNarratives(type: string): Promise<ListNarrativesResponseResult> {\n        // note usage of unknown below -- Bluebird and native Promise!\n        const [result, error] = await this.callFunc('list_narratives', [{\n            type: type\n        }])\n        // as Promise<ServiceResponse<ListNarrativesResponseResult>>\n\n        // should check id and version, or should call func do that?\n        if (result && result[0]) {\n            return result[0]\n            // return result[0].narratives.map((nar) => {\n            //     return {\n            //         workspaceInfo: workspaceInfoToObject(nar.ws),\n            //         objectInfo: objectInfoToObject(nar.nar)\n            //     }\n            // })\n        } else {\n            // TODO: handle error\n            // console.error('Result is missing', id, version, result, error)\n            throw new Error('Result is missing!')\n        }\n    }\n\n}","import { AuthorizedGenericClient } from '../apis/genericClient'\nimport { NarrativeServiceClient } from '../apis/narrativeService'\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport * as workspaceApi from '../apis/workspaceUtils'\nimport * as userModel from './user'\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport type NarrativeID = number\n\nexport type WorkspaceID = number\nexport type ObjectID = number\n\nexport enum NarrativeAccess {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport interface NarrativeBase {\n    workspaceId: WorkspaceID,\n    access: NarrativeAccess\n}\n\nexport interface InaccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.NONE\n}\n\nexport interface AccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n    isPublic: boolean\n    objectId: ObjectID\n    title: string\n    // description?: string\n    owner: userModel.Username\n    // creator: userModel.Username\n    // createdAt: Date\n    lastSavedAt: Date\n    lastSavedBy: userModel.Username\n}\n\nexport type Narrative = AccessibleNarrative | InaccessibleNarrative\n\n// export interface OrganizationNarrativex {\n//     workspaceId: WorkspaceID\n//     objectId: ObjectID\n//     title: string\n//     status: NarrativeState\n//     // inOrganization: boolean\n//     // createdAt: Date\n//     owner: userModel.Username\n//     modifiedAt: Date\n// }\n\nexport interface OrganizationNarrative {\n    status: NarrativeState\n    narrative: AccessibleNarrative\n}\n\nexport interface NarrativeWorkspaceInfo extends workspaceApi.WorkspaceInfo {\n    metadata: {\n        narrative_nice_name: string\n        narrative: string\n        is_temporary: string\n    }\n}\n// export interface GetOwnNarrativesResult {\n//     workspaceInfo: WorkspaceInfo\n//     objectInfo: ObjectInfo\n// }\n\nexport enum Sort {\n    TITLE = 'TITLE',\n    LAST_SAVED = 'LAST_SAVED'\n}\n\ninterface NarrativeModelParams {\n    workspaceServiceURL: string\n    serviceWizardURL: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    username: string\n    token: string\n}\n\nexport class NarrativeModel {\n\n    params: NarrativeModelParams\n\n    constructor(params: NarrativeModelParams) {\n        this.params = params\n    }\n\n    // Narratives\n\n    async getOwnNarratives(organizationId: string): Promise<Array<OrganizationNarrative>> {\n        const narrativeServiceClient = new NarrativeServiceClient({\n            url: this.params.serviceWizardURL,\n            token: this.params.token,\n            timeout: 10000,\n        })\n\n        const groupsClient = new orgModel.OrganizationModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL,\n            userProfileServiceURL: this.params.userProfileServiceURL\n        })\n\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const [narrativesResult, organization, pendingRequests] = await Promise.all([\n            narrativeServiceClient.listNarratives('mine'),\n            groupsClient.getOrg(organizationId),\n            requestClient.getPendingRequestsForOrg(organizationId)\n        ])\n\n        if (organization.kind === orgModel.OrganizationKind.INACCESSIBLE_PRIVATE) {\n            throw new Error('Cannot get own narratives for private inaccessible organization')\n        }\n\n        const workspacesInOrg = organization.narratives.map((narrative) => {\n            return narrative.workspaceId\n        })\n\n        return narrativesResult.narratives\n            .map((nar) => {\n                return {\n                    workspaceInfo: <unknown>workspaceApi.workspaceInfoToObject(nar.ws) as NarrativeWorkspaceInfo,\n                    objectInfo: workspaceApi.objectInfoToObject(nar.nar)\n                }\n            })\n            .filter((nar) => {\n                return (nar.workspaceInfo.metadata.is_temporary === 'false')\n            })\n            .map((narrative) => {\n                let status: NarrativeState\n\n                if (workspacesInOrg.indexOf(narrative.workspaceInfo.id) !== -1) {\n                    status = NarrativeState.ASSOCIATED\n                } else if (pendingRequests.find((request) => {\n                    // TODO: these requests should have already been converted to \n                    // model-friendly requests (typed!)\n                    return (request.resourceType === requestModel.RequestResourceType.WORKSPACE &&\n                        request.narrativeId === String(narrative.workspaceInfo.id))\n                })) {\n                    status = NarrativeState.REQUESTED\n                } else {\n                    status = NarrativeState.NONE\n                }\n                return {\n                    status: status,\n                    narrative: {\n                        access: NarrativeAccess.OWNER,\n                        isPublic: narrative.workspaceInfo.globalReadPermission,\n                        workspaceId: narrative.workspaceInfo.id,\n                        objectId: narrative.objectInfo.id,\n                        title: narrative.workspaceInfo.metadata.narrative_nice_name,\n                        owner: narrative.workspaceInfo.owner,\n                        lastSavedAt: narrative.objectInfo.savedAt,\n                        lastSavedBy: narrative.objectInfo.savedBy\n                    } as AccessibleNarrative\n\n                }\n            })\n            .sort((a, b) => {\n                return (a.narrative.title.localeCompare(b.narrative.title))\n            })\n    }\n\n    // async workspaceToNarrative(workspaceId: WorkspaceID): Promise<orgModel.NarrativeResource | null> {\n    //     const workspaceClient = new AuthorizedGenericClient({\n    //         module: 'Workspace',\n    //         url: this.params.workspaceServiceURL,\n    //         token: this.params.token\n    //     })\n    //     try {\n    //         const [[[rawObjectInfo], rawObjectInfoError], [[rawWorkspaceInfo], rawWorkspaceInfoError]] = await Promise.all([\n    //             workspaceClient.callFunc('get_object_info3', [{\n    //                 objects: [{\n    //                     wsid: workspaceId,\n    //                     // TODO: fix this!!\n    //                     objid: 1\n    //                 }],\n    //                 includeMetadata: 1,\n    //                 ignoreErrors: 0\n    //             }]),\n    //             workspaceClient.callFunc('get_workspace_info', [{\n    //                 id: workspaceId\n    //             }])\n    //         ])\n\n    //         if (rawObjectInfoError || rawWorkspaceInfoError) {\n    //             // console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n    //             return null\n    //         }\n\n    //         const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n    //         return {\n    //             workspaceId: workspaceInfo.id,\n    //             title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n    //             permission: orgModel.userPermissionToWorkspacePermission(workspaceInfo.userPermission, workspaceInfo.owner === this.params.username),\n    //             isPublic: workspaceInfo.globalReadPermission\n    //         }\n\n    //     } catch (ex) {\n    //         // assume it is an inaccessible workspace\n    //         // console.warn('narrative not accessible', ex)\n    //         return null\n    //     }\n    // }\n\n    getSorter(sort: Sort) {\n        switch (sort) {\n            case Sort.TITLE:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return a.narrative.title.localeCompare(b.narrative.title)\n                }\n            case Sort.LAST_SAVED:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return b.narrative.lastSavedAt.getTime() - a.narrative.lastSavedAt.getTime()\n                }\n            default:\n                throw new Error('invalid sort spec')\n        }\n    }\n\n    // sortNarratives(narratives: Array<AccessibleNarrative>, sort: Sort): Array<AccessibleNarrative> {\n    //     let sorter = this.getSorter(sort)\n\n    //     return narratives.sort(sorter)\n    // }\n\n    sortOrganizationNarratives(narratives: Array<OrganizationNarrative>, sort: Sort): Array<OrganizationNarrative> {\n        let sorter = this.getSorter(sort)\n\n        return narratives.sort(sorter).slice(0)\n    }\n\n    /*\n    getNarrative fetches the requested narrative and returns a Narrative object if found \n    and null otherwise. Note that this ignores the narrative state vis-a-vis any organization.\n    It also caches narratives.\n    */\n    async getNarrative(workspaceId: WorkspaceID): Promise<Narrative> {\n        const workspaceClient = new AuthorizedGenericClient({\n            module: 'Workspace',\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n        try {\n            const [rawWorkspaceInfo, rawWorkspaceInfoError] = await workspaceClient.callFunc('get_workspace_info', [{\n                id: workspaceId\n            }])\n\n\n            if (rawWorkspaceInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo[0]) as NarrativeWorkspaceInfo\n\n            const narrativeId = workspaceInfo.metadata.narrative\n            if (!narrativeId) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n            const objectId = parseInt(narrativeId, 10)\n\n            const [rawObjectInfo, rawObjectInfoError] = await workspaceClient.callFunc('get_object_info3', [{\n                objects: [{\n                    wsid: workspaceId,\n                    objid: objectId\n                }],\n                includeMetadata: 1,\n                ignoreErrors: 0\n            }])\n\n            if (rawObjectInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const objectInfo: workspaceApi.ObjectInfo = workspaceApi.objectInfoToObject(rawObjectInfo[0].infos[0])\n\n            let access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n            switch (workspaceInfo.userPermission) {\n                case 'n':\n                    if (workspaceInfo.globalReadPermission) {\n                        access = NarrativeAccess.VIEW\n                        break\n                    } else {\n                        throw new Error('Cannot have no access and no global read permission!')\n                    }\n                case 'r':\n                    access = NarrativeAccess.VIEW\n                    break\n                case 'w':\n                    access = NarrativeAccess.EDIT\n                    break\n                case 'a':\n                    if (workspaceInfo.owner === this.params.username) {\n                        access = NarrativeAccess.OWNER\n                    } else {\n                        access = NarrativeAccess.ADMIN\n                    }\n                    break\n                default:\n                    throw new Error('Unknown workspace permission: ' + workspaceInfo.userPermission)\n            }\n\n            return {\n                workspaceId: workspaceInfo.id,\n                access: access,\n                isPublic: workspaceInfo.globalReadPermission,\n                objectId: objectInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                owner: workspaceInfo.owner,\n                lastSavedAt: objectInfo.savedAt,\n                lastSavedBy: objectInfo.savedBy\n            }\n        } catch (ex) {\n            console.error('Error fetching narrative!', ex)\n            throw ex\n        }\n    }\n}\n","export type Metadata = {}\n\nexport type RawObjectInfo = [\n    number, // objid - object id\n    string, // name - object name\n    string, // type - object type\n    string, // save_date - iso8601 timestamp when last saved\n    number, // ver - object version\n    string, // saved_by - username who saved it last\n    number, // wsid - workspace id\n    string, // workspace - workspace name,\n    string, // chsum - checksum of the object\n    number, // size - size of the object (bytes)\n    Metadata   // meta - string to string object of stuff\n]\n\nexport type RawWorkspaceInfo = [\n    number, // id - workspace id\n    string, // workspace - workspace name\n    string, // owner - username who owns it\n    string, // moddate - iso8601 timestamp when last modified\n    number, // max_objid - last object id assigned to object in workspace\n    string, // user_permission - permission of user who made reqeust wrt workspace\n    string, // globalread - int bool whether this workspace is shared globally\n    string, // lockstat - status of the workspace lock\n    Metadata // metadata\n]\n\nexport interface WorkspaceInfo {\n    id: number\n    name: string\n    owner: string\n    modifiedAt: Date\n    objectCount: number\n    userPermission: string\n    globalReadPermission: boolean\n    lockStatus: string\n    metadata: Metadata\n}\n\nexport interface ObjectInfo {\n    id: number\n    name: string\n    type: {\n        module: string\n        name: string\n        majorVersion: number\n        minorVersion: number\n        id: string\n    }\n    version: number\n    savedAt: Date\n    savedBy: string\n    workspaceId: number\n    workspaceName: string\n    checksum: string\n    size: number\n    ref: string\n    metadata: Metadata\n}\n\nfunction iso8601ToDate(dateString: string) {\n    const isoRE = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)([\\+\\-])(\\d\\d)(:?[\\:]*)(\\d\\d)/;\n    const dateParts = isoRE.exec(dateString);\n    if (!dateParts) {\n        throw new TypeError('Invalid Date Format for ' + dateString);\n    }\n    // This is why we do this -- JS insists on the colon in the tz offset.\n    const offset = dateParts[7] + dateParts[8] + ':' + dateParts[10];\n    const newDateString = dateParts[1] + '-' + dateParts[2] + '-' + dateParts[3] + 'T' + dateParts[4] + ':' + dateParts[5] + ':' + dateParts[6] + offset;\n    return new Date(newDateString);\n}\n\nexport function workspaceInfoToObject(wsInfo: RawWorkspaceInfo): WorkspaceInfo {\n    return {\n        id: wsInfo[0],\n        name: wsInfo[1],\n        owner: wsInfo[2],\n        modifiedAt: iso8601ToDate(wsInfo[3]),\n        objectCount: wsInfo[4],\n        userPermission: wsInfo[5],\n        globalReadPermission: wsInfo[6] === 'r' ? true : false,\n        lockStatus: wsInfo[7],\n        metadata: wsInfo[8]\n    }\n}\n\nexport function objectInfoToObject(data: RawObjectInfo): ObjectInfo {\n    const type = data[2].split(/[-.]/)\n\n    return {\n        id: data[0],\n        name: data[1],\n        // type: data[2],\n        type: {\n            id: data[2],\n            module: type[0],\n            name: type[1],\n            majorVersion: parseInt(type[2], 10),\n            minorVersion: parseInt(type[3], 10)\n        },\n        savedAt: iso8601ToDate(data[3]),\n        version: data[4],\n        savedBy: data[5],\n        workspaceId: data[6],\n        workspaceName: data[7],\n        checksum: data[8],\n        size: data[9],\n        metadata: data[10],\n        ref: data[6] + '/' + data[0] + '/' + data[4]\n    }\n}\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as userModel from '../../data/models/user'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { AppError, StoreState } from '../../types'\n\nexport interface EntityAction extends Action {\n}\n\nexport interface UserLoader extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER,\n    userId: userModel.Username\n}\n\nexport interface UserLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_START\n}\n\nexport interface UserLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n    user: userModel.User\n}\n\nexport interface UserLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function userLoaderStart(): UserLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_START\n    }\n}\n\nexport function userLoaderSuccess(user: userModel.User): UserLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n        user: user\n    }\n}\n\nexport function userLoaderError(error: AppError): UserLoaderError {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function userLoader(userId: userModel.Username) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await model.getUser(userId)\n            dispatch(userLoaderSuccess(user))\n        } catch (ex) {\n            dispatch(userLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport interface OrganizationLoader extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface OrganizationLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n}\n\nexport interface OrganizationLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n}\n\nexport interface OrganizationLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function organizationLoaderStart(): OrganizationLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n    }\n}\n\nexport function organizationLoaderSuccess(organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization): OrganizationLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function organizationLoaderError(error: AppError): OrganizationLoaderError {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function organizationLoader(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(organizationLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const organization = await model.getOrg(organizationId)\n            dispatch(organizationLoaderSuccess(organization))\n        } catch (ex) {\n            dispatch(organizationLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Narratives\n\nexport interface LoadNarrative {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD\n}\n\ninterface LoadNarrativeStart {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n}\n\nexport interface LoadNarrativeSuccess {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS\n    narrative: narrativeModel.Narrative\n}\n\ninterface LoadNarrativeError {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadNarrative(workspaceId: narrativeModel.WorkspaceID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(<LoadNarrativeStart>{\n            type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            workspaceServiceURL: config.services.Workspace.url,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const narrative = await narrativeClient.getNarrative(workspaceId)\n            dispatch(<LoadNarrativeSuccess>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS,\n                narrative: narrative\n            })\n        } catch (ex) {\n            dispatch(<LoadNarrativeError>{\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'invalid state',\n                    message: 'Cannot access a Narrative for an inaccessible Organization'\n                }))\n                return\n            }\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n\n","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Owner from './Owner'\n\ninterface LoaderProps {\n    username: orgModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    showAvatar: boolean\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    times: number\n    constructor(props: LoaderProps) {\n        super(props)\n        this.times = 0\n    }\n\n    render() {\n        this.times += 1;\n        if (this.props.user) {\n            return (\n                <Owner user={this.props.user} avatarSize={this.props.avatarSize} showAvatar={this.props.showAvatar} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading owner...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    username: orgModel.Username\n    avatarSize: number\n    showAvatar: boolean\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","export interface niceElapsedOptions {\n    absoluteAfter?: number,\n    compactDate?: boolean,\n    now?: Date\n}\n\nexport function niceElapsed(someDate: Date, options: niceElapsedOptions = {}) {\n    const nowDate = options.now || new Date()\n\n    const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n    const elapsedAbs = Math.abs(elapsed);\n\n    let measure, measureAbs, unit;\n    const maxDays = options.absoluteAfter || 90\n    if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n        if (elapsedAbs === 0) {\n            return 'now';\n        } else if (elapsedAbs < 60) {\n            measure = elapsed;\n            measureAbs = elapsedAbs;\n            unit = 'second';\n        } else if (elapsedAbs < 60 * 60) {\n            measure = Math.round(elapsed / 60);\n            measureAbs = Math.round(elapsedAbs / 60);\n            unit = 'minute';\n        } else if (elapsedAbs < 60 * 60 * 24) {\n            measure = Math.round(elapsed / 3600);\n            measureAbs = Math.round(elapsedAbs / 3600);\n            unit = 'hour';\n        } else {\n            measure = Math.round(elapsed / (3600 * 24));\n            measureAbs = Math.round(elapsedAbs / (3600 * 24));\n            unit = 'day';\n        }\n\n        if (measureAbs > 1) {\n            unit += 's';\n        }\n\n        let prefix = null;\n        let suffix = null;\n        if (measure < 0) {\n            prefix = 'in';\n        } else if (measure > 0) {\n            suffix = 'ago';\n        }\n\n        return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n    } else {\n        // otherwise show the actual date, with or without the year.\n        if (options.compactDate && nowDate.getFullYear() === someDate.getFullYear()) {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric'\n            }).format(someDate)\n        } else {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            }).format(someDate)\n        }\n    }\n}","import * as React from 'react'\nimport { niceElapsed } from '../lib/time'\nimport { Tooltip } from 'antd';\nimport { updateHomeUrl } from '../redux/actions/addOrg';\n\nexport interface NiceElapsedTimeProps {\n    time: Date\n    showTooltip?: boolean\n    tooltipPrefix?: string\n}\n\ninterface NiceElapsedTimeState {\n    now: Date\n}\n\n// dynamic intervals, based on the range of elapsed time\n// TODO: using intervals we should actually set the interval to \n// trigger based on the datetime to display.\nconst intervals = [\n    // below 1 minute, every 1/2 sec\n    [60 * 1000, 500],\n    // between 1 minute and 1 hour, every 30 seconds\n    [60 * 60 * 1000, 30 * 1000],\n    // between 1 hour and 1 day, every 30 minutes\n    [60 * 60 * 24 * 1000, 60 * 1000 * 30],\n    // over 1 day, once per day\n    [Infinity, 60 * 60 * 24 * 1000]\n]\n\nexport default class NiceElapsedTime extends React.Component<NiceElapsedTimeProps, NiceElapsedTimeState> {\n    nowTimer: number | null\n    interval: number\n    constructor(props: NiceElapsedTimeProps) {\n        super(props)\n\n        this.nowTimer = null\n\n        this.state = {\n            now: new Date()\n        }\n\n        this.interval = this.calcInterval()\n    }\n\n    calcInterval(): number {\n        const elapsed = this.state.now.getTime() - this.props.time.getTime()\n        for (const [upto, interval] of intervals) {\n            if (elapsed < upto) {\n                return interval\n            }\n        }\n        throw new Error('did not find interval')\n    }\n\n    handleInterval() {\n        this.setState({ now: new Date() })\n        const interval = this.calcInterval()\n        if (this.interval !== interval) {\n            this.interval = interval\n            this.startIntervalTimer()\n        }\n    }\n\n    startIntervalTimer() {\n        if (this.nowTimer) {\n            window.clearInterval(this.nowTimer)\n        }\n        this.nowTimer = window.setInterval(() => {\n            this.handleInterval()\n        }, this.interval)\n    }\n\n    componentDidMount() {\n        this.startIntervalTimer()\n    }\n\n    componentWillUnmount() {\n        if (this.nowTimer) {\n            window.clearInterval(this.nowTimer)\n        }\n    }\n\n    render() {\n        if (this.props.showTooltip === false) {\n            return (\n                <span>\n                    {niceElapsed(this.props.time, { absoluteAfter: 30, now: this.state.now })}\n                </span>\n            )\n        }\n\n        const fullDate = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        timeZoneName: 'short'\n                    }).format(this.props.time)\n                }\n            </span>\n        )\n        let tooltip\n        if (this.props.tooltipPrefix) {\n            tooltip = (\n                <span>\n                    {this.props.tooltipPrefix}\n                    {fullDate}\n                </span>\n            )\n        } else {\n            tooltip = fullDate\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(this.props.time, { absoluteAfter: 30, now: this.state.now })}\n            </Tooltip>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from './OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal } from 'antd'\nimport Owner from './entities/OwnerContainer'\nimport { ComponentView } from '../types'\nimport './BriefOrganization.css'\nimport NiceElapsedTime from './NiceElapsedTime';\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganization-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganization-statusRow\">\n                    <div className=\"BriefOrganization-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganization-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganization-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-freshnessRow\">\n                    <div className=\"BriefOrganization-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganization-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganization-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-researchInterests BriefOrganization-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganization-orgOwner BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} key={org.owner.username} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                {this.renderMemberRow(org)}\n                {this.renderNarrativeRow(org)}\n                {this.renderModifiedRow(org)}\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganization-body\">\n                    {/* <div className=\"BriefOrganization-freshnessCol\">\n                        {this.renderFreshness(org)}\n                    </div> */}\n                    <div className=\"BriefOrganization-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganization-infoCol\">\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                <div className=\"BriefOrganization-orgName BriefOrganization-infoTableRow\">\n                                    <NavLink to={`/viewOrganization/${org.id}`}>\n                                        {org.name}\n                                    </NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganization-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react';\nimport './component.css';\nimport { Alert, Button } from 'antd';\nimport * as orgModel from '../../../../data/models/organization/model'\nimport BriefOrganization from '../../../BriefOrganization';\n\n// TODO: need more ergonomic way to resolve the common issue of data types interfering with \n// component types.\n\nexport interface OrganizationsProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    myOrgsUnfiltered: boolean\n}\n\nexport interface OrganizationsState {\n    searchTerms: Array<string>\n}\n\nexport class Organizations extends React.Component<OrganizationsProps, OrganizationsState> {\n    constructor(props: OrganizationsProps) {\n        super(props)\n\n        this.state = {\n            searchTerms: []\n        }\n    }\n\n    renderAdminInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderNoOrgs() {\n        const browseButton = (\n            <Button size=\"small\" type=\"default\">browse</Button>\n        )\n        const createButton = (\n            <Button size=\"small\" type=\"default\">create</Button>\n        )\n        let message\n        if (this.props.myOrgsUnfiltered) {\n            message = (\n                <div>\n                    <p>\n                        You neither own nor are a member of any Organizations, so there is nothing to show you here.\n                    </p>\n                    <p>\n                        You may use the <b>Create Organization</b> button on the upper right to\n                        create your own Organization, or use the <b>All Orgs</b> filter on the right\n                        to browse and search all public Organizations.\n                    </p>\n                    {/* <p>\n                        You can use the filter on the right to {browseButton} through existing public Organizations,\n                        or you may {createButton} your own Organization.\n                    </p> */}\n                </div>\n            )\n        } else {\n            message = (\n                <div>\n                    <p>\n                        Sorry, no Organizations found.\n                    </p>\n                </div>\n            )\n        }\n\n        return (\n            <Alert type=\"warning\"\n                style={{ maxWidth: '50em', margin: '20px auto 0 auto' }}\n                message={message} />\n        )\n    }\n\n    renderOrgs() {\n        if (this.props.organizations.length > 0) {\n            return (\n                this.props.organizations.map((organization, index) => {\n                    const status = this.props.openRequests.get(organization.id) || null\n                    return (\n                        <div key={String(index)} className=\"simpleCard\">\n                            <BriefOrganization organization={organization} openRequestsStatus={status} />\n                        </div>\n                    )\n                })\n            )\n        } else {\n            return this.renderNoOrgs()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Organizations\">\n                <div style={{ overflowY: 'auto', display: 'flex', flexDirection: 'column' }}>\n                    {this.renderOrgs()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Organizations;","import { connect } from 'react-redux'\nimport { Dispatch, Action } from 'redux'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport { Organizations } from './component'\nimport { StoreState } from '../../../../types'\n\nexport interface OwnProps {\n    myOrgsUnfiltered: boolean\n}\nexport interface StateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\nexport interface DispatchProps {\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    // TODO: wow, should not do this here\n    if (state.views.browseOrgsView.viewModel === null) {\n        throw new Error('view not ready')\n    }\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: { organizations, openRequests }\n            }\n        }\n    } = state;\n\n    return {\n        organizations, openRequests\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {}\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Organizations)","import * as React from 'react'\nimport Organizations from './organizations/container'\nimport { SortDirection, AppError } from '../../../types'\nimport { Button, Icon, Radio, Select, Modal, Alert, Checkbox } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group'\nimport { Filter } from '../../../data/models/organization/model'\nimport MainMenu from '../../menu/component'\nimport { NavLink } from 'react-router-dom'\nimport './component.css'\nimport { filter } from 'bluebird';\n\nexport interface OrganizationsBrowserProps {\n    totalCount: number;\n    filteredCount: number;\n    sortBy: string;\n    filter: Filter;\n    searching: boolean;\n    error: AppError | null;\n    onSearchOrgs: (searchTerms: Array<string>) => void;\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void;\n    onFilterOrgs: (filter: Filter) => void;\n}\n\nexport interface OrganizationsBrowserState {\n    searchInput: string\n    filterByRoleType: string\n    filterByRole: Array<CheckboxValueType>\n    filterByPrivacy: string\n    showAdvancedControls: boolean\n    // filterByPrivacyType: Array<CheckboxValueType>\n}\n\nclass OrganizationsBrowser extends React.Component<OrganizationsBrowserProps, OrganizationsBrowserState> {\n    searchInput: React.RefObject<HTMLInputElement>;\n    searchButton: React.RefObject<Button>;\n    filterByRoleValues: Array<any>\n\n    constructor(props: OrganizationsBrowserProps) {\n        super(props)\n\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.filterByRoleValues = [\n            {\n                label: 'Member',\n                value: 'member'\n            },\n            {\n                label: 'Admin',\n                value: 'admin'\n            },\n            {\n                label: 'Owner',\n                value: 'owner'\n            }\n        ]\n\n        this.state = {\n            searchInput: '',\n            filterByRoleType: 'myorgs',\n            filterByRole: [],\n            filterByPrivacy: 'any',\n            showAdvancedControls: false\n        }\n    }\n\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    componentDidMount() {\n        this.props.onSearchOrgs([])\n    }\n\n    doSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        const searchTerms = this.searchInput.current.value.split(/[\\s+]/)\n        // dispatch the search event\n        this.props.onSearchOrgs(searchTerms);\n    }\n\n    haveSearchInput() {\n        if (this.state.searchInput && this.state.searchInput.length > 0) {\n            return true\n        }\n        return false\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.setState({ searchInput: currentSearchInputValue })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.doSearch()\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'owner':\n                this.props.onSortOrgs('owner', SortDirection.ASCENDING)\n                break\n            case 'name':\n                this.props.onSortOrgs('name', SortDirection.ASCENDING)\n                break\n            case 'recentlyAdded':\n                this.props.onSortOrgs('created', SortDirection.DESCENDING)\n                break\n            case 'recentlyChanged':\n                this.props.onSortOrgs('changed', SortDirection.DESCENDING)\n                break\n            case 'memberCount':\n                this.props.onSortOrgs('memberCount', SortDirection.DESCENDING)\n                break\n            case 'narrativeCount':\n                this.props.onSortOrgs('narrativeCount', SortDirection.DESCENDING)\n                break\n        }\n    }\n\n    onSortDirectionChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(this.props.sortBy, e.target.value)\n    }\n\n    onFilterByRoleTypeChange(e: RadioChangeEvent) {\n        let newFilter: Filter\n        this.setState({ filterByRoleType: e.target.value })\n        if (e.target.value === 'select') {\n            this.setState({ filterByRole: [] })\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value\n            }\n        } else {\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value,\n                roles: []\n            }\n            this.setState({ filterByRole: [] })\n        }\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByRoleChange(checkedValues: CheckboxValueType[]) {\n        let newFilter: Filter\n        this.setState({ filterByRole: checkedValues })\n        if (checkedValues.length === 0) {\n            this.setState({ filterByRoleType: 'myorgs' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'myorgs',\n                roles: checkedValues\n            } as Filter\n        } else {\n            this.setState({ filterByRoleType: 'select' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'select',\n                roles: checkedValues\n            } as Filter\n        }\n\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByPrivacyChange(e: RadioChangeEvent) {\n        this.setState({ filterByPrivacy: e.target.value })\n        const newFilter = {\n            ...this.props.filter,\n            privacy: e.target.value\n        } as Filter\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onClearSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        this.searchInput.current.value = ''\n        this.onSearchInputChange()\n        this.doSearch()\n    }\n\n    renderSearchFeedback() {\n        if (this.props.totalCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    None available\n                </div>\n            )\n        }\n        if (this.props.filteredCount === 0) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    Ø\n                    /\n                    {this.props.totalCount}\n                    {' '}\n                    orgs\n                </div>\n            )\n\n        }\n        if (this.props.totalCount === this.props.filteredCount) {\n            return (\n                <div className=\"OrganizationsBrowser-searchFeedback\">\n                    <b>{this.props.totalCount}</b>\n                    {' '}\n                    orgs\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationsBrowser-searchFeedback\">\n                <b>{this.props.filteredCount}</b>\n                /\n                {this.props.totalCount}\n                {' '}\n                orgs\n            </div>\n        )\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchForm() {\n        return (\n            <form id=\"searchForm\" className=\"OrganizationsBrowser-searchBar\" onSubmit={this.onSubmit.bind(this)}>\n                <input\n                    className=\"OrganizationsBrowser-searchInput\"\n                    placeholder=\"Search Organizations\"\n                    onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                    ref={this.searchInput}></input>\n                <Button\n                    disabled={!this.haveSearchInput()}\n                    ref={this.searchButton}\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n                <Button\n                    onClick={this.onClearSearch.bind(this)}\n                    disabled={!this.haveSearchInput()}\n                    icon=\"close\"\n                >\n                </Button>\n                {this.renderSearchFeedback()}\n            </form>\n        )\n    }\n\n    renderSearchBar() {\n        return (\n            <div className=\"OrganizationsBrowser-searchBarRow\">\n                <div className=\"OrganizationsBrowser-searchBarCol1\">\n                    {this.renderSearchForm()}\n                </div>\n                <div className=\"OrganizationsBrowser-searchBarCol2\">\n                    <NavLink to=\"/newOrganization\"><Button type=\"primary\" icon=\"plus-circle\" style={{ marginRight: '10px' }}>Create Organization</Button></NavLink>\n\n                </div>\n                {/* <div className=\"OrganizationsBrowser-searchBarCol3\">\n                </div> */}\n            </div>\n        )\n    }\n\n    renderSortByControl() {\n        return (\n            <Select\n                onChange={this.onSortByChange.bind(this)}\n                defaultValue={this.props.sortBy}\n                dropdownMatchSelectWidth={true}\n                style={{ width: '10em' }}>\n                <Select.Option value=\"recentlyChanged\" key=\"changed\">Date Changed</Select.Option>\n                <Select.Option value=\"recentlyAdded\" key=\"recent\">Date Established</Select.Option>\n                <Select.Option value=\"name\" key=\"name\">Org Name</Select.Option>\n                <Select.Option value=\"memberCount\" key=\"memberCount\"># members</Select.Option>\n                <Select.Option value=\"narrativeCount\" key=\"narrativeCount\"># narratives</Select.Option>\n            </Select>\n        )\n    }\n\n    onToggleAdvanced() {\n        // When switching back to basic filter mode, we need to ensure that advanced \n        // filtering is removed.\n        if (this.state.showAdvancedControls) {\n            this.setState({ showAdvancedControls: false })\n            let { roleType, roles, privacy } = this.props.filter\n            if (!['myorgs', 'all'].includes(roleType)) {\n                roleType = 'myorgs'\n                this.setState({ filterByRoleType: 'myorgs' })\n            }\n            this.setState({ filterByRole: [], filterByPrivacy: 'any' })\n            roles = []\n            privacy = 'any'\n            this.props.onFilterOrgs({\n                roleType, roles, privacy\n            })\n        } else {\n            this.setState({ showAdvancedControls: true })\n        }\n    }\n\n    renderAdvancedToggle() {\n        if (this.state.showAdvancedControls) {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover-pressed\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        } else {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        }\n    }\n\n    renderFilterByRole() {\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px'\n        }\n        if (this.state.showAdvancedControls) {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                        <Radio value=\"notmyorgs\" style={radioStyle}>Not My Orgs</Radio>\n                        <Radio value=\"select\" style={radioStyle}>Specific Role</Radio>\n                    </Radio.Group>\n\n                    <Checkbox.Group\n                        options={this.filterByRoleValues}\n                        value={this.state.filterByRole}\n                        className=\"OrganizationsBrowser-checkboxGroup\"\n                        onChange={this.onFilterByRoleChange.bind(this)} />\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                    </Radio.Group>\n                </React.Fragment>\n            )\n        }\n    }\n\n    renderFilterByPrivacy() {\n        if (!this.state.showAdvancedControls) {\n            return\n        }\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n            margin: '0px'\n        }\n        return (\n            <React.Fragment>\n                <Radio.Group\n                    onChange={this.onFilterByPrivacyChange.bind(this)}\n                    value={this.state.filterByPrivacy}>\n                    <Radio value=\"any\" style={radioStyle}>Any</Radio>\n                    <Radio value=\"public\" style={radioStyle}>Visible</Radio>\n                    <Radio value=\"private\" style={radioStyle}>Hidden</Radio>\n                </Radio.Group>\n            </React.Fragment>\n        )\n    }\n\n    renderOrganizations() {\n        if (this.props.error) {\n            return (\n                <Alert\n                    type=\"error\"\n                    message={this.props.error.code}\n                    description={this.props.error.message} />\n            )\n        } else {\n            let myOrgsUnfiltered: boolean\n            // TODO: the filter values should be enums.\n            if (this.props.filter.roleType === 'myorgs' &&\n                this.props.filter.roles.length === 0 &&\n                this.props.filter.privacy === 'any' &&\n                // todo should be based on parsed search\n                (!this.searchInput.current ||\n                    this.searchInput.current.value.length === 0)) {\n                myOrgsUnfiltered = true\n            } else {\n                myOrgsUnfiltered = false\n            }\n\n            return (\n                <Organizations myOrgsUnfiltered={myOrgsUnfiltered} />\n            )\n        }\n    }\n\n    renderFilterColumn() {\n        return (\n            <React.Fragment>\n                <div className=\"field-label\">sort by</div>\n                {this.renderSortByControl()}\n\n                <div className=\"field-label\" style={{ marginTop: '10px' }}>filter</div>\n\n                {this.renderFilterByRole()}\n\n                {this.state.showAdvancedControls ? (\n                    <div className=\"field-label\" style={{ marginTop: '10px' }}>visibility</div>\n                ) : (null)}\n                {this.renderFilterByPrivacy()}\n\n                <div style={{ marginTop: '20px', textAlign: 'center' }}>\n                    <hr style={{ border: 0, borderTop: '1px solid rgba(200, 200, 200, 0.4)', width: '80%' }} />\n                    <a href=\"https://docs.google.com/document/d/1xRpFjD3pqPIrHBjNDGht3hX-3y6A0eQRr_v51A5j2hk\" target=\"_blank\">FAQ</a>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationsBrowser scrollable-flex-column\">\n                {this.renderSearchBar()}\n                <div className=\"OrganizationsBrowser-bodyRow\">\n                    <div className=\"OrganizationsBrowser-bodyCol scrollable-flex-column\">\n                        {this.renderOrganizations()}\n                    </div>\n                    <div className=\"OrganizationsBrowser-filterCol\">\n                        {this.renderFilterColumn()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationsBrowser","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, SortDirection, BrowseOrgsViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\n\nexport interface Load extends Action<ActionFlag.BROWSE_ORGS_LOAD> {\n    type: ActionFlag.BROWSE_ORGS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.BROWSE_ORGS_LOAD_START> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.BROWSE_ORGS_LOAD_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS\n    defaultViewModel: BrowseOrgsViewModel\n}\n\nexport interface LoadError extends Action<ActionFlag.BROWSE_ORGS_LOAD_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.BROWSE_ORGS_UNLOAD> {\n    type: ActionFlag.BROWSE_ORGS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_START\n    }\n}\n\nfunction loadSuccess(defaultViewModel: BrowseOrgsViewModel): LoadSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS,\n        defaultViewModel: defaultViewModel\n    }\n}\n\nfunction loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.BROWSE_ORGS_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface SortOrgs extends Action<ActionFlag.BROWSE_ORGS_SORT> {\n    type: ActionFlag.BROWSE_ORGS_SORT,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SORT_START> {\n    type: ActionFlag.BROWSE_ORGS_SORT_START,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SORT_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SORT_SUCCESS\n}\n\nexport interface SortOrgsError extends Action<ActionFlag.BROWSE_ORGS_SORT_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SORT_ERROR,\n    error: AppError\n}\n\n\nexport function sortOrgsStart(sortField: string, sortDirection: SortDirection): SortOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SORT_START,\n        sortField: sortField,\n        sortDirection: sortDirection\n    }\n}\n\n// SEARCHING\n\n// Called upon the start of a search call\n// Sets the ui state to enable a spinner\n// and also search query data to be reflected in the ui\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\nexport interface SearchOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SEARCH_START> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_START,\n    searchTerms: Array<string>\n}\n\n// Called upon successful completion of a search\n// Sets the organizations found\nexport interface SearchOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS\n    organizations: Array<orgModel.BriefOrganization>\n    totalCount: number\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\n// Called upon a search error\n// Sets error state\nexport interface SearchOrgsError extends Action<ActionFlag.BROWSE_ORGS_SEARCH_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR\n    error: AppError\n}\n\n\n// searchTerms: Array<string>\nfunction searchOrgsStart(searchTerms: Array<string>): SearchOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_START,\n        searchTerms\n    }\n}\n\nfunction searchOrgsSuccess(organizations: Array<orgModel.BriefOrganization>, totalCount: number, openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>): SearchOrgsSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n        organizations: organizations,\n        totalCount: totalCount,\n        openRequests: openRequests\n    }\n}\n\nfunction searchOrgsError(error: AppError): SearchOrgsError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n        error: error\n    }\n}\n\n// FILTER \n\n// Filter orgs\nexport interface FilterOrgs extends Action<ActionFlag.BROWSE_ORGS_FILTER> {\n    type: ActionFlag.BROWSE_ORGS_FILTER,\n    filter: string\n}\n\nexport interface FilterOrgsStart extends Action<ActionFlag.BROWSE_ORGS_FILTER_START> {\n    type: ActionFlag.BROWSE_ORGS_FILTER_START,\n    filter: orgModel.Filter\n}\n\n\nexport function filterOrgsStart(filter: orgModel.Filter): FilterOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_FILTER_START,\n        filter: filter\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        const defaultSearchTerms: Array<string> = []\n        // TODO: the sort field and direction are still set directly at this level;\n        // in the ui narrativeCount is a single sortBy field, with the direction\n        // fixed in the model's applySortComparison\n        const defaultSortField = 'narrativeCount'\n        const defaultSortDirection = SortDirection.DESCENDING\n        const defaultFilter = { roleType: 'myorgs', roles: [], privacy: 'any' }\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: defaultSearchTerms,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                username\n            })\n\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            // dispatch(searchOrgsSuccess(organizations, total, openRequests))\n            // populate default browse orgs props\n            const defaultViewModel: BrowseOrgsViewModel = {\n                rawOrganizations: organizations,\n                organizations: organizations,\n                openRequests: openRequests,\n                totalCount: total,\n                filteredCount: organizations.length,\n                sortField: defaultSortField,\n                sortDirection: defaultSortDirection,\n                filter: defaultFilter,\n                searchTerms: defaultSearchTerms,\n                selectedOrganizationId: null,\n                searching: false,\n                error: null\n            }\n            // done!\n            dispatch(loadSuccess(defaultViewModel))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// TODO: proper typing here \nexport function searchOrgs(searchTerms: Array<string>) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchOrgsStart(searchTerms))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { sortField, sortDirection, filter } } = browseOrgsView\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: searchTerms,\n                sortField, sortDirection, filter, username\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function sortOrgs(sortField: string, sortDirection: SortDirection) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sortOrgsStart(sortField, sortDirection))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, filter } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function filterOrgs(filter: orgModel.Filter) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(filterOrgsStart(filter))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, sortField, sortDirection } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n","import OrganizationsBrowser from './component'\nimport { StoreState, SortDirection, AppError } from '../../../types'\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as orgModel from '../../../data/models/organization/model'\n//\n// Typing for the mapState and mapDispatch\n//\n\nexport interface OwnProps {\n    sortBy: string\n}\nexport interface LinkStateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    filter: orgModel.Filter\n    searching: boolean,\n    error: AppError | null\n}\n\nexport interface LinkDispatchProps {\n    onSearchOrgs: (searchTerms: Array<string>) => void,\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void,\n    onFilterOrgs: (filter: orgModel.Filter) => void\n}\n\n// note second arg is the component props, but we don't have any component props to merge in.\nexport function mapStateToProps(storeState: StoreState): LinkStateProps {\n    if (!storeState.views.browseOrgsView.viewModel) {\n        throw new Error('No view model!')\n    }\n\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: {\n                    organizations, openRequests, error,\n                    totalCount, filteredCount, filter, searching }\n            }\n        }\n    } = storeState\n\n    return {\n        organizations,\n        openRequests,\n        totalCount,\n        filteredCount,\n        filter,\n        error,\n        searching: searching\n    }\n\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.SearchOrgs | actions.SortOrgs | actions.FilterOrgs>): LinkDispatchProps {\n    return {\n        onSearchOrgs: (searchTerms: Array<string>) => {\n            // TODO proper typing here\n            dispatch(actions.searchOrgs(searchTerms) as any)\n        },\n        onSortOrgs: (sortBy: string, sortDirection: SortDirection) => {\n            // TODO proper typing here\n            dispatch(actions.sortOrgs(sortBy, sortDirection) as any)\n        },\n        onFilterOrgs: (filter: orgModel.Filter) => {\n            dispatch(actions.filterOrgs(filter) as any)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationsBrowser)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, BrowseOrgsView } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: BrowseOrgsView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organizations...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container sortBy=\"narrativeCount\" />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Spin, Alert } from 'antd';\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: BrowseOrgsView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.browseOrgsView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, EditState, ValidationState, SyncState, ValidationErrorType } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport Validation from '../../data/models/organization/validation'\nimport DebouncingProcess from '../../lib/DebouncingProcess'\nimport { UIServiceClient } from '../../data/apis/uiService'\n\n// ACTIONS\n\nexport interface Save extends Action<ActionFlag.ADD_ORG_SAVE> {\n    type: ActionFlag.ADD_ORG_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.ADD_ORG_SAVE_START> {\n    type: ActionFlag.ADD_ORG_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.ADD_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface SaveError extends Action<ActionFlag.ADD_ORG_SAVE_ERROR> {\n    type: ActionFlag.ADD_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Editing\n\nexport interface Load extends Action<ActionFlag.ADD_ORG_LOAD> {\n    type: ActionFlag.ADD_ORG_LOAD;\n}\n\nexport interface LoadStart {\n    type: ActionFlag.ADD_ORG_LOAD_START\n}\n\nexport interface LoadSuccess {\n    type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n    newOrganization: EditableOrganization\n}\n\nexport interface LoadError {\n    type: ActionFlag.ADD_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload {\n    type: ActionFlag.ADD_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface AddOrgEvaluate extends Action<ActionFlag.ADD_ORG_EVALUATE> {\n    type: ActionFlag.ADD_ORG_EVALUATE\n}\n\nexport interface AddOrgEvaluateOK extends Action<ActionFlag.ADD_ORG_EVALUATE_OK> {\n    type: ActionFlag.ADD_ORG_EVALUATE_OK\n}\n\nexport interface AddOrgEvaluateErrors extends Action<ActionFlag.ADD_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n}\n\n// Updating name field\n\nexport interface UpdateName extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME\n    name: string\n}\n\nexport interface UpdateNameSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS\n    name: string\n}\n\nexport interface UpdateNameError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL\n    name: string\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating id Field\n\nexport interface UpdateId extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID,\n    id: string\n}\n\nexport interface UpdateIdSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n    id: string\n}\n\nexport interface UpdateIdError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n    id: string,\n    error: ValidationState\n}\n\nexport interface UpdateIdPass extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n    id: string\n}\n\n// Updating description field\n\nexport interface UpdateDescription extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface UpdateDescriptionSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface UpdateDescriptionError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\n// Update is private field\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\nexport function saveStart(): SaveStart {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_START\n    }\n}\n\nexport function saveSuccess(org: orgModel.Organization): SaveSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n        organization: org\n    }\n}\n\nexport function saveError(error: AppError): SaveError {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Editing\n\nfunction loadStart() {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_START\n    }\n}\n\nfunction loadSuccess(newOrganization: EditableOrganization) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n        newOrganization: newOrganization\n    }\n}\n\nfunction loadError(error: AppError) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.ADD_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function addOrgEvaluateOk(): AddOrgEvaluateOK {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_OK\n    }\n}\n\nexport function AddOrgEvaluateErrors(): AddOrgEvaluateErrors {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Update Name\n\nexport function updateNameSuccess(name: string): UpdateNameSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function updateNameError(name: string, error: ValidationState): UpdateNameError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\nexport function updateIdSuccess(id: string): UpdateIdSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n        id: id\n    }\n}\n\nexport function updateIdPass(id: string): UpdateIdPass {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n        id: id\n    }\n}\n\n// Update Logo URL Hash\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Home URL Hash\n\nexport function updateHomeUrlSuccess(logoUrl: string | null): UpdateHomeUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n        homeUrl: logoUrl\n    }\n}\n\nexport function updateHomeUrlError(logoUrl: string | null, error: ValidationState): UpdateHomeUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n        homeUrl: logoUrl,\n        error: error\n    }\n}\n\n// Update Id\n\nexport function updateIdError(id: string, error: ValidationState): UpdateIdError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n        id: id,\n        error: error\n    }\n}\n\nexport function updateDescriptionSuccess(description: string): UpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function updateDescriptionError(description: string, error: ValidationState): UpdateDescriptionError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const newOrg: EditableOrganization = {\n            id: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgId('')[1]\n            },\n            name: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgName('')[1]\n            },\n            logoUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgLogoUrl('')[1]\n            },\n            homeUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgHomeUrl('')[1]\n            },\n            researchInterests: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgResearchInterests('')[1]\n            },\n            description: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgDescription('')[1]\n            },\n            isPrivate: {\n                value: false,\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            }\n        }\n        dispatch(loadSuccess(newOrg))\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function addOrg() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n\n        // This check is to satisfy TS. Since viewModel is nullable, it has no way \n        // of knowing that our app flow ensures that it is populated.\n        // In terms of generalized usage of the redux store, though, there is no\n        // way to ensure this! So we really should perform our state checks before \n        // handling any event\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        // TODO: other validations!!!\n\n        dispatch(saveStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                addOrgView: { viewModel: { newOrganization } },\n            },\n            app: { config }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (!newOrganization) {\n            dispatch(saveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        orgClient.addOrg(newOrganization, username)\n            .then((org: orgModel.Organization) => {\n                dispatch(saveSuccess(org))\n            })\n            .catch((error) => {\n                console.error('error adding', newOrganization, error)\n\n                // note that we dispatch an AppError compliant object,\n                // which wraps the original exception object.\n                dispatch(saveError({\n                    code: error.code || error.name,\n                    message: error.message,\n                    exception: error\n                }))\n            })\n    }\n}\n\nexport function addOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: {\n                    viewModel: { editState, newOrganization } }\n            }\n        } = state\n\n        if (!newOrganization) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.id.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: quick hack to allow unmodified fields to evaluate to true.\n\n        if (newOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(addOrgEvaluateOk())\n    }\n}\n\nfunction orgModelFromState(state: StoreState) {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config } } = state\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url,\n        userProfileServiceURL: config.services.UserProfile.url\n    })\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateNameError(validatedName, error))\n        } else {\n            dispatch(updateNameSuccess(validatedName))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkLogoUrlProcess: DebouncingProcess\n\nclass CheckIfLogoUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkImageURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateLogoUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This logo url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateLogoUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking logo url: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkLogoUrlProcess) {\n            checkLogoUrlProcess.cancel()\n        }\n\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n                logoUrl: logoUrl,\n                error: error\n            } as UpdateLogoUrlError)\n            return\n        }\n\n        // initial success, but the check may invalidate it.\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n            logoUrl: validatedLogoUrl\n        })\n\n        dispatch(addOrgEvaluate())\n\n        if (validatedLogoUrl !== null && validatedLogoUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkLogoUrlProcess = new CheckIfLogoUrlExistsProcess({\n                delay: 100,\n                url: validatedLogoUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkLogoUrlProcess.start()\n        }\n    }\n}\n\n// export function updateLogoUrl(name: string | null) {\n//     return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n//         const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(name)\n\n//         if (error.type !== ValidationErrorType.OK) {\n//             dispatch(updateLogoUrlError(validatedLogoUrl, error))\n//         } else {\n//             dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n//         }\n//         dispatch(addOrgEvaluate())\n//     }\n// }\n\nlet checkHomeUrlProcess: DebouncingProcess\n\nclass CheckIfHomeUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkHTMLURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateHomeUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This home url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateHomeUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking home url: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkHomeUrlProcess) {\n            checkHomeUrlProcess.cancel()\n        }\n\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: homeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n            return\n        }\n\n        // initial success, but the check may invalidate it.\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n            homeUrl: validatedHomeUrl\n        })\n\n        dispatch(addOrgEvaluate())\n\n        if (validatedHomeUrl !== null && validatedHomeUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkHomeUrlProcess = new CheckIfHomeUrlExistsProcess({\n                delay: 100,\n                url: validatedHomeUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkHomeUrlProcess.start()\n        }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            }) as UpdateResearchInterestsSuccess\n        }\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // no validation for now ... what is there to validate?\n\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate\n        })\n        dispatch(addOrgEvaluate())\n    }\n}\n\nclass CheckIfExistsProcess extends DebouncingProcess {\n    model: orgModel.OrganizationModel\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    id: string\n    constructor({ delay, model, dispatch, id }: { delay: number, model: orgModel.OrganizationModel, dispatch: ThunkDispatch<StoreState, void, Action>, id: string }) {\n        super({ delay })\n\n        this.model = model\n        this.dispatch = dispatch\n        this.id = id\n    }\n\n    async task(): Promise<void> {\n        try {\n            const exists = await this.model.orgExists(this.id)\n            if (this.canceled) {\n                return\n            }\n            if (exists) {\n                this.dispatch(updateIdError(this.id, {\n                    type: ValidationErrorType.ERROR,\n                    validatedAt: new Date(),\n                    message: 'This org id is already in use'\n                }))\n            } else {\n                this.dispatch(updateIdSuccess(this.id))\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateIdError(this.id, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking for org id existence: ' + ex.message\n            }))\n        }\n        this.dispatch(addOrgEvaluate())\n    }\n}\n\nlet checkIDProcess: DebouncingProcess\n\n/*\nupdateId\n\nHandles updating an org id update from the new organization form.\n\nThis action handles the normal field validation, but also requires a check\nthat the org id is not in use. This requires an api call to the groups \nservice, which introduces an indeterminate latency, and thus special handling.\n*/\n\nexport function updateId(id: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkIDProcess) {\n            checkIDProcess.cancel()\n        }\n\n        const [validatedId, error] = Validation.validateOrgId(id)\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        // this is an unusual action -- it is in intermediate \"success\" -- the field\n        // has passed the synchronous syntax validation, so we need to feed the value \n        // back to the form, but the eventual success occurs later.\n        dispatch(updateIdPass(id))\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        // For the id existence check, we want to ensure that we don't trip up the\n        // user experience. \n        // Think of the org id check as an async process.\n        // If that process is active when an update appears here, cancel it and proceed.\n        // Launch an existence check process which will initiate the check after some\n        // period of time (e.g. 100ms). This ensures that a fast typist will not trigger\n        // a sequence of existence checks. \n        // In that process, after the existence check, look to see if the process has\n        // been canceled (see step 1 above). If so, do not issue any redux events.\n        // Otherwise, issue the success or error events as appropriate.\n\n        const model = orgModelFromState(getState())\n\n        checkIDProcess = new CheckIfExistsProcess({\n            delay: 100,\n            id: validatedId,\n            dispatch: dispatch,\n            model: model\n        })\n\n        checkIDProcess.start()\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const model = orgModelFromState(getState())\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(updateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}","export default abstract class DebouncingProcess {\n\n    delay: number\n    canceled: boolean\n    timer: number | null\n\n    constructor({ delay }: { delay: number }) {\n        this.delay = delay\n        this.canceled = false\n        this.timer = null\n    }\n\n    abstract async task(): Promise<void>\n\n    start() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(async () => {\n            if (!this.canceled) {\n                try {\n                    // TODO: left off here. we need to be able to deny\n                    // the consequence of the check if we have canceled...\n                    // so inside the fun\n                    await this.task()\n                } catch (ex) {\n                    console.warn('debouncing process exception: ' + ex.message)\n                }\n            } else {\n                this.canceled = false;\n            }\n            this.timer = null;\n        }, this.delay)\n    }\n\n    cancel() {\n        if (this.timer) {\n            this.canceled = true;\n        }\n    }\n}","import { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nexport interface UIServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface CheckImageURLParam {\n    url: string,\n    timeout: number\n}\n\nexport interface CheckImageURLResult {\n    is_valid: boolean\n    error: {\n        code: string\n        info: any\n    }\n}\n\nexport class UIServiceClient extends DynamicServiceClient {\n\n    static module: string = 'UIService'\n\n    constructor(params: UIServiceClientParams) {\n        super(params)\n    }\n\n    async checkImageURL({ url, timeout }: CheckImageURLParam): Promise<CheckImageURLResult> {\n        const [[result, err], serverError] = await this.callFunc('check_image_url', [\n            { url, timeout }\n        ])\n\n        if (serverError) {\n            throw new Error(serverError.message)\n        }\n\n        if (err) {\n            throw new Error(err['message'])\n        }\n\n        return result as CheckImageURLResult\n    }\n\n    async checkHTMLURL({ url, timeout }: CheckImageURLParam): Promise<CheckImageURLResult> {\n        const [[result, err], serverError] = await this.callFunc('check_html_url', [\n            { url, timeout }\n        ])\n\n        if (serverError) {\n            throw new Error(serverError.message)\n        }\n\n        if (err) {\n            throw new Error(err['message'])\n        }\n\n        return result as CheckImageURLResult\n    }\n\n}","import * as React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Marked } from 'marked-ts'\nimport { Button, Icon, Modal, Input, Checkbox, Tooltip, Collapse, Tabs } from 'antd'\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState, EditState,\n    AppError, Editable, ValidationErrorType, SyncState, EditableString,\n    EditableNullableString, EditableBoolean\n} from '../../../types';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\nimport OrgLogo from '../../OrgLogo'\nimport TextArea from 'antd/lib/input/TextArea'\nimport './component.css'\n\nexport interface NewOrganizationProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    error: AppError | null,\n    newOrganization: EditableOrganization,\n    onSave: () => void,\n    onUpdateName: (name: string) => void,\n    onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport interface NewOrganizationState {\n    cancelToBrowser: boolean\n    showError: boolean\n}\n\nclass NewOrganization extends React.Component<NewOrganizationProps, NewOrganizationState> {\n    origin: string;\n\n    constructor(props: NewOrganizationProps) {\n        super(props)\n        this.state = {\n            cancelToBrowser: false,\n            showError: true\n        }\n        this.origin = document.location!.origin\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have entered information for this new organization.</p>\n\n                    <p>If you leave the editor without first saving, the new organization <i>will not be created</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateId(e.target.value)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.saveState === SaveState.NEW\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderBrokenHomeURL() {\n        const tooltipTitle = 'The Home URL is broken; either correct it or leave it empty'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value === null || homeUrlField.value.length === 0) {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n\n        if (homeUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenHomeURL()}\n                </div>\n            )\n        }\n\n        const tooltipTitle = 'Try out your url by clicking this link'\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <Tooltip title={tooltipTitle} >\n                    <a href={homeUrlField.value} target=\"_blank\">\n                        <Icon type=\"link\" />\n                    </a>\n                </Tooltip>\n            </div>\n        )\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Create Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"newOrganizationForm\" className=\"NewOrganization-editor  scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {this.renderEditorHeader()}\n                <div className=\"NewOrganization-body\">\n                    {this.renderNameRow(this.props.newOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.newOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.newOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.newOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.newOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.newOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.newOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"NewOrganization-row\">\n                        <div className=\"NewOrganization-col1\">\n                        </div>\n                        <div className=\"NewOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderLogo(org: EditableOrganization) {\n        return (\n            <OrgLogo logoUrl={null} size={64} organizationName={org.name.value} organizationId={org.id.value} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.newOrganization.name.value && this.props.newOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.newOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.newOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderBrokenLogo() {\n        const tooltipTitle = 'The Logo URL is broken; either correct it or empty the field for the default logo'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (logoUrlField.value === null || logoUrlField.value.length === 0) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n\n        if (logoUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenLogo()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    toggleError() {\n        this.setState({ showError: !this.state.showError })\n    }\n\n    renderError() {\n        if (this.props.error && this.state.showError) {\n            const onOk = () => {\n                this.setState({ showError: false })\n            }\n            const onCancel = () => {\n                this.setState({ showError: false })\n            }\n            let trace\n            if (this.props.error.trace) {\n                trace = this.props.error.trace.map((line, index) => {\n                    return (\n                        <div key={\"line_\" + index}>{line}</div>\n                    )\n                })\n            }\n            if (trace) {\n                trace = (\n                    <div>\n                        <div>trace</div>\n                        {trace}\n                    </div>\n                )\n            }\n            return (\n                <Modal visible={true}\n                    title=\"Error\"\n                    okType=\"danger\"\n                    okText=\"Close\"\n                    cancelText=\"Clear Error\"\n                    onCancel={onCancel}\n                    onOk={onOk}>\n                    <div style={{ fontWeight: 'bold' }}>\n                        {this.props.error.code}\n                    </div>\n                    <div>\n                        {this.props.error.message}\n                    </div>\n                    {trace}\n                </Modal>\n            )\n        }\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"newOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button type=\"danger\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                <Icon type=\"close\" />{' '}Close\n            </Button>\n        )\n    }\n\n    renderMenuButtons() {\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <span className=\"ButtonSet-button\">\n                    <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n                </span>\n            )\n        }\n        return (\n            <div className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button type=\"default\" onClick={this.onClickCancelToBrowser.bind(this)} >\n                        <Icon type=\"rollback\" />{' '}Back\n                    </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    {this.renderSaveButton()}\n                </span>\n                {errorButton}\n            </div>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        // TODO: this is just a prop for today.\n        if (this.props.saveState === SaveState.SAVED) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.newOrganization.id.value} />\n        }\n\n        return (\n            <div className=\"NewOrganization scrollable-flex-column\">\n                <div className=\"NewOrganization-main scrollable-flex-column\">\n                    {this.renderEditor()}\n                </div>\n                {/* TODO: improve error display*/}\n                {this.renderError()}\n            </div>\n        )\n    }\n}\n\nexport default NewOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditState, SaveState, ValidationState, EditableOrganization, AppError } from '../../../types';\nimport {\n    addOrg, updateName, updateLogoUrl, updateId, updateDescription, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../redux/actions/addOrg';\n\nimport Component from './component';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n    error: AppError | null\n}\n\nexport interface DispatchProps {\n    onSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    onUpdateId: (id: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.addOrgView.viewModel) {\n        throw new Error('View model missing in state')\n    }\n    const {\n        views: {\n            addOrgView: {\n                viewModel: { editState, saveState, validationState, newOrganization, error }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        newOrganization,\n        error\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSave: () => {\n            dispatch(addOrg() as any)\n        },\n        onUpdateName: (name) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        onUpdateId: (id) => {\n            dispatch(updateId(id) as any)\n        },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { AppError, AddOrgView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\n\ninterface LoaderProps {\n    view: AddOrgView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading \"Add New Organization\" form...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case ComponentLoadingState.SUCCESS:\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// redux interface\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/addOrg'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.addOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.Load | actions.Unload>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as requestModel from './requests'\nimport * as orgModel from './organization/model'\nimport { RequestType } from '../../types';\n\nexport interface UberOrganization {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n    request: requestModel.UserRequest | null\n    invitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null\n}\n\ninterface UberModelParams {\n    token: string\n    username: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    workspaceServiceURL: string\n    serviceWizardURL: string\n}\n\nexport class UberModel {\n\n    params: UberModelParams\n\n    constructor(params: UberModelParams) {\n        this.params = params\n    }\n\n    async getOrganizationForUser(organizationId: string): Promise<UberOrganization> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL,\n            userProfileServiceURL: this.params.userProfileServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        // get org\n        const organization = await orgClient.getOrg(organizationId)\n\n        // get pending requests\n        const request = await requestClient.getUserRequestForOrg(organizationId) as requestModel.UserRequest | null\n\n        const invitation = await requestClient.getUserInvitationForOrg(organizationId) as requestModel.UserInvitation | null\n\n        // we should probably just keep the request ids rather than try to keep the whole request\n        // and refactor the calls for the request events, which I just refactored (not much work) to use the \n        // whole request structure rather than just the id, to use the request id + the org id...\n        const relation = orgModel.determineRelation(organization, this.params.username, request, invitation)\n\n        let groupRequests\n        if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n        } else {\n            groupRequests = null\n        }\n\n        return {\n            organization, request, invitation, relation, groupRequests\n        }\n    }\n\n    // async getOrganizationsForUser(): Promise<Array<UberOrganization>> {\n    //     // const {\n    //     //     auth: { authorization: { token, username } },\n    //     //     app: { config }\n    //     // } = getState()\n\n    //     const orgClient = new orgModel.OrganizationModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const requestClient = new requestModel.RequestsModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const orgs = await orgClient.getOwnOrgs()\n\n    //     const requestOutbox = await requestClient.getOutboundRequests()\n    //     const requestInbox = await requestClient.getInboundRequests()\n\n    //     return await Promise.all(orgs.map(async (organization) => {\n    //         const request = requestOutbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.REQUEST &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserRequest\n\n    //         const invitation = requestInbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.INVITATION &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserInvitation\n\n    //         const relation = orgModel.determineRelation(organization, this.params.username, request || null, invitation)\n\n    //         let groupRequests\n    //         if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n    //             relation.type === orgModel.UserRelationToOrganization.OWNER) {\n    //             groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organization.id)\n    //         } else {\n    //             groupRequests = null\n    //         }\n\n    //         return {\n    //             organization, request, invitation, relation, groupRequests\n    //         }\n    //     }))\n    // }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AnError, makeError } from '../../lib/error';\nimport { StoreState } from '../../types';\n\nexport interface Load extends Action<ActionFlag.DATA_SERVICE_LOAD> {\n    type: ActionFlag.DATA_SERVICE_LOAD\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.DATA_SERVICE_LOAD_SUCCESS> {\n    type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n}\n\nexport interface LoadError extends Action<ActionFlag.DATA_SERVICE_LOAD_ERROR> {\n    type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n    error: AnError\n}\n\nfunction loadError(error: AnError) {\n    return {\n        type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_START\n        })\n\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n        } as LoadSuccess)\n\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // const userProfileClient = new userProfileModel.UserProfile({\n        //     token, username,\n        //     userProfileServiceURL: config.services.UserProfile.url\n        // })\n\n        // try {\n        //     const userProfile = await userProfileClient.getProfile(username)\n\n        //     dispatch({\n        //         type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS,\n        //         profile: userProfile\n        //     })\n        // } catch (ex) {\n        //     console.error('error', ex)\n        //     dispatch(loadError(makeError({\n        //         code: ex.name,\n        //         message: ex.name\n        //     })))\n        // }\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.DATA_SERVICE_UNLOAD\n    }\n}\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, UIError, UIErrorType, ViewOrgViewModelKind\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\nimport { loadNarrative } from './entities'\nimport * as dataServices from './dataServices'\nimport { AnError } from '../../lib/error';\nimport * as narrativeModel from '../../data/models/narrative'\n\n// Action Types\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD\n    organizationId: string\n}\n\nexport interface ReLoad extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_START\n}\n\nexport interface LoadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface ReloadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface LoadInaccessiblePrivateSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_UNLOAD\n}\n\n// Join Requests\n\nexport interface ViewOrgJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST\n    requestId: string\n}\n\nexport interface ViewOrgJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR\n    error: UIError\n}\n\n// Join Request cancellation\n\nexport interface ViewOrgCancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface ViewOrgCancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgCancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgCancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: UIError\n}\n\n// Join Invitation Acceptance\n\nexport interface AcceptJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION\n}\n\nexport interface AcceptJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n}\n\nexport interface AcceptJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface AcceptJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Join Invitation Denial\n\nexport interface RejectJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION\n}\n\nexport interface RejectJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n}\n\nexport interface RejectJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface RejectJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n\n// Delete Narrative\n\nexport interface RemoveNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE\n}\n\nexport interface RemoveNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n}\n\nexport interface RemoveNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    narrativeId: narrativeModel.NarrativeID\n}\n\nexport interface RemoveNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\n\nexport function removeNarrativeStart(): RemoveNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n    }\n}\n\nexport function removeNarrativeSuccess(narrativeId: narrativeModel.NarrativeID): RemoveNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n        narrativeId\n    }\n}\n\nexport function removeNarrativeError(error: AppError): RemoveNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function removeNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeNarrativeStart())\n\n        // TODO: need to restructure this view -- this is crazy\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel\n                }\n            }\n        }: StoreState = state\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const { organization } = viewModel\n\n        if (!organization) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const groupId = organization.id\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n\n        try {\n            await orgClient.removeNarrativeFromOrg(groupId, narrative.workspaceId)\n            dispatch(removeNarrativeSuccess(narrative.workspaceId))\n        } catch (ex) {\n            dispatch(removeNarrativeError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization, narratives: Array<orgModel.NarrativeResource>): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization,\n        narratives\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const viewModel = state.views.viewOrgView.viewModel\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'Not NORMAL org'\n            }))\n            return\n        }\n\n        const { organization, sortNarrativesBy, searchNarrativesBy } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n        } = state\n\n        const organizationId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(organizationId, resourceId)\n            // Getting a fresh copy of the org will trigger the view org component and\n            // all subcomponents with changed data to refresh. All we are intending here is that\n            // the narrative in the list of narratives provided by the groups api is updated, but\n            // there may be other elements of the group/org which have changed as well. So be it.\n\n            // TODO: just update the narrative, don't reprocess everything.\n\n\n            const org = await orgClient.getOrg(organizationId)\n\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'error',\n                    message: 'Not a NORMAL org'\n                }))\n                return\n            }\n\n            const narratives = org.narratives\n\n            const filteredNarratives = orgModel.queryNarratives(narratives, {\n                sortBy: sortNarrativesBy,\n                searchBy: searchNarrativesBy\n            })\n\n            dispatch(loadNarrative(narrative.workspaceId))\n            dispatch(accessNarrativeSuccess(org, filteredNarratives))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_START\n    }\n}\n\nexport function loadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): LoadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members\n    }\n}\n\nexport function reloadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): ReloadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_RELOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox,\n        narrativesSortBy,\n        narratives, sortMembersBy, members\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(\n    organization: orgModel.InaccessiblePrivateOrganization,\n    relation: orgModel.Relation,\n    requestOutbox: Array<requestModel.Request>): LoadInaccessiblePrivateSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n        organization, relation,\n        requestOutbox\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\n// Join requests\n\nexport function viewOrgJoinRequestStart(): ViewOrgJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgJoinRequestSuccess(): ViewOrgJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgJoinRequestError(error: UIError): ViewOrgJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Join Request Cancellation\n\nexport function viewOrgCancelJoinRequestStart(): ViewOrgCancelJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgCancelJoinRequestSuccess(): ViewOrgCancelJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgCancelJoinRequestError(error: UIError): ViewOrgCancelJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Invitation Acceptance\n\nexport function acceptJoinInvitationStart(): AcceptJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n    }\n}\n\nexport function acceptJoinInvitationSuccess(): AcceptJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function acceptJoinInvitationError(error: AppError): AcceptJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Invitation Rejection \n\nexport function rejectJoinInvitationStart(): RejectJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n    }\n}\n\nexport function rejectJoinInvitationSuccess(): RejectJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function rejectJoinInvitationError(error: AppError): RejectJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Join invitation acceptance\n\n// TODO\n\n// Thunks\n\nexport function unload() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: { viewOrgView: { viewModel } }\n        } = getState()\n\n        if (!viewModel) {\n            throw new Error('view model not defined!?!')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (viewModel.organization.relation === orgModel.UserRelationToOrganization.MEMBER ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.OWNER) {\n            await orgClient.visitOrg({ organizationId: viewModel.organization.id })\n        }\n\n        dispatch(dataServices.load())\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_UNLOAD\n        })\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            let requestInbox: Array<requestModel.Request>\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n                requestInbox = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n                requestInbox = []\n            }\n\n\n            // const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: narrativesSortBy,\n                searchBy: ''\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: sortMembersBy,\n                searchBy: ''\n            })\n\n            dispatch(loadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function reload(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            // existing org view.\n            const state = getState()\n            const viewModel = state.views.viewOrgView.viewModel\n\n            if (!viewModel) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'No view model'\n                }))\n                return\n            }\n\n            if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                }))\n                return\n            }\n\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n            }\n\n            const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: viewModel.sortNarrativesBy,\n                searchBy: viewModel.searchNarrativesBy\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: viewModel.sortMembersBy,\n                searchBy: viewModel.searchMembersBy\n            })\n\n            dispatch(reloadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgJoinRequest() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        //TODO: could do a start here...\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel: { organization } }\n            }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.requestMembership(organization.id)\n            dispatch(viewOrgJoinRequestSuccess())\n            dispatch(load((organization.id)))\n        } catch (ex) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgCancelJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(viewOrgJoinRequestStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.cancelRequest(requestId)\n            dispatch(viewOrgCancelJoinRequestSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(viewOrgCancelJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.acceptJoinInvitation(requestId)\n            dispatch(acceptJoinInvitationSuccess())\n            // quick 'n easy\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(acceptJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport function rejectJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.rejectJoinInvitation(requestId)\n            dispatch(rejectJoinInvitationSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(rejectJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// SORT NARRATIVES\nexport interface SortNarratives {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES,\n    sortBy: string\n}\n\nexport interface SortNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n}\n\nexport interface SortNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    sortBy: string\n}\n\nexport interface SortNarrativesError {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function sortNarratives(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        // const sorted = orgModel.sortNarratives(narratives.slice(), sortBy)\n        // const sorted = narratives.slice().sort(sortByToComparator(sortBy))\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n            narratives: sorted,\n            sortBy\n        })\n\n    }\n}\n\n\n// SEARCH NARRATIVES\n\nexport interface SearchNarratives {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES,\n    searchBy: string\n}\n\nexport interface SearchtNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_START\n}\n\nexport interface SearchNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    searchBy: string\n}\n\nexport interface SearchNarrativesError {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function searchNarratives(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n            searchBy: searchBy,\n            narratives: sorted\n        })\n\n    }\n}\n\n\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as viewOrgActions from '../viewOrg'\n\n\nexport interface AcceptRequestAction<T> extends Action<T> {\n}\n\nexport interface AcceptRequest extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface AcceptRequestStart extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n}\n\nexport interface AcceptRequestSuccess extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n}\n\ninterface AcceptRequestError extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AcceptRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancellation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.acceptRequest(requestId)\n\n            // refetch the inbox\n            const inbox = await requestClient.getCombinedRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            })\n            dispatch(viewOrgActions.reload(request.organizationId))\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n        // or error\n    }\n}\n\n","import * as React from 'react'\nimport { NavLink, withRouter, Route } from 'react-router-dom'\nimport './Header.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\nexport interface HeaderProps {\n    breadcrumbs: JSX.Element\n    buttons?: JSX.Element\n    test?: string\n    // history: History.History\n}\n\ninterface HeaderState {\n    currentMenuItem: string\n}\n\ninterface MenuProps {\n    currentItem: string\n}\n// const TopMenu = withRouter<MenuProps>(({ history }) => {\n//         function doNavigate(key: string) {\n//             switch (key) {\n//                 case 'myorgs':\n//                     history.push('/dashboard')\n//                 case 'allorgs':\n//                     history.push('/organizations')\n//             }\n//         }\n//         return (\n//             <Menu\n//                 onClick={(e: ClickParam) => { doNavigate(e.key) }}\n//                 selectedKeys={[this.state.currentMenuItem]}\n//                 mode=\"horizontal\"\n//             >\n//                 <Menu.Item key=\"myorgs\">\n//                     My Organizations\n//                 </Menu.Item>\n//                 <Menu.Item key=\"allorgs\">\n//                     All Organizations\n//                 </Menu.Item>\n//             </Menu>\n//         )\n//     })\n// }\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n\n    constructor(props: HeaderProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n    // <FaChevronRight style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n    buildSeparator() {\n        if (this.props.breadcrumbs) {\n            return (\n                <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n            )\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"Header-contextual\">\n                    <div className=\"Header-userColumn\">\n                        <div className=\"Header-breadcrumbs\">\n                            {this.props.breadcrumbs}\n                        </div>\n                        <div className=\"Header-buttons\">\n                            {this.props.buttons}\n                        </div>\n                        {/* {this.props.children} */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport { AppError, StoreState, ViewOrgViewModelKind } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as uberModel from '../../../data/models/uber'\nimport { AnError, makeError } from '../../../lib/error'\nimport { reload as reloadOrg } from '../viewOrg'\n\n// LOADING\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR\n    error: AppError\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n        organization: organization,\n        relation: relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                }))\n                return\n            }\n            dispatch(loadSuccess(organization, relation))\n\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Promoting member to admin\n\nexport interface PromoteToAdmin extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n}\n\nexport interface PromoteToAdminSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n    error: AppError\n}\n\n\nexport function promoteToAdminStart(): PromoteToAdminStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n    }\n}\n\nexport function promoteToAdminSuccess(memberUsername: string): PromoteToAdminSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n        memberUsername\n    }\n}\n\nexport function promoteToAdminError(error: AppError): PromoteToAdminError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n        error: error\n    }\n}\n\nexport function promoteToAdmin(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(promoteToAdminStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.memberToAdmin(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(promoteToAdminSuccess(memberUsername))\n            })\n            .catch((err: Error) => {\n                dispatch(promoteToAdminError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Demote admin to member\n\nexport interface DemoteToMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n}\n\nexport interface DemoteToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n    error: AppError\n}\n\n\nexport function demoteToMemberStart(): DemoteToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n    }\n}\n\nexport function demoteToMemberSuccess(memberUsername: string): DemoteToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n        memberUsername: memberUsername\n    }\n}\n\nexport function demoteToMemberError(error: AppError): DemoteToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteToMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(demoteToMemberSuccess(memberUsername))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteToMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Remove a member\n\nexport interface RemoveMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    memberUsername: string\n}\n\ninterface RemoveMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n}\n\nexport interface RemoveMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    memberUsername: orgModel.Username\n}\n\ninterface RemoveMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n    error: AppError\n}\n\nfunction removeMemberStart(): RemoveMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n    }\n}\n\nfunction removeMemberSuccess(memberUsername: orgModel.Username): RemoveMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n        memberUsername\n    }\n}\n\nfunction removeMemberError(error: AppError): RemoveMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function removeMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.removeMember(viewModel.organization.id, memberUsername)\n            .then(() => {\n                // dispatch(removeMemberSuccess(memberUsername))\n                // dispatch(load(viewModel.organization.id))\n                dispatch(reloadOrg(viewModel.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(removeMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// SORT MEMBERS\n\nexport interface SortMembers {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS,\n    sortBy: string\n}\n\nexport interface SortMembersStart {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n}\n\nexport interface SortMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    sortBy: string\n}\n\nexport interface SortMembersError {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR\n    error: AnError\n}\n\n\n\nexport function sortMembers(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS,\n            members: sorted,\n            sortBy\n        })\n\n    }\n}\n\n// SEARCH MEMBERS\n\nexport interface SearchMembers {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS,\n    searchBy: string\n}\n\nexport interface SearchtMembersStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_START\n}\n\nexport interface SearchMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    searchBy: string\n}\n\nexport interface SearchMembersError {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_ERROR\n    error: AnError\n}\n\nexport function searchMembers(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n            searchBy: searchBy,\n            members: sorted\n        })\n\n    }\n}","import * as React from 'react'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon, Tooltip } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\n\nimport './Member.css'\nimport NiceElapsedTime from '../NiceElapsedTime';\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface MemberProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface MemberState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nclass Member extends React.Component<MemberProps, MemberState> {\n    constructor(props: MemberProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-COMPACT\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-NORMAL\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                    <div className=\"Member-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Member-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n}\n\nexport default Member","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Member from './Member'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Member member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading member...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.member.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Alert, Card, Menu, Icon, Dropdown, Modal, Input, Select } from 'antd'\nimport Member from '../../../../entities/MemberContainer'\nimport './component.css'\nimport { organizationLoader } from '../../../../../redux/actions/entities';\n\nexport interface MembersProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n    onPromoteMemberToAdmin: (username: string) => void\n    onRemoveMember: (username: string) => void\n    onDemoteAdminToMember: (username: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n    onReloadOrg: (id: string) => void\n}\n\ninterface MembersState {\n    confirmMemberRemoval: {\n        member: orgModel.Member\n    } | null\n}\n\nexport default class Members extends React.Component<MembersProps, MembersState> {\n    constructor(props: MembersProps) {\n        super(props)\n        this.state = {\n            confirmMemberRemoval: null\n        }\n    }\n\n    onConfirmRemoveMember(member: orgModel.Member) {\n        this.setState({\n            confirmMemberRemoval: {\n                member: member\n            }\n        })\n    }\n\n    renderConfirmMemberRemoval() {\n        if (!this.state.confirmMemberRemoval) {\n            return\n        }\n        const member = this.state.confirmMemberRemoval.member\n        const confirmed = (() => {\n            this.props.onRemoveMember(member.username)\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const canceled = (() => {\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const title = 'Confirm Removal of Member'\n        const content = (\n            <React.Fragment>\n                <p>\n                    Please confirm removal of this member from this organization.\n                </p>\n                <div className=\"simpleCard\" style={{ marginBottom: '1em' }}>\n                    <Member member={member} avatarSize={20} />\n                </div>\n                <p>\n                    This user as well as members of this organization will receive a notification\n                    of the removal.\n                </p>\n                <p>\n                    Any Narratives associated by this member with this Organization will be unaffected. This member\n                    will also retain any Narrative permissions granted through this Organization.\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <Modal\n                title={title}\n                width=\"50em\"\n                visible={true}\n                onOk={() => { confirmed() }}\n                onCancel={() => { canceled() }}\n                okText=\"Confirm\">\n                {content}\n            </Modal>\n        )\n    }\n\n    onMemberMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'promoteToAdmin':\n                this.props.onPromoteMemberToAdmin(member.username)\n                break\n            case 'removeMember':\n                this.onConfirmRemoveMember(member)\n                break\n        }\n    }\n\n    onAdminMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'demoteToMember':\n                this.props.onDemoteAdminToMember(member.username)\n                break\n        }\n    }\n\n    renderMemberMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onMemberMenu.call(this, key, member) }}>\n                <Menu.Item key=\"promoteToAdmin\" >\n                    <Icon type=\"unlock\" />Promote to Admin\n                </Menu.Item>\n                <Menu.Item key=\"removeMember\" >\n                    <Icon type=\"delete\" />Remove Member\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderAdminMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, member) }}>\n                <Menu.Item key=\"demoteToMember\">\n                    <Icon type=\"user\" />Demote to Member\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderOwnerMenu(member: orgModel.Member) {\n        return (\n            <div></div>\n        )\n    }\n\n    renderMemberOptions(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n\n        switch (member.type) {\n            case orgModel.MemberType.OWNER:\n                return this.renderOwnerMenu(member)\n            case orgModel.MemberType.ADMIN:\n                return this.renderAdminMenu(member)\n            case orgModel.MemberType.MEMBER:\n                return this.renderMemberMenu(member)\n        }\n    }\n\n    renderMembers() {\n        let members: JSX.Element | Array<JSX.Element>\n        const message = (\n            <div style={{ fontStyle: 'italic', textAlign: 'center' }}>\n                No members\n            </div>\n        )\n\n        if (this.props.members.length === 0) {\n            members = (\n                <Alert type=\"info\" message={message} />\n            )\n        } else {\n            members = this.props.members.map((member) => {\n                let isNew: boolean\n                if (this.props.organization.lastVisitedAt === null) {\n                    isNew = false\n                } else {\n                    isNew = this.props.organization.lastVisitedAt.getTime() < member.joinedAt.getTime()\n                }\n                const classNames = ['Members-row', 'simpleCard']\n                if (isNew) {\n                    classNames.push('Members-newMember')\n                }\n                return (\n                    <div className={classNames.join(' ')} key={member.username}>\n                        <div className=\"Members-member\">\n                            <Member member={member} avatarSize={50} />\n                        </div>\n                        <div className=\"Members-menu\">\n                            {this.renderMemberOptions(member)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        return (\n            <div className=\"infoTable\">\n                {members}\n            </div>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchMembers(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter members by name\"\n                    onChange={doChange} />\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortMembers(value)\n        }\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortMembersBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Joined</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderHeader() {\n        return (\n            <div className=\"ViewOrganizationMembers-headerRow\">\n                <div className=\"ViewOrganizationMembers-searchCol\">\n                    {this.renderSearchBar()}\n                </div>\n                <div className=\"ViewOrganizationMembers-sortCol\">\n                    {this.renderSortBar()}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let confirm\n        if (this.state.confirmMemberRemoval) {\n            confirm = this.renderConfirmMemberRemoval()\n        }\n        return (\n            <React.Fragment>\n                <div className=\"ViewOrganizationMembers scrollable-flex-column\">\n                    <div className=\"ViewOrganizationMembers-header\">\n                        {this.renderHeader()}\n                    </div>\n                    <div className=\"ViewOrganizationMembers-body scrollable-flex-column\">\n                        {this.renderMembers()}\n                    </div>\n                </div>\n                {confirm}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/viewMembers'\nimport ViewMembers from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    onReloadOrg: (id: string) => void\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onViewMembersUnload: () => void,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewMembersUnload: () => {\n            dispatch(actions.unload() as any)\n        },\n        onPromoteMemberToAdmin: (memberUsername: string) => {\n            dispatch(actions.promoteToAdmin(memberUsername) as any)\n        },\n        onDemoteAdminToMember: (adminUsername: string) => {\n            dispatch(actions.demoteToMember(adminUsername) as any)\n        },\n        onRemoveMember: (memberUsername: string) => {\n            dispatch(actions.removeMember(memberUsername) as any)\n        },\n        onSearchMembers: (searchBy: string) => {\n            dispatch(actions.searchMembers(searchBy) as any)\n        },\n        onSortMembers: (sortBy: string) => {\n            dispatch(actions.sortMembers(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembers)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\n\n// Reject inbound request\n\nexport interface RejectRequestAction<T> extends Action<T> {\n}\n\nexport interface RejectInboxRequest extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface RejectInboxRequestStart extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n}\n\nexport interface RejectInboxRequestSuccess extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\ninterface RejectInboxRequestError extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function denyRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, RejectRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.denyRequest(requestId)\n\n            // refetch the outbox\n            const inbox = await requestClient.getRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            } as RejectInboxRequestSuccess)\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    ViewOrgViewModelKind\n} from '../../../types'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError, makeError } from '../../../lib/error'\n\nexport interface CancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface CancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface CancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\nexport interface CancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: AnError\n}\n\nexport function cancelRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await requestClient.cancelRequest(requestId)\n            const requests: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n                requests\n            } as CancelJoinRequestSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            } as CancelJoinRequestError)\n        }\n    }\n}","import * as React from 'react'\nimport './User.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Button, Icon } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\ninterface UserState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nfunction viewLabel(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return 'Compact'\n        case View.NORMAL:\n            return 'Normal'\n    }\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderCompact() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { Tooltip, Icon, Alert } from 'antd';\nimport './Narrative.css'\nimport UserSimple from './UserContainer';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let label\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                label = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                label = (\n                    <span>Edit (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                label = 'Admin'\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                label = 'Owner'\n                break\n            default:\n                label = 'Unknown'\n        }\n        return (\n            <span>\n                {label}\n            </span>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"Narrative-title\">\n                        <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                            {narrative.title}\n                        </a>\n                    </div>\n                    {' '}\n                    <div className=\"Narrative-owner\">\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n        // const narrative = this.props.narrative\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"mainCol\">\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {' '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            <Icon type=\"crown\" />\n                        </div>\n                        <div className=\"Narrative-global\">\n                            <Icon type=\"global\" />\n                        </div>\n                    </div>\n                    <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div>\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>{narrative.lastSavedBy}\n                    </div>\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    <Icon type=\"exclamation-circle\" style={{ color: 'orange' }} />\n                    {' '}\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact(narrative)}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal(narrative)}\n                    </div>\n                )\n        }\n\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as orgModel from '../../data/models/organization/model'\nimport Narrative from './Narrative'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types'\nimport * as actions from '../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './InboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    onAcceptRequest() {\n        this.props.onAcceptInboxRequest(this.props.request)\n    }\n\n    onRejectRequest() {\n        this.props.onRejectInboxRequest(this.props.request)\n    }\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requestSubject\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"default\" onClick={this.onAcceptRequest.bind(this)}>\n                        <Icon type=\"check\" />\n                        Accept\n                        </Button>\n                    <Button type=\"danger\" onClick={this.onRejectRequest.bind(this)}>\n                        <Icon type=\"cross\" />\n                        Reject\n                        </Button>\n                    {/* <Button>\n                            <Icon type=\"eye\" />\n                            Visit\n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div>\n\n                <div className=\"cardSectionHeader\">\n                    from\n                </div>\n                <User userId={request.requester} avatarSize={30} />\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"InboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"InboxRequest-requestHeaderRow\">\n                        <div className=\"InboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"InboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport InboxRequest from './InboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptInboxRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onRejectInboxRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InboxRequest)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './OutboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    // renderRequestSentType(request: requestModel.Request) {\n    //     switch (request.type) {\n    //         case requestModel.RequestType.REQUEST:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.APP:\n    //                     return 'REQUEST to associate App'\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'REQUEST to join Organization'\n    //                 case requestModel.RequestResourceType.WORKSPACE:\n    //                     return 'REQUEST to associate Narrative'\n    //             }\n    //         case requestModel.RequestType.INVITATION:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'INVITATION to join Organization'\n    //             }\n    //     }\n    //     return 'unknown request'\n    // }\n\n    onCancelRequest() {\n        this.props.onCancelOutboxRequest(this.props.request)\n    }\n\n    onAcceptInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n    onAcceptRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <User userId={request.user} avatarSize={30} />\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"danger\" onClick={this.onCancelRequest.bind(this)}>\n                        <Icon type=\"cross\" />Cancel\n                        </Button>\n                    {/* <Button onClick={this.onVisitOrg.bind(this)}>\n                            <Icon type=\"eye\" />Visit \n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    sent to\n                </div>\n\n                <div className=\"miniDetail\">\n                    {this.renderRequestReceivedSubject(request)}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"OutboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"OutboxRequest-requestHeaderRow\">\n                        <div className=\"OutboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"OutboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as cancelActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport OutboxRequest from './OutboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(cancelActions.cancelRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(OutboxRequest)","import * as React from 'react'\n\nimport './component.css'\nimport Header from '../../../../Header'\nimport { Icon, Button, Modal, Card, Alert } from 'antd'\nimport User from '../../../../entities/UserContainer'\nimport Narrative from '../../../../entities/NarrativeContainer'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { niceElapsed } from '../../../../../lib/time'\nimport InboxRequest from './InboxRequestContainer'\nimport OutboxRequest from './OutboxRequestContainer'\n\nexport interface RequestsProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n    // organizationId: string,\n    // viewModel: types.\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nexport interface RequestsState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageGroupRequests extends React.Component<RequestsProps, RequestsState> {\n\n    constructor(props: RequestsProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n\n        // this.props.onStart(this.props.organizationId)\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n    onAcceptJoinRequest(request: requestModel.Request) {\n        this.props.onAcceptJoinRequest(request)\n    }\n    onDenyJoinRequest(request: requestModel.Request) {\n        this.props.onDenyJoinRequest(request)\n    }\n    onCancelJoinInvitation(request: requestModel.Request) {\n        this.props.onCancelJoinInvitation(request)\n    }\n    onGetViewAccess(request: requestModel.Request) {\n        this.props.onGetViewAccess(request)\n    }\n    onViewProfile(username: string) {\n        window.open('/#people/' + username, '_blank')\n    }\n    onShowInfo() {\n        Modal.info({\n            title: 'Manage Requests Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the manage requests tool...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderRequestJoinRequest(request: requestModel.UserRequest) {\n        const title = (\n            <span>\n                <Icon type=\"user\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestJoinInvitation(request: requestModel.UserInvitation) {\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                <Icon type=\"mail\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"user\" />\n\n                {' '}\n                Invitation to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onCancelJoinInvitation.call(this, request)}>\n                Cancel\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>invitation to</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.user} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderNarrativePermission(permission: orgModel.UserWorkspacePermission) {\n        switch (permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                return 'None'\n            case orgModel.UserWorkspacePermission.VIEW:\n                return 'View Only'\n            // return 'View and Copy'\n            case orgModel.UserWorkspacePermission.EDIT:\n                return 'Edit'\n            // return 'View, Copy, Save, Run'\n            case orgModel.UserWorkspacePermission.ADMIN:\n                return 'Admin'\n            // return 'View, Copy, Save, Run, Manage Sharing'\n            case orgModel.UserWorkspacePermission.OWNER:\n                return 'Owner'\n            // return 'View, Copy, Save, Run, Manage Sharing, Own'\n        }\n    }\n\n    renderRequestNarrativeRequest(request: requestModel.WorkspaceRequest) {\n        const title = (\n            <span>\n                <Icon type=\"file\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Associate Narrative\n            </span>\n        )\n\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        let narrativeAccess\n        narrativeAccess = (\n            <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n        )\n        // TODO: Revive me!!\n        // if (request.narrativeId) {\n        //     // TODO: note the '1' below -- we dont' get the object id from the groups service,\n        //     // and the narrative will soon accept just the workspace id (and will look up the object id by itself)\n        //     // but not yet, so we just use 1, which is INCORRECT.\n        //     narrativeAccess = (\n        //         <div>\n        //             <div>\n        //                 <a href={\"/narrative/ws.\" + request.narrativeId + '.obj.' + '1'} target=\"_blank\">{request.title}</a>\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">your access</span>{' '}{this.renderNarrativePermission(request.narrative.permission)}\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">public?</span>{' '}{request.isPublic ? 'yes' : 'no'}\n        //             </div>\n\n        //         </div>\n        //     )\n        // } else {\n        //     narrativeAccess = (\n        //         <span>\n        //             You don't have access to this narrative\n        //             {' '}\n        //             <Button\n        //                 onClick={() => { this.onGetViewAccess.call(this, request.id) }}>\n        //                 Click for View Access\n        //             </Button>\n        //         </span>\n        //     )\n        // }\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>narrative</th>\n                            <td className=\"Requests-narrative\">\n                                {narrativeAccess}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestAppRequest(request: requestModel.AppRequest) {\n        const title = (\n            <span>\n                <Icon type=\"appstore\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add App\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"Requests-pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"Requests-requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>app</th>\n                            <td className=\"Requests-requester\">\n                                {request.appId}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"Requests-createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"Requests-expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderInbox() {\n        let inbox\n        if (this.props.inbox.length === 0) {\n            inbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.inbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <InboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            inbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {inbox}\n            </React.Fragment>\n        )\n    }\n\n    renderOutbox() {\n        let outbox\n        if (this.props.outbox.length === 0) {\n            outbox = (\n                <Alert type=\"info\" message=\"No pending requests\" />\n            )\n        } else {\n            const requests = this.props.outbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <OutboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            outbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {outbox}\n            </React.Fragment>\n        )\n    }\n\n    isAdmin(relation: orgModel.Relation): boolean {\n        return (\n            relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER\n        )\n    }\n\n    render() {\n        if (this.isAdmin(this.props.relation)) {\n            const outboxCount = this.props.outbox.length\n            const inboxCount = this.props.inbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">inbox ({inboxCount})</div>\n                    {this.renderInbox()}\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        } else {\n            const outboxCount = this.props.outbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"Requests-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        }\n    }\n}\n\nexport default ManageGroupRequests\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport * as cancelRequestActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {}\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptJoinRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onDenyJoinRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        },\n        onCancelJoinInvitation: (request: requestModel.Request) => {\n            dispatch(cancelRequestActions.cancelRequest(request.id) as any)\n        },\n        onGetViewAccess: (request: requestModel.Request) => {\n            // dispatch(actions.getViewAccess(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n\n","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from '../../../OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal, Button } from 'antd'\nimport Owner from '../../../entities/OwnerContainer'\nimport { ComponentView, SubViews } from '../../../../types'\nimport NiceElapsedTime from '../../../NiceElapsedTime'\nimport './BriefOrganizationHeader.css'\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n    orgMenu: JSX.Element\n    onNavigateToBrowser: () => void\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganizationHeader-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it; new or updated items are highlighted'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" theme=\"filled\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganizationHeader-statusRow\">\n                    <div className=\"BriefOrganizationHeader-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganizationHeader-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-freshnessRow\">\n                    <div className=\"BriefOrganizationHeader-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        const lastUpdatedTooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={true} />\n            </span>\n        )\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganizationHeader-orgName BriefOrganizationHeader-infoTableRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {org.name}\n                    </NavLink>\n                </div>\n\n                <div className=\"BriefOrganizationHeader-researchInterests BriefOrganizationHeader-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label BriefOrganizationHeader-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n\n                <div className=\"BriefOrganizationHeader-orgOwner BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\">updated</span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} tooltipPrefix=\"This organization was last updated \" />\n                    </div>\n                </div>\n            </React.Fragment >\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganizationHeader-orgCreated BriefOrganizationHeader-infoTableRow\">\n                    <div className=\"BriefOrganizationHeader-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderButtonsRow() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    {this.props.orgMenu}\n                </div>\n            </div>\n        )\n    }\n\n    renderBackButton() {\n        // return (\n        //     <div className=\"IconButton\"\n        //         onClick={this.props.onNavigateToBrowser}\n        //         style={{ color: 'rgba(145, 43, 43, 1)' }}>\n        //         back\n        //     </div>\n        // )\n\n        return (\n            <Button type=\"danger\" onClick={this.props.onNavigateToBrowser}>\n                back\n            </Button>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <div className=\"BriefOrganizationHeader-buttonsCol\">\n                <div className=\"BriefOrganizationHeader-buttonsRow\" style={{ marginBottom: '10px' }}>\n                    <div className=\"ButtonSet\">\n                        {this.renderBackButton()}\n                    </div>\n                </div>\n                <div className=\"BriefOrganizationHeader-buttonsRow\">\n                    {this.renderButtonsRow()}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganizationHeader-body\">\n                    <div className=\"BriefOrganizationHeader-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganizationHeader-infoCol\">\n\n                        <div className=\"BriefOrganizationHeader-infoCol-row\">\n                            <div className=\"BriefOrganizationHeader-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganizationHeader-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { Tooltip } from 'antd';\nimport './component.css'\nimport OrgLogo from '../../OrgLogo';\nimport Owner from '../OwnerContainer';\nimport { NavLink } from 'react-router-dom';\n\nexport interface OrganizationProps {\n    organization: orgModel.Organization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderLogo(org: orgModel.Organization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={30} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    render() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationEntity-Accessible \">\n                <div className=\"OrganizationEntity-Accessible-logoCol\">\n                    {this.renderLogo(org)}\n                </div>\n                <div className=\"OrganizationEntity-Accessible-mainCol\">\n                    <div className=\"OrganizationEntity-Accessible-name\">\n                        <NavLink to={`/viewOrganization/${org.id}`}>\n                            {org.name}\n                        </NavLink>\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-researchInterests\">\n                        {org.researchInterests}\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-owner\">\n                        <Owner username={org.owner.username} showAvatar={false} avatarSize={20} />\n                    </div>\n                    {/* <div className=\"OrganizationEntity-Accessible-createdAt\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport './Inaccessible.css'\nimport { Icon } from 'antd';\n\nexport interface OrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationEntity-Inaccessible \">\n                <div className=\"OrganizationEntity-Inaccessible-logoCol\">\n                    <Icon type=\"lock\" />\n                </div>\n                <div className=\"OrganizationEntity-Inaccessible-mainCol\">\n                    <div className=\"OrganizationEntity-Inaccessible-name\">\n                        Private Organization\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","// The loader component\n\nimport * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport Organization from './component'\nimport InaccessibleOrganization from './Inaccessible'\n\ninterface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.organization) {\n            switch (this.props.organization.kind) {\n                case orgModel.OrganizationKind.NORMAL:\n                    return (\n                        <Organization organization={this.props.organization} />\n                    )\n                case orgModel.OrganizationKind.INACCESSIBLE_PRIVATE:\n                    return (\n                        <InaccessibleOrganization organization={this.props.organization} />\n                    )\n                default:\n                    return (\n                        <div>\n                            Error: unrecognized org kind\n                        </div>\n                    )\n            }\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.organization) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n}\n\n// The loader redux adapter\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities/organization'\nimport { Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        organization: state.entities.organizations.byId.get(props.organizationId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.OrganizationEntityAction>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error';\n\nexport interface OrganizationEntityAction extends Action {\n\n}\n\n// Organization\n\nexport interface Load extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD\n}\n\ninterface LoadStart extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS\n    organization: orgModel.Organization\n}\n\ninterface LoadError extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR\n    error: AnError\n}\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, OrganizationEntityAction>, getState: () => StoreState) => {\n        dispatch(<LoadStart>{\n            type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const organization = await orgClient.getOrg(organizationId)\n            dispatch(<LoadSuccess>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS,\n                organization\n            })\n        } catch (ex) {\n            dispatch(<LoadError>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR,\n                error: makeError({\n                    code: ex.name,\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Button, Menu, Dropdown, Icon, Alert } from 'antd'\nimport OrganizationEntity from '../../../../entities/organization/loader'\nimport { withRouter, NavLink } from 'react-router-dom'\nimport './component.css'\n\nexport interface RelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\ninterface RelatedOrganizationsState {\n}\n\nexport default class RelatedOrganizations extends React.Component<RelatedOrganizationsProps, RelatedOrganizationsState> {\n    constructor(params: RelatedOrganizationsProps) {\n        super(params)\n    }\n\n    onManageRelatedOrgs() {\n        this.props.onManageRelatedOrgs()\n    }\n\n    renderToolbar() {\n        return (\n            <div className=\"RelatedOrganizations-toolbar\">\n                <Button onClick={this.onManageRelatedOrgs.bind(this)}>\n                    Add Related Org\n                </Button>\n            </div>\n        )\n    }\n\n    onAdminMenu(key: string, organizationId: orgModel.OrganizationID) {\n        switch (key) {\n            case 'removeRelation':\n                // this.props.onDemoteAdminToMember(member.username)\n                this.props.onRemoveRelatedOrganization(this.props.organization.id, organizationId)\n                // window.alert('will remove relation for org: ' + organizationId)\n                break\n        }\n    }\n\n    renderControls(organizationId: orgModel.OrganizationID) {\n        if (!this.props.organization.isAdmin) {\n            return\n        }\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, organizationId) }}>\n                <Menu.Item key=\"removeRelation\">\n                    <Icon type=\"delete\" />Remove\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderBody() {\n        if (this.props.relatedOrganizations.length === 0) {\n            const message = (\n                <p>\n                    No related organizations\n                </p>\n            )\n            return (\n                <Alert type=\"info\" message={message} />\n            )\n        }\n        const Wrapped = withRouter<any>(OrganizationEntity)\n        const relatedOrgs = this.props.relatedOrganizations.map((organizationId: string) => {\n            return (\n                <div key={organizationId} className=\"RelatedOrganizations-orgRow simpleCard\">\n                    {/* <RelatedOrganization organizationId={org} /> */}\n\n                    <div className=\"RelatedOrganizations-orgCol\">\n                        <Wrapped organizationId={organizationId} />\n                    </div>\n                    <div className=\"RelatedOrganizations-controlCol\">\n                        {this.renderControls(organizationId)}\n                    </div>\n                </div>\n            )\n        });\n        return (\n            <div className=\"RelatedOrganizations-organizations\">\n                {relatedOrgs}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"RelatedOrganizations scrollable-flex-column\">\n                {/* <div className=\"RelatedOrganizations-toolbarRow\">\n                    {this.renderToolbar()}\n                </div> */}\n                <div className=\"RelatedOrganizations-bodyRow scrollable-flex-column\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/relatedOrganizations'\nimport Component from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\n\n// Add Org\n\n// export interface AddOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n// }\n\n// export interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//     error: AnError\n// }\n\n// export function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n//     return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n//         dispatch({\n//             type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n//         } as AddOrganizationStart)\n\n//         const {\n//             auth: { authorization: { token, username } },\n//             app: { config },\n//             views: {\n//                 viewOrgView: { viewModel }\n//             }\n//         } = getState()\n//         if (viewModel === null) {\n//             throw new Error('view is not populated')\n//         }\n//         const orgClient = new orgModel.OrganizationModel({\n//             token, username,\n//             groupsServiceURL: config.services.Groups.url\n//         })\n//         try {\n//             await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//                 organizationId\n//             })\n//         } catch (ex) {\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//                 error: makeError({\n//                     code: 'error',\n//                     message: ex.message\n//                 })\n//             })\n//         }\n//     }\n// }\n\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport { BriefOrganization } from '../../../../../data/models/organization/model'\nimport './AvailableOrganization.css'\nimport OrgLogo from '../../../../OrgLogo'\nimport Owner from '../../../../entities/OwnerContainer'\nimport { SelectableRelatableOrganization } from '../../../../../types';\nimport { Icon } from 'antd';\n\nexport interface AvailableOrganizationProps {\n    selectableOrganization: SelectableRelatableOrganization\n    // onSelectOrganization: (org: BriefOrganization) => void\n    // onAddOrganization: (org: BriefOrganization) => void\n}\n\nexport interface AvailableOrganizationState {\n}\n\nexport default class AvailableOrganization extends React.Component<AvailableOrganizationProps, AvailableOrganizationState> {\n    constructor(props: AvailableOrganizationProps) {\n        super(props)\n    }\n\n    renderRelated() {\n        if (this.props.selectableOrganization.isRelated) {\n            return (\n                <Icon type=\"check\" style={{ color: \"green\" }} />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"AvailableOrganization\">\n                <div className=\"AvailableOrganization-relatedCol\">\n                    {this.renderRelated()}\n                </div>\n                <div className=\"AvailableOrganization-orgCol\">\n                    <div className=\"AvailableOrganization-logoCol\">\n                        <OrgLogo logoUrl={this.props.selectableOrganization.organization.logoUrl}\n                            size={30}\n                            organizationName={this.props.selectableOrganization.organization.name}\n                            organizationId={this.props.selectableOrganization.organization.id} />\n                    </div>\n                    <div className=\"AvailableOrganization-orgInfoCol\">\n                        <div className=\"AvailableOrganization-name\">{this.props.selectableOrganization.organization.name}</div>\n                        <div className=\"AvailableOrganization-owner\">\n                            <Owner username={this.props.selectableOrganization.organization.owner.username}\n                                avatarSize={20} showAvatar={false} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"AvailableOrganization-actionCol\"></div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\nimport { Button, Icon, Input, Alert } from 'antd';\nimport AvailableOrganization from './AvailableOrganization'\nimport BriefOrganization from '../../../../BriefOrganization';\nimport { SelectableRelatableOrganization } from '../../../../../types';\n\nexport interface ManageRelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<string>\n    // relation: orgModel.Relation\n    selectedOrganization: SelectableRelatableOrganization | null\n    organizations: Array<SelectableRelatableOrganization>\n    onFinish: () => void\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\ninterface ManageRelatedOrganizationsState {\n\n}\n\nexport default class ManageRelatedOrganizations extends React.Component<ManageRelatedOrganizationsProps, ManageRelatedOrganizationsState> {\n    constructor(props: ManageRelatedOrganizationsProps) {\n        super(props)\n    }\n\n    onAddSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onAddOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onRemoveSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onRemoveOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onSearch(e.target.value)\n    }\n\n    renderAvailableToolbar() {\n        return (\n            <div className=\"ManageRelatedOrganizations-available-toolbar\">\n                <Input placeholder=\"Filter Available Organizations\" onChange={this.onFilterChange.bind(this)} />\n            </div>\n        )\n    }\n\n    renderAvailableOrgs() {\n        return this.props.organizations.map((org: SelectableRelatableOrganization) => {\n            const selectOrg = () => {\n                this.props.onSelectOrganization(org)\n            }\n            let classes = ['simpleCard', 'ManageRelatedOrganizations-availableOrganization']\n            if (org.isSelected) {\n                classes.push('ManageRelatedOrganizations-selected')\n            }\n            return (\n                <div className={classes.join(' ')} onClick={selectOrg} key={org.organization.id} >\n                    <AvailableOrganization selectableOrganization={org} />\n                </div>\n            )\n        })\n    }\n\n    renderSelectedOrg() {\n        let button\n        let content\n        let alert\n        let alertStyle = {\n            marginBottom: '4px'\n        }\n        if (!this.props.selectedOrganization) {\n            const message = (\n                <React.Fragment>\n                    <p>\n                        When you select an organization on the left, details about it will be displayed here.\n                    </p>\n                </React.Fragment>\n            )\n            alert = (\n                <Alert type=\"info\" message={message} style={alertStyle} />\n            )\n            button = (\n                <Button\n                    type=\"primary\"\n                    disabled={this.props.selectedOrganization === null}\n                    onClick={this.onAddSelectedOrganization.bind(this)}>\n                    Add Organization\n                </Button>\n            )\n        } else {\n            content = (\n                <div className=\"ManageRelatedOrganizations-selectedOrganization\">\n                    <BriefOrganization organization={this.props.selectedOrganization.organization} openRequestsStatus={null} />\n                </div>\n            )\n            if (this.props.selectedOrganization.isRelated) {\n                alert = (\n                    <Alert type=\"warning\" message=\"This org is associated\" style={alertStyle} />\n                )\n                button = (\n                    <Button\n                        type=\"danger\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onRemoveSelectedOrganization.bind(this)}>\n                        Remove Organization\n                    </Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        disabled={this.props.selectedOrganization === null}\n                        onClick={this.onAddSelectedOrganization.bind(this)}>\n                        Add Organization\n                    </Button>\n                )\n            }\n        }\n\n        return (\n            <React.Fragment>\n                {alert}\n                {content}\n                <div className=\"ManageRelatedOrganizations-buttonBar\">\n                    {button}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageRelatedOrganizations scrollable-flex-column\">\n                <div className=\"ManageRelatedOrganizations-toolbar\">\n                    <Button onClick={() => this.props.onFinish()} type=\"danger\">\n                        <Icon type=\"rollback\" />\n                        {' '}\n                        Done\n                    </Button>\n                </div>\n                <div className=\"ManageRelatedOrganizations-main scrollable-flex-column\">\n                    <div className=\"ManageRelatedOrganizations-availableOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Available Organizations</h3>\n                        {this.renderAvailableToolbar()}\n                        <div className=\"ManageRelatedOrganizations-organizations\">\n                            {this.renderAvailableOrgs()}\n                        </div>\n                    </div>\n                    <div className=\"ManageRelatedOrganizations-relatedOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Selected Organization</h3>\n                        {this.renderSelectedOrg()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport ManageRelatedOrganizations from './component'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    organizations: Array<SelectableRelatableOrganization>\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\ninterface DispatchProps {\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onSearch: (searchBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    // if (viewModel.subViews.kind !== ViewOrgSubViewKind.MANAGE_RELATED_ORGS) {\n    //     throw new Error(\"argh, wrong org subview kind\")\n    // }\n    if (viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n    const { organization, availableOrganizations: { queried }, relatedOrganizations, selectedOrganization } = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n\n    return {\n        organization, organizations: queried, relatedOrganizations, selectedOrganization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSelectOrganization: (org: SelectableRelatableOrganization) => {\n            dispatch(actions.selectOrganization(org) as any)\n        },\n        onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.addOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onSearch: (searchBy: string) => {\n            dispatch(actions.search(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ManageRelatedOrganizations)","import * as React from 'react'\nimport { Spin, Alert } from 'antd'\nimport Container from './reduxAdapter'\n\n\nexport interface Props {\n    view: types.View<types.ManageRelatedOrgsViewModel | types.NoneViewModel>\n    onLoad: () => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Related Organizations Manager...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                return this.renderLoading()\n            case types.ViewState.LOADING:\n                return this.renderLoading()\n            case types.ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport { OrganizationModel } from '../../../../../data/models/organization/model';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    view: types.View<types.ManageRelatedOrgsViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageRelatedOrganizationsView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport {\n    StoreState, User, InviteUserViewModel,\n    RequestType, RequestResourceType, MemberType,\n    OrganizationUser,\n    ViewOrgViewModelKind,\n    View\n} from '../../../types'\nimport { UserQuery } from '../../../data/model'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../combo/error/api'\nimport { makeError } from '../../../lib/error'\nimport * as viewOrgActions from '../viewOrg'\n// View Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.INVITE_USER_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    users: Array<OrganizationUser> | null\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.INVITE_USER_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n        organization: organization,\n        users: null\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.INVITE_USER_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization kind must be \"NORMAL\"'\n                })))\n                return\n            }\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// User Selection\n\n\n\nexport interface InviteUserSearchUsers extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS,\n    query: UserQuery\n}\n\ninterface SearchUsersStart extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n}\n\nexport interface SearchUsersSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n    users: Array<OrganizationUser> | null\n}\n\ninterface SearchUsersError extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n    error: AnError\n}\n\nfunction searchUsersStart(): SearchUsersStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n    }\n}\n\nfunction searchUsersSuccess(users: Array<OrganizationUser> | null): SearchUsersSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n        users: users\n    }\n}\n\nfunction searchUsersError(error: AnError): SearchUsersError {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n        error: error\n    }\n}\n\nexport function inviteUserSearchUsers(query: UserQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchUsersStart())\n\n        if (query.query.length === 0) {\n            dispatch(searchUsersSuccess(null))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        // const { organization } = viewModel\n        // const orgClient = new orgModel.OrganizationModel({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url\n        // })\n\n\n\n        // const {\n        //     views: {\n        //         inviteUserView: { viewModel }\n        //     },\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // // TODO: better form of type narrowing? \n        // if (viewModel === null) {\n        //     return\n        // }\n\n        const org = viewModel.organization\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        // let excludedUsers: Array<string> = []\n\n        // excludedUsers.push(org.owner.user.username)\n\n        let owner: string = org.owner.username\n        let adminUsers: Array<string> = []\n        let members: Array<string> = []\n        let invited: Array<string> = []\n        let requested: Array<string> = []\n\n        org.members.forEach((member) => {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    members.push(member.username)\n                case MemberType.ADMIN:\n                    adminUsers.push(member.username)\n            }\n        })\n\n        // excludedUsers = excludedUsers.concat(org.members.map((member) => {\n        //     return member.\n        // }))\n\n        // TODO revive\n        // org.adminRequests.forEach((request) => {\n        //     if (request.resourceType === RequestResourceType.USER) {\n        //         switch (request.type) {\n        //             case RequestType.INVITATION:\n        //                 invited.push((<UserInvitation>request).user.username)\n        //                 // excludedUsers.push((<UserInvitation>request).user.username)\n        //                 break\n        //             case RequestType.REQUEST:\n        //                 requested.push((<UserRequest>request).requester.username)\n        //             // excludedUsers.push((<UserRequest>request).requester.username)\n        //         }\n        //     }\n        // })\n\n        try {\n            const users = await userClient.searchUsers(query)\n\n\n            // const filteredUsers = users.filter((user) => {\n            //     return (excludedUsers.indexOf(user.username) === -1)\n            // })\n            const orgUsers: Array<OrganizationUser> = users.map(({ username, realname }) => {\n                let relation: orgModel.UserRelationToOrganization\n                if (username === owner) {\n                    relation = orgModel.UserRelationToOrganization.OWNER\n                } else if (adminUsers.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.ADMIN\n                } else if (invited.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n                } else if (requested.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n                } else if (members.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER\n                } else {\n                    relation = orgModel.UserRelationToOrganization.NONE\n                }\n                return {\n                    username, realname,\n                    relation: relation\n                }\n            })\n            dispatch(searchUsersSuccess(orgUsers))\n        } catch (ex) {\n            dispatch(searchUsersError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n\n    }\n}\n\n// Select a user\n\nexport interface SelectUser extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER,\n    username: string\n}\n\nexport interface SelectUserStart extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_START\n}\n\nexport interface SelectUserSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n    user: User,\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface SelectUserError extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n    error: AnError\n}\n\n\nfunction selectUserStart(): SelectUserStart {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_START\n    }\n}\n\nfunction selectUserSuccess(user: User, relation: orgModel.UserRelationToOrganization): SelectUserSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n        user: user,\n        relation: relation\n    }\n}\n\nfunction selectUserError(error: AnError): SelectUserError {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n        error: error\n    }\n}\n\nfunction isUserRequest(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserRequest = <requestModel.UserRequest>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.REQUEST &&\n        req.requester === username) {\n        return true\n    }\n    return false\n}\n\nfunction isUserInvitation(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserInvitation = <requestModel.UserInvitation>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.INVITATION &&\n        req.user &&\n        req.user === username) {\n        return true\n    }\n    return false\n}\n\nfunction getUserRelation(user: User, organization: orgModel.Organization): orgModel.UserRelationToOrganization {\n    if (user.username === organization.owner.username) {\n        return orgModel.UserRelationToOrganization.OWNER\n    }\n    const member = organization.members.find((member) => {\n        return member.username === user.username\n    })\n    if (member) {\n        switch (member.type) {\n            case MemberType.ADMIN:\n                return orgModel.UserRelationToOrganization.ADMIN\n            case MemberType.OWNER:\n                return orgModel.UserRelationToOrganization.OWNER\n            case MemberType.MEMBER:\n                return orgModel.UserRelationToOrganization.MEMBER\n        }\n    }\n\n    // TODO revive\n    // for (const request of organization.adminRequests) {\n    //     if (isUserInvitation(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    //     } else if (isUserRequest(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     }\n    // }\n\n    return orgModel.UserRelationToOrganization.VIEW\n}\n\nfunction ensureView(state: StoreState): View<InviteUserViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { inviteUserView } = viewModel.subViews\n    if (inviteUserView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return inviteUserView\n}\n\n// function ensureViewModel(state: StoreState): InviteUserViewModel {\n//     const view = ensureView(state)\n//     if (view.viewModel)\n// }\n\nexport function selectUser(selectedUsername: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectUserStart())\n\n        const state = getState()\n\n        let view: View<InviteUserViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch(selectUserError(makeError({\n                code: 'error',\n                message: 'missing view model'\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token } },\n            app: { config }\n        } = state\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await userClient.getUser(selectedUsername)\n            const relation = getUserRelation(user, view.viewModel.organization)\n            dispatch(selectUserSuccess(user, relation))\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Now send the invitation, whew!\n\nexport interface SendInvitation extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION\n}\n\nexport interface SendInvitationStart extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n}\n\nexport interface SendInvitationSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n}\n\nexport interface SendInvitationError extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n    error: AnError\n}\n\nexport function sendInvitationStart(): SendInvitationStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n    }\n}\n\nexport function sendInvitationSuccess(): SendInvitationSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n    }\n}\n\nexport function sendInvitationError(error: AnError): SendInvitationError {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n        error: error\n    }\n}\n\nexport function sendInvitation() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendInvitationStart())\n\n        const state = getState()\n\n        let view: View<InviteUserViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch(selectUserError(makeError({\n                code: 'invalid state',\n                message: ex.message\n            })))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        if (view.viewModel === null) {\n            dispatch(sendInvitationError(makeError({\n                code: 'error',\n                message: 'null view model'\n            })))\n            return\n        }\n\n        const { selectedUser, organization: { id } } = view.viewModel\n\n        if (!selectedUser) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        requestClient.inviteUserToJoinOrg(id, selectedUser.user.username)\n            .then((request) => {\n                dispatch(sendInvitationSuccess())\n                dispatch(viewOrgActions.reload(id))\n            })\n            .catch((err) => {\n                dispatch(sendInvitationError(makeError({\n                    code: err.name,\n                    message: err.message\n                })))\n            })\n    }\n}\n","import * as React from 'react'\nimport './User.css'\n\nimport Avatar from './entities/Avatar'\nimport * as types from '../types';\n\nexport interface UserProps {\n    user: types.User\n    avatarSize?: number\n}\n\ninterface UserState {\n\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                                </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport './component.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\ninterface MainMenuProps {\n    buttons?: JSX.Element\n}\n\ninterface MainMenuState {\n    currentMenuItem: string\n}\n\nclass MainMenu extends React.Component<MainMenuProps, MainMenuState> {\n    constructor(props: MainMenuProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'myorgs':\n        //         this.props.history.push('/dashboard')\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n\n    renderMenu() {\n        return (\n            <Route render={({ history, location }) => {\n                let selectedKeys: Array<string> = []\n                switch (location.pathname) {\n                    case '/organizations':\n                        selectedKeys = ['allorgs']\n                        break\n                    case '/newOrganization':\n                        selectedKeys = ['neworg']\n                        break\n                }\n                return (\n                    <Menu\n                        // onClick={(e: ClickParam) => { doNavigate(e.key) }}\n                        selectedKeys={selectedKeys}\n                        style={{ backgroundColor: 'transparent' }}\n                        mode=\"horizontal\"\n                    >\n                        {/* <Menu.Item key=\"allorgs\">\n                            <Link to=\"/organizations\">Browse &amp; Search</Link>\n                        </Menu.Item> */}\n                        {/* <Menu.Item key=\"neworg\">\n                            <Link to=\"/newOrganization\">Create New Organization</Link>\n                        </Menu.Item> */}\n                    </Menu>\n                )\n            }} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"MainMenu\">\n                <div className=\"MainMenu-menu\">\n                    {this.renderMenu()}\n                </div>\n                <div className=\"MainMenu-buttons\">\n                    {this.props.buttons}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import * as React from 'react'\n\nimport './component.css'\nimport { User, InviteUserViewState, OrganizationUser } from '../../../../../types';\nimport { Button, Icon, Modal, Alert } from 'antd';\nimport Header from '../../../../Header';\nimport { NavLink } from 'react-router-dom';\nimport UserComponent from '../../../../User'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport MainMenu from '../../../../menu/component'\n\nexport interface InviteUserProps {\n    organization: orgModel.Organization,\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState,\n    users: Array<OrganizationUser> | null\n    onSearchUsers: (query: userModel.UserQuery) => void,\n    onSelectUser: (username: string) => void,\n    onSendInvitation: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserState {\n    autocompleteMessage: string\n}\nclass InviteUser extends React.Component<InviteUserProps, InviteUserState> {\n\n    lastSearchAt: Date | null\n\n    static searchDebounce: number = 200\n\n    searchInput: React.RefObject<HTMLInputElement>\n    searchButton: React.RefObject<Button>\n\n    constructor(props: InviteUserProps) {\n        super(props)\n\n        this.lastSearchAt = null\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            autocompleteMessage: ''\n        }\n    }\n\n    onClickCancelToViewer() {\n        this.props.onFinish()\n    }\n\n    onSendInvitation() {\n        this.props.onSendInvitation()\n    }\n\n    canSave() {\n        if (this.props.selectedUser) {\n            return true\n        }\n        return false\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.doSearchUsers(currentSearchInputValue)\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        // this.doSearchUsers(currentSearchInputValue)\n    }\n\n    doSearchUsers(value: string) {\n        // if (value.length < 3) {\n        //     this.setState({ autocompleteMessage: 'Search begins after 3 or more characters' })\n        //     return\n        // }\n        // this.setState({ autocompleteMessage: '' })\n        // build up list of users already owning, members of, or with membership pending.\n        const excludedUsers: Array<string> = []\n\n        if (this.lastSearchAt === null ||\n            (new Date().getTime() - this.lastSearchAt.getTime() > InviteUser.searchDebounce)) {\n            this.lastSearchAt = new Date()\n            this.props.onSearchUsers({\n                query: value,\n                excludedUsers: []\n            })\n        }\n    }\n\n    onSelectUser(user: OrganizationUser) {\n        this.props.onSelectUser(user.username);\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderUsers() {\n        if (!this.props.users) {\n            const message = 'Search for users by name or username to display a list of available users in this space.'\n            return (\n                <Alert type=\"info\" message={message} showIcon />\n            )\n        }\n        if (this.props.users.length === 0) {\n            return (\n                <Alert type=\"warning\" message=\"No users found\" showIcon />\n            )\n        }\n        return this.props.users.map((user) => {\n            if (user.relation === orgModel.UserRelationToOrganization.NONE) {\n                return (\n                    <div\n                        className=\"user notInOrganization \"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div\n                        className=\"user inOrganization\"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            }\n        })\n    }\n\n    renderOrgInfo() {\n        return (\n            <div className=\"orgInfo\">\n                <div className=\"name\">\n                    <span className=\"field-label\">name</span>\n                    <span>{this.props.organization.name}</span>\n                </div>\n                <div className=\"description\">\n                    <span className=\"field-label\">description</span>\n                    <span>{this.props.organization.description}</span>\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationForm() {\n        let button\n        let message\n        if (this.props.selectedUser) {\n            if (this.props.selectedUser.relation === orgModel.UserRelationToOrganization.VIEW) {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onSendInvitation.bind(this)}>Send Invitation</Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        disabled\n                        type=\"primary\"\n                    >Send Invitation</Button>\n                )\n                // message = 'User is a member of this organization'\n                message = (\n                    <div>\n                        User may not be invited because:<br />\n                        {this.renderRelation(this.props.selectedUser.relation)}\n                    </div>\n                )\n                message = (\n                    <Alert\n                        type=\"warning\"\n                        message={message}\n                        showIcon\n                    />\n                )\n            }\n        } else {\n            button = (\n                <Button\n                    disabled\n                    type=\"primary\"\n                >Send Invitation</Button>\n            )\n            message = 'Please select a user'\n        }\n        return (\n            <div className=\"invitationForm\">\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {button}\n                </div>\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationStatus() {\n        switch (this.props.editState) {\n            case InviteUserViewState.NONE:\n                return (\n                    <div>NONE</div>\n                )\n            case InviteUserViewState.EDITING:\n                return (\n                    <div>EDITING</div>\n                )\n            case InviteUserViewState.SENDABLE:\n                return (\n                    <div>SENDABLE</div>\n                )\n            case InviteUserViewState.SENDING:\n                return (\n                    <div>SENDING</div>\n                )\n            case InviteUserViewState.SUCCESS:\n                return (\n                    <div>SENT SUCCESSFULLY</div>\n                )\n            case InviteUserViewState.ERROR:\n                return (\n                    <div>ERROR SENDING</div>\n                )\n            default:\n                return (\n                    <div>Bad State</div>\n                )\n        }\n    }\n\n    renderRelation(relation: orgModel.UserRelationToOrganization) {\n        switch (relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span><Icon type=\"stop\" /> Not a member</span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n\n                    <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n                )\n        }\n    }\n\n    renderSelectedUser() {\n        if (this.props.selectedUser === null) {\n            return (\n                <div className=\"selectedUser\">\n                    <p className=\"noSelection\">\n                        No user yet selected\n                    </p>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"selectedUser\">\n                    <UserComponent user={this.props.selectedUser.user} />\n                    {this.renderRelation(this.props.selectedUser.relation)}\n                </div>\n            )\n        }\n    }\n\n    renderFooter() {\n        return (\n            <div className=\"footer\">\n            </div>\n        )\n    }\n\n    renderSearchButton() {\n        return (<Icon type=\"search\" />)\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onClickCancelToViewer.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"InviteUser scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"row scrollable-flex-column\">\n                    <div className=\"col1 firstCol users scrollable-flex-column\">\n                        <h3>Select User to Invite</h3>\n                        <form id=\"searchForm\" className=\"searchBar\"\n                            onSubmit={this.onSubmit.bind(this)}>\n                            <input\n                                ref={this.searchInput}\n                                autoFocus\n                                onChange={this.onSearchInputChange.bind(this)}\n                                placeholder=\"Search for a user\"\n                            />\n                            <Button\n                                className=\"searchButton\"\n                                form=\"searchForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\"\n                            >\n                                {this.renderSearchButton()}\n                            </Button>\n                        </form>\n                        <div className=\"usersTable\">\n                            {this.renderUsers()}\n                        </div>\n                    </div>\n                    <div className=\"col1 lastCol\">\n                        <h3>Selected User</h3>\n                        {this.renderSelectedUser()}\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n\n                {this.renderFooter()}\n            </div>\n        )\n    }\n}\n\nexport default InviteUser","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport InviteUser from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    users: Array<types.OrganizationUser> | null\n    selectedUser: {\n        user: types.User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: types.InviteUserViewState\n}\n\ninterface DispatchProps {\n    onSearchUsers: (query: userModel.UserQuery) => void\n    onSelectUser: (username: string) => void\n    onSendInvitation: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.inviteUserView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    return viewModel.subViews.inviteUserView.viewModel\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onSearchUsers: ({ query, excludedUsers }) => {\n            dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        },\n        onSelectUser: (username: string) => {\n            dispatch(actions.selectUser(username) as any)\n        },\n        onSendInvitation: () => {\n            dispatch(actions.sendInvitation() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(InviteUser)","import * as React from 'react'\n\nimport Container from './container'\nimport {\n    StoreState, ViewOrgViewModelKind, ViewState,\n    InviteUserViewModel, View, NoneViewModel\n} from '../../../../../types';\n\nexport interface InviteUserLoaderProps {\n    view: View<InviteUserViewModel | NoneViewModel>\n    organizationId: string\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface InviteUserLoaderState {\n}\n\nclass InviteUserLoader extends React.Component<InviteUserLoaderProps, InviteUserLoaderState> {\n    constructor(props: InviteUserLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/inviteUser'\nimport { Spin, Alert } from 'antd';\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<InviteUserViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.inviteUserView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InviteUserLoader)","import * as React from 'react'\nimport './UserSimple.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Tooltip } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface UserState {\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"UserSimple\">\n                <Tooltip title={tooltip} placement=\"bottomRight\">\n                    <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                </Tooltip>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport UserSimple from './UserSimple'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <UserSimple user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />{' '}Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport { Icon } from 'antd'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport { Tooltip, Icon } from 'antd'\nimport UserSimple from '../UserSimpleContainer'\nimport { niceElapsed } from '../../../lib/time'\nimport './component.css'\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    // renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n    //     let label\n    //     switch (narrative.access) {\n    //         case narrativeModel.NarrativeAccess.VIEW:\n    //             label = (\n    //                 <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.EDIT:\n    //             label = (\n    //                 <span>Edit (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.ADMIN:\n    //             label = 'Admin'\n    //             break\n    //         case narrativeModel.NarrativeAccess.OWNER:\n    //             label = 'Owner'\n    //             break\n    //         default:\n    //             label = 'Unknown'\n    //     }\n    //     return (\n    //         <span>\n    //             {label}\n    //         </span>\n    //     )\n    // }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                iconType = 'eye'\n                tooltip = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                iconType = 'edit'\n                tooltip = (\n                    <span>This narrative is shared with you with <b>edit</b> access (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                iconType = 'unlock'\n                tooltip = (\n                    <span>\n                        This narrative is shared with you with <b>access</b> - you may edit and re-share this\n                    </span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                iconType = 'crown'\n                tooltip = (\n                    <span>\n                        You are the owner of this Narrative\n                    </span>\n                )\n                break\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderGlobalPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        if (narrative.isPublic) {\n            iconType = 'global'\n            tooltip = 'This narrative has been shared publicly - with all KBase users'\n        } else {\n            iconType = 'lock'\n            tooltip = 'This narrative is private - only accessible to the owner any users it has been shared with'\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderNiceElapsed(d: Date) {\n        const tooltip = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                    }).format(d)\n                }\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(d)}\n            </Tooltip>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">updated</span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} />\n                    </div>\n\n                    {/* TODO: left off here; need to add in the added date\n                        <div>\n                        <span className=\"field-label\">added</span>\n                        {this.renderNiceElapsed(this.props.)}\n                    </div> */}\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>\n                        {this.renderNiceElapsed(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>\n                        <UserSimple avatarSize={20} userId={narrative.lastSavedBy} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarrative(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return (\n        //             <div className=\"Narrative View-COMPACT\">\n        //                 {this.renderCompact(narrative)}\n        //             </div>\n        //         )\n        //     case View.NORMAL:\n        //         return (\n        //             <div className=\"Narrative View-NORMAL\">\n        //                 {this.renderNormal(narrative)}\n        //             </div>\n        //         )\n        // }\n        return this.renderNarrative(narrative)\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport Narrative from './component'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { Button, Tooltip, Icon, Drawer } from 'antd'\nimport Narrative from './entities/narrative/reduxAdapter'\nimport NiceElapsedTime from './NiceElapsedTime'\nimport './OrganizationNarrative.css'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narrative: orgModel.NarrativeResource\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\ninterface State {\n    requestAccess: boolean\n}\n\nexport default class OrganizationNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            requestAccess: false\n        }\n    }\n\n    onGetViewAccess() {\n        this.props.onGetViewAccess(this.props.narrative)\n    }\n\n    onRequestAccess() {\n        this.setState({ requestAccess: true })\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: false })\n    }\n\n    renderNarrativePermission(narrative: orgModel.NarrativeResource) {\n        let label\n        let shareButton\n        let permissionTooltip\n        let buttonTooltip\n        switch (narrative.permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                if (narrative.isPublic) {\n                    permissionTooltip = \"You have View access to this narrative narrative because it is shared publicly; you may view it, but not edit, run, or share it\"\n                    label = (\n                        <span>\n                            View Only (public)\n                        </span>\n                    )\n                    buttonTooltip = 'Although you have View-Only access to this Narrative due to it being shared globally, you may obtain personal View-Only access by clicking this button'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                } else {\n                    permissionTooltip = \"You have No access to this narrative narrative; you may not view, edit, run, or share it\"\n                    label = (\n                        <span>\n                            No Access\n                        </span>\n                    )\n                    buttonTooltip = 'You cannot access this Narrative; in order to immediately obtain View-Only access click this button.'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                }\n                break\n            case orgModel.UserWorkspacePermission.VIEW:\n                permissionTooltip = \"You have View access to this narrative narrative; you may view it, but not edit, run, or share it\"\n                label = (\n                    <span>\n                        View Only\n                    </span>\n                )\n                buttonTooltip = 'You already have View-Only access to this Narrative, but may request additional access'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Additional Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.EDIT:\n                permissionTooltip = \"You have Edit access to this Narrative; you may view, edit, and run, but not share it\"\n                label = (\n                    <span>\n                        Edit\n                    </span>\n                )\n                buttonTooltip = 'You already have Edit access to this Narrative, but may request additional access by clicking this button'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Admin Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.ADMIN:\n                permissionTooltip = \"You have Admin access to this narrative narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Admin\n                    </span>\n                )\n                break\n            case orgModel.UserWorkspacePermission.OWNER:\n                permissionTooltip = \"You are the Owner of this narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Owner\n                    </span>\n                )\n                break\n            default:\n                label = (\n                    <span>\n                        Unknown\n                    </span>\n                )\n        }\n\n        return (\n            <React.Fragment>\n                <Tooltip title={permissionTooltip} placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <span className=\"field-label\">your permission</span>\n                        {label}\n                    </span>\n                </Tooltip>\n                {' '}\n                <Tooltip title={buttonTooltip} placement=\"right\">\n                    {shareButton}\n                </Tooltip>\n            </React.Fragment>\n        )\n    }\n\n    renderPublicPermission(narrative: orgModel.NarrativeResource) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderNarrative() {\n        const narrative = this.props.narrative\n        if (this.props.organization.isMember) {\n            if (narrative.permission === orgModel.UserWorkspacePermission.NONE &&\n                !narrative.isPublic) {\n                return (\n                    <React.Fragment>\n                        <a href={'/narrative/' + narrative.workspaceId} target=\"_blank\">\n                            <div className=\"title\">{narrative.title}</div>\n                        </a>\n                        <div>{this.renderNarrativePermission(narrative)}</div>\n                    </React.Fragment>\n                )\n            }\n            return (\n                <Narrative workspaceId={narrative.workspaceId} />\n            )\n        }\n        return (\n            <Narrative workspaceId={narrative.workspaceId} />\n        )\n    }\n\n    renderResource() {\n        return (\n            <div>\n                <div>\n                    <span className=\"field-label\">added</span>\n                    <span>\n                        <NiceElapsedTime time={this.props.narrative.createdAt} />\n                    </span>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let accessModal\n        if (this.state.requestAccess) {\n            // TODO: replace with our own implementation...n\n            accessModal = (\n                <Drawer title=\"Request Access to Narrative\"\n                    placement=\"right\"\n                    closable={true}\n                    visible={true}\n                    onClose={() => { this.onCloseRequestAccess.call(this) }}\n                >\n                    Requesting access...\n                </Drawer>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationNarrative\">\n                <div className=\"OrganizationNarrative-narrativeCol\">\n                    {this.renderNarrative()}\n                </div>\n                {/* <div className=\"OrganizationNarrative-resourceCol\">\n                    {this.renderResource()}\n                </div> */}\n                {accessModal}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport { Alert, Button, Icon, Menu, Dropdown, Input, Select, Modal } from 'antd';\nimport { List, ListRowRenderer, ListRowProps } from 'react-virtualized'\nimport OrganizationNarrative from '../../../../OrganizationNarrative'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\n\nexport interface NarrativesProps {\n    organization: orgModel.Organization\n    narratives: Array<orgModel.NarrativeResource>\n    relation: orgModel.Relation\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onRequestAddNarrative: () => void\n}\n\ninterface NarrativesState {\n}\n\nexport default class Narratives extends React.Component<NarrativesProps, NarrativesState> {\n    constructor(props: NarrativesProps) {\n        super(props)\n    }\n\n    onRequestAddNarrative() {\n        this.props.onRequestAddNarrative()\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        const confirmed = () => {\n            this.props.onRemoveNarrative(narrative)\n        }\n        const message = (\n            <React.Fragment>\n                <p>\n                    Please confirm the removal of this Narrative from this Organization.\n                </p>\n                <p>\n                    Any view permission granted to organization members will be unaffected by removing the Narrative.\n                </p>\n                <p>\n                    All Organization members and the Narrative owner will receive a notification.\n                </p>\n            </React.Fragment>\n        )\n        Modal.confirm({\n            title: 'Confirm',\n            content: message,\n            width: '50em',\n            okText: 'Confirm',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    renderNarrativeMenu(narrative: orgModel.NarrativeResource) {\n        const relation = this.props.relation\n        let menu\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // should never occur\n                break;\n            case (orgModel.UserRelationToOrganization.VIEW):\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                break;\n            case (orgModel.UserRelationToOrganization.ADMIN):\n            case (orgModel.UserRelationToOrganization.OWNER):\n                menu = (\n                    <Menu onClick={({ key }) => { this.onNarrativeMenu(key, narrative) }}>\n                        <Menu.Item key=\"removeNarrative\">\n                            <Icon type=\"delete\" style={{ color: \"#f5222d\" }} /> Remove Narrative from Organization\n                        </Menu.Item>\n                    </Menu>\n                )\n        }\n        if (!menu) {\n            return\n        }\n        return (\n            <Dropdown overlay={menu} trigger={['click']}>\n                <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n            </Dropdown>\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchNarratives(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter narratives by title\"\n                    onChange={doChange} />\n                {/* <Button>\n                    <Icon type=\"search\" />\n                </Button> */}\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortNarratives(value)\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '11em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortNarrativesBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Added</Select.Option>\n                    <Select.Option value=\"changed\" key=\"changed\">Last Changed</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberNarrativeRow(narrative: orgModel.NarrativeResource) {\n        const lastOrgVisitAt = this.props.organization.lastVisitedAt\n        const addedAt = narrative.addedAt\n        let isNew\n        if (lastOrgVisitAt === null) {\n            if (addedAt === null) {\n                isNew = false\n            } else {\n                isNew = false\n            }\n        } else {\n            if (addedAt === null) {\n                isNew = false\n            } else {\n                isNew = lastOrgVisitAt.getTime() < addedAt.getTime()\n            }\n        }\n        const classNames = ['ViewOrganization-Narratives-narrative', 'simpleCard']\n        if (isNew) {\n            classNames.push('ViewOrganization-Narratives-newNarrative')\n        }\n        return (\n            <div className={classNames.join(' ')} key={String(narrative.workspaceId)}>\n                <div className=\"ViewOrganization-Narratives-dataCol\">\n                    <OrganizationNarrative\n                        narrative={narrative}\n                        organization={this.props.organization}\n                        onGetViewAccess={this.props.onGetViewAccess} />\n                </div>\n                <div className=\"ViewOrganization-Narratives-buttonCol\">\n                    {this.renderNarrativeMenu(narrative)}\n                </div>\n            </div>\n        )\n    }\n\n    renderMemberNarratives() {\n        const extras = [(\n            <Button\n                key=\"addNarrative\"\n                size=\"small\"\n                onClick={this.onRequestAddNarrative.bind(this)}>\n                <Icon type=\"plus\" />  Associate Narratives\n            </Button>\n        )]\n\n        // (props: ListRowProps) => React.ReactNode\n        const rowRenderer: (props: ListRowProps) => React.ReactNode = ({\n            key,\n            index, isScrolling, isVisible, style\n        }: ListRowProps) => {\n            return this.renderMemberNarrativeRow(this.props.narratives[index])\n        }\n        let narrativesTable\n        if (this.props.narratives.length === 0) {\n            narrativesTable = (\n                <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" />\n            )\n        } else {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                return this.renderMemberNarrativeRow(narrative);\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const narrativeCount = this.props.organization.narrativeCount\n        const title = (\n            <span className=\"ViewOrganization-Narratives-title\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-Narratives-titleCount\">({narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-headerCol2\">\n                        {extras}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-narrativesTable\">\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderNonMemberNarratives() {\n        let alert\n        const narrativesToShow = this.props.organization.narratives.length\n        const hiddenNarrativeCount = this.props.organization.narrativeCount - this.props.organization.narratives.length\n        const alertStyle = {\n            marginBottom: '10px'\n        }\n        if (narrativesToShow) {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives are displayed.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            }\n        } else {\n            if (hiddenNarrativeCount) {\n                const message = (\n                    <React.Fragment>\n                        <p>Since you are not a member of this Organization, only public Narratives would be displayed, but this Organization has none.</p>\n                        <p>{hiddenNarrativeCount} private Narrative{hiddenNarrativeCount !== 1 ? 's have ' : ' has '} been hidden.</p>\n                    </React.Fragment>\n                )\n                alert = (\n                    <Alert type=\"info\" message={message} style={alertStyle} />\n                )\n            } else {\n                alert = (\n                    <Alert type=\"info\" message=\"No Narratives are yet associated with this Organization\" style={alertStyle} />\n                )\n            }\n        }\n\n        let narrativesTable\n        if (narrativesToShow) {\n            narrativesTable = this.props.narratives.map((narrative) => {\n                // create buttons or not, depending on being an admin\n                return (\n                    <div className=\"ViewOrganization-Narratives-narrative simpleCard\" key={String(narrative.workspaceId)}>\n                        <div className=\"ViewOrganization-Narratives-dataCol\">\n                            <OrganizationNarrative\n                                narrative={narrative}\n                                organization={this.props.organization}\n                                onGetViewAccess={this.props.onGetViewAccess} />\n                        </div>\n                        <div className=\"ViewOrganization-Narratives-buttonCol\">\n                            {this.renderNarrativeMenu(narrative)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const title = (\n            <span className=\"ViewOrganization-Narratives-title\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"ViewOrganization-Narratives-titleCount\">({this.props.organization.narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-Narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-Narratives-header\">\n                    <div className=\"ViewOrganization-Narratives-headerCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-headerCol2\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-toolbar\">\n                    <div className=\"ViewOrganization-Narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-Narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-Narratives-narrativesList\">\n                    <div className=\"ViewOrganization-Narratives-table\">\n                        {alert}\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if (this.props.organization.isMember) {\n            return this.renderMemberNarratives()\n        } else {\n            return this.renderNonMemberNarratives()\n        }\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState, SyncState, ValidationErrorType, ViewOrgViewModelKind, View, ManageMembershipViewModel } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error'\nimport Validation from '../../../data/models/organization/validation'\nimport { ActionFlag } from '..'\nimport * as viewOrgActions from '../viewOrg'\n\n// Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, editableMemberProfile: orgModel.EditableMemberProfile): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n        organization: organization,\n        editableMemberProfile: editableMemberProfile\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        // TODO: here is where we would hook into the store state entities for groups\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                })))\n                return\n            }\n\n            if (!org.isMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" is not a member of this org'\n                })))\n                return\n            }\n\n            let thisMember = org.members.find((member) => {\n                return member.username === username\n            })\n\n            if (!thisMember) {\n                if (org.owner.username === username) {\n                    thisMember = org.owner\n                }\n            }\n\n            if (!thisMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" was not found in the members list'\n                })))\n                return\n            }\n\n            const editableProfile: orgModel.EditableMemberProfile = {\n                title: {\n                    value: thisMember.title || '',\n                    remoteValue: thisMember.title,\n                    syncState: SyncState.NEW,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n            dispatch(loadSuccess(org, editableProfile))\n            // dispatch(evaluate())\n        } catch (ex) {\n            console.error('Error :(', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Leaving the Org\n\nexport interface LeaveOrg extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG\n    organizationId: orgModel.OrganizationID\n}\n\ninterface LeaveOrgSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n}\n\ninterface LeaveOrgError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n    error: AnError\n}\n\nexport function leaveOrg(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_START\n        }))\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            orgClient.removeMember(organizationId, username)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n            })\n            dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            console.error('ERROR leaving org', ex)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n    }\n}\n\n\n// Updating Profile\n\nexport interface UpdateTitle {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    title: string\n}\n\nexport interface UpdateTitleStart {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_START\n}\n\nexport interface UpdateTitleSuccess {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    title: string\n}\n\nexport interface UpdateTitleError {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n    error: AnError\n}\n\nexport interface Save {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE,\n    memberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface SaveStart {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n    error: AnError\n}\n\nexport function updateTitle(title: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedTitle, error] = Validation.validateMemberTitle(title)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n                error: makeError({\n                    code: 'invalid',\n                    message: error.message\n                })\n            })\n        } else {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n                title: validatedTitle\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\nexport interface Evaluate extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE\n}\n\nexport interface EvaluateSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n}\n\nexport interface EvaluateError extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR\n}\n\nfunction ensureView(state: StoreState): View<ManageMembershipViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('invalid state -- no view value')\n    }\n    const { manageMembershipView } = viewModel.subViews\n    if (manageMembershipView === null) {\n        throw new Error('invalid state -- no view value')\n    }\n    return manageMembershipView\n}\n\nfunction ensureViewModel(state: StoreState): ManageMembershipViewModel {\n    const view = ensureView(state)\n    if (view.viewModel === null) {\n        throw new Error('invalid state -- no view model')\n    }\n    return view.viewModel\n}\n\nexport function evaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const viewModel = ensureViewModel(getState())\n        const { editableMemberProfile } = viewModel\n\n        if (editableMemberProfile.title.validationState.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_ERROR\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_EVALUATE_SUCCESS\n        })\n    }\n}\n\nexport interface Save extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError extends Action<ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR\n}\n\nexport function save() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_START\n        })\n\n        const viewModel = ensureViewModel(getState())\n        const { organization, editableMemberProfile } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const update = {\n            title: editableMemberProfile.title.value\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            await orgClient.updateMember(organization.id, username, update)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_SUCCESS\n            })\n        } catch (ex) {\n            console.error('error saving member profile', ex)\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_SAVE_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\n// Demote self to member\n\n// Demote admin to member\n\nexport interface DemoteSelfToMember extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER,\n    organizationId: string\n}\n\nexport interface DemoteSelfToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START\n}\n\nexport interface DemoteSelfToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n    organizationId: string\n}\n\nexport interface DemoteSelfToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n    error: AnError\n}\n\n\nexport function demoteToMemberStart(): DemoteSelfToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_START\n    }\n}\n\nexport function demoteSelfToMemberSuccess(organizationId: string): DemoteSelfToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_SUCCESS,\n        organizationId: organizationId\n    }\n}\n\nexport function demoteSelfToMemberError(error: AnError): DemoteSelfToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_MEMBERSHIP_DEMOTE_SELF_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteSelfToMember(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, username)\n            .then((org) => {\n                dispatch(demoteSelfToMemberSuccess(organizationId))\n                dispatch(viewOrgActions.reload(viewModel.organization.id))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteSelfToMemberError(makeError({\n                    code: err.name,\n                    message: err.message\n                })))\n            })\n    }\n}\n","import * as React from 'react'\nimport { Button, Modal, Input, Tooltip } from 'antd';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\nimport {\n    Editable, ValidationErrorType, SyncState, EditState,\n    SaveState, ValidationState\n} from '../../../../../types'\nimport MainMenu from '../../../../menu/component'\nimport './component.css'\n\nexport interface ManageMembershipProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    onLeaveOrganization: (organizationId: string) => void\n    onDemoteSelfToMember: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n    onFinish: () => void\n}\n\ninterface MangeMembershipState {\n}\n\nclass ManageMembership extends React.Component<ManageMembershipProps, MangeMembershipState> {\n    constructor(props: ManageMembershipProps) {\n        super(props)\n    }\n\n    doLeaveOrg() {\n        const confirmed = (() => {\n            this.doLeaveOrgConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Really leave this organization?',\n            content: (\n                <p>\n                    This is not reversible.\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onDone() {\n        this.props.onFinish()\n    }\n\n    doLeaveOrgConfirmed() {\n        // alert('this will leave you the org')\n        this.props.onLeaveOrganization(this.props.organization.id)\n        this.props.onFinish()\n    }\n\n    onDemoteSelfToMember() {\n        const confirmed = (() => {\n            this.onDemoteSelfToMemberConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Confirm Demotion to Regular Member',\n            content: (\n                <p>\n                    Upon removing administrator privileges for yourself, you will\n                    not be able to restore them without the assistance of the\n                    Organization's owner or an administrator\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    onDemoteSelfToMemberConfirmed() {\n        this.props.onDemoteSelfToMember(this.props.organization.id)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onSave()\n    }\n\n    onTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateTitle(e.target.value)\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'ManageMembership-validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'ManageMembership-validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'ManageMembership-sync-dirty'\n            default:\n                return 'ManageMembership-validation-ok'\n        }\n    }\n\n    renderLeaveOrgButton() {\n        let leaveOrgButton\n        switch (this.props.organization.relation) {\n            case orgModel.UserRelationToOrganization.MEMBER:\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Button icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.doLeaveOrg.bind(this)}\n                        >\n                            Leave Organization\n                                </Button>\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.ADMIN:\n                const adminTooltip = (\n                    <React.Fragment>\n                        <p>\n                            As an organization administrator, you may not leave\n                            the organization.\n                        </p>\n                        <p>\n                            In order to leave the organization, you will need to\n                            become a regular member first.\n                        </p>\n                    </React.Fragment>\n                )\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Tooltip\n                            title={adminTooltip}>\n                            <Button icon=\"stop\"\n                                type=\"default\"\n                                disabled={true}\n                            >\n                                Only a regular member may leave Organization\n                            </Button>\n                        </Tooltip>\n                    </div>\n                )\n                break\n            case orgModel.UserRelationToOrganization.OWNER:\n                const ownerTooltip = (\n                    <React.Fragment>\n                        <p>\n                            As an organization owner, you are the only permanent member\n                            of this organization.\n                        </p>\n                    </React.Fragment>\n                )\n                leaveOrgButton = (\n                    <div className=\"ButtonSet-button\">\n                        <Tooltip\n                            title={ownerTooltip}>\n                            <Button icon=\"stop\"\n                                type=\"default\"\n                                disabled={true}\n                            >\n                                Cannot leave Organization\n                        </Button>\n                        </Tooltip>\n                    </div>\n                )\n                break\n        }\n        return leaveOrgButton\n    }\n\n    renderDemoteToMemberButton() {\n        switch (this.props.organization.relation) {\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"ButtonSet-button\">\n                        <Button icon=\"user\"\n                            type=\"default\"\n                            onClick={this.onDemoteSelfToMember.bind(this)}>\n                            Demote Self to Member\n                        </Button>\n\n                    </div>\n                )\n        }\n    }\n\n    renderTitleRow() {\n        const tooltip = (\n            <p>\n                This is your title within this Organization.\n            </p>\n        )\n        return (\n            <div className=\"ManageMembership-editorTable-row\">\n                <div className=\"ManageMembership-editCol ManageMembership-editCell\">\n                    <div className=\"ManageMembership-editorTable-labelCol\">\n                        <span className=\"field-label ManageMembership-titleLabel\">\n                            <Tooltip title={tooltip}>\n                                title\n                                </Tooltip>\n                        </span>\n                    </div>\n                    <div className=\"ManageMembership-editorTable-controlCol\">\n                        <Input value={this.props.editableMemberProfile.title.value || ''}\n                            className={this.calcFieldClass(this.props.editableMemberProfile.title)}\n                            onChange={this.onTitleChange.bind(this)} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <div className=\"ButtonSet-button\">\n                <Button icon=\"delete\"\n                    type=\"danger\"\n                    onClick={this.onDone.bind(this)}>\n                    Cancel\n                </Button>\n            </div>\n        )\n    }\n\n    renderSaveButton() {\n        return (\n            <div className=\"ButtonSet-button\">\n                <Button icon=\"save\"\n                    form=\"editMembership\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    Save\n                </Button>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editMembership\"\n                className=\"ManageMembership-editorTable scrollable-flex-column\"\n                onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"ManageMembership-headerRow\">\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Edit Your Organization Profile\n                    </div>\n                </div>\n                <div className=\"ManageMembership-formRow\">\n                    {this.renderTitleRow()}\n                    <div className=\"ManageMembership-editorFooter\">\n                        <div className=\"ButtonSet\">\n                            {this.renderSaveButton()}\n                            {this.renderCancelButton()}\n                            {this.renderLeaveOrgButton()}\n                            {this.renderDemoteToMemberButton()}\n                        </div>\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onDone.bind(this)}>\n                        Done\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageMembership scrollable-flex-column\">\n                {/* <MainMenu buttons={this.renderMenuButtons()} title=\"Manage My Membership\" /> */}\n                <div className=\"ManageMembership-body scrollable-flex-column\">\n                    <div className=\"ManageMembership-main scrollable-flex-column\">\n                        {this.renderEditor()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ManageMembership","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageMembership'\n\nimport { StoreState, EditState, SaveState, ValidationState, ViewOrgViewModelKind, ManageMembershipViewModel } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as userModel from '../../../../../data/models/user'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\ninterface DispatchProps {\n    onLeaveOrganization: (organizationId: string) => void\n    onDemoteSelfToMember: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { authorization: { username } },\n    } = state\n\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.manageMembershipView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const subViewModel: ManageMembershipViewModel = viewModel.subViews.manageMembershipView.viewModel\n\n    const {\n        organization\n    } = viewModel\n\n    const {\n        editableMemberProfile, editState, saveState, validationState\n    } = subViewModel\n\n    return {\n        username, organization, editableMemberProfile, editState, saveState, validationState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLeaveOrganization: (organizationId: string) => {\n            dispatch(actions.leaveOrg(organizationId) as any)\n        },\n        onUpdateTitle: (title: string) => {\n            dispatch(actions.updateTitle(title) as any)\n        },\n        onSave: () => {\n            dispatch(actions.save() as any)\n        },\n        onDemoteSelfToMember: (organizationId: string) => {\n            dispatch(actions.demoteSelfToMember(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport {\n    StoreState, ManageMembershipViewModel, ViewState,\n    View, NoneViewModel, ViewOrgViewModelKind\n} from '../../../../../types'\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: View<ManageMembershipViewModel | NoneViewModel>\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <React.Fragment>\n                <Icon type=\"loading\" />{' '}Loading Your Membership...\n            </React.Fragment>\n        )\n        return (\n            <Alert type=\"info\" message={message}\n                style={{ padding: '20px', width: '30em', margin: '30px auto 0 auto', textAlign: 'center' }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageMembership'\nimport { AnError, makeError } from '../../../../../combo/error/api'\nimport { Spin, Alert, Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<ManageMembershipViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    // This bit deals with the fact that we are a subview \n    // and it keeps TS happy.\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageMembershipView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState, AppError, EditableOrganization, ValidationState,\n    ValidationErrorType, SyncState\n} from '../../types'\nimport Validation from '../../data/models/organization/validation'\nimport * as orgModel from '../../data/models/organization/model'\nimport DebouncingProcess from '../../lib/DebouncingProcess'\nimport { UIServiceClient } from '../../data/apis/uiService'\n\n// ACTIONS\n\n// Loading the editor\nexport interface Load extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action<ActionFlag.EDIT_ORG_LOAD_ERROR> {\n    type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.EDIT_ORG_UNLOAD> {\n    type: ActionFlag.EDIT_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface EditOrgEvaluate extends Action<ActionFlag.EDIT_ORG_EVALUATE> {\n    type: ActionFlag.EDIT_ORG_EVALUATE\n}\n\nexport interface EditOrgEvaluateOK extends Action<ActionFlag.EDIT_ORG_EVALUATE_OK> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_OK\n}\n\nexport interface EditOrgEvaluateErrors extends Action<ActionFlag.EDIT_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n}\n\n// Saving\n\nexport interface EditOrgSave extends Action<ActionFlag.EDIT_ORG_SAVE> {\n    type: ActionFlag.EDIT_ORG_SAVE\n}\n\nexport interface EditOrgSaveStart extends Action<ActionFlag.EDIT_ORG_SAVE_START> {\n    type: ActionFlag.EDIT_ORG_SAVE_START\n}\n\nexport interface EditOrgSaveSuccess extends Action<ActionFlag.EDIT_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n}\n\nexport interface EditOrgSaveError extends Action<ActionFlag.EDIT_ORG_SAVE_ERROR> {\n    type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Updating name field\n\nexport interface EditOrgUpdateName extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface EditOrgUpdateNameSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface EditOrgUpdateNameError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL,\n    name: string | null\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating description field\n\nexport interface EditOrgUpdateDescription extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\n// export function editOrgStart(id: string): LoadStart {\n//     return {\n//         type: ActionFlag.EDIT_ORG_LOAD_START,\n//         id: id\n//     }\n// }\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_START\n    }\n}\n\nexport function loadSuccess(editedOrganization: EditableOrganization, organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n        editedOrganization: editedOrganization,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.EDIT_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function editOrgEvaluateOk(): EditOrgEvaluateOK {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_OK\n    }\n}\n\nexport function editOrgEvaluateErrors(): EditOrgEvaluateErrors {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Save\n\n// export function editOrgSave(): EditOrgSave {\n//     return {\n//         type: ActionFlag.EDIT_ORG_SAVE\n//     }\n// }\n\nexport function editOrgSaveStart(): EditOrgSaveStart {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_START\n    }\n}\n\nexport function editOrgSaveSuccess(): EditOrgSaveSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n    }\n}\n\nexport function editOrgSaveError(error: AppError): EditOrgSaveError {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Update Name\n\nexport function editOrgUpdateNameSuccess(name: string): EditOrgUpdateNameSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function editOrgUpdateNameError(name: string, error: ValidationState): EditOrgUpdateNameError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\n// export function editOrgUpdateIdSuccess(id: string): EditOrgUpdateIdSuccess {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//         id: id\n//     }\n// }\n\n// Update Logo Url\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n\n// Update Id\n\n// export function editOrgUpdateIdError(id: string, error: UIError): EditOrgUpdateIdError {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//         id: id,\n//         error: error\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(description: string): EditOrgUpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function editOrgUpdateDescriptionError(description: string, error: ValidationState): EditOrgUpdateDescriptionError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        // const model = new Model({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url,\n        //     userProfileServiceURL: config.services.UserProfile.url,\n        //     workspaceServiceURL: config.services.Workspace.url,\n        //     serviceWizardURL: config.services.ServiceWizard.url\n        // })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        return orgClient.getOrg(organizationId)\n            .then((org) => {\n                if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                    throw new Error('May not edit an inaccessible private org!')\n                }\n                const editableOrg: EditableOrganization = {\n                    id: {\n                        value: org.id,\n                        remoteValue: org.id,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgId(org.id)[1]\n                    },\n                    name: {\n                        value: org.name,\n                        remoteValue: org.name,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgName(org.name)[1]\n                    },\n                    logoUrl: {\n                        value: org.logoUrl,\n                        remoteValue: org.logoUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgLogoUrl(org.logoUrl)[1]\n                    },\n                    homeUrl: {\n                        value: org.homeUrl,\n                        remoteValue: org.homeUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgHomeUrl(org.homeUrl)[1]\n                    },\n                    researchInterests: {\n                        value: org.researchInterests,\n                        remoteValue: org.researchInterests,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgResearchInterests(org.researchInterests)[1]\n                    },\n                    description: {\n                        value: org.description,\n                        remoteValue: org.description,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgDescription(org.description)[1]\n                    },\n                    isPrivate: {\n                        value: org.isPrivate,\n                        remoteValue: org.isPrivate,\n                        syncState: SyncState.NEW,\n                        validationState: {\n                            type: ValidationErrorType.OK,\n                            validatedAt: new Date()\n                        }\n                    }\n                }\n                dispatch(loadSuccess(editableOrg, org))\n            })\n            .catch((err) => {\n                console.error('load org error', err)\n                dispatch(loadError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function editOrgSave() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(editOrgSaveStart())\n\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                editOrgView: {\n                    viewModel: { organization, editedOrganization }\n                }\n            },\n            app: { config } } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        if (!editedOrganization) {\n            dispatch(editOrgSaveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        const update = {\n            name: editedOrganization.name.value,\n            logoUrl: editedOrganization.logoUrl.value,\n            description: editedOrganization.description.value,\n            isPrivate: editedOrganization.isPrivate.value,\n            homeUrl: editedOrganization.homeUrl.value,\n            researchInterests: editedOrganization.researchInterests.value\n        }\n\n        orgClient.updateOrg(organization.id, update)\n            .then(() => {\n                dispatch(editOrgSaveSuccess())\n            })\n            .catch((error) => {\n                console.error('error adding', editedOrganization, error)\n                dispatch(editOrgSaveError({\n                    code: 'invalid',\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function editOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                editOrgView: {\n                    viewModel: {\n                        editedOrganization\n                    }\n                }\n            }\n        } = state\n\n        if (!editedOrganization) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(editOrgEvaluateOk())\n    }\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateNameError(validatedName, error))\n        } else {\n            dispatch(editOrgUpdateNameSuccess(validatedName))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nlet checkLogoUrlProcess: DebouncingProcess\n\nclass CheckIfLogoUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkImageURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateLogoUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This logo url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateLogoUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateLogoUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking logo url: ' + ex.message\n            }))\n        }\n        this.dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkLogoUrlProcess) {\n            checkLogoUrlProcess.cancel()\n        }\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateLogoUrlError(validatedLogoUrl, error))\n            dispatch(editOrgEvaluate())\n            return\n        }\n\n        dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n\n        dispatch(editOrgEvaluate())\n\n        if (validatedLogoUrl !== null && validatedLogoUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkLogoUrlProcess = new CheckIfLogoUrlExistsProcess({\n                delay: 100,\n                url: validatedLogoUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkLogoUrlProcess.start()\n        }\n    }\n}\n\n// Home Url\n\nlet checkHomeUrlProcess: DebouncingProcess\n\nclass CheckIfHomeUrlExistsProcess extends DebouncingProcess {\n    dispatch: ThunkDispatch<StoreState, void, Action>\n    url: string\n    timeout: number\n    serviceWizardURL: string\n    token: string\n    constructor({ delay, dispatch, url, timeout, serviceWizardURL, token }: { delay: number, dispatch: ThunkDispatch<StoreState, void, Action>, url: string, timeout: number, serviceWizardURL: string, token: string }) {\n        super({ delay })\n\n        this.dispatch = dispatch\n        this.url = url\n        this.serviceWizardURL = serviceWizardURL\n        this.token = token\n        this.timeout = timeout\n    }\n\n    async task(): Promise<void> {\n        try {\n            const client = new UIServiceClient({\n                url: this.serviceWizardURL,\n                token: this.token\n            })\n            const result = await client.checkHTMLURL({ url: this.url, timeout: this.timeout })\n\n            if (this.canceled) {\n                return\n            }\n\n            if (result.is_valid) {\n                this.dispatch(updateHomeUrlSuccess(this.url))\n            } else {\n                switch (result.error.code) {\n                    case 'not-found':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'This home url does not exist'\n                        }))\n                        break\n                    case 'invalid-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Invalid content type: ' + result.error.info['content-type']\n                        }))\n                        break\n                    case 'missing-content-type':\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'Missing content type'\n                        }))\n                        break\n                    default:\n                        this.dispatch(updateHomeUrlError(this.url, {\n                            type: ValidationErrorType.ERROR,\n                            validatedAt: new Date(),\n                            message: 'unknown error'\n                        }))\n                        break\n                }\n            }\n        } catch (ex) {\n            if (this.canceled) {\n                return\n            }\n            this.dispatch(updateHomeUrlError(this.url, {\n                type: ValidationErrorType.ERROR,\n                validatedAt: new Date(),\n                message: 'Error checking home url: ' + ex.message\n            }))\n        }\n        this.dispatch(editOrgEvaluate())\n    }\n}\n\nfunction updateHomeUrlSuccess(homeUrl: string): UpdateHomeUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n        homeUrl\n    }\n}\n\nfunction updateHomeUrlError(homeUrl: string, error: ValidationState): UpdateHomeUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n        homeUrl, error\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        if (checkHomeUrlProcess) {\n            checkHomeUrlProcess.cancel()\n        }\n\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: validatedHomeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n            dispatch(editOrgEvaluate())\n            return\n        }\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n            homeUrl: validatedHomeUrl\n        } as UpdateHomeUrlSuccess)\n\n        dispatch(editOrgEvaluate())\n\n        if (validatedHomeUrl !== null && validatedHomeUrl.length > 0) {\n            const {\n                auth: { authorization: { token } },\n                app: { config: { services: { ServiceWizard: { url: serviceWizardURL } } } }\n            } = getState()\n\n            checkHomeUrlProcess = new CheckIfHomeUrlExistsProcess({\n                delay: 100,\n                url: validatedHomeUrl,\n                timeout: 1000,\n                dispatch, serviceWizardURL, token\n            })\n\n            checkHomeUrlProcess.start()\n        }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgResearchInterests(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            } as UpdateResearchInterestsSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>,\n        getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(editOrgUpdateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // No validation for now.\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate: isPrivate\n        })\n        dispatch(editOrgEvaluate())\n    }\n} ","import * as React from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Marked } from 'marked-ts';\nimport { Button, Icon, Modal, Checkbox, Input, Tooltip, Table, Collapse, Tabs } from 'antd';\nimport md5 from 'md5'\nimport {\n    EditableOrganization, SaveState, ValidationState,\n    EditState, ValidationErrorType, Editable, SyncState, EditableString, EditableNullableString, EditableBoolean\n} from '../../../../../types';\nimport './component.css'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport TextArea from 'antd/lib/input/TextArea';\nimport MainMenu from '../../../../menu/component';\n\nexport interface EditOrganizationProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n    onFinish: () => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\nexport interface EditOrganizationState {\n    cancelToBrowser: boolean;\n    cancelToViewer: boolean;\n    navigateTo: NavigateTo;\n}\n\nclass EditOrganization extends React.Component<EditOrganizationProps, EditOrganizationState> {\n\n    origin: string;\n\n    constructor(props: EditOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.origin = document.location!.origin\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organization Editor Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations editor...</p>\n                </div>\n            )\n        })\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onClickCancelToViewer() {\n        if (!this.isModified()) {\n            this.setState({ cancelToViewer: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToViewer: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onEditOrgSave()\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateName(e.target.value)\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value)\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        console.warn('no updating id, naughty!')\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY)\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error Lite'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error Lite'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty Lite'\n            default:\n                return 'validation-ok Lite'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderNameRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.name.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.name)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={this.onNameChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.name)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-name\">\n                        {this.props.editedOrganization.name.value || ''}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNameRow(nameField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    This is the name for your organization as you want KBase users to see it; you may change it at any time.\n                </p>\n                <p>\n                    It may be composed of ordinary text, but does not accept formatting.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Your Organization\\'s display name'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Name\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={nameField.value || ''}\n                            className={this.calcFieldClass(nameField)}\n                            placeholder={placeholder}\n                            autoFocus\n                            onChange={onChange} />\n                        {this.renderFieldError(nameField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRowx() {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"EditOrganization-row\">\n                <div className=\"EditOrganization-col1\">\n                    <div className=\"EditOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                            </Tooltip>\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col2\">\n                    <div className=\"EditOrganization-formControl\">\n                        <Input value={this.props.editedOrganization.id.value || ''}\n                            className={this.calcFieldClass(this.props.editedOrganization.id)}\n                            placeholder={placeholder}\n                            onChange={this.onIdChange.bind(this)} />\n                        {this.renderFieldError(this.props.editedOrganization.id)}\n                    </div>\n                </div>\n                <div className=\"EditOrganization-col3\">\n                    <div className=\"EditOrganization-preview-id\">\n                        <span style={{ color: 'silver' }}>{this.origin}/#org/</span>\n                        {this.props.editedOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderIDRow(idField: EditableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization has a unique identifier. The ID is set when the organization is created, and are permanent: It may never be changed.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                100 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a to z, 0 to 9, -\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"A unique ID for your Organization\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            ID\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Input value={idField.value || ''}\n                            className={this.calcFieldClass(idField)}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(idField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderLogoURLRow(logoUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization will display a logo. You may specific your own logo by entering the URL for an image, or leave\n                    this field blank and a default logo will be displayed, using the first letter of your org name and a randomly\n                    generated color (based on your org id).\n                </p>\n                <p>\n                    Please don't use large images, and try to keep them roughly square. The logo image display will be constrained\n                    to no larger than 100 pixels wide. Non-square logos may not look good in the Orgs list or on your Org page.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full https:// url. E.g. https://my.org/myimage.png<br />\n                                note that only <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The URL for your Organization's logo (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Logo URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={logoUrlField.value || ''}\n                                className={this.calcFieldClass(logoUrlField)}\n                                placeholder={placeholder}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(logoUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderLogoPreview(logoUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderBrokenHomeURL() {\n        const tooltipTitle = 'The Home URL is broken; either correct it or leave it empty'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderHomeURLPreview(homeUrlField: EditableNullableString) {\n        if (homeUrlField.value === null) {\n            const tooltipTitle = 'When you have completed your url, you may preview it here.'\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    <Tooltip title={tooltipTitle}>\n                        <Icon type=\"link\" style={{ color: 'gray' }} />\n                    </Tooltip>\n                </div>\n            )\n        }\n\n        if (homeUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenHomeURL()}\n                </div>\n            )\n        }\n\n        const tooltipTitle = 'Try out your url by clicking this link'\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <Tooltip title={tooltipTitle} >\n                    <a href={homeUrlField.value} target=\"_blank\">\n                        <Icon type=\"link\" />\n                    </a>\n                </Tooltip>\n            </div>\n        )\n    }\n\n    renderHomeURLRow(homeUrlField: EditableNullableString, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each Organization may display a home page url. This should be considered the canonical home for your Organization, if\n                    it also exists outside of KBase.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1000 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                a full url. E.g. http://my.org/myimage.png<br />\n                                note that both <i>http></i> and <i>https</i> urls are accepted.\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = \"The url for your Organization's home page (optional)\"\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Home Page URL\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formField\">\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={homeUrlField.value || ''}\n                                className={this.calcFieldClass(homeUrlField)}\n                                placeholder={placeholder}\n                                onChange={onChange} />\n                            {this.renderFieldError(homeUrlField)}\n                        </div>\n                        <div className=\"NewOrganization-formFieldPreview\">\n                            {this.renderHomeURLPreview(homeUrlField)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderCollapse(content: JSX.Element) {\n        const style = {\n            background: 'transparent',\n            borderRadius: 0,\n            margin: 0,\n            border: 0,\n            overflow: 'hidden'\n        }\n        return (\n            <Collapse bordered={false}>\n                <Collapse.Panel header=\"What about inviting users?\" key=\"invite\" style={style}>\n                    {content}\n                </Collapse.Panel>\n            </Collapse>\n        )\n    }\n\n    renderPrivatePublicRow(isPrivateField: EditableBoolean, onChange: (e: CheckboxChangeEvent) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Set the Organization to \"hidden\" to prevent it from appearing in the listing and from being exposed\n                    as an Org page for any non-member.\n                </p>\n                <p>\n                    You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                    org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                    to accept the invitation and instantly have access to it.\n                </p>\n                <p>\n                    A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                    submit a Join request.\n                </p>\n                {/* {this.renderCollapse((\n                    <React.Fragment>\n                        <p>\n                            You may invite users directly to your org. When doing so they will receive a notification with a link to the\n                            org page. When a user lands on the org page they will not be shown information about the org, but will be available\n                            to accept the invitation and instantly have access to it.\n                        </p>\n                        <p>\n                            A user with an invitation who lands on the org page will not see information about the org, but will be able to\n                            submit a Join request.\n                        </p>\n                    </React.Fragment>\n                ))} */}\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                no\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Hidden?\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <div>\n                            <Checkbox\n                                checked={isPrivateField.value}\n                                className={this.calcFieldClass(isPrivateField)}\n                                onChange={onChange} />\n                            {this.renderIsPrivate(isPrivateField.value)}\n                        </div>\n                        {this.renderFieldError(isPrivateField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    renderResearchInterestsRow(researchInterestsField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a short description of research interests or purpose.\n                </p>\n                <p>\n                    This text is displayed in the organizations list and the organization's page. It is most helpful\n                    in the list context to help users quickly scan the list.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                200 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                unformatted text\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'List your areas of interest. Systems biology, microbial ecology, plant genomics'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Research Interests\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n\n                        <TextArea value={researchInterestsField.value || ''}\n                            className={this.calcFieldClass(researchInterestsField) + ' NewOrganization-control-researchInterests'}\n                            autosize={{ minRows: 2, maxRows: 2 }}\n                            placeholder={placeholder}\n                            onChange={onChange} />\n                        {this.renderFieldError(researchInterestsField)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderDescriptionRow(descriptionField: EditableString, onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void) {\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Each organization must have a description which communicates the purpose of this organization.\n                </p>\n                <p>\n                    The description is in <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a> format\n                    and may be quite long. It will be presented in a scrolling area.\n                </p>\n                <p>\n                    Please be mindful of embedding large images or other content which may interfere with the display of your Organization.\n                </p>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>\n                                required\n                            </th>\n                            <td>\n                                yes\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <th>\n                                max length\n                            </th>\n                            <td>\n                                1024 characters\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>\n                                allowed\n                            </th>\n                            <td>\n                                standard <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">markdown</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n        const placeholder = 'Text or Markdown describing your Organization'\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                    <div className=\"NewOrganization-formLabel field-label\">\n                        <Tooltip title={tooltip}>\n                            Description\n                        </Tooltip>\n                    </div>\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div className=\"NewOrganization-formControl\">\n                        <Tabs defaultActiveKey=\"editor\" animated={false}>\n                            <Tabs.TabPane tab=\"Editor\" key=\"editor\">\n                                <TextArea value={descriptionField.value || ''}\n                                    className={this.calcFieldClass(descriptionField) + ' NewOrganization-control-description'}\n                                    autosize={{ minRows: 5, maxRows: 15 }}\n                                    placeholder={placeholder}\n                                    onChange={onChange} />\n                                {this.renderFieldError(descriptionField)}\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Preview\" key=\"preview\">\n                                <div className=\"NewOrganization-preview-description\"\n                                    dangerouslySetInnerHTML={({ __html: Marked.parse(descriptionField.value || '') })}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderSaveButton() {\n        return (\n            <Button icon=\"save\"\n                form=\"editOrganizationForm\"\n                key=\"submit\"\n                disabled={!this.canSave.call(this)}\n                htmlType=\"submit\">\n                Save\n            </Button>\n        )\n    }\n\n    renderCancelButton() {\n        return (\n            <Button icon=\"close\"\n                type=\"danger\"\n                onClick={this.onFinish.bind(this)}>\n                Cancel\n            </Button>\n        )\n    }\n\n    renderEditorHeader() {\n        return (\n            <div className=\"NewOrganization-row\">\n                <div className=\"NewOrganization-col1\">\n                </div>\n                <div className=\"NewOrganization-col2\">\n                    <div style={{ flex: '1 1 0px' }}>\n                        <h3>Edit Your Organization</h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editOrganizationForm\" className=\"EditOrganization-editor scrollable-flex-column\" onSubmit={this.onSubmit.bind(this)}>\n                {this.renderEditorHeader()}\n                <div className=\"EditOrganization-body\">\n                    {this.renderNameRow(this.props.editedOrganization.name, this.onNameChange.bind(this))}\n                    {this.renderIDRow(this.props.editedOrganization.id, this.onIdChange.bind(this))}\n                    {this.renderLogoURLRow(this.props.editedOrganization.logoUrl, this.onLogoUrlChange.bind(this))}\n                    {this.renderHomeURLRow(this.props.editedOrganization.homeUrl, this.onHomeUrlChange.bind(this))}\n                    {this.renderPrivatePublicRow(this.props.editedOrganization.isPrivate, this.onIsPrivateChange.bind(this))}\n                    {this.renderResearchInterestsRow(this.props.editedOrganization.researchInterests, this.onResearchInterestsChange.bind(this))}\n                    {this.renderDescriptionRow(this.props.editedOrganization.description, this.onDescriptionChange.bind(this))}\n                    <div className=\"EditOrganization-row\">\n                        <div className=\"EditOrganization-col1\">\n                        </div>\n                        <div className=\"EditOrganization-col2\" style={{ textAlign: 'center' }}>\n                            <div className=\"ButtonSet\">\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderSaveButton()}\n                                </span>\n                                <span className=\"ButtonSet-button\">\n                                    {this.renderCancelButton()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Hidden - will be visible <b>only</b> for members of this organization\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Visible - will be visible to all KBase users.\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.editedOrganization.name.value && this.props.editedOrganization.id.value)) {\n            const tooltipTitle = 'Add a logo url or complete the name and id fields for a Default logo'\n            return (\n                <Tooltip title={tooltipTitle}>\n                    <Icon type=\"question\" style={{ color: 'gray' }} />\n                    {/* <div style={{ height: '30px', width: '30px' }}></div> */}\n                </Tooltip>\n            )\n        }\n        const initial = this.charAt(this.props.editedOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.editedOrganization.id.value)\n        const size = 30;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderBrokenLogo() {\n        const tooltipTitle = 'The Logo URL is broken; either correct it or empty the field for the default logo'\n        return (\n            <Tooltip title={tooltipTitle}>\n                <Icon type=\"exclamation-circle\" style={{ color: 'gray' }} />\n            </Tooltip>\n        )\n    }\n\n    renderLogoPreview(logoUrlField: EditableNullableString) {\n        if (logoUrlField.value === null) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderDefaultLogo()}\n                </div>\n            )\n        }\n\n        if (logoUrlField.validationState.type !== ValidationErrorType.OK) {\n            return (\n                <div className=\"NewOrganization-previewBox\">\n                    {this.renderBrokenLogo()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization-previewBox\">\n                <img src={logoUrlField.value} width={30} />\n            </div>\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Close\n                        </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"save\"\n                        form=\"editOrganizationForm\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                    </Button>\n                </span>\n            </span>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n        return (\n            <div className=\"EditOrganization scrollable-flex-column\">\n                <div className=\"EditOrganization-main scrollable-flex-column\">\n                    {this.renderEditor()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default EditOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n    StoreState, EditableOrganization, EditState,\n    SaveState, ValidationState\n} from '../../../../../types';\nimport {\n    editOrgSave,\n    updateName,\n    updateDescription, updateLogoUrl, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../../../redux/actions/editOrg';\nimport EditOrganization from './component';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\ninterface OwnProps {\n    onFinish: () => void\n}\n\nexport interface StateProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface DispatchProps {\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.editOrgView.viewModel) {\n        throw new Error('What, no view model??')\n    }\n    const {\n        views: {\n            editOrgView: {\n                viewModel: { editState, saveState, validationState, editedOrganization, organization }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        editedOrganization,\n        organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onEditOrgSave: () => {\n            dispatch(editOrgSave() as any)\n        },\n        onUpdateName: (name: string) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        // onUpdateId: (id) => {\n        //     dispatch(editOrgUpdateId(id) as any)\n        // },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(EditOrganization)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, EditOrgView } from '../../../../../types'\nimport Container from './container'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    view: EditOrgView\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface LoaderState {\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Editor...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/editOrg'\nimport { Alert, Spin } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    view: EditOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.editOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './RowWrapper.css'\n\nexport interface Dimensions {\n    offsetHeight: number,\n    scrollTop: number,\n    clientHeight: number\n}\nexport interface RowWrapperProps {\n    index: number\n    containerDimensions: Dimensions | null\n    buffer: number\n    approximateRowHeight: number\n    emptyRowRenderer: () => JSX.Element\n}\n\ninterface RowWrapperState {\n\n}\n\nexport default class RowWrapper extends React.Component<RowWrapperProps, RowWrapperState> {\n    ref: React.RefObject<HTMLDivElement>\n    constructor(props: RowWrapperProps) {\n        super(props)\n        this.ref = React.createRef()\n    }\n\n    isVisible() {\n        // const relativeLeft = (l - cl) - cs;\n        // const relativeRight = relativeLeft + w;\n        // if (relativeRight < 0) {\n        //     return false;\n        // }\n        // if (relativeLeft > cw) {\n        //     return false;\n        // }\n        // return true\n\n        if (!this.ref.current) {\n            return false\n        }\n\n        const d = this.props.containerDimensions\n        if (!d) {\n            return false\n        }\n\n        const buffer = this.props.buffer * this.props.approximateRowHeight\n\n        const containerVisibleTop = Math.max(d.scrollTop - buffer, 0)\n        const containerVisibleBottom = d.scrollTop + d.clientHeight + buffer\n\n        const h = this.ref.current.offsetHeight\n        const t = this.ref.current.offsetTop\n\n        const topBelowTop = (t >= containerVisibleTop)\n        const topAboveBottom = (t <= containerVisibleBottom)\n\n        const bottomBelowTop = (t + h >= containerVisibleTop)\n        const bottomAboveBottom = (t + h <= containerVisibleBottom)\n\n        const visible = (topBelowTop && topAboveBottom) || (bottomBelowTop && bottomAboveBottom)\n        return visible\n    }\n\n    render() {\n        const show = this.isVisible()\n        if (show) {\n            return (\n                <div className=\"RowWrapper-rendered\" ref={this.ref}>\n                    {this.props.children}\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"RowWrapper-unrendered\" style={{ height: this.props.approximateRowHeight }} ref={this.ref}>\n                    {this.props.emptyRowRenderer()}\n                </div>\n            )\n        }\n    }\n}","import * as React from 'react'\nimport RowWrapper from './RowWrapper'\nimport './FlexibleColumnWrapper.css'\n\nexport interface Dimensions {\n    offsetHeight: number,\n    scrollTop: number,\n    clientHeight: number\n}\n\ninterface Listener {\n    target: Window | Node\n    type: string\n    listener: EventListener\n}\n\nexport abstract class Renderable {\n    currentItem: number | null\n    constructor() {\n        this.currentItem = 0\n    }\n\n    abstract render(index: number): JSX.Element\n    abstract size(): number\n    abstract renderEmpty(): JSX.Element\n}\n\nexport interface FlexibleColumnWrapperProps {\n    // rowRenderer: (index: number) => JSX.Element\n    renderable: Renderable\n    // rowCount: number\n}\n\nexport interface FlexibleColumnWrapperState {\n    containerDimensions: Dimensions | null\n}\n\nexport class FlexibleColumnWrapper extends React.Component<FlexibleColumnWrapperProps, FlexibleColumnWrapperState> {\n\n    wrapperContainerRef: React.RefObject<HTMLDivElement>\n    listeners: Array<Listener>\n    limitingTimer: number | null\n    limitingTimeout: number\n\n    constructor(params: FlexibleColumnWrapperProps) {\n        super(params)\n\n        this.state = {\n            containerDimensions: null\n        }\n\n        this.wrapperContainerRef = React.createRef()\n        this.listeners = []\n        this.limitingTimer = null\n        this.limitingTimeout = 100\n    }\n\n    calcContainerBounds() {\n        if (this.wrapperContainerRef.current === null) {\n            return null\n        }\n        const dim = {\n            offsetHeight: this.wrapperContainerRef.current.offsetHeight,\n            scrollTop: this.wrapperContainerRef.current.scrollTop,\n            clientHeight: this.wrapperContainerRef.current.clientHeight\n        }\n        return dim\n    }\n\n    limiter(fun: () => void) {\n        if (this.limitingTimer) {\n            window.clearTimeout(this.limitingTimer)\n        }\n        this.limitingTimer = window.setTimeout(() => {\n            fun()\n        }, this.limitingTimeout)\n    }\n\n    checkDimensions = () => {\n        const currentDimensions = this.calcContainerBounds()\n        if (!currentDimensions) {\n            return\n        }\n\n        const lastDimensions = this.state.containerDimensions\n        if (!lastDimensions) {\n            this.setState({ containerDimensions: currentDimensions })\n        } else {\n            if (currentDimensions.offsetHeight !== lastDimensions.offsetHeight ||\n                currentDimensions.scrollTop !== lastDimensions.scrollTop ||\n                currentDimensions.clientHeight !== lastDimensions.clientHeight) {\n                this.setState({ containerDimensions: currentDimensions })\n            }\n        }\n    }\n\n    componentDidMount() {\n        if (this.wrapperContainerRef.current === null) {\n            return false\n        }\n\n        const scrollHandler = () => {\n            this.limiter(() => { this.checkDimensions() })\n        }\n\n        this.wrapperContainerRef.current.addEventListener('scroll', scrollHandler)\n        this.listeners.push({\n            target: this.wrapperContainerRef.current,\n            type: 'scroll',\n            listener: scrollHandler\n        })\n\n        const resizeHandler = () => {\n            this.limiter(() => { this.checkDimensions() })\n        }\n        window.addEventListener('resize', resizeHandler)\n        this.listeners.push({\n            target: window,\n            type: 'resize',\n            listener: resizeHandler\n        })\n\n        this.checkDimensions()\n    }\n\n    componentWillUnmount() {\n        this.listeners.forEach((listener) => {\n            listener.target.removeEventListener(listener.type, listener.listener)\n        })\n    }\n\n    render() {\n        let out: Array<JSX.Element> = []\n\n        for (let i = 0; i < this.props.renderable.size(); i += 1) {\n            out.push(\n                <RowWrapper index={i} key={String(i)}\n                    containerDimensions={this.state.containerDimensions}\n                    buffer={5} approximateRowHeight={73} emptyRowRenderer={() => { return this.props.renderable.renderEmpty() }}>\n                    {this.props.renderable.render(i)}\n                </RowWrapper>\n            )\n        }\n\n        return (\n            <div className=\"FlexibleColumnWrapper\" ref={this.wrapperContainerRef}>\n                {out}\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport { NarrativeState } from '../../../../../types';\nimport { Icon, Button, Alert, Select, Tooltip } from 'antd';\nimport './component.css'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport MainMenu from '../../../../menu/component'\nimport { OrganizationNarrative, AccessibleNarrative } from '../../../../../data/models/narrative'\nimport NiceElapsedTime from '../../../../NiceElapsedTime'\nimport { FlexibleColumnWrapper, Renderable } from './FlexibleColumnWrapper'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narratives: Array<OrganizationNarrative>\n    relation: orgModel.Relation\n    selectedNarrative: OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    filter: string\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: OrganizationNarrative) => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass NarrativeRenderer extends Renderable {\n    rowRenderer: (index: number) => JSX.Element\n    rowCount: number\n    constructor(rowRenderer: (index: number) => JSX.Element, rowCount: number) {\n        super()\n\n        this.rowRenderer = rowRenderer\n        this.rowCount = rowCount\n    }\n\n    size() {\n        return this.rowCount\n    }\n\n    render(index: number) {\n        return this.rowRenderer(index)\n    }\n\n    renderEmpty() {\n        return (\n            <div className=\"RequestNarrative-narrative-skeleton\">\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '20em' }}>&nbsp;</div>\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '5em' }}>&nbsp;</div>\n                <div className=\"RequestNarrative-narrative-skeleton-row\" style={{ width: '10em' }}>&nbsp;</div>\n            </div>\n        )\n    }\n}\n\nexport class RequestAddNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            containerDimensions: null\n        }\n\n    }\n\n    onFinish() {\n        this.props.onFinish()\n    }\n\n    doSelectNarrative(narrative: OrganizationNarrative) {\n        this.props.doSelectNarrative(narrative)\n    }\n\n    doSendRequest() {\n        if (this.props.selectedNarrative === null) {\n            console.warn('attempt to send request without selected narrative')\n            return\n        }\n        this.props.doSendRequest(this.props.organization.id, this.props.selectedNarrative.narrative.workspaceId)\n    }\n\n    canSendRequest() {\n        if (this.props.selectedNarrative) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderPermission(narrative: AccessibleNarrative) {\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                return (\n                    <span>\n                        <Icon type=\"eye\" /> View\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.EDIT:\n                return (\n                    <span>\n                        <Icon type=\"edit\" /> Edit\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> Admin\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> Owner\n                    </span>\n                )\n            default:\n                return (\n                    <span>\n                        ERROR\n                    </span>\n                )\n        }\n    }\n\n    renderPublicPermission(narrative: AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <span>\n                    <Icon type=\"global\" /> Public\n                </span>\n            )\n        } else {\n            return (\n                <span>\n                    <Icon type=\"lock\" /> Private\n                </span>\n            )\n        }\n    }\n\n    renderNarrative(narrative: AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"RequestNarrative-title\">\n                    {narrative.title}\n                </div>\n\n                <div className=\"RequestNarrative-publicPermission\">\n                    {this.renderPublicPermission(narrative)}\n                </div>\n                <div className=\"RequestNarrative-modifiedAt\">\n                    <span className=\"field-label\">\n                        <Icon type=\"save\" />\n                    </span>\n                    {' '}\n                    <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderOrgNarrative(orgNarrative: OrganizationNarrative) {\n        const { status, narrative } = orgNarrative\n        let isSelected\n        if (this.props.selectedNarrative &&\n            narrative.workspaceId === this.props.selectedNarrative.narrative.workspaceId) {\n            isSelected = true\n        } else {\n            isSelected = false\n        }\n        let classNames = ['RequestNarrative-narrativeCell']\n        if (isSelected) {\n            classNames.push('RequestNarrative-selected')\n        }\n        let flag\n        switch (status) {\n            case NarrativeState.ASSOCIATED:\n                classNames.push('RequestNarrative-narrativeInOrg')\n                flag = (\n                    <Tooltip title=\"This narrative is already associated with this organization\">\n                        <Icon type=\"check\" style={{ color: 'green' }} />\n                    </Tooltip>\n                )\n                break\n            case NarrativeState.REQUESTED:\n                classNames.push('RequestNarrative-narrativeInOrg')\n                flag = (\n                    <Tooltip title=\"You have already requested that this narrative be added to this organization\">\n                        <Icon type=\"loading\" style={{ color: 'orange' }} />\n                    </Tooltip>\n                )\n                break\n            default:\n                classNames.push('RequestNarrative-narrativeNotInOrg')\n        }\n\n        return (\n            <div\n                className={classNames.join(' ')}\n                onClick={() => { this.doSelectNarrative.call(this, orgNarrative) }}\n            >\n                <div className=\"RequestNarrative-narrativeFlag\">\n                    {flag}\n                </div>\n                <div className=\"RequestNarrative-narrative\">\n\n                    {this.renderNarrative(orgNarrative.narrative)}\n                </div>\n            </div>\n        )\n    }\n\n    renderNarratives() {\n        if (this.props.narratives.length === 0) {\n            return (\n                <div className=\"message\">\n                    You do not have any Narratives\n                </div>\n            )\n        }\n        const rowRenderer = (index: number) => {\n            return this.renderOrgNarrative(this.props.narratives[index])\n        }\n        const narrativeRenderer = new NarrativeRenderer(rowRenderer, this.props.narratives.length)\n        return (\n            <FlexibleColumnWrapper renderable={narrativeRenderer} />\n        )\n    }\n\n    onSearchSubmit() {\n        return\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\"\n                className=\"RequestNarrative-searchBar\"\n                onSubmit={this.onSearchSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search your Narratives\"\n                    // onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                />\n                <Button\n                    className=\"RequestNarrative-button\"\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                </Button>\n            </form>\n        )\n    }\n\n    renderFeedbackBar() {\n        return (\n            <div>\n                Showing\n                {' '}\n                {\n                    Intl.NumberFormat('en-US', {\n                        style: 'decimal',\n                        useGrouping: true\n                    }).format(this.props.narratives.length)\n                }\n                {' '}\n                narratives\n            </div>\n        )\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'title':\n                this.props.doSortBy(narrativeModel.Sort.TITLE)\n                break\n            case 'savedAt':\n                this.props.doSortBy(narrativeModel.Sort.LAST_SAVED)\n                break\n        }\n    }\n\n    onSortDirectionChange() {\n    }\n\n    onFilterChange() {\n    }\n\n    renderFilterSortBar() {\n        return (\n            <div className=\"RequestNarrative-filterSortBar\">\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"title\" key=\"title\">Title</Select.Option>\n                    <Select.Option value=\"savedAt\" key=\"savedAt\">Last saved</Select.Option>\n                </Select>\n            </div>\n        )\n    }\n\n    renderNarrativeSelector() {\n        return (\n            <div className=\"RequestNarrative-narrativeSelector scrollable-flex-column\">\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {/* <div style={{ flex: '0 0 10em' }}>\n                        {this.renderSearchBar()}\n                    </div> */}\n                    <div style={{ flex: '1 1 0px' }}>\n                        {this.renderFilterSortBar()}\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-feedbackBar\">\n                    {this.renderFeedbackBar()}\n                </div>\n                <div className=\"RequestNarrative-narratives scrollable-flex-column\">\n                    <div className=\"RequestNarrative-narrativesTable scrollable-flex-column\"  >\n                        {this.renderNarratives()}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderSelectedNarrativeButton() {\n        if (!this.props.selectedNarrative) {\n            return\n        }\n        if (this.props.selectedNarrative.status === NarrativeState.ASSOCIATED) {\n            return (\n                <Alert type=\"info\" message=\"This Narrative is associated with this Organization\" />\n            )\n        } else if (this.props.selectedNarrative.status === NarrativeState.REQUESTED) {\n            return (\n                <Alert type=\"warning\" message=\"You have requested to associate this Narrative with this Organization\" />\n            )\n        }\n        let buttonLabel\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            buttonLabel = 'Add Selected Narrative to Organization'\n        } else {\n            buttonLabel = 'Request Association of Selected Narrative to Organization'\n        }\n        return (\n            <Button\n                type=\"primary\"\n                onClick={this.doSendRequest.bind(this)}\n                disabled={!this.canSendRequest.call(this)}\n            >{buttonLabel}</Button>\n        )\n    }\n\n    renderSelectedNarrative() {\n        if (this.props.selectedNarrative) {\n            return (\n                <div className=\"RequestNarrative-selectedNarrative\">\n                    <div className=\"RequestNarrative-title\">\n                        {this.props.selectedNarrative.narrative.title}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        {' '}\n                        <NiceElapsedTime time={this.props.selectedNarrative.narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            )\n        } else {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to request association of\n                        it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            } else {\n                const message = (\n                    <p>\n                        Select a narrative on the left to show it here and be able to associate it with this Organization.\n                    </p>\n                )\n                return (\n                    <Alert type=\"info\" message={message} />\n                )\n            }\n        }\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onFinish.bind(this)}>\n                        Done\n                </Button>\n                </div>\n            </div >\n        )\n    }\n\n    renderAlert() {\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization member, you are able to request association of any Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        If your Narrative association request is accepted by an Organization administrator,\n                        it will appear for all members on the main Organization page.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        } else {\n            const warning = (\n                <React.Fragment>\n                    <p>\n                        As an Organization administrator, you will be able to immediate associate a Narrative you\n                        own with this Organization.\n                    </p>\n                    <p>\n                        Members will be able to gain view share access to the Narrative.\n                    </p>\n                    <p>\n                        Only Organization administrators will be able to disassociate the Narrative from the Organization.\n                    </p>\n                </React.Fragment>\n\n            )\n            return (\n                <Alert type=\"warning\"\n                    message={warning}\n                    style={{ marginBottom: '10px' }} />\n            )\n        }\n    }\n\n    renderSelectedAlert() {\n        if (this.props.selectedNarrative && this.props.selectedNarrative.status === NarrativeState.NONE) {\n            if (this.props.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n                const warning = (\n                    <React.Fragment>\n                        <p>\n                            Please be aware that if your request to associate this Narrative is accepted,\n                            you will be unable to directly remove it from the Organization.\n                    </p>\n                        <p>\n                            Only Organization administrators are able to remove associated Narratives from the Organization.\n                    </p>\n                    </React.Fragment>\n                )\n                return (\n                    <Alert type=\"warning\"\n                        message={warning}\n                        style={{ marginBottom: '10px', marginTop: '10px' }} />\n                )\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"RequestNarrative scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div className=\"RequestNarrative-body scrollable-flex-column\">\n                    <div className=\"RequestNarrative-selectNarrativeCol scrollable-flex-column\">\n                        <h3>Select a Narrative to Associate with this Organization</h3>\n                        {this.renderNarrativeSelector()}\n                    </div>\n                    <div className=\"RequestNarrative-selectedNarrativeCol\">\n                        <h3>Selected Narrative</h3>\n                        {/* {this.renderAlert()} */}\n                        {this.renderSelectedNarrative()}\n                        {this.renderSelectedAlert()}\n                        <div className=\"RequestNarrative-selectedNarrativeButtonBar\">\n                            {this.renderSelectedNarrativeButton()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-footer\">\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RequestAddNarrative","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport {\n    StoreState, Narrative, View, ViewOrgViewModelKind,\n    RequestNarrativeViewModel\n} from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError } from '../../../lib/error'\nimport { makeError } from '../../../combo/error/api'\nimport { OrganizationNarrative } from '../../../data/models/narrative'\nimport * as viewOrgActions from '../viewOrg'\n\nexport interface Load extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR\n    error: AnError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, narratives: Array<narrativeModel.OrganizationNarrative>, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n        organization, narratives, relation\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const [org, narratives, request, invitation] = await Promise.all([\n                orgClient.getOrganization(organizationId),\n                narrativeClient.getOwnNarratives(organizationId),\n                requestClient.getUserRequestForOrg(organizationId),\n                requestClient.getUserInvitationForOrg(organizationId)\n            ])\n\n            const relation = orgModel.determineRelation(org, username, request, invitation)\n            dispatch(loadSuccess(org, narratives, relation))\n        } catch (ex) {\n            console.error('loading error', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Selecting narrative\nexport interface SelectNarrative {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n}\n\nexport interface SelectNarrativeSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS\n    narrative: narrativeModel.OrganizationNarrative\n}\n\nexport interface SelectNarrativeError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR\n    error: AnError\n}\n\nexport function selectNarrativeStart(): SelectNarrativeStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n    }\n}\n\nexport function selectNarrativeSuccess(narrative: OrganizationNarrative): SelectNarrativeSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function selectNarrativeError(error: AnError): SelectNarrativeError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\nexport function selectNarrative(narrative: OrganizationNarrative) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectNarrativeStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: fetch narrative and populate the selected narrative accordingly...\n        dispatch(selectNarrativeSuccess(narrative))\n    }\n}\n\n// Sending Request\nexport interface SendRequest {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND\n}\n\nexport interface SendRequestStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n}\n\nexport interface SendRequestSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    request: requestModel.Request | boolean\n}\n\nexport interface SendRequestError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n    error: AnError\n}\n\n\nexport function sendRequestStart(): SendRequestStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n    }\n}\n\nexport function sendRequestSuccess(request: requestModel.Request | boolean): SendRequestSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n        request: request\n    }\n}\n\nexport function sendRequestError(error: AnError): SendRequestError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n        error: error\n    }\n}\n\nexport function sendRequest(groupId: string, workspaceId: number) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendRequestStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const request = await orgClient.addOrRequestNarrativeToGroup(groupId, workspaceId)\n            dispatch(sendRequestSuccess(request))\n            dispatch(viewOrgActions.reload(groupId))\n        } catch (ex) {\n            dispatch(sendRequestError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Unloading\n\nexport interface Unload extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface Sort {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT\n    sort: narrativeModel.Sort\n}\n\nexport interface SortStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n}\n\nexport interface SortSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS\n    narratives: Array<narrativeModel.OrganizationNarrative>\n}\n\nexport interface SortError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR\n    error: AnError\n}\n\nfunction ensureView(state: StoreState): View<RequestNarrativeViewModel> {\n    const {\n        views: {\n            viewOrgView: { viewModel }\n        }\n    } = state\n    if (viewModel === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    const { requestNarrativeView } = viewModel.subViews\n    if (requestNarrativeView === null) {\n        throw new Error('select user invalid state -- no view value')\n    }\n    return requestNarrativeView\n}\n\nexport function sort(sort: narrativeModel.Sort) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n        } as SortStart)\n\n        const state = getState()\n\n        let view: View<RequestNarrativeViewModel>\n        try {\n            view = ensureView(state)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n            return\n        }\n\n        if (view.viewModel === null) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'missing view model'\n                })\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const sorted = narrativeClient.sortOrganizationNarratives(view.viewModel.narratives, sort)\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n                narratives: sorted\n            } as SortSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as types from '../../../../../types'\nimport Component from './component'\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport * as narrativeModel from '../../../../../data/models/narrative'\nimport { RequestNarrativeViewModel } from '../../../../../types';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    // sortDirection: types.SortDirection\n    filter: string\n}\n\ninterface DispatchProps {\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => void\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    if (viewModel.subViews.requestNarrativeView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n\n    const subViewModel: RequestNarrativeViewModel = viewModel.subViews.requestNarrativeView.viewModel\n\n    const {\n        organization, relation, narratives, selectedNarrative,\n    } = subViewModel\n\n    return {\n        organization, relation, narratives, selectedNarrative,\n        searching: false,\n        sortBy: 'title',\n        filter: ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        doSendRequest: (groupId: string, workspaceId: number) => {\n            dispatch(actions.sendRequest(groupId, workspaceId) as any)\n        },\n        doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => {\n            dispatch(actions.selectNarrative(narrative) as any)\n        },\n        doSortBy: (sortBy: narrativeModel.Sort) => {\n            dispatch(actions.sort(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: View<RequestNarrativeViewModel | NoneViewModel>\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <React.Fragment>\n                <Icon type=\"loading\" />{' '}Loading Your Narratives...\n            </React.Fragment>\n        )\n        return (\n            <Alert type=\"info\" message={message}\n                style={{ padding: '20px', width: '30em', margin: '30px auto 0 auto', textAlign: 'center' }} />\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                return this.renderLoading()\n            case ViewState.LOADING:\n                return this.renderLoading()\n            case ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case ViewState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../../../redux/actions/viewOrganization/requestAddNarrative'\nimport { Icon, Alert } from 'antd'\nimport {\n    View, RequestNarrativeViewModel, StoreState, ViewOrgViewModelKind,\n    ViewState, NoneViewModel\n} from '../../../../../types'\nimport { AnError, makeError } from '../../../../../lib/error';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: View<RequestNarrativeViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    // This bit deals with the fact that we are a subview \n    // and it keeps TS happy.\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.requestNarrativeView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { Marked } from 'marked-ts'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { ViewOrgViewModel, SubViews } from '../../../../types'\nimport { Button, Modal, Icon, Tooltip, Card, Dropdown, Menu, Alert, Tabs } from 'antd'\nimport Header from '../../../Header'\nimport Members from './members/reduxAdapter'\nimport Requests from './requests/container'\nimport BriefOrganizationHeader from './BriefOrganizationHeader'\nimport RelatedOrganizations from './relatedOrgs/reduxAdapter'\nimport ManageRelatedOrganizations from './manageRelatedOrganizations/loader'\nimport InviteUser from './inviteUser/loader'\nimport Narratives from './narratives/component'\nimport ManageMembership from './manageMembership/loader'\nimport EditOrganization from './editOrganization/loader'\nimport RequestAddNarrative from './requestAddNarrative/loader'\nimport * as requestModel from '../../../../data/models/requests'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport './component.css'\nimport OrgMenu from './OrgMenu';\n\nenum NavigateTo {\n    NONE = 0,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    BROWSER\n}\n\nenum AccordionState {\n    UP = 0,\n    DOWN\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n    accordionState: AccordionState\n    subView: SubViews\n}\n\nexport interface ViewOrganizationProps {\n    viewModel: ViewOrgViewModel\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            },\n            accordionState: AccordionState.UP,\n            subView: SubViews.NORMAL\n        }\n    }\n\n    onManageRelatedOrgs() {\n        this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n    }\n\n    onInviteUser() {\n        this.setState({ subView: SubViews.INVITE_USER })\n    }\n\n    onChangeSubView(subView: SubViews) {\n        this.setState({ subView })\n    }\n\n    onViewMembers() {\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onRequestAddNarrative() {\n        this.setState({ subView: SubViews.ADD_NARRATIVE })\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        this.props.onRemoveNarrative(narrative)\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.props.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    Organization help here...\n                </div>\n            )\n        })\n    }\n\n    onRequestShare(narrative: orgModel.NarrativeResource) {\n        // Drawer.\n        // Drawer.open({\n        //     title: 'Request Access to Narrative',\n        //     content: 'Are you sure?'\n        // })\n        this.setState({ requestAccess: { narrative: narrative } })\n        // alert('not yet implemented')\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: { narrative: null } })\n    }\n\n    buildFooter() {\n        return (\n            <div>\n                {this.renderEditRow()}\n                {/* <p style={{ textAlign: 'center' }}>\n                    You may also  <NavLink to={`/organizations`}><Button type=\"danger\" icon=\"undo\">Return to Orgs</Button></NavLink> to the organizations browser.\n                </p> */}\n            </div>\n        )\n    }\n\n    renderEditRow() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <p style={{ textAlign: 'center' }}>\n                    As the owner of this group, you may <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink> it.\n                </p>\n            )\n        }\n    }\n\n    renderEditButton() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit This Organization</Button></NavLink>\n            )\n        }\n    }\n\n    renderOrg() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <div className=\"ViewOrganization-org-description-org scrollable-flex-column\">\n                <div className=\"ViewOrganization-org-description\"\n                    dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.viewModel.organization.description || '') })}\n                />\n            </div>\n        )\n    }\n\n    // TODO: this should be a component, so we can pick up all the good stuff, which is now commented out...\n    renderOwnerInfo(org: orgModel.Organization) {\n        return (\n            <div className=\"ownerTable\">\n                <div className=\"proprietorCol\">\n\n                    <div className=\"owner\">\n                        <a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                        {' '}\n                        ❨{org.owner.username}❩\n                                </div>\n                    {/* <div className=\"profileOrganization\">\n                        {org.owner.user.organization}\n                    </div>\n                    <div className=\"profileOrganization\">\n                        {org.owner.user.city}, {org.owner.user.state}, {org.owner.user.country}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderRelation(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <div><Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'orange' }} spin={true} />Your membership <b>request</b> is pending</div>\n                        <div><Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button></div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                            <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" />Member</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"unlock\" theme=\"filled\" style={{ marginRight: '4px' }} />You own this organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    isMember(): boolean {\n        if (!this.props.viewModel.organization) {\n            return false\n        }\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    renderMembers() {\n        if (!this.isMember()) {\n            return (\n                <Alert message=\"Membership is only available to members\" type=\"info\" />\n            )\n        }\n        return (\n            <Members\n                organization={this.props.viewModel.organization}\n                relation={this.props.viewModel.relation}\n                onReloadOrg={this.props.onReloadOrg} />\n        )\n\n    }\n\n    renderGroupRequestsRow() {\n        const relation = this.props.viewModel.relation\n        const requests = this.props.viewModel.groupRequests\n        const invitations = this.props.viewModel.groupInvitations\n\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: bad. should not get here in this case...\n        if (requests === null || invitations === null) {\n            return\n        }\n        let inner\n        if (requests.length) {\n            inner = (\n                <div>\n                    group has no pending requests\n                </div>\n            )\n        } else {\n            inner = (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending request{invitations.length > 1 ? 's' : ''}\n\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"col1\">\n                    <span className=\"label\">admin</span>\n                </div>\n                <div className=\"col2\">\n                    <div className=\"relation\">\n                        {inner}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderGroupRequests(requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>) {\n        if (!requests.length) {\n            return (\n                <div className=\"message\">\n                    No pending group requests\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> There\n                        {' '}\n                        {requests.length > 1 ? 'are' : 'is'}\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending invitation{invitations.length > 1 ? 's' : ''}\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization!.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderUserRelationship() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        return (\n            <form className=\"infoTable\">\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <span className=\"label\">your relation</span>\n                    </div>\n                    <div className=\"col2\">\n                        <div className='relation'>\n                            {this.renderRelation(this.props.organization)}\n                        </div>\n                    </div>\n                </div> */}\n                {this.renderGroupRequestsRow()}\n            </form>\n        )\n    }\n\n    renderAdminTasks() {\n        const relation = this.props.viewModel.relation\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: ditto -- silly to test both conditions (this is only to make TS happy btw)\n        const { groupRequests, groupInvitations } = this.props.viewModel\n        if (groupInvitations === null || groupRequests === null) {\n            return\n        }\n        const count = groupRequests.length + groupInvitations.length\n        const title = (\n            <span><Icon type=\"unlock\" />\n                {' '}\n                group requests\n                {' '}\n                <span className=\"ViewOrganization-titleCount\">({count})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-adminTasksBox\">\n                <Card\n                    className=\"slimCard ViewOrganization-adminTasksCard\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={title} >\n                    {this.renderGroupRequests(groupRequests, groupInvitations)}\n                </Card>\n            </div>\n        )\n    }\n\n    renderJoinButton() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        if (this.props.viewModel.relation.type !== orgModel.UserRelationToOrganization.VIEW) {\n            return\n        }\n        return (\n            <Button\n                onClick={this.onJoinClick.bind(this)}\n            >\n                Join this Organization\n                </Button>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderMembersTab() {\n        return (\n            <div className=\"ViewOrganization-membersCol scrollable-flex-column\">\n                {this.renderMembersToolbar()}\n                {this.renderMembers()}\n            </div>\n        )\n    }\n\n    onAcceptRequest(request: requestModel.Request) {\n        this.props.onAcceptRequest(request.id)\n    }\n\n\n    renderMembersToolbar() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite one or more users to this organization\">\n                            <Button\n                                size=\"small\"\n                                style={{ width: '100%' }}\n                                onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" />Invite Users</Button>\n                        </Tooltip>\n                    </div>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite one or more users to this organization\">\n                            <Button\n                                size=\"small\"\n                                style={{ width: '100%' }}\n                                onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" />Invite Users</Button>\n                        </Tooltip>\n                    </div>\n                )\n        }\n    }\n\n    renderToolbarButtons() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <React.Fragment>\n                        <Tooltip placement=\"bottomRight\"\n                            title=\"Invite a user to this organization\">\n                            <Button size=\"small\" onClick={this.onInviteUser.bind(this)}><Icon type=\"mail\" /></Button>\n                        </Tooltip>\n                    </React.Fragment>\n                )\n        }\n    }\n\n    renderCombo() {\n        const isAdmin = (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER)\n\n        const isMember = this.props.viewModel.organization.isMember\n\n        // if (!isMember) {\n        //     return (\n        //         <p style={{ fontStyle: 'italic' }}>\n        //             The membership list is only available to members.\n        //         </p>\n        //     )\n        // }\n\n        const tabs = []\n\n        let memberCount\n        if (this.props.viewModel.organization.memberCount - 1) {\n            memberCount = String(this.props.viewModel.organization.memberCount - 1)\n        } else {\n            memberCount = 'Ø'\n        }\n        tabs.push((\n            <Tabs.TabPane\n                tab={<span><Icon type=\"team\" />Members <span className=\"ViewOrganization-tabCount\">({memberCount})</span></span>}\n                key=\"members\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderMembersTab()}\n            </Tabs.TabPane>\n        ))\n\n        if (isMember) {\n            if (isAdmin) {\n                const totalRequestCount = this.props.viewModel.requestInbox.length + this.props.viewModel.requestOutbox.length\n                const totalRequests = (\n                    <span className=\"ViewOrganization-tabCount\">\n                        ({totalRequestCount || 'Ø'})\n                    </span>\n                )\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests {totalRequests} </span>} key=\"inbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={this.props.viewModel.requestInbox} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            } else {\n                const outboxSize = this.props.viewModel.requestOutbox.length\n                let titleCount\n                if (outboxSize) {\n                    titleCount = String(outboxSize)\n                } else {\n                    titleCount = 'Ø'\n                }\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests <span className=\"ViewOrganization-tabCount\">({titleCount})</span></span>} key=\"outbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={[]} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            }\n        }\n\n        const relatedOrgCount = this.props.viewModel.organization.relatedOrganizations.length\n        const relatedOrgTab = (\n            <span>\n                <Icon type=\"team\" />\n                Related Orgs <span className=\"ViewOrganization-tabCount\">({relatedOrgCount})</span>\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane tab={relatedOrgTab} key=\"relatedorgs\" style={{ flexDirection: 'column' }}>\n                <RelatedOrganizations\n                    relatedOrganizations={this.props.viewModel.organization.relatedOrganizations}\n                    organization={this.props.viewModel.organization}\n                    onManageRelatedOrgs={() => { this.onManageRelatedOrgs() }} />\n            </Tabs.TabPane>\n        ))\n\n        return (\n            <Tabs\n                defaultActiveKey=\"members\"\n                className=\"ViewOrganization-tabs\"\n                animated={false}\n                size=\"small\"\n                tabPosition=\"top\"\n            >\n                {tabs}\n            </Tabs>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <div className=\"IconButton\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />\n                    </div>\n                    {/* <Button type=\"default\" onClick={this.onNavigateToBrowser.bind(this)} >\n                        <Icon type=\"close\" />{' '}Back\n                    </Button> */}\n                </span>\n            </span>\n        )\n    }\n\n    onNavigateToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ subView: SubViews.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ subView: SubViews.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ subView: SubViews.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n            case 'addNarrative':\n                this.setState({ subView: SubViews.ADD_NARRATIVE })\n                break\n            case 'manageRelatedOrgs':\n                this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n                break\n        }\n    }\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // return (\n                //     <span><Icon type=\"stop\" />None</span>\n                // )\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <span>\n                        <Tooltip\n                            placement=\"bottom\"\n                            mouseEnterDelay={0.5}\n                            title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                        >\n                            <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                        </Tooltip>\n                    </span>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={menu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={adminMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={ownerMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n        }\n    }\n\n\n    toggleAccordion() {\n        this.setState({\n            accordionState: this.state.accordionState === AccordionState.UP ? AccordionState.DOWN : AccordionState.UP\n        })\n    }\n\n    renderAccordionControl() {\n        let iconType\n        if (this.state.accordionState === AccordionState.UP) {\n            iconType = 'caret-down'\n        } else {\n            iconType = 'caret-up'\n        }\n        return (\n            <div className=\"ViewOrganization-accordion\" onClick={this.toggleAccordion.bind(this)}>\n                <div className=\"ViewOrganization-accordionCol1\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-accordionCol2\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                        <Icon type={iconType} />\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                    {/* <div className=\"ViewOrganization-accordionIcon\">\n                        <Icon type={iconType} />\n                    </div> */}\n                </div>\n                <div className=\"ViewOrganization-accordionCol3\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n\n    renderNormalView() {\n        let orgRowClass\n        let narrativesRowClass\n        if (this.state.accordionState === AccordionState.UP) {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionClosed\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionOpen\"\n        } else {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionOpen\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionClosed\"\n        }\n        orgRowClass += \" scrollable-flex-column\"\n        narrativesRowClass += \" scrollable-flex-column\"\n        return (\n            <div className=\"ViewOrganization-mainRow scrollable-flex-column\">\n                <div className=\"ViewOrganization-mainColumn  scrollable-flex-column\">\n                    <div className={orgRowClass} style={{ minHeight: '0px' }}>\n                        {this.renderOrg()}\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow\">\n                        {this.renderAccordionControl()}\n                    </div>\n                    <div className={narrativesRowClass}>\n                        {/* TODO: move these actions into a redux adapter for narratives \n                    */}\n                        <Narratives\n                            organization={this.props.viewModel.organization}\n                            narratives={this.props.viewModel.narratives}\n                            relation={this.props.viewModel.relation}\n                            sortNarrativesBy={this.props.viewModel.sortNarrativesBy}\n                            searchNarrativesBy={this.props.viewModel.searchNarrativesBy}\n                            onSortNarratives={this.props.onSortNarratives}\n                            onSearchNarratives={this.props.onSearchNarratives}\n                            onRemoveNarrative={this.props.onRemoveNarrative}\n                            onGetViewAccess={this.props.onGetViewAccess}\n                            onRequestAddNarrative={this.onRequestAddNarrative.bind(this)}\n                        />\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-infoColumn\">\n                    {this.renderCombo()}\n                </div>\n            </div>\n        )\n    }\n\n    renderManageRelatedOrgsView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageRelatedOrganizations\n                // organization={this.props.viewModel.organization}\n                // relatedOrganizations={[]}\n                // relation={this.props.viewModel.relation}\n                onFinish={onFinish} />\n        )\n    }\n\n    renderInviteUsersView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <InviteUser onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderManageMembership() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageMembership onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderEditOrganization() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <EditOrganization onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderAddNarrative() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <RequestAddNarrative onFinish={onFinish} organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    getSubView() {\n        switch (this.state.subView) {\n            case SubViews.MANAGE_RELATED_ORGS:\n                return this.renderManageRelatedOrgsView()\n            case SubViews.INVITE_USER:\n                return this.renderInviteUsersView()\n            case SubViews.MANAGE_MEMBERSHIP:\n                return this.renderManageMembership()\n            case SubViews.EDIT_ORGANIZATION:\n                return this.renderEditOrganization()\n            case SubViews.ADD_NARRATIVE:\n                return this.renderAddNarrative()\n            case SubViews.NORMAL:\n            default:\n                return this.renderNormalView()\n        }\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return <Redirect push to={\"/organizations\"} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        const uorg = this.props.viewModel.organization as unknown\n        const borg = uorg as orgModel.BriefOrganization\n\n        // TODO: only doing this here so I don't have to do a redux adapter for the menu today...\n\n        const orgMenu = <OrgMenu\n            viewModel={this.props.viewModel}\n            onJoinOrg={this.props.onJoinOrg}\n            onCancelJoinRequest={this.props.onCancelJoinRequest}\n            onAcceptInvitation={this.props.onAcceptInvitation}\n            onRejectInvitation={this.props.onRejectInvitation}\n            onChangeSubView={this.onChangeSubView.bind(this)}\n        />\n\n\n        return (\n            <div className=\"ViewOrganization  scrollable-flex-column\">\n                <div className=\"ViewOrganization-organizationBox\">\n                    <BriefOrganizationHeader\n                        organization={borg}\n                        openRequestsStatus={this.props.viewModel.openRequest}\n                        orgMenu={orgMenu}\n                        onNavigateToBrowser={this.onNavigateToBrowser.bind(this)}\n                    />\n                </div>\n                {this.getSubView()}\n            </div>\n\n        )\n    }\n}\n\nexport default ViewOrganization","import * as React from 'react'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\nimport { Button, Tooltip, Menu, Icon, Dropdown } from 'antd';\nimport { ViewOrgViewModel, SubViews } from '../../../../types';\nimport './OrgMenu.css'\n\nexport interface OrgMenuProps {\n    viewModel: ViewOrgViewModel\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onChangeSubView: (subView: SubViews) => void\n}\n\nexport interface OrgMenuState {\n\n}\n\nexport default class OrgMenu extends React.Component<OrgMenuProps, OrgMenuState> {\n    constructor(props: OrgMenuProps) {\n        super(props)\n    }\n\n    // Event handlers\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.props.onChangeSubView(SubViews.MANAGE_MEMBERSHIP)\n                break\n            case 'editOrg':\n                this.props.onChangeSubView(SubViews.EDIT_ORGANIZATION)\n                break\n            case 'inviteUser':\n                this.props.onChangeSubView(SubViews.INVITE_USER)\n                break\n            case 'addNarrative':\n                this.props.onChangeSubView(SubViews.ADD_NARRATIVE)\n                break\n            case 'manageRelatedOrgs':\n                this.props.onChangeSubView(SubViews.MANAGE_RELATED_ORGS)\n                break\n        }\n    }\n\n    // Renderers\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onJoinClick.bind(this)}>\n                        Join this Organization\n                        </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottom\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                    >\n                        <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                    </Tooltip>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={menu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={adminMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Associate Narratives\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <Dropdown overlay={ownerMenu} trigger={['click']}>\n                        <Icon type=\"setting\" theme=\"filled\" className=\"IconButton OrgMenu-menuButton\" />\n                    </Dropdown>\n                )\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderOrgMenu()}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind, ViewOrgViewModel } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\nimport * as acceptInboxRequestActions from '../../../../redux/actions/viewOrganization/acceptInboxRequest'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    viewModel: ViewOrgViewModel\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\nfunction mapStateToProps(state: StoreState): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        viewModel\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewOrg: (id: string) => {\n            dispatch(actions.load(id) as any)\n        },\n        onReloadOrg: (id: string) => {\n            dispatch(actions.reload(id) as any)\n        },\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: requestModel.RequestID) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n        onRemoveNarrative: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.removeNarrative(narrative) as any)\n        },\n        onGetViewAccess: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.accessNarrative(narrative) as any)\n        },\n        onAcceptRequest: (requestId: requestModel.RequestID) => {\n            dispatch(acceptInboxRequestActions.acceptRequest(requestId) as any)\n        },\n        onSortNarratives: (sortBy: string) => {\n            dispatch(actions.sortNarratives(sortBy) as any)\n        },\n        onSearchNarratives: (searchBy: string) => {\n            dispatch(actions.searchNarratives(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ViewOrganization) \n\n","import * as React from 'react'\n\nimport './component.css'\n\nimport { Button, Modal, Icon, Alert } from 'antd'\nimport Header from '../../../Header'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n}\n\nexport interface ViewOrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            }\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This organization is <b>private</b>.</p>\n                    <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                    <p>Upon requesting membership, an organization administrator may grant you membership</p>\n                    <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                </div>\n            )\n        })\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    renderMessage() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <React.Fragment>\n                        <p>This organization is <b>private</b> and you are not a member.</p>\n                        <p>Although no information about this organization may be revealed to non-members, you may request membership</p>\n                        <p>Upon requesting membership, the organization administrators will be notified.</p>\n                        <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>Your membership request to this private organization is pending.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>You have been invited to this private organization.</p>\n                    </React.Fragment>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderOrg() {\n        const message = (\n            <span>\n                Private Organization\n            </span>\n        )\n        const description = (\n            <React.Fragment>\n                {this.renderMessage()}\n                <div>\n                    {this.renderJoinButton()}\n                </div>\n            </React.Fragment>\n        )\n        return (\n            <Alert\n                message={message}\n                description={description}\n                type=\"info\"\n                showIcon={true}\n                icon={(<Icon type=\"lock\" />)}\n                style={{ width: '50em', margin: '20px auto' }}\n                className=\"ViewInaccessiblePrivateOrganization-message\" />\n        )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderJoinButton() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        onClick={this.onJoinClick.bind(this)}\n                    >\n                        Join this Organization\n                    </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Button\n                            icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                        {' '}\n                        <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                    </div>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <div style={{ flex: '0 0 auto' }}>\n            </div>\n        )\n        const buttons = (\n            <React.Fragment>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ViewInaccessiblePrivateOrganization  scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrg()}\n            </div>\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.PRIVATE_INACCESSIBLE) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const {\n        organization, relation, requestOutbox\n    } = viewModel\n\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        organization, relation, requestOutbox\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n","import * as React from 'react'\n\nimport AccessibleContainer from './accessible/container'\nimport InaccessibleContainer from './inaccessible/container'\nimport { Spin, Alert } from 'antd';\n\nexport interface Props {\n    organizationId: string\n    view: types.ViewOrgView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n\n    previousOrganizationId: string | null\n\n    constructor(props: Props) {\n        super(props)\n\n        this.previousOrganizationId = null\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Organization...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case types.ComponentLoadingState.SUCCESS:\n            default:\n                if (this.props.view.viewModel === null) {\n                    return this.renderError({\n                        code: 'Null Error',\n                        message: 'The view model is missing, but should be available'\n                    })\n                }\n                if (this.props.view.viewModel.organization.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n                    return (\n                        <InaccessibleContainer />\n                    )\n                }\n                return (\n                    <AccessibleContainer />\n                )\n        }\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.organizationId !== this.props.organizationId) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.view.loadingState === types.ComponentLoadingState.NONE) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\nimport { OrganizationKind } from '../../../data/models/organization/model';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.ViewOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.viewOrgView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './Auth.css'\n\nimport * as types from '../types'\nimport { Button } from 'antd';\n\n\nexport interface AuthState {\n\n}\n\nclass Auth extends React.Component<types.AuthProps, AuthState> {\n\n    tokenRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: types.AuthProps) {\n        super(props)\n\n        this.tokenRef = React.createRef()\n\n        this.props.checkAuth()\n    }\n\n    onLogoutClick() {\n        this.props.onRemoveAuthorization()\n    }\n\n    onLoginClick() {\n        if (this.tokenRef.current === null) {\n            return\n        }\n        const token = this.tokenRef.current.value\n        if (token.length === 0) {\n            return\n        }\n        this.props.onAddAuthorization(token)\n    }\n\n    buildAuthForm() {\n        return (\n            <div className=\"Auth-form\">\n                Token: <input ref={this.tokenRef} style={{ width: '30em' }} />\n                <Button\n                    icon=\"save\"\n                    htmlType=\"submit\"\n                    onClick={this.onLoginClick.bind(this)} >\n                    Assign Token\n                </Button>\n            </div>\n        )\n    }\n\n    buildAuthToolbar() {\n        return (\n            <div className=\"Auth-toolbar\">\n                Logged in as <b><span>{this.props.authorization.authorization.realname}</span> (<span>{this.props.authorization.authorization.username}</span></b>)\n                {' '}\n                <Button icon=\"logout\" onClick={this.onLogoutClick.bind(this)}></Button>\n            </div>\n        )\n    }\n\n    buildAuthDev() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.buildAuthToolbar()}\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized! Enter a user token below</p>\n                        {this.buildAuthForm()}\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Error</p>\n                        {this.props.authorization.message}\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n    }\n\n    buildAuthProd() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized!</p>\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-error scrollable-flex-column\">\n                        <p>Error: ??</p>\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"Auth scrollable-flex-column\">\n                {this.props.hosted ? this.buildAuthProd() : this.buildAuthDev()}\n            </div>\n        )\n\n    }\n}\n\nexport default Auth","\nexport interface RootInfo {\n    version: string,\n    servertime: number\n}\n\ninterface AuthEndpoints {\n    root: string,\n    tokenInfo: string,\n    apiMe: string,\n    me: string,\n    loginStart: string,\n    loginChoice: string,\n    loginCreate: string,\n    loginUsernameSuggest: string,\n    loginPick: string,\n    loginCancel: string,\n    logout: string,\n    linkStart: string,\n    linkCancel: string,\n    linkChoice: string,\n    linkPick: string,\n    linkRemove: string,\n    tokens: string,\n    tokensRevoke: string,\n    tokensRevokeAll: string,\n    userSearch: string,\n    adminUserSearch: string,\n    adminUser: string\n}\n\nconst endpoints: AuthEndpoints = {\n    root: '',\n    tokenInfo: 'api/V2/token',\n    apiMe: 'api/V2/me',\n    me: 'me',\n    loginStart: 'login/start',\n    logout: 'logout',\n    loginChoice: 'login/choice',\n    loginCreate: 'login/create',\n    loginUsernameSuggest: 'login/suggestname',\n    loginPick: 'login/pick',\n    loginCancel: 'login/cancel',\n    linkStart: 'link/start',\n    linkCancel: 'link/cancel',\n    linkChoice: 'link/choice',\n    linkPick: 'link/pick',\n    linkRemove: 'me/unlink',\n    tokens: 'tokens',\n    tokensRevoke: 'tokens/revoke',\n    tokensRevokeAll: 'tokens/revokeall',\n    userSearch: 'api/V2/users/search',\n    adminUserSearch: 'api/V2/admin/search',\n    adminUser: 'api/V2/admin/user'\n}\n\nexport interface TokenInfo {\n    created: number,\n    expires: number,\n    id: string,\n    name: string | null,\n    token: string,\n    type: string,\n    user: string,\n    cachefor: number\n}\n\nexport interface Identity {\n    id: string,\n    provider: string,\n    username: string\n}\n\nexport interface Role {\n    id: string,\n    desc: string\n}\n\nexport interface Account {\n    created: number,\n    customroles: Array<string>,\n    display: string,\n    email: string,\n    idents: Array<Identity>,\n    lastLogin: number,\n    local: boolean,\n    roles: Array<Role>,\n    user: string\n}\nexport class AuthClient {\n    url: string;\n\n    constructor({ url }: { url: string }) {\n        this.url = url\n    }\n\n    makePath(path: Array<string> | string): string {\n        if (typeof path === 'string') {\n            return [this.url].concat([path]).join('/');\n        }\n        return [this.url].concat(path).join('/');\n    }\n\n\n    root(): Promise<RootInfo> {\n        return fetch(this.makePath([endpoints.root]), {\n            headers: {\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                return result as RootInfo\n            })\n    }\n\n    getTokenInfo(token: string): Promise<TokenInfo> {\n        return fetch(this.makePath([endpoints.tokenInfo]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as TokenInfo\n            })\n    }\n\n    getMe(token: string): Promise<Account> {\n        return fetch(this.makePath([endpoints.apiMe]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Account\n            })\n    }\n\n\n    // getInfo() : Promise<GroupsServiceInfo> {\n    //     return fetch(this.url + '/', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json();\n    //         })\n    //         .then((result) => {\n    //             return result as GroupsServiceInfo;\n    //         });\n    // }\n\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport * as Cookies from 'es-cookie'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types';\nimport { AuthClient, TokenInfo, Account } from '../../data/auth';\n\n// Action Definitions\n\nexport interface AuthCheck extends Action {\n    type: ActionFlag.AUTH_CHECK\n}\n\nexport interface AuthCheckStart extends Action {\n    type: ActionFlag.AUTH_CHECK_START\n}\n\nexport interface AuthCheckError extends Action {\n    type: ActionFlag.AUTH_CHECK_ERROR,\n    error: AppError\n}\n\nexport interface AuthAuthorized extends Action {\n    type: ActionFlag.AUTH_AUTHORIZED,\n    token: string\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\nexport interface AuthUnauthorized extends Action {\n    type: ActionFlag.AUTH_UNAUTHORIZED\n}\n\nexport interface AuthRemoveAuthorization extends Action {\n    type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n}\n\nexport interface AuthAddAuthorization extends Action {\n    type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n    token: string\n}\n\n// Action Creators\n\n\nexport function authCheckStart(): AuthCheckStart {\n    return {\n        type: ActionFlag.AUTH_CHECK_START\n    }\n}\n\nexport function authCheckError(error: AppError): AuthCheckError {\n    return {\n        type: ActionFlag.AUTH_CHECK_ERROR,\n        error\n    }\n}\n\nexport function authAuthorized(token: string, username: string, realname: string, roles: Array<string>): AuthAuthorized {\n    return {\n        type: ActionFlag.AUTH_AUTHORIZED,\n        token, username, realname, roles\n    }\n}\n\nexport function authUnauthorized(): AuthUnauthorized {\n    return {\n        type: ActionFlag.AUTH_UNAUTHORIZED\n    }\n}\n\n// export function authRemoveAuthorization(): AuthRemoveAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n//     }\n// }\n\n// export function authAddAuthorization(token: string): AuthAddAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n//         token: token\n//     }\n// }\n\n// Action Thunks\n\nexport function checkAuth() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(authCheckStart())\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // TODO: get the auth from the kbase-ui integration api, perhaps a postmessage call\n\n        const token = Cookies.get('kbase_session')\n        if (!token) {\n            dispatch(authUnauthorized())\n            return\n        }\n\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function authRemoveAuthorization() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // remove cookie\n        Cookies.remove('kbase_session')\n\n        // remove auth in state\n        dispatch(authUnauthorized())\n    }\n}\n\nexport function authAddAuthorization(token: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // add cookie\n        Cookies.set('kbase_session', token)\n\n        // TODO: get auth info\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, AuthState, Authorization } from '../types'\nimport Auth from '../components/Auth'\nimport * as actions from '../redux/actions/auth'\n\nexport interface OwnProps {\n    hosted: boolean\n}\n\ninterface StateProps {\n    authorization: Authorization\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n}\n\ninterface DispatchProps {\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const { auth } = state\n    return {\n        authorization: auth\n        // authStatus: status,\n        // token: authorization.token || null,\n        // username: authorization.username || null,\n        // realname: authorization.realname || null\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        checkAuth: () => {\n            dispatch(actions.checkAuth() as any)\n        },\n        onRemoveAuthorization: () => {\n            dispatch(actions.authRemoveAuthorization() as any)\n        },\n        onAddAuthorization: (token: string) => {\n            dispatch(actions.authAddAuthorization(token) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Auth)","\nimport uuidv4 from 'uuid/v4'\n\ninterface ListenerParams {\n    name: string,\n    onSuccess: (payload: Payload) => void,\n    onError: (error: Error) => void\n}\n\nclass Listener {\n    name: string;\n    onSuccess: (payload: Payload) => void;\n    onError: (error: Error) => void;\n\n    constructor({ name, onSuccess, onError }: ListenerParams) {\n        this.name = name;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n\ntype Payload = any;\n\ninterface WaitingListenerParams extends ListenerParams {\n    timeout?: number\n}\n\nclass WaitingListener extends Listener {\n    started: Date;\n    timeout: number;\n\n    constructor(params: WaitingListenerParams) {\n        super(params);\n        this.started = new Date();\n        this.timeout = params.timeout || 5000;\n    }\n}\n\ninterface Envelope {\n    channelId: string\n    id: string\n}\n\nclass Message {\n    name: string;\n    payload: any;\n    id: string;\n    created: Date;\n    channelId: string\n    envelope: Envelope | null\n\n    constructor({ name, payload, channelId }: { name: string, payload: any, channelId: any }) {\n        this.name = name\n        this.payload = payload\n        this.id = uuidv4()\n        this.created = new Date()\n        this.channelId = channelId\n        this.envelope = null;\n    }\n\n    getMessage() {\n        return {\n            envelope: {\n                id: this.id,\n                created: this.created,\n                channelId: this.channelId\n            },\n            name: this.name,\n            payload: this.payload\n        };\n    }\n}\n\ninterface Handler {\n    started: Date,\n    handler: (response: any) => any\n}\n\ninterface ChannelParams {\n    window?: Window,\n    host?: string,\n    channelId?: string\n}\n\nexport class Channel {\n    window: Window\n    host: string\n    id: string\n    awaitingResponse: Map<string, Handler>\n    waitingListeners: Map<string, Array<Listener>>\n    listeners: Map<string, Array<Listener>>\n    lastId: number\n    sentCount: number\n    receivedCount: number\n    unwelcomeReceivedCount: number\n    unwelcomeReceivedCountThreshhold: number\n    unwelcomeReceiptWarning: boolean\n    unwelcomeReceiptWarningCount: number\n    currentListener: ((message: MessageEvent) => void) | null\n\n    constructor(params: ChannelParams) {\n        // The given window upon which we will listen for messages.\n        this.window = params.window || window\n\n        // The host for the window; required for postmessage\n        if (this.window.document === null) {\n            throw new Error('No document')\n        }\n        if (this.window.document.location === null) {\n            throw new Error('No location')\n        }\n        this.host = params.host || this.window.document.location.origin;\n\n        // The channel id. Used to filter all messages received to\n        // this channel.\n        this.id = params.channelId || uuidv4()\n\n        this.awaitingResponse = new Map<string, Handler>()\n        this.waitingListeners = new Map<string, Array<Listener>>()\n        this.listeners = new Map<string, Array<Listener>>()\n\n        this.lastId = 0\n        this.sentCount = 0\n        this.receivedCount = 0\n\n        this.unwelcomeReceivedCount = 0\n        this.unwelcomeReceivedCountThreshhold = 100\n        this.unwelcomeReceiptWarning = true\n        this.unwelcomeReceiptWarningCount = 0\n        this.currentListener = null\n    }\n\n    genId() {\n        this.lastId += 1;\n        return 'msg_' + String(this.lastId);\n    }\n\n    receiveMessage(messageEvent: MessageEvent) {\n        const message = messageEvent.data as Message;\n        if (!message) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('TS No message data; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!message.envelope) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message envelope, not from KBase; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!(message.envelope.channelId === this.id)) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('Message envelope does not match this channel\\'s id', message.envelope, message.envelope.channelId, this.id);\n            }\n            return;\n        }\n        if (this.unwelcomeReceiptWarningCount > this.unwelcomeReceivedCountThreshhold) {\n            this.unwelcomeReceiptWarning = false;\n            console.warn('Unwelcome message warning disabled after ' + this.unwelcomeReceiptWarningCount + ' instances.');\n        }\n\n        // A message sent as a request will have registered a response handler\n        // in the awaitingResponse hash, using a generated id as the key.\n        // TODO: to to rethink using the message id here. Perhaps somehting like a\n        // chain of ids, the root of which is the origination id, which is the one\n        // known here when it it is sent; the message \"id\" should be assigned whenver\n        // a message is sent, but a response  message would include the original\n        // message in the \"chain\"...\n\n        // We can also have awaiting responses without an originating request.\n        // These are useful for, e.g., a promise which awaits a message to be sent\n        // within some window...\n        if (message.envelope.id && this.awaitingResponse.has(message.envelope.id)) {\n            try {\n                const response = this.awaitingResponse.get(message.envelope.id)\n                this.awaitingResponse.delete(message.envelope.id)\n                if (response) {\n                    response.handler(message.payload)\n                }\n            } catch (ex) {\n                console.error('Error handling response for message ', message, ex);\n            }\n        }\n\n        // and also awaiting by message name. Like a listener, but they are only used\n        // once.\n\n        if (this.waitingListeners.has(message.name)) {\n            const awaiting = this.waitingListeners.get(message.name)!\n            this.waitingListeners.delete(message.name)\n            awaiting.forEach((listener) => {\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n        // Otherwise, permanently registered handlers are found in the listeners for the\n        // message name.\n        if (this.listeners.has(message.name)) {\n            this.listeners.get(message.name)!.forEach((listener) => {\n                if (!listener.onSuccess) {\n                    console.warn('no handler for listener!', listener);\n                }\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n    }\n\n    listen(listener: Listener) {\n        if (!this.listeners.has(listener.name)) {\n            this.listeners.set(listener.name, [])\n        }\n        this.listeners.get(listener.name)!.push(listener)\n    }\n\n    on(messageId: string, success: (payload: any) => any, error: (error: Error) => void) {\n        this.listen(new Listener({\n            name: messageId,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    sendMessage(message: Message) {\n        this.window.postMessage(message.getMessage(), this.host)\n    }\n\n    send(name: string, payload: Payload) {\n        const message = new Message({ name, payload, channelId: this.id });\n        this.sendMessage(message);\n    }\n\n    sendRequest(message: Message, handler: (response: any) => any) {\n        this.awaitingResponse.set('message.id', {\n            started: new Date(),\n            handler: handler\n        })\n\n        this.sendMessage(message);\n    }\n\n    request(name: string, payload: Payload) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.sendRequest(new Message({ name, payload, channelId: this.id }), (response: any) => {\n                    resolve(response);\n                });\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    startMonitor() {\n        window.setTimeout(() => {\n            const now = new Date().getTime();\n\n            // first take care of listeners awaiting a message.\n            for (const [id, listeners] of this.waitingListeners.entries()) {\n                const newListeners = listeners.filter((listener) => {\n                    if (listener instanceof WaitingListener) {\n                        const elapsed = now - listener.started.getTime();\n                        if (elapsed > listener.timeout) {\n                            try {\n                                if (listener.onError) {\n                                    listener.onError(new Error('timout after ' + elapsed));\n                                }\n                            } catch (ex) {\n                                console.error('Error calling error handler', id, ex);\n                            }\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n                if (newListeners.length === 0) {\n                    this.waitingListeners.delete(id)\n                }\n            }\n\n            if (this.waitingListeners.size > 0) {\n                this.startMonitor()\n            }\n        }, 100);\n    }\n\n    listenOnce(listener: WaitingListener) {\n        if (!this.waitingListeners.has(listener.name)) {\n            this.waitingListeners.set(listener.name, [])\n        }\n        this.waitingListeners.get(listener.name)!.push(listener);\n        if (listener.timeout) {\n            this.startMonitor();\n        }\n    }\n\n    once(name: string, success: (payload: Payload) => void, error: (error: Error) => void) {\n        this.listenOnce(new WaitingListener({\n            name: name,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    when(name: string, timeout: number) {\n        return new Promise((resolve, reject) => {\n            return this.listenOnce(new WaitingListener({\n                name: name,\n                timeout: timeout,\n                onSuccess: (payload) => {\n                    resolve(payload);\n                },\n                onError: (error) => {\n                    reject(error);\n                }\n            }));\n        });\n    }\n\n    stats() {\n        return {\n            sent: this.sentCount,\n            received: this.receivedCount\n        };\n    }\n\n    attach(window: Window) {\n        this.window = window;\n    }\n\n    start() {\n        this.currentListener = (message: MessageEvent) => {\n            this.receiveMessage(message);\n        };\n        this.window.addEventListener('message', this.currentListener, false);\n    }\n\n    stop() {\n        if (this.currentListener) {\n            this.window.removeEventListener('message', this.currentListener, false);\n        }\n    }\n}\n","import uuid from 'uuid/v4'\nimport { Channel } from './windowChannel'\nimport { IFrameParams } from '../types'\n\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n/*\n channelId: \"3b33179e-8a6d-4ae9-bc95-af4c0492eaa6\"\nframeId: \"frame_kb_html_be553ee5-645c-4737-80ba-dcb642632f0c\"\nhostId: \"host_kb_html_9a3b5d5d-bb92-43ff-a443-73267aa31323\"\nparams: {}\nparentHost: \"https://ci.kbase.us\"\n\n*/\n\n/*\nIFrameSimulator\nThis little doozey allows us to create a simulated iframe. We can query it for\n the params placed on the iframe, and talk to it via the window channel -- it has \n its own window channel.\n Good thing we designed the channel for multiple channels per window.\n*/\nclass IFrameSimulator {\n    params: IFrameParams | null\n    channel: Channel\n\n    constructor() {\n        this.params = null\n\n        // create a window channel.\n\n        this.channel = new Channel({\n            window: window,\n            host: document.location!.origin\n        })\n\n    }\n\n    getParamsFromIFrame(): IFrameParams {\n        return {\n            channelId: this.channel.id,\n            frameId: uuid(),\n            params: {\n                groupsServiceURL: '/services/groups',\n                userProfileServiceURL: '/services/user_profile/rpc',\n                workspaceServiceURL: '/services/ws',\n                serviceWizardURL: '/services/service_wizard',\n                authServiceURL: '/services/auth',\n                originalPath: '',\n                view: null,\n                viewParams: null\n                // view: 'org',\n                // viewParams: {\n                //     id: 'test'\n                // }\n            },\n            parentHost: document.location!.origin\n        }\n    }\n}\n\n\n\nexport default IFrameSimulator","import { IFrameParams } from '../types'\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n\nexport class IFrameIntegration {\n    getParamsFromIFrame() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-params')) {\n            // throw new Error('No params found in window!!');\n            return null\n        }\n        const params = window.frameElement.getAttribute('data-params');\n        if (params === null) {\n            // throw new Error('No params found in window!')\n            return null\n        }\n        const iframeParams = JSON.parse(decodeURIComponent(params)) as IFrameParams\n        return iframeParams\n    }\n    getChannelID() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-channel')) {\n            return null\n        }\n        return window.frameElement.getAttribute('data-channel')\n    }\n    getIframeElement() {\n        return window.frameElement || null\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as types from '../../types'\nimport IFrameSimulator from '../../lib/IFrameSimulator';\nimport { IFrameIntegration } from '../../lib/IFrameIntegration';\n\nimport { } from 'react-router-dom';\n\n// Action Definitions\n\n// export interface AppStart extends Action {\n//     type: ActionFlag.APP_START,\n\n// }\n\nexport interface AppSuccess extends Action {\n    type: ActionFlag.APP_SUCCESS,\n    config: types.AppConfig\n}\n\nexport interface AppError extends Action {\n    type: ActionFlag.APP_ERROR,\n    error: AppError\n}\n\n// Action Creators\n\nexport function appSuccess(config: types.AppConfig): AppSuccess {\n    return {\n        type: ActionFlag.APP_SUCCESS,\n        config: config\n    }\n}\n\nexport function appError(error: AppError): AppError {\n    return {\n        type: ActionFlag.APP_ERROR,\n        error: error\n    }\n}\n\nexport function appStart() {\n    return (dispatch: ThunkDispatch<types.StoreState, void, Action>, getState: () => types.StoreState) => {\n        // check and see if we are in an iframe\n        let integration = new IFrameIntegration();\n        let iframeParams = integration.getParamsFromIFrame();\n\n\n        if (iframeParams) {\n            let defaultPath\n\n            // set up the message bus.\n            let channelId = iframeParams.channelId;\n\n            // route from paths passed in from kbase-ui\n            switch (iframeParams.params.view) {\n                case 'org':\n                    defaultPath = '/viewOrganization/' + iframeParams.params.viewParams.id\n                    window.history.pushState(null, 'test', defaultPath)\n                    break\n                default:\n                    defaultPath = '/organizations'\n                    window.history.pushState(null, 'organizations', '/organizations')\n                    break\n            }\n\n            // suck up all the params into our state.\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath,\n                channelId\n            }))\n\n        } else {\n            iframeParams = new IFrameSimulator().getParamsFromIFrame()\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath: '/organizations',\n                channelId: null\n            }))\n        }\n    }\n}\n","import * as React from 'react'\nimport './KBaseIntegration.css'\n\nimport { AppState } from '../types'\nimport { Channel } from '../lib/windowChannel';\nimport { IFrameIntegration } from '../lib/IFrameIntegration';\n\nexport interface KBaseIntegrationProps {\n    status: AppState\n    channelId: string | null\n    onAppStart: () => void\n}\nclass KBaseIntegration extends React.Component<KBaseIntegrationProps, object> {\n\n    channel: Channel | null\n\n    constructor(props: KBaseIntegrationProps) {\n        super(props)\n\n        // const params = this.getParamsFromIFrame()\n\n        // this.props.onAppStart()\n\n        this.channel = null\n    }\n\n    setupChannel() {\n        if (this.props.channelId) {\n\n            this.channel = new Channel({\n                channelId: this.props.channelId,\n            })\n\n            this.channel.on('navigate', ({ to, params }) => {\n\n            }, (err) => {\n                console.error('Error processing \"navigate\" message')\n            })\n\n            this.channel.start()\n\n            this.channel.send('ready', {\n                channelId: this.props.channelId,\n                greeting: 'heloooo'\n            })\n        }\n    }\n\n    teardownChannel() {\n\n    }\n\n    componentDidMount() {\n        this.props.onAppStart()\n    }\n\n    componentDidUpdate() {\n        this.setupChannel()\n    }\n\n    componentWillUnmount() {\n        this.teardownChannel()\n    }\n\n    render() {\n        if (this.props.status === AppState.NONE) {\n            return (\n                <div className=\"KBaseIntegration\">\n                    Loading...\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"KBaseIntegration scrollable-flex-column\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default KBaseIntegration","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../types'\nimport * as actions from '../redux/actions/app'\n\nimport KBaseIntegration from '../components/KBaseIntegration'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    status: types.AppState\n    defaultPath: string\n    channelId: string | null\n}\n\ninterface DispatchProps {\n    onAppStart: () => void\n}\n\nexport function mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const { app: { status, config: { defaultPath, channelId } } } = state\n    return {\n        status, defaultPath, channelId\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAppStart: () => {\n            dispatch(actions.appStart() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(KBaseIntegration)","import {\n    StoreState, AuthState, AppState,\n    ComponentLoadingState\n} from \"../types\"\n\nimport * as orgModel from '../data/models/organization/model'\n\nexport class StateInstances {\n    static makeInitialState(): StoreState {\n        return {\n            entities: {\n                users: {\n                    byId: new Map(),\n                    all: []\n                },\n                orgs: {\n                    byId: new Map(),\n                    all: []\n                },\n                requests: {\n                    byId: new Map(),\n                    all: []\n                },\n                narratives: {\n                    byId: new Map()\n                },\n                organizations: {\n                    byId: new Map()\n                }\n            },\n            db: {\n            },\n            views: {\n                browseOrgsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                addOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                editOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                manageOrganizationRequestsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewMembersView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                // inviteUserView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                // manageMembershipView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                // requestNarrativeView: {\n                //     loadingState: ComponentLoadingState.NONE,\n                //     error: null,\n                //     viewModel: null\n                // },\n                viewOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                }\n            },\n            auth: {\n                status: AuthState.NONE,\n                message: '',\n                authorization: {\n                    token: '',\n                    username: '',\n                    realname: '',\n                    roles: []\n                }\n            },\n            error: null,\n            app: {\n                status: AppState.NONE,\n                config: {\n                    baseUrl: '',\n                    services: {\n                        Groups: {\n                            url: ''\n                        },\n                        UserProfile: {\n                            url: ''\n                        },\n                        Workspace: {\n                            url: ''\n                        },\n                        ServiceWizard: {\n                            url: ''\n                        },\n                        Auth: {\n                            url: ''\n                        }\n                    },\n                    defaultPath: '',\n                    channelId: null\n                }\n            },\n\n            updateOrg: {\n                pending: false\n            },\n\n\n        }\n    }\n}","import * as React from 'react'\n\nexport interface Props {\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface State {\n\n}\n\nexport default class DataServices extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    componentWillMount() {\n        this.props.onLoad()\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/dataServices'\nimport Component from './component'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nexport interface AppContext {\n    test: string\n}\n\nconst context = React.createContext<AppContext | null>(null)\n\nexport const AppContextProvider = context.Provider\nexport const AppContextConsumer = context.Consumer","import React, { Component, FunctionComponent } from 'react'\nimport { Route, Switch, Redirect } from 'react-router'\nimport { BrowserRouter, RouteProps, RouteComponentProps } from 'react-router-dom'\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport theReducer from './redux/reducers'\n\n// the app and subcomponents\nimport './App.css';\n\n// fontawesome setup\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSearch, faGlobe, faUserLock } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSpinner, faSearch, faGlobe, faUserLock)\n\nimport OrganizationsBrowser from './components/views/browseOrgs/loader'\nimport NewOrganization from './components/views/newOrganization/loader'\nimport ViewOrganization from './components/views/viewOrganization/loader'\nimport Auth from './containers/Auth'\nimport KBaseIntegration from './containers/KBaseIntegration'\nimport { StateInstances } from './redux/state';\nimport DataServices from './components/dataServices/storeAdapter'\nimport { AppContextProvider } from './AppContext'\nimport { Marked, Renderer, MarkedOptions } from 'marked-ts'\n\nclass DescriptionRenderer extends Renderer {\n  constructor(options?: MarkedOptions) {\n    super(options)\n  }\n  link(href: string, title: string, text: string) {\n    if (this.options.sanitize) {\n      let prot: string;\n\n      try {\n        prot = decodeURIComponent(this.options.unescape!(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      }\n      catch (e) {\n        return text\n      }\n\n      if\n        (\n        prot.indexOf('javascript:') === 0\n        || prot.indexOf('vbscript:') === 0\n        || prot.indexOf('data:') === 0\n      ) {\n        return text\n      }\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += ' target=\"_blank\">' + text + '</a>';\n\n    return out;\n  }\n}\n\nlet options = new MarkedOptions()\noptions.renderer = new DescriptionRenderer()\nMarked.setOptions({ renderer: new DescriptionRenderer() })\n\n// Put the redux store together\n// Just for prototyping --- This is super naive and will change!\n// import {organizations} from './data/temp';\n\n// TODO: determine the environment\n\nconst hosted = window.frameElement ? true : false\n\n// Set up initial state \n// TODO: move to own file\nconst initialState = StateInstances.makeInitialState()\n\n// TODO: remove the cast of reducer to any...\n// const middleware = [thunk]\n// const store = createStore<StoreState, SortOrgs, null, null>(theReducer as any, initialState, applyMiddleware(thunk));\nconst store = createStore(theReducer as any, initialState as any, compose(applyMiddleware(thunk)))\n\n// export interface WrappedComponent extends React.Component<NewOrganization {\n\n// }\n\n// const Wrapped: FunctionComponent<NewOrganization> = ({component: Component, ...rest}: {component: any}) => {\n//   return (<Route {...rest} render={(props) => {\n//       <Component {...props} />\n//     }} />\n//   )\n// }\n\n\n\ninterface ViewOrgMatchProps {\n  id: string\n}\ntype WrappedProps = RouteComponentProps<ViewOrgMatchProps>\nconst F: React.SFC<WrappedProps> = (props: WrappedProps) => {\n  return (\n    <ViewOrganization organizationId={props.match.params.id} />\n  )\n}\n\n// class F2 extends React.Component<WrappedProps> {\n//   constructor(params: WrappedProps) {\n//     super(params)\n//   }\n//   render() {\n//     return (\n//       <ViewOrganization organizationId={this.props.match.params.id} />\n//     )\n//   }\n// }\n\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n\n\n  render() {\n    return (\n      <AppContextProvider value={{ test: 'ok' }}>\n        <Provider store={store}>\n          <KBaseIntegration>\n            <Auth hosted={hosted}>\n              <DataServices>\n                <BrowserRouter basename=\"/\" >\n                  <div className=\"App scrollable-flex-column\">\n                    <div className=\"App-body scrollable-flex-column\">\n                      {/* <MainMenu /> */}\n                      <Switch>\n                        <Route path=\"/organizations\" component={OrganizationsBrowser} />\n                        <Route path=\"/newOrganization\" component={NewOrganization} />\n                        <Route path=\"/viewOrganization/:id\" exact={true} component={F} />\n                        {/* <Route path=\"/viewOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewOrganization organizationId={id} />} /> */}\n                        <Redirect from=\"/\" to=\"/organizations\" exact={true} />\n                      </Switch>\n                    </div>\n                  </div>\n                </BrowserRouter>\n              </DataServices>\n            </Auth>\n          </KBaseIntegration>\n        </Provider>\n      </AppContextProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport 'typeface-oxygen';\nimport 'normalize.css';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}