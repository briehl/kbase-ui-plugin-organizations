{"version":3,"sources":["components/entities/nouserpic.png","types/index.tsx","redux/actions/index.ts","redux/reducers/addOrg.ts","redux/reducers/editOrg.ts","redux/reducers/viewOrganization/acceptInboxRequest.ts","redux/reducers/viewOrganization/viewMembers.ts","redux/reducers/viewOrganization/denyInboxRequest.ts","redux/reducers/viewOrganization/cancelOutboxRequests.ts","redux/reducers/viewOrganization/manageRelatedOrganizations.ts","redux/reducers/viewOrganization/relatedOrganizations.ts","redux/reducers/viewOrg.ts","redux/reducers/browseOrgs.ts","redux/reducers/auth.ts","redux/reducers/app.ts","redux/reducers/manageOrganizationRequests.ts","redux/reducers/viewMembers.ts","data/apis/groups.ts","data/models/requests.ts","data/models/organization/model.ts","data/models/organization/validation.ts","redux/reducers/inviteUser.ts","redux/reducers/manageMembership.ts","redux/reducers/requestAddNarrative.ts","redux/reducers/entities/organization.ts","redux/reducers/entities.ts","redux/reducers/organizationCentric.ts","redux/reducers/global.ts","redux/reducers/notifications.ts","redux/reducers/dataServices.ts","redux/reducers/index.tsx","components/entities/Owner.tsx","components/OrgLogo.tsx","components/entities/Avatar.tsx","data/apis/serviceClient.ts","data/apis/userProfile.ts","data/models/user.ts","data/apis/genericClient.ts","data/apis/serviceWizard.ts","data/apis/dynamicServiceClient.ts","data/apis/narrativeService.ts","data/models/narrative.ts","data/apis/workspaceUtils.ts","redux/actions/entities.ts","components/entities/OwnerContainer.tsx","lib/time.ts","components/NiceElapsedTime.tsx","components/views/organizationHeader/BriefOrganization.tsx","components/views/browseOrgs/organizations/component.tsx","components/views/browseOrgs/organizations/container.tsx","components/Header.tsx","components/menu/component.tsx","components/views/browseOrgs/component.tsx","redux/actions/browseOrgs.ts","components/views/browseOrgs/container.tsx","components/views/browseOrgs/loader.tsx","redux/actions/addOrg.ts","components/views/newOrganization/component.tsx","components/views/newOrganization/container.tsx","components/views/newOrganization/loader.tsx","data/models/uber.ts","redux/actions/dataServices.ts","redux/actions/viewOrg.ts","redux/actions/viewOrganization/acceptInboxRequest.ts","data/apis/feeds.ts","data/models/feeds.ts","components/entities/Member.tsx","components/entities/MemberContainer.tsx","components/views/organizationHeader/component.tsx","components/views/organizationHeader/container.tsx","redux/actions/organizationCentric.ts","components/views/organizationHeader/loader.tsx","components/entities/UserSimple.tsx","components/entities/UserSimpleContainer.tsx","components/entities/narrative/component.tsx","components/entities/narrative/reduxAdapter.tsx","components/OrganizationNarrative.tsx","lib/error.ts","redux/actions/viewOrganization/viewMembers.ts","components/views/viewOrganization/accessible/members/component.tsx","components/views/viewOrganization/accessible/members/reduxAdapter.tsx","redux/actions/viewOrganization/denyInboxRequest.ts","redux/actions/viewOrganization/cancelOutboxRequest.ts","components/entities/User.tsx","components/entities/UserContainer.tsx","components/entities/Narrative.tsx","components/entities/NarrativeContainer.tsx","components/views/viewOrganization/accessible/requests/InboxRequest.tsx","components/views/viewOrganization/accessible/requests/InboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/OutboxRequest.tsx","components/views/viewOrganization/accessible/requests/OutboxRequestContainer.tsx","components/views/viewOrganization/accessible/requests/component.tsx","components/views/viewOrganization/accessible/requests/container.tsx","combo/error/api.ts","components/entities/organization/component.tsx","components/entities/organization/Inaccessible.tsx","components/entities/organization/loader.tsx","redux/actions/entities/organization.ts","components/views/viewOrganization/accessible/relatedOrgs/component.tsx","components/views/viewOrganization/accessible/relatedOrgs/reduxAdapter.tsx","redux/actions/viewOrganization/relatedOrganizations.ts","components/views/viewOrganization/accessible/manageRelatedOrganizations/AvailableOrganization.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/component.tsx","components/views/viewOrganization/accessible/manageRelatedOrganizations/reduxAdapter.tsx","redux/actions/viewOrganization/manageRelatedOrganizations.ts","components/views/viewOrganization/accessible/manageRelatedOrganizations/loader.tsx","components/views/viewOrganization/accessible/component.tsx","components/views/viewOrganization/accessible/container.tsx","components/views/viewOrganization/inaccessible/component.tsx","redux/actions/notifications.ts","components/views/viewOrganization/inaccessible/container.tsx","components/views/viewOrganization/loader.tsx","redux/actions/editOrg.ts","components/views/editOrganization/component.tsx","components/views/editOrganization/container.tsx","components/views/editOrganization/loader.tsx","components/Auth.tsx","data/auth.ts","redux/actions/auth.ts","containers/Auth.tsx","lib/windowChannel.ts","lib/IFrameSimulator.ts","lib/IFrameIntegration.ts","redux/actions/app.ts","components/KBaseIntegration.tsx","containers/KBaseIntegration.tsx","redux/actions/inviteUser.ts","components/User.tsx","components/views/inviteUser/component.tsx","components/views/inviteUser/container.tsx","components/views/inviteUser/loader.tsx","redux/actions/manageMembership.ts","components/views/manageMembership/component.tsx","components/views/manageMembership/container.tsx","combo/error/component.tsx","components/views/manageMembership/loader.tsx","components/views/requestAddNarrative/component.tsx","redux/actions/requestAddNarrative.ts","components/views/requestAddNarrative/container.tsx","components/views/requestAddNarrative/loader.tsx","redux/state.tsx","components/dataServices/component.tsx","components/dataServices/storeAdapter.tsx","AppContext.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","ComponentView","UIErrorType","SyncState","EditState","ValidationErrorType","SaveState","MemberType","RequestType","RequestResourceType","RequestStatus","AuthState","ViewOrgState","AppState","SortDirection","ComponentLoadingState","BrowseOrgsState","InviteUserViewState","NarrativeState","ProcessingState","RequestNarrativeState","ViewOrgViewModelKind","ViewOrgSubViewKind","ViewState","ErrorCode","ActionFlag","AppException","_Error","_ref","_this","code","message","detail","info","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","trace","errors","name","Error","captureStackTrace","assertThisInitialized","stack","indexOf","split","inherits","wrapNativeSuper","reducer","state","action","type","ADD_ORG_SAVE","views","addOrgView","viewModel","objectSpread","saveState","SAVING","console","warn","saveStart","ADD_ORG_SAVE_SUCCESS","editState","UNEDITED","SAVED","saveSuccess","ADD_ORG_SAVE_ERROR","SAVE_ERROR","error","saveError","ADD_ORG_LOAD_START","loadingState","LOADING","loadStart","ADD_ORG_LOAD_SUCCESS","SUCCESS","validationState","OK","validatedAt","Date","NEW","newOrganization","loadSuccess","ADD_ORG_LOAD_ERROR","loadError","ADD_ORG_UNLOAD","NONE","unload","ADD_ORG_UPDATE_NAME_SUCCESS","EDITED","value","syncState","DIRTY","updateNameSuccess","ADD_ORG_UPDATE_NAME_ERROR","updateNameError","ADD_ORG_UPDATE_LOGO_URL_SUCCESS","logoUrl","updateLogoUrlSuccess","ADD_ORG_UPDATE_LOGO_URL_ERROR","updateLogoUrlError","ADD_ORG_UPDATE_HOME_URL_SUCCESS","homeUrl","updateHomeUrlSuccess","ADD_ORG_UPDATE_HOME_URL_ERROR","updateHomeUrlError","ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","researchInterests","updateResearchInterestsSuccess","ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","updateResearchInterestsError","ADD_ORG_UPDATE_ID_SUCCESS","id","updateIdSuccess","ADD_ORG_UPDATE_ID_ERROR","updateIdError","ADD_ORG_UPDATE_ID_PASS","updateIdPass","ADD_ORG_UPDATE_DESCRIPTION_SUCCESS","description","updateDescriptionSuccess","ADD_ORG_UPDATE_DESCRIPTION_ERROR","updateDescriptionError","ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS","isPrivate","updateIsPrivateSuccess","ADD_ORG_EVALUATE_OK","addOrgEvaluateOk","ADD_ORG_EVALUATE_ERRORS","ERROR","addOrgEvaluateErrors","validationStateOk","evaluateEditorState","editedOrganization","EDIT_ORG_LOAD_START","editOrgView","EDIT_ORG_LOAD_SUCCESS","organization","EDIT_ORG_LOAD_ERROR","EDIT_ORG_UNLOAD","EDIT_ORG_SAVE_START","editOrgSaveStart","EDIT_ORG_SAVE_SUCCESS","CLEAN","editOrgSaveSuccess","EDIT_ORG_SAVE_ERROR","editOrgSaveError","EDIT_ORG_UPDATE_NAME_SUCCESS","editedOrg","remoteValue","newState","editOrgUpdateNameSuccess","EDIT_ORG_UPDATE_NAME_ERROR","editOrgUpdateNameError","EDIT_ORG_UPDATE_LOGO_URL_SUCCESS","editOrgUpdateLogoUrlSuccess","EDIT_ORG_UPDATE_LOGO_URL_ERROR","editOrgUpdateLogoUrlError","EDIT_ORG_UPDATE_HOME_URL_SUCCESS","editOrgUpdateHomeUrlSuccess","EDIT_ORG_UPDATE_HOME_URL_ERROR","editOrgUpdateHomeUrlError","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS","EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR","EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS","EDIT_ORG_UPDATE_DESCRIPTION_ERROR","editOrgUpdateDescriptionError","EDIT_ORG_EVALUATE_OK","editOrgEvaluateOk","EDIT_ORG_EVALUATE_ERRORS","editOrgEvaluateErrors","VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS","viewOrgView","kind","NORMAL","requestInbox","requests","acceptInboxRequestSuccess","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","members","map","member","username","memberUsername","ADMIN","promoteToAdminSuccess","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","MEMBER","demoteToMemberSuccess","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS","filter","sortedMembers","log","removeMemberSuccess","VIEW_ORG_SORT_MEMBERS_SUCCESS","sortMembersBy","sortBy","sortMembersSuccess","VIEW_ORG_SEARCH_MEMBERS_SUCCESS","searchMembersBy","searchBy","searchMembersSuccess","VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS","rejectInboxRequestSuccess","VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS","requestOutbox","cancelRequestSuccess","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS","subViews","manageRelatedOrganizationsView","MANAGE_RELATED_ORGS","relatedOrganizations","organizations","selectedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION","relatedOrg","isSelected","selectOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS","orgs","newRelatedOrgs","concat","organizationId","includes","isRelated","addOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","relatedOrgs","removeOrganization","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS","VIEW_ORG_LOAD_START","types","VIEW_ORG_LOAD_NORMAL_SUCCESS","relation","openRequest","groupRequests","groupInvitations","sortNarrativesBy","narrativesSortBy","searchNarrativesBy","narratives","loadNormalSuccess","VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS","PRIVATE_INACCESSIBLE","loadInaccessiblePrivateSuccess","VIEW_ORG_LOAD_ERROR","VIEW_ORG_UNLOAD","VIEW_ORG_REMOVE_NARRATIVE_SUCCESS","newNarratives","narrative","workspaceId","removeNarrativeSuccess","VIEW_ORG_ACCESS_NARRATIVE_SUCCESS","accessNarrativeSuccess","VIEW_ORG_SORT_NARRATIVES_SUCCESS","sortNarrativesSuccess","VIEW_ORG_SEARCH_NARRATIVES_SUCCESS","searchNarrativesSuccess","acceptInboxRequest","denyInboxRequest","cancelOutboxRequest","viewMembers","manageRelatedOrganizations","localReducer","BROWSE_ORGS_LOAD_SUCCESS","_action$defaultViewMo","defaultViewModel","rawOrganizations","openRequests","searchTerms","sortField","sortDirection","totalCount","filteredCount","selectedOrganizationId","searching","BROWSE_ORGS_SEARCH","searchOrgs","BROWSE_ORGS_SEARCH_START","searchOrgsStart","BROWSE_ORGS_SEARCH_SUCCESS","length","searchOrgsSuccess","BROWSE_ORGS_SEARCH_ERROR","searchOrgsError","BROWSE_ORGS_SORT_START","sortOrgsStart","BROWSE_ORGS_FILTER_START","filterOrgsStart","BROWSE_ORGS_UNLOAD","AUTH_CHECK_START","auth","status","CHECKING","authorization","token","realname","roles","authCheckStart","AUTH_AUTHORIZED","AUTHORIZED","authAuthorized","AUTH_UNAUTHORIZED","UNAUTHORIZED","authUnauthorized","AUTH_CHECK_ERROR","authCheckError","APP_SUCCESS","app","READY","config","appSuccess","ADMIN_MANAGE_REQUESTS_LOAD_START","ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS","manageOrganizationRequestsView","invitations","ADMIN_MANAGE_REQUESTS_LOAD_ERROR","ADMIN_MANAGE_REQUESTS_UNLOAD","ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS","newRequests","request","getViewAccessSuccess","VIEW_MEMBERS_LOAD_START","viewMembersView","VIEW_MEMBERS_LOAD_SUCCESS","VIEW_MEMBERS_LOAD_ERROR","VIEW_MEMBERS_UNLOAD","VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS","VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS","GroupException","_AppException","apperror","Map","httpcode","httpstatus","appcode","callid","time","originalError","ServerException","_AppException2","_this2","GroupsClient","url","createClass","key","fetch","headers","Authorization","Accept","mode","then","response","json","result","exists","_listGroups","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","_this3","Promise","all","group","getGroupById","path","body","join","Content-Type","method","JSON","stringify","statusText","get","text","_post","_callee2","errorText","_context2","sent","t0","_x","_x2","_get","_callee3","_context3","_x3","newGroup","payload","private","custom","logourl","researchinterests","homeurl","put","groupUpdate","_addRelatedGroup","_callee4","groupId","relatedGroupId","relatedGroups","update","_context4","relatedgroups","push","_x4","_x5","_removeRelatedGroup","_callee5","newRelatedGroups","_context5","_x6","_x7","_getRequest","_callee6","requestId","_context6","_x8","params","query","URLSearchParams","includeClosed","append","DESCENDING","startAt","String","getTime","toString","complete","_grantResourceAccess","_callee7","resourceType","resourceId","_context7","post","_x9","_x10","_x11","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_visitGroup","_callee8","_ref11","_context8","_x12","_getOpenRequests","_callee9","_ref12","groupIds","requestStatuses","_arr","_i","_ref15","_ref14","_groupId","requestStatus","_context9","entries","slicedToArray","set","_x13","groupRequestToOrgRequest","requestType","INVITATION","REQUEST","stringToRequestType","USER","WORKSPACE","APP","stringToResourceType","resourcetype","OPEN","groupid","requester","user","resource","createdAt","createdate","expireAt","expiredate","modifiedAt","moddate","narrativeId","appId","UserRelationToOrganization","UserWorkspacePermission","OrganizationKind","RequestsModel","groupsClient","cache","groupsApi","groupsServiceURL","grequest","has","getRequest","_getOutboundRequests","grequests","getCreatedRequests","forEach","_getUserRequestForOrg","find","r","_getPendingRequestsForOrg","_getRequestInboxForOrg","getTargetedRequests","_getCombinedRequestInboxForOrg","getGroupRequests","t1","_getRequestOutboxForOrg","_getOrganizationInvitations","_getOrganizationInvitationsForOrg","getOrganizationInvitations","invitation","_getInboundRequests","_callee10","_context10","_getUserInvitationForOrg","_callee11","_context11","_getPendingOrganizationRequestsForOrg","_callee12","_context12","_getPendingOrganizationRequests","_callee13","allRequests","_context13","reduce","_cancelRequest","_callee14","_context14","cancelRequest","_acceptRequest","_callee15","_context15","acceptRequest","_denyRequest","_callee16","_context16","denyRequest","_acceptJoinInvitation","_callee17","_context17","_x14","_rejectJoinInvitation","_callee18","_context18","_x15","_inviteUserToJoinOrg","_callee19","_context19","inviteUserToGroup","_x16","_x17","Validation","s","firstNonPrintable","search","nonPrintableRe","beforeStart","before","slice","after","REQUIRED_MISSING","match","title","determineRelation","org","INACCESSIBLE_PRIVATE","MEMBER_REQUEST_PENDING","MEMBER_INVITATION_PENDING","owner","OWNER","groupPermissionToWorkspacePermission","groupsPermission","VIEW","EDIT","groupToOrganization","currentUser","joinedAt","joined","lastVisitedAt","lastvisit","admins","admin","resources","workspace","parseInt","rid","narrname","isPublic","public","permission","perm","narrcreate","updatedAt","isMember","role","isAdmin","isOwner","groupRoleToUserRelation","areMembersPrivate","privatemembers","apps","memberCount","memcount","narrativeCount","rescount","appCount","catalogmethod","groupToPrivateOrganization","applySearch","searchTermsRe","term","RegExp","every","termRe","test","dateDays","d","t","Math","round","applySortComparison","direction","b","localeCompare","applySort","ASCENDING","sort","applyFilter","roleType","privacy","applyRoleType","some","applyRole","applyPrivacy","narrativeSortByToComparator","queryNarratives","c1","applyNarrativeSort","tokens","applyNarrativeSearch","memberSortByToComparator","queryMembers","applyMembersSort","applyMembersSearch","OrganizationModel","_getOrg","_getOrganization","_getOrgs","ids","getOrg","_getAllOrgs","groups","getGroups","getOrgs","_getOwnOrgs","ownOrgs","getAllOrgs2","_getAllOrgs2","_this4","listGroups","listGroupToBriefOrganization","_queryOrgs","filtered","searched","sorted","total","_ownOrgs","_grantViewAccess","req","grantReadAccessToRequestedResource","requestModel","_addOrg","newOrg","reject","createGroup","_orgExists","groupExists","_updateOrg","orgUpdate","updateGroup","validateOrgId","validateOrgName","validateOrgDescription","_removeNarrativeFromOrg","deleteResource","_grantNarrativeAccess","grantResourceAccess","_requestMembership","requestMembership","_addOrRequestNarrativeToGroup","addOrRequestNarrative","_x18","_memberToAdmin","memberToAdmin","_x19","_x20","_adminToMember","adminToMember","_x21","_x22","_removeMember","removeMember","_x23","_x24","_updateMember","_callee20","_context20","updateMember","_x25","_x26","_x27","_visitOrg","_callee21","_context21","visitGroup","_x28","_getOpenRequestsStatus","_callee22","organizationIds","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context22","getOpenRequests","undefined","Symbol","iterator","done","stringToRequestStatus","return","finish","_x29","_getOpenRequestStatus","_callee23","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context23","_x30","_addRelatedOrganization","_callee24","relatedOrganizationId","_context24","addRelatedGroup","_x31","_removeRelatedOrganization","_callee25","_ref13","_context25","removeRelatedGroup","_x32","new","OLD","INVITE_USER_LOAD_START","inviteUserView","INVITE_USER_LOAD_SUCCESS","EDITING","users","selectedUser","INVITE_USER_LOAD_ERROR","INVITE_USER_UNLOAD","INVITE_USER_SEARCH_USERS_SUCCESS","searchUsersSuccess","INVITE_USER_SELECT_USER_SUCCESS","selectUserSuccess","INVITE_USER_SEND_INVITATION_START","SENDING","sendInvitationStart","INVITE_USER_SEND_INVITATION_SUCCESS","_state$views$inviteUs","orgModel","newUsers","sendInvitationSuccess","INVITE_USER_SEND_INVITATION_ERROR","sendInvitationError","editableMemberProfile","MANAGE_MEMBERSHIP_LOAD_START","manageMembershipView","MANAGE_MEMBERSHIP_LOAD_SUCCESS","MANAGE_MEMBERSHIP_LOAD_ERROR","MANAGE_MEMBERSHIP_UNLOAD","MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS","editedMember","updateTitleSuccess","MANAGE_MEMBERSHIP_EVALUATE_SUCCESS","evaluateSuccess","MANAGE_MEMBERSHIP_EVALUATE_ERROR","evaluateError","MANAGE_MEMBERSHIP_SAVE_SUCCESS","sendRequestStart","requestNarrativeView","REQUEST_ADD_NARRATIVE_LOAD_START","REQUEST_ADD_NARRATIVE_LOAD_SUCCESS","selectedNarrative","REQUEST_ADD_NARRATIVE_LOAD_ERROR","REQUEST_ADD_NARRATIVE_SEND_START","REQUEST_ADD_NARRATIVE_SEND_SUCCESS","orgNarrative","ASSOCIATED","REQUESTED","sendRequestSuccess","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS","selectNarrativeSuccess","REQUEST_ADD_NARRATIVE_UNLOAD","REQUEST_ADD_NARRATIVE_SORT_SUCCESS","sortSuccess","ENTITY_ORGANIZATION_LOAD_SUCCESS","newOrgs","entities","byId","ENTITY_USER_LOADER_SUCCESS","userLoaderSuccess","ENTITY_ORGANIZATION_LOADER_SUCCESS","orgsMap","organizationLoaderSuccess","ENTITY_NARRATIVE_LOAD_SUCCESS","loadNarrativeSuccess","organizationsReducer","ORGANIZATION_CENTRIC_VIEW_LOAD_START","organizationCentricView","ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS","pendingJoinRequest","pendingJoinInvitation","ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR","ORGANIZATION_CENTRIC_VIEW_UNLOAD","GLOBAL_ACCESS_NARRATIVE_SUCCESS","narrativesById","NOTIFICATIONS_LOAD_SUCCESS","notificationsById","notifications","notification","db","NOTIFICATIONS_UNLOAD","NOTIFICATIONS_READ_SUCCESS","_state$db$notificatio","allNotifications","notificationId","delete","readSuccess","DATA_SERVICE_LOAD_SUCCESS","View","addOrgReducer","editOrgReducer","browseOrgsView","browseOrgsReducer","viewOrgReducer","authReducer","appReducer","manageOrganizatiopRequests","inviteUser","manageMembership","requestAddNarrative","organizationCentric","global","dataServices","OrgLogo","props","react","src","width","size","inString","position","charCodeAt","c2","substring","initial","charAt","organizationName","toUpperCase","color","md5","substr","height","style","border","x","y","dy","textAnchor","dominantBaseline","fontSize","fill","fontFamily","renderLogoUrl","renderDefaultInitial","renderLogo","React","Avatar","_React$Component","avatarOption","gravatarDefault","gravatarHash","noUserPic","avatarUrl","getAvatarUrl","reverseView","v","COMPACT","Owner","view","setState","icon","showAvatar","className","components_entities_Avatar","avatarSize","tooltip","renderAvatar","es_tooltip","placement","href","target","onClick","onToggleView","bind","city","country","renderCompact","ServiceClient","param","version","constructor","random","AuthorizedServiceClient","_ServiceClient","func","makePayload","UserProfileClient","_AuthorizedServiceCli","makeEmptyPayload","_getUserProfile","profileCache","resolve","callFunc","_updateUserProfile","profile","_getUserProfiles","usernames","_getAllUsers","_searchUsers","profileToUser","jobTitle","userdata","jobTitleOther","synced","UserModel","userProfileClient","userProfileServiceURL","_getUser","userProfile","getUserProfile","_getUsers","toFetch","userProfiles","getUserProfiles","searchUsers","excludedUsers","AuthorizedGenericClient","_GenericClient","_callFunc2","processResponse","GenericClient","_processResponse","_error","_error2","_callFunc","ServiceWizardClient","theResult","moduleCache","Cache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cacheLifetime","isMonitoring","window","setTimeout","newCache","cacheRenewed","keys","item","isExpired","runMonitor","cacheItem","reserved","cached","Bluebird","started","waiter","reserveAndFetch","fetcher","catch","err","elapsed","reserveItem","fetchPromise","setItem","finally","isCancelled","isReserved","reserveWaiter","DynamicServiceClient","timeout","rpcContext","moduleId","getModule","getItemWithWait","getCached","client","getServiceStatus","module_name","funcName","_this5","lookupModule","serviceStatus","NarrativeAccess","Sort","NarrativeServiceClient","_DynamicServiceClient","_listNarratives","iso8601ToDate","dateString","dateParts","exec","TypeError","offset","newDateString","workspaceInfoToObject","wsInfo","objectCount","userPermission","globalReadPermission","lockStatus","metadata","objectInfoToObject","data","majorVersion","minorVersion","savedAt","savedBy","workspaceName","checksum","ref","NarrativeModel","_getOwnNarratives","narrativeServiceClient","requestClient","narrativesResult","pendingRequests","workspacesInOrg","serviceWizardURL","listNarratives","getPendingRequestsForOrg","nar","workspaceInfo","workspaceApi","ws","objectInfo","is_temporary","access","objectId","narrative_nice_name","lastSavedAt","lastSavedBy","TITLE","LAST_SAVED","sorter","getSorter","_getNarrative","workspaceClient","rawWorkspaceInfo","_objectId","rawObjectInfo","_access","workspaceServiceURL","objects","wsid","objid","includeMetadata","ignoreErrors","infos","userLoader","userId","dispatch","getState","_getState","_getState$auth$author","model","_user","ENTITY_USER_LOADER_START","userModel","services","UserProfile","getUser","ENTITY_USER_LOADER_ERROR","loadNarrative","_getState3","_getState3$auth$autho","narrativeClient","_narrative","ENTITY_NARRATIVE_LOAD_START","narrativeModel","Workspace","Groups","ServiceWizard","getNarrative","ENTITY_NARRATIVE_LOAD_ERROR","Loader","Owner_Owner","onLoad","connect","actions","niceElapsed","someDate","absoluteAfter","measure","measureAbs","unit","compactDate","nowDate","elapsedAbs","abs","prefix","suffix","getFullYear","Intl","DateTimeFormat","month","day","format","year","NiceElapsedTime","showTooltip","fullDate","hour","minute","timeZoneName","tooltipPrefix","BriefOrganization","OrgLogo_OrgLogo","mouseEnterDelay","newAlert","theme","requestsAlert","iconColor","openRequestsStatus","INAPPLICABLE","permalink","fontWeight","location","origin","menu","es_menu","Modal","content","Item","dropdown","overlay","trigger","NavLink","to","renderRelation","renderPrivacy","renderHomeUrl","renderOrgFreshness","renderRequests","renderPermalink","second","OwnerContainer","fullTimestamp","memberCountTooltip","renderMemberCount","count","renderNarrativeCount","NiceElapsedTime_NiceElapsedTime","renderMemberRow","renderNarrativeRow","renderModifiedRow","renderLogoColumn","renderInfoCol","renderStatsCol","renderNormal","Organizations","singular","plural","index","BriefOrganization_BriefOrganization","es_alert","maxWidth","margin","overflowY","display","flexDirection","renderOrgs","_state$views$browseOr","Header","context","currentMenuItem","breadcrumbs","verticalAlign","marginLeft","marginRight","e","buttons","MainMenu","es_Route","render","history","selectedKeys","pathname","backgroundColor","Link","renderMenu","OrganizationsBrowser","searchInput","searchButton","filterByRoleValues","label","showInfo","filterByRoleType","filterByRole","filterByPrivacy","showAdvancedControls","onSearchOrgs","current","currentSearchInputValue","preventDefault","doSearch","onSortOrgs","newFilter","onFilterOrgs","checkedValues","onSearchInputChange","onSubmit","placeholder","onChange","autoFocus","es_button","disabled","haveSearchInput","form","htmlType","renderSearchIcon","onClearSearch","renderSearchForm","renderSearchFeedback","shape","onShowInfo","src_components_Header","es_select","onSortByChange","defaultValue","dropdownMatchSelectWidth","Option","_this$props$filter","onToggleAdvanced","radioStyle","lineHeight","es_radio","Group","onFilterByRoleTypeChange","renderAdvancedToggle","es_checkbox","options","onFilterByRoleChange","onFilterByPrivacyChange","container","renderSortByControl","marginTop","renderFilterByRole","renderFilterByPrivacy","components_menu_component","renderMenuButtons","renderSearchBar","renderOrganizations","renderFilterColumn","load","BROWSE_ORGS_LOAD_START","storeState","_storeState$views$bro","_browseOrgsView$viewM","orgClient","_organizations","adminOrgs","_openRequests","queryOrgs","getOpenRequestsStatus","_getState2","_getState2$auth$autho","_browseOrgsView$viewM2","_organizations2","_openRequests2","_browseOrgsView$viewM3","_organizations3","_openRequests3","renderLoading","renderError","browseOrgs_container","onUnload","AddOrgEvaluateErrors","validateOrgLogoUrl","validateOrgHomeUrl","validateOrgResearchInterests","addOrgEvaluate","addOrg","ADD_ORG_SAVE_START","_state$auth$authoriza","exception","_state$views$addOrgVi","orgModelFromState","_state$auth$authoriza2","updateName","_Validation$validateO","_Validation$validateO2","validatedName","updateLogoUrl","_Validation$validateO3","_Validation$validateO4","validatedLogoUrl","Debouncer","delay","fun","canceled","timer","startWaiting","clearTimeout","activeDebouncer","updateId","_Validation$validateO9","_Validation$validateO10","validatedId","lastValidatedAt","now","_Validation$validateO11","_Validation$validateO12","orgExists","cancel","updateDescription","_Validation$validateO13","_Validation$validateO14","validatedDescription","NewOrganization","cancelToBrowser","showError","document","isModified","confirm","onOk","onCancel","okText","cancelText","onSave","persist","onUpdateName","onUpdateDescription","onUpdateId","onUpdateLogoUrl","onUpdateHomeUrl","onUpdateResearchInterests","onUpdateIsPrivate","checked","field","flex","input","calcFieldClass","onNameChange","renderFieldError","onIdChange","fontStyle","onLogoUrlChange","renderLogoPreview","onHomeUrlChange","onIsPrivateChange","renderIsPrivate","TextArea_default","autosize","minRows","maxRows","onResearchInterestsChange","onDescriptionChange","dangerouslySetInnerHTML","__html","Marked","parse","renderDefaultLogo","_this$props","errorButton","orgName","toggleError","canSave","line","modal","visible","okType","es_Redirect","renderEditor","renderLoadingHeader","updateIsPrivate","_Validation$validateO5","_Validation$validateO6","validatedHomeUrl","updateHomeUrl","_Validation$validateO7","_Validation$validateO8","validatedResearchInterests","updateResearchInterests","Component","newOrganization_container","UberModel","_getOrganizationForUser","getUserRequestForOrg","getUserInvitationForOrg","getPendingOrganizationRequestsForOrg","DATA_SERVICE_LOAD_START","removeNarrativeError","VIEW_ORG_REMOVE_NARRATIVE_ERROR","accessNarrativeError","VIEW_ORG_ACCESS_NARRATIVE_ERROR","viewOrgJoinRequestError","VIEW_ORG_JOIN_REQUEST_ERROR","acceptJoinInvitationStart","VIEW_ORG_ACCEPT_JOIN_INVITATION_START","_getState2$db$notific","uberClient","_organization","_relation","_requestInbox2","_openRequest","orgRequests","orgInvitations","_requestInbox","_requestOutbox","_narratives","_members","uberModel","getOrganizationForUser","getRequestInboxForOrg","getOrganizationInvitationsForOrg","getOpenRequestStatus","getCombinedRequestInboxForOrg","getRequestOutboxForOrg","reload","_organization2","_relation2","_requestInbox4","_openRequest2","_requestInbox3","_requestOutbox2","_narratives2","_members2","viewOrgJoinRequest","_state$auth$authoriza3","VIEW_ORG_JOIN_REQUEST_SUCCESS","viewOrgCancelJoinRequest","_state$auth$authoriza4","newRequest","VIEW_ORG_JOIN_REQUEST_START","VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR","acceptJoinInvitation","_state$auth$authoriza5","VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS","VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR","rejectJoinInvitation","_state$auth$authoriza6","VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS","VIEW_ORG_REJECT_JOIN_INVITATION_ERROR","inbox","VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR","VIEW_ORG_ACCEPT_INBOX_REQUEST_START","Level","OrganizationNotificationType","FeedsException","FeedsClient","_put","baseURLPath","_postWithResult","queryString","Array","from","k","encodeURIComponent","_getNotifications","_seeNotifications","postWithResult","convertLevel","level","ALERT","WARNING","convertNotificationType","verb","JOIN_REQUEST","NARRATIVE_ASSOCIATION_REQUEST","APP_ASSOCIATION_REQUEST","NARRATIVE_ASSOCIATED","NARRATIVE_ACCEPTED","USER_ACCEPTED","JOIN_INVITATION","UNKNOWN","feedsClient","feedsApi","feedsServiceURL","getNotifications","feed","actor","object","source","seen","created","expires","external_key","expiresAt","externalKey","_getOrganizationNotifications","read","regarding","_seeNotification","seen_notes","seeNotifications","note_ids","unauthorized_notes","Member","userTooltip","renderRole","components_entities_Member","NavigateTo","OrganizationHeader","navigateTo","getUserRelation","currentUsername","onJoinOrg","success","onCancelJoinRequest","onAcceptInvitation","onRejectInvitation","MANAGE_MEMBERSHIP","VIEW_MEMBERS","MANAGE_REQUESTS","EDIT_ORGANIZATION","INVITE_USER","VIEW_ORGANIZATION","textAlign","onJoinClick","spin","onMenuClick","adminMenu","ownerMenu","renderOrgInfo","getRelationClass","organizationHeader_container","User","entities_UserSimple","Narrative","cursor","iconType","UserSimpleContainer","renderUserPermission","renderGlobalPermission","renderNiceElapsed","renderNarrative","component_Narrative","OrganizationNarrative","requestAccess","onGetViewAccess","shareButton","permissionTooltip","buttonTooltip","onRequestAccess","renderNarrativePermission","reduxAdapter","accessModal","drawer","closable","onClose","onCloseRequestAccess","makeError","uuid","at","promoteToAdmin","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START","VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR","demoteToMember","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START","VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START","_getState4","_getState4$auth$autho","reloadOrg","VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR","Members","confirmMemberRemoval","marginBottom","MemberContainer","onRemoveMember","onPromoteMemberToAdmin","onConfirmRemoveMember","onDemoteAdminToMember","onMemberMenu","onAdminMenu","renderOwnerMenu","renderAdminMenu","renderMemberMenu","classNames","renderMemberOptions","_this6","paddingRight","onSearchMembers","_this7","onSortMembers","renderSortBar","renderConfirmMemberRemoval","renderHeader","renderMembers","onViewMembersUnload","VIEW_ORG_VIEW_MEMBERS_UNLOAD","adminUsername","VIEW_ORG_SORT_MEMBERS_START","VIEW_ORG_SORT_MEMBERS_ERROR","ViewMembers","VIEW_ORG_REJECT_INBOX_REQUEST_START","VIEW_ORG_REJECT_INBOX_REQUEST_ERROR","_requests","VIEW_ORG_CANCEL_JOIN_REQUEST_START","components_entities_User","UserContainer","renderPublicPermission","Narrative_Narrative","Request","onAcceptInboxRequest","onRejectInboxRequest","NarrativeContainer","renderRequestRequester","renderRequestOptions","onAcceptRequest","onRejectRequest","renderRequestReceivedSubject","renderJoinRequest","renderWorkspaceRequest","renderUserInvitation","renderBody","acceptActions","rejectActions","InboxRequest","onCancelOutboxRequest","alert","onCancelRequest","cancelActions","OutboxRequest","ManageGroupRequests","cancelToViewer","onAcceptJoinRequest","onDenyJoinRequest","onCancelJoinInvitation","open","card","hoverable","headStyle","narrativeAccess","InboxRequestContainer","outbox","OutboxRequestContainer","outboxCount","inboxCount","renderInbox","renderOutbox","cancelRequestActions","Organization","component_Organization","Inaccessible_Organization","ENTITY_ORGANIZATION_LOAD_START","ENTITY_ORGANIZATION_LOAD_ERROR","RelatedOrganizations","onManageRelatedOrgs","onRemoveRelatedOrganization","organization_loader","renderControls","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","removeRelatedOrganization","VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR","AvailableOrganization","selectableOrganization","renderRelated","ManageRelatedOrganizations","onAddOrganization","onRemoveOrganization","classes","onSelectOrganization","AvailableOrganization_AvailableOrganization","button","onRemoveSelectedOrganization","onAddSelectedOrganization","onFinish","renderAvailableToolbar","renderAvailableOrgs","renderSelectedOrg","_viewModel$subViews$m","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START","addRelatedOrganization","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START","padding","manageRelatedOrganizations_reduxAdapter","AccordionState","SubViews","vm1","selectableOrgs","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START","VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR","ViewOrganization","accordionState","UP","subView","REQUEST_ADD_NARRATIVE","onRemoveNarrative","renderEditRow","organizationHeader_loader","members_reduxAdapter","onReloadOrg","inner","twoToneColor","renderGroupRequestsRow","_this$props$viewModel","renderGroupRequests","renderMembersToolbar","onNarrativeMenu","narrativesTable","extras","onRequestAddNarrative","OrganizationNarrative_OrganizationNarrative","renderNarrativeMenu","onSearchNarratives","onSortNarratives","tabs","es_tabs","TabPane","tab","renderMembersTab","totalRequestCount","totalRequests","requests_container","titleCount","outboxSize","relatedOrgCount","relatedOrgTab","relatedOrgs_reduxAdapter","defaultActiveKey","animated","tabPosition","renderOrgMenu","DOWN","toggleAccordion","orgRowClass","narrativesRowClass","minHeight","renderOrg","renderAccordionControl","renderNarratives","renderCombo","manageRelatedOrganizations_loader","renderManageRelatedOrgsView","renderNormalView","borg","borderBottom","getSubView","ownProps","onViewOrg","VIEW_ORG_REMOVE_NARRATIVE_START","removeNarrativeFromOrg","VIEW_ORG_ACCESS_NARRATIVE_START","grantNarrativeAccess","acceptInboxRequestActions","onReadNotification","NOTIFICATIONS_READ_START","feedsModel","Feeds","seeNotification","NOTIFICATIONS_READ_ERROR","notificationActions","VIEW_ORG_SORT_NARRATIVES_START","renderMessage","renderJoinButton","showIcon","inaccessible_container","accessible_container","visitOrg","editableOrg","editOrgSave","_state$views$editOrgV","updateOrg","editOrgEvaluate","editOrgUpdateDescriptionSuccess","EditOrganization","onEditOrgSave","onClickCancelToViewer","renderOrgHeader","editOrganization_container","Auth","tokenRef","checkAuth","onRemoveAuthorization","onAddAuthorization","onLoginClick","onLogoutClick","buildAuthToolbar","children","buildAuthForm","hosted","buildAuthProd","buildAuthDev","endpoints","AuthClient","makePath","Cookies","getTokenInfo","getMe","account","desc","Listener","onSuccess","onError","WaitingListener","Message","channelId","envelope","uuidv4","Channel","host","awaitingResponse","waitingListeners","listeners","lastId","sentCount","receivedCount","unwelcomeReceivedCount","unwelcomeReceivedCountThreshhold","unwelcomeReceiptWarning","unwelcomeReceiptWarningCount","currentListener","messageEvent","handler","ex","awaiting","listener","messageId","listen","postMessage","getMessage","sendMessage","sendRequest","_loop","startMonitor","listenOnce","received","receiveMessage","addEventListener","removeEventListener","IFrameSimulator","channel","frameId","authServiceURL","originalPath","viewParams","parentHost","IFrameIntegration","frameElement","hasAttribute","getAttribute","decodeURIComponent","KBaseIntegration","on","start","send","greeting","onAppStart","setupChannel","teardownChannel","_state$app","_state$app$config","defaultPath","iframeParams","getParamsFromIFrame","pushState","baseUrl","selectUserError","INVITE_USER_SELECT_USER_ERROR","selectUser","selectedUsername","INVITE_USER_SELECT_USER_START","sendInvitation","_getState4$views$invi","inviteUserToJoinOrg","InviteUser","lastSearchAt","cancelToViewMembers","autocompleteMessage","onSendInvitation","doSearchUsers","searchDebounce","onSearchUsers","onSelectUser","renderOrgName","SENDABLE","src_components_User","renderSearchButton","renderUsers","renderSelectedUser","renderInvitationForm","renderFooter","userClient","adminUsers","invited","requested","_users","orgUsers","INVITE_USER_SEARCH_USERS_START","INVITE_USER_SEARCH_USERS_ERROR","InviteUserLoader","inviteUser_container","onInviteUserLoad","evaluate","ManageMembership","confirmed","doLeaveOrgConfirmed","onLeaveOrganization","onUpdateTitle","doLeaveOrg","onTitleChange","_state$views$manageMe","MANAGE_MEMBERSHIP_LEAVE_ORG_START","MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS","MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR","_Validation$validateM","validateMemberTitle","_Validation$validateM2","validatedTitle","MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR","MANAGE_MEMBERSHIP_SAVE_START","MANAGE_MEMBERSHIP_SAVE_ERROR","collapse","bordered","Panel","header","renderDetail","renderInfo","component_Error","renderLoadingNone","manageMembership_container","thisMember","editableProfile","RequestAddNarrative","BROWSER","VIEWER","doSelectNarrative","doSendRequest","doShowInfo","flag","onSearchSubmit","NumberFormat","useGrouping","doSortBy","renderFilterSortBar","renderFeedbackBar","buttonLabel","canSendRequest","doCancelToViewer","renderNarrativeSelector","renderSelectedNarrative","renderSelectedNarrativeButton","selectNarrative","REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START","_state$views$requestN","_request2","addOrRequestNarrativeToGroup","REQUEST_ADD_NARRATIVE_SEND_ERROR","REQUEST_ADD_NARRATIVE_SORT_START","REQUEST_ADD_NARRATIVE_SORT_ERROR","sortOrganizationNarratives","requestAddNarrative_container","_request","getOrganization","getOwnNarratives","StateInstances","pending","DataServices","DATA_SERVICE_UNLOAD","AppContextProvider","Provider","Consumer","library","add","faSpinner","faSearch","faGlobe","faUserLock","DescriptionRenderer","sanitize","prot","unescape","replace","toLowerCase","out","Renderer","MarkedOptions","renderer","setOptions","initialState","makeInitialState","store","createStore","theReducer","compose","applyMiddleware","thunk","App","react_default","createElement","es","containers_KBaseIntegration","containers_Auth","storeAdapter","BrowserRouter","basename","Switch","Route","component","viewOrganization_loader","editOrganization_loader","inviteUser_loader","manageMembership_loader","requestAddNarrative_loader","Redirect","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.24bc0fff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import * as userProfile from \"../data/apis/userProfile\"\nimport * as groups from \"../data/apis/groups\"\nimport * as orgModel from '../data/models/organization/model'\nimport * as userModel from \"../data/models/user\"\nimport * as requestModel from '../data/models/requests'\nimport * as narrativeModel from '../data/models/narrative'\nimport * as uberModel from '../data/models/uber'\nimport * as feedsModel from '../data/models/feeds'\nimport { AnError } from \"../combo/error/api\";\n\n/* Types from the organization service (approximately) */\n\n/*\n    Organization\n*/\n\n\nexport enum ComponentView {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport enum UIErrorType {\n    NONE = 0,\n    INFO,\n    WARNING,\n    ERROR\n}\n\nexport interface UIError {\n    type: UIErrorType\n    message?: string\n}\n\nexport enum SyncState {\n    NONE = 0,\n    NEW,\n    DIRTY,\n    CLEAN\n}\n\nexport enum EditState {\n    NONE = 'NONE',\n    UNEDITED = 'UNEDITED',\n    EDITED = 'EDITED'\n}\n\n\n// export enum ValidationState {\n//     NONE = 0,\n//     VALID,\n//     INVALID,\n//     // DIRTY = 'DIRTY',\n//     MISSING\n// }\n\nexport enum ValidationErrorType {\n    OK = 0,\n    ERROR,\n    REQUIRED_MISSING\n}\n\nexport interface ValidationStateBase {\n    type: ValidationErrorType\n    validatedAt: Date\n}\n\nexport interface ValidationStateOk extends ValidationStateBase {\n    type: ValidationErrorType.OK\n}\n\nexport interface ValidationStateError extends ValidationStateBase {\n    type: ValidationErrorType.ERROR\n    message: string\n}\n\nexport interface ValidationStateRequiredMissing extends ValidationStateBase {\n    type: ValidationErrorType.REQUIRED_MISSING\n    message: string\n}\n\n// export interface ValidationStateAsyncError extends ValidationStateBase {\n//     type: ValidationErrorType.ASYNC_ERROR\n//     message: string\n//     \n// }\n\nexport type ValidationState = ValidationStateOk | ValidationStateError | ValidationStateRequiredMissing\n\nexport interface Editable {\n    value: any\n    remoteValue: any\n    syncState: SyncState\n    // editState: EditState\n    // validationState: ValidationState\n    validationState: ValidationState\n    // validatedAt: Date | null\n    // error: UIError\n}\nexport interface EditableString extends Editable {\n    value: string,\n    remoteValue: string | null\n}\n\nexport interface EditableNullableString extends Editable {\n    value: string | null\n    remoteValue: string | null\n}\n\nexport interface EditableBoolean extends Editable {\n    value: boolean\n    remoteValue: boolean | null\n}\n\nexport interface EditableOrganization {\n    id: EditableString\n    name: EditableString\n    description: EditableString\n    isPrivate: EditableBoolean\n    logoUrl: EditableNullableString\n    homeUrl: EditableNullableString\n    researchInterests: EditableString\n}\n\n\n// TODO: or CLEAN to replace new and saved\nexport enum SaveState {\n    NONE = 'NONE',\n    NEW = 'NEW',\n    READY = 'READY',\n    SAVING = 'SAVING',\n    SAVED = 'SAVED',\n    SAVE_ERROR = 'SAVE_ERROR'\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    user: User,\n    type: MemberType\n}\n\n\n\n// export interface User extends UserBase {\n\n// }\n\n// export interface Owner extends UserBase {\n\n// }\n\n// export interface Member extends UserBase {\n\n// }\n\n// export interface Admin extends UserBase {\n\n// }\n\n// export enum UserRelationToOrganization {\n//     NONE = 0,\n//     VIEW,\n//     MEMBER_REQUEST_PENDING,\n//     MEMBER_INVITATION_PENDING,\n//     MEMBER,\n//     ADMIN,\n//     OWNER\n// }\n\n// export interface UserOrgRelation {\n//     type: UserRelationToOrganization\n// }\n\n// export interface NoRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.NONE\n// }\n\n// export interface ViewRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.VIEW\n// }\n\n// export interface MembershipRequestPendingRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n//     requestId: string\n// }\n\n// export interface MembershipInvitationPendingRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n//     requestId: string\n// }\n\n// export interface MemberRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.MEMBER\n// }\n\n// export interface AdminRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.ADMIN\n// }\n\n// export interface OwnerRelation extends UserOrgRelation {\n//     type: UserRelationToOrganization.OWNER\n// }\n\n\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport type Username = string\n\n\n// export type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\nexport interface App {\n    id: string,\n    module: string,\n    func: string,\n    version: string,\n    title: string,\n    category: string\n}\n\nexport interface AppResource {\n    id: string\n}\n\n// REVIVE in a different form? Or not? This is the old Organization\n// export interface Organization {\n//     id: string\n//     name: string\n//     gravatarHash: string | null\n//     description: string\n//     owner: Member\n//     relation: UserOrgRelation\n//     createdAt: Date\n//     modifiedAt: Date,\n//     members: Array<Member>,\n//     // admins: Array<Admin>,\n//     adminRequests: Array<requestModel.Request>,\n//     narratives: Array<NarrativeResource>,\n//     apps: Array<AppResource>\n// }\n\nexport interface EditedOrganization {\n    id: {\n        value: string,\n        error?: UIError\n    }\n    name: {\n        value: string,\n        error?: UIError\n    }\n    description: {\n        value: string,\n        error?: UIError\n    }\n}\n\n/*\n    Collection of organizations\n*/\n\n/* REDUX */\n\nexport enum AuthState {\n    NONE = 0,\n    CHECKING,\n    AUTHORIZED,\n    UNAUTHORIZED,\n    ERROR\n}\n\nexport interface UserAuthorization {\n    token: string,\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\n\nexport interface Authorization {\n    status: AuthState,\n    message: string,\n    authorization: UserAuthorization\n}\n\nexport enum ViewOrgState {\n    NONE = 0,\n    INITIAL,\n    FETCHING,\n    READY,\n    ERROR\n}\n\nexport enum AppState {\n    NONE = 0,\n    LOADING,\n    READY,\n    ERROR\n}\n\nexport enum SortDirection {\n    ASCENDING = 'asc',\n    DESCENDING = 'desc'\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface ManageOrganizationRequestsViewModel {\n    organization: orgModel.Organization\n    requests: Array<requestModel.Request>\n    invitations: Array<requestModel.Request>\n}\n\nexport interface ManageOrganizationRequestsView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ManageOrganizationRequestsViewModel | null\n}\n\nexport interface ViewMembersViewModel {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface ViewMembersView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: ViewMembersViewModel | null\n}\n\nexport enum BrowseOrgsState {\n    NONE = 0,\n    SEARCHING,\n    SUCCESS,\n    ERROR\n}\n\nexport interface BrowseOrgsViewModel {\n    rawOrganizations: Array<orgModel.BriefOrganization>\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    sortField: string\n    sortDirection: SortDirection\n    filter: orgModel.Filter\n    searchTerms: Array<string>\n    selectedOrganizationId: string | null,\n    // TODO: let's make a new interface for running operations...\n    searching: boolean\n    error: AppError | null\n}\n\nexport interface BrowseOrgsView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: BrowseOrgsViewModel | null\n}\n\nexport enum InviteUserViewState {\n    NONE = 0,\n    EDITING,\n    SENDABLE,\n    SENDING,\n    SUCCESS,\n    ERROR\n}\n\n// user info we get out of user profile search\n\n\n// a user who may or may not be in an org, with org relation info\n// todo: fetch more profile info.\nexport interface OrganizationUser {\n    username: string\n    realname: string\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface InviteUserViewModel {\n    organization: orgModel.Organization\n    users: Array<OrganizationUser> | null\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState\n}\n\nexport interface InviteUserView {\n    loadingState: ComponentLoadingState\n    viewModel: InviteUserViewModel | null\n    error: AppError | null\n    // viewState: AppError | InviteUserValue | null\n}\n\nexport interface ManageMembershipViewModel {\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\nexport interface ManageMembershipView {\n    loadingState: ComponentLoadingState\n    error: AnError | null\n    viewModel: ManageMembershipViewModel | null\n}\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport interface Narrative {\n    workspaceId: number\n    objectId: number\n    title: string\n    status: NarrativeState\n    // inOrganization: boolean,\n    // createdAt: Date,\n    owner: Username\n    modifiedAt: Date\n}\n\n// export enum UserWorkspacePermission {\n//     NONE = 0,\n//     READ,\n//     WRITE,\n//     ADMIN,\n//     OWN\n// }\n\n\nexport enum ProcessingState {\n    NONE = 0,\n    PROCESSING,\n    SUCCESS,\n    ERROR\n}\n\n\nexport enum RequestNarrativeState {\n    NONE = 0,\n    LOADING,\n    ERROR,\n    LOADED,\n    SENDING,\n    SENT\n}\n\n\nexport interface RequestNarrativeViewModel {\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    relation: orgModel.Relation\n    error: AppError | null\n    saveState: SaveState\n}\n\nexport interface RequestNarrativeView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: RequestNarrativeViewModel | null\n}\n\nexport interface AddOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    error: AppError | null\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n}\n\nexport interface AddOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: AddOrgViewModel | null\n}\n\nexport interface Notification {\n\n}\n\nexport interface UserEntity {\n    userId: string\n    profile: userProfile.UserProfile\n}\n\nexport interface OrganizationEntity {\n    groupId: string\n    group: groups.Group\n}\n\nexport interface RequestEntity {\n    requestId: string\n    request: groups.Request\n}\n\nexport interface OrganizationCentricView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: OrganizationCentricViewModel | null\n}\nexport interface OrganizationCentricViewModel {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation\n}\n\nexport enum ViewOrgViewModelKind {\n    NORMAL = 0,\n    PRIVATE_INACCESSIBLE\n}\n\nexport interface ViewOrgViewModel {\n    kind: ViewOrgViewModelKind.NORMAL,\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestOutbox: Array<requestModel.Request>\n    requestInbox: Array<requestModel.Request>\n    sortNarrativesBy: string\n    searchNarrativesBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string\n    searchMembersBy: string\n    members: Array<orgModel.Member>\n\n    subViews: {\n        manageRelatedOrganizationsView: View<ManageRelatedOrgsViewModel>\n    }\n}\n\nexport interface ViewInaccessiblePrivateOrgViewModel {\n    kind: ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface ViewOrgView {\n    loadingState: ComponentLoadingState\n    error: AppError | null\n    viewModel: ViewOrgViewModel | ViewInaccessiblePrivateOrgViewModel | null\n}\n\nexport enum ViewOrgSubViewKind {\n    NONE = 0,\n    MANAGE_RELATED_ORGS\n}\n\nexport interface NoneViewModel {\n    kind: ViewOrgSubViewKind.NONE\n}\n\nexport enum ViewState {\n    NONE = 0,\n    LOADING,\n    OK,\n    ERROR\n}\nexport interface View<T> {\n    state: ViewState\n    error: AnError | null\n    viewModel: T | null\n}\n\nexport interface SelectableRelatableOrganization {\n    organization: orgModel.BriefOrganization\n    isRelated: boolean\n    isSelected: boolean\n}\n\nexport interface ManageRelatedOrgsViewModel {\n    kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS\n    organization: orgModel.Organization\n    organizations: Array<SelectableRelatableOrganization>\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\nexport type ViewOrgSubView = View<NoneViewModel> | View<ManageRelatedOrgsViewModel>\n\n\nexport interface EditOrgViewModel {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    saveError: AppError | null\n}\n\nexport interface EditOrgView {\n    loadingState: ComponentLoadingState,\n    error: AppError | null,\n    viewModel: EditOrgViewModel | null\n}\n\nexport interface StoreState {\n    // new!!\n    entities: {\n        users: {\n            byId: Map<userModel.Username, userModel.User>\n            all: Array<string>\n        }\n        orgs: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n            all: Array<string>\n        }\n        requests: {\n            byId: Map<requestModel.RequestID, requestModel.Request>\n            all: Array<string>\n        }\n        narratives: {\n            byId: Map<narrativeModel.WorkspaceID, narrativeModel.Narrative>\n        }\n        organizations: {\n            byId: Map<orgModel.OrganizationID, orgModel.Organization | orgModel.InaccessiblePrivateOrganization>\n        }\n        // notifications: {\n        //     byId: <Map<\n        // }\n    }\n\n    db: {\n        notifications: {\n            all: Array<feedsModel.OrganizationNotification>\n            byId: Map<feedsModel.NotificationID, feedsModel.OrganizationNotification>\n            // collections: {\n            //     byGroup: Map<orgModel.OrganizationID, Array<feedsModel.NotificationID>>\n            // }\n        }\n    }\n\n    auth: Authorization\n    error: AppError | null\n\n    app: {\n        status: AppState\n        config: AppConfig\n        error?: AppError,\n    }\n\n    views: {\n        browseOrgsView: BrowseOrgsView\n        addOrgView: AddOrgView\n        viewOrgView: ViewOrgView\n        editOrgView: EditOrgView\n        manageOrganizationRequestsView: ManageOrganizationRequestsView\n        viewMembersView: ViewMembersView\n        inviteUserView: InviteUserView\n        manageMembershipView: ManageMembershipView\n        requestNarrativeView: RequestNarrativeView\n        organizationCentricView: OrganizationCentricView\n    }\n    updateOrg: {\n        pending: boolean\n    }\n}\n\nexport enum ErrorCode {\n    NONE = 0,\n    ERROR\n}\n\n/* COMPONENT PROPS */\n\nexport interface SomeError {\n    code: ErrorCode\n    message: string\n    detail: string\n    id: string\n    at: Date\n\n    errorHistory?: Array<AppError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport interface AppError {\n    code: string\n    message: string\n    generatedAt?: Date\n    trace?: Array<string>\n    errors?: Array<AppError>\n    exception?: AppException\n}\n\nexport class AppException extends Error {\n    code: string\n    message: string\n    detail?: string\n    trace?: Array<string>\n    errors?: Array<AppException>\n    info?: Map<string, any>\n    constructor({ code, message, detail, info }: { code: string, message: string, detail?: string, info?: Map<string, any> }) {\n        super(message)\n        this.name = 'AppException'\n        this.code = code\n        this.message = message\n        this.detail = detail\n        this.info = info\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppException)\n        }\n\n        if (this.stack) {\n            if (this.stack.indexOf('\\n') >= 0) {\n                this.trace = this.stack.split('\\n')\n            } else {\n                this.trace = [this.stack]\n            }\n        }\n    }\n}\n\nexport interface AppConfig {\n    baseUrl: string\n    services: {\n        Groups: {\n            url: string\n        }\n        UserProfile: {\n            url: string\n        }\n        Workspace: {\n            url: string\n        }\n        ServiceWizard: {\n            url: string\n        }\n        Feeds: {\n            url: string\n        }\n        Auth: {\n            url: string\n        }\n    }\n    defaultPath: string,\n    channelId: string | null\n}\n\nexport interface AuthProps {\n    authorization: Authorization,\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n    hosted: boolean,\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nexport interface IFrameParams {\n    channelId: string\n    frameId: string\n    params: {\n        groupsServiceURL: string\n        userProfileServiceURL: string\n        workspaceServiceURL: string\n        serviceWizardURL: string\n        feedsServiceURL: string\n        authServiceURL: string\n        originalPath: string | null,\n        view: string | null,\n        viewParams: any\n    },\n    parentHost: string\n}","export enum ActionFlag {\n    APP = 1,\n    APP_START,\n    APP_SUCCESS,\n    // APP_SUCCESS_IFRAME,\n    // APP_SUCCESS_SOLO,\n    APP_ERROR,\n\n    BROWSE_ORGS_LOAD,\n    BROWSE_ORGS_LOAD_START,\n    BROWSE_ORGS_LOAD_SUCCESS,\n    BROWSE_ORGS_LOAD_ERROR,\n    BROWSE_ORGS_UNLOAD,\n\n    BROWSE_ORGS_SORT,\n    BROWSE_ORGS_SORT_START,\n    BROWSE_ORGS_SORT_SUCCESS,\n    BROWSE_ORGS_SORT_ERROR,\n\n    BROWSE_ORGS_FILTER,\n    BROWSE_ORGS_FILTER_START,\n    BROWSE_ORGS_FILTER_SUCCESS,\n    BROWSE_ORGS_FILTER_ERROR,\n\n    BROWSE_ORGS_SEARCH,\n    BROWSE_ORGS_SEARCH_START,\n    BROWSE_ORGS_SEARCH_SUCCESS,\n    BROWSE_ORGS_SEARCH_ERROR,\n\n    UPDATE_ORG,\n    UPDATE_ORG_START,\n    UPDATE_ORG_SUCCESS,\n    UPDATE_ORG_ERROR,\n\n    // viewing org\n    VIEW_ORG_LOAD,\n    VIEW_ORG_LOAD_START,\n    VIEW_ORG_LOAD_SUCCESS,\n    VIEW_ORG_LOAD_ERROR,\n    VIEW_ORG_UNLOAD,\n    VIEW_ORG_RELOAD,\n\n    VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n    VIEW_ORG_LOAD_NORMAL_SUCCESS,\n\n    // Requests\n\n    VIEW_ORG_JOIN_REQUEST,\n    VIEW_ORG_JOIN_REQUEST_START,\n    VIEW_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_CANCEL_JOIN_REQUEST,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_START,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n    VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n\n    VIEW_ORG_ACCEPT_JOIN_INVITATION,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_START,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_ACCEPT_INBOX_REQUEST,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_START,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_INBOX_REQUEST,\n    VIEW_ORG_REJECT_INBOX_REQUEST_START,\n    VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n    VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n\n    VIEW_ORG_REJECT_JOIN_INVITATION,\n    VIEW_ORG_REJECT_JOIN_INVITATION_START,\n    VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS,\n    VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n\n    VIEW_ORG_REMOVE_NARRATIVE,\n    VIEW_ORG_REMOVE_NARRATIVE_START,\n    VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n\n    VIEW_ORG_ACCESS_NARRATIVE,\n    VIEW_ORG_ACCESS_NARRATIVE_START,\n    VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n\n    VIEW_ORG_SORT_NARRATIVES,\n    VIEW_ORG_SORT_NARRATIVES_START,\n    VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n    VIEW_ORG_SORT_NARRATIVES_ERROR,\n\n    VIEW_ORG_SEARCH_NARRATIVES,\n    VIEW_ORG_SEARCH_NARRATIVES_START,\n    VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n    VIEW_ORG_SEARCH_NARRATIVES_ERROR,\n\n    VIEW_ORG_SORT_MEMBERS,\n    VIEW_ORG_SORT_MEMBERS_START,\n    VIEW_ORG_SORT_MEMBERS_SUCCESS,\n    VIEW_ORG_SORT_MEMBERS_ERROR,\n\n    VIEW_ORG_SEARCH_MEMBERS,\n    VIEW_ORG_SEARCH_MEMBERS_START,\n    VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n    VIEW_ORG_SEARCH_MEMBERS_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD,\n    // keep these ones simple...\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n\n    // PRIVATE ORG\n\n    VIEW_PRIVATE_ORG_JOIN_REQUEST,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_START,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_SUCCESS,\n    VIEW_PRIVATE_ORG_JOIN_REQUEST_ERROR,\n\n    // MEMBERS\n\n    VIEW_ORG_VIEW_MEMBERS_LOAD,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_START,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_ORG_VIEW_MEMBERS_UNLOAD,\n\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // add org fields\n\n    ADD_ORG_LOAD,\n    ADD_ORG_LOAD_START,\n    ADD_ORG_LOAD_SUCCESS,\n    ADD_ORG_LOAD_ERROR,\n    ADD_ORG_UNLOAD,\n\n    ADD_ORG_UPDATE_NAME,\n    ADD_ORG_UPDATE_NAME_SUCCESS,\n    ADD_ORG_UPDATE_NAME_ERROR,\n\n    ADD_ORG_UPDATE_LOGO_URL,\n    ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n    ADD_ORG_UPDATE_LOGO_URL_ERROR,\n\n    ADD_ORG_UPDATE_ID,\n    ADD_ORG_UPDATE_ID_SUCCESS,\n    ADD_ORG_UPDATE_ID_ERROR,\n    ADD_ORG_UPDATE_ID_PASS,\n    ADD_ORG_EVALUATE_ID,\n\n    ADD_ORG_UPDATE_DESCRIPTION,\n    ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    ADD_ORG_UPDATE_IS_PRIVATE,\n    ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    ADD_ORG_UPDATE_HOME_URL,\n    ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n    ADD_ORG_UPDATE_HOME_URL_ERROR,\n\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    ADD_ORG_EVALUATE,\n    ADD_ORG_EVALUATE_OK,\n    ADD_ORG_EVALUATE_ERRORS,\n\n    ADD_ORG_SAVE,\n    ADD_ORG_SAVE_START,\n    ADD_ORG_SAVE_SUCCESS,\n    ADD_ORG_SAVE_ERROR,\n\n\n    // editing org\n    EDIT_ORG_LOAD,\n    EDIT_ORG_LOAD_START,\n    EDIT_ORG_LOAD_SUCCESS,\n    EDIT_ORG_LOAD_ERROR,\n    EDIT_ORG_UNLOAD,\n\n    EDIT_ORG_SAVE,\n    EDIT_ORG_SAVE_START,\n    EDIT_ORG_SAVE_SUCCESS,\n    EDIT_ORG_SAVE_ERROR,\n\n    // edit org, field level updates\n    EDIT_ORG_UPDATE_NAME,\n    EDIT_ORG_UPDATE_NAME_SUCCESS,\n    EDIT_ORG_UPDATE_NAME_ERROR,\n\n    EDIT_ORG_UPDATE_LOGO_URL,\n    EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n\n    EDIT_ORG_UPDATE_DESCRIPTION,\n    EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n\n    EDIT_ORG_UPDATE_IS_PRIVATE,\n    EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n\n    EDIT_ORG_UPDATE_HOME_URL,\n    EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n    EDIT_ORG_UPDATE_HOME_URL_ERROR,\n\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n    EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n\n    EDIT_ORG_EVALUATE,\n    EDIT_ORG_EVALUATE_OK,\n    EDIT_ORG_EVALUATE_ERRORS,\n\n    // Auth\n    AUTH_CHECK,\n    AUTH_CHECK_START,\n    AUTH_CHECK_ERROR,\n    AUTH_AUTHORIZED,\n    AUTH_UNAUTHORIZED,\n    AUTH_REMOVE_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION,\n    AUTH_ADD_AUTHORIZATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_LOAD,\n    ADMIN_MANAGE_REQUESTS_LOAD_START,\n    ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_LOAD_ERROR,\n    ADMIN_MANAGE_REQUESTS_UNLOAD,\n\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_ACCEPT_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_START,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_DENY_JOIN_REQUEST_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_START,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_CANCEL_JOIN_INVITATION_ERROR,\n\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_START,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS,\n    ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_ERROR,\n\n    // MEMBERS\n    VIEW_MEMBERS_LOAD,\n    VIEW_MEMBERS_LOAD_START,\n    VIEW_MEMBERS_LOAD_SUCCESS,\n    VIEW_MEMBERS_LOAD_ERROR,\n    VIEW_MEMBERS_UNLOAD,\n\n    VIEW_MEMBERS_REMOVE_MEMBER,\n    VIEW_MEMBERS_REMOVE_MEMBER_START,\n    VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_START,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_START,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n\n    // INVITE USER\n    INVITE_USER_LOAD,\n    INVITE_USER_LOAD_START,\n    INVITE_USER_LOAD_SUCCESS,\n    INVITE_USER_LOAD_ERROR,\n    INVITE_USER_UNLOAD,\n\n    INVITE_USER_SEARCH_USERS,\n    INVITE_USER_SEARCH_USERS_START,\n    INVITE_USER_SEARCH_USERS_SUCCESS,\n    INVITE_USER_SEARCH_USERS_ERROR,\n\n    INVITE_USER_SELECT_USER,\n    INVITE_USER_SELECT_USER_START,\n    INVITE_USER_SELECT_USER_SUCCESS,\n    INVITE_USER_SELECT_USER_ERROR,\n\n    INVITE_USER_SEND_INVITATION,\n    INVITE_USER_SEND_INVITATION_START,\n    INVITE_USER_SEND_INVITATION_SUCCESS,\n    INVITE_USER_SEND_INVITATION_ERROR,\n\n    // Manage Membership\n    MANAGE_MEMBERSHIP_LOAD,\n    MANAGE_MEMBERSHIP_LOAD_START,\n    MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n    MANAGE_MEMBERSHIP_LOAD_ERROR,\n    MANAGE_MEMBERSHIP_UNLOAD,\n\n    MANAGE_MEMBERSHIP_LEAVE_ORG,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_CONFIRMED,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_START,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS,\n    MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n\n    MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_START,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n\n    MANAGE_MEMBERSHIP_SAVE,\n    MANAGE_MEMBERSHIP_SAVE_START,\n    MANAGE_MEMBERSHIP_SAVE_SUCCESS,\n    MANAGE_MEMBERSHIP_SAVE_ERROR,\n\n    MANAGE_MEMBERSHIP_EVALUATE,\n    MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n    MANAGE_MEMBERSHIP_EVALUATE_ERROR,\n\n    // Narrative add requests\n    REQUEST_ADD_NARRATIVE_LOAD,\n    REQUEST_ADD_NARRATIVE_LOAD_START,\n    REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n    REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n    REQUEST_ADD_NARRATIVE_UNLOAD,\n\n    REQUEST_ADD_NARRATIVE_SEND,\n    REQUEST_ADD_NARRATIVE_SEND_START,\n    REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SEND_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n\n    REQUEST_ADD_NARRATIVE_SORT,\n    REQUEST_ADD_NARRATIVE_SORT_START,\n    REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n    REQUEST_ADD_NARRATIVE_SORT_ERROR,\n\n    // VIEWS\n\n    ORGANIZATION_CENTRIC_VIEW_LOAD,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_START,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    ORGANIZATION_CENTRIC_VIEW_UNLOAD,\n\n    // ENTITIES\n\n    ENTITY_USER_LOADER,\n    ENTITY_USER_LOADER_START,\n    ENTITY_USER_LOADER_SUCCESS,\n    ENTITY_USER_LOADER_ERROR,\n\n    ENTITY_ORGANIZATION_LOADER,\n    ENTITY_ORGANIZATION_LOADER_START,\n    ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    ENTITY_ORGANIZATION_LOADER_ERROR,\n\n    ENTITY_NARRATIVE_LOAD,\n    ENTITY_NARRATIVE_LOAD_START,\n    ENTITY_NARRATIVE_LOAD_SUCCESS,\n    ENTITY_NARRATIVE_LOAD_ERROR,\n\n    ENTITY_ORGANIZATION_LOAD,\n    ENTITY_ORGANIZATION_LOAD_START,\n    ENTITY_ORGANIZATION_LOAD_SUCCESS,\n    ENTITY_ORGANIZATION_LOAD_ERROR,\n\n    // GLOBAL ACTIONS\n    GLOBAL_ACCESS_NARRATIVE,\n    GLOBAL_ACCESS_NARRATIVE_START,\n    GLOBAL_ACCESS_NARRATIVE_SUCCESS,\n    GLOBAL_ACCESS_NARRATIVE_ERROR,\n\n    // NOTIFICATIONS\n    NOTIFICATIONS_LOAD,\n    NOTIFICATIONS_LOAD_START,\n    NOTIFICATIONS_LOAD_SUCCESS,\n    NOTIFICATIONS_LOAD_ERROR,\n    NOTIFICATIONS_UNLOAD,\n\n    NOTIFICATIONS_READ,\n    NOTIFICATIONS_READ_START,\n    NOTIFICATIONS_READ_SUCCESS,\n    NOTIFICATIONS_READ_ERROR,\n\n    // USER PROFILE\n    DATA_SERVICE_LOAD,\n    DATA_SERVICE_LOAD_START,\n    DATA_SERVICE_LOAD_SUCCESS,\n    DATA_SERVICE_LOAD_ERROR,\n    DATA_SERVICE_UNLOAD,\n\n    DATA_SERVICE_LOAD_REFRESH,\n    DATA_SERVICE_LOAD_REFRESH_START,\n    DATA_SERVICE_LOAD_REFRESH_SUCCESS,\n    DATA_SERVICE_LOAD_REFRESH_ERROR\n}\n","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, UIErrorType, ValidationState, ComponentLoadingState, SyncState, ValidationErrorType } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, Unload,\n    SaveError, SaveStart, SaveSuccess, AddOrgEvaluateOK, AddOrgEvaluateErrors,\n    LoadSuccess, UpdateNameSuccess, UpdateNameError,\n    UpdateIdSuccess, UpdateIdError, UpdateDescriptionSuccess,\n    UpdateDescriptionError,\n    LoadError,\n    UpdateIdPass,\n    UpdateIsPrivateSuccess,\n    UpdateLogoUrlSuccess,\n    UpdateLogoUrlError,\n    UpdateHomeUrlSuccess,\n    UpdateHomeUrlError,\n    UpdateResearchInterestsSuccess,\n    UpdateResearchInterestsError\n} from '../actions/addOrg'\nimport Validation from '../../data/models/organization/validation';\n\n// ADD ORG\n\nexport function saveStart(state: StoreState, action: SaveStart): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveStart without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: SaveSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function saveError(state: StoreState, action: SaveError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateOk(state: StoreState, action: AddOrgEvaluateOK): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrgEvaluateErrors(state: StoreState, action: AddOrgEvaluateErrors): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting saveSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'TODO: form error',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    },\n                    saveState: SaveState.NEW,\n                    error: null,\n                    newOrganization: action.newOrganization\n                }\n            }\n        }\n    }\n}\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// Name\nexport function updateNameSuccess(state: StoreState, action: UpdateNameSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            },\n                            // editState: EditState.EDITED,\n                            // validatedAt: new Date(),\n                            // error: {\n                            //     type: UIErrorType.NONE\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateNameError(state: StoreState, action: UpdateNameError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateNameError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        name: {\n                            ...state.views.addOrgView.viewModel.newOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                            // editState: EditState.EDITED,\n                            // validatedAt: new Date(),\n                            // error: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo URL\nexport function updateLogoUrlSuccess(state: StoreState, action: UpdateLogoUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateLogoUrlError(state: StoreState, action: UpdateLogoUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Logo URL error without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        logoUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.logoUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Home URL\nexport function updateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Home URL (success) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to home url without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        homeUrl: {\n                            ...state.views.addOrgView.viewModel.newOrganization.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            value: action.homeUrl,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Research Interests\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting Research Interests without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting update to research interests (error) without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        researchInterests: {\n                            ...state.views.addOrgView.viewModel.newOrganization.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            value: action.researchInterests,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Id\n\nexport function updateIdSuccess(state: StoreState, action: UpdateIdSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            // value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdError(state: StoreState, action: UpdateIdError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            // value: action.id,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIdPass(state: StoreState, action: UpdateIdPass): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        id: {\n                            ...state.views.addOrgView.viewModel.newOrganization.id,\n                            value: action.id,\n                            syncState: SyncState.DIRTY\n                            // validationState: {\n                            //     type: ValidationErrorType.OK,\n                            //     validatedAt: new Date()\n                            // }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: UpdateDescriptionSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionError(state: StoreState, action: UpdateDescriptionError): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateDescriptionError without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        description: {\n                            ...state.views.addOrgView.viewModel.newOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.addOrgView.viewModel) {\n        console.warn('attempting updateIdSuccess without view model')\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            addOrgView: {\n                ...state.views.addOrgView,\n                viewModel: {\n                    ...state.views.addOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    newOrganization: {\n                        ...state.views.addOrgView.viewModel.newOrganization,\n                        isPrivate: {\n                            ...state.views.addOrgView.viewModel.newOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: SyncState.DIRTY,\n                            validationState: {\n                                type: ValidationErrorType.OK,\n                                validatedAt: new Date()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.ADD_ORG_SAVE:\n            return saveStart(state, action as SaveStart)\n        case ActionFlag.ADD_ORG_SAVE_SUCCESS:\n            return saveSuccess(state, action as SaveSuccess)\n        case ActionFlag.ADD_ORG_SAVE_ERROR:\n            return saveError(state, action as SaveError)\n\n        case ActionFlag.ADD_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.ADD_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.ADD_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n        case ActionFlag.ADD_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS:\n            return updateNameSuccess(state, action as UpdateNameSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_NAME_ERROR:\n            return updateNameError(state, action as UpdateNameError)\n\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return updateLogoUrlSuccess(state, action as UpdateLogoUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR:\n            return updateLogoUrlError(state, action as UpdateLogoUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS:\n            return updateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR:\n            return updateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS:\n            return updateIdSuccess(state, action as UpdateIdSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_ID_ERROR:\n            return updateIdError(state, action as UpdateIdError)\n        case ActionFlag.ADD_ORG_UPDATE_ID_PASS:\n            return updateIdPass(state, action as UpdateIdPass)\n\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as UpdateDescriptionSuccess)\n        case ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR:\n            return updateDescriptionError(state, action as UpdateDescriptionError)\n\n        case ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        case ActionFlag.ADD_ORG_EVALUATE_OK:\n            return addOrgEvaluateOk(state, action as AddOrgEvaluateOK)\n        case ActionFlag.ADD_ORG_EVALUATE_ERRORS:\n            return addOrgEvaluateErrors(state, action as AddOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { StoreState, EditState, SaveState, ComponentLoadingState, ValidationErrorType, SyncState, ValidationState, ValidationStateOk, EditOrgViewModel } from '../../types';\nimport { ActionFlag } from '../actions';\nimport {\n    LoadStart, LoadSuccess, LoadError,\n    EditOrgEvaluateOK, EditOrgEvaluateErrors,\n    EditOrgSave, EditOrgSaveStart, EditOrgSaveError, EditOrgSaveSuccess,\n    EditOrgUpdateNameSuccess, EditOrgUpdateNameError,\n    // EditOrgUpdateIdSuccess, EditOrgUpdateIdError,\n    EditOrgUpdateDescriptionSuccess, EditOrgUpdateDescriptionError,\n    UpdateIsPrivateSuccess, EditOrgUpdateLogoUrlSuccess, EditOrgUpdateLogoUrlError, UpdateHomeUrlSuccess, UpdateHomeUrlError, UpdateResearchInterestsError, UpdateResearchInterestsSuccess, Unload\n} from '../actions/editOrg'\nimport { StateInstances } from '../state';\n\n\n\n// EDIT ORG\n\n// Edit session loading\n\nexport function loadStart(state: StoreState, action: LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function loadSuccess(state: StoreState, action: LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: EditState.UNEDITED,\n                    validationState: validationStateOk(),\n                    // validationState: {\n                    //     type: ValidationErrorType.OK,\n                    //     validatedAt: new Date()\n                    // },\n                    saveState: SaveState.NEW,\n                    // TODO: get rid of this...\n                    // organizationId: action.id,\n                    organization: action.organization,\n                    saveError: null,\n                    editedOrganization: action.editedOrganization\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\n// save\n\nexport function editOrgSaveStart(state: StoreState, action: EditOrgSaveStart): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveSuccess(state: StoreState, action: EditOrgSaveSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editedOrganization: {\n                        id: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.id,\n                            syncState: SyncState.CLEAN\n                        },\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            syncState: SyncState.CLEAN\n                        },\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            syncState: SyncState.CLEAN\n                        },\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            syncState: SyncState.CLEAN\n                        },\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            syncState: SyncState.CLEAN\n                        },\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgSaveError(state: StoreState, action: EditOrgSaveError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    saveError: action.error\n                }\n            }\n        }\n    }\n}\n\n// Evaluate edit session\n\nexport function editOrgEvaluateOk(state: StoreState, action: EditOrgEvaluateOK): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgEvaluateErrors(state: StoreState, action: EditOrgEvaluateErrors): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation errors',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateEditorState(viewModel: EditOrgViewModel): EditState {\n    if (viewModel.editedOrganization.name.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.id.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.logoUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.homeUrl.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.researchInterests.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.isPrivate.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    if (viewModel.editedOrganization.description.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\n\n\n// Name\nexport function editOrgUpdateNameSuccess(state: StoreState, action: EditOrgUpdateNameSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.name !== editedOrg.name.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    // editState: editState,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateNameError(state: StoreState, action: EditOrgUpdateNameError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        name: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.name,\n                            value: action.name,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Logo url\nexport function editOrgUpdateLogoUrlSuccess(state: StoreState, action: EditOrgUpdateLogoUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(state: StoreState, action: EditOrgUpdateLogoUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        logoUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.logoUrl,\n                            value: action.logoUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Home Url\n\n// Logo url\nexport function editOrgUpdateHomeUrlSuccess(state: StoreState, action: UpdateHomeUrlSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateHomeUrlError(state: StoreState, action: UpdateHomeUrlError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        homeUrl: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.homeUrl,\n                            value: action.homeUrl,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Update Research Interests\n\n// Logo url\nexport function updateResearchInterestsSuccess(state: StoreState, action: UpdateResearchInterestsSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function updateResearchInterestsError(state: StoreState, action: UpdateResearchInterestsError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        researchInterests: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.researchInterests,\n                            value: action.researchInterests,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateDescriptionSuccess(state: StoreState, action: EditOrgUpdateDescriptionSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.description !== editedOrg.description.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function editOrgUpdateDescriptionError(state: StoreState, action: EditOrgUpdateDescriptionError): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        description: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.description,\n                            value: action.description,\n                            syncState: SyncState.DIRTY,\n                            validationState: action.error\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function updateIsPrivateSuccess(state: StoreState, action: UpdateIsPrivateSuccess): StoreState {\n    if (!state.views.editOrgView.viewModel) {\n        return state\n    }\n\n\n    const editedOrg = state.views.editOrgView.viewModel.editedOrganization\n    let syncState\n    if (action.isPrivate !== editedOrg.isPrivate.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...state.views.editOrgView,\n                viewModel: {\n                    ...state.views.editOrgView.viewModel,\n                    editState: EditState.EDITED,\n                    editedOrganization: {\n                        ...state.views.editOrgView.viewModel.editedOrganization,\n                        isPrivate: {\n                            ...state.views.editOrgView.viewModel.editedOrganization.isPrivate,\n                            value: action.isPrivate,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // This bit is just to ensure that the overall edit state (used for controlling, e.g., the \n    // enablement of a save button).\n    const editState = evaluateEditorState(newState.views.editOrgView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            editOrgView: {\n                ...newState.views.editOrgView,\n                viewModel: {\n                    ...newState.views.editOrgView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\n\nexport function reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.EDIT_ORG_LOAD_START:\n            return loadStart(state, action as LoadStart)\n        case ActionFlag.EDIT_ORG_LOAD_SUCCESS:\n            return loadSuccess(state, action as LoadSuccess)\n        case ActionFlag.EDIT_ORG_LOAD_ERROR:\n            return loadError(state, action as LoadError)\n\n        case ActionFlag.EDIT_ORG_UNLOAD:\n            return unload(state, action as Unload)\n\n        case ActionFlag.EDIT_ORG_SAVE_START:\n            return editOrgSaveStart(state, action as EditOrgSaveStart)\n        case ActionFlag.EDIT_ORG_SAVE_SUCCESS:\n            return editOrgSaveSuccess(state, action as EditOrgSaveSuccess)\n        case ActionFlag.EDIT_ORG_SAVE_ERROR:\n            return editOrgSaveError(state, action as EditOrgSaveError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS:\n            return editOrgUpdateNameSuccess(state, action as EditOrgUpdateNameSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR:\n            return editOrgUpdateNameError(state, action as EditOrgUpdateNameError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS:\n            return editOrgUpdateLogoUrlSuccess(state, action as EditOrgUpdateLogoUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR:\n            return editOrgUpdateLogoUrlError(state, action as EditOrgUpdateLogoUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS:\n            return editOrgUpdateHomeUrlSuccess(state, action as UpdateHomeUrlSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR:\n            return editOrgUpdateHomeUrlError(state, action as UpdateHomeUrlError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS:\n            return updateResearchInterestsSuccess(state, action as UpdateResearchInterestsSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR:\n            return updateResearchInterestsError(state, action as UpdateResearchInterestsError)\n\n        case ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS:\n            return updateIsPrivateSuccess(state, action as UpdateIsPrivateSuccess)\n\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS:\n        //     return editOrgUpdateIdSuccess(state, action as EditOrgUpdateIdSuccess)\n        // case ActionFlag.EDIT_ORG_UPDATE_ID_ERROR:\n        //     return editOrgUpdateIdError(state, action as EditOrgUpdateIdError)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS:\n            return updateDescriptionSuccess(state, action as EditOrgUpdateDescriptionSuccess)\n        case ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR:\n            return editOrgUpdateDescriptionError(state, action as EditOrgUpdateDescriptionError)\n        case ActionFlag.EDIT_ORG_EVALUATE_OK:\n            return editOrgEvaluateOk(state, action as EditOrgEvaluateOK)\n        case ActionFlag.EDIT_ORG_EVALUATE_ERRORS:\n            return editOrgEvaluateErrors(state, action as EditOrgEvaluateErrors)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/acceptInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function acceptInboxRequestSuccess(state: StoreState, action: actions.AcceptRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS:\n            return acceptInboxRequestSuccess(state, action as actions.AcceptRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n// export function loadStart(state: StoreState, action: actions.LoadStart) {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.LOADING,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function unload(state: StoreState, action: actions.Unload): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.NONE,\n//                 viewModel: null,\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.SUCCESS,\n//                 viewModel: {\n//                     organization: action.organization,\n//                     relation: action.relation\n//                 },\n//                 error: null\n//             }\n//         }\n//     }\n// }\n\n// export function loadError(state: StoreState, action: actions.LoadError): StoreState {\n//     return {\n//         ...state,\n//         views: {\n//             ...state.views,\n//             viewMembersView: {\n//                 ...state.views.viewMembersView,\n//                 loadingState: ComponentLoadingState.ERROR,\n//                 viewModel: null,\n//                 error: action.error\n//             }\n//         }\n//     }\n// }\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.ADMIN\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            return {\n                ...member,\n                type: MemberType.MEMBER\n            }\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport function removeMemberSuccess(state: StoreState, action: actions.RemoveMemberSuccess): StoreState {\n    const {\n        views: { viewOrgView: { viewModel } }\n    } = state\n\n    if (viewModel === null) {\n        return state\n    }\n\n    // TODO: ugh, cut this off before getting here.\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    const sortedMembers = viewModel.members.filter((member) => {\n        return (member.username !== action.memberUsername)\n    })\n\n    console.log('members?', members)\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...viewModel,\n                    organization: {\n                        ...viewModel.organization,\n                        members: members\n                    },\n                    members: sortedMembers\n                }\n            }\n        }\n    }\n}\n\n\nexport function sortMembersSuccess(state: StoreState, action: actions.SortMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortMembersBy: action.sortBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nexport function searchMembersSuccess(state: StoreState, action: actions.SearchMembersSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchMembersBy: action.searchBy,\n                    members: action.members\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        // case ActionFlag.VIEW_MEMBERS_LOAD_START:\n        //     return loadStart(state, action as actions.LoadStart)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n        //     return loadSuccess(state, action as actions.LoadSuccess)\n        // case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n        //     return loadError(state, action as actions.LoadError)\n        // case ActionFlag.VIEW_MEMBERS_UNLOAD:\n        //     return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        case ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS:\n            return removeMemberSuccess(state, action as actions.RemoveMemberSuccess)\n        case ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS:\n            return sortMembersSuccess(state, action as actions.SortMembersSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS:\n            return searchMembersSuccess(state, action as actions.SearchMembersSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/denyInboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function rejectInboxRequestSuccess(state: StoreState, action: actions.RejectInboxRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestInbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS:\n            return rejectInboxRequestSuccess(state, action as actions.RejectInboxRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/cancelOutboxRequest'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\n\nexport function cancelRequestSuccess(state: StoreState, action: actions.CancelJoinRequestSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    requestOutbox: action.requests\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS:\n            return cancelRequestSuccess(state, action as actions.CancelJoinRequestSuccess)\n        default:\n            return null\n    }\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../../actions/viewOrganization/manageRelatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind, ViewOrgSubViewKind, ViewState, SelectableRelatableOrganization } from '../../../types';\nimport { ActionFlag } from '../../actions';\nimport { OrganizationModel } from '../../../data/models/organization/model';\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    // if (state.views.viewOrgView.viewModel.subView.kind !== ViewOrgSubViewKind.MANAGE_RELATED_ORGS) {\n    //     return state\n    // }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.OK,\n                            error: null,\n                            viewModel: {\n                                kind: ViewOrgSubViewKind.MANAGE_RELATED_ORGS,\n                                relatedOrganizations: state.views.viewOrgView.viewModel.organization.relatedOrganizations,\n                                organization: state.views.viewOrgView.viewModel.organization,\n                                organizations: action.organizations,\n                                selectedOrganization: null\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            state: ViewState.NONE,\n                            error: null,\n                            viewModel: null\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function selectOrganization(state: StoreState, action: actions.SelectOrganization): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const organizations = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.organizations.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.selectedOrganization.organization.id) {\n            relatedOrg.isSelected = true\n        } else {\n            relatedOrg.isSelected = false\n        }\n        return relatedOrg\n    })\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                selectedOrganization: action.selectedOrganization,\n                                organizations\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addOrganization(state: StoreState, action: actions.AddOrganizationSuccess): StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n    const orgs = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.organizations\n    const newRelatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.concat([action.organizationId])\n\n    const organizations = orgs.map((relatedOrg: SelectableRelatableOrganization) => {\n        if (newRelatedOrgs.includes(relatedOrg.organization.id)) {\n            relatedOrg.isRelated = true\n        } else {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: newRelatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                organizations\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganizationSuccess): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        return state\n    }\n\n    // Remove from the related orgs\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    // Update the related status of the org in the management interface.\n    const organizations = state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel.organizations.filter((relatedOrg: SelectableRelatableOrganization) => {\n        if (relatedOrg.organization.id === action.organizationId) {\n            relatedOrg.isRelated = false\n        }\n        return relatedOrg\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    },\n                    subViews: {\n                        ...state.views.viewOrgView.viewModel.subViews,\n                        manageRelatedOrganizationsView: {\n                            ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView,\n                            viewModel: {\n                                ...state.views.viewOrgView.viewModel.subViews.manageRelatedOrganizationsView.viewModel,\n                                organizations\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION:\n            return selectOrganization(state, action as actions.SelectOrganization)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS:\n            return addOrganization(state, action as actions.AddOrganizationSuccess)\n        case ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganizationSuccess)\n        default:\n            return null\n    }\n}\n","import * as actions from '../../actions/viewOrganization/relatedOrganizations'\nimport { StoreState, ViewOrgViewModelKind } from '../../../types'\nimport { Action } from 'redux'\nimport { ActionFlag } from '../../actions'\n\nexport function removeOrganization(state: StoreState, action: actions.RemoveOrganization): StoreState {\n\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n\n    if (state.views.viewOrgView.viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n\n    const relatedOrgs = state.views.viewOrgView.viewModel.organization.relatedOrganizations.filter((organizationId: string) => {\n        return (organizationId !== action.organizationId)\n    })\n\n    console.log('hmm', relatedOrgs, action.organizationId)\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        relatedOrganizations: relatedOrgs\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS:\n            return removeOrganization(state, action as actions.RemoveOrganization)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../actions/viewOrg'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport acceptInboxRequest from './viewOrganization/acceptInboxRequest'\nimport viewMembers from './viewOrganization/viewMembers'\nimport denyInboxRequest from './viewOrganization/denyInboxRequest'\nimport cancelOutboxRequest from './viewOrganization/cancelOutboxRequests'\nimport manageRelatedOrganizations from './viewOrganization/manageRelatedOrganizations'\nimport relatedOrganizations from './viewOrganization/relatedOrganizations'\n\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadNormalSuccess(state: types.StoreState, action: actions.LoadNormalSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.NORMAL,\n                    organization: action.organization,\n                    relation: action.relation,\n                    openRequest: action.openRequest,\n                    groupRequests: action.groupRequests,\n                    groupInvitations: action.groupInvitations,\n                    requestInbox: action.requestInbox,\n                    requestOutbox: action.requestOutbox,\n                    sortNarrativesBy: action.narrativesSortBy,\n                    searchNarrativesBy: '',\n                    narratives: action.narratives,\n                    sortMembersBy: action.sortMembersBy,\n                    members: action.members,\n                    searchMembersBy: '',\n                    subViews: {\n                        manageRelatedOrganizationsView: {\n                            state: types.ViewState.NONE,\n                            viewModel: null,\n                            error: null\n                        }\n                    }\n                } as types.ViewOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(state: types.StoreState, action: actions.LoadInaccessiblePrivateSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    kind: types.ViewOrgViewModelKind.PRIVATE_INACCESSIBLE,\n                    organization: action.organization,\n                    relation: action.relation,\n                    requestOutbox: action.requestOutbox\n                } as types.ViewInaccessiblePrivateOrgViewModel\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function removeNarrativeSuccess(state: types.StoreState, action: actions.RemoveNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    // Argh!@\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    const newNarratives = state.views.viewOrgView.viewModel.organization.narratives.filter((narrative) => {\n        return (narrative.workspaceId !== action.narrative.workspaceId)\n    })\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: {\n                        ...state.views.viewOrgView.viewModel.organization,\n                        narratives: newNarratives\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function accessNarrativeSuccess(state: types.StoreState, action: actions.AccessNarrativeSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    organization: action.organization\n                }\n            }\n        }\n    }\n}\n\nexport function sortNarrativesSuccess(state: types.StoreState, action: actions.SortNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    sortNarrativesBy: action.sortBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nexport function searchNarrativesSuccess(state: types.StoreState, action: actions.SearchNarrativesSuccess): types.StoreState {\n    if (!state.views.viewOrgView.viewModel) {\n        return state\n    }\n    if (state.views.viewOrgView.viewModel.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            ...state.views,\n            viewOrgView: {\n                ...state.views.viewOrgView,\n                viewModel: {\n                    ...state.views.viewOrgView.viewModel,\n                    searchNarrativesBy: action.searchBy,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\n\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_ORG_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS:\n            return loadNormalSuccess(state, action as actions.LoadNormalSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS:\n            return loadInaccessiblePrivateSuccess(state, action as actions.LoadInaccessiblePrivateSuccess)\n        case ActionFlag.VIEW_ORG_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_ORG_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS:\n            return removeNarrativeSuccess(state, action as actions.RemoveNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        case ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS:\n            return sortNarrativesSuccess(state, action as actions.SortNarrativesSuccess)\n        case ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS:\n            return searchNarrativesSuccess(state, action as actions.SearchNarrativesSuccess)\n\n    }\n\n    return acceptInboxRequest(state, action) ||\n        denyInboxRequest(state, action) ||\n        cancelOutboxRequest(state, action) ||\n        viewMembers(state, action) ||\n        manageRelatedOrganizations(state, action) ||\n        relatedOrganizations(state, action)\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/browseOrgs'\nimport { StoreState, SortDirection, ComponentLoadingState, BrowseOrgsView } from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function applyOrgSearch(orgs: Array<orgModel.Organization>, searchTerms: Array<string>) {\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTerms.every((term) => {\n            // todo : make more efficient!!!\n            return (new RegExp(term, 'i').test(org.name));\n        })\n    })\n\n    return {\n        organizations: filteredOrgs,\n        totalCount: orgs.length,\n        filteredCount: filteredOrgs.length\n    }\n}\n\n// TODO:\n// dispatch the start of the request\n// do the request\n// dispatch the success (will be same for all queries?)\n// dispatch the error\n// FOR NOW:\n// do it here...\nexport function searchOrgs(state: BrowseOrgsView, action: actions.SearchOrgs): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    // const { viewModel: { filter, sortBy, sortDirection } } = state\n\n    // const query: Query = {\n    //     searchTerms: action.searchTerms,\n    //     filter: filter,\n    //     sortBy: sortBy,\n    //     sortDirection: sortDirection,\n    //     username: state.auth.authorization.username\n    // }\n    // const result = queryOrgs(state.rawOrganizations, query)\n    // rawOrganizations: Array<Organization>\n    // organizations: Array<Organization>\n    // totalCount: number\n    // filteredCount: number\n    // sortBy: string\n    // sortDirection: SortDirection\n    // filter: string\n    // searchTerms: Array<string>\n    // selectedOrganizationId: string | null\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            selectedOrganizationId: null,\n            searchTerms: action.searchTerms,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsStart(state: BrowseOrgsView, action: actions.SearchOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: true\n        }\n    }\n}\n\nexport function searchOrgsSuccess(state: BrowseOrgsView, action: actions.SearchOrgsSuccess): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            organizations: action.organizations,\n            openRequests: action.openRequests,\n            totalCount: action.totalCount,\n            filteredCount: action.organizations.length,\n            searching: false\n        }\n    }\n}\n\n// TODO: hmm, uses the global error -- this was early in the development of this (a whole two weeks ago!)\n// and this should now go in the \"browseOrgs\" (or better named \"searchOrgs\") branch.\nexport function searchOrgsError(state: BrowseOrgsView, action: actions.SearchOrgsError): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            searching: false,\n            error: action.error\n        }\n    }\n}\n\n\nexport function sortOrgsStart(state: BrowseOrgsView, action: actions.SortOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            sortField: action.sortField,\n            sortDirection: action.sortDirection,\n            searching: true\n        }\n    }\n}\n\n\ninterface Query {\n    searchTerms: Array<string>,\n    username: string,\n    sortField: string,\n    sortDirection: SortDirection,\n    filter: string\n}\n\ninterface QueryResults {\n    organizations: Array<orgModel.Organization>,\n    total: number\n}\n\nfunction filterOrgsStart(state: BrowseOrgsView, action: actions.FilterOrgsStart): BrowseOrgsView {\n    if (state.viewModel === null) {\n        console.warn('Cannot start browseOrgs view')\n        return state\n    }\n\n    const { filter } = action\n\n    return {\n        ...state,\n        viewModel: {\n            ...state.viewModel,\n            filter,\n            searching: true\n        }\n    }\n}\n\nfunction loadSuccess(state: BrowseOrgsView, action: actions.LoadSuccess): BrowseOrgsView {\n    const { defaultViewModel: {\n        rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n        totalCount, filteredCount, selectedOrganizationId, error, searching\n    } } = action\n\n    return {\n        ...state,\n        loadingState: ComponentLoadingState.SUCCESS,\n        error: null,\n        viewModel: {\n            rawOrganizations, organizations, openRequests, searchTerms, sortField, sortDirection, filter,\n            totalCount, filteredCount, selectedOrganizationId, error, searching\n        }\n    }\n}\n\nfunction unload(state: BrowseOrgsView, action: actions.Unload): BrowseOrgsView {\n    return {\n        loadingState: ComponentLoadingState.NONE,\n        error: null,\n        viewModel: null\n    }\n}\n\nfunction localReducer(state: BrowseOrgsView, action: Action): BrowseOrgsView | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.BROWSE_ORGS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH:\n            return searchOrgs(state, action as actions.SearchOrgs)\n        case ActionFlag.BROWSE_ORGS_SEARCH_START:\n            return searchOrgsStart(state, action as actions.SearchOrgsStart)\n        case ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS:\n            return searchOrgsSuccess(state, action as actions.SearchOrgsSuccess)\n        case ActionFlag.BROWSE_ORGS_SEARCH_ERROR:\n            return searchOrgsError(state, action as actions.SearchOrgsError)\n        // case ActionFlag.SORT_ORGS_STAR:\n        //     return sortOrgs(state, action as actions.SortOrgs)\n        case ActionFlag.BROWSE_ORGS_SORT_START:\n            return sortOrgsStart(state, action as actions.SortOrgsStart)\n        case ActionFlag.BROWSE_ORGS_FILTER_START:\n            return filterOrgsStart(state, action as actions.FilterOrgsStart)\n        case ActionFlag.BROWSE_ORGS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action<any>): StoreState | null {\n    const browseOrgsView = localReducer(state.views.browseOrgsView, action)\n    if (!browseOrgsView) {\n        return null\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            browseOrgsView\n        }\n    }\n}\n","import { Action } from 'redux'\n\nimport { ActionFlag } from '../actions'\nimport { StoreState, AuthState } from '../../types'\nimport { AuthCheckStart, AuthAuthorized, AuthUnauthorized, AuthCheckError } from '../actions/auth';\n\nexport function authCheckStart(state: StoreState, action: AuthCheckStart): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.CHECKING,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authCheckError(state: StoreState, action: AuthCheckError): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.ERROR,\n            message: action.error.message,\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nexport function authAuthorized(state: StoreState, action: AuthAuthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.AUTHORIZED,\n            message: '',\n            authorization: {\n                token: action.token,\n                username: action.username,\n                realname: action.realname,\n                roles: action.roles\n            }\n        }\n    }\n}\n\nexport function authUnauthorized(state: StoreState, action: AuthUnauthorized): StoreState {\n    return {\n        ...state,\n        auth: {\n            status: AuthState.UNAUTHORIZED,\n            message: '',\n            authorization: {\n                token: '',\n                username: '',\n                realname: '',\n                roles: []\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.AUTH_CHECK_START:\n            return authCheckStart(state, action as AuthCheckStart)\n        case ActionFlag.AUTH_AUTHORIZED:\n            return authAuthorized(state, action as AuthAuthorized)\n        case ActionFlag.AUTH_UNAUTHORIZED:\n            return authUnauthorized(state, action as AuthUnauthorized)\n        case ActionFlag.AUTH_CHECK_ERROR:\n            return authCheckError(state, action as AuthCheckError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport { ActionFlag } from '../actions'\nimport { AppSuccess } from '../actions/app';\nimport { StoreState, AppState } from '../../types';\n\nexport function appSuccess(state: StoreState, action: AppSuccess): StoreState {\n    return {\n        ...state,\n        app: {\n            status: AppState.READY,\n            config: action.config\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.APP_SUCCESS:\n            return appSuccess(state, action as AppSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageOrganizationRequests'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(\n    state: StoreState,\n    action: actions.LoadStart): StoreState {\n    return state\n}\n\nexport function loadSuccess(\n    state: StoreState,\n    action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    requests: action.requests,\n                    invitations: action.invitations\n                },\n            }\n        }\n    }\n}\n\nexport function loadError(\n    state: StoreState,\n    action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function getViewAccessSuccess(state: StoreState, action: actions.GetViewAccessSuccess): StoreState {\n    // Note: we use the state object rather than peeling off the viewModel because\n    // TS can't trace the assertion (not falsy) of the variable back to the object \n    // property it was taken from.\n    if (!state.views.manageOrganizationRequestsView.viewModel) {\n        return state\n    }\n    const requests = state.views.manageOrganizationRequestsView.viewModel.requests\n    const newRequests = requests.map((request) => {\n        if (request.id = action.request.id) {\n            return action.request\n        }\n        return request\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageOrganizationRequestsView: {\n                ...state.views.manageOrganizationRequestsView,\n                viewModel: {\n                    // TODO: below, \n                    ...state.views.manageOrganizationRequestsView.viewModel,\n                    requests: newRequests\n                }\n            }\n        }\n    }\n}\n\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.ADMIN_MANAGE_REQUESTS_GET_VIEW_ACCESS_SUCCESS:\n            return getViewAccessSuccess(state, action as actions.GetViewAccessSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/viewMembers'\nimport { StoreState, ComponentLoadingState, MemberType } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart) {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.LOADING,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.NONE,\n                viewModel: null,\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                viewModel: {\n                    organization: action.organization,\n                    relation: action.relation\n                },\n                error: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                loadingState: ComponentLoadingState.ERROR,\n                viewModel: null,\n                error: action.error\n            }\n        }\n    }\n}\n\nexport function promoteToAdminSuccess(state: StoreState, action: actions.PromoteToAdminSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.ADMIN\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function demoteToMemberSuccess(state: StoreState, action: actions.DemoteToMemberSuccess): StoreState {\n    if (state.views.viewMembersView.viewModel === null) {\n        return state\n    }\n\n    const {\n        views: { viewMembersView: { viewModel } }\n    } = state\n\n    // TODO: probably better is to have to have the action handler do a call to get the members\n    // and to populate the orgs membership struct from that...\n    const members = viewModel.organization.members.map((member) => {\n        if (member.username === action.memberUsername) {\n            member.type = MemberType.MEMBER\n            return member\n        } else {\n            return member\n        }\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            viewMembersView: {\n                ...state.views.viewMembersView,\n                viewModel: {\n                    ...state.views.viewMembersView.viewModel,\n                    organization: {\n                        ...state.views.viewMembersView.viewModel!.organization,\n                        members: members\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    // NB using discriminant union nature of the ActionX types to narrow\n    // the type.\n\n    switch (action.type) {\n        case ActionFlag.VIEW_MEMBERS_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.VIEW_MEMBERS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.VIEW_MEMBERS_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.VIEW_MEMBERS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS:\n            return promoteToAdminSuccess(state, action as actions.PromoteToAdminSuccess)\n        case ActionFlag.VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS:\n            return demoteToMemberSuccess(state, action as actions.DemoteToMemberSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { AppException } from \"../../types\";\nimport { string } from \"prop-types\";\n\nexport interface GroupsServiceInfo {\n    servname: string;\n    version: string;\n    servertime: number;\n    gitcommithash: string\n}\n\nexport type Username = string\nexport type GroupID = string\n\nexport interface Member {\n    name: Username,\n    joined: number,\n    lastvisit: number | null,\n    custom: {\n        title: string\n    }\n}\n\nexport interface WorkspaceInfo {\n    rid: string\n    name: string\n    narrname: string\n    narrcreate: number\n    public: boolean\n    perm: string\n    description: string\n    moddate: number\n}\n\nexport interface AppInfo {\n    rid: string\n}\n\nexport type Role = \"None\" | \"Member\" | \"Admin\" | \"Owner\"\n\nexport interface GroupCustomFields {\n    logourl?: string\n    description: string\n    researchinterests: string\n    homeurl?: string\n    relatedgroups?: string\n}\n\nexport interface BriefGroup {\n    id: GroupID\n    name: string\n    createdate: number\n    moddate: number\n    lastvisit: number | null\n    private: boolean\n    role: Role\n\n    custom: GroupCustomFields\n    // owner: Member\n    owner: Username\n\n    memcount: number\n    rescount: {\n        workspace: number\n    }\n}\n\nexport interface InaccessiblePrivateGroup {\n    id: GroupID\n    private: boolean\n    role: Role\n}\n\nexport interface Group {\n    id: GroupID\n    private: boolean\n    privatemembers: boolean\n    name: string\n    role: Role\n    owner: Member\n    admins: Array<Member>\n    members: Array<Member>\n    memcount: number\n    createdate: number\n    moddate: number\n    lastvisit: number\n    resources: {\n        workspace: Array<WorkspaceInfo>,\n        catalogmethod: Array<AppInfo>\n    }\n    rescount: {\n        workspace: number\n        catalogmethod: number\n    }\n    custom: GroupCustomFields\n}\n\nexport interface NewGroup {\n    id: string\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    isPrivate: boolean\n}\n\nexport interface GroupUpdate {\n    name: string\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    private: boolean\n}\n\nexport interface Request {\n    id: string\n    groupid: string\n    requester: Username\n    type: string\n    status: string\n    resource: string\n    resourcetype: string\n    createdate: number\n    expiredate: number\n    moddate: number\n}\n\nexport interface RequestWithCompletion extends Request {\n    complete: false\n}\n\nexport interface Completion {\n    complete: true\n}\n\nexport interface ErrorInfo {\n    appcode: number\n    apperror: string\n    callid: string\n    httpcode: number\n    httpstatus: string\n    message: string\n    time: number\n}\n\nexport interface ErrorResult {\n    error: ErrorInfo\n}\n\n// Error types: (appcode)\n// 10000\tAuthentication failed\n// 10010\tNo authentication token\n// 10020\tInvalid token\n// 20000\tUnauthorized\n// 30000\tMissing input parameter\n// 30001\tIllegal input parameter\n// 30010\tIllegal user name\n// 40000\tGroup already exists\n// 40010\tRequest already exists\n// 40020\tUser already group member\n// 40030\tWorkspace already in group\n// 50000\tNo such group\n// 50010\tNo such request\n// 50020\tNo such user\n// 50030\tNo such workspace\n// 60000\tUnsupported operation\n\nexport interface GroupExists {\n    exists: boolean\n}\n\n// export interface GroupRequest {\n//     id: string,\n//     groupid: string,\n//     requester: Username,\n//     type: string,\n//     status: string,\n//     resource: string\n//     resourcetype: string\n//     createdate: number,\n//     expiredate: number,\n//     moddate: number\n// }\n\nexport enum SortDirection {\n    ASCENDING = 0,\n    DESCENDING\n}\n\nexport interface GetRequestsParams {\n    includeClosed?: boolean,\n    sortDirection?: SortDirection,\n    startAt?: Date\n}\n\nexport interface RequestMemebershipParams {\n    groupId: string\n}\n\nexport interface RequestNarrativeParams {\n    workspaceId: number\n    groupId: string\n}\n\nfunction promiseTry<T>(fun: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        try {\n            return resolve(fun())\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n}\n\nexport interface GroupError {\n    httpcode: number\n    httpstatus: string\n    appcode: number\n    apperror: string\n    message: string\n    callid: string\n    time: number\n}\n\nexport class Exception extends Error {\n\n}\n\nexport class GroupException extends AppException {\n    originalError: GroupError\n    constructor(error: GroupError) {\n        super({\n            code: 'group-exception',\n            message: error.apperror,\n            detail: error.message,\n            info: new Map<string, any>([\n                ['httpcode', error.httpcode],\n                ['httpstatus', error.httpstatus],\n                ['appcode', error.appcode],\n                ['apperror', error.apperror],\n                ['message', error.message],\n                ['callid', error.callid],\n                ['time', error.time]\n            ])\n        })\n        this.name = 'GroupException'\n        this.originalError = error\n    }\n}\n\nexport interface RequestStatus {\n    new: 'None' | 'New' | 'Old'\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport class GroupsClient {\n    token: string;\n    url: string;\n\n    constructor({ token, url }: { token: string, url: string }) {\n        this.token = token\n        this.url = url\n    }\n\n    getInfo(): Promise<GroupsServiceInfo> {\n        return fetch(this.url + '/', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((result) => {\n                return result as GroupsServiceInfo;\n            });\n    }\n\n    groupExists(id: string): Promise<GroupExists> {\n        return fetch(this.url + '/group/' + id + '/exists')\n            .then((response) => {\n                return response.json()\n            })\n            .then((exists) => {\n                return exists as GroupExists\n            })\n    }\n\n    // getGroups(): Promise<GroupList> {\n    //     return fetch(this.url + '/group', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json()\n    //         })\n    //         .then((result: GroupList) => {\n    //             return result.filter(({ type }) => type === 'Organization')\n    //         })\n    // }\n\n    async listGroups(): Promise<Array<BriefGroup>> {\n        return fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    console.error('error fetching groups', response)\n                    throw new Error('Error fetching groups')\n                }\n                return response.json()\n            })\n    }\n\n\n    getGroups(): Promise<Array<Group | InaccessiblePrivateGroup>> {\n        return fetch(this.url + '/group', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    console.error('error fetching groups', response)\n                    throw new Error('Error fetching groups')\n                }\n                return response.json()\n            })\n            .then((result: Array<BriefGroup>) => {\n                return Promise.all(result.map((group) => (this.getGroupById(group.id))))\n            })\n            .then((result) => {\n                return result;\n            })\n    }\n\n    getGroupById(id: string): Promise<Group | InaccessiblePrivateGroup> {\n        return fetch(this.url + '/group/' + id, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status === 404) {\n                    return null\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Group\n            })\n    }\n\n    put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new GroupException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status === 200) {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                } else if (response.status === 204) {\n                    const result = null as unknown\n                    return result as T\n                } else {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>): Promise<T> {\n        const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new GroupException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    createGroup(newGroup: NewGroup): Promise<Group> {\n        // argh!! description should be mandatory, but now it is a custom \n        // field and it is not yet defined in the service.\n        // TODO: we need the groups service to have default custom fields.\n        // At that point, what IS the point of custom fields ... oh, I know that\n        // there are internal reasons for this due to re-using \"group\" for \n        // organization, project, etc., but that should not leak through the \n        // api.\n\n        // mandatory fields.\n        const payload: any = {\n            name: newGroup.name,\n            private: newGroup.isPrivate,\n            custom: {\n                logourl: newGroup.logoUrl,\n                researchinterests: newGroup.researchInterests,\n                homeurl: newGroup.homeUrl\n            }\n        }\n\n        // optional fields\n        if (newGroup.description.length > 0) {\n            payload.custom.description = newGroup.description\n        }\n\n        return this.put<Group>(['group', newGroup.id], payload)\n    }\n\n    updateGroup(id: string, groupUpdate: GroupUpdate): Promise<void> {\n        const payload: any = {\n            name: groupUpdate.name,\n            custom: {\n                logourl: groupUpdate.logoUrl,\n                homeurl: groupUpdate.homeUrl,\n                researchinterests: groupUpdate.researchInterests\n            },\n            private: groupUpdate.private\n        }\n        // TODO: remove this when we have descriptions restored to the\n        // groups service.\n        if (groupUpdate.description) {\n            payload.custom.description = groupUpdate.description\n        }\n        return fetch(this.url + '/group/' + id + '/update', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n\n            // TODO: build more intelligently\n            body: JSON.stringify(payload)\n        })\n            .then((response) => {\n                // response is an empty body.\n                if (response.status === 204) {\n                    return\n                }\n                throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n            })\n    }\n\n    async addRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is not already there\n        if (relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: relatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async removeRelatedGroup(groupId: GroupID, relatedGroupId: GroupID): Promise<string> {\n        // get the existing related groups\n        const group = await this.get<Group>(['group', groupId])\n\n        // split into list\n        let relatedGroups: Array<GroupID>\n        if (group.custom.relatedgroups) {\n            relatedGroups = group.custom.relatedgroups.split(',')\n        } else {\n            relatedGroups = []\n        }\n\n        // ensure that this one is already there\n        if (!relatedGroups.includes(relatedGroupId)) {\n            return relatedGroupId\n        }\n\n        // append it\n        relatedGroups.push(relatedGroupId)\n\n        const newRelatedGroups = relatedGroups.filter((groupId) => {\n            return groupId !== relatedGroupId\n        })\n\n        // join back into string\n        const update = {\n            custom: {\n                relatedgroups: newRelatedGroups.join(',')\n            }\n        }\n\n        // save as the relatedgroups property\n        await this.put<void>(['group', groupId, 'update'], update)\n\n        return relatedGroupId\n    }\n\n    async getRequest(requestId: string): Promise<Request> {\n        const path = ['request', 'id', requestId]\n        return await this.get<Request>(path)\n    }\n\n    getGroupRequests(groupId: string, params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n\n        return fetch(this.url + '/group/' + groupId + '/requests?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getTargetedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/targeted?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    getCreatedRequests(params: GetRequestsParams): Promise<Array<Request>> {\n        const query = new URLSearchParams()\n        if (params.includeClosed) {\n            query.append('closed', 'closed')\n        }\n        if (params.sortDirection) {\n            if (params.sortDirection === SortDirection.DESCENDING) {\n                query.append('order', 'desc')\n            } else {\n                query.append('order', 'asc')\n            }\n        }\n        if (params.startAt) {\n            query.append('excludeupto', String(params.startAt.getTime()))\n        }\n        return fetch(this.url + '/request/created?' + query.toString(), {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'appcliation/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    addOrRequestNarrative(params: RequestNarrativeParams): Promise<RequestWithCompletion | Completion> {\n        const url = [\n            this.url,\n            'group',\n            params.groupId,\n            'resource',\n            'workspace',\n            String(params.workspaceId)\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                if (result.complete === false) {\n                    return result as RequestWithCompletion\n                } else {\n                    return result as Completion\n                }\n\n            })\n    }\n\n    async grantResourceAccess(groupId: string, resourceType: string, resourceId: string): Promise<null> {\n        const path = [\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId,\n            'getperm'\n        ]\n        return this.post<null>(path, null)\n    }\n\n    deleteResource(groupId: string, resourceType: string, resourceId: string): Promise<void> {\n        const url = [\n            this.url,\n            'group',\n            groupId,\n            'resource',\n            resourceType,\n            resourceId\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n            })\n    }\n\n    cancelRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/cancel', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    acceptRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/accept', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    grantReadAccessToRequestedResource({ requestId }: { requestId: string }): Promise<null> {\n        const path = ['request', 'id', requestId, 'getperm']\n        return this.post<null>(path, null)\n    }\n\n\n    denyRequest({ requestId }: { requestId: string }): Promise<Request> {\n        return fetch(this.url + '/request/id/' + requestId + '/deny', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    memberToAdmin({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    adminToMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member, 'admin'\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n\n            })\n    }\n\n    updateMember({ groupId, memberUsername, update }: { groupId: string, memberUsername: string, update: any }): Promise<void> {\n        const path = [\n            'group', groupId, 'user', memberUsername, 'update'\n        ]\n\n        return this.put<void>(path, { custom: update })\n    }\n\n    removeMember({ groupId, member }: { groupId: string, member: string }): Promise<void> {\n        const url = [\n            this.url, 'group', groupId, 'user', member\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'DELETE'\n        })\n            .then((response) => {\n                if (response.status !== 204) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n            })\n    }\n\n    requestMembership(params: RequestMemebershipParams): Promise<Request> {\n        return fetch(this.url + '/group/' + params.groupId + '/requestmembership', {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    inviteUserToGroup({ groupId, username }: { groupId: string, username: string }): Promise<Request> {\n        const url = [\n            this.url, 'group', groupId, 'user', username\n        ].join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.token,\n                Accept: 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ':' + response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Request\n            })\n    }\n\n    async visitGroup({ groupId }: { groupId: string }): Promise<void> {\n        const path = ['group', groupId, 'visit']\n        return this.put<void>(path, null)\n    }\n\n    async getOpenRequests({ groupIds }: { groupIds: Array<string> }): Promise<Map<GroupID, RequestStatus>> {\n        const path = ['request', 'groups', groupIds.join(','), 'new']\n        const result = await this.get<any>(path)\n        const requestStatuses = new Map<GroupID, RequestStatus>()\n        for (const [groupId, requestStatus] of Object.entries(result)) {\n            requestStatuses.set(groupId, <RequestStatus>requestStatus)\n        }\n        return requestStatuses\n    }\n}","import * as groupsApi from '../apis/groups'\nimport * as orgModel from './organization/model'\n\nexport type Username = string\n\nexport type RequestID = string\n\nexport enum RequestType {\n    REQUEST = 0,\n    INVITATION\n}\n\nexport enum RequestResourceType {\n    USER = 0,\n    WORKSPACE,\n    APP\n}\n\nexport enum RequestStatus {\n    OPEN = 0,\n    CANCELED,\n    EXPIRED,\n    ACCEPTED,\n    DENIED\n}\n\nexport interface BaseRequest {\n    id: string\n    organizationId: string\n    requester: Username\n    type: RequestType\n    status: RequestStatus\n    resourceType: RequestResourceType\n    createdAt: Date\n    expireAt: Date\n    modifiedAt: Date\n}\n\nexport interface UserRequest extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.REQUEST\n    user: Username\n}\n\nexport interface UserInvitation extends BaseRequest {\n    resourceType: RequestResourceType.USER\n    type: RequestType.INVITATION\n    user: Username\n}\n\nexport interface WorkspaceRequest extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.REQUEST\n    narrativeId: string,\n}\n\nexport interface WorkspaceInvitation extends BaseRequest {\n    resourceType: RequestResourceType.WORKSPACE\n    type: RequestType.INVITATION\n    narrativeId: string\n}\n\nexport interface AppRequest extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.REQUEST\n    appId: string\n}\n\nexport interface AppInvitation extends BaseRequest {\n    resourceType: RequestResourceType.APP\n    type: RequestType.INVITATION\n    appId: string\n}\n\nexport type Request = UserRequest | UserInvitation | WorkspaceRequest | WorkspaceInvitation | AppRequest | AppInvitation\n\n\nfunction stringToRequestType(type: string): RequestType {\n    switch (type) {\n        case 'Invite':\n            return RequestType.INVITATION\n        case 'Request':\n            return RequestType.REQUEST\n        default:\n            throw new Error('unknown request type: ' + type)\n    }\n}\n\nfunction stringToResourceType(type: string) {\n    switch (type) {\n        case 'user':\n            return RequestResourceType.USER\n        case 'workspace':\n            return RequestResourceType.WORKSPACE\n        case 'catalogmethod':\n            return RequestResourceType.APP\n        default:\n            throw new Error('unknown resource type: ' + type)\n    }\n}\n\nfunction stringToRequestStatus(status: string): RequestStatus {\n    return RequestStatus.OPEN\n}\n\nexport function groupRequestToOrgRequest(request: groupsApi.Request): Request {\n\n    const requestType = stringToRequestType(request.type)\n    const resourceType = stringToResourceType(request.resourcetype)\n    const requestStatus = stringToRequestStatus(request.status)\n\n    switch (resourceType) {\n        case RequestResourceType.USER:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    user: request.resource as Username,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as UserInvitation\n            }\n\n        case RequestResourceType.WORKSPACE:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    narrativeId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as WorkspaceInvitation\n            }\n\n        case RequestResourceType.APP:\n            if (requestType === RequestType.REQUEST) {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppRequest\n            } else {\n                return {\n                    id: request.id,\n                    organizationId: request.groupid,\n                    resourceType: resourceType,\n                    requester: request.requester,\n                    type: requestType,\n                    status: requestStatus,\n                    appId: request.resource,\n                    createdAt: new Date(request.createdate),\n                    expireAt: new Date(request.expiredate),\n                    modifiedAt: new Date(request.moddate)\n                } as AppInvitation\n            }\n        default:\n            throw new Error('resource type not handled yet: ' + request.resourcetype)\n    }\n}\n\ninterface RequestsModelParams {\n    groupsServiceURL: string\n    token: string\n    username: Username\n}\n\nexport class RequestsModel {\n\n    params: RequestsModelParams\n    groupsClient: groupsApi.GroupsClient\n    cache: Map<RequestID, Request>\n\n    constructor(params: RequestsModelParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map()\n    }\n\n    async getRequest(requestId: RequestID): Promise<Request> {\n        if (this.cache.has(requestId)) {\n            return this.cache.get(requestId)!\n        }\n\n        const grequest = await this.groupsClient.getRequest(requestId)\n        const request = groupRequestToOrgRequest(grequest)\n\n        this.cache.set(request.id, request)\n        return request\n    }\n\n    async getOutboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserRequestForOrg(organizationId: orgModel.OrganizationID): Promise<UserRequest | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return r.groupid === organizationId\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserRequest\n    }\n\n    async getPendingRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    async getRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n    /*\n        For a given organization (by id), return a list of all requests to that org \n    */\n    async getCombinedRequestInboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        let requests: Array<Request>\n\n        // const grequests = await groupsClient.getTargetedRequests({\n        //     includeClosed: false,\n        //     sortDirection: groupsApi.SortDirection.DESCENDING\n        // })\n\n        // // TODO should work in synchrony with above...\n        // return grequests\n        //     .filter((r) => {\n        //         return r.groupid === organizationId\n        //     })\n        //     .map((r) => {\n        //         return groupRequestToOrgRequest(r)\n        //     })\n\n        try {\n            requests = (await groupsClient.getGroupRequests(organizationId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            }))\n                .map((request) => {\n                    return groupRequestToOrgRequest(request)\n                })\n        } catch (ex) {\n            requests = []\n        }\n\n        return requests\n    }\n\n    async getRequestOutboxForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        return grequests\n            .filter((r) => {\n                return r.groupid === organizationId\n            })\n            .map((r) => {\n                return groupRequestToOrgRequest(r)\n            })\n    }\n\n\n    async getOrganizationInvitations(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getCreatedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        }).filter((request) => {\n            return (request.type === RequestType.INVITATION)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getOrganizationInvitationsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const invitations = await this.getOrganizationInvitations()\n        return invitations.filter((invitation) => {\n            return (invitation.organizationId === organizationId)\n        })\n    }\n\n    async getInboundRequests(): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        const requests = grequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        requests.forEach((request) => {\n            if (!this.cache.has(request.id)) {\n                this.cache.set(request.id, request)\n            }\n        })\n\n        return requests\n    }\n\n    async getUserInvitationForOrg(organizationId: orgModel.OrganizationID): Promise<UserInvitation | null> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const grequests = await groupsClient.getTargetedRequests({\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        // TODO should work in synchrony with above...\n        const grequest = grequests.find((r) => {\n            return (r.groupid === organizationId)\n        })\n\n        if (!grequest) {\n            return null\n        }\n\n        return groupRequestToOrgRequest(grequest) as UserInvitation\n    }\n\n    async getPendingOrganizationRequestsForOrg(organizationId: orgModel.OrganizationID): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await groupsClient.getGroupRequests(organizationId, {\n            includeClosed: false,\n            sortDirection: groupsApi.SortDirection.DESCENDING\n        })\n\n        return groupRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n\n        // const [groupRequests, adminRequests] = await Promise.all([\n        //     groupsClient.getGroupRequests(groupId, {\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     }),\n        //     groupsClient.getCreatedRequests({\n        //         includeClosed: false,\n        //         sortDirection: groupsApi.SortDirection.DESCENDING\n        //     })\n        // ])\n        // const groupAdminRequests = adminRequests.filter((request) => {\n        //     return (request.groupid === groupId)\n        // })\n\n        // return Promise.all(groupRequests.concat(groupAdminRequests).map((request) => {\n        //     return groupRequestToOrgRequest(request)\n        // }))\n    }\n\n    async getPendingOrganizationRequests(groupIds: Array<string>): Promise<Array<Request>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const groupRequests = await Promise.all(groupIds.map((groupId) => {\n            return groupsClient.getGroupRequests(groupId, {\n                includeClosed: false,\n                sortDirection: groupsApi.SortDirection.DESCENDING\n            })\n        }))\n\n        const allRequests = groupRequests.reduce((allRequests, requests) => {\n            return allRequests.concat(requests)\n        }, [])\n\n        return allRequests.map((request) => {\n            return groupRequestToOrgRequest(request)\n        })\n    }\n\n    async cancelRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.cancelRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async denyRequest(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async acceptJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.acceptRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async rejectJoinInvitation(requestId: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.denyRequest({\n            requestId\n        })\n        return groupRequestToOrgRequest(request)\n    }\n\n    async inviteUserToJoinOrg(groupId: string, username: string): Promise<Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.inviteUserToGroup({\n            groupId,\n            username\n        })\n            .then((request) => {\n                return groupRequestToOrgRequest(request)\n            })\n    }\n}","import * as groupsApi from '../../apis/groups'\nimport {\n    SortDirection, EditableOrganization, ValidationState, EditableString, ValidationErrorType\n} from '../../../types';\nimport * as requestModel from '../requests'\nimport * as userModel from '../user'\nimport Validation from './validation'\n\n// import Member from '../../../components/entities/Member';\n\n\nexport interface OrganizationUpdate {\n    name: string\n    logoUrl: string | null\n    description: string\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string\n}\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\nexport interface EditableMemberProfile {\n    title: EditableString\n}\nexport enum UserRelationToOrganization {\n    NONE = 'NONE',\n    VIEW = 'VIEW',\n    MEMBER_REQUEST_PENDING = 'MEMBER_REQUEST_PENDING',\n    MEMBER_INVITATION_PENDING = 'MEMBER_INVITATION_PENDING',\n    MEMBER = 'MEMBER',\n    ADMIN = 'ADMIN',\n    OWNER = 'OWNER'\n}\n\nexport interface UserOrgRelation {\n    type: UserRelationToOrganization\n}\n\nexport interface NoRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.NONE\n}\n\nexport interface ViewRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.VIEW\n}\n\nexport interface MembershipRequestPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n    requestId: string\n}\n\nexport interface MembershipInvitationPendingRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n    requestId: string\n}\n\nexport interface MemberRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.MEMBER\n}\n\nexport interface AdminRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.ADMIN\n}\n\nexport interface OwnerRelation extends UserOrgRelation {\n    type: UserRelationToOrganization.OWNER\n}\n\nexport type Relation = NoRelation | ViewRelation | MembershipRequestPendingRelation | MembershipInvitationPendingRelation | MemberRelation | AdminRelation | OwnerRelation\n\nexport type Username = string\n\nexport enum MemberType {\n    MEMBER = 0,\n    ADMIN,\n    OWNER\n}\nexport interface Member {\n    username: groupsApi.Username\n    joinedAt: Date\n    lastVisitedAt: Date | null\n    type: MemberType\n    title: string | null\n}\n\nexport interface MemberUpdate {\n    title?: string\n}\n\nexport enum UserWorkspacePermission {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport type WorkspaceID = number\n\nexport interface NarrativeResource {\n    workspaceId: number\n    title: string\n    permission: UserWorkspacePermission\n    isPublic: boolean\n    createdAt: Date\n    updatedAt: Date\n    description: string\n}\n\nexport type AppID = string\n\nexport interface AppInfo {\n    appId: AppID\n}\n\nexport interface BriefOrganization {\n    id: string\n    name: string\n    logoUrl: string | null\n    isPrivate: boolean\n    homeUrl: string | null\n    researchInterests: string | null\n    // TODO: we need researchInterests here\n    owner: Member\n    relation: UserRelationToOrganization\n\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n\n    memberCount: number\n    narrativeCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\nexport enum OrganizationKind {\n    NORMAL = 0,\n    INACCESSIBLE_PRIVATE\n}\n\nexport interface InaccessiblePrivateOrganization {\n    kind: OrganizationKind.INACCESSIBLE_PRIVATE\n    id: string\n    isPrivate: boolean\n    relation: UserRelationToOrganization\n}\n\nexport interface Organization {\n    kind: OrganizationKind.NORMAL\n    id: string\n    name: string\n\n    isPrivate: boolean\n    isMember: boolean\n    isAdmin: boolean\n    isOwner: boolean\n\n    relation: UserRelationToOrganization\n    logoUrl: string | null\n    homeUrl: string | null\n    researchInterests: string\n    description: string\n    owner: Member\n    areMembersPrivate: boolean\n    members: Array<Member>\n    // relation: UserOrgRelation\n    createdAt: Date\n    modifiedAt: Date\n    lastVisitedAt: Date | null\n    narratives: Array<NarrativeResource>\n    apps: Array<AppInfo>\n    memberCount: number\n    narrativeCount: number\n    appCount: number\n    relatedOrganizations: Array<OrganizationID>\n}\n\n// export interface RequestStatus {\n//     new: boolean,\n//     old: boolean\n// }\n\n// LEFT OF HERE - inapplicable should be set if the user is not an admin.\nexport enum RequestStatus {\n    INAPPLICABLE = 'INAPPLICABLE',\n    NONE = 'NONE',\n    OLD = 'OLD',\n    NEW = 'NEW'\n}\n\nexport function determineRelation(\n    org: Organization | InaccessiblePrivateOrganization,\n    username: userModel.Username,\n    request: requestModel.UserRequest | null,\n    invitation: requestModel.UserInvitation | null): Relation {\n\n    if (org.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n        if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n\n    if (username === org.owner.username) {\n        return {\n            type: UserRelationToOrganization.OWNER\n        } as OwnerRelation\n    } else {\n        const member = org.members.find((member) => {\n            return (member.username === username)\n        })\n        if (member) {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    return {\n                        type: UserRelationToOrganization.MEMBER\n                    } as MemberRelation\n                case MemberType.ADMIN:\n                    return {\n                        type: UserRelationToOrganization.ADMIN\n                    } as AdminRelation\n                case MemberType.OWNER:\n                    return {\n                        type: UserRelationToOrganization.OWNER\n                    } as OwnerRelation\n                default:\n                    return {\n                        type: UserRelationToOrganization.NONE\n                    } as NoRelation\n            }\n        } else if (request && request.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                requestId: request.id\n            } as MembershipRequestPendingRelation\n        } else if (invitation && invitation.user === username) {\n            return {\n                type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                requestId: invitation.id\n            } as MembershipInvitationPendingRelation\n        } else {\n            return {\n                type: UserRelationToOrganization.NONE\n            } as NoRelation\n        }\n    }\n}\n\nfunction groupPermissionToWorkspacePermission(groupsPermission: string): UserWorkspacePermission {\n    switch (groupsPermission) {\n        case 'None':\n            return UserWorkspacePermission.NONE\n        case 'Read':\n            return UserWorkspacePermission.VIEW\n        case 'Write':\n            return UserWorkspacePermission.EDIT\n        case 'Admin':\n            return UserWorkspacePermission.ADMIN\n        case 'Own':\n            return UserWorkspacePermission.OWNER\n        default:\n            throw new Error('Invalid groups user permission: ' + groupsPermission)\n    }\n}\n\nexport function groupToOrganization(group: groupsApi.Group, currentUser: Username): Organization {\n\n    const owner: Member = {\n        username: group.owner.name,\n        joinedAt: new Date(group.owner.joined),\n        lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n        type: MemberType.OWNER,\n        title: 'Owner'\n    }\n\n    // We join admins and members, since they are all members, just different privileges in the org\n    const members = (<Array<Member>>[\n        // owner\n    ]).concat(group.admins.map((admin) => {\n        return {\n            username: admin.name,\n            joinedAt: new Date(admin.joined),\n            lastVisitedAt: admin.lastvisit ? new Date(admin.lastvisit) : null,\n            type: MemberType.ADMIN,\n            title: admin.custom.title\n        }\n    })).concat(group.members.map((member) => {\n        return {\n            username: member.name,\n            joinedAt: new Date(member.joined),\n            lastVisitedAt: member.lastvisit ? new Date(member.lastvisit) : null,\n            type: MemberType.MEMBER,\n            title: member.custom.title\n        }\n    }))\n\n    const narratives: Array<NarrativeResource> = group.resources.workspace.map((info) => {\n        return {\n            workspaceId: parseInt(info.rid, 10),\n            title: info.narrname,\n            isPublic: info.public,\n            permission: groupPermissionToWorkspacePermission(info.perm),\n            createdAt: new Date(info.narrcreate),\n            updatedAt: new Date(info.moddate),\n            description: info.description\n        }\n    })\n    const apps: Array<AppInfo> = []\n\n\n    return {\n        kind: OrganizationKind.NORMAL,\n        id: group.id,\n        name: group.name,\n        isPrivate: group.private,\n        isMember: (group.role !== \"None\"),\n        isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n        isOwner: (group.role === \"Owner\"),\n        relation: groupRoleToUserRelation(group.role),\n        logoUrl: group.custom.logourl || null,\n        homeUrl: group.custom.homeurl || null,\n        researchInterests: group.custom.researchinterests || '',\n        description: group.custom.description,\n        owner: owner,\n        areMembersPrivate: group.privatemembers,\n        members: members,\n        modifiedAt: new Date(group.moddate),\n        createdAt: new Date(group.createdate),\n        lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n        narratives: narratives,\n        apps: [],\n        memberCount: group.memcount,\n        narrativeCount: group.rescount.workspace || 0,\n        appCount: group.rescount.catalogmethod || 0,\n        relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n    }\n}\n\nexport function groupToPrivateOrganization(group: groupsApi.InaccessiblePrivateGroup, currentUser: Username): InaccessiblePrivateOrganization {\n    return {\n        kind: OrganizationKind.INACCESSIBLE_PRIVATE,\n        id: group.id,\n        isPrivate: group.private,\n        // isMember: false,\n        relation: groupRoleToUserRelation(group.role)\n    }\n}\n\n// export function determineRelation(group: Group, username: userModel.Username) {\n//     let relation: UserOrgRelation\n//     // TODO: when we have access to members, admins, and group publication status, we can \n//     // flesh out all user relations.\n//     // const orgMembers: Array<username> = this.membersAndAdminsToMembers(members, admins, profileMap)\n\n//     if (username === group.owner) {\n//         relation = {\n//             type: UserRelationToOrganization.OWNER\n//         } as OwnerRelation\n//     } else if (group.admins.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.ADMIN\n//         } as AdminRelation\n//     } else if (group.members.indexOf(username) >= 0) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER\n//         } as MemberRelation\n//     } else if (pendingRequests.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n//             requestId: pendingRequests.get(group.id)!.id\n//         } as MembershipRequestPendingRelation\n//     } else if (pendingInvites.has(group.id)) {\n//         relation = {\n//             type: UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n//             requestId: pendingInvites.get(group.id)!.id\n//         } as MembershipInvitationPendingRelation\n//     } else {\n//         relation = {\n//             type: UserRelationToOrganization.VIEW\n//         } as ViewRelation\n//     }\n// }\n\nexport type GroupID = string\nexport type OrganizationID = GroupID\n\n\nexport interface ConstructorParams {\n    groupsServiceURL: string\n    token: string\n    username: groupsApi.Username\n}\n\nexport interface QueryResults {\n    organizations: Array<BriefOrganization>\n    total: number\n}\n\nexport interface Query {\n    searchTerms: Array<string>\n    username: groupsApi.Username\n    sortField: string\n    sortDirection: SortDirection\n    filter: Filter\n}\n\nexport function applySearch(orgs: Array<BriefOrganization>, searchTerms: Array<string>): Array<BriefOrganization> {\n    const searchTermsRe = searchTerms.map((term) => {\n        return new RegExp(term, 'i')\n    })\n    const filteredOrgs = orgs.filter((org) => {\n        if (searchTerms.length === 0) {\n            return true;\n        }\n        return searchTermsRe.every((termRe) => {\n            return termRe.test(org.name) ||\n                termRe.test(org.researchInterests || '') ||\n                termRe.test(org.owner.username)\n        })\n    })\n    return filteredOrgs\n}\n\nfunction dateDays(d: Date) {\n    const t = d.getTime()\n    return Math.round(t / (1000 * 60 * 60 * 24))\n}\n\nfunction applySortComparison(sortField: string, direction: number, a: BriefOrganization, b: BriefOrganization) {\n    switch (sortField) {\n        case 'created':\n            return direction * (dateDays(a.createdAt) - dateDays(b.createdAt))\n        case 'modified':\n        case 'changed':\n            return direction * (dateDays(a.modifiedAt) - dateDays(b.modifiedAt))\n        case 'name':\n            return direction * a.name.localeCompare(b.name)\n        case 'owner':\n            // TODO: after the dust settles for org -> brief org conversion,\n            // we may need to convert the owner to a member via profile...\n            return direction * a.owner.username.localeCompare(b.owner.username)\n        case 'narrativeCount':\n            return direction * (a.narrativeCount - b.narrativeCount)\n        case 'memberCount':\n            return direction * (a.memberCount - b.memberCount)\n        default:\n            console.warn('unimplemented sort field: ' + sortField)\n            return 0;\n    }\n}\n\nfunction applySort(organizations: Array<BriefOrganization>, sortField: string, sortDirection: SortDirection): Array<BriefOrganization> {\n    const direction = sortDirection === SortDirection.ASCENDING ? 1 : -1\n    return organizations.slice().sort((a, b) => {\n        return applySortComparison(sortField, direction, a, b) || applySortComparison('name', 1, a, b)\n    })\n}\n\nfunction groupRoleToUserRelation(role: groupsApi.Role): UserRelationToOrganization {\n    switch (role) {\n        case 'None': return UserRelationToOrganization.NONE\n        case 'Member': return UserRelationToOrganization.MEMBER\n        case 'Admin': return UserRelationToOrganization.ADMIN\n        case 'Owner': return UserRelationToOrganization.OWNER\n        default: throw new Error('Unknown role: ' + role)\n    }\n}\n\nexport interface Filter {\n    roleType: string,\n    roles: Array<string>,\n    privacy: string\n}\n\nfunction applyFilter(organizations: Array<BriefOrganization>, { roleType, roles, privacy }: Filter, username: groupsApi.Username): Array<BriefOrganization> {\n    function applyRoleType(org: BriefOrganization) {\n        switch (roleType) {\n            case 'myorgs':\n                return [\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'notmyorgs':\n                return ![\n                    UserRelationToOrganization.MEMBER,\n                    UserRelationToOrganization.ADMIN,\n                    UserRelationToOrganization.OWNER\n                ].includes(org.relation)\n            case 'all':\n            default:\n                return true\n        }\n    }\n    function applyRole(org: BriefOrganization) {\n        if (roles.length === 0) {\n            return true\n        }\n        return roles.some((role) => {\n            switch (role) {\n                case 'member':\n                    return (org.relation === UserRelationToOrganization.MEMBER)\n                case 'admin':\n                    return (org.relation === UserRelationToOrganization.ADMIN)\n                case 'owner':\n                    return (org.relation === UserRelationToOrganization.OWNER)\n                default:\n                    return false\n            }\n        })\n    }\n    function applyPrivacy(org: BriefOrganization) {\n        switch (privacy) {\n            case 'public':\n                return !org.isPrivate\n            case 'private':\n                return org.isPrivate\n            case 'any':\n                return true\n            default:\n                return false\n        }\n    }\n    return organizations.filter((org) => {\n        return applyRoleType(org) && applyRole(org) && applyPrivacy(org)\n    })\n\n    // switch (filter) {\n    //     case 'role:all':\n    //         return organizations\n    //     case 'notMemberOf':\n    //         return organizations.filter((org) => {\n    //             return (org.relation === UserRelationToOrganization.NONE)\n    //         })\n    //     case 'memberOf':\n    //         return organizations.filter((org) => {\n    //             return (org.relation !== UserRelationToOrganization.NONE)\n    //         })\n    //     case 'role:member':\n    //         return organizations.filter((org) => {\n    //             return (org.relation === UserRelationToOrganization.MEMBER)\n    //         })\n    //     case 'role:myorgs':\n    //         return organizations.filter((org) => {\n    //             return [\n    //                 UserRelationToOrganization.MEMBER,\n    //                 UserRelationToOrganization.ADMIN,\n    //                 UserRelationToOrganization.OWNER\n    //             ].includes(org.relation)\n    //         })\n    //     case 'role:notmyorgs':\n    //         return organizations.filter((org) => {\n    //             return ![\n    //                 UserRelationToOrganization.MEMBER,\n    //                 UserRelationToOrganization.ADMIN,\n    //                 UserRelationToOrganization.OWNER\n    //             ].includes(org.relation)\n    //         })\n\n    //     case 'role:owner':\n    //         return organizations.filter((org) => (org.relation === UserRelationToOrganization.OWNER))\n    //     case 'role:notowner':\n    //         return organizations.filter((org) => (org.relation !== UserRelationToOrganization.OWNER))\n    //     case 'role:admin':\n    //         return organizations.filter((org) => (org.relation === UserRelationToOrganization.OWNER ||\n    //             org.relation === UserRelationToOrganization.ADMIN))\n    //     case 'privacy:private':\n    //         return organizations.filter((org) => {\n    //             return org.private\n    //         })\n    //     case 'privacy:public':\n    //         return organizations.filter((org) => {\n    //             return !org.private\n    //         })\n\n    //     // TODO: re-enable when have relation again...\n    //     // case 'pending':\n    //     //     return organizations.filter((org) => (\n    //     //         org.relation.type === UserRelationToOrganization.MEMBER_INVITATION_PENDING ||\n    //     //         org.relation.type === UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     //     ))\n    //     // case 'groupPending':\n    //     //     return organizations.filter((org) => (\n    //     //         (org.relation.type === UserRelationToOrganization.ADMIN ||\n    //     //             org.relation.type === UserRelationToOrganization.OWNER) &&\n    //     //         (org.adminRequests && org.adminRequests.length > 0)\n    //     //     ))\n    //     default:\n    //         console.warn('unknown filter : ' + filter)\n    //         return organizations\n    // }\n}\n\n\n\n// Narrative Sort and Search\nfunction narrativeSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return a.title.localeCompare(b.title)\n            }\n        case 'updated':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return b.updatedAt.getTime() - a.updatedAt.getTime()\n            }\n        default:\n        case 'added':\n            return (a: NarrativeResource, b: NarrativeResource) => {\n                return b.updatedAt.getTime() - a.updatedAt.getTime()\n            }\n    }\n}\n\nexport function applyNarrativeSort(narratives: Array<NarrativeResource>, sortBy: string) {\n    if (!sortBy) {\n        return narratives\n    }\n    return narratives.slice().sort((a: NarrativeResource, b: NarrativeResource) => {\n        const c1 = narrativeSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return narrativeSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyNarrativeSearch(narratives: Array<NarrativeResource>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return narratives\n    }\n    return narratives.slice().filter((narrative: NarrativeResource) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(narrative.title))\n        })\n    })\n}\n\nexport interface NarrativeQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryNarratives(narratives: Array<NarrativeResource>, query: NarrativeQuery) {\n    const searched = applyNarrativeSearch(narratives, query.searchBy)\n    const sorted = applyNarrativeSort(searched, query.sortBy)\n    return sorted\n}\n\n// Members Sort and Search\n\nfunction memberSortByToComparator(sortBy: string) {\n    switch (sortBy) {\n        case 'name':\n            // TODO: need to use user real name\n\n            return (a: Member, b: Member) => {\n                return a.username.localeCompare(b.username)\n            }\n        default:\n        case 'added':\n            return (a: Member, b: Member) => {\n                return b.joinedAt.getTime() - a.joinedAt.getTime()\n            }\n    }\n}\n\nexport function applyMembersSort(members: Array<Member>, sortBy: string) {\n    if (!sortBy) {\n        return members\n    }\n    return members.slice().sort((a: Member, b: Member) => {\n        const c1 = memberSortByToComparator(sortBy)(a, b)\n        if (c1 === 0) {\n            if (sortBy !== 'name') {\n                return memberSortByToComparator('name')(a, b)\n            }\n        }\n        return c1\n    })\n}\n\nexport function applyMembersSearch(members: Array<Member>, searchBy: string) {\n    const tokens = searchBy.split(/\\s+/).map((token) => {\n        return new RegExp(token, 'i')\n    })\n    if (tokens.length === 0) {\n        return members\n    }\n    return members.slice().filter((member: Member) => {\n        return tokens.every((token: RegExp) => {\n            return (token.test(member.username) ||\n                token.test(member.title || ''))\n        })\n    })\n}\n\nexport interface MembersQuery {\n    searchBy: string\n    sortBy: string\n}\n\nexport function queryMembers(members: Array<Member>, query: MembersQuery) {\n    const searched = applyMembersSearch(members, query.searchBy)\n    const sorted = applyMembersSort(searched, query.sortBy)\n    return sorted\n}\n\n// function getCustomField(group: groupsApi.Group | groupsApi.BriefGroup, name: string): string | null {\n//     if (!group.custom) {\n//         return null\n//     }\n//     if (name in group.custom) {\n//         return group.custom[name]\n//     }\n//     return null\n// }\n\nexport class OrganizationModel {\n\n    params: ConstructorParams\n    groupsClient: groupsApi.GroupsClient\n    organizations: Map<OrganizationID, Organization | InaccessiblePrivateOrganization>\n\n    constructor(params: ConstructorParams) {\n        this.params = params\n        this.groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        this.organizations = new Map<OrganizationID, Organization>()\n    }\n\n    async getOrg(id: OrganizationID): Promise<Organization | InaccessiblePrivateOrganization> {\n        if (this.organizations.has(id)) {\n            return this.organizations.get(id)!\n        }\n        return this.groupsClient.getGroupById(id)\n            .then((group) => {\n                let org: Organization | InaccessiblePrivateOrganization\n                if (group.role === \"None\" && group.private) {\n                    org = groupToPrivateOrganization(group as groupsApi.InaccessiblePrivateGroup, this.params.username)\n                } else {\n                    org = groupToOrganization(group as groupsApi.Group, this.params.username)\n                }\n                this.organizations.set(id, org)\n                return org\n            })\n    }\n\n    async getOrganization(id: OrganizationID): Promise<Organization> {\n        if (this.organizations.has(id)) {\n            const org = this.organizations.get(id)!\n            if (org.kind !== OrganizationKind.NORMAL) {\n                throw new Error('Inaccessible Organization')\n            }\n            return org\n        }\n        return this.groupsClient.getGroupById(id)\n            .then((group) => {\n                console.log('group', group)\n                if (group.role === \"None\" && group.private) {\n                    throw new Error('Inaccessible Organization')\n                }\n\n                const org = groupToOrganization(group as groupsApi.Group, this.params.username)\n                this.organizations.set(id, org)\n                return org\n            })\n    }\n\n    async getOrgs(ids: Array<OrganizationID>): Promise<Array<Organization | InaccessiblePrivateOrganization>> {\n        return Promise.all(ids.map((id) => {\n            return this.getOrg(id)\n        }))\n    }\n\n    async getAllOrgs(): Promise<Array<Organization | InaccessiblePrivateOrganization>> {\n        const groups = await this.groupsClient.getGroups()\n        const ids = groups.map((group) => {\n            return group.id\n        })\n        return this.getOrgs(ids)\n    }\n\n    async getOwnOrgs(): Promise<Array<BriefOrganization>> {\n        const orgs = await this.getAllOrgs2()\n\n        const ownOrgs = orgs\n            .filter((org: BriefOrganization) => {\n                // ensure that user has some relationship to the org:\n                // member, admin, or owner\n                return (org.relation !== UserRelationToOrganization.NONE)\n            })\n\n        return ownOrgs\n    }\n\n    listGroupToBriefOrganization(group: groupsApi.BriefGroup): BriefOrganization {\n        return {\n            id: group.id,\n            name: group.name,\n            logoUrl: group.custom.logourl || null,\n            isPrivate: group.private,\n            homeUrl: group.custom.homeurl || null,\n            researchInterests: group.custom.researchinterests || null,\n            owner: {\n                username: group.owner,\n                lastVisitedAt: null,\n                type: MemberType.OWNER,\n                joinedAt: new Date(group.createdate),\n                title: 'Owner'\n            },\n\n            // owner: {\n            //     username: group.owner.name,\n            //     lastVisitedAt: group.owner.lastvisit ? new Date(group.owner.lastvisit) : null,\n            //     type: MemberType.OWNER,\n            //     joinedAt: new Date(group.owner.joined),\n            //     title: group.owner.custom ? group.owner.custom.title : null\n            // },\n            // fix these...\n            relation: groupRoleToUserRelation(group.role),\n            isMember: (group.role !== \"None\"),\n            isAdmin: (group.role === \"Admin\" || group.role === \"Owner\"),\n            isOwner: (group.role === \"Owner\"),\n            createdAt: new Date(group.createdate),\n            modifiedAt: new Date(group.moddate),\n            lastVisitedAt: group.lastvisit ? new Date(group.lastvisit) : null,\n            memberCount: group.memcount || 0,\n            narrativeCount: group.rescount.workspace || 0,\n            relatedOrganizations: group.custom ? group.custom.relatedgroups ? group.custom.relatedgroups.split(',') : [] : []\n        }\n    }\n\n    async getAllOrgs2(): Promise<Array<BriefOrganization>> {\n        const groups = await this.groupsClient.listGroups()\n        const orgs = groups.map((group) => {\n            const org = this.listGroupToBriefOrganization(group)\n            return org\n        })\n        return orgs\n    }\n\n    async queryOrgs(query: Query): Promise<QueryResults> {\n        // const orgs = await this.getAllOrgs()\n        const orgs = await this.getAllOrgs2()\n\n        const filtered = applyFilter(orgs, query.filter, query.username)\n        const searched = applySearch(filtered, query.searchTerms)\n        const sorted = applySort(searched, query.sortField, query.sortDirection)\n\n        return {\n            organizations: sorted,\n            total: orgs.length\n        }\n    }\n\n    async ownOrgs(username: groupsApi.Username): Promise<QueryResults> {\n        const orgs = await this.getAllOrgs2()\n        const ownOrgs = orgs.filter((org: BriefOrganization) => {\n            return (org.relation !== UserRelationToOrganization.NONE)\n        })\n\n        return {\n            organizations: ownOrgs,\n            total: ownOrgs.length\n        }\n    }\n\n    async grantViewAccess(requestId: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        await groupsClient.grantReadAccessToRequestedResource({ requestId })\n        const req = await groupsClient.getRequest(requestId)\n        return requestModel.groupRequestToOrgRequest(req)\n    }\n\n    async addOrg(newOrg: EditableOrganization, username: groupsApi.Username): Promise<Organization> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n        if ((newOrg.id.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.name.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.logoUrl.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.description.validationState.type !== ValidationErrorType.OK) ||\n            (newOrg.isPrivate.validationState.type !== ValidationErrorType.OK)\n        ) {\n            return Promise.reject(new Error('One or more fields are invalid'))\n        }\n\n        return groupsClient.createGroup({\n            id: newOrg.id.value,\n            name: newOrg.name.value,\n            logoUrl: newOrg.logoUrl.value,\n            homeUrl: newOrg.homeUrl.value,\n            researchInterests: newOrg.researchInterests.value,\n            description: newOrg.description.value,\n            isPrivate: newOrg.isPrivate.value\n        })\n            .then((group) => {\n                return groupToOrganization(group, username)\n            })\n    }\n\n    async orgExists(id: string): Promise<boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.groupExists(id)\n            .then(({ exists }) => {\n                return exists\n            })\n    }\n\n    async updateOrg(id: string, orgUpdate: OrganizationUpdate): Promise<void> {\n\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // do record-level validation\n\n\n        return groupsClient.updateGroup(id, {\n            name: orgUpdate.name,\n            logoUrl: orgUpdate.logoUrl,\n            homeUrl: orgUpdate.homeUrl,\n            researchInterests: orgUpdate.researchInterests,\n            description: orgUpdate.description,\n            private: orgUpdate.isPrivate\n        })\n    }\n\n    validateOrgId(id: string): [string, ValidationState] {\n        return Validation.validateOrgId(id);\n    }\n\n    validateOrgName(name: string): [string, ValidationState] {\n        return Validation.validateOrgName(name)\n    }\n\n    validateOrgDescription(description: string): [string, ValidationState] {\n        return Validation.validateOrgDescription(description);\n    }\n\n    async removeNarrativeFromOrg(organizationId: OrganizationID, workspaceId: number): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.deleteResource(\n            organizationId,\n            'workspace',\n            String(workspaceId)\n        )\n    }\n\n    async grantNarrativeAccess(groupId: string, resourceId: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        // TODO: yuck. need to \n        await groupsClient.grantResourceAccess(groupId, 'workspace', resourceId)\n        return\n    }\n\n    async requestMembership(id: string): Promise<requestModel.Request> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.requestMembership({\n            groupId: id\n        })\n        return requestModel.groupRequestToOrgRequest(request)\n    }\n\n    async addOrRequestNarrativeToGroup(groupId: string, workspaceId: WorkspaceID): Promise<requestModel.Request | boolean> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        const request = await groupsClient.addOrRequestNarrative({\n            groupId: groupId,\n            workspaceId: workspaceId\n        })\n        if (request.complete === true) {\n            return true\n        } else {\n            return requestModel.groupRequestToOrgRequest(request)\n        }\n    }\n\n    async memberToAdmin(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.memberToAdmin({\n            groupId,\n            member\n        })\n    }\n\n    async adminToMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.adminToMember({\n            groupId,\n            member\n        })\n    }\n    async removeMember(groupId: string, member: string): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.removeMember({\n            groupId,\n            member\n        })\n    }\n\n    async updateMember(groupId: string, memberUsername: string, update: MemberUpdate) {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n\n        return groupsClient.updateMember({ groupId, memberUsername, update })\n    }\n\n    async visitOrg({ organizationId }: { organizationId: string }): Promise<void> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return groupsClient.visitGroup({ groupId: organizationId })\n    }\n\n    async getOpenRequestsStatus({ organizationIds }: { organizationIds: Array<OrganizationID> }): Promise<Map<OrganizationID, RequestStatus>> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: organizationIds })\n        const result = new Map<OrganizationID, RequestStatus>()\n        for (const [groupId, status] of openRequests.entries()) {\n            const requestStatus: RequestStatus = stringToRequestStatus(status)\n            result.set(<OrganizationID>groupId, requestStatus)\n        }\n        return result\n    }\n\n    async getOpenRequestStatus({ organizationId }: { organizationId: OrganizationID }): Promise<RequestStatus> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        const openRequests = await groupsClient.getOpenRequests({ groupIds: [organizationId] })\n        for (const [groupId, status] of openRequests.entries()) {\n            return stringToRequestStatus(status)\n        }\n        throw new Error('expected request status, got none')\n    }\n\n    async addRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.addRelatedGroup(organizationId, relatedOrganizationId)\n    }\n\n    async removeRelatedOrganization({ organizationId, relatedOrganizationId }: { organizationId: OrganizationID, relatedOrganizationId: OrganizationID }): Promise<OrganizationID> {\n        const groupsClient = new groupsApi.GroupsClient({\n            url: this.params.groupsServiceURL,\n            token: this.params.token\n        })\n        return await groupsClient.removeRelatedGroup(organizationId, relatedOrganizationId)\n    }\n}\n\nfunction stringToRequestStatus(status: groupsApi.RequestStatus): RequestStatus {\n    switch (status.new) {\n        case 'None': return RequestStatus.NONE\n        case 'Old': return RequestStatus.OLD\n        case 'New': return RequestStatus.NEW\n        default: throw new Error('Invalid open request status: ' + status)\n    }\n}\n\nexport function userPermissionToWorkspacePermission(userPermission: string, isOwner: boolean) {\n    if (isOwner) {\n        return UserWorkspacePermission.OWNER\n    }\n    switch (userPermission) {\n        case 'r':\n            return UserWorkspacePermission.VIEW\n        case 'w':\n            return UserWorkspacePermission.EDIT\n        case 'a':\n            return UserWorkspacePermission.ADMIN\n        default:\n            throw new Error('Invalid workspace user permission: ' + userPermission)\n    }\n}","import { UIError, UIErrorType, ValidationState, ValidationErrorType } from \"../../../types\";\n\nexport default class Validation {\n    static nonPrintableRe = /[\\000-\\031]/\n\n    static testNonPrintableCharacters(s: string) {\n        const firstNonPrintable = s.search(Validation.nonPrintableRe)\n        if (firstNonPrintable === -1) {\n            return false\n        }\n        const beforeStart = firstNonPrintable - 5 < 0 ? 0 : firstNonPrintable - 5\n        const before = s.slice(beforeStart, firstNonPrintable)\n        const after = s.slice(firstNonPrintable + 1, firstNonPrintable + 6)\n        return `Non-printable character at position ${firstNonPrintable}: \"${before}___${after}`\n    }\n    static validateOrgId(id: string): [string, ValidationState] {\n        // May not be empty\n        if (id.length === 0) {\n            return [\n                id, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization id may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        // No spaces\n        if (id.match(/\\s/)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not contain a space',\n                    validatedAt: new Date()\n                }]\n        }\n        // May not exceed maximum size\n        // todo: what is the real limit?\n        if (id.length > 100) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization id may not be longer than 100 characters',\n                    validatedAt: new Date()\n                }]\n        }\n\n        // May only consist if lower case alphanumeric\n        const alphaRe = /^[a-z0-9-]+$/\n        if (!id.match(alphaRe)) {\n            return [\n                id, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization ID may only contain lower case letters (a-z), numeric digits (0-9) and the dash \"-\"',\n                    validatedAt: new Date()\n                }\n            ]\n        }\n\n        return [id, {\n            type: ValidationErrorType.OK,\n            validatedAt: new Date()\n        }]\n    }\n\n    static validateOrgName(name: string): [string, ValidationState] {\n        if (name.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Organization name may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        if (name.length > 256) {\n            return [\n                name, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization name may not be longer than 256 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            name, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgLogoUrl(logoUrl: string | null): [string | null, ValidationState] {\n        if (logoUrl === null) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (logoUrl.length > 1000) {\n            return [\n                logoUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Logo url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            logoUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgHomeUrl(homeUrl: string | null): [string | null, ValidationState] {\n        if (homeUrl === null) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            ]\n        }\n        if (homeUrl.length > 1000) {\n            return [\n                homeUrl, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Home url may not be longer than 1000 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            homeUrl, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    static validateOrgResearchInterests(researchInterests: string): [string, ValidationState] {\n        if (researchInterests.length === 0) {\n            return [\n                name, {\n                    type: ValidationErrorType.REQUIRED_MISSING,\n                    message: 'Research Interests may not be empty',\n                    validatedAt: new Date()\n                }]\n        }\n        if (researchInterests.length > 280) {\n            return [\n                researchInterests, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Research Interests may not be longer than 280 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            researchInterests, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n\n    // static validateOrgGravatarHash(gravatarHash: string | null): [string | null, ValidationState] {\n    //     if (!gravatarHash) {\n    //         return [\n    //             null, {\n    //                 type: ValidationErrorType.OK,\n    //                 validatedAt: new Date()\n    //             }]\n    //     }\n    //     if (gravatarHash.length === 0) {\n    //         return [\n    //             gravatarHash, {\n    //                 type: ValidationErrorType.OK,\n    //                 validatedAt: new Date()\n    //             }]\n    //     }\n    //     if (gravatarHash.length > 32) {\n    //         return [\n    //             gravatarHash, {\n    //                 type: ValidationErrorType.ERROR,\n    //                 message: 'Organization gravatar hash may not be longer than 32 characters',\n    //                 validatedAt: new Date()\n    //             }]\n    //     }\n    //     if (gravatarHash.length < 32) {\n    //         return [\n    //             gravatarHash, {\n    //                 type: ValidationErrorType.ERROR,\n    //                 message: 'Organization gravatar hash may not be shorter than 32 characters',\n    //                 validatedAt: new Date()\n    //             }]\n    //     }\n    //     const acceptedChars = /^[a-f0-9]+$/\n    //     if (!acceptedChars.test(gravatarHash)) {\n    //         return [\n    //             gravatarHash, {\n    //                 type: ValidationErrorType.ERROR,\n    //                 message: 'Organization gravatar hash must consist only of the lower case hexadecimal characters a-f and 0-9',\n    //                 validatedAt: new Date()\n    //             }\n    //         ]\n    //     }\n\n    //     return [\n    //         gravatarHash, {\n    //             type: ValidationErrorType.OK,\n    //             validatedAt: new Date()\n    //         }]\n    // }\n\n    static validateOrgDescription(description: string): [string, ValidationState] {\n        if (description.length === 0) {\n            // return [name, {\n            //     type: ValidationErrorType.OK,\n            //     validatedAt: new Date()\n            // }]\n            return [name, {\n                type: ValidationErrorType.ERROR,\n                message: 'Organization description may not be empty',\n                validatedAt: new Date()\n            }]\n        }\n        // TODO: Is there really a limit?\n        // const nonPrintable = Validation.testNonPrintableCharacters(description)\n        // if (nonPrintable) {\n        //     return [\n        //         description, {\n        //             type: UIErrorType.ERROR,\n        //             message: nonPrintable\n        //         }\n        //     ]\n        // }\n        if (description.length > 4096) {\n            return [\n                description, {\n                    type: ValidationErrorType.ERROR,\n                    message: 'Organization description may not be longer than 4,096 characters',\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            description, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }\n        ]\n    }\n\n    static validateMemberTitle(title: string): [string, ValidationState] {\n        const maxTitleLength = 100\n        if (title.length > maxTitleLength) {\n            return [\n                title, {\n                    type: ValidationErrorType.ERROR,\n                    message: `member title may not be longer than ${maxTitleLength} characters`,\n                    validatedAt: new Date()\n                }]\n        }\n        return [\n            title, {\n                type: ValidationErrorType.OK,\n                validatedAt: new Date()\n            }]\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../actions/inviteUser'\nimport * as types from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as orgModel from '../../data/models/organization/model'\n\nexport function loadStart(state: types.StoreState, action: actions.LoadStart): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.LOADING\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: types.StoreState, action: actions.LoadSuccess): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    editState: types.InviteUserViewState.EDITING,\n                    users: action.users,\n                    organization: action.organization,\n                    selectedUser: null\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: types.StoreState, action: actions.LoadError): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.SUCCESS,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: types.StoreState, action: actions.Unload): types.StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                loadingState: types.ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function searchUsersSuccess(state: types.StoreState, action: actions.SearchUsersSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    users: action.users\n                }\n            }\n        }\n    }\n}\n\nexport function selectUserSuccess(state: types.StoreState, action: actions.SelectUserSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    selectedUser: {\n                        user: action.user,\n                        relation: action.relation\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationStart(state: types.StoreState, action: actions.SendInvitationStart): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.SENDING\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationSuccess(state: types.StoreState, action: actions.SendInvitationSuccess): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n\n    const { views: { inviteUserView: { viewModel: { selectedUser, users } } } } = state\n\n    // const selectedUser = state.inviteUserView.value.selectedUser\n    if (!selectedUser) {\n        throw new Error('selected user is null')\n    }\n    selectedUser.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n\n    if (!users) {\n        throw new Error('users is null')\n    }\n    const newUsers = users.map((user) => {\n        if (user.username === selectedUser.user.username) {\n            user.relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n        }\n        return user\n    })\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.SUCCESS,\n                    selectedUser: selectedUser,\n                    users: newUsers\n                }\n            }\n        }\n    }\n}\n\nexport function sendInvitationError(state: types.StoreState, action: actions.SendInvitationError): types.StoreState {\n    if (state.views.inviteUserView.viewModel === null) {\n        throw new Error('view value is null')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            inviteUserView: {\n                ...state.views.inviteUserView,\n                viewModel: {\n                    ...state.views.inviteUserView.viewModel,\n                    editState: types.InviteUserViewState.ERROR\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: types.StoreState, action: Action): types.StoreState | null {\n    switch (action.type) {\n        case ActionFlag.INVITE_USER_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.INVITE_USER_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.INVITE_USER_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.INVITE_USER_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS:\n            return searchUsersSuccess(state, action as actions.SearchUsersSuccess)\n        case ActionFlag.INVITE_USER_SELECT_USER_SUCCESS:\n            return selectUserSuccess(state, action as actions.SelectUserSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_START:\n            return sendInvitationStart(state, action as actions.SendInvitationStart)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS:\n            return sendInvitationSuccess(state, action as actions.SendInvitationSuccess)\n        case ActionFlag.INVITE_USER_SEND_INVITATION_ERROR:\n            return sendInvitationError(state, action as actions.SendInvitationError)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/manageMembership'\nimport { StoreState, ComponentLoadingState, SyncState, ValidationStateOk, ValidationState, ValidationErrorType, SaveState, EditState, ManageMembershipViewModel } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    editableMemberProfile: action.editableMemberProfile,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.NEW,\n                    validationState: validationStateOk()\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction validationStateOk(): ValidationStateOk {\n    const x: ValidationState = {\n        type: ValidationErrorType.OK,\n        validatedAt: new Date()\n    }\n    return x\n}\n\nexport function updateTitleSuccess(state: StoreState, action: actions.UpdateTitleSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n\n    const editedMember = state.views.manageMembershipView.viewModel.editableMemberProfile\n    let syncState\n    if (action.title !== editedMember.title.remoteValue) {\n        syncState = SyncState.DIRTY\n    } else {\n        syncState = SyncState.CLEAN\n    }\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editableMemberProfile: {\n                        ...state.views.manageMembershipView.viewModel.editableMemberProfile,\n                        title: {\n                            value: action.title,\n                            remoteValue: action.title,\n                            syncState: syncState,\n                            validationState: validationStateOk()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const editState = evaluateEditorState(newState.views.manageMembershipView.viewModel)\n\n    return {\n        ...newState,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...newState.views.manageMembershipView,\n                viewModel: {\n                    ...newState.views.manageMembershipView.viewModel,\n                    editState: editState\n                }\n            }\n        }\n    }\n}\nfunction evaluateEditorState(viewModel: ManageMembershipViewModel): EditState {\n    if (viewModel.editableMemberProfile.title.syncState === SyncState.DIRTY) {\n        return EditState.EDITED\n    }\n\n    return EditState.UNEDITED\n}\n\nfunction evaluateSuccess(state: StoreState, action: actions.EvaluateSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n\n    const editState = evaluateEditorState(state.views.manageMembershipView.viewModel)\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editState: editState,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction evaluateError(state: StoreState, action: actions.EvaluateError): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    validationState: {\n                        type: ValidationErrorType.ERROR,\n                        message: 'Validation error(s)',\n                        validatedAt: new Date()\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function saveSuccess(state: StoreState, action: actions.SaveSuccess): StoreState {\n    if (!state.views.manageMembershipView.viewModel) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            manageMembershipView: {\n                ...state.views.manageMembershipView,\n                viewModel: {\n                    ...state.views.manageMembershipView.viewModel,\n                    editState: EditState.UNEDITED,\n                    saveState: SaveState.SAVED,\n                    editableMemberProfile: {\n                        title: {\n                            ...state.views.manageMembershipView.viewModel.editableMemberProfile.title,\n                            syncState: SyncState.CLEAN\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.MANAGE_MEMBERSHIP_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS:\n            return updateTitleSuccess(state, action as actions.UpdateTitleSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS:\n            return evaluateSuccess(state, action as actions.EvaluateSuccess)\n        case ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR:\n            return evaluateError(state, action as actions.EvaluateError)\n        case ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS:\n            return saveSuccess(state, action as actions.SaveSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/requestAddNarrative'\nimport { StoreState, ComponentLoadingState, SaveState, NarrativeState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    narratives: action.narratives,\n                    selectedNarrative: null,\n                    relation: action.relation,\n                    error: null,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function sendRequestStart(state: StoreState, action: actions.SendRequestStart): StoreState {\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: SaveState.SAVING\n                }\n            }\n        }\n    }\n}\n\nexport function sendRequestSuccess(state: StoreState, action: actions.SendRequestSuccess): StoreState {\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const newState: StoreState = {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: SaveState.SAVED\n                }\n            }\n        }\n    }\n\n    const viewModel = newState.views.requestNarrativeView.viewModel\n\n    if (!viewModel) {\n        throw new Error('view model missing')\n    }\n\n    const selectedNarrative = viewModel.selectedNarrative\n\n    // If the request is by an admin, it will be returned as true, not the request\n    // (the api returns {complete: true})\n    if (action.request === true) {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.ASSOCIATED\n            }\n            return orgNarrative\n        })\n    } else {\n        viewModel.narratives = viewModel.narratives.map((orgNarrative) => {\n            if (orgNarrative.narrative.workspaceId === selectedNarrative!.narrative.workspaceId) {\n                orgNarrative.status = NarrativeState.REQUESTED\n            }\n            return orgNarrative\n        })\n    }\n\n    return newState\n}\n\nexport function sendRequestError(state: StoreState, action: actions.SendRequestError): StoreState {\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    saveState: SaveState.SAVE_ERROR,\n                    error: action.error\n                }\n            }\n        }\n    }\n}\n\nexport function selectNarrativeSuccess(state: StoreState, action: actions.SelectNarrativeSuccess): StoreState {\n    if (!state.views.requestNarrativeView.viewModel) {\n        throw new Error('view model missing')\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                // TODO: a selected state?\n                error: null,\n                viewModel: {\n                    ...state.views.requestNarrativeView.viewModel,\n                    selectedNarrative: action.narrative\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction sortSuccess(state: StoreState, action: actions.SortSuccess): StoreState {\n    const viewModel = state.views.requestNarrativeView.viewModel\n    if (viewModel === null) {\n        return state\n    }\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            requestNarrativeView: {\n                ...state.views.requestNarrativeView,\n                viewModel: {\n                    ...viewModel,\n                    narratives: action.narratives\n                }\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS:\n            return sendRequestSuccess(state, action as actions.SendRequestSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR:\n            return sendRequestStart(state, action as actions.SendRequestStart)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS:\n            return selectNarrativeSuccess(state, action as actions.SelectNarrativeSuccess)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS:\n            return sortSuccess(state, action as actions.SortSuccess)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import * as actions from '../../actions/entities/organization'\nimport { StoreState } from '../../../types'\nimport { ActionFlag } from '../../actions'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess) {\n    const newOrgs = new Map(state.entities.organizations.byId)\n    newOrgs.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            organizations: {\n                ...state.entities.organizations.byId,\n                byId: newOrgs\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: actions.OrganizationEntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}\n","\nimport * as actions from '../actions/entities'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport organizationsReducer from './entities/organization'\n\nfunction userLoaderSuccess(state: StoreState, action: actions.UserLoaderSuccess) {\n    const users = state.entities.users\n    // mutation ... horrible ;)\n    users.byId.set(action.user.username, action.user)\n    // return state\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            users: {\n                ...state.entities.users,\n                byId: new Map(users.byId)\n            }\n        }\n    }\n}\n\nfunction organizationLoaderSuccess(state: StoreState, action: actions.OrganizationLoaderSuccess) {\n    const orgsMap = state.entities.orgs.byId\n    orgsMap.set(action.organization.id, action.organization)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            orgs: {\n                ...state.entities.orgs,\n                byId: new Map(orgsMap)\n            }\n        }\n    }\n}\n\nfunction loadNarrativeSuccess(state: StoreState, action: actions.LoadNarrativeSuccess) {\n    const narratives = state.entities.narratives\n    narratives.byId.set(action.narrative.workspaceId, action.narrative)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                byId: new Map(narratives.byId)\n            }\n        }\n    }\n}\n\n// TODO: start and error\n\nexport default function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n            return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n        case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n            return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n        case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n            return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n    }\n\n    return organizationsReducer(state, action)\n}\n\n","import { Action } from 'redux'\nimport * as actions from '../actions/organizationCentric'\nimport { StoreState, ComponentLoadingState } from '../../types'\nimport { ActionFlag } from '../actions'\n\nexport function loadStart(state: StoreState, action: actions.LoadStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                loadingState: ComponentLoadingState.LOADING,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadError(state: StoreState, action: actions.LoadError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                ...state.views.organizationCentricView,\n                loadingState: ComponentLoadingState.ERROR,\n                error: action.error,\n                viewModel: null\n            }\n        }\n    }\n}\n\nexport function loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                ...state.views.organizationCentricView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                error: null,\n                viewModel: {\n                    organization: action.organization,\n                    pendingJoinRequest: action.pendingJoinRequest,\n                    pendingJoinInvitation: action.pendingJoinInvitation,\n                    relation: action.relation\n                }\n            }\n        }\n    }\n}\n\nexport function unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            organizationCentricView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                viewModel: null\n            }\n        }\n    }\n}\n\nfunction reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START:\n            return loadStart(state, action as actions.LoadStart)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR:\n            return loadError(state, action as actions.LoadError)\n        case ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD:\n            return unload(state, action as actions.Unload)\n        default:\n            return null\n    }\n}\n\nexport default reducer","import * as actions from '../actions/global'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport { Action } from 'redux';\nimport { access } from 'fs';\n\nexport function accessNarrativeSuccess(state: StoreState, action: actions.AccessNarrativeSuccess): StoreState {\n    const narrativesById = state.entities.narratives.byId\n    narrativesById.set(action.narrative.workspaceId, action.narrative)\n\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            narratives: {\n                ...state.entities.narratives,\n                byId: narrativesById\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.GLOBAL_ACCESS_NARRATIVE_SUCCESS:\n            return accessNarrativeSuccess(state, action as actions.AccessNarrativeSuccess)\n        default:\n            return null\n    }\n}\n\n// function reducer(state: StoreState, action: actions.EntityAction): StoreState | null {\n//     switch (action.type) {\n//         case ActionFlag.ENTITY_USER_LOADER_SUCCESS:\n//             return userLoaderSuccess(state, action as actions.UserLoaderSuccess)\n//         case ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS:\n//             return organizationLoaderSuccess(state, action as actions.OrganizationLoaderSuccess)\n//         case ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS:\n//             return loadNarrativeSuccess(state, action as actions.LoadNarrativeSuccess)\n//         default:\n//             return null\n//     }\n// }\n\n// export default reducer","import { Action } from 'redux'\nimport * as actions from '../actions/notifications'\nimport { StoreState } from '../../types'\nimport { ActionFlag } from '../actions'\nimport * as feedsModel from '../../data/models/feeds'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    const notificationsById = new Map<feedsModel.NotificationID, feedsModel.OrganizationNotification>()\n    action.notifications.forEach((notification) => {\n        notificationsById.set(notification.id, notification)\n    })\n\n    return {\n        ...state,\n        db: {\n            ...state.db,\n            notifications: {\n                all: action.notifications,\n                byId: notificationsById\n            }\n        }\n    }\n}\n\nfunction unload(state: StoreState, action: actions.Unload): StoreState {\n    return {\n        ...state,\n        db: {\n            ...state.db,\n            notifications: {\n                all: [],\n                byId: new Map()\n            }\n        }\n    }\n}\n\nfunction readSuccess(state: StoreState, action: actions.ReadSuccess): StoreState {\n    const {\n        db: { notifications: { all, byId } }\n    } = state\n    const allNotifications = all.filter((notification) => {\n        return (notification.id !== action.notificationId)\n    })\n    const notificationsById = new Map(byId)\n    notificationsById.delete(action.notificationId)\n    return {\n        ...state,\n        db: {\n            ...state.db,\n            notifications: {\n                all: allNotifications,\n                byId: notificationsById\n            }\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.NOTIFICATIONS_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        case ActionFlag.NOTIFICATIONS_UNLOAD:\n            return unload(state, action as actions.Unload)\n        case ActionFlag.NOTIFICATIONS_READ_SUCCESS:\n            return readSuccess(state, action as actions.ReadSuccess)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport * as actions from '../actions/dataServices'\nimport { StoreState } from '../../types';\nimport { ActionFlag } from '../actions';\nimport * as userProfileModel from '../../data/models/profile'\n\nfunction loadSuccess(state: StoreState, action: actions.LoadSuccess): StoreState {\n    return {\n        ...state,\n        db: {\n            ...state.db,\n        }\n    }\n}\n\nexport default function reducer(state: StoreState, action: Action): StoreState | null {\n    switch (action.type) {\n        case ActionFlag.DATA_SERVICE_LOAD_SUCCESS:\n            return loadSuccess(state, action as actions.LoadSuccess)\n        default:\n            return null\n    }\n}","import { Action } from 'redux'\nimport { StoreState } from '../../types'\nimport addOrgReducer from './addOrg'\nimport editOrgReducer from './editOrg'\nimport viewOrgReducer from './viewOrg'\nimport browseOrgsReducer from './browseOrgs'\nimport authReducer from './auth'\nimport appReducer from './app'\nimport manageOrganizatiopRequests from './manageOrganizationRequests'\nimport viewMembers from './viewMembers'\nimport inviteUser from './inviteUser'\nimport manageMembership from './manageMembership'\nimport requestAddNarrative from './requestAddNarrative'\nimport entities from './entities'\nimport organizationCentric from './organizationCentric'\nimport global from './global'\nimport notifications from './notifications'\nimport dataServices from './dataServices'\n\n\nexport function reducer(state: StoreState, action: Action): StoreState {\n    return addOrgReducer(state, action) ||\n        editOrgReducer(state, action) ||\n        browseOrgsReducer(state, action) ||\n        viewOrgReducer(state, action) ||\n        authReducer(state, action) ||\n        appReducer(state, action) ||\n        manageOrganizatiopRequests(state, action) ||\n        viewMembers(state, action) ||\n        inviteUser(state, action) ||\n        manageMembership(state, action) ||\n        requestAddNarrative(state, action) ||\n        entities(state, action) ||\n        organizationCentric(state, action) ||\n        global(state, action) ||\n        notifications(state, action) ||\n        dataServices(state, action) ||\n        state;\n}\n\nexport default reducer","import * as React from 'react'\nimport './Owner.css'\n\nimport Avatar from './Avatar'\nimport { Icon, Tooltip } from 'antd';\nimport * as userModel from '../../data/models/user'\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface OwnerProps {\n    user: userModel.User\n    avatarSize?: number\n    showAvatar: boolean\n}\n\ninterface OwnerState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nexport default class Owner extends React.Component<OwnerProps, OwnerState> {\n    constructor(props: OwnerProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        return (\n            <span>\n                <Icon type=\"crown\" /> owner\n        </span>\n        )\n    }\n\n    renderAvatar() {\n        if (this.props.showAvatar) {\n            return (\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n            )\n        }\n    }\n\n    renderCompact() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"Owner-owner\" >\n                {/* <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div> */}\n                {this.renderAvatar()}\n\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            title={tooltip}>\n                            <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n\n                    </div>\n                    {/* <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div className=\"Owner View-NORMAL\" >\n                <div className=\"Owner-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Owner-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Owner-infoCol\">\n                    <div className=\"Owner-name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div className=\"Owner-username\">\n                        {this.props.user.username}\n                    </div>\n                    {/* <div className=\"role\">\n                        {this.renderRole()}\n                    </div> */}\n                    {/* <div className=\"joinedAt\">\n                        <span className=\"field-label\">joined</span>{' '}{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(this.props.member.joinedAt)}\n                    </div> */}\n                    <div className=\"Owner-title\">\n                        {this.props.user.title || <i>no title in user profile</i>}\n                    </div>\n                    <div className=\"Owner-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Owner-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    render() {\n        return this.renderCompact()\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return this.renderCompact()\n\n        //     case View.NORMAL:\n        //         return this.renderNormal()\n        // }\n    }\n}\n\n","import * as React from 'react'\nimport md5 from 'md5'\n\nexport interface OrgLogoProps {\n    logoUrl: string | null\n    size: number\n    organizationName: string\n    organizationId: string\n}\n\nexport interface OrgLogoState {\n\n}\n\nexport default class OrgLogo extends React.Component<OrgLogoProps, OrgLogoState> {\n    constructor(props: OrgLogoProps) {\n        super(props)\n    }\n\n    renderLogoUrl() {\n        if (!this.props.logoUrl) {\n            return (\n                <span>n/a</span>\n            )\n        }\n        return (\n            <img src={this.props.logoUrl} width={this.props.size} />\n        )\n    }\n\n    // see: https://github.com/lautis/unicode-substring/blob/master/index.js\n    charAt(inString: string, position: number) {\n        // const c1 = inString.charAt(position)\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderDefaultInitial() {\n        const initial = this.charAt(this.props.organizationName, 0).toUpperCase()\n        // const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.organizationId)\n\n        const color = hash.substr(0, 6)\n        // return (\n        //     <span style={{ color: '\"#' + color + '\"', width: this.props.size, height: this.props.size, fontSize: this.props.size - 6 }}\n        //     >{initial}</span>\n        // )\n        return (\n            <svg width={this.props.size} height={this.props.size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={this.props.size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogo() {\n        if (this.props.logoUrl) {\n            return this.renderLogoUrl()\n        }\n        return this.renderDefaultInitial();\n    }\n\n    render() {\n        return this.renderLogo()\n    }\n}","import * as React from 'react'\nimport './Avatar.css'\nimport noUserPic from './nouserpic.png'\n\nimport { User } from '../../types'\n\nexport interface AvatarProps {\n    user: User,\n    size: number\n}\n\ninterface AvatarState {\n\n}\n\nexport class Avatar extends React.Component<AvatarProps, AvatarState> {\n    constructor(props: AvatarProps) {\n        super(props)\n    }\n\n    getAvatarUrl(user: User) {\n        switch (user.avatarOption || 'gravatar') {\n            case 'gravatar':\n                const gravatarDefault = user.gravatarDefault || 'identicon';\n                const gravatarHash = user.gravatarHash;\n                if (gravatarHash) {\n                    return 'https://www.gravatar.com/avatar/' + gravatarHash + '?s=60&amp;r=pg&d=' + gravatarDefault;\n                } else {\n                    return noUserPic;\n                }\n            case 'silhouette':\n            case 'mysteryman':\n            default:\n                return noUserPic;\n        }\n    }\n\n    render() {\n        const avatarUrl = this.getAvatarUrl(this.props.user)\n        return (\n            <img\n                src={avatarUrl}\n                style={{ width: this.props.size }}\n            />\n        )\n    }\n\n}\n\nexport default Avatar","export interface ServiceClientParams {\n    url: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface JSONResponse {\n    id: string\n    version: string\n    result: any\n    error: any\n}\n\nexport class ServiceClient {\n    url: string;\n    token: string | null;\n\n    static module: string;\n\n    constructor({ url, token }: ServiceClientParams) {\n        this.url = url\n        this.token = token || null\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: [param]\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: (<typeof ServiceClient>this.constructor).module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n\n}\n\nexport class AuthorizedServiceClient extends ServiceClient {\n    token: string;\n\n    constructor(params: ServiceClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    callFunc(func: string, param: any): Promise<JSONResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('Request error: ' + response.status + ', ' + response.statusText)\n                }\n                return <unknown>response.json() as JSONResponse\n            })\n    }\n}\n\n","import { ServiceClientParams, ServiceClient, AuthorizedServiceClient } from \"./serviceClient\";\n\nexport interface User {\n    username: string,\n    realname: string,\n    thumbnail: string\n}\n\nexport type OrganizationSetting = {\n    settings: {\n        lastVisitedAt: Date | null\n    }\n}\n\nexport type OrganizationsSettings = {\n    orgSettings: any //Map<string, OrganizationSetting>\n}\n\nexport interface UserProfile {\n    user: User,\n    profile: {\n        synced: {\n            gravatarHash: string\n        }\n        userdata: {\n            jobTitle: string,\n            jobTitleOther: string,\n            organization: string\n            city: string\n            state: string\n            country: string\n            avatarOption: string\n            gravatarDefault: string\n        }\n        metadata: {\n            createdBy: string\n            created: string\n        }\n        plugins: {\n            organizations?: OrganizationsSettings\n        }\n    }\n}\n\n// Note that we are only supporting updating of the orgs plugin settings, \n// so make this strict-ish.\nexport interface UserProfileUpdate {\n    user: User,\n    profile: {\n        plugins: {\n            organizations: OrganizationsSettings\n        }\n    }\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\n\nexport interface UserProfileClientParams extends ServiceClientParams {\n}\n\nexport class UserProfileClient extends AuthorizedServiceClient {\n    static module: string = 'UserProfile'\n    static profileCache: Map<string, UserProfile> = new Map()\n\n    constructor(params: UserProfileClientParams) {\n        super(params)\n    }\n\n    // makePayload(method: string, param: any): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: [param]\n    //     }\n    // }\n\n    // makeEmptyPayload(method: string): JSONPayload {\n    //     return {\n    //         version: '1.1',\n    //         method: 'UserProfile.' + method,\n    //         id: String(Math.random()).slice(2),\n    //         params: []\n    //     }\n    // }\n\n    getVersion(): Promise<any> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makeEmptyPayload('version'))\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error('User profile request error: ' + response.status + ', ' + response.statusText)\n                }\n                return response.json()\n            })\n    }\n\n    async getUserProfile(username: string): Promise<UserProfile> {\n        if (UserProfileClient.profileCache.has(username)) {\n            return Promise.resolve(UserProfileClient.profileCache.get(username)!)\n        }\n\n        return this.callFunc('get_user_profile', [username])\n            .then((result) => {\n                return result.result[0][0] as UserProfile\n            })\n    }\n\n    async updateUserProfile(update: UserProfileUpdate): Promise<void> {\n        // TODO: update user profile cache here...\n        UserProfileClient.profileCache.delete(update.user.username)\n        return this.callFunc('update_user_profile', { profile: update })\n            .then(() => {\n                return\n            })\n    }\n\n    // async setUserProfile(username: string, profile: UserProfile): Promise<void> {\n    //     // TODO: update user profile cache here...\n    //     this.callFunc('update_user_profile', profile)\n    // }\n\n    async getUserProfiles(usernames: Array<string>): Promise<Array<UserProfile>> {\n        return this.callFunc('get_user_profile', usernames)\n            .then((result) => {\n                return result.result[0] as Array<UserProfile>\n            })\n    }\n\n    async getAllUsers(): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: '' })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n\n    async searchUsers(query: string): Promise<Array<User>> {\n        return this.callFunc('filter_users', { filter: query })\n            .then((result) => {\n                return result.result[0] as Array<User>\n            })\n    }\n}","import { UserProfileClient, UserProfile } from '../apis/userProfile'\n\n\nexport type Username = string\n\nexport interface User {\n    username: string\n    realname: string\n    title: string | null\n    organization: string | null\n    city: string | null\n    state: string | null\n    country: string | null\n    avatarOption: string | null\n    gravatarHash: string | null\n    gravatarDefault: string | null\n}\n\n\nfunction profileToUser(profile: UserProfile): User {\n    let jobTitle\n    if (!profile.profile.userdata) {\n        return {\n            username: profile.user.username,\n            realname: profile.user.realname,\n            city: null,\n            state: null,\n            country: null,\n            title: null,\n            organization: null,\n            avatarOption: null,\n            gravatarHash: null,\n            gravatarDefault: null\n        }\n    }\n    if (profile.profile.userdata.jobTitle === 'Other') {\n        jobTitle = profile.profile.userdata.jobTitleOther\n    } else {\n        jobTitle = profile.profile.userdata.jobTitle\n    }\n\n    return {\n        username: profile.user.username,\n        realname: profile.user.realname,\n        city: profile.profile.userdata.city,\n        state: profile.profile.userdata.state,\n        country: profile.profile.userdata.country,\n        title: jobTitle,\n        organization: profile.profile.userdata.organization,\n        avatarOption: profile.profile.userdata.avatarOption,\n        gravatarHash: profile.profile.synced.gravatarHash,\n        gravatarDefault: profile.profile.userdata.gravatarDefault\n    }\n}\n\nexport interface UserQuery {\n    query: string\n    excludedUsers: Array<string>\n}\n\nexport interface BriefUser {\n    username: string\n    realname: string\n}\n\n\n\n\ninterface UserModelParams {\n    userProfileServiceURL: string\n    token: string\n}\n\nexport class UserModel {\n\n    params: UserModelParams\n    userProfileClient: UserProfileClient\n\n    cache: Map<Username, User>\n\n    constructor(params: UserModelParams) {\n        this.params = params\n        this.userProfileClient = new UserProfileClient({\n            url: this.params.userProfileServiceURL,\n            token: this.params.token\n        })\n        this.cache = new Map<Username, User>()\n    }\n\n    async getUser(username: Username): Promise<User> {\n        if (this.cache.has(username)) {\n            return this.cache.get(username)!\n        }\n\n        const userProfile = await this.userProfileClient.getUserProfile(username)\n        const user = profileToUser(userProfile)\n        this.cache.set(username, user)\n        return user\n    }\n\n    async getUsers(usernames: Array<Username>): Promise<Map<Username, User>> {\n        const result: Map<Username, User> = new Map()\n\n        const toFetch: Array<Username> = []\n\n        usernames.forEach((username) => {\n            if (this.cache.has(username)) {\n                result.set(username, this.cache.get(username)!)\n            } else {\n                toFetch.push(username)\n            }\n        })\n\n        const userProfiles = await this.userProfileClient.getUserProfiles(toFetch)\n        const users = userProfiles.map((profile) => {\n            return profileToUser(profile)\n        })\n\n        userProfiles.forEach((userProfile) => {\n            const user = profileToUser(userProfile)\n            this.cache.set(user.username, user)\n            result.set(user.username, user)\n        })\n\n        return result\n    }\n\n    async searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n        const users = await this.userProfileClient.searchUsers(query.query)\n        return users\n            .filter(({ username }) => {\n                return (query.excludedUsers.indexOf(username) === -1)\n            })\n            .map(({ username, realname }) => {\n                return {\n                    username, realname\n                }\n            })\n    }\n\n    // searchUsers(query: UserQuery): Promise<Array<BriefUser>> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.searchUsers(query.query)\n    //         .then((users) => {\n    //             return users\n    //                 .filter(({ username }) => {\n    //                     return (query.excludedUsers.indexOf(username) === -1)\n    //                 })\n    //                 .map(({ username, realname }) => {\n    //                     return {\n    //                         username, realname\n    //                     }\n    //                 })\n\n    //         })\n    // }\n\n    // getUser(username: string): Promise<User> {\n    //     const userProfileClient = new userProfile.UserProfileClient({\n    //         url: this.params.userProfileServiceURL,\n    //         token: this.params.token\n    //     })\n\n    //     return userProfileClient.getUserProfile(username)\n    //         .then((userProfile) => {\n    //             return this.profileToUser(userProfile)\n    //         })\n    // }\n}","export interface GenericClientParams {\n    url: string\n    module: string\n    token?: string\n}\n\nexport interface JSONPayload {\n    version: string,\n    method: string,\n    id: string,\n    params: any\n}\n\nexport interface ErrorResult {\n    name: string\n    code: number\n    message: string\n    error: string\n}\n\nexport type JSONRPCResponse = [any, ErrorResult | null]\n\nexport class GenericClient {\n    url: string;\n    token: string | null\n    module: string\n\n    constructor({ url, token, module }: GenericClientParams) {\n        this.url = url\n        this.token = token || null\n        this.module = module\n    }\n\n    makePayload(method: string, param: any): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: param\n        }\n    }\n\n    makeEmptyPayload(method: string): JSONPayload {\n        return {\n            version: '1.1',\n            method: this.module + '.' + method,\n            id: String(Math.random()).slice(2),\n            params: []\n        }\n    }\n\n    async processResponse(response: Response): Promise<JSONRPCResponse> {\n        if (response.status === 200) {\n            const { result, error } = await response.json()\n            if (result) {\n                return [result, null]\n            } else {\n                return [null, error]\n            }\n\n        } else if (response.status === 204) {\n            return [null, null]\n        }\n        if (response.status === 500) {\n            if (response.headers.get('Content-Type') === 'application/json') {\n                const { error } = await response.json()\n                return [null, error]\n            } else {\n                const text = await response.text()\n                return [null, {\n                    code: 0,\n                    name: 'Internal Server Error (for real)',\n                    message: 'The service experienced an internal error',\n                    error: text\n                }]\n            }\n        }\n        throw new Error('Unexpected response: ' + response.status + ', ' + response.statusText)\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        return fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n            .then((response) => {\n                return this.processResponse(response)\n            })\n    }\n}\n\nexport class AuthorizedGenericClient extends GenericClient {\n    token: string;\n\n    constructor(params: GenericClientParams) {\n        super(params)\n        if (!params.token) {\n            throw new Error('Authorized client requires token')\n        }\n        this.token = params.token\n    }\n\n    async callFunc(func: string, param: any): Promise<JSONRPCResponse> {\n        const response = await fetch(this.url, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-store',\n            headers: {\n                Authorization: this.token,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            body: JSON.stringify(this.makePayload(func, param))\n        })\n        return this.processResponse(response)\n    }\n}\n\n","import { AuthorizedServiceClient, ServiceClientParams } from './serviceClient'\n\n// types from module\n\nexport interface Service {\n    module_name: string\n    version: string | null\n}\n\nexport interface ServiceStatus {\n    module_name: string\n    version: string\n    git_commit_hash: string\n    release_tags: Array<string>\n    hash: string\n    url: string\n    up: number // aka boolean\n    status: string\n    health: string\n}\n\n// impl\n\nexport interface ServiceWizardClientParams extends ServiceClientParams {\n\n}\n\nexport interface GetServiceStatusParams extends Service { }\n\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\nexport class ServiceWizardClient extends AuthorizedServiceClient {\n\n    static module: string = 'ServiceWizard'\n\n    constructor(params: ServiceWizardClientParams) {\n        super(params)\n    }\n\n\n    getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        return this.callFunc('get_service_status', params)\n            .then((result) => {\n                if (result.result &&\n                    result.result.length > 0) {\n                    const theResult = result.result[0]\n                    if (!theResult) {\n                        throw new Error('Crazy at it seems, no result')\n                    }\n                    return theResult as GetServiceStatusResult\n                } else {\n                    throw new Error('Crazy at it seems, no result')\n                }\n            })\n    }\n\n}","import Bluebird from 'bluebird'\nimport { AuthorizedServiceClient } from './serviceClient'\n\nimport { ServiceWizardClient } from './serviceWizard'\nimport { GenericClient, AuthorizedGenericClient } from './genericClient'\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Bluebird<T>\n\nexport interface CacheParams {\n    itemLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n}\n\nexport interface CacheItem<T> {\n    id: string\n    value: T | null\n    createdAt: number\n    fetcher: () => Bluebird<T>\n    reserved: boolean\n}\n\nexport class Cache<T> {\n\n    cache: Map<string, CacheItem<T>>\n    cacheLifetime: number\n    monitoringFrequency: number\n    waiterTimeout: number\n    waiterFrequency: number\n    isMonitoring: boolean\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>()\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        window.setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item)\n                    cacheRenewed = true\n                }\n            });\n            this.cache = newCache\n            this.isMonitoring = false\n            if (cacheRenewed) {\n                this.runMonitor()\n            }\n        }, this.monitoringFrequency)\n    }\n\n    isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return (elapsed > this.cacheLifetime);\n    }\n\n    isReserved(cacheItem: any) {\n        return cacheItem.reserved;\n    }\n\n    getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null\n        }\n        const cached = this.cache.get(id)\n        if (this.isExpired(cached)) {\n            this.cache.delete(id)\n            return;\n        }\n        return cached;\n    }\n\n    reserveWaiter(item: CacheItem<T>): Bluebird<CacheItem<T>> {\n        return new Bluebird<CacheItem<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const waiting = true;\n\n            const waiter = () => {\n                if (!waiting) {\n                    return;\n                }\n                window.setTimeout(() => {\n                    if (this.cache.has(item.id)) {\n                        // If on a wait-loop cycle we discover that the\n                        // cache item has been deleted, we volunteer\n                        // to attempt to fetch it ourselves.\n                        // The only case now for this is a cancellation\n                        // of the first request to any dynamic service,\n                        // which may cancel the initial service wizard\n                        // call rather than the service call.\n                        return this.reserveAndFetch({\n                            id: item.id,\n                            fetcher: item.fetcher\n                        })\n                            .then(() => {\n                                // resolve(result);\n                                // we resolve with the cache item just\n                                // as if we had waited for it.\n                                resolve(this.cache.get(item.id))\n                            })\n                            .catch((err: Error) => {\n                                reject(err);\n                            });\n                    }\n                    if (!item.reserved) {\n                        resolve(item);\n                    } else {\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed > this.waiterTimeout) {\n                            this.cache.delete(item.id)\n                            reject(new Error(\n                                'Timed-out waiting for cache item to become available; timeout '\n                                + this.waiterTimeout + ', waited ' + elapsed));\n                        } else {\n                            waiter();\n                        }\n                    }\n                }, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    reserveAndFetch({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        // now, reserve it.\n        this.reserveItem(id, fetcher)\n\n        // and then fetch it.\n        const fetchPromise = fetcher()\n            .then((result: any) => {\n                this.setItem(id, result, fetcher)\n                return result\n            })\n            .finally(() => {\n                // If the fetch was cancelled, we need to remove\n                // the reserved item. This should signal any queued waiters\n                // to spawn their own fetch.\n                if (fetchPromise.isCancelled()) {\n                    this.cache.get(id)\n                }\n            });\n        return fetchPromise;\n    }\n\n    getItemWithWait({ id, fetcher }: { id: string, fetcher: () => Bluebird<T> }) {\n        const cached = this.cache.get(id)\n        if (cached) {\n            if (this.isExpired(cached)) {\n                this.cache.delete(id)\n            } else if (this.isReserved(cached)) {\n                return this.reserveWaiter(cached)\n                    .then((cached) => {\n                        return cached.value;\n                    });\n            } else {\n                return Bluebird.resolve(cached.value)\n            }\n        }\n\n        return this.reserveAndFetch({ id, fetcher });\n    }\n\n    reserveItem(id: string, fetcher: () => Bluebird<T>) {\n        this.cache.set(id, {\n            id: id,\n            createdAt: new Date().getTime(),\n            reserved: true,\n            value: null,\n            fetcher: fetcher\n        });\n    }\n\n    setItem(id: string, value: T, fetcher: () => Bluebird<T>) {\n        if (this.cache.has(id)) {\n            const item = this.cache.get(id)\n            if (item && item.reserved) {\n                item.reserved = false\n                item.value = value\n                item.fetcher = fetcher\n            } else {\n                // overwriting? should we allow this?\n                this.cache.set(id, {\n                    id: id,\n                    createdAt: new Date().getTime(),\n                    fetcher: fetcher,\n                    reserved: false,\n                    value: value\n                })\n            }\n        } else {\n            this.cache.set(id, {\n                id: id,\n                createdAt: new Date().getTime(),\n                fetcher: fetcher,\n                reserved: false,\n                value: value\n            })\n        }\n        this.runMonitor();\n    }\n}\nvar moduleCache = new Cache<any>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n})\n\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams {\n    token: string\n    url: string\n    version?: string\n    timeout?: number\n    rpcContext?: any\n}\n\nexport class DynamicServiceClient {\n    token: string\n    timeout: number\n    rpcContext: any\n    url: string\n    version: string | null\n\n    static module: string\n\n    constructor({ token, url, version, timeout, rpcContext }: DynamicServiceClientParams) {\n        // Establish an auth object which has properties token and user_id.\n        this.token = token;\n        this.timeout = timeout || 10000;\n        this.rpcContext = rpcContext || null;\n\n        if (!url) {\n            throw new Error('The service discovery url was not provided');\n        }\n        this.url = url;\n\n        this.version = version || null;\n        if (version === 'auto') {\n            this.version = null;\n        }\n    }\n\n    options() {\n        return {\n            timeout: this.timeout,\n            authorization: this.token,\n            rpcContext: this.rpcContext\n        };\n    }\n\n    getModule() {\n        return (<typeof DynamicServiceClient>this.constructor).module\n    }\n\n    moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.getModule() + ':auto';\n        } else {\n            moduleId = this.getModule() + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    getCached(fetcher: () => Bluebird<any>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    lookupModule() {\n        return this.getCached((): Bluebird<any> => {\n            const func = 'get_service_status';\n            const params = [{\n                module_name: this.getModule(),\n                version: this.version\n            }];\n            // NB: pass null for numRets (number of return values) so we get the\n            // full return structure.\n            const client = new ServiceWizardClient({\n                url: this.url,\n                token: this.token\n            })\n\n            return Bluebird.resolve(\n                client.getServiceStatus({\n                    module_name: this.getModule(),\n                    version: this.version\n                })\n            )\n        })\n    }\n\n    callFunc(funcName: string, params: any) {\n        return this.lookupModule()\n            .then((serviceStatus) => {\n                const client = new AuthorizedGenericClient({\n                    module: serviceStatus.module_name,\n                    url: serviceStatus.url,\n                    token: this.token\n                })\n                return Bluebird.resolve(\n                    client.callFunc(funcName, params)\n                )\n            })\n            .catch((err) => {\n                console.error('ERROR: ' + err.name + \" = \" + err.message, err)\n                throw err\n            })\n    }\n}\n","// import { AuthorizedServiceClient, ServiceClientParams, JSONPayload } from './serviceClient'\n\nimport { DynamicServiceClient, DynamicServiceClientParams } from './dynamicServiceClient'\n\nimport { RawObjectInfo, RawWorkspaceInfo, WorkspaceInfo, ObjectInfo, workspaceInfoToObject, objectInfoToObject } from './workspaceUtils'\n\nexport interface NarrativeServiceClientParams extends DynamicServiceClientParams {\n\n}\n\nexport interface ListNarrativesParams {\n    type: string\n}\n\ntype Metadata = {}\n\n/* Information about an object, including user provided metadata.\n\n       obj_id objid - the numerical id of the object.\n       obj_name name - the name of the object.\n       type_string type - the type of the object.\n       timestamp save_date - the save date of the object.\n       obj_ver ver - the version of the object.\n       username saved_by - the user that saved or copied the object.\n       ws_id wsid - the workspace containing the object.\n       ws_name workspace - the workspace containing the object.\n       string chsum - the md5 checksum of the object.\n       int size - the size of the object in bytes.\n       usermeta meta - arbitrary user-supplied metadata about\n           the object.\n   */\n\n\n\n\nexport interface ListNarrativesResponseResult {\n    narratives: Array<{\n        ws: RawWorkspaceInfo\n        nar: RawObjectInfo\n    }>\n}\n\nexport interface ServiceResponse<T> {\n    id: string\n    version: string\n    result?: [T] | null\n    error?: any\n}\n\n\n\n// export type ListNarrativesResponse = ServiceResponse<ListNarrativesResponseResult>\n\n\n\nexport class NarrativeServiceClient extends DynamicServiceClient {\n\n    static module: string = 'NarrativeService'\n\n    constructor(params: NarrativeServiceClientParams) {\n        super(params)\n    }\n\n\n    async listNarratives(type: string): Promise<ListNarrativesResponseResult> {\n        // note usage of unknown below -- Bluebird and native Promise!\n        const [result, error] = await this.callFunc('list_narratives', [{\n            type: type\n        }])\n        // as Promise<ServiceResponse<ListNarrativesResponseResult>>\n\n        // should check id and version, or should call func do that?\n        if (result && result[0]) {\n            return result[0]\n            // return result[0].narratives.map((nar) => {\n            //     return {\n            //         workspaceInfo: workspaceInfoToObject(nar.ws),\n            //         objectInfo: objectInfoToObject(nar.nar)\n            //     }\n            // })\n        } else {\n            // TODO: handle error\n            // console.error('Result is missing', id, version, result, error)\n            throw new Error('Result is missing!')\n        }\n    }\n\n}","import { AuthorizedGenericClient } from '../apis/genericClient'\nimport { NarrativeServiceClient } from '../apis/narrativeService'\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport * as workspaceApi from '../apis/workspaceUtils'\nimport * as userModel from './user'\n\nexport enum NarrativeState {\n    NONE = 0,\n    ASSOCIATED,\n    REQUESTED\n}\n\nexport type NarrativeID = number\n\nexport type WorkspaceID = number\nexport type ObjectID = number\n\nexport enum NarrativeAccess {\n    NONE = 0,\n    VIEW,\n    EDIT,\n    ADMIN,\n    OWNER\n}\n\nexport interface NarrativeBase {\n    workspaceId: WorkspaceID,\n    access: NarrativeAccess\n}\n\nexport interface InaccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.NONE\n}\n\nexport interface AccessibleNarrative extends NarrativeBase {\n    access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n    isPublic: boolean\n    objectId: ObjectID\n    title: string\n    // description?: string\n    owner: userModel.Username\n    // creator: userModel.Username\n    // createdAt: Date\n    lastSavedAt: Date\n    lastSavedBy: userModel.Username\n}\n\nexport type Narrative = AccessibleNarrative | InaccessibleNarrative\n\n// export interface OrganizationNarrativex {\n//     workspaceId: WorkspaceID\n//     objectId: ObjectID\n//     title: string\n//     status: NarrativeState\n//     // inOrganization: boolean\n//     // createdAt: Date\n//     owner: userModel.Username\n//     modifiedAt: Date\n// }\n\nexport interface OrganizationNarrative {\n    status: NarrativeState\n    narrative: AccessibleNarrative\n}\n\nexport interface NarrativeWorkspaceInfo extends workspaceApi.WorkspaceInfo {\n    metadata: {\n        narrative_nice_name: string\n        narrative: string\n        is_temporary: string\n    }\n}\n// export interface GetOwnNarrativesResult {\n//     workspaceInfo: WorkspaceInfo\n//     objectInfo: ObjectInfo\n// }\n\nexport enum Sort {\n    TITLE = 'TITLE',\n    LAST_SAVED = 'LAST_SAVED'\n}\n\ninterface NarrativeModelParams {\n    workspaceServiceURL: string\n    serviceWizardURL: string\n    groupsServiceURL: string\n    username: string\n    token: string\n}\n\nexport class NarrativeModel {\n\n    params: NarrativeModelParams\n\n    constructor(params: NarrativeModelParams) {\n        this.params = params\n    }\n\n    // Narratives\n\n    async getOwnNarratives(organizationId: string): Promise<Array<OrganizationNarrative>> {\n        const narrativeServiceClient = new NarrativeServiceClient({\n            url: this.params.serviceWizardURL,\n            token: this.params.token,\n            timeout: 10000,\n        })\n\n        const groupsClient = new orgModel.OrganizationModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token,\n            username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const [narrativesResult, organization, pendingRequests] = await Promise.all([\n            narrativeServiceClient.listNarratives('mine'),\n            groupsClient.getOrg(organizationId),\n            requestClient.getPendingRequestsForOrg(organizationId)\n        ])\n\n        if (organization.kind === orgModel.OrganizationKind.INACCESSIBLE_PRIVATE) {\n            throw new Error('Cannot get own narratives for private inaccessible organization')\n        }\n\n        const workspacesInOrg = organization.narratives.map((narrative) => {\n            return narrative.workspaceId\n        })\n\n        return narrativesResult.narratives\n            .map((nar) => {\n                return {\n                    workspaceInfo: <unknown>workspaceApi.workspaceInfoToObject(nar.ws) as NarrativeWorkspaceInfo,\n                    objectInfo: workspaceApi.objectInfoToObject(nar.nar)\n                }\n            })\n            .filter((nar) => {\n                return (nar.workspaceInfo.metadata.is_temporary === 'false')\n            })\n            .map((narrative) => {\n                let status: NarrativeState\n\n                if (workspacesInOrg.indexOf(narrative.workspaceInfo.id) !== -1) {\n                    status = NarrativeState.ASSOCIATED\n                } else if (pendingRequests.find((request) => {\n                    // TODO: these requests should have already been converted to \n                    // model-friendly requests (typed!)\n                    return (request.resourceType === requestModel.RequestResourceType.WORKSPACE &&\n                        request.narrativeId === String(narrative.workspaceInfo.id))\n                })) {\n                    status = NarrativeState.REQUESTED\n                } else {\n                    status = NarrativeState.NONE\n                }\n                return {\n                    status: status,\n                    narrative: {\n                        access: NarrativeAccess.OWNER,\n                        isPublic: narrative.workspaceInfo.globalReadPermission,\n                        workspaceId: narrative.workspaceInfo.id,\n                        objectId: narrative.objectInfo.id,\n                        title: narrative.workspaceInfo.metadata.narrative_nice_name,\n                        owner: narrative.workspaceInfo.owner,\n                        lastSavedAt: narrative.objectInfo.savedAt,\n                        lastSavedBy: narrative.objectInfo.savedBy\n                    } as AccessibleNarrative\n\n                }\n            })\n            .sort((a, b) => {\n                return (a.narrative.title.localeCompare(b.narrative.title))\n            })\n    }\n\n    // async workspaceToNarrative(workspaceId: WorkspaceID): Promise<orgModel.NarrativeResource | null> {\n    //     const workspaceClient = new AuthorizedGenericClient({\n    //         module: 'Workspace',\n    //         url: this.params.workspaceServiceURL,\n    //         token: this.params.token\n    //     })\n    //     try {\n    //         const [[[rawObjectInfo], rawObjectInfoError], [[rawWorkspaceInfo], rawWorkspaceInfoError]] = await Promise.all([\n    //             workspaceClient.callFunc('get_object_info3', [{\n    //                 objects: [{\n    //                     wsid: workspaceId,\n    //                     // TODO: fix this!!\n    //                     objid: 1\n    //                 }],\n    //                 includeMetadata: 1,\n    //                 ignoreErrors: 0\n    //             }]),\n    //             workspaceClient.callFunc('get_workspace_info', [{\n    //                 id: workspaceId\n    //             }])\n    //         ])\n\n    //         if (rawObjectInfoError || rawWorkspaceInfoError) {\n    //             // console.warn('narrative not accessible', rawObjectInfoError, rawWorkspaceInfoError)\n    //             return null\n    //         }\n\n    //         const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo) as NarrativeWorkspaceInfo\n\n    //         return {\n    //             workspaceId: workspaceInfo.id,\n    //             title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n    //             permission: orgModel.userPermissionToWorkspacePermission(workspaceInfo.userPermission, workspaceInfo.owner === this.params.username),\n    //             isPublic: workspaceInfo.globalReadPermission\n    //         }\n\n    //     } catch (ex) {\n    //         // assume it is an inaccessible workspace\n    //         // console.warn('narrative not accessible', ex)\n    //         return null\n    //     }\n    // }\n\n    getSorter(sort: Sort) {\n        switch (sort) {\n            case Sort.TITLE:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return a.narrative.title.localeCompare(b.narrative.title)\n                }\n            case Sort.LAST_SAVED:\n                return (a: OrganizationNarrative, b: OrganizationNarrative) => {\n                    return b.narrative.lastSavedAt.getTime() - a.narrative.lastSavedAt.getTime()\n                }\n            default:\n                throw new Error('invalid sort spec')\n        }\n    }\n\n    // sortNarratives(narratives: Array<AccessibleNarrative>, sort: Sort): Array<AccessibleNarrative> {\n    //     let sorter = this.getSorter(sort)\n\n    //     return narratives.sort(sorter)\n    // }\n\n    sortOrganizationNarratives(narratives: Array<OrganizationNarrative>, sort: Sort): Array<OrganizationNarrative> {\n        let sorter = this.getSorter(sort)\n\n        return narratives.sort(sorter).slice(0)\n    }\n\n    /*\n    getNarrative fetches the requested narrative and returns a Narrative object if found \n    and null otherwise. Note that this ignores the narrative state vis-a-vis any organization.\n    It also caches narratives.\n    */\n    async getNarrative(workspaceId: WorkspaceID): Promise<Narrative> {\n        const workspaceClient = new AuthorizedGenericClient({\n            module: 'Workspace',\n            url: this.params.workspaceServiceURL,\n            token: this.params.token\n        })\n        try {\n            const [rawWorkspaceInfo, rawWorkspaceInfoError] = await workspaceClient.callFunc('get_workspace_info', [{\n                id: workspaceId\n            }])\n\n\n            if (rawWorkspaceInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const workspaceInfo: NarrativeWorkspaceInfo = workspaceApi.workspaceInfoToObject(rawWorkspaceInfo[0]) as NarrativeWorkspaceInfo\n\n            const narrativeId = workspaceInfo.metadata.narrative\n            if (!narrativeId) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n            const objectId = parseInt(narrativeId, 10)\n\n            const [rawObjectInfo, rawObjectInfoError] = await workspaceClient.callFunc('get_object_info3', [{\n                objects: [{\n                    wsid: workspaceId,\n                    objid: objectId\n                }],\n                includeMetadata: 1,\n                ignoreErrors: 0\n            }])\n\n            if (rawObjectInfoError) {\n                return {\n                    workspaceId: workspaceId,\n                    access: NarrativeAccess.NONE\n                }\n            }\n\n            const objectInfo: workspaceApi.ObjectInfo = workspaceApi.objectInfoToObject(rawObjectInfo[0].infos[0])\n\n            let access: NarrativeAccess.VIEW | NarrativeAccess.EDIT | NarrativeAccess.ADMIN | NarrativeAccess.OWNER\n            switch (workspaceInfo.userPermission) {\n                case 'n':\n                    if (workspaceInfo.globalReadPermission) {\n                        access = NarrativeAccess.VIEW\n                        break\n                    } else {\n                        throw new Error('Cannot have no access and no global read permission!')\n                    }\n                case 'r':\n                    access = NarrativeAccess.VIEW\n                    break\n                case 'w':\n                    access = NarrativeAccess.EDIT\n                    break\n                case 'a':\n                    if (workspaceInfo.owner === this.params.username) {\n                        access = NarrativeAccess.OWNER\n                    } else {\n                        access = NarrativeAccess.ADMIN\n                    }\n                    break\n                default:\n                    throw new Error('Unknown workspace permission: ' + workspaceInfo.userPermission)\n            }\n\n            return {\n                workspaceId: workspaceInfo.id,\n                access: access,\n                isPublic: workspaceInfo.globalReadPermission,\n                objectId: objectInfo.id,\n                title: workspaceInfo.metadata.narrative_nice_name || 'Unknown',\n                owner: workspaceInfo.owner,\n                lastSavedAt: objectInfo.savedAt,\n                lastSavedBy: objectInfo.savedBy\n            }\n        } catch (ex) {\n            console.error('Error fetching narrative!', ex)\n            throw ex\n        }\n    }\n}\n","export type Metadata = {}\n\nexport type RawObjectInfo = [\n    number, // objid - object id\n    string, // name - object name\n    string, // type - object type\n    string, // save_date - iso8601 timestamp when last saved\n    number, // ver - object version\n    string, // saved_by - username who saved it last\n    number, // wsid - workspace id\n    string, // workspace - workspace name,\n    string, // chsum - checksum of the object\n    number, // size - size of the object (bytes)\n    Metadata   // meta - string to string object of stuff\n]\n\nexport type RawWorkspaceInfo = [\n    number, // id - workspace id\n    string, // workspace - workspace name\n    string, // owner - username who owns it\n    string, // moddate - iso8601 timestamp when last modified\n    number, // max_objid - last object id assigned to object in workspace\n    string, // user_permission - permission of user who made reqeust wrt workspace\n    string, // globalread - int bool whether this workspace is shared globally\n    string, // lockstat - status of the workspace lock\n    Metadata // metadata\n]\n\nexport interface WorkspaceInfo {\n    id: number\n    name: string\n    owner: string\n    modifiedAt: Date\n    objectCount: number\n    userPermission: string\n    globalReadPermission: boolean\n    lockStatus: string\n    metadata: Metadata\n}\n\nexport interface ObjectInfo {\n    id: number\n    name: string\n    type: {\n        module: string\n        name: string\n        majorVersion: number\n        minorVersion: number\n        id: string\n    }\n    version: number\n    savedAt: Date\n    savedBy: string\n    workspaceId: number\n    workspaceName: string\n    checksum: string\n    size: number\n    ref: string\n    metadata: Metadata\n}\n\nfunction iso8601ToDate(dateString: string) {\n    const isoRE = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)([\\+\\-])(\\d\\d)(:?[\\:]*)(\\d\\d)/;\n    const dateParts = isoRE.exec(dateString);\n    if (!dateParts) {\n        throw new TypeError('Invalid Date Format for ' + dateString);\n    }\n    // This is why we do this -- JS insists on the colon in the tz offset.\n    const offset = dateParts[7] + dateParts[8] + ':' + dateParts[10];\n    const newDateString = dateParts[1] + '-' + dateParts[2] + '-' + dateParts[3] + 'T' + dateParts[4] + ':' + dateParts[5] + ':' + dateParts[6] + offset;\n    return new Date(newDateString);\n}\n\nexport function workspaceInfoToObject(wsInfo: RawWorkspaceInfo): WorkspaceInfo {\n    return {\n        id: wsInfo[0],\n        name: wsInfo[1],\n        owner: wsInfo[2],\n        modifiedAt: iso8601ToDate(wsInfo[3]),\n        objectCount: wsInfo[4],\n        userPermission: wsInfo[5],\n        globalReadPermission: wsInfo[6] === 'r' ? true : false,\n        lockStatus: wsInfo[7],\n        metadata: wsInfo[8]\n    }\n}\n\nexport function objectInfoToObject(data: RawObjectInfo): ObjectInfo {\n    const type = data[2].split(/[-.]/)\n\n    return {\n        id: data[0],\n        name: data[1],\n        // type: data[2],\n        type: {\n            id: data[2],\n            module: type[0],\n            name: type[1],\n            majorVersion: parseInt(type[2], 10),\n            minorVersion: parseInt(type[3], 10)\n        },\n        savedAt: iso8601ToDate(data[3]),\n        version: data[4],\n        savedBy: data[5],\n        workspaceId: data[6],\n        workspaceName: data[7],\n        checksum: data[8],\n        size: data[9],\n        metadata: data[10],\n        ref: data[6] + '/' + data[0] + '/' + data[4]\n    }\n}\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as userModel from '../../data/models/user'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { AppError, StoreState } from '../../types'\n\nexport interface EntityAction extends Action {\n}\n\nexport interface UserLoader extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER,\n    userId: userModel.Username\n}\n\nexport interface UserLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_START\n}\n\nexport interface UserLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n    user: userModel.User\n}\n\nexport interface UserLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function userLoaderStart(): UserLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_START\n    }\n}\n\nexport function userLoaderSuccess(user: userModel.User): UserLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_SUCCESS,\n        user: user\n    }\n}\n\nexport function userLoaderError(error: AppError): UserLoaderError {\n    return {\n        type: ActionFlag.ENTITY_USER_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function userLoader(userId: userModel.Username) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        try {\n            const user = await model.getUser(userId)\n            dispatch(userLoaderSuccess(user))\n        } catch (ex) {\n            dispatch(userLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport interface OrganizationLoader extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface OrganizationLoaderStart extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n}\n\nexport interface OrganizationLoaderSuccess extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n}\n\nexport interface OrganizationLoaderError extends EntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n    error: AppError\n}\n\n\nexport function organizationLoaderStart(): OrganizationLoaderStart {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_START\n    }\n}\n\nexport function organizationLoaderSuccess(organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization): OrganizationLoaderSuccess {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function organizationLoaderError(error: AppError): OrganizationLoaderError {\n    return {\n        type: ActionFlag.ENTITY_ORGANIZATION_LOADER_ERROR,\n        error: error\n    }\n}\n\nexport function organizationLoader(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(organizationLoaderStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const model = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const organization = await model.getOrg(organizationId)\n            dispatch(organizationLoaderSuccess(organization))\n        } catch (ex) {\n            dispatch(organizationLoaderError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Narratives\n\nexport interface LoadNarrative {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD\n}\n\ninterface LoadNarrativeStart {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n}\n\nexport interface LoadNarrativeSuccess {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS\n    narrative: narrativeModel.Narrative\n}\n\ninterface LoadNarrativeError {\n    type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadNarrative(workspaceId: narrativeModel.WorkspaceID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.ENTITY_NARRATIVE_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            workspaceServiceURL: config.services.Workspace.url,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url\n        })\n\n        try {\n            const narrative = await narrativeClient.getNarrative(workspaceId)\n            dispatch({\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_SUCCESS,\n                narrative: narrative\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.ENTITY_NARRATIVE_LOAD_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            return\n        }\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            const org = await orgClient.getOrg(groupId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'invalid state',\n                    message: 'Cannot access a Narrative for an inaccessible Organization'\n                }))\n                return\n            }\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n\n","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Owner from './Owner'\n\ninterface LoaderProps {\n    username: orgModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    showAvatar: boolean\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Owner user={this.props.user} avatarSize={this.props.avatarSize} showAvatar={this.props.showAvatar} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\n\n\nexport interface OwnProps {\n    username: orgModel.Username\n    avatarSize: number\n    showAvatar: boolean\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","export function niceElapsed(someDate: Date, absoluteAfter?: number, compactDate: boolean = true) {\n    const nowDate = new Date()\n\n    const elapsed = Math.round((nowDate.getTime() - someDate.getTime()) / 1000);\n    const elapsedAbs = Math.abs(elapsed);\n\n    let measure, measureAbs, unit;\n    const maxDays = absoluteAfter || 90\n    if (elapsedAbs < 60 * 60 * 24 * maxDays) {\n        if (elapsedAbs === 0) {\n            return 'now';\n        } else if (elapsedAbs < 60) {\n            measure = elapsed;\n            measureAbs = elapsedAbs;\n            unit = 'second';\n        } else if (elapsedAbs < 60 * 60) {\n            measure = Math.round(elapsed / 60);\n            measureAbs = Math.round(elapsedAbs / 60);\n            unit = 'minute';\n        } else if (elapsedAbs < 60 * 60 * 24) {\n            measure = Math.round(elapsed / 3600);\n            measureAbs = Math.round(elapsedAbs / 3600);\n            unit = 'hour';\n        } else {\n            measure = Math.round(elapsed / (3600 * 24));\n            measureAbs = Math.round(elapsedAbs / (3600 * 24));\n            unit = 'day';\n        }\n\n        if (measureAbs > 1) {\n            unit += 's';\n        }\n\n        let prefix = null;\n        let suffix = null;\n        if (measure < 0) {\n            prefix = 'in';\n        } else if (measure > 0) {\n            suffix = 'ago';\n        }\n\n        return (prefix ? prefix + ' ' : '') + measureAbs + ' ' + unit + (suffix ? ' ' + suffix : '');\n    } else {\n        // otherwise show the actual date, with or without the year.\n        if (compactDate && nowDate.getFullYear() === someDate.getFullYear()) {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric'\n            }).format(someDate)\n        } else {\n            return Intl.DateTimeFormat('en-US', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            }).format(someDate)\n        }\n    }\n}","import * as React from 'react'\nimport { niceElapsed } from '../lib/time'\nimport { Tooltip } from 'antd';\n\nexport interface NiceElapsedTimeProps {\n    time: Date\n    showTooltip?: boolean\n    tooltipPrefix?: string\n}\n\ninterface NiceElapsedTimeState {\n}\n\nexport default class NiceElapsedTime extends React.Component<NiceElapsedTimeProps, NiceElapsedTimeState> {\n    constructor(props: NiceElapsedTimeProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.showTooltip === false) {\n            return (\n                <span>\n                    {niceElapsed(this.props.time, 30)}\n                </span>\n            )\n        }\n\n        const fullDate = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        timeZoneName: 'short'\n                    }).format(this.props.time)\n                }\n            </span>\n        )\n        let tooltip\n        if (this.props.tooltipPrefix) {\n            tooltip = (\n                <span>\n                    {this.props.tooltipPrefix}\n                    {fullDate}\n                </span>\n            )\n        } else {\n            tooltip = fullDate\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(this.props.time, 30)}\n            </Tooltip>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { NavLink } from 'react-router-dom'\nimport OrgLogo from '../../OrgLogo'\nimport { Icon, Tooltip, Menu, Dropdown, Modal } from 'antd'\nimport Owner from '../../entities/OwnerContainer'\nimport { ComponentView } from '../../../types'\nimport './BriefOrganization.css'\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\nexport interface BriefOrganizationProps {\n    organization: orgModel.BriefOrganization\n    openRequestsStatus: orgModel.RequestStatus | null\n}\n\ninterface BriefOrganizationState {\n    view: ComponentView\n}\n\nfunction reverseView(v: ComponentView) {\n    switch (v) {\n        case ComponentView.COMPACT:\n            return ComponentView.NORMAL\n        case ComponentView.NORMAL:\n            return ComponentView.COMPACT\n    }\n}\n\nexport default class BriefOrganization extends React.Component<BriefOrganizationProps, BriefOrganizationState> {\n    constructor(props: BriefOrganizationProps) {\n        super(props)\n        this.state = {\n            view: ComponentView.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderLogo(org: orgModel.BriefOrganization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderHomeUrl(org: orgModel.BriefOrganization) {\n        if (!org.homeUrl) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    title=\"This organization has not set a home page url\"\n                >\n                    <Icon type=\"home\" style={{ color: 'rgba(200, 200, 200, 0.3)' }} />\n                </Tooltip>\n            )\n        }\n        const tooltip = (\n            <React.Fragment>\n                <p>\n                    Home page for this Organization (external to KBase)\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <div className=\"BriefOrganization-homeUrl\">\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title={tooltip}\n                >\n                    <a href={org.homeUrl} target=\"_blank\">\n                        <Icon type=\"home\" />\n                    </a>\n                </Tooltip>\n            </div >\n        )\n    }\n\n    renderNarrativeCount(org: orgModel.BriefOrganization) {\n        if (!org.narrativeCount) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.narrativeCount}\n            </span>\n        )\n    }\n\n    renderMemberCount(org: orgModel.BriefOrganization) {\n        if (org.memberCount == 1) {\n            return (\n                <span style={{ color: 'gray' }}>\n                    Ø\n                </span>\n            )\n        }\n        return (\n            <span>\n                {org.memberCount - 1}\n            </span>\n        )\n    }\n\n    renderRelation(org: orgModel.BriefOrganization) {\n        switch (org.relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <span>\n                            <Icon type=\"stop\" />\n                        </span>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <Icon type=\"stop\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"Your membership request is pending\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'orange' }} /> Your membership <b>request</b> is pending\n                </Tooltip>\n                )\n\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this organization\"\n                    >\n                        <Icon type=\"user\" style={{ color: 'blue' }} />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are a member of this organization\"\n                    >\n                        <Icon type=\"user\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are an administrator of this organization\"\n                    >\n                        <Icon type=\"robot\" />\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are the owner of this organization\"\n                    >\n                        <Icon type=\"crown\" />\n                    </Tooltip>\n                )\n        }\n    }\n\n    renderPrivacy() {\n        const org = this.props.organization\n        if (org.isPrivate) {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is private - may only be viewed by members\">\n                    <span>\n                        <Icon type=\"unlock\" />\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip\n                    placement=\"bottomRight\"\n                    mouseEnterDelay={0.5}\n                    title=\"This organization is public - may be viewed by any KBase user\">\n                    <span>\n                        <Icon type=\"global\" />\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderOrgFreshness(org: orgModel.BriefOrganization) {\n        const isNew = org.lastVisitedAt && (org.modifiedAt.getTime() > org.lastVisitedAt.getTime())\n        let newAlert\n        if (isNew) {\n            const title = 'This org has changed since your last visit to it'\n            newAlert = (\n                <div>\n                    <Tooltip placement=\"topRight\" title={title}>\n                        <span style={{ color: 'red', fontSize: '120%' }}>\n                            {/* ● */}\n                            <Icon type=\"bell\" theme=\"filled\" />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            newAlert = (\n                <div>\n                    <span style={{ color: 'transparent', fontSize: '120%' }}>\n                        <Icon type=\"bell\" theme=\"filled\" />\n                    </span>\n                </div>\n            )\n        }\n\n        const hasRequests = false\n\n        let requestsAlert\n        if (hasRequests) {\n            requestsAlert = (\n                <div>\n                    <Icon type=\"bulb\" style={{ color: \"blue\" }} />\n                </div>\n            )\n        } else {\n            requestsAlert = null\n        }\n\n        return (\n            <div>\n                {newAlert}\n                {requestsAlert}\n            </div>\n        )\n    }\n\n    renderRequests() {\n        if (!(this.props.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.organization.relation === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        let message\n        let iconColor\n        switch (this.props.openRequestsStatus) {\n            case orgModel.RequestStatus.NONE:\n                // case null:\n                message = 'There are no open requests for this organization'\n                iconColor = 'rgba(200, 200, 200, 0.3)'\n                break\n            case orgModel.RequestStatus.NEW:\n                message = 'There are new requests since you last visited this organization'\n                iconColor = 'red'\n                break\n            case orgModel.RequestStatus.OLD:\n                message = 'There are open requests for this organization'\n                iconColor = 'blue'\n                break\n            case orgModel.RequestStatus.INAPPLICABLE:\n                return\n            default:\n                console.warn('Invalid open request status: ' + this.props.openRequestsStatus)\n                return\n        }\n        const title = (\n            <span>\n                {message}\n            </span>\n        )\n        return (\n            <Tooltip\n                placement=\"topRight\"\n                title={title}>\n                <span style={{ color: iconColor, fontSize: '80%' }}>\n                    <Icon type=\"mail\" />\n                </span>\n            </Tooltip>\n        )\n    }\n\n    renderPermalink() {\n        const permalink = (\n            <div>\n                <p>\n                    Below is the \"permalink\" for this organization. You may copy\n                    this url and use it to access this organization in a web browser.\n                </p>\n                <p style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>\n                    {window.location.origin}/#org/{this.props.organization.id}\n                </p>\n            </div>\n        )\n        const menuClick = ({ key }: { key: string }) => {\n            Modal.info({\n                title: 'Org Permalink',\n                content: permalink\n            })\n        }\n        const menu = (\n            <Menu\n                onClick={menuClick}\n            >\n                <Menu.Item key=\"view\">\n                    View Permalink\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <Dropdown\n                overlay={menu}\n                trigger={['click', 'contextMenu']}>\n                <a href={\"/#orgs/\" + this.props.organization.id}>\n                    <Icon type=\"link\" />\n                </a>\n            </Dropdown>\n        )\n    }\n\n    renderLogoColumn(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-logoRow\">\n                    <NavLink to={`/viewOrganization/${org.id}`}>\n                        {this.renderLogo(org)}\n                    </NavLink>\n                </div>\n                <div className=\"BriefOrganization-statusRow\">\n                    <div className=\"BriefOrganization-relationCol\">\n                        {this.renderRelation(org)}\n                    </div>\n                    <div className=\"BriefOrganization-privacyCol\">\n                        {this.renderPrivacy()}\n                    </div>\n\n                    <div className=\"BriefOrganization-homeLinkCol\">\n                        {this.renderHomeUrl(org)}\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-freshnessRow\">\n                    <div className=\"BriefOrganization-orgFreshnessCol\">\n                        {this.renderOrgFreshness(org)}\n                    </div>\n                    <div className=\"BriefOrganization-openRequestsCol\">\n                        {this.renderRequests()}\n                    </div>\n                    <div className=\"BriefOrganization-openNewRequestsCol\">\n                        {this.renderPermalink()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderInfoCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                <div className=\"BriefOrganization-researchInterests BriefOrganization-infoTableRow\">\n                    {org.researchInterests}\n                </div>\n\n                <div className=\"BriefOrganization-orgOwner BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">owner</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* TODO: render as Member or Owner component */}\n                        <Owner username={org.owner.username} avatarSize={16} showAvatar={false} />\n                    </div>\n                </div>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label BriefOrganization-fieldLabel\">created</span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {/* {niceElapsed(org.createdAt, 30)} */}\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderMemberRow(org: orgModel.BriefOrganization) {\n        const memberCount = org.memberCount - 1\n        let memberCountTooltip\n        if (memberCount) {\n            if (memberCount === 1) {\n                memberCountTooltip = (\n                    <span>\n                        There is <b>1</b> member in this organization\n                    </span>\n                )\n            } else {\n                memberCountTooltip = (\n                    <span>\n                        There are <b>{memberCount}</b> members in this organization\n                    </span>\n                )\n            }\n        } else {\n            memberCountTooltip = (\n                <span>\n                    There are <b>no members</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={memberCountTooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"team\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderMemberCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderNarrativeRow(org: orgModel.BriefOrganization) {\n        const count = org.narrativeCount\n        let tooltip\n        if (count) {\n            if (count === 1) {\n                tooltip = (\n                    <span>\n                        There is <b>1</b> narrative in this organization\n                    </span>\n                )\n            } else {\n                tooltip = (\n                    <span>\n                        There are <b>{count}</b> narratives in this organization\n                    </span>\n                )\n            }\n        } else {\n            tooltip = (\n                <span>\n                    There are <b>no narratives</b> in this organization\n                </span>\n            )\n        }\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"file\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        {this.renderNarrativeCount(org)}\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderModifiedRow(org: orgModel.BriefOrganization) {\n        const tooltip = (\n            <span>\n                This organization was last updated\n                {' '}\n                <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                <div className=\"BriefOrganization-orgCreated BriefOrganization-infoTableRow\">\n                    <div className=\"BriefOrganization-infoTableCol1\">\n                        <span className=\"field-label\"><Icon type=\"save\" /></span>\n                    </div>\n                    <div className=\"BriefOrganization-infoTableCol2\">\n                        <NiceElapsedTime time={org.modifiedAt} showTooltip={false} />\n                    </div>\n                </div>\n            </Tooltip>\n        )\n    }\n\n    renderStatsCol(org: orgModel.BriefOrganization) {\n        return (\n            <React.Fragment>\n                {this.renderMemberRow(org)}\n                {this.renderNarrativeRow(org)}\n                {this.renderModifiedRow(org)}\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        const org = this.props.organization\n        return (\n            <div className=\"BriefOrganization\">\n                <div className=\"BriefOrganization-body\">\n                    {/* <div className=\"BriefOrganization-freshnessCol\">\n                        {this.renderFreshness(org)}\n                    </div> */}\n                    <div className=\"BriefOrganization-logoCol\">\n                        {this.renderLogoColumn(org)}\n                    </div>\n                    <div className=\"BriefOrganization-infoCol\">\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                <div className=\"BriefOrganization-orgName BriefOrganization-infoTableRow\">\n                                    <NavLink to={`/viewOrganization/${org.id}`}>\n                                        {org.name}\n                                    </NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"BriefOrganization-infoCol-row\">\n                            <div className=\"BriefOrganization-infoCol-col1\">\n                                {this.renderInfoCol(org)}\n                            </div>\n                            <div className=\"BriefOrganization-infoCol-col2\">\n                                {this.renderStatsCol(org)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        return this.renderNormal()\n    }\n}\n","import * as React from 'react';\nimport './component.css';\nimport { Alert } from 'antd';\nimport * as orgModel from '../../../../data/models/organization/model'\nimport BriefOrganization from '../../../views/organizationHeader/BriefOrganization';\n\n// TODO: need more ergonomic way to resolve the common issue of data types interfering with \n// component types.\n\nexport interface OrganizationsProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\nexport interface OrganizationsState {\n    searchTerms: Array<string>\n}\n\nexport class Organizations extends React.Component<OrganizationsProps, OrganizationsState> {\n    constructor(props: OrganizationsProps) {\n        super(props)\n\n        this.state = {\n            searchTerms: []\n        }\n    }\n\n    renderAdminInfo(org: orgModel.Organization) {\n        return (\n            <div>\n                disabled\n            </div>\n        )\n    }\n\n    pluralize(count: number, singular: string, plural: string) {\n        if (count === 0 || count > 1) {\n            return plural\n        }\n        return singular\n    }\n\n    renderOrgs() {\n        if (this.props.organizations.length > 0) {\n            return (\n                this.props.organizations.map((organization, index) => {\n                    const status = this.props.openRequests.get(organization.id) || null\n                    return (\n                        <div key={String(index)} className=\"simpleCard\">\n                            <BriefOrganization organization={organization} openRequestsStatus={status} />\n                        </div>\n                    )\n                })\n            )\n        } else {\n            return (\n                <Alert type=\"warning\"\n                    style={{ maxWidth: '20em', margin: '20px auto 0 auto' }}\n                    message=\"Sorry, no organizations were found.\" />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Organizations\">\n                <div style={{ overflowY: 'auto', display: 'flex', flexDirection: 'column' }}>\n                    {this.renderOrgs()}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Organizations;","import { Organizations, OrganizationsProps } from './component';\nimport { StoreState } from '../../../../types';\nimport { connect } from 'react-redux';\n\nexport function mapStateToProps(state: StoreState): OrganizationsProps {\n    // TODO: wow, should not do this here\n    if (state.views.browseOrgsView.viewModel === null) {\n        throw new Error('view not ready')\n    }\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: { organizations, openRequests }\n            }\n        }\n    } = state;\n\n    // associate the last visited by id with the org.\n    // const updatedOrgs = organizations.map((org: BriefOrganization) => {\n    //     const lastVisitedAt = lastVisitedAtById.get(org.id) || null\n    //     if (lastVisitedAt && lastVisitedAt.lastVisitedAt) {\n    //         return {\n    //             organization: org,\n    //             lastVisitedAt: lastVisitedAt.lastVisitedAt\n    //         }\n    //     } else {\n    //         return {\n    //             organization: org,\n    //             lastVisitedAt: null\n    //         }\n    //     }\n    // })\n\n    return {\n        organizations, openRequests\n    }\n}\n\nexport default connect(mapStateToProps)(Organizations);","import * as React from 'react'\nimport { NavLink, withRouter, Route } from 'react-router-dom'\nimport './Header.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\nexport interface HeaderProps {\n    breadcrumbs: JSX.Element\n    buttons?: JSX.Element\n    test?: string\n    // history: History.History\n}\n\ninterface HeaderState {\n    currentMenuItem: string\n}\n\ninterface MenuProps {\n    currentItem: string\n}\n// const TopMenu = withRouter<MenuProps>(({ history }) => {\n//         function doNavigate(key: string) {\n//             switch (key) {\n//                 case 'myorgs':\n//                     history.push('/dashboard')\n//                 case 'allorgs':\n//                     history.push('/organizations')\n//             }\n//         }\n//         return (\n//             <Menu\n//                 onClick={(e: ClickParam) => { doNavigate(e.key) }}\n//                 selectedKeys={[this.state.currentMenuItem]}\n//                 mode=\"horizontal\"\n//             >\n//                 <Menu.Item key=\"myorgs\">\n//                     My Organizations\n//                 </Menu.Item>\n//                 <Menu.Item key=\"allorgs\">\n//                     All Organizations\n//                 </Menu.Item>\n//             </Menu>\n//         )\n//     })\n// }\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n\n    constructor(props: HeaderProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n    // <FaChevronRight style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n    buildSeparator() {\n        if (this.props.breadcrumbs) {\n            return (\n                <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n            )\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"Header-contextual\">\n                    <div className=\"Header-userColumn\">\n                        <div className=\"Header-breadcrumbs\">\n                            {this.props.breadcrumbs}\n                        </div>\n                        <div className=\"Header-buttons\">\n                            {this.props.buttons}\n                        </div>\n                        {/* {this.props.children} */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import * as React from 'react'\nimport { NavLink, withRouter, Route, Link } from 'react-router-dom'\nimport './component.css'\nimport { Icon, Menu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu'\n\ninterface MainMenuProps {\n    buttons?: JSX.Element\n}\n\ninterface MainMenuState {\n    currentMenuItem: string\n}\n\nclass MainMenu extends React.Component<MainMenuProps, MainMenuState> {\n    constructor(props: MainMenuProps, context: React.Context<any>) {\n        super(props)\n\n        this.state = {\n            currentMenuItem: 'myorgs'\n        }\n    }\n\n    onMenuSelection(e: ClickParam) {\n        // this.setState({\n        //     currentMenuItem: e.key\n        // })\n        // switch (e.key) {\n        //     case 'myorgs':\n        //         this.props.history.push('/dashboard')\n        //     case 'allorgs':\n        //         this.props.history.push('/organizations')\n        // }\n    }\n\n\n    renderMenu() {\n        return (\n            <Route render={({ history, location }) => {\n                let selectedKeys: Array<string> = []\n                switch (location.pathname) {\n                    case '/organizations':\n                        selectedKeys = ['allorgs']\n                        break\n                    case '/newOrganization':\n                        selectedKeys = ['neworg']\n                        break\n                }\n                return (\n                    <Menu\n                        // onClick={(e: ClickParam) => { doNavigate(e.key) }}\n                        selectedKeys={selectedKeys}\n                        style={{ backgroundColor: 'transparent' }}\n                        mode=\"horizontal\"\n                    >\n                        <Menu.Item key=\"allorgs\">\n                            <Link to=\"/organizations\">Browse &amp; Search</Link>\n                        </Menu.Item>\n                        {/* <Menu.Item key=\"neworg\">\n                            <Link to=\"/newOrganization\">Create New Organization</Link>\n                        </Menu.Item> */}\n                    </Menu>\n                )\n            }} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"MainMenu\">\n                <div className=\"MainMenu-menu\">\n                    {this.renderMenu()}\n                </div>\n                <div className=\"MainMenu-buttons\">\n                    {this.props.buttons}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import * as React from 'react';\n\nimport Organizations from './organizations/container';\nimport { SortDirection, AppError } from '../../../types';\n\nimport './component.css';\nimport { Button, Icon, Radio, Select, Modal, Alert, Checkbox } from 'antd'\nimport Header from '../../Header';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { Filter } from '../../../data/models/organization/model';\nimport MainMenu from '../../menu/component';\nimport { NavLink } from 'react-router-dom';\nimport ButtonGroup from 'antd/lib/button/button-group';\n\nexport interface OrganizationsBrowserProps {\n    totalCount: number;\n    filteredCount: number;\n    sortBy: string;\n    filter: Filter;\n    searching: boolean;\n    error: AppError | null;\n    onSearchOrgs: (searchTerms: Array<string>) => void;\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void;\n    onFilterOrgs: (filter: Filter) => void;\n}\n\nexport interface OrganizationsBrowserState {\n    searchInput: string\n    showInfo: boolean\n    filterByRoleType: string\n    filterByRole: Array<CheckboxValueType>\n    filterByPrivacy: string\n    showAdvancedControls: boolean\n    // filterByPrivacyType: Array<CheckboxValueType>\n}\n\ntype CBVT = CheckboxValueType\n\nclass OrganizationsBrowser extends React.Component<OrganizationsBrowserProps, OrganizationsBrowserState> {\n\n    searchInput: React.RefObject<HTMLInputElement>;\n    searchButton: React.RefObject<Button>;\n    filterByRoleValues: Array<any>\n\n\n    constructor(props: OrganizationsBrowserProps) {\n        super(props)\n\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.filterByRoleValues = [\n            {\n                label: 'Member',\n                value: 'member'\n            },\n            {\n                label: 'Admin',\n                value: 'admin'\n            },\n            {\n                label: 'Owner',\n                value: 'owner'\n            }\n        ]\n\n        this.state = {\n            searchInput: '',\n            showInfo: false,\n            filterByRoleType: 'myorgs',\n            filterByRole: [],\n            filterByPrivacy: 'any',\n            showAdvancedControls: false\n        }\n    }\n\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    componentDidMount() {\n        this.props.onSearchOrgs([])\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organizations Browser Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations browser...</p>\n                </div>\n            )\n        })\n    }\n\n    doSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        const searchTerms = this.searchInput.current.value.split(/[\\s+]/)\n        // dispatch the search event\n        this.props.onSearchOrgs(searchTerms);\n    }\n\n    haveSearchInput() {\n        if (this.state.searchInput && this.state.searchInput.length > 0) {\n            return true\n        }\n        return false\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.setState({ searchInput: currentSearchInputValue })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.doSearch()\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'owner':\n                this.props.onSortOrgs('owner', SortDirection.ASCENDING)\n                break\n            case 'name':\n                this.props.onSortOrgs('name', SortDirection.ASCENDING)\n                break\n            case 'recentlyAdded':\n                this.props.onSortOrgs('created', SortDirection.DESCENDING)\n                break\n            case 'recentlyChanged':\n                this.props.onSortOrgs('changed', SortDirection.DESCENDING)\n                break\n            case 'memberCount':\n                this.props.onSortOrgs('memberCount', SortDirection.DESCENDING)\n                break\n            case 'narrativeCount':\n                this.props.onSortOrgs('narrativeCount', SortDirection.DESCENDING)\n                break\n        }\n    }\n\n    onSortDirectionChange(e: RadioChangeEvent) {\n        this.props.onSortOrgs(this.props.sortBy, e.target.value)\n    }\n\n    onFilterByRoleTypeChange(e: RadioChangeEvent) {\n        let newFilter: Filter\n        this.setState({ filterByRoleType: e.target.value })\n        if (e.target.value === 'select') {\n            this.setState({ filterByRole: [] })\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value\n            }\n        } else {\n            newFilter = {\n                ...this.props.filter,\n                roleType: e.target.value,\n                roles: []\n            }\n            this.setState({ filterByRole: [] })\n        }\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByRoleChange(checkedValues: CheckboxValueType[]) {\n        let newFilter: Filter\n        this.setState({ filterByRole: checkedValues })\n        if (checkedValues.length === 0) {\n            this.setState({ filterByRoleType: 'myorgs' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'myorgs',\n                roles: checkedValues\n            } as Filter\n        } else {\n            this.setState({ filterByRoleType: 'select' })\n            newFilter = {\n                ...this.props.filter,\n                roleType: 'select',\n                roles: checkedValues\n            } as Filter\n        }\n\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onFilterByPrivacyChange(e: RadioChangeEvent) {\n        this.setState({ filterByPrivacy: e.target.value })\n        const newFilter = {\n            ...this.props.filter,\n            privacy: e.target.value\n        } as Filter\n        this.props.onFilterOrgs(newFilter)\n    }\n\n    onClearSearch() {\n        if (this.searchInput.current === null) {\n            return\n        }\n        this.searchInput.current.value = ''\n        this.onSearchInputChange()\n        this.doSearch()\n    }\n\n    renderSearchFeedback() {\n        if (this.props.totalCount === 0) {\n            return (\n                <span>\n                    None available\n                </span>\n            )\n        }\n        if (this.props.filteredCount === 0) {\n            return (\n                <span>\n                    Ø\n                    /\n                    {this.props.totalCount}\n                    {' '}\n                    orgs\n                </span>\n            )\n\n        }\n        if (this.props.totalCount === this.props.filteredCount) {\n            return (\n                <span>\n                    <b>{this.props.totalCount}</b>\n                    {' '}\n                    orgs\n                </span>\n            )\n        }\n\n        return (\n            <span>\n                <b>{this.props.filteredCount}</b>\n                /\n                {this.props.totalCount}\n                {' '}\n                orgs\n            </span>\n        )\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchForm() {\n        return (\n            <form id=\"searchForm\" className=\"OrganizationsBrowser-searchBar\" onSubmit={this.onSubmit.bind(this)}>\n                <input\n                    className=\"OrganizationsBrowser-searchInput\"\n                    placeholder=\"Search Organizations\"\n                    onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                    ref={this.searchInput}></input>\n                {/* <Tooltip\n                    title=\"Enter one or more words to search organizations by name or owner\">\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{ alignSelf: 'end' }} />\n                </Tooltip> */}\n                <Button\n                    disabled={!this.haveSearchInput()}\n                    ref={this.searchButton}\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                    {/* Search */}\n                </Button>\n                <Button\n                    onClick={this.onClearSearch.bind(this)}\n                    disabled={!this.haveSearchInput()}\n                    icon=\"close\"\n                >\n                </Button>\n            </form>\n        )\n    }\n\n    renderSearchBar() {\n        return (\n            <div className=\"OrganizationsBrowser-searchBarRow\">\n                <div className=\"OrganizationsBrowser-searchBarCol1\">\n                    {this.renderSearchForm()}\n                </div>\n                <div className=\"OrganizationsBrowser-searchBarCol2\">\n                    {this.renderSearchFeedback()}\n                </div>\n                {/* <div className=\"OrganizationsBrowser-searchBarCol3\">\n                </div> */}\n            </div>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                {/* <NavLink to=\"/newOrganization\"><Button icon=\"plus-circle\">Create Organization</Button></NavLink> */}\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderSortByControl() {\n        return (\n            <Select\n                onChange={this.onSortByChange.bind(this)}\n                defaultValue={this.props.sortBy}\n                dropdownMatchSelectWidth={true}\n                style={{ width: '10em' }}>\n                <Select.Option value=\"recentlyChanged\" key=\"changed\">Date Changed</Select.Option>\n                <Select.Option value=\"recentlyAdded\" key=\"recent\">Date Established</Select.Option>\n                <Select.Option value=\"name\" key=\"name\">Org Name</Select.Option>\n                <Select.Option value=\"memberCount\" key=\"memberCount\"># members</Select.Option>\n                <Select.Option value=\"narrativeCount\" key=\"narrativeCount\"># narratives</Select.Option>\n                {/* <Select.Option value=\"owner\" key=\"owner\">Org owner</Select.Option> */}\n                {/* <Select.Option value=\"\"newFirst key=\"newFirst\">New Activity</Select.Option> */}\n            </Select>\n        )\n    }\n\n    onToggleAdvanced() {\n        // When switching back to basic filter mode, we need to ensure that advanced \n        // filtering is removed.\n        if (this.state.showAdvancedControls) {\n            this.setState({ showAdvancedControls: false })\n            let { roleType, roles, privacy } = this.props.filter\n            if (!['myorgs', 'all'].includes(roleType)) {\n                roleType = 'myorgs'\n                this.setState({ filterByRoleType: 'myorgs' })\n            }\n            this.setState({ filterByRole: [], filterByPrivacy: 'any' })\n            roles = []\n            privacy = 'any'\n            this.props.onFilterOrgs({\n                roleType, roles, privacy\n            })\n        } else {\n            this.setState({ showAdvancedControls: true })\n        }\n    }\n\n    renderAdvancedToggle() {\n        if (this.state.showAdvancedControls) {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover-pressed\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        } else {\n            return (\n                <Icon\n                    type=\"ellipsis\"\n                    className=\"IconButton-hover\"\n                    onClick={this.onToggleAdvanced.bind(this)} />\n            )\n        }\n    }\n\n    renderFilterByRole() {\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px'\n        }\n\n        if (this.state.showAdvancedControls) {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                        <Radio value=\"notmyorgs\" style={radioStyle}>Not My Orgs</Radio>\n                        <Radio value=\"select\" style={radioStyle}>Specific Role</Radio>\n                    </Radio.Group>\n\n                    <Checkbox.Group\n                        options={this.filterByRoleValues}\n                        value={this.state.filterByRole}\n                        className=\"OrganizationsBrowser-checkboxGroup\"\n                        onChange={this.onFilterByRoleChange.bind(this)} />\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <Radio.Group\n                        onChange={this.onFilterByRoleTypeChange.bind(this)}\n                        value={this.state.filterByRoleType}>\n\n                        <Radio value=\"myorgs\" style={radioStyle}>My Orgs</Radio>\n                        <Radio value=\"all\" style={radioStyle}>All Orgs</Radio>\n                        {this.renderAdvancedToggle()}\n                    </Radio.Group>\n                </React.Fragment>\n            )\n        }\n    }\n\n    renderFilterByPrivacy() {\n        if (!this.state.showAdvancedControls) {\n            return\n        }\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n            margin: '0px'\n        }\n        const checkboxStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n            margin: '0 0 0 6px'\n        }\n        return (\n            <React.Fragment>\n                <Radio.Group\n                    onChange={this.onFilterByPrivacyChange.bind(this)}\n                    value={this.state.filterByPrivacy}>\n                    <Radio value=\"any\" style={radioStyle}>Any</Radio>\n                    <Radio value=\"public\" style={radioStyle}>Public</Radio>\n                    <Radio value=\"private\" style={radioStyle}>Private</Radio>\n                </Radio.Group>\n            </React.Fragment >\n        )\n    }\n\n    renderOrganizations() {\n        if (this.props.error) {\n            return (\n                <Alert\n                    type=\"error\"\n                    message={this.props.error.code}\n                    description={this.props.error.message} />\n            )\n        } else {\n            return (\n                <Organizations />\n            )\n        }\n    }\n\n    renderFilterColumn() {\n        return (\n            <React.Fragment>\n\n\n                <div className=\"field-label\">sort by</div>\n                {this.renderSortByControl()}\n\n                <div className=\"field-label\" style={{ marginTop: '10px' }}>filter</div>\n\n                {this.renderFilterByRole()}\n\n                {this.state.showAdvancedControls ? (\n                    <div className=\"field-label\" style={{ marginTop: '10px' }}>by privacy</div>\n                ) : (null)}\n                {this.renderFilterByPrivacy()}\n            </React.Fragment>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <React.Fragment>\n                <NavLink to=\"/newOrganization\"><Button icon=\"plus-circle\" style={{ marginRight: '10px' }}>Create Organization</Button></NavLink>\n                {' '}\n                {/* <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button> */}\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"OrganizationsBrowser scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                {/* {this.renderHeader()} */}\n                {this.renderSearchBar()}\n                <div className=\"OrganizationsBrowser-bodyRow\">\n                    <div className=\"OrganizationsBrowser-bodyCol scrollable-flex-column\">\n                        {this.renderOrganizations()}\n                    </div>\n                    <div className=\"OrganizationsBrowser-filterCol\">\n                        {this.renderFilterColumn()}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationsBrowser","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, SortDirection, BrowseOrgsViewModel\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\n\nexport interface Load extends Action<ActionFlag.BROWSE_ORGS_LOAD> {\n    type: ActionFlag.BROWSE_ORGS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.BROWSE_ORGS_LOAD_START> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.BROWSE_ORGS_LOAD_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS\n    defaultViewModel: BrowseOrgsViewModel\n}\n\nexport interface LoadError extends Action<ActionFlag.BROWSE_ORGS_LOAD_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.BROWSE_ORGS_UNLOAD> {\n    type: ActionFlag.BROWSE_ORGS_UNLOAD\n}\n\nfunction loadStart(): LoadStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_START\n    }\n}\n\nfunction loadSuccess(defaultViewModel: BrowseOrgsViewModel): LoadSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_SUCCESS,\n        defaultViewModel: defaultViewModel\n    }\n}\n\nfunction loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.BROWSE_ORGS_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface SortOrgs extends Action<ActionFlag.BROWSE_ORGS_SORT> {\n    type: ActionFlag.BROWSE_ORGS_SORT,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SORT_START> {\n    type: ActionFlag.BROWSE_ORGS_SORT_START,\n    sortField: string,\n    sortDirection: SortDirection\n}\n\nexport interface SortOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SORT_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SORT_SUCCESS\n}\n\nexport interface SortOrgsError extends Action<ActionFlag.BROWSE_ORGS_SORT_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SORT_ERROR,\n    error: AppError\n}\n\n\nexport function sortOrgsStart(sortField: string, sortDirection: SortDirection): SortOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SORT_START,\n        sortField: sortField,\n        sortDirection: sortDirection\n    }\n}\n\n// SEARCHING\n\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\n// Called upon the start of a search call\n// Sets the ui state to enable a spinner\n// and also search query data to be reflected in the ui\nexport interface SearchOrgs extends Action<ActionFlag.BROWSE_ORGS_SEARCH> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH,\n    searchTerms: Array<string>\n}\n\nexport interface SearchOrgsStart extends Action<ActionFlag.BROWSE_ORGS_SEARCH_START> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_START\n}\n\n// Called upon successful completion of a search\n// Sets the organizations found\nexport interface SearchOrgsSuccess extends Action<ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS\n    organizations: Array<orgModel.BriefOrganization>\n    totalCount: number\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n}\n\n// Called upon a search error\n// Sets error state\nexport interface SearchOrgsError extends Action<ActionFlag.BROWSE_ORGS_SEARCH_ERROR> {\n    type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR\n    error: AppError\n}\n\n\n// searchTerms: Array<string>\nfunction searchOrgsStart(): SearchOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_START\n    }\n}\n\nfunction searchOrgsSuccess(organizations: Array<orgModel.BriefOrganization>, totalCount: number, openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>): SearchOrgsSuccess {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_SUCCESS,\n        organizations: organizations,\n        totalCount: totalCount,\n        openRequests: openRequests\n    }\n}\n\nfunction searchOrgsError(error: AppError): SearchOrgsError {\n    return {\n        type: ActionFlag.BROWSE_ORGS_SEARCH_ERROR,\n        error: error\n    }\n}\n\n// FILTER \n\n// Filter orgs\nexport interface FilterOrgs extends Action<ActionFlag.BROWSE_ORGS_FILTER> {\n    type: ActionFlag.BROWSE_ORGS_FILTER,\n    filter: string\n}\n\nexport interface FilterOrgsStart extends Action<ActionFlag.BROWSE_ORGS_FILTER_START> {\n    type: ActionFlag.BROWSE_ORGS_FILTER_START,\n    filter: orgModel.Filter\n}\n\n\nexport function filterOrgsStart(filter: orgModel.Filter): FilterOrgsStart {\n    return {\n        type: ActionFlag.BROWSE_ORGS_FILTER_START,\n        filter: filter\n    }\n}\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        // populate default browse orgs props\n        const defaultViewModel: BrowseOrgsViewModel = {\n            rawOrganizations: [],\n            organizations: [],\n            openRequests: new Map(),\n            totalCount: 0,\n            filteredCount: 0,\n            sortField: 'changed',\n            sortDirection: SortDirection.DESCENDING,\n            filter: { roleType: 'myorgs', roles: [], privacy: 'any' },\n            searchTerms: [],\n            selectedOrganizationId: null,\n            searching: false,\n            error: null\n        }\n        // done!\n        dispatch(loadSuccess(defaultViewModel))\n    }\n}\n\n// TODO: proper typing here \nexport function searchOrgs(searchTerms: Array<string>) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchOrgsStart())\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { sortField, sortDirection, filter } } = browseOrgsView\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms: searchTerms,\n                sortField, sortDirection, filter, username\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function sortOrgs(sortField: string, sortDirection: SortDirection) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sortOrgsStart(sortField, sortDirection))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, filter } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function filterOrgs(filter: orgModel.Filter) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(filterOrgsStart(filter))\n\n        const {\n            views: { browseOrgsView },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (browseOrgsView.viewModel === null) {\n            dispatch(searchOrgsError({\n                code: 'invalid-state',\n                message: 'Search orgs may not be called without a defined view'\n            }))\n            return\n        }\n\n        const { viewModel: { searchTerms, sortField, sortDirection } } = browseOrgsView\n\n        try {\n            const { organizations, total } = await orgClient.queryOrgs({\n                searchTerms, filter, username,\n                sortField, sortDirection,\n            })\n\n            // LEFT OFF HERE\n            // NOW GET THE PENDING REQUESTS...\n            const adminOrgs = organizations\n                .filter((org) => {\n                    return (\n                        org.relation === orgModel.UserRelationToOrganization.ADMIN ||\n                        org.relation === orgModel.UserRelationToOrganization.OWNER\n                    )\n                })\n                .map((org) => {\n                    return org.id\n                })\n            let openRequests\n            if (adminOrgs.length > 0) {\n                openRequests = await orgClient.getOpenRequestsStatus({ organizationIds: adminOrgs })\n            } else {\n                openRequests = new Map()\n            }\n\n            dispatch(searchOrgsSuccess(organizations, total, openRequests))\n        } catch (ex) {\n            console.error('Error querying orgs', ex.name, ex.message)\n            dispatch(searchOrgsError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n","import OrganizationsBrowser from './component'\nimport { StoreState, SortDirection, AppError } from '../../../types'\nimport * as actions from '../../../redux/actions/browseOrgs'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as orgModel from '../../../data/models/organization/model'\n//\n// Typing for the mapState and mapDispatch\n//\n\nexport interface OwnProps {\n    sortBy: string\n}\nexport interface LinkStateProps {\n    organizations: Array<orgModel.BriefOrganization>\n    openRequests: Map<orgModel.OrganizationID, orgModel.RequestStatus>\n    totalCount: number\n    filteredCount: number\n    filter: orgModel.Filter\n    searching: boolean,\n    error: AppError | null\n}\n\nexport interface LinkDispatchProps {\n    onSearchOrgs: (searchTerms: Array<string>) => void,\n    onSortOrgs: (sortField: string, sortDirection: SortDirection) => void,\n    onFilterOrgs: (filter: orgModel.Filter) => void\n}\n\n// note second arg is the component props, but we don't have any component props to merge in.\nexport function mapStateToProps(storeState: StoreState): LinkStateProps {\n    if (!storeState.views.browseOrgsView.viewModel) {\n        throw new Error('No view model!')\n    }\n\n    const {\n        views: {\n            browseOrgsView: {\n                viewModel: {\n                    organizations, openRequests, error,\n                    totalCount, filteredCount, filter, searching }\n            }\n        }\n    } = storeState\n\n    return {\n        organizations,\n        openRequests,\n        totalCount,\n        filteredCount,\n        filter,\n        error,\n        searching: searching\n    }\n\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.SearchOrgs | actions.SortOrgs | actions.FilterOrgs>): LinkDispatchProps {\n    return {\n        onSearchOrgs: (searchTerms: Array<string>) => {\n            // TODO proper typing here\n            dispatch(actions.searchOrgs(searchTerms) as any)\n        },\n        onSortOrgs: (sortBy: string, sortDirection: SortDirection) => {\n            // TODO proper typing here\n            dispatch(actions.sortOrgs(sortBy, sortDirection) as any)\n        },\n        onFilterOrgs: (filter: orgModel.Filter) => {\n            dispatch(actions.filterOrgs(filter) as any)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationsBrowser)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, BrowseOrgsView } from '../../../types';\nimport Container from './container'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    view: BrowseOrgsView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Fetching your orgs and other things...\n            </div>\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container sortBy=\"recentlyChanged\" />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/browseOrgs'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    view: BrowseOrgsView\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.browseOrgsView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, UIError, UIErrorType, EditableOrganization, EditState, ValidationState, SyncState, ValidationErrorType } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport Validation from '../../data/models/organization/validation'\n\n// ACTIONS\n\nexport interface Save extends Action<ActionFlag.ADD_ORG_SAVE> {\n    type: ActionFlag.ADD_ORG_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.ADD_ORG_SAVE_START> {\n    type: ActionFlag.ADD_ORG_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.ADD_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface SaveError extends Action<ActionFlag.ADD_ORG_SAVE_ERROR> {\n    type: ActionFlag.ADD_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Editing\n\nexport interface Load extends Action<ActionFlag.ADD_ORG_LOAD> {\n    type: ActionFlag.ADD_ORG_LOAD;\n}\n\nexport interface LoadStart {\n    type: ActionFlag.ADD_ORG_LOAD_START\n}\n\nexport interface LoadSuccess {\n    type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n    newOrganization: EditableOrganization\n}\n\nexport interface LoadError {\n    type: ActionFlag.ADD_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload {\n    type: ActionFlag.ADD_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface AddOrgEvaluate extends Action<ActionFlag.ADD_ORG_EVALUATE> {\n    type: ActionFlag.ADD_ORG_EVALUATE\n}\n\nexport interface AddOrgEvaluateOK extends Action<ActionFlag.ADD_ORG_EVALUATE_OK> {\n    type: ActionFlag.ADD_ORG_EVALUATE_OK\n}\n\nexport interface AddOrgEvaluateErrors extends Action<ActionFlag.ADD_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n}\n\n// Updating name field\n\nexport interface UpdateName extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME\n    name: string\n}\n\nexport interface UpdateNameSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS\n    name: string\n}\n\nexport interface UpdateNameError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface UpdateLogoUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL\n    name: string\n}\n\nexport interface UpdateLogoUrlSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS\n    logoUrl: string | null\n}\n\nexport interface UpdateLogoUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating id Field\n\nexport interface UpdateId extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID,\n    id: string\n}\n\nexport interface UpdateIdSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n    id: string\n}\n\nexport interface UpdateIdError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n    id: string,\n    error: ValidationState\n}\n\nexport interface UpdateIdPass extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n    id: string\n}\n\n// Updating description field\n\nexport interface UpdateDescription extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface UpdateDescriptionSuccess {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface UpdateDescriptionError extends Action {\n    type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\n// Update is private field\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\nexport function saveStart(): SaveStart {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_START\n    }\n}\n\nexport function saveSuccess(org: orgModel.Organization): SaveSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_SUCCESS,\n        organization: org\n    }\n}\n\nexport function saveError(error: AppError): SaveError {\n    return {\n        type: ActionFlag.ADD_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Editing\n\nfunction loadStart() {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_START\n    }\n}\n\nfunction loadSuccess(newOrganization: EditableOrganization) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_SUCCESS,\n        newOrganization: newOrganization\n    }\n}\n\nfunction loadError(error: AppError) {\n    return {\n        type: ActionFlag.ADD_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.ADD_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function addOrgEvaluateOk(): AddOrgEvaluateOK {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_OK\n    }\n}\n\nexport function AddOrgEvaluateErrors(): AddOrgEvaluateErrors {\n    return {\n        type: ActionFlag.ADD_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Update Name\n\nexport function updateNameSuccess(name: string): UpdateNameSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function updateNameError(name: string, error: ValidationState): UpdateNameError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\nexport function updateIdSuccess(id: string): UpdateIdSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_SUCCESS,\n        id: id\n    }\n}\n\nexport function updateIdPass(id: string): UpdateIdPass {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_PASS,\n        id: id\n    }\n}\n\n// Update Gravatar Hash\n\nexport function updateLogoUrlSuccess(logoUrl: string | null): UpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function updateLogoUrlError(logoUrl: string | null, error: ValidationState): UpdateLogoUrlError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n\n// Update Id\n\nexport function updateIdError(id: string, error: ValidationState): UpdateIdError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_ID_ERROR,\n        id: id,\n        error: error\n    }\n}\n\nexport function updateDescriptionSuccess(description: string): UpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function updateDescriptionError(description: string, error: ValidationState): UpdateDescriptionError {\n    return {\n        type: ActionFlag.ADD_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const newOrg: EditableOrganization = {\n            id: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgId('')[1]\n            },\n            name: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgName('')[1]\n            },\n            logoUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgLogoUrl('')[1]\n            },\n            homeUrl: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgHomeUrl('')[1]\n            },\n            researchInterests: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgResearchInterests('')[1]\n            },\n            description: {\n                value: '',\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: Validation.validateOrgDescription('')[1]\n            },\n            isPrivate: {\n                value: false,\n                remoteValue: null,\n                syncState: SyncState.CLEAN,\n                validationState: {\n                    type: ValidationErrorType.OK,\n                    validatedAt: new Date()\n                }\n            }\n        }\n        dispatch(loadSuccess(newOrg))\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function addOrg() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n\n        // This check is to satisfy TS. Since viewModel is nullable, it has no way \n        // of knowing that our app flow ensures that it is populated.\n        // In terms of generalized usage of the redux store, though, there is no\n        // way to ensure this! So we really should perform our state checks before \n        // handling any event\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        // TODO: other validations!!!\n\n        dispatch(saveStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                addOrgView: { viewModel: { newOrganization } },\n            },\n            app: { config }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!newOrganization) {\n            dispatch(saveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        orgClient.addOrg(newOrganization, username)\n            .then((org: orgModel.Organization) => {\n                dispatch(saveSuccess(org))\n            })\n            .catch((error) => {\n                console.error('error adding', newOrganization, error)\n\n                // note that we dispatch an AppError compliant object,\n                // which wraps the original exception object.\n                dispatch(saveError({\n                    code: error.code || error.name,\n                    message: error.message,\n                    exception: error\n                }))\n            })\n    }\n}\n\nexport function addOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.addOrgView.viewModel) {\n            dispatch(saveError({\n                code: 'invalid',\n                message: 'Unexpected condition: no view model'\n            }))\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: {\n                    viewModel: { editState, newOrganization } }\n            }\n        } = state\n\n        if (!newOrganization) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.id.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        // TODO: quick hack to allow unmodified fields to evaluate to true.\n\n        if (newOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        if (newOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(AddOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(addOrgEvaluateOk())\n    }\n}\n\nfunction orgModelFromState(state: StoreState) {\n    const {\n        auth: { authorization: { token, username } },\n        app: { config } } = state\n    return new orgModel.OrganizationModel({\n        token, username,\n        groupsServiceURL: config.services.Groups.url\n    })\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateNameError(validatedName, error))\n        } else {\n            dispatch(updateNameSuccess(validatedName))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(name: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateLogoUrlError(validatedLogoUrl, error))\n        } else {\n            dispatch(updateLogoUrlSuccess(validatedLogoUrl))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: homeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n        } else {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_HOME_URL_SUCCESS,\n                homeUrl: validatedHomeUrl\n            })\n        }\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgHomeUrl(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.ADD_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            }) as UpdateResearchInterestsSuccess\n        }\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // no validation for now ... what is there to validate?\n\n        dispatch({\n            type: ActionFlag.ADD_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate\n        })\n        dispatch(addOrgEvaluate())\n    }\n}\n\nclass Debouncer {\n\n    delay: number\n    fun: () => void\n    canceled: boolean\n    timer: number | null\n\n    constructor(delay: number, fun: () => void) {\n        this.delay = delay\n        this.fun = fun\n        this.canceled = false\n        this.timer = null\n        this.startWaiting()\n    }\n\n    startWaiting() {\n        if (this.timer) {\n            window.clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(() => {\n            this.fun()\n        }, this.delay)\n    }\n\n    cancel() {\n        this.canceled = true\n    }\n}\n\nlet activeDebouncer: Debouncer | null = null\n\nexport function updateId(id: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(updateIdPass(id))\n        const [validatedId, error] = Validation.validateOrgId(id)\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        const lastValidatedAt = viewModel.newOrganization.id.validationState.validatedAt\n        const now = new Date().getTime()\n        const debounce = 500 // ms\n        if (lastValidatedAt) {\n            const elapsed = now - lastValidatedAt.getTime()\n            if (elapsed < debounce) {\n                if (!activeDebouncer) {\n                    activeDebouncer = new Debouncer(500, () => {\n                        dispatch(evaluateId())\n                    })\n                }\n                return\n            }\n        }\n\n        if (activeDebouncer) {\n            activeDebouncer.cancel()\n        }\n        activeDebouncer = null\n\n        const model = orgModelFromState(getState())\n        model.orgExists(validatedId)\n            .then((exists) => {\n                if (exists) {\n                    dispatch(updateIdError(validatedId, {\n                        type: ValidationErrorType.ERROR,\n                        validatedAt: new Date(),\n                        message: 'This org id is already in use'\n                    }))\n                } else {\n                    dispatch(updateIdSuccess(validatedId))\n                }\n\n                dispatch(addOrgEvaluate())\n            })\n    }\n}\n\nexport function evaluateId() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            views: {\n                addOrgView: { viewModel }\n            }\n        } = getState()\n        if (!viewModel) {\n            // do nothing\n            return\n        }\n\n        const id = viewModel.newOrganization.id\n\n        const [validatedId, error] = Validation.validateOrgId(id.value)\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateIdError(validatedId, error))\n            dispatch(addOrgEvaluate())\n            return\n        }\n\n        const model = orgModelFromState(getState())\n        model.orgExists(validatedId)\n            .then((exists) => {\n                if (exists) {\n                    dispatch(updateIdError(validatedId, {\n                        type: ValidationErrorType.ERROR,\n                        message: 'This org id is already in use',\n                        validatedAt: new Date()\n                    }))\n                } else {\n                    dispatch(updateIdSuccess(validatedId))\n                }\n\n                dispatch(addOrgEvaluate())\n            })\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const model = orgModelFromState(getState())\n\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(updateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(updateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(addOrgEvaluate())\n    }\n}","import * as React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Marked } from 'marked-ts'\nimport { Button, Icon, Modal, Input, Checkbox, Tooltip } from 'antd'\nimport md5 from 'md5'\n\nimport { EditableOrganization, SaveState, ValidationState, EditState, AppError, Editable, ValidationErrorType, SyncState } from '../../../types';\n\nimport './component.css'\n\nimport Header from '../../Header';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport OrgLogo from '../../OrgLogo';\nimport TextArea from 'antd/lib/input/TextArea';\nimport MainMenu from '../../menu/component';\n\nexport interface NewOrganizationProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    error: AppError | null,\n    newOrganization: EditableOrganization,\n    onSave: () => void,\n    onUpdateName: (name: string) => void,\n    onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport interface NewOrganizationState {\n    cancelToBrowser: boolean\n    showError: boolean\n}\n\nclass NewOrganization extends React.Component<NewOrganizationProps, NewOrganizationState> {\n\n    origin: string;\n\n    constructor(props: NewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            showError: true\n        }\n\n        this.origin = document.location!.origin\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'New Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>\n                        As a KBase user, you may create your own organizations.\n                    </p>\n                    <p>\n                        Once you have created an Organization, you will be the sole owner of it, forever.\n                    </p>\n                    <p>\n                        In order to create an Org, you need to complete the following fields.\n                    </p>\n                    <dl>\n                        <dt>\n                            name\n                        </dt>\n                        <dd>\n                            The organization <i>name</i> is whatever you wish to have your Org known as. It may be\n                            composed of any text (including unicode characters) up to 200 characters in length. You\n                            may also change it at any time.\n                        </dd>\n                        <dt>\n                            logo\n                        </dt>\n                        <dd>\n                            <p>\n                                Logo support has undergone a redesign, but has not yet been implemented. The new\n                                design supports direct image upload, and removes gravatar support.\n                            </p>\n                            <p>\n                                For now, gravatar is the only support for org logo\n                            </p>\n                            <p>\n                                In order to display a custom logo for your organization, you need to associate\n                                your Organization with an avatar hosted with the Gravatar service.\n                                To do so,\n                                simply enter the email address associated with your gravatar and press the update\n                                button. This will calculate a new \"gravatar hash\" and associate it with your organization.\n                            </p>\n                        </dd>\n                        <dt>\n                            id\n                        </dt>\n                        <dd>\n                            <p>\n                                Your Org <i>id</i> forms a url endpoint for your org as well as the identifier used throughout\n                            KBase to, well, identify your organization uniquely among all current and future organizations.\n                            As such, the Org ID may not be changed once created.\n                            </p>\n                            <p>\n                                The id may only be composed of the restricted characters a-Z, A-Z, 0-9 and _, and is also\n                                restricted to 100 characters in length.\n                            </p>\n\n                        </dd>\n                        <dt>\n                            description\n                        </dt>\n                        <dd>\n                            <p>\n                                Up to 4000 characters, a description allows you to express to other KBase users the purpose,\n                            history, associations, and science domain of your Org.</p>\n                            <p>\n                                The description is in \"markdown\" format, and the editor will show you a preview of the\n                                rendered description.\n                            </p>\n                        </dd>\n                    </dl>\n                </div>\n            )\n        })\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have entered information for this new organization.</p>\n\n                    <p>If you leave the editor without first saving, the new organization <i>will not be created</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.onSave();\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist();\n        this.props.onUpdateName(e.target.value);\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value);\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateId(e.target.value)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.saveState === SaveState.NEW\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty'\n            default:\n                return 'validation-ok'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"newOrganizationForm\" className=\"NewOrganization-editor\" onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div style={{ flex: '1 1 0px' }}>\n                            <h3>Create Your Organization</h3>\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <h3>Preview</h3>\n                    </div>\n                </div>\n\n                {/* Org name */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            <Tooltip title=\"This is the name for your organization as you want KBase users to see it\">\n                                Name\n                            </Tooltip>\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={this.props.newOrganization.name.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.name)}\n                                onChange={this.onNameChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.name)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-name\">\n                            {this.props.newOrganization.name.value || ''}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Org ID */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            ID\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={this.props.newOrganization.id.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.id)}\n                                onChange={this.onIdChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.id)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-id\">\n                            <span style={{ color: 'silver' }}>{this.origin}/#org/</span>\n                            {this.props.newOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Logo URL */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            Logo URL\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={this.props.newOrganization.logoUrl.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.logoUrl)}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.logoUrl)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-logo\">\n                            {this.renderLogoPreview()}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Home Page URL */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            Home Page URL\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <Input value={this.props.newOrganization.homeUrl.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.homeUrl)}\n                                onChange={this.onHomeUrlChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.homeUrl)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-field-name\">\n                            <a href={this.props.newOrganization.homeUrl.value || ''} target=\"_blank\">{this.props.newOrganization.homeUrl.value || ''}</a>\n                        </div>\n                    </div>\n                </div>\n\n\n                {/* Is Private? */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            Is Private?\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <Checkbox\n                                checked={this.props.newOrganization.isPrivate.value}\n                                className={this.calcFieldClass(this.props.newOrganization.isPrivate)}\n                                onChange={this.onIsPrivateChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.isPrivate)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-isPrivate\">\n                            {this.renderIsPrivate(this.props.newOrganization.isPrivate.value)}\n                        </div>\n                    </div>\n                </div>\n\n\n                {/* Research Interests */}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                            Research Interests\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <TextArea value={this.props.newOrganization.researchInterests.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.researchInterests) + ' NewOrganization-control-researchInterests'}\n                                autosize={{ minRows: 2, maxRows: 2 }}\n                                onChange={this.onResearchInterestsChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.researchInterests)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-researchInterests\">\n                            {this.props.newOrganization.researchInterests.value || ''}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Description*/}\n                <div className=\"NewOrganization-row\">\n                    <div className=\"NewOrganization-col1\">\n                        <div className=\"NewOrganization-formLabel field-label\">\n                        </div>\n                        <div className=\"NewOrganization-formControl\">\n                            <TextArea value={this.props.newOrganization.description.value || ''}\n                                className={this.calcFieldClass(this.props.newOrganization.description) + ' NewOrganization-control-description'}\n                                autosize={{ minRows: 5, maxRows: 15 }}\n                                onChange={this.onDescriptionChange.bind(this)} />\n                            {this.renderFieldError(this.props.newOrganization.description)}\n                        </div>\n                    </div>\n                    <div className=\"NewOrganization-col2\">\n                        <div className=\"NewOrganization-preview-description\"\n                            dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.newOrganization.description.value || '') })}\n                        />\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n\n    charAt(inString: string, position: number) {\n        // const c1 = inString.charAt(position)\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderLogo(org: EditableOrganization) {\n        return (\n            <OrgLogo logoUrl={null} size={64} organizationName={org.name.value} organizationId={org.id.value} />\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Private\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Public\n            </span>\n        )\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.newOrganization.name.value && this.props.newOrganization.id.value)) {\n            return (\n                <div>\n                    Default logo preview available when the Organization name and id are completed\n                </div>\n            )\n        }\n        const initial = this.charAt(this.props.newOrganization.name.value, 0).toUpperCase()\n        // const initial = this.props.organizationName.substr(0, 1).toUpperCase()\n        const hash = md5(this.props.newOrganization.id.value)\n\n        const size = 60;\n\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderLogoPreview() {\n        if (!this.props.newOrganization.logoUrl.value) {\n            return this.renderDefaultLogo()\n        }\n        return (\n            <img src={this.props.newOrganization.logoUrl.value} width={60} />\n        )\n    }\n\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    toggleError() {\n        this.setState({ showError: !this.state.showError })\n    }\n\n    renderHeader() {\n        const orgName = this.props.newOrganization!.name.value || (<span style={{ fontStyle: 'italic', color: 'gray' }}>org name will appear here when you edit the name field</span>)\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n            )\n        }\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    {/* <FaPlusCircle style={{ verticalAlign: 'middle' }} /> */}\n                    <Icon type=\"plus-circle\" />\n                    {' '}\n                    Adding a New Org \"\n                            {orgName}\n                    \"\n                        </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                <Button icon=\"save\"\n                    form=\"newOrganizationForm\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    {/* <Icon type=\"save\" /> */}\n                    {/* <FaSave style={{ verticalAlign: 'center' }} /> */}\n                    Save\n                        </Button>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n                {errorButton}\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading New Org Editor...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderError() {\n        if (this.props.error && this.state.showError) {\n            const onOk = () => {\n                this.setState({ showError: false })\n            }\n            const onCancel = () => {\n                this.setState({ showError: false })\n            }\n            let trace\n            if (this.props.error.trace) {\n                trace = this.props.error.trace.map((line, index) => {\n                    return (\n                        <div key={\"line_\" + index}>{line}</div>\n                    )\n                })\n            }\n            if (trace) {\n                trace = (\n                    <div>\n                        <div>trace</div>\n                        {trace}\n                    </div>\n                )\n            }\n            return (\n                <Modal visible={true}\n                    title=\"Error\"\n                    okType=\"danger\"\n                    okText=\"Close\"\n                    cancelText=\"Clear Error\"\n                    onCancel={onCancel}\n                    onOk={onOk}>\n                    <div style={{ fontWeight: 'bold' }}>\n                        {this.props.error.code}\n                    </div>\n                    <div>\n                        {this.props.error.message}\n                    </div>\n                    {trace}\n\n                </Modal>\n            )\n        }\n    }\n\n    renderMenuButtons() {\n        let errorButton\n        if (this.props.error) {\n            errorButton = (\n                <Button shape=\"circle\" icon=\"exclamation\" type=\"danger\" onClick={this.toggleError.bind(this)}></Button>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <Button icon=\"save\"\n                    form=\"newOrganizationForm\"\n                    key=\"submit\"\n                    disabled={!this.canSave.call(this)}\n                    htmlType=\"submit\">\n                    Save\n                </Button>\n                {/* <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button> */}\n                {errorButton}\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        // TODO: this is just a prop for today.\n        if (this.props.saveState === SaveState.SAVED) {\n            return <Redirect push to={\"/editOrganization/\" + this.props.newOrganization.id.value} />\n        }\n\n        if (!this.props.newOrganization) {\n            return (\n                <div className=\"NewOrganization\">\n                    {this.renderLoadingHeader()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"NewOrganization\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                {/* {this.renderHeader()} */}\n                {this.renderEditor()}\n                {this.renderError()}\n            </div>\n        )\n    }\n}\n\nexport default NewOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditState, SaveState, ValidationState, EditableOrganization, AppError } from '../../../types';\nimport {\n    addOrg, updateName, updateLogoUrl, updateId, updateDescription, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../redux/actions/addOrg';\n\nimport Component from './component';\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    newOrganization: EditableOrganization\n    error: AppError | null\n}\n\nexport interface DispatchProps {\n    onSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (logoUrl: string | null) => void\n    onUpdateId: (id: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.addOrgView.viewModel) {\n        throw new Error('View model missing in state')\n    }\n    const {\n        views: {\n            addOrgView: {\n                viewModel: { editState, saveState, validationState, newOrganization, error }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        newOrganization,\n        error\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSave: () => {\n            dispatch(addOrg() as any)\n        },\n        onUpdateName: (name) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (logoUrl: string | null) => {\n            dispatch(updateLogoUrl(logoUrl) as any)\n        },\n        onUpdateId: (id) => {\n            dispatch(updateId(id) as any)\n        },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport { AppError, AddOrgView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\nimport './loader.css'\n\ninterface LoaderProps {\n    view: AddOrgView\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading \"Add New Organization\" form...\n            </div>\n        )\n    }\n\n    renderError(error: AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            case ComponentLoadingState.SUCCESS:\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad()\n        }\n    }\n\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// redux interface\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/addOrg'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.addOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.Load | actions.Unload>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as requestModel from './requests'\nimport * as orgModel from './organization/model'\nimport { RequestType } from '../../types';\n\nexport interface UberOrganization {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization\n    request: requestModel.UserRequest | null\n    invitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation,\n    groupRequests: Array<requestModel.Request> | null\n}\n\ninterface UberModelParams {\n    token: string\n    username: string\n    groupsServiceURL: string\n    userProfileServiceURL: string\n    workspaceServiceURL: string\n    serviceWizardURL: string\n}\n\nexport class UberModel {\n\n    params: UberModelParams\n\n    constructor(params: UberModelParams) {\n        this.params = params\n    }\n\n    async getOrganizationForUser(organizationId: string): Promise<UberOrganization> {\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config }\n        // } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token: this.params.token, username: this.params.username,\n            groupsServiceURL: this.params.groupsServiceURL\n        })\n\n        // get org\n        const organization = await orgClient.getOrg(organizationId)\n\n        // get pending requests\n        const request = await requestClient.getUserRequestForOrg(organizationId) as requestModel.UserRequest | null\n\n        const invitation = await requestClient.getUserInvitationForOrg(organizationId) as requestModel.UserInvitation | null\n\n        // we should probably just keep the request ids rather than try to keep the whole request\n        // and refactor the calls for the request events, which I just refactored (not much work) to use the \n        // whole request structure rather than just the id, to use the request id + the org id...\n        const relation = orgModel.determineRelation(organization, this.params.username, request, invitation)\n\n        let groupRequests\n        if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n        } else {\n            groupRequests = null\n        }\n\n        return {\n            organization, request, invitation, relation, groupRequests\n        }\n    }\n\n    // async getOrganizationsForUser(): Promise<Array<UberOrganization>> {\n    //     // const {\n    //     //     auth: { authorization: { token, username } },\n    //     //     app: { config }\n    //     // } = getState()\n\n    //     const orgClient = new orgModel.OrganizationModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const requestClient = new requestModel.RequestsModel({\n    //         token: this.params.token, username: this.params.username,\n    //         groupsServiceURL: this.params.groupsServiceURL\n    //     })\n\n    //     const orgs = await orgClient.getOwnOrgs()\n\n    //     const requestOutbox = await requestClient.getOutboundRequests()\n    //     const requestInbox = await requestClient.getInboundRequests()\n\n    //     return await Promise.all(orgs.map(async (organization) => {\n    //         const request = requestOutbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.REQUEST &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserRequest\n\n    //         const invitation = requestInbox.find((request) => {\n    //             if (request.organizationId === organization.id) {\n    //                 if (request.type === RequestType.INVITATION &&\n    //                     request.resourceType === requestModel.RequestResourceType.USER) {\n    //                     return true\n    //                 }\n    //             }\n    //             return false\n    //         }) as requestModel.UserInvitation\n\n    //         const relation = orgModel.determineRelation(organization, this.params.username, request || null, invitation)\n\n    //         let groupRequests\n    //         if (relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n    //             relation.type === orgModel.UserRelationToOrganization.OWNER) {\n    //             groupRequests = await requestClient.getPendingOrganizationRequestsForOrg(organization.id)\n    //         } else {\n    //             groupRequests = null\n    //         }\n\n    //         return {\n    //             organization, request, invitation, relation, groupRequests\n    //         }\n    //     }))\n    // }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AnError, makeError } from '../../lib/error';\nimport { StoreState } from '../../types';\n\nexport interface Load extends Action<ActionFlag.DATA_SERVICE_LOAD> {\n    type: ActionFlag.DATA_SERVICE_LOAD\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.DATA_SERVICE_LOAD_SUCCESS> {\n    type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n}\n\nexport interface LoadError extends Action<ActionFlag.DATA_SERVICE_LOAD_ERROR> {\n    type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n    error: AnError\n}\n\nfunction loadError(error: AnError) {\n    return {\n        type: ActionFlag.DATA_SERVICE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_START\n        })\n\n        dispatch({\n            type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS\n        } as LoadSuccess)\n\n        // const {\n        //     auth: { authorization: { token, username } },\n        //     app: { config } } = getState()\n\n        // const userProfileClient = new userProfileModel.UserProfile({\n        //     token, username,\n        //     userProfileServiceURL: config.services.UserProfile.url\n        // })\n\n        // try {\n        //     const userProfile = await userProfileClient.getProfile(username)\n\n        //     dispatch({\n        //         type: ActionFlag.DATA_SERVICE_LOAD_SUCCESS,\n        //         profile: userProfile\n        //     })\n        // } catch (ex) {\n        //     console.error('error', ex)\n        //     dispatch(loadError(makeError({\n        //         code: ex.name,\n        //         message: ex.name\n        //     })))\n        // }\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.DATA_SERVICE_UNLOAD\n    }\n}\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport {\n    StoreState,\n    AppError, UIError, UIErrorType, ViewOrgViewModelKind\n} from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as uberModel from '../../data/models/uber'\nimport * as feedsModel from '../../data/models/feeds'\nimport * as userProfileModel from '../../data/models/profile'\nimport { loadNarrative } from './entities'\nimport * as dataServices from './dataServices'\nimport { Narrative } from '../../data/models/narrative';\nimport { AnError } from '../../lib/error';\n\n// Action Types\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD\n    organizationId: string\n}\n\nexport interface ReLoad extends Action {\n    type: ActionFlag.VIEW_ORG_RELOAD\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_START\n}\n\n// export interface LoadSuccess extends Action {\n//     type: ActionFlag.VIEW_ORG_LOAD_SUCCESS\n//     organization: orgModel.Organization\n//     relation: orgModel.Relation\n//     groupRequests: Array<requestModel.Request> | null\n//     groupInvitations: Array<requestModel.Request> | null\n//     requestInbox: Array<requestModel.Request>\n//     requestOutbox: Array<requestModel.Request>\n//     notifications: Array<feedsModel.OrganizationNotification>\n// }\n\nexport interface LoadNormalSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    openRequest: orgModel.RequestStatus\n    groupRequests: Array<requestModel.Request> | null\n    groupInvitations: Array<requestModel.Request> | null\n    requestInbox: Array<requestModel.Request>\n    requestOutbox: Array<requestModel.Request>\n    notifications: Array<feedsModel.OrganizationNotification>,\n    narrativesSortBy: string\n    narratives: Array<orgModel.NarrativeResource>\n    sortMembersBy: string,\n    members: Array<orgModel.Member>\n}\n\nexport interface LoadInaccessiblePrivateSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_LOAD_ERROR\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_UNLOAD\n}\n\n// Join Requests\n\nexport interface ViewOrgJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST\n    requestId: string\n}\n\nexport interface ViewOrgJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR\n    error: UIError\n}\n\n// Join Request cancellation\n\nexport interface ViewOrgCancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface ViewOrgCancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface ViewOrgCancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n}\n\nexport interface ViewOrgCancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: UIError\n}\n\n// Join Invitation Acceptance\n\nexport interface AcceptJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION\n}\n\nexport interface AcceptJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n}\n\nexport interface AcceptJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface AcceptJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n// Join Invitation Denial\n\nexport interface RejectJoinInvitation extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION\n}\n\nexport interface RejectJoinInvitationStart extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n}\n\nexport interface RejectJoinInvitationSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n}\n\nexport interface RejectJoinInvitationError extends Action {\n    type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n    error: AppError\n}\n\n\n// Delete Narrative\n\nexport interface RemoveNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE\n}\n\nexport interface RemoveNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n}\n\nexport interface RemoveNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface RemoveNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\n\nexport function removeNarrativeStart(): RemoveNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_START\n    }\n}\n\nexport function removeNarrativeSuccess(narrative: orgModel.NarrativeResource): RemoveNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function removeNarrativeError(error: AppError): RemoveNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_REMOVE_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function removeNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeNarrativeStart())\n\n        // TODO: need to restructure this view -- this is crazy\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: {\n                        organization\n                    }\n                }\n            }\n        } = state\n\n        if (!organization) {\n            dispatch(removeNarrativeError({\n                code: 'bad state',\n                message: 'View orgs does not have an org'\n            }))\n            return\n        }\n\n        const groupId = organization.id\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n\n        try {\n            await orgClient.removeNarrativeFromOrg(groupId, narrative.workspaceId)\n            dispatch(removeNarrativeSuccess(narrative))\n        } catch (ex) {\n            dispatch(removeNarrativeError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Access narrative\n\nexport interface AccessNarrative extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE,\n    narrative: orgModel.NarrativeResource\n}\n\nexport interface AccessNarrativeStart extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n}\n\nexport interface AccessNarrativeSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n    organization: orgModel.Organization\n}\n\nexport interface AccessNarrativeError extends Action {\n    type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n    error: AppError\n}\n\n// Generators\nexport function accessNarrativeStart(): AccessNarrativeStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_START\n    }\n}\n\nexport function accessNarrativeSuccess(organization: orgModel.Organization): AccessNarrativeSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_SUCCESS,\n        organization: organization\n    }\n}\n\nexport function accessNarrativeError(error: AppError): AccessNarrativeError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCESS_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\n// Thunk\n\nexport function accessNarrative(narrative: orgModel.NarrativeResource) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(accessNarrativeStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'No view model'\n            }))\n            return\n        }\n\n        const viewModel = state.views.viewOrgView.viewModel\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: 'Not NORMAL org'\n            }))\n            return\n        }\n\n        const { organization } = viewModel\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n        } = state\n\n        const groupId = organization.id\n        const resourceId = String(narrative.workspaceId)\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.grantNarrativeAccess(groupId, resourceId)\n            // Getting a fresh copy of the org will trigger the view org component and\n            // all subcomponents with changed data to refresh. All we are intending here is that\n            // the narrative in the list of narratives provided by the groups api is updated, but\n            // there may be other elements of the group/org which have changed as well. So be it.\n            const org = await orgClient.getOrg(groupId)\n\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(accessNarrativeError({\n                    code: 'error',\n                    message: 'Not a NORMAL org'\n                }))\n                return\n            }\n\n            dispatch(loadNarrative(narrative.workspaceId))\n            dispatch(accessNarrativeSuccess(org))\n        } catch (ex) {\n            dispatch(accessNarrativeError({\n                code: 'error',\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Generators\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_START\n    }\n}\n\nexport function loadNormalSuccess(\n    organization: orgModel.Organization,\n    relation: orgModel.Relation,\n    openRequest: orgModel.RequestStatus,\n    groupRequests: Array<requestModel.Request> | null,\n    groupInvitations: Array<requestModel.Request> | null,\n    requestInbox: Array<requestModel.Request>,\n    requestOutbox: Array<requestModel.Request>,\n    notifications: Array<feedsModel.OrganizationNotification>,\n    narrativesSortBy: string,\n    narratives: Array<orgModel.NarrativeResource>,\n    sortMembersBy: string,\n    members: Array<orgModel.Member>): LoadNormalSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_NORMAL_SUCCESS,\n        organization, relation, openRequest,\n        groupRequests, groupInvitations,\n        requestInbox, requestOutbox, notifications,\n        narrativesSortBy,\n        narratives, sortMembersBy, members\n    }\n}\n\nexport function loadInaccessiblePrivateSuccess(\n    organization: orgModel.InaccessiblePrivateOrganization,\n    relation: orgModel.Relation,\n    requestOutbox: Array<requestModel.Request>): LoadInaccessiblePrivateSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_INACCESSIBLE_PRIVATE_SUCCESS,\n        organization, relation,\n        requestOutbox\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\n// Join requests\n\nexport function viewOrgJoinRequestStart(): ViewOrgJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgJoinRequestSuccess(): ViewOrgJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgJoinRequestError(error: UIError): ViewOrgJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Join Request Cancellation\n\nexport function viewOrgCancelJoinRequestStart(): ViewOrgCancelJoinRequestStart {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n    }\n}\n\nexport function viewOrgCancelJoinRequestSuccess(): ViewOrgCancelJoinRequestSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    }\n}\n\nexport function viewOrgCancelJoinRequestError(error: UIError): ViewOrgCancelJoinRequestError {\n    return {\n        type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n        error: error\n    }\n}\n\n// Invitation Acceptance\n\nexport function acceptJoinInvitationStart(): AcceptJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_START\n    }\n}\n\nexport function acceptJoinInvitationSuccess(): AcceptJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function acceptJoinInvitationError(error: AppError): AcceptJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_ACCEPT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Invitation Rejection \n\nexport function rejectJoinInvitationStart(): RejectJoinInvitationStart {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_START\n    }\n}\n\nexport function rejectJoinInvitationSuccess(): RejectJoinInvitationSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_SUCCESS\n    }\n}\n\nexport function rejectJoinInvitationError(error: AppError): RejectJoinInvitationError {\n    return {\n        type: ActionFlag.VIEW_ORG_REJECT_JOIN_INVITATION_ERROR,\n        error: error\n    }\n}\n\n// Join invitation acceptance\n\n// TODO\n\n// Thunks\n\nexport function unload() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: { viewOrgView: { viewModel } }\n        } = getState()\n\n        if (!viewModel) {\n            throw new Error('view model not defined!?!')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (viewModel.organization.relation === orgModel.UserRelationToOrganization.MEMBER ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.ADMIN ||\n            viewModel.organization.relation === orgModel.UserRelationToOrganization.OWNER) {\n            await orgClient.visitOrg({ organizationId: viewModel.organization.id })\n        }\n\n        dispatch(dataServices.load())\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_UNLOAD\n        })\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            db: { notifications: { all, byId } }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n            }\n\n            const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: narrativesSortBy,\n                searchBy: ''\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: sortMembersBy,\n                searchBy: ''\n            })\n\n            dispatch(loadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, [], narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function reload(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n        })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            // existing org view.\n            const state = getState()\n            const viewModel = state.views.viewOrgView.viewModel\n\n            if (!viewModel) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'No view model'\n                }))\n                return\n            }\n\n            if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                }))\n                return\n            }\n\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                const requestInbox = await requestClient.getRequestInboxForOrg(organizationId)\n                dispatch(loadInaccessiblePrivateSuccess(organization, relation, requestInbox))\n                return\n            }\n\n            let openRequest\n            let orgRequests: Array<requestModel.Request> | null\n            let orgInvitations: Array<requestModel.Request> | null\n            if (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n                relation.type === orgModel.UserRelationToOrganization.ADMIN) {\n                orgRequests = await requestClient.getPendingOrganizationRequestsForOrg(organizationId)\n                orgInvitations = await requestClient.getOrganizationInvitationsForOrg(organizationId)\n                openRequest = await orgClient.getOpenRequestStatus({ organizationId })\n            } else {\n                orgRequests = null\n                orgInvitations = null\n                openRequest = orgModel.RequestStatus.INAPPLICABLE\n            }\n\n            const requestInbox: Array<requestModel.Request> = await requestClient.getCombinedRequestInboxForOrg(organizationId)\n            const requestOutbox: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(organizationId)\n\n            // default narrative sort?\n            const narrativesSortBy = 'added'\n            const narratives = orgModel.queryNarratives(organization.narratives, {\n                sortBy: viewModel.sortNarrativesBy,\n                searchBy: viewModel.searchNarrativesBy\n            })\n\n            const sortMembersBy = 'added'\n            const members = orgModel.queryMembers(organization.members, {\n                sortBy: viewModel.sortMembersBy,\n                searchBy: viewModel.searchMembersBy\n            })\n\n            dispatch(loadNormalSuccess(organization, relation, openRequest, orgRequests, orgInvitations,\n                requestInbox, requestOutbox, [], narrativesSortBy, narratives, sortMembersBy, members))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgJoinRequest() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        //TODO: could do a start here...\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel: { organization } }\n            }\n        } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.requestMembership(organization.id)\n            dispatch(viewOrgJoinRequestSuccess())\n            dispatch(load((organization.id)))\n        } catch (ex) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function viewOrgCancelJoinRequest(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(viewOrgJoinRequestStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.cancelRequest(requestId)\n            dispatch(viewOrgCancelJoinRequestSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(viewOrgCancelJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function acceptJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.acceptJoinInvitation(requestId)\n            dispatch(acceptJoinInvitationSuccess())\n            // quick 'n easy\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(acceptJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n\nexport function rejectJoinInvitation(requestId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(acceptJoinInvitationStart())\n\n        const state = getState()\n        if (!state.views.viewOrgView.viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: {\n                    viewModel: { organization } } } } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const newRequest = await requestClient.rejectJoinInvitation(requestId)\n            dispatch(rejectJoinInvitationSuccess())\n            dispatch(load(newRequest.organizationId))\n        } catch (ex) {\n            dispatch(rejectJoinInvitationError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// SORT NARRATIVES\nexport interface SortNarratives {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES,\n    sortBy: string\n}\n\nexport interface SortNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n}\n\nexport interface SortNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    sortBy: string\n}\n\nexport interface SortNarrativesError {\n    type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function sortNarratives(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        // const sorted = orgModel.sortNarratives(narratives.slice(), sortBy)\n        // const sorted = narratives.slice().sort(sortByToComparator(sortBy))\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_SUCCESS,\n            narratives: sorted,\n            sortBy\n        })\n\n    }\n}\n\n\n// SEARCH NARRATIVES\n\nexport interface SearchNarratives {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES,\n    searchBy: string\n}\n\nexport interface SearchtNarrativesStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_START\n}\n\nexport interface SearchNarrativesSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS\n    narratives: Array<orgModel.NarrativeResource>\n    searchBy: string\n}\n\nexport interface SearchNarrativesError {\n    type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_ERROR\n    error: AnError\n}\n\n\n\nexport function searchNarratives(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_NARRATIVES_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Now view model!'\n            }))\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch(viewOrgJoinRequestError({\n                type: UIErrorType.ERROR,\n                message: 'Wrong org view model kind!'\n            }))\n            return\n        }\n\n        const { narratives } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortNarrativesBy\n\n        const sorted = orgModel.queryNarratives(narratives, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_NARRATIVES_SUCCESS,\n            searchBy: searchBy,\n            narratives: sorted\n        })\n\n    }\n}\n\n\n\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\nimport * as uberModel from '../../../data/models/uber'\n\nexport interface AcceptRequestAction<T> extends Action<T> {\n}\n\nexport interface AcceptRequest extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface AcceptRequestStart extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n}\n\nexport interface AcceptRequestSuccess extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n    requests: Array<requestModel.Request>\n    organizations: Array<uberModel.UberOrganization>\n}\n\ninterface AcceptRequestError extends AcceptRequestAction<ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function acceptRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, AcceptRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.acceptRequest(requestId)\n\n            // refetch the inbox\n            const inbox = await requestClient.getCombinedRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            })\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n        // or error\n    }\n}\n\n","import { string } from \"prop-types\";\nimport { AppException } from \"../../types\";\n\n/*\n{\n    \"id\": string - a unique id for the notification,\n    \"actor\": string - the actor who triggered the notification,\n    \"verb\": string - the action represented by this notification (see list of verbs below),\n    \"object\": string - the object of the notification,\n    \"target\": list - the target(s) of the notification,\n    \"source\": string - the source service that created the notification,\n    \"level\": string, one of alert, error, warning, request,\n    \"seen\": boolean, if true, then this has been seen before,\n    \"created\": int - number of milliseconds since the epoch, when the notification was created,\n    \"expires\": int - number of milliseconds since the epoch, when the notification will expire, and will no longer be seen.\n    \"external_key\": string - (optional) a external key that has meaning for the service that created the notification. Meant for use by other services.\n    \"context\": structure - (optional) a (mostly) freely open structure with meaning for the service that created it. The special keys `text` and `link` are intended to be used by the front end viewers. A `link` becomes a hyperlink that would link to some relevant place. `text` gets interpreted as the intended text of the notification, instead of automatically generating it.\n}\n*/\n\nexport interface Resource {\n    id: string\n    name: string\n    type: string\n}\nexport interface Notification {\n    id: string\n    actor: Resource\n    verb: string\n    object: Resource\n    target: Array<Resource>\n    source: string\n    level: string\n    seen: boolean\n    created: number\n    expires: number\n    external_key?: string\n    context?: {\n        resourcetype?: string\n        groupid?: string\n        requestid?: string\n    }\n}\n\nexport interface GetNotificationsResult {\n    group: {\n        feed: Array<Notification>\n        unseen: number\n    }\n    user: {\n        feed: Array<Notification>\n        unseen: number\n    }\n}\n\n\nexport interface FeedsError {\n    message: string\n}\n\n\nexport class FeedsException extends AppException {\n    originalError: FeedsError\n    constructor(error: FeedsError) {\n        super({\n            code: 'feeds-exception',\n            message: error.message,\n            detail: error.message,\n            info: new Map<string, any>()\n        })\n        this.name = 'FeedsException'\n        this.originalError = error\n    }\n}\n\nexport class ServerException extends AppException {\n    constructor(detail: string) {\n        super({ code: 'server-exception', message: 'Server Exception', detail: detail })\n        this.name = 'ServerException'\n    }\n}\n\nexport interface FeedsClientParams {\n    token: string\n    url: string\n}\n\ninterface APIResponse { }\n\nexport class FeedsClient {\n    params: FeedsClientParams\n\n\n    constructor(params: FeedsClientParams) {\n        this.params = params\n    }\n\n    async put<T>(path: Array<string>, body: any): Promise<T> {\n        const url = (this.baseURLPath().concat(path)).join('/')\n        return fetch(url, {\n            headers: {\n                Authorization: this.params.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'PUT',\n            body: JSON.stringify(body)\n        })\n            .then((response) => {\n                if (response.status === 500) {\n                    switch (response.headers.get('Content-Type')) {\n                        case 'application/json':\n                            return response.json()\n                                .then((result) => {\n                                    throw new FeedsException(result)\n                                })\n                        case 'text/plain':\n                            return response.text()\n                                .then((result) => {\n                                    throw new ServerException(result)\n                                })\n                        default:\n                            throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n                    }\n                } else if (response.status !== 200) {\n                    throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n                } else {\n                    return response.json()\n                        .then((result) => {\n                            return result as T\n                        })\n                }\n            })\n    }\n\n    async post<T>(path: Array<string>, body: any): Promise<T | null> {\n        const url = (this.baseURLPath().concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.params.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new FeedsException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else if (response.status === 204) {\n            return null\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async postWithResult<T>(path: Array<string>, body: any): Promise<T> {\n        const url = (this.baseURLPath().concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.params.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'POST',\n            body: body ? JSON.stringify(body) : ''\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new FeedsException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    async get<T>(path: Array<string>, query: Map<string, string>): Promise<T> {\n        const queryString = Array.from(query.entries()).map(([k, v]) => {\n            return [\n                k, encodeURIComponent(v)\n            ].join('=')\n        }).join('&')\n        const url = (this.baseURLPath().concat(path)).join('/') + '?' + queryString\n        // const url = ([this.url].concat(path)).join('/')\n        const response = await fetch(url, {\n            headers: {\n                Authorization: this.params.token,\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            method: 'GET'\n        })\n\n        if (response.status === 500) {\n            switch (response.headers.get('Content-Type')) {\n                case 'application/json':\n                    const result = await response.json()\n                    throw new FeedsException(result)\n                case 'text/plain':\n                    const errorText = await response.text()\n                    throw new ServerException(errorText)\n                default:\n                    throw new Error('Unexpected content type: ' + response.headers.get('Content-Type'))\n            }\n        } else if (response.status === 200) {\n            return await response.json() as T\n        } else {\n            throw new Error('Unexpected response: ' + response.status + ' : ' + response.statusText)\n        }\n    }\n\n    // async get(path: Array<string>, query: Map<string, string>): Promise<APIResponse> {\n    //     const queryString = Array.from(query.entries()).map(([k, v]) => {\n    //         return [\n    //             k, encodeURIComponent(v)\n    //         ].join('=')\n    //     }).join('&')\n    //     const url = [this.params.url, 'api', 'V1'].concat(path).join('/') + '?' + queryString\n    //     const response = await fetch(url, {\n    //         headers: {\n    //             Authorization: this.params.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n\n    //     if (response.headers.get('Content-Type') === 'application/json') {\n    //         if (response.status === 200) {\n    //             const result = await response.json()\n    //             return result\n    //         }\n    //         throw new Error('Non-success response: ' + response.status + ': ' + response.statusText)\n    //     } else {\n    //         const textResult = await response.text()\n    //         throw new Error('Non-JSON response' + textResult)\n    //     }\n    // }\n\n    baseURLPath() {\n        return [this.params.url, 'api', 'V1']\n    }\n\n    // async post(path: Array<string>, body: Map<string, string>): Promise<APIResponse> {\n    //     // const queryString = Array.from(query.entries()).map(([k, v]) => {\n    //     //     return [\n    //     //         k, encodeURIComponent(v)\n    //     //     ].join('=')\n    //     // }).join('&')\n    //     const url = this.baseURLPath().concat(path).join('/') //  + '?' + queryString\n    //     const response = await fetch(url, {\n    //         headers: {\n    //             Authorization: this.params.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n\n    //     if (response.headers.get('Content-Type') === 'application/json') {\n    //         if (response.status === 200) {\n    //             const result = await response.json()\n    //             return result\n    //         }\n    //         throw new Error('Non-success response: ' + response.status + ': ' + response.statusText)\n    //     } else {\n    //         const textResult = await response.text()\n    //         throw new Error('Non-JSON response' + textResult)\n    //     }\n    // }\n\n    async getNotifications({ count }: { count: number }): Promise<GetNotificationsResult> {\n        const options = new Map<string, string>()\n        options.set('n', String(count))\n        return await this.get<GetNotificationsResult>(['notifications'], options)\n        // return notifications as GetNotificationsResult\n    }\n\n    async seeNotifications(param: SeeNotificationsParam): Promise<SeeNotificationsResult> {\n        return this.postWithResult<SeeNotificationsResult>(['notifications', 'see'], param)\n    }\n}\n\nexport interface SeeNotificationsParam {\n    note_ids: Array<string>\n}\n\nexport interface SeeNotificationsResult {\n    seen_notes: Array<string>,\n    unauthorized_notes: Array<string>\n}\n\nexport default FeedsClient","import * as feedsApi from '../apis/feeds'\nimport * as userModel from './user'\nimport * as orgModel from './organization/model'\nimport * as requestModel from './requests'\nimport { acceptJoinRequest } from '../../redux/actions/manageOrganizationRequests';\nimport { sendRequest } from '../../redux/actions/requestAddNarrative';\n\nexport type NotificationID = string\n\nexport enum Level {\n    ALERT = 0,\n    ERROR,\n    WARNING,\n    REQUEST\n}\n\nexport interface Context { }\n\nexport interface Entity {\n    id: string\n    name: string\n    type: string\n}\nexport interface Notification {\n    id: NotificationID\n    actor: Entity\n    verb: string\n    object: Entity\n    target: Array<Entity>\n    source: string\n    level: Level\n    seen: boolean\n    createdAt: Date\n    expiresAt: Date\n    externalKey?: string\n    context?: Context\n}\n\nexport enum OrganizationNotificationType {\n    UNKNOWN = 0,\n    JOIN_REQUEST,\n    JOIN_INVITATION,\n    USER_JOINED,\n    USER_ACCEPTED,\n    NARRATIVE_ASSOCIATION_REQUEST,\n    NARRATIVE_ASSOCIATED,\n    NARRATIVE_ACCEPTED, // what is the difference from associated?\n    APP_ASSOCIATION_REQUEST,\n    APP_ASSOCIATED,\n    MESSAGE\n}\n\nexport interface OrganizationNotification {\n    id: NotificationID\n    from: userModel.Username\n    createdAt: Date\n    expiresAt: Date\n    level: Level\n    organizationId: orgModel.OrganizationID\n    type: OrganizationNotificationType\n    read: boolean\n    regarding: Array<Entity>\n}\n\nfunction convertLevel(level: string) {\n    switch (level) {\n        case 'alert':\n            return Level.ALERT\n        case 'error':\n            return Level.ERROR\n        case 'warning':\n            return Level.WARNING\n        case 'request':\n            return Level.REQUEST\n        default:\n            throw new Error('Invalid level value: ' + level)\n    }\n}\n\nfunction convertNotificationType(notification: feedsApi.Notification): OrganizationNotificationType {\n    // Grok\n    // if (!(notification.target && notification.context.resourcetype)) {\n    //     return OrganizationNotificationType.UNKNOWN\n    // }\n    const target = notification.target[0]\n    switch (notification.verb) {\n        case 'requested':\n            switch (target.type) {\n                case 'user':\n                    return OrganizationNotificationType.JOIN_REQUEST\n                case 'narrative':\n                case 'workspace':\n                    return OrganizationNotificationType.NARRATIVE_ASSOCIATION_REQUEST\n                case 'app':\n                    return OrganizationNotificationType.APP_ASSOCIATION_REQUEST\n            }\n        case 'updated':\n            switch (target.type) {\n                case 'narrative':\n                case 'workspace':\n                    return OrganizationNotificationType.NARRATIVE_ASSOCIATED\n            }\n        case 'accepted':\n            switch (target.type) {\n                case 'narrative':\n                case 'workspace':\n                    return OrganizationNotificationType.NARRATIVE_ACCEPTED\n                case 'user':\n                    // user request to join group has been accepted.\n                    return OrganizationNotificationType.USER_ACCEPTED\n            }\n        case 'invited':\n            switch (target.type) {\n                case 'user':\n                    return OrganizationNotificationType.JOIN_INVITATION\n            }\n        default:\n            console.warn('unknown', notification);\n            return OrganizationNotificationType.UNKNOWN\n    }\n\n    return OrganizationNotificationType.UNKNOWN\n}\n\nexport interface FeedsClientParams {\n    token: string\n    username: string\n    feedsServiceURL: string\n}\n\nexport class FeedsClient {\n    params: FeedsClientParams\n    feedsClient: feedsApi.FeedsClient\n    constructor(params: FeedsClientParams) {\n        this.params = params\n        this.feedsClient = new feedsApi.FeedsClient({\n            token: this.params.token,\n            url: this.params.feedsServiceURL\n        })\n    }\n\n    async getNotifications(): Promise<Array<Notification>> {\n        const notifications = await this.feedsClient.getNotifications({ count: 100 })\n\n        return notifications.user.feed.map((notification) => {\n            const { id, actor, verb, object, target, source, level, seen,\n                created, expires, external_key, context } = notification\n            return {\n                id, actor, verb, object, target, source,\n                level: convertLevel(level),\n                seen,\n                createdAt: new Date(created), expiresAt: new Date(expires),\n                externalKey: external_key, context\n            }\n        })\n    }\n\n    async getOrganizationNotifications(): Promise<Array<OrganizationNotification>> {\n        const notifications = await this.feedsClient.getNotifications({\n            count: 100\n        })\n\n        return notifications.user.feed\n            .filter(({ actor, source }) => {\n                return (\n                    source === 'groupsservice' &&\n                    actor.id !== this.params.username\n                )\n            })\n            .map((notification) => {\n                return {\n                    id: notification.id,\n                    from: notification.actor.id,\n                    createdAt: new Date(notification.created),\n                    expiresAt: new Date(notification.expires),\n                    level: convertLevel(notification.level),\n                    read: notification.seen,\n                    organizationId: notification.object.id,\n                    type: convertNotificationType(notification),\n                    regarding: notification.target\n                }\n            })\n    }\n\n    async seeNotification(notificationId: NotificationID): Promise<NotificationID> {\n        const { seen_notes, unauthorized_notes } = await this.feedsClient.seeNotifications({ note_ids: [notificationId] })\n        return seen_notes[0]\n\n    }\n}","import * as React from 'react'\n\nimport Avatar from './Avatar'\nimport { } from '../../types';\nimport { Icon, Tooltip } from 'antd';\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\n\nimport './Member.css'\nimport NiceElapsedTime from '../NiceElapsedTime';\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nexport interface MemberProps {\n    member: orgModel.Member\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface MemberState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nclass Member extends React.Component<MemberProps, MemberState> {\n    constructor(props: MemberProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderRole() {\n        switch (this.props.member.type) {\n            case orgModel.MemberType.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> owner\n                </span>\n                )\n            case orgModel.MemberType.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> admin\n                </span>\n                )\n            case orgModel.MemberType.MEMBER:\n                return (\n                    <span>\n                        <Icon type=\"user\" /> member\n                </span>\n                )\n        }\n    }\n\n    renderCompact() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-COMPACT\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    renderNormal() {\n        const userTooltip = (\n            <div>\n                {this.props.member.username}\n            </div>\n        )\n        return (\n            <div className=\"Member View-NORMAL\" >\n                <div className=\"Member-controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"Member-avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"Member-infoCol\">\n                    <div className=\"Member-name\">\n                        <Tooltip placement=\"bottomRight\" title={userTooltip}>\n                            <a href={\"/#people/\" + this.props.member.username} target=\"_blank\">{this.props.user.realname}</a>\n                        </Tooltip>\n                    </div>\n                    <div className=\"Member-role\">\n                        {this.renderRole()}\n                        {', joined '}\n                        <NiceElapsedTime time={this.props.member.joinedAt} />\n                    </div>\n                    <div className=\"Member-title\">\n                        {this.props.member.title || this.props.user.title}\n                    </div>\n                    <div className=\"Member-organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"Member-location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return this.renderCompact()\n\n            case View.NORMAL:\n                return this.renderNormal()\n        }\n    }\n}\n\nexport default Member","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport Member from './Member'\n\ninterface LoaderProps {\n    member: orgModel.Member\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <Member member={this.props.member} user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.member.username)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\nimport * as orgModel from '../../data/models/organization/model'\n\n\nexport interface OwnProps {\n    member: orgModel.Member\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.member.username)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { MemberType } from '../../../types'\nimport { Icon, Tooltip, Button, message, Menu, Dropdown } from 'antd'\nimport { Redirect } from 'react-router-dom'\n\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests'\nimport * as userModel from '../../../data/models/user'\n\nimport './component.css'\nimport OrgLogo from '../../OrgLogo';\nimport Owner from '../../entities/OwnerContainer';\n\nexport interface OrganizationHeaderProps {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    currentUsername: userModel.Username\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n    onJoinOrg: () => void\n}\n\ninterface OrganizationHeaderState {\n    navigateTo: NavigateTo\n}\n\nenum NavigateTo {\n    NONE = 0,\n    MANAGE_MEMBERSHIP,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    EDIT_ORGANIZATION,\n    INVITE_USER\n}\n\nexport class OrganizationHeader extends React.Component<OrganizationHeaderProps, OrganizationHeaderState> {\n\n    relation: orgModel.UserOrgRelation\n\n    constructor(props: OrganizationHeaderProps) {\n        super(props)\n\n        this.state = {\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.relation = this.getUserRelation()\n    }\n\n    getUserRelation(): orgModel.UserOrgRelation {\n        const currentUsername = this.props.currentUsername\n        const org = this.props.organization\n        if (currentUsername === org.owner.username) {\n            return {\n                type: orgModel.UserRelationToOrganization.OWNER\n            } as orgModel.OwnerRelation\n        } else {\n            const member = org.members.find(({ username }) => {\n                return (username === currentUsername)\n            })\n            if (member) {\n                switch (member.type) {\n                    case MemberType.MEMBER:\n                        return {\n                            type: orgModel.UserRelationToOrganization.MEMBER\n                        } as orgModel.MemberRelation\n                    case MemberType.ADMIN:\n                        return {\n                            type: orgModel.UserRelationToOrganization.ADMIN\n                        } as orgModel.AdminRelation\n                    case MemberType.OWNER:\n                        return {\n                            type: orgModel.UserRelationToOrganization.OWNER\n                        } as orgModel.OwnerRelation\n                    default:\n                        return {\n                            type: orgModel.UserRelationToOrganization.NONE\n                        } as orgModel.NoRelation\n                }\n            } else if (this.props.pendingJoinRequest && this.props.pendingJoinRequest.user === currentUsername) {\n                return {\n                    type: orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING,\n                    requestId: this.props.pendingJoinRequest.id\n                } as orgModel.MembershipRequestPendingRelation\n            } else if (this.props.pendingJoinInvitation && this.props.pendingJoinInvitation.user === currentUsername) {\n                return {\n                    type: orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING,\n                    requestId: this.props.pendingJoinInvitation.id\n                } as orgModel.MembershipInvitationPendingRelation\n            } else {\n                return {\n                    type: orgModel.UserRelationToOrganization.VIEW\n                } as orgModel.ViewRelation\n            }\n        }\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n        message.success('Join request has been submitted')\n    }\n\n    // LEFT OFF HERE... \n    // OK ... the relation should actually capture more info ... such as the request id\n    // but in reality don't we always have just one of request or invitation (or none)?\n    // in which case, we can just pick the appropriate one.\n    // but ... it also makes sense for the relation to carry information appropriate for the\n    // relation.\n\n    onCancelJoinRequest() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n        message.success('Submitted cancellation request')\n    }\n\n    onAcceptInvitation() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n        message.success('Invitation acceptance has been sent')\n    }\n\n    onRejectInvitation() {\n        const relation = this.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n        message.success('Invitation rejection has been sent')\n    }\n\n    onNavigateToMembership() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n    }\n\n    onNavigateToViewMembers() {\n        this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n    }\n\n    onNavigateToManageRequests() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n    }\n\n    onNavigateToEditOrganization() {\n        this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n    }\n\n    onNavigateToInviteUser() {\n        this.setState({ navigateTo: NavigateTo.INVITE_USER })\n    }\n\n    onNavigateToViewOrganization() {\n        this.setState({ navigateTo: NavigateTo.VIEW_ORGANIZATION })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ navigateTo: NavigateTo.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n        }\n    }\n\n\n    renderLogo(org: orgModel.Organization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={80} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    renderRelation() {\n        const org = this.props.organization\n        switch (this.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <div>\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title=\"You are not a member of this org, but you may access it, you may request membership\"\n                        >\n                            <div style={{ textAlign: 'center' }}>\n                                <Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization\n                            </div>\n                        </Tooltip>\n                        <div style={{ textAlign: 'center' }}>\n                            <Button\n                                type=\"primary\"\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </div>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title=\"You have requested membership in this Organization\"\n                        >   <div style={{ textAlign: 'center' }}>\n                                <span>\n                                    <Icon type=\"user\" style={{ color: 'orange' }} spin={true} />\n                                    Your membership <b>request</b> is pending\n                                {' '}\n                                    <Icon type=\"question-circle\" />\n                                </span>\n                            </div>\n                        </Tooltip>\n                        <div style={{ textAlign: 'center' }}>\n                            <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You have been invited to join this Organization\"\n                    >\n                        <div style={{ textAlign: 'center' }}>\n                            <div>\n                                <Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization\n                            </div>\n                            <div>\n                                <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                                <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                            </div>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            Manage My Membership\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You are a member of this organization\"\n                            >\n                                <div><Icon type=\"user\" />You are a <b>member</b> of this Organization</div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={menu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            Invite User\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You are an Administrator for this organization\"\n                            >\n                                <div><Icon type=\"unlock\" />You are a <b>administrator</b> of this Organization</div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={adminMenu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"editOrg\">\n                            Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            Invite User\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <div className=\"relationRow\">\n                        <div className=\"relationLabel\">\n                            <Tooltip\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.5}\n                                title=\"You own this organization\"\n                            >\n                                <div>\n                                    <Icon type=\"crown\" style={{ color: 'gold' }} />\n                                    {' '}\n                                    You <b>own</b> this Organization\n                                    </div>\n                            </Tooltip>\n                        </div>\n                        <div className=\"relationMenu\">\n                            <div>\n                                <Dropdown overlay={ownerMenu} trigger={['click']}>\n                                    <Button shape=\"circle\">\n                                        <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                                    </Button>\n                                </Dropdown>\n                            </div>\n                        </div>\n                    </div>\n                )\n        }\n    }\n\n    renderHomeUrl(org: orgModel.Organization) {\n        if (!org.homeUrl) {\n            return\n        }\n        return (\n            <div className=\"homeUrl\">\n                <a href={org.homeUrl} target=\"_blank\">\n                    <Icon type=\"home\" />\n                    {' '}\n                    {org.homeUrl}\n                </a>\n            </div>\n        )\n    }\n\n    renderOrgInfo() {\n        const org = this.props.organization\n        return (\n            <React.Fragment>\n                <div className=\"name\">\n                    {org.name}\n                </div>\n                <div>\n                    <div style={{ display: 'inline-block', width: '50%', verticalAlign: 'top' }}>\n                        <div>\n                            {this.renderHomeUrl(org)}\n                        </div>\n                        <div className=\"owner\">\n                            <Owner username={org.owner.username} avatarSize={20} showAvatar={true} />\n                        </div>\n                    </div>\n                    <div style={{ display: 'inline-block', width: '50%', verticalAlign: 'top' }}>\n                        <div>\n                            <span className=\"field-label\">established</span>\n                            <span className=\"field-value\">{Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(org.createdAt)}</span>\n                        </div>\n                        <div>\n                            <span className=\"field-label\">last modified</span>\n                            <span className=\"field-value\">{Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(org.modifiedAt)}</span>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    getRelationClass(org: orgModel.Organization) {\n        switch (this.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'relationRequest'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'relationRequest relationNonMember'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'relationRequest relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'relationRequest relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'relationRequest relationMember'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'relationRequest relationAdmin'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'relationRequest relationOwner'\n        }\n    }\n\n    render() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        switch (this.state.navigateTo) {\n            case NavigateTo.MANAGE_MEMBERSHIP:\n                return <Redirect push to={\"/membership/\" + this.props.organization.id} />\n            case NavigateTo.VIEW_MEMBERS:\n                return <Redirect push to={\"/viewMembers/\" + this.props.organization.id} />\n            case NavigateTo.EDIT_ORGANIZATION:\n                return <Redirect push to={\"/editOrganization/\" + this.props.organization.id} />\n            case NavigateTo.MANAGE_REQUESTS:\n                return <Redirect push to={\"/manageOrganizationRequests/\" + this.props.organization.id} />\n            case NavigateTo.INVITE_USER:\n                return <Redirect push to={\"/inviteUser/\" + this.props.organization.id} />\n            case NavigateTo.VIEW_ORGANIZATION:\n                return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n            default:\n            // nothing, fall through\n        }\n\n        return (\n            <div className=\"OrganizationHeader\">\n                <div className=\"avatar\">\n                    {this.renderLogo(this.props.organization)}\n                </div>\n                <div className=\"orgInfo\">\n                    {this.renderOrgInfo()}\n                </div>\n                <div className={\"yourRelation \" + this.getRelationClass(this.props.organization)}>\n                    {this.renderRelation()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default OrganizationHeader","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\n// we steal the view org actions...\nimport * as actions from '../../../redux/actions/viewOrg'\n\nimport Component from './component'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as requestModel from '../../../data/models/requests'\nimport * as userModel from '../../../data/models/user'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.Organization\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    currentUsername: userModel.Username\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            organizationCentricView: { viewModel }\n        },\n        auth: { authorization: { username } }\n    } = state\n\n    if (!viewModel) {\n        throw new Error('View model is unexpectedly missing')\n    }\n\n    return {\n        organization: viewModel.organization,\n        pendingJoinRequest: viewModel.pendingJoinRequest,\n        pendingJoinInvitation: viewModel.pendingJoinInvitation,\n        currentUsername: username\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as requestModel from '../../data/models/requests'\nimport * as userModel from '../../data/models/user'\nimport { AppError, StoreState } from '../../types';\n\nexport interface OrganizationCentricAction<T> extends Action<T> {\n\n}\n\nexport interface Load extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD\n}\n\nexport interface LoadStart extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    pendingJoinRequest: requestModel.UserRequest | null\n    pendingJoinInvitation: requestModel.UserInvitation | null\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends OrganizationCentricAction<ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD> {\n    type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_START\n    }\n}\n\nexport function loadSuccess({\n    organization,\n    pendingJoinRequest,\n    pendingJoinInvitation,\n    relation\n}: {\n    organization: orgModel.Organization,\n    pendingJoinRequest: requestModel.UserRequest | null,\n    pendingJoinInvitation: requestModel.UserInvitation | null,\n    relation: orgModel.Relation\n}\n): LoadSuccess {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_SUCCESS,\n        organization, pendingJoinRequest, pendingJoinInvitation, relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.ORGANIZATION_CENTRIC_VIEW_UNLOAD\n    }\n}\n\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, ValidityState, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n\n        try {\n            // get org\n            const organization = await orgClient.getOrg(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                }))\n                return\n            }\n\n            // get pending requests\n            const request = await requestClient.getUserRequestForOrg(organizationId)\n            const invitation = await requestClient.getUserInvitationForOrg(organizationId)\n\n            const relation = orgModel.determineRelation(organization, username, request, invitation)\n\n            // current username is already here.\n            dispatch(loadSuccess({\n                organization, relation,\n                pendingJoinRequest: request,\n                pendingJoinInvitation: invitation\n            }))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}","import * as React from 'react'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: types.OrganizationCentricView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading header...\n            </div>\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/organizationCentric'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.OrganizationCentricView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.organizationCentricView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './UserSimple.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Tooltip } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\ninterface UserState {\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        const tooltip = (\n            <div>\n                <div>\n                    {this.props.user.realname}\n                </div>\n                <div>\n                    <span><Avatar user={this.props.user} size={20} /></span>\n                    {' '}\n                    <span>{this.props.user.username}</span>\n                </div>\n            </div>\n        )\n        return (\n            <div className=\"UserSimple\">\n                <Tooltip title={tooltip} placement=\"bottomRight\">\n                    <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                </Tooltip>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport UserSimple from './UserSimple'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <UserSimple user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport { Tooltip, Icon } from 'antd'\nimport UserSimple from '../UserSimpleContainer'\nimport { niceElapsed } from '../../../lib/time'\nimport './component.css'\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    // renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n    //     let label\n    //     switch (narrative.access) {\n    //         case narrativeModel.NarrativeAccess.VIEW:\n    //             label = (\n    //                 <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.EDIT:\n    //             label = (\n    //                 <span>Edit (<i>visit narrative to request additional access</i>)</span>\n    //             )\n    //             break\n    //         case narrativeModel.NarrativeAccess.ADMIN:\n    //             label = 'Admin'\n    //             break\n    //         case narrativeModel.NarrativeAccess.OWNER:\n    //             label = 'Owner'\n    //             break\n    //         default:\n    //             label = 'Unknown'\n    //     }\n    //     return (\n    //         <span>\n    //             {label}\n    //         </span>\n    //     )\n    // }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                iconType = 'eye'\n                tooltip = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                iconType = 'edit'\n                tooltip = (\n                    <span>This narrative is shared with you with <b>edit</b> access (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                iconType = 'unlock'\n                tooltip = (\n                    <span>\n                        This narrative is shared with you with <b>access</b> - you may edit and re-share this\n                    </span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                iconType = 'crown'\n                tooltip = (\n                    <span>\n                        You are the owner of this Narrative\n                    </span>\n                )\n                break\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderGlobalPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let iconType\n        let tooltip\n        if (narrative.isPublic) {\n            iconType = 'global'\n            tooltip = 'This narrative has been shared publicly - with all KBase users'\n        } else {\n            iconType = 'lock'\n            tooltip = 'This narrative is private - only accessible to the owner any users it has been shared with'\n        }\n        return (\n            <Tooltip\n                placement=\"bottomRight\"\n                title={tooltip}>\n                <Icon type={iconType} />\n            </Tooltip>\n        )\n    }\n\n    renderNiceElapsed(d: Date) {\n        const tooltip = (\n            <span>\n                {\n                    Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                    }).format(d)\n                }\n            </span>\n        )\n        return (\n            <Tooltip placement=\"bottomRight\" title={tooltip}>\n                {niceElapsed(d)}\n            </Tooltip>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">updated</span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} />\n                    </div>\n\n                    {/* TODO: left off here; need to add in the added date\n                        <div>\n                        <span className=\"field-label\">added</span>\n                        {this.renderNiceElapsed(this.props.)}\n                    </div> */}\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                {/* <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div> */}\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    {/* <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div> */}\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <div style={{ display: 'inline-block' }}><UserSimple avatarSize={20} userId={narrative.owner} /></div>\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>\n                        {this.renderNiceElapsed(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>\n                        <UserSimple avatarSize={20} userId={narrative.lastSavedBy} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarrative(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"mainCol\">\n                    <div>\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {', '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            {this.renderUserPermission(narrative)}\n                        </div>\n                        <div className=\"Narrative-global\">\n                            {this.renderGlobalPermission(narrative)}\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        // switch (this.state.view) {\n        //     case View.COMPACT:\n        //         return (\n        //             <div className=\"Narrative View-COMPACT\">\n        //                 {this.renderCompact(narrative)}\n        //             </div>\n        //         )\n        //     case View.NORMAL:\n        //         return (\n        //             <div className=\"Narrative View-NORMAL\">\n        //                 {this.renderNormal(narrative)}\n        //             </div>\n        //         )\n        // }\n        return this.renderNarrative(narrative)\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport Narrative from './component'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\nimport * as orgModel from '../data/models/organization/model'\nimport { Button, Tooltip, Icon, Drawer } from 'antd'\nimport Narrative from './entities/narrative/reduxAdapter'\nimport NiceElapsedTime from './NiceElapsedTime'\nimport './OrganizationNarrative.css'\n\nexport interface Props {\n    organization: orgModel.Organization\n    narrative: orgModel.NarrativeResource\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n}\n\ninterface State {\n    requestAccess: boolean\n}\n\nexport default class OrganizationNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            requestAccess: false\n        }\n    }\n\n    onGetViewAccess() {\n        this.props.onGetViewAccess(this.props.narrative)\n    }\n\n    onRequestAccess() {\n        this.setState({ requestAccess: true })\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: false })\n    }\n\n    renderNarrativePermission(narrative: orgModel.NarrativeResource) {\n        let label\n        let shareButton\n        let permissionTooltip\n        let buttonTooltip\n        switch (narrative.permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                if (narrative.isPublic) {\n                    permissionTooltip = \"You have View access to this narrative narrative because it is shared publicly; you may view it, but not edit, run, or share it\"\n                    label = (\n                        <span>\n                            View Only (public)\n                        </span>\n                    )\n                    buttonTooltip = 'Although you have View-Only access to this Narrative due to it being shared globally, you may obtain personal View-Only access by clicking this button'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                } else {\n                    permissionTooltip = \"You have No access to this narrative narrative; you may not view, edit, run, or share it\"\n                    label = (\n                        <span>\n                            No Access\n                        </span>\n                    )\n                    buttonTooltip = 'You cannot access this Narrative; in order to immediately obtain View-Only access click this button.'\n                    shareButton = (\n                        <Button size=\"small\" onClick={() => { this.onGetViewAccess.call(this) }}>\n                            Click for View Access\n                        </Button>\n                    )\n                }\n                break\n            case orgModel.UserWorkspacePermission.VIEW:\n                permissionTooltip = \"You have View access to this narrative narrative; you may view it, but not edit, run, or share it\"\n                label = (\n                    <span>\n                        View Only\n                    </span>\n                )\n                buttonTooltip = 'You already have View-Only access to this Narrative, but may request additional access'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Additional Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.EDIT:\n                permissionTooltip = \"You have Edit access to this Narrative; you may view, edit, and run, but not share it\"\n                label = (\n                    <span>\n                        Edit\n                    </span>\n                )\n                buttonTooltip = 'You already have Edit access to this Narrative, but may request additional access by clicking this button'\n                shareButton = (\n                    <Button size=\"small\" onClick={() => { this.onRequestAccess.call(this) }}>\n                        Request Admin Access\n                    </Button>\n                )\n                break\n            case orgModel.UserWorkspacePermission.ADMIN:\n                permissionTooltip = \"You have Admin access to this narrative narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Admin\n                    </span>\n                )\n                break\n            case orgModel.UserWorkspacePermission.OWNER:\n                permissionTooltip = \"You are the Owner of this narrative; you may view, edit, run, and share it\"\n                label = (\n                    <span>\n                        Owner\n                    </span>\n                )\n                break\n            default:\n                label = (\n                    <span>\n                        Unknown\n                    </span>\n                )\n        }\n\n        return (\n            <React.Fragment>\n                <Tooltip title={permissionTooltip} placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <span className=\"field-label\">your permission</span>\n                        {label}\n                    </span>\n                </Tooltip>\n                {' '}\n                <Tooltip title={buttonTooltip} placement=\"right\">\n                    {shareButton}\n                </Tooltip>\n            </React.Fragment>\n        )\n    }\n\n    renderPublicPermission(narrative: orgModel.NarrativeResource) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderNarrative() {\n        const narrative = this.props.narrative\n        if (this.props.organization.isMember) {\n            if (narrative.permission === orgModel.UserWorkspacePermission.NONE) {\n                return (\n                    <React.Fragment>\n                        <a href={'/narrative/' + narrative.workspaceId} target=\"_blank\">\n                            <div className=\"title\">{narrative.title}</div>\n                        </a>\n                        {/* <div>{this.renderPublicPermission(narrative)}</div> */}\n                        <div>{this.renderNarrativePermission(narrative)}</div>\n                    </React.Fragment>\n                )\n            }\n            return (\n                <Narrative workspaceId={narrative.workspaceId} />\n            )\n        }\n        return (\n            <a href={'/narrative/' + narrative.workspaceId} target=\"_blank\">\n                <div className=\"title\">{narrative.title}</div>\n            </a>\n        )\n    }\n\n    renderResource() {\n        return (\n            <div>\n                <div>\n                    <span className=\"field-label\">added</span>\n                    <span>\n                        <NiceElapsedTime time={this.props.narrative.createdAt} />\n                    </span>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let accessModal\n        if (this.state.requestAccess) {\n            // TODO: replace with our own implementation...n\n            accessModal = (\n                <Drawer title=\"Request Access to Narrative\"\n                    placement=\"right\"\n                    closable={true}\n                    visible={true}\n                    onClose={() => { this.onCloseRequestAccess.call(this) }}\n                >\n                    Requesting access...\n                </Drawer>\n            )\n        }\n\n        return (\n            <div className=\"OrganizationNarrative\">\n                <div className=\"OrganizationNarrative-narrativeCol\">\n                    {this.renderNarrative()}\n                </div>\n                {/* <div className=\"OrganizationNarrative-resourceCol\">\n                    {this.renderResource()}\n                </div> */}\n                {accessModal}\n            </div>\n        )\n    }\n}","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\n\nimport { AppError, StoreState, ViewOrgViewModelKind } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as uberModel from '../../../data/models/uber'\nimport { AnError, makeError } from '../../../lib/error'\nimport { reload as reloadOrg } from '../viewOrg'\n\n// LOADING\n\nexport interface Load extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR\n    error: AppError\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_SUCCESS,\n        organization: organization,\n        relation: relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n\n        const uberClient = new uberModel.UberModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            userProfileServiceURL: config.services.UserProfile.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const { organization, relation } = await uberClient.getOrganizationForUser(organizationId)\n            if (organization.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                }))\n                return\n            }\n            dispatch(loadSuccess(organization, relation))\n\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Promoting member to admin\n\nexport interface PromoteToAdmin extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n}\n\nexport interface PromoteToAdminSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n    memberUsername: string\n}\n\nexport interface PromoteToAdminError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n    error: AppError\n}\n\n\nexport function promoteToAdminStart(): PromoteToAdminStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_START\n    }\n}\n\nexport function promoteToAdminSuccess(memberUsername: string): PromoteToAdminSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_SUCCESS,\n        memberUsername\n    }\n}\n\nexport function promoteToAdminError(error: AppError): PromoteToAdminError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_PROMOTE_TO_ADMIN_ERROR,\n        error: error\n    }\n}\n\nexport function promoteToAdmin(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(promoteToAdminStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.memberToAdmin(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(promoteToAdminSuccess(memberUsername))\n            })\n            .catch((err: Error) => {\n                dispatch(promoteToAdminError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Demote admin to member\n\nexport interface DemoteToMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n}\n\nexport interface DemoteToMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n    memberUsername: string\n}\n\nexport interface DemoteToMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n    error: AppError\n}\n\n\nexport function demoteToMemberStart(): DemoteToMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_START\n    }\n}\n\nexport function demoteToMemberSuccess(memberUsername: string): DemoteToMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_SUCCESS,\n        memberUsername: memberUsername\n    }\n}\n\nexport function demoteToMemberError(error: AppError): DemoteToMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_DEMOTE_TO_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function demoteToMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(demoteToMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.adminToMember(viewModel.organization.id, memberUsername)\n            .then((org) => {\n                dispatch(demoteToMemberSuccess(memberUsername))\n                // dispatch(viewMembersLoad(view.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(demoteToMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Remove a member\n\nexport interface RemoveMember extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER,\n    memberUsername: string\n}\n\ninterface RemoveMemberStart extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n}\n\nexport interface RemoveMemberSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n    memberUsername: orgModel.Username\n}\n\ninterface RemoveMemberError extends Action {\n    type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n    error: AppError\n}\n\nfunction removeMemberStart(): RemoveMemberStart {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_START\n    }\n}\n\nfunction removeMemberSuccess(memberUsername: orgModel.Username): RemoveMemberSuccess {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_SUCCESS,\n        memberUsername\n    }\n}\n\nfunction removeMemberError(error: AppError): RemoveMemberError {\n    return {\n        type: ActionFlag.VIEW_ORG_VIEW_MEMBERS_REMOVE_MEMBER_ERROR,\n        error: error\n    }\n}\n\nexport function removeMember(memberUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(removeMemberStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        orgClient.removeMember(viewModel.organization.id, memberUsername)\n            .then(() => {\n                // dispatch(removeMemberSuccess(memberUsername))\n                // dispatch(load(viewModel.organization.id))\n                dispatch(reloadOrg(viewModel.organization.id))\n            })\n            .catch((err: Error) => {\n                dispatch(removeMemberError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// SORT MEMBERS\n\nexport interface SortMembers {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS,\n    sortBy: string\n}\n\nexport interface SortMembersStart {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n}\n\nexport interface SortMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    sortBy: string\n}\n\nexport interface SortMembersError {\n    type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR\n    error: AnError\n}\n\n\n\nexport function sortMembers(sortBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const searchBy = viewModel.searchMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_SUCCESS,\n            members: sorted,\n            sortBy\n        })\n\n    }\n}\n\n// SEARCH MEMBERS\n\nexport interface SearchMembers {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS,\n    searchBy: string\n}\n\nexport interface SearchtMembersStart {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_START\n}\n\nexport interface SearchMembersSuccess {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS\n    members: Array<orgModel.Member>\n    searchBy: string\n}\n\nexport interface SearchMembersError {\n    type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_ERROR\n    error: AnError\n}\n\nexport function searchMembers(searchBy: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SORT_MEMBERS_START\n        })\n\n        const state = getState()\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (!viewModel) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'No view model'\n                })\n            })\n            return\n        }\n\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_SORT_MEMBERS_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'Wrong org view model kind!'\n                })\n            })\n            return\n        }\n\n        const { members } = viewModel.organization as orgModel.Organization\n        const sortBy = viewModel.sortMembersBy\n\n        const sorted = orgModel.queryMembers(members, {\n            sortBy: sortBy,\n            searchBy: searchBy\n        })\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_SEARCH_MEMBERS_SUCCESS,\n            searchBy: searchBy,\n            members: sorted\n        })\n\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Alert, Card, Menu, Icon, Dropdown, Modal, Input, Select } from 'antd'\nimport Member from '../../../../entities/MemberContainer'\nimport './component.css'\nimport { organizationLoader } from '../../../../../redux/actions/entities';\n\nexport interface MembersProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n    onPromoteMemberToAdmin: (username: string) => void\n    onRemoveMember: (username: string) => void\n    onDemoteAdminToMember: (username: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n    onReloadOrg: (id: string) => void\n}\n\ninterface MembersState {\n    confirmMemberRemoval: {\n        member: orgModel.Member\n    } | null\n}\n\nexport default class Members extends React.Component<MembersProps, MembersState> {\n    constructor(props: MembersProps) {\n        super(props)\n        this.state = {\n            confirmMemberRemoval: null\n        }\n    }\n\n    onConfirmRemoveMember(member: orgModel.Member) {\n        console.log('confirming?', member)\n        this.setState({\n            confirmMemberRemoval: {\n                member: member\n            }\n        })\n    }\n\n    renderConfirmMemberRemoval() {\n        if (!this.state.confirmMemberRemoval) {\n            return\n        }\n        const member = this.state.confirmMemberRemoval.member\n        const confirmed = (() => {\n            this.props.onRemoveMember(member.username)\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const canceled = (() => {\n            this.setState({\n                confirmMemberRemoval: null\n            })\n        })\n        const title = 'Confirm Removal of Member'\n        const content = (\n            <React.Fragment>\n                <p>\n                    Please confirm removal of this member from this organization.\n                </p>\n                <div className=\"simpleCard\" style={{ marginBottom: '1em' }}>\n                    <Member member={member} avatarSize={20} />\n                </div>\n                <p>\n                    This user as well as members of this organization will receive a notification\n                    of the removal.\n                </p>\n                <p>\n                    Any Narratives associated by this member with this Organization will be unaffected. This member\n                    will also retain any Narrative permissions granted through this Organization.\n                </p>\n            </React.Fragment>\n        )\n        return (\n            <Modal\n                title={title}\n                width=\"50em\"\n                visible={true}\n                onOk={() => { confirmed() }}\n                onCancel={() => { canceled() }}\n                okText=\"Confirm\">\n                {content}\n            </Modal>\n        )\n    }\n\n    onMemberMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'promoteToAdmin':\n                this.props.onPromoteMemberToAdmin(member.username)\n                break\n            case 'removeMember':\n                this.onConfirmRemoveMember(member)\n                break\n        }\n    }\n\n    onAdminMenu(key: string, member: orgModel.Member) {\n        switch (key) {\n            case 'demoteToMember':\n                this.props.onDemoteAdminToMember(member.username)\n                break\n        }\n    }\n\n    renderMemberMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onMemberMenu.call(this, key, member) }}>\n                <Menu.Item key=\"promoteToAdmin\" >\n                    <Icon type=\"unlock\" />Promote to Admin\n                </Menu.Item>\n                <Menu.Item key=\"removeMember\" >\n                    <Icon type=\"delete\" />Remove Member\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderAdminMenu(member: orgModel.Member) {\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, member) }}>\n                <Menu.Item key=\"demoteToMember\">\n                    <Icon type=\"user\" />Demote to Member\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderOwnerMenu(member: orgModel.Member) {\n        return (\n            <div></div>\n        )\n    }\n\n    renderMemberOptions(member: orgModel.Member) {\n        if (!(this.props.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN)) {\n            return\n        }\n\n        switch (member.type) {\n            case orgModel.MemberType.OWNER:\n                return this.renderOwnerMenu(member)\n            case orgModel.MemberType.ADMIN:\n                return this.renderAdminMenu(member)\n            case orgModel.MemberType.MEMBER:\n                return this.renderMemberMenu(member)\n        }\n    }\n\n    renderMembers() {\n        let members: JSX.Element | Array<JSX.Element>\n        const message = (\n            <div style={{ fontStyle: 'italic', textAlign: 'center' }}>\n                No members.\n            </div>\n        )\n\n        if (this.props.members.length === 0) {\n            members = (\n                <Alert type=\"info\" message={message} />\n            )\n        } else {\n            members = this.props.members.map((member) => {\n                let isNew: boolean\n                if (this.props.organization.lastVisitedAt === null) {\n                    isNew = false\n                } else {\n                    isNew = this.props.organization.lastVisitedAt.getTime() < member.joinedAt.getTime()\n                }\n                const classNames = ['Members-row', 'simpleCard']\n                if (isNew) {\n                    classNames.push('Members-newMember')\n                }\n                return (\n                    <div className={classNames.join(' ')} key={member.username}>\n                        <div className=\"Members-member\">\n                            <Member member={member} avatarSize={50} />\n                        </div>\n                        <div className=\"Members-menu\">\n                            {this.renderMemberOptions(member)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        return (\n            <div className=\"infoTable\">\n                {members}\n            </div>\n        )\n    }\n\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchMembers(e.target.value)\n            // console.log('sorting by', e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter members by name\"\n                    onChange={doChange} />\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortMembers(value)\n            // console.log('filtering by ', value)\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortMembersBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Joined</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderHeader() {\n        return (\n            <div className=\"ViewOrganizationMembers-headerRow\">\n                <div className=\"ViewOrganizationMembers-searchCol\">\n                    {this.renderSearchBar()}\n                </div>\n                <div className=\"ViewOrganizationMembers-sortCol\">\n                    {this.renderSortBar()}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let confirm\n        if (this.state.confirmMemberRemoval) {\n            confirm = this.renderConfirmMemberRemoval()\n        }\n        return (\n            <React.Fragment>\n                <div className=\"ViewOrganizationMembers scrollable-flex-column\">\n                    <div className=\"ViewOrganizationMembers-header\">\n                        {this.renderHeader()}\n                    </div>\n                    <div className=\"ViewOrganizationMembers-body scrollable-flex-column\">\n                        {this.renderMembers()}\n                    </div>\n                </div>\n                {confirm}\n            </React.Fragment>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/viewMembers'\nimport ViewMembers from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    onReloadOrg: (id: string) => void\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onViewMembersUnload: () => void,\n    onPromoteMemberToAdmin: (memberUsername: string) => void,\n    onDemoteAdminToMember: (adminUsername: string) => void,\n    onRemoveMember: (memberUsername: string) => void\n    onSearchMembers: (searchBy: string) => void\n    onSortMembers: (sortBy: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewMembersUnload: () => {\n            dispatch(actions.unload() as any)\n        },\n        onPromoteMemberToAdmin: (memberUsername: string) => {\n            dispatch(actions.promoteToAdmin(memberUsername) as any)\n        },\n        onDemoteAdminToMember: (adminUsername: string) => {\n            dispatch(actions.demoteToMember(adminUsername) as any)\n        },\n        onRemoveMember: (memberUsername: string) => {\n            dispatch(actions.removeMember(memberUsername) as any)\n        },\n        onSearchMembers: (searchBy: string) => {\n            dispatch(actions.searchMembers(searchBy) as any)\n        },\n        onSortMembers: (sortBy: string) => {\n            dispatch(actions.sortMembers(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewMembers)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\n\n// Reject inbound request\n\nexport interface RejectRequestAction<T> extends Action<T> {\n}\n\nexport interface RejectInboxRequest extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST\n    request: requestModel.Request\n}\n\ninterface RejectInboxRequestStart extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n}\n\nexport interface RejectInboxRequestSuccess extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\ninterface RejectInboxRequestError extends RejectRequestAction<ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR> {\n    type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n    error: AppError\n}\n\nexport function denyRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, RejectRequestAction<any>>, getState: () => StoreState) => {\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        // do the cancelation\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.denyRequest(requestId)\n\n            // refetch the outbox\n            const inbox = await requestClient.getRequestInboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_SUCCESS,\n                requests: inbox\n            } as RejectInboxRequestSuccess)\n\n            // send the inbox in the success\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_REJECT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n        // or error\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport {\n    StoreState,\n    AppError,\n    UIError,\n    UIErrorType,\n    ViewOrgViewModelKind\n} from '../../../types'\n\nimport * as requestModel from '../../../data/models/requests'\nimport { AnError, makeError } from '../../../lib/error';\n\nexport interface CancelJoinRequest extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST\n}\n\nexport interface CancelJoinRequestStart extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n}\n\nexport interface CancelJoinRequestSuccess extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS\n    requests: Array<requestModel.Request>\n}\n\nexport interface CancelJoinRequestError extends Action {\n    type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n    error: AnError\n}\n\nexport function cancelRequest(requestId: requestModel.RequestID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_START\n        })\n\n        const state = getState()\n\n        const viewModel = state.views.viewOrgView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'error',\n                    message: 'No view model'\n                }\n            })\n            return\n        }\n\n        // argh\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_ACCEPT_INBOX_REQUEST_ERROR,\n                error: {\n                    code: 'invalid state',\n                    message: 'Not the right kind of view model'\n                }\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await requestClient.cancelRequest(requestId)\n\n            const requests: Array<requestModel.Request> = await requestClient.getRequestOutboxForOrg(viewModel.organization.id)\n\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_SUCCESS,\n                requests\n            } as CancelJoinRequestSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_CANCEL_JOIN_REQUEST_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            } as CancelJoinRequestError)\n        }\n    }\n}","import * as React from 'react'\nimport './User.css'\nimport Avatar from './Avatar'\nimport * as userModel from '../../data/models/user'\nimport { Button, Icon } from 'antd';\n\nexport interface UserProps {\n    user: userModel.User\n    avatarSize?: number\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\ninterface UserState {\n    view: View\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\nfunction viewLabel(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return 'Compact'\n        case View.NORMAL:\n            return 'Normal'\n    }\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderCompact() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                    </div>\n                    <div>\n                        {this.props.user.username}\n                    </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"User View-COMPACT\">\n                        {this.renderCompact()}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"User View-NORMAL\">\n                        {this.renderNormal()}\n                    </div>\n                )\n        }\n    }\n}\n\nexport default User","import * as React from 'react'\nimport * as userModel from '../../data/models/user'\nimport User from './User'\n\ninterface LoaderProps {\n    userId: userModel.Username\n    user: userModel.User | undefined\n    avatarSize: number\n    onLoad: (userId: userModel.Username) => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.user) {\n            return (\n                <User user={this.props.user} avatarSize={this.props.avatarSize} />\n            )\n        } else {\n            return (\n                <div>\n                    Loading user...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.user) {\n            this.props.onLoad(this.props.userId)\n        }\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\nimport * as actions from '../../redux/actions/entities'\n\n\nexport interface OwnProps {\n    userId: userModel.Username\n    avatarSize: number\n}\n\ninterface StateProps {\n    user: userModel.User | undefined\n}\n\ninterface DispatchProps {\n    onLoad: (userId: userModel.Username) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        user: state.entities.users.byId.get(props.userId)\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (userId: userModel.Username) => {\n            dispatch(actions.userLoader(userId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport { Tooltip, Icon, Alert } from 'antd';\nimport './Narrative.css'\nimport UserSimple from './UserContainer';\n\nexport interface NarrativeProps {\n    narrative: narrativeModel.Narrative\n}\n\nenum View {\n    COMPACT = 0,\n    NORMAL\n}\n\nfunction reverseView(v: View) {\n    switch (v) {\n        case View.COMPACT:\n            return View.NORMAL\n        case View.NORMAL:\n            return View.COMPACT\n    }\n}\n\ninterface NarrativeState {\n    view: View\n}\n\nexport default class Narrative extends React.Component<NarrativeProps, NarrativeState> {\n    constructor(props: NarrativeProps) {\n        super(props)\n\n        this.state = {\n            view: View.COMPACT\n        }\n    }\n\n    onToggleView() {\n        this.setState({\n            view: reverseView(this.state.view)\n        })\n    }\n\n    renderPublicPermission(narrative: narrativeModel.AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <Tooltip title=\"This narrative is viewable by all KBase users\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"global\" /> Public Narrative\n                    </span>\n                </Tooltip>\n            )\n        } else {\n            return (\n                <Tooltip title=\"This narrative is only accessible to those with whom it is directly shared\" placement=\"right\">\n                    <span style={{ cursor: 'help' }}>\n                        <Icon type=\"lock\" /> Private Narrative\n                    </span>\n                </Tooltip>\n            )\n        }\n    }\n\n    renderUserPermission(narrative: narrativeModel.AccessibleNarrative) {\n        let label\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                label = (\n                    <span>View-Only (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.EDIT:\n                label = (\n                    <span>Edit (<i>visit narrative to request additional access</i>)</span>\n                )\n                break\n            case narrativeModel.NarrativeAccess.ADMIN:\n                label = 'Admin'\n                break\n            case narrativeModel.NarrativeAccess.OWNER:\n                label = 'Owner'\n                break\n            default:\n                label = 'Unknown'\n        }\n        return (\n            <span>\n                {label}\n            </span>\n        )\n    }\n\n    renderCompact(narrative: narrativeModel.AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"Narrative-title\">\n                        <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                            {narrative.title}\n                        </a>\n                    </div>\n                    {' '}\n                    <div className=\"Narrative-owner\">\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNormal(narrative: narrativeModel.AccessibleNarrative) {\n        // const narrative = this.props.narrative\n        return (\n            <React.Fragment>\n                <div className=\"controlCol\">\n                    <a onClick={this.onToggleView.bind(this)}\n                        className={`linkButton ${this.state.view === View.NORMAL ? \"pressed\" : \"\"}`}\n                    >\n                        <Icon type={`${this.state.view === View.NORMAL ? \"up\" : \"down\"}`} />\n                    </a>\n                </div>\n                <div className=\"iconCol\">\n                    <Icon type=\"file\" style={{ fontSize: '30px', width: '30px' }} />\n                </div>\n                <div className=\"mainCol\">\n                    <div className=\"mainCol\">\n                        <div className=\"Narrative-title\">\n                            <a href={\"/narrative/\" + narrative.workspaceId} target=\"_blank\">\n                                {narrative.title}\n                            </a>\n                        </div>\n                        {' '}\n                        <div className=\"Narrative-owner\">\n                            <UserSimple avatarSize={20} userId={narrative.owner} />\n                        </div>\n                    </div>\n                    <div className=\"Narrative-attributes\">\n                        <div className=\"Narrative-userPermission\">\n                            <Icon type=\"crown\" />\n                        </div>\n                        <div className=\"Narrative-global\">\n                            <Icon type=\"global\" />\n                        </div>\n                    </div>\n                    <div>\n                        {this.renderPublicPermission(narrative)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">your permission</span>\n                        {this.renderUserPermission(narrative)}\n                    </div>\n                    {/* <div>\n                        <span className=\"field-label\">owner</span>\n                        <UserSimple avatarSize={20} userId={narrative.owner} />\n                    </div> */}\n                    <div>\n                        <span className=\"field-label\">last saved</span>{Intl.DateTimeFormat('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                        }).format(narrative.lastSavedAt)}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">by</span>{narrative.lastSavedBy}\n                    </div>\n                </div>\n\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const narrative = this.props.narrative\n        if (narrative.access === narrativeModel.NarrativeAccess.NONE) {\n            return (\n                <div>\n                    <Icon type=\"exclamation-circle\" style={{ color: 'orange' }} />\n                    {' '}\n                    You don't have access to this Narrative\n                </div>\n            )\n        }\n        switch (this.state.view) {\n            case View.COMPACT:\n                return (\n                    <div className=\"Narrative View-COMPACT\">\n                        {this.renderCompact(narrative)}\n                    </div>\n                )\n            case View.NORMAL:\n                return (\n                    <div className=\"Narrative View-NORMAL\">\n                        {this.renderNormal(narrative)}\n                    </div>\n                )\n        }\n\n    }\n}","import * as React from 'react'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as orgModel from '../../data/models/organization/model'\nimport Narrative from './Narrative'\n\ninterface LoaderProps {\n    workspaceId: narrativeModel.WorkspaceID\n    narrative: narrativeModel.Narrative | null\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.narrative) {\n            return (\n                <Narrative\n                    narrative={this.props.narrative}\n                />\n            )\n        } else {\n            return (\n                <div>\n                    Loading narrative...\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.narrative) {\n            this.props.onLoad(this.props.workspaceId)\n        }\n    }\n}\n\n// redux wrapper\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types'\nimport * as actions from '../../redux/actions/entities'\n\nexport interface OwnProps {\n    workspaceId: narrativeModel.WorkspaceID\n}\n\ninterface StateProps {\n    narrative: narrativeModel.Narrative | null\n}\n\ninterface DispatchProps {\n    onLoad: (workspaceId: narrativeModel.WorkspaceID) => void\n}\n\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        narrative: state.entities.narratives.byId.get(props.workspaceId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {\n    return {\n        onLoad: (workspaceId: narrativeModel.WorkspaceID) => {\n            dispatch(actions.loadNarrative(workspaceId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './InboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    onAcceptRequest() {\n        this.props.onAcceptInboxRequest(this.props.request)\n    }\n\n    onRejectRequest() {\n        this.props.onRejectInboxRequest(this.props.request)\n    }\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requestSubject\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                <div className=\"cardSectionHeader\">from</div>\n\n                <div className=\"requester miniDetail\">{this.renderRequestRequester(request)}</div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"default\" onClick={this.onAcceptRequest.bind(this)}>\n                        <Icon type=\"check\" />\n                        Accept\n                        </Button>\n                    <Button type=\"danger\" onClick={this.onRejectRequest.bind(this)}>\n                        <Icon type=\"cross\" />\n                        Reject\n                        </Button>\n                    {/* <Button>\n                            <Icon type=\"eye\" />\n                            Visit\n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"requestSubject\">{this.renderRequestReceivedSubject(request)}</div>\n\n                <div className=\"cardSectionHeader\">\n                    from\n                </div>\n                <User userId={request.requester} avatarSize={30} />\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"InboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"InboxRequest-requestHeaderRow\">\n                        <div className=\"InboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"InboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport InboxRequest from './InboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptInboxRequest: (request: requestModel.Request) => void\n    onRejectInboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptInboxRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onRejectInboxRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InboxRequest)\n","import * as React from 'react'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { niceElapsed } from '../../../../../lib/time'\nimport Narrative from '../../../../entities/NarrativeContainer';\nimport User from '../../../../entities/UserContainer';\nimport { Button, Icon } from 'antd';\nimport './OutboxRequest.css'\n\nexport interface RequestProps {\n    request: requestModel.Request\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\ninterface RequestState {\n\n}\n\nexport default class Request extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n    }\n\n    // renderRequestSentType(request: requestModel.Request) {\n    //     switch (request.type) {\n    //         case requestModel.RequestType.REQUEST:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.APP:\n    //                     return 'REQUEST to associate App'\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'REQUEST to join Organization'\n    //                 case requestModel.RequestResourceType.WORKSPACE:\n    //                     return 'REQUEST to associate Narrative'\n    //             }\n    //         case requestModel.RequestType.INVITATION:\n    //             switch (request.resourceType) {\n    //                 case requestModel.RequestResourceType.USER:\n    //                     return 'INVITATION to join Organization'\n    //             }\n    //     }\n    //     return 'unknown request'\n    // }\n\n    onCancelRequest() {\n        this.props.onCancelOutboxRequest(this.props.request)\n    }\n\n    onAcceptInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectInvitation() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n    onAcceptRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n    onRejectRequest() {\n        alert('Hold your socks, not yet implemented')\n    }\n\n\n\n    renderRequestSentSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <User userId={request.user} avatarSize={30} />\n                                </div>\n                            </div>\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestRequester(request: requestModel.Request) {\n        return (\n            <User userId={request.requester} avatarSize={30} />\n        )\n    }\n\n    renderRequestReceivedType(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'REQUEST to associate App'\n                    case requestModel.RequestResourceType.USER:\n                        return 'REQUEST to join Organization'\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return 'REQUEST to associate Narrative'\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return 'INVITATION to join Organization'\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderRequestReceivedSubject(request: requestModel.Request) {\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.APP:\n                        return 'SHOW APP'\n                    case requestModel.RequestResourceType.USER:\n                        return ''\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <div>\n                                <div className=\"miniDetail\">\n                                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                                </div>\n                                <div className=\"cardSectionHeader\">with organization</div>\n                            </div>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return (\n                            <User userId={request.user} avatarSize={30} />\n                        )\n                }\n        }\n        return 'unknown request'\n    }\n\n    renderJoinRequest(request: requestModel.UserRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to join Organization\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderWorkspaceRequest(request: requestModel.WorkspaceRequest) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    REQUEST to associate Narrative\n                </div>\n\n                <div className=\"miniDetail\">\n                    <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderRequestOptions(request: requestModel.Request) {\n        // First, did the current user make or receive the request\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <Button.Group style={{ marginTop: '4px' }}>\n                    <Button type=\"danger\" onClick={this.onCancelRequest.bind(this)}>\n                        <Icon type=\"cross\" />Cancel\n                        </Button>\n                    {/* <Button onClick={this.onVisitOrg.bind(this)}>\n                            <Icon type=\"eye\" />Visit \n                        </Button> */}\n                </Button.Group>\n            </div>\n        )\n\n    }\n\n    renderUserInvitation(request: requestModel.UserInvitation) {\n        return (\n            <React.Fragment>\n                <div className=\"cardSectionHeader\">\n                    INVITATION to join organization\n                </div>\n\n                <div className=\"cardSectionHeader\">\n                    sent to\n                </div>\n\n                <div className=\"miniDetail\">\n                    {this.renderRequestReceivedSubject(request)}\n                </div>\n\n                {this.renderRequestOptions(request)}\n            </React.Fragment>\n        )\n    }\n\n    renderBody() {\n        const request = this.props.request\n        switch (request.type) {\n            case requestModel.RequestType.REQUEST:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderJoinRequest(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return this.renderWorkspaceRequest(request)\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>\n                                    apps not supported yet\n                            </div>\n                            </React.Fragment>\n                        )\n                }\n            case requestModel.RequestType.INVITATION:\n                switch (request.resourceType) {\n                    case requestModel.RequestResourceType.USER:\n                        return this.renderUserInvitation(request)\n                    case requestModel.RequestResourceType.WORKSPACE:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                    case requestModel.RequestResourceType.APP:\n                        return (\n                            <React.Fragment>\n                                <div>Hmm, not supported</div>\n                            </React.Fragment>\n                        )\n                }\n        }\n    }\n\n    render() {\n        const request = this.props.request\n        return (\n            <div key={request.id} className=\"OutboxRequest kbCard\">\n                <div className=\"kbCard-header\">\n                    <div className=\"OutboxRequest-requestHeaderRow\">\n                        <div className=\"OutboxRequest-requestHeaderCreatedAt\">\n                            {/* <span className=\"field-label\">created</span>\n                                {' '} */}\n                            {Intl.DateTimeFormat('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}\n                        </div>\n                        <div className=\"OutboxRequest-requestHeaderExpireAt\">\n                            <span className=\"field-label\">expires</span>\n                            {' '}\n                            {niceElapsed(request.expireAt)}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"kbCard-body\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as requestModel from '../../../../../data/models/requests'\nimport { StoreState } from '../../../../../types';\nimport * as cancelActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport OutboxRequest from './OutboxRequest'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onCancelOutboxRequest: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onCancelOutboxRequest: (request: requestModel.Request) => {\n            dispatch(cancelActions.cancelRequest(request.id) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(OutboxRequest)","import * as React from 'react'\n\nimport './component.css'\nimport Header from '../../../../Header'\nimport { Icon, Button, Modal, Card } from 'antd'\nimport User from '../../../../entities/UserContainer'\nimport Narrative from '../../../../entities/NarrativeContainer'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { niceElapsed } from '../../../../../lib/time'\nimport InboxRequest from './InboxRequestContainer'\nimport OutboxRequest from './OutboxRequestContainer'\n\nexport interface RequestsProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n    // organizationId: string,\n    // viewModel: types.\n    // onStart: (organizationId: string) => void,\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nexport interface RequestsState {\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n}\n\nclass ManageGroupRequests extends React.Component<RequestsProps, RequestsState> {\n\n    constructor(props: RequestsProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false\n        }\n\n        // this.props.onStart(this.props.organizationId)\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n    onAcceptJoinRequest(request: requestModel.Request) {\n        this.props.onAcceptJoinRequest(request)\n    }\n    onDenyJoinRequest(request: requestModel.Request) {\n        this.props.onDenyJoinRequest(request)\n    }\n    onCancelJoinInvitation(request: requestModel.Request) {\n        this.props.onCancelJoinInvitation(request)\n    }\n    onGetViewAccess(request: requestModel.Request) {\n        this.props.onGetViewAccess(request)\n    }\n    onViewProfile(username: string) {\n        window.open('/#people/' + username, '_blank')\n    }\n    onShowInfo() {\n        Modal.info({\n            title: 'Manage Requests Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the manage requests tool...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderRequestJoinRequest(request: requestModel.UserRequest) {\n        const title = (\n            <span>\n                <Icon type=\"user\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestJoinInvitation(request: requestModel.UserInvitation) {\n        const title = (\n            <span>\n                <Icon type=\"team\" />\n                <Icon type=\"mail\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"user\" />\n\n                {' '}\n                Invitation to Join Group\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onCancelJoinInvitation.call(this, request)}>\n                Cancel\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>invitation to</th>\n                            <td className=\"requester\">\n                                <User userId={request.user} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderNarrativePermission(permission: orgModel.UserWorkspacePermission) {\n        switch (permission) {\n            case orgModel.UserWorkspacePermission.NONE:\n                return 'None'\n            case orgModel.UserWorkspacePermission.VIEW:\n                return 'View Only'\n            // return 'View and Copy'\n            case orgModel.UserWorkspacePermission.EDIT:\n                return 'Edit'\n            // return 'View, Copy, Save, Run'\n            case orgModel.UserWorkspacePermission.ADMIN:\n                return 'Admin'\n            // return 'View, Copy, Save, Run, Manage Sharing'\n            case orgModel.UserWorkspacePermission.OWNER:\n                return 'Owner'\n            // return 'View, Copy, Save, Run, Manage Sharing, Own'\n        }\n    }\n\n    renderRequestNarrativeRequest(request: requestModel.WorkspaceRequest) {\n        const title = (\n            <span>\n                <Icon type=\"file\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add Narrative\n            </span>\n        )\n\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        let narrativeAccess\n        narrativeAccess = (\n            <Narrative workspaceId={parseInt(request.narrativeId, 10)} />\n        )\n        // TODO: Revive me!!\n        // if (request.narrativeId) {\n        //     // TODO: note the '1' below -- we dont' get the object id from the groups service,\n        //     // and the narrative will soon accept just the workspace id (and will look up the object id by itself)\n        //     // but not yet, so we just use 1, which is INCORRECT.\n        //     narrativeAccess = (\n        //         <div>\n        //             <div>\n        //                 <a href={\"/narrative/ws.\" + request.narrativeId + '.obj.' + '1'} target=\"_blank\">{request.title}</a>\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">your access</span>{' '}{this.renderNarrativePermission(request.narrative.permission)}\n        //             </div>\n        //             <div>\n        //                 <span className=\"field-label\">public?</span>{' '}{request.isPublic ? 'yes' : 'no'}\n        //             </div>\n\n        //         </div>\n        //     )\n        // } else {\n        //     narrativeAccess = (\n        //         <span>\n        //             You don't have access to this narrative\n        //             {' '}\n        //             <Button\n        //                 onClick={() => { this.onGetViewAccess.call(this, request.id) }}>\n        //                 Click for View Access\n        //             </Button>\n        //         </span>\n        //     )\n        // }\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={30} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>narrative</th>\n                            <td className=\"narrative\">\n                                {narrativeAccess}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderRequestAppRequest(request: requestModel.AppRequest) {\n        const title = (\n            <span>\n                <Icon type=\"appstore\" />\n                <Icon type=\"arrow-right\" />\n                <Icon type=\"team\" />\n                {' '}\n                Request to Add App\n            </span>\n        )\n        const actions = [\n            <Button\n                type=\"primary\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onAcceptJoinRequest.call(this, request)}>\n                Approve\n            </Button>,\n            <Button\n                type=\"danger\"\n                style={{ margin: '0 5px' }}\n                onClick={() => this.onDenyJoinRequest.call(this, request)}>\n                Deny\n            </Button>\n        ]\n\n        return (\n            <Card key={request.id}\n                title={title}\n                hoverable={true}\n                actions={actions}\n                headStyle={{ backgroundColor: 'rgba(200, 200, 200,0.3' }}\n                style={{ marginBottom: '10px' }}>\n                <table className=\"pendingRequestsTable\">\n                    <tbody>\n                        <tr>\n                            <th>from</th>\n                            <td className=\"requester\">\n                                <User userId={request.requester} avatarSize={50} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>app</th>\n                            <td className=\"requester\">\n                                {request.appId}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>sent</th>\n                            <td className=\"createdAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.createdAt)}</td>\n                        </tr>\n                        <tr>\n                            <th>expires</th>\n                            <td className=\"expiresAt\">{Intl.DateTimeFormat('en-US', {\n                                month: 'long',\n                                day: 'numeric',\n                                year: 'numeric'\n                            }).format(request.expireAt)} ({niceElapsed(request.expireAt)})</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Card>\n        )\n    }\n\n    renderInbox() {\n        let inbox\n        if (this.props.inbox.length === 0) {\n            inbox = (\n                <div className=\"Message\">\n                    No pending requests for you\n                </div>\n            )\n        } else {\n            const requests = this.props.inbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <InboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            inbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {inbox}\n            </React.Fragment>\n        )\n    }\n\n    renderOutbox() {\n        let outbox\n        if (this.props.outbox.length === 0) {\n            outbox = (\n                <div className=\"Message\">\n                    No pending requests from you\n                </div>\n            )\n        } else {\n            const requests = this.props.outbox.map((request) => {\n                return (\n                    <div key={request.id}>\n                        <OutboxRequest\n                            request={request} />\n                    </div>\n                )\n            })\n            outbox = (\n                <div style={{ overflowY: 'auto' }}>\n                    {requests}\n                </div>\n            )\n        }\n        return (\n            <React.Fragment>\n                {outbox}\n            </React.Fragment>\n        )\n    }\n\n    isAdmin(relation: orgModel.Relation): boolean {\n        return (\n            relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER\n        )\n    }\n\n    render() {\n        if (this.isAdmin(this.props.relation)) {\n            const outboxCount = this.props.outbox.length\n            const inboxCount = this.props.inbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"ViewOrganization-tabPaneHeader\">inbox ({inboxCount})</div>\n                    {this.renderInbox()}\n                    <div className=\"ViewOrganization-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        } else {\n            const outboxCount = this.props.outbox.length\n\n            return (\n                <div className=\"Requests\">\n                    <div className=\"ViewOrganization-tabPaneHeader\">outbox ({outboxCount})</div>\n                    {this.renderOutbox()}\n                </div>\n            )\n        }\n    }\n}\n\nexport default ManageGroupRequests\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as acceptActions from '../../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as rejectActions from '../../../../../redux/actions/viewOrganization/denyInboxRequest'\nimport * as cancelRequestActions from '../../../../../redux/actions/viewOrganization/cancelOutboxRequest'\nimport * as requestModel from '../../../../../data/models/requests'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nimport Component from './component'\n\nexport interface OwnProps {\n    inbox: Array<requestModel.Request>\n    outbox: Array<requestModel.Request>\n    relation: orgModel.Relation\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onAcceptJoinRequest: (request: requestModel.Request) => void\n    onDenyJoinRequest: (request: requestModel.Request) => void\n    onCancelJoinInvitation: (request: requestModel.Request) => void\n    onGetViewAccess: (request: requestModel.Request) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {}\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAcceptJoinRequest: (request: requestModel.Request) => {\n            dispatch(acceptActions.acceptRequest(request.id) as any)\n        },\n        onDenyJoinRequest: (request: requestModel.Request) => {\n            dispatch(rejectActions.denyRequest(request.id) as any)\n        },\n        onCancelJoinInvitation: (request: requestModel.Request) => {\n            dispatch(cancelRequestActions.cancelRequest(request.id) as any)\n        },\n        onGetViewAccess: (request: requestModel.Request) => {\n            // dispatch(actions.getViewAccess(requestId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)\n\n","import uuid from 'uuid/v4'\n\nexport interface AnError {\n    code: string\n    message: string\n    id: string\n    at: Date\n\n\n    detail?: string\n    history?: Array<AnError>\n    trace?: Array<string>\n    info?: any\n}\n\nexport function makeError(\n    { code, message, detail, history, trace, info }:\n        {\n            code: string, message: string,\n            detail?: string,\n            history?: Array<AnError>, trace?: Array<string>, info?: any\n        }\n) {\n    return {\n        code, message, detail,\n        id: uuid(),\n        at: new Date(),\n        history, trace, info\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { Tooltip } from 'antd';\nimport './component.css'\nimport OrgLogo from '../../OrgLogo';\nimport Owner from '../OwnerContainer';\n\nexport interface OrganizationProps {\n    organization: orgModel.Organization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    fullTimestamp(d: Date) {\n        return Intl.DateTimeFormat('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            timeZoneName: 'short'\n        }).format(d)\n    }\n\n    renderLogo(org: orgModel.Organization) {\n        return (\n            <OrgLogo logoUrl={org.logoUrl} size={30} organizationName={org.name} organizationId={org.id} />\n        )\n    }\n\n    render() {\n        const org = this.props.organization\n        return (\n            <div className=\"OrganizationEntity-Accessible \">\n                <div className=\"OrganizationEntity-Accessible-logoCol\">\n                    {this.renderLogo(org)}\n                </div>\n                <div className=\"OrganizationEntity-Accessible-mainCol\">\n                    <div className=\"OrganizationEntity-Accessible-name\">\n                        <a href={`/viewOrganization/${org.id}`}>{org.name}</a>\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-researchInterests\">\n                        {org.researchInterests}\n                    </div>\n                    <div className=\"OrganizationEntity-Accessible-owner\">\n                        <Owner username={org.owner.username} showAvatar={false} avatarSize={20} />\n                    </div>\n                    {/* <div className=\"OrganizationEntity-Accessible-createdAt\">\n                        <Tooltip\n                            placement=\"bottomRight\"\n                            mouseEnterDelay={0.5}\n                            title={this.fullTimestamp(org.createdAt)}>\n                            <span>\n                                {Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(org.createdAt)}\n                            </span>\n                        </Tooltip>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport './Inaccessible.css'\n\nexport interface OrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n}\n\ninterface OrganizationState {\n\n}\n\nexport default class Organization extends React.Component<OrganizationProps, OrganizationState> {\n    constructor(props: OrganizationProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div>\n                hey, org here\n                <div>\n                    {this.props.organization.id}\n                </div>\n            </div>\n        )\n    }\n}","// The loader component\n\nimport * as React from 'react'\nimport * as orgModel from '../../../data/models/organization/model'\nimport Organization from './component'\nimport InaccessibleOrganization from './Inaccessible'\n\ninterface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    render() {\n        if (this.props.organization) {\n            switch (this.props.organization.kind) {\n                case orgModel.OrganizationKind.NORMAL:\n                    return (\n                        <Organization organization={this.props.organization} />\n                    )\n                case orgModel.OrganizationKind.INACCESSIBLE_PRIVATE:\n                    return (\n                        <InaccessibleOrganization organization={this.props.organization} />\n                    )\n                default:\n                    return (\n                        <div>\n                            Error: unrecognized org kind\n                        </div>\n                    )\n            }\n        } else {\n            return (\n                <div>\n                    <Icon type=\"loading\" />\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        if (!this.props.organization) {\n            this.props.onLoad(this.props.organizationId)\n        }\n    }\n}\n\n// The loader redux adapter\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../../types'\nimport * as actions from '../../../redux/actions/entities/organization'\nimport { Icon } from 'antd';\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    organization: orgModel.Organization | orgModel.InaccessiblePrivateOrganization | null\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        organization: state.entities.organizations.byId.get(props.organizationId) || null\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<actions.OrganizationEntityAction>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from '../index'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { StoreState } from '../../../types'\nimport { AnError, makeError } from '../../../lib/error';\n\nexport interface OrganizationEntityAction extends Action {\n\n}\n\n// Organization\n\nexport interface Load extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD\n}\n\ninterface LoadStart extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n}\n\nexport interface LoadSuccess extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS\n    organization: orgModel.Organization\n}\n\ninterface LoadError extends OrganizationEntityAction {\n    type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR\n    error: AnError\n}\n\nexport function load(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, OrganizationEntityAction>, getState: () => StoreState) => {\n        dispatch(<LoadStart>{\n            type: ActionFlag.ENTITY_ORGANIZATION_LOAD_START\n        })\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const organization = await orgClient.getOrg(organizationId)\n            dispatch(<LoadSuccess>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_SUCCESS,\n                organization\n            })\n        } catch (ex) {\n            dispatch(<LoadError>{\n                type: ActionFlag.ENTITY_ORGANIZATION_LOAD_ERROR,\n                error: makeError({\n                    code: ex.name,\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport { Button, Menu, Dropdown, Icon } from 'antd'\nimport OrganizationEntity from '../../../../entities/organization/loader'\nimport './component.css'\n\nexport interface RelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\ninterface RelatedOrganizationsState {\n\n}\n\nexport default class RelatedOrganizations extends React.Component<RelatedOrganizationsProps, RelatedOrganizationsState> {\n    constructor(params: RelatedOrganizationsProps) {\n        super(params)\n    }\n\n    onManageRelatedOrgs() {\n        this.props.onManageRelatedOrgs()\n    }\n\n    renderToolbar() {\n        return (\n            <div className=\"RelatedOrganizations-toolbar\">\n                <Button onClick={this.onManageRelatedOrgs.bind(this)}>\n                    Add Related Org\n                </Button>\n            </div>\n        )\n    }\n\n    onAdminMenu(key: string, organizationId: orgModel.OrganizationID) {\n        switch (key) {\n            case 'removeRelation':\n                // this.props.onDemoteAdminToMember(member.username)\n                this.props.onRemoveRelatedOrganization(this.props.organization.id, organizationId)\n                // window.alert('will remove relation for org: ' + organizationId)\n                break\n        }\n    }\n\n    renderControls(organizationId: orgModel.OrganizationID) {\n        if (!this.props.organization.isAdmin) {\n            return\n        }\n        const menu = (\n            <Menu onClick={({ key }) => { this.onAdminMenu.call(this, key, organizationId) }}>\n                <Menu.Item key=\"removeRelation\">\n                    <Icon type=\"delete\" />Remove\n                    </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div>\n                <Dropdown overlay={menu} trigger={['click']}>\n                    <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n                </Dropdown>\n            </div>\n        )\n    }\n\n    renderBody() {\n        if (RelatedOrganizations.length === 0) {\n            return (\n                <p>Sorry, no related organizations</p>\n            )\n        }\n        const relatedOrgs = this.props.relatedOrganizations.map((organizationId: string) => {\n            return (\n                <div key={organizationId} className=\"RelatedOrganizations-orgRow simpleCard\">\n                    {/* <RelatedOrganization organizationId={org} /> */}\n                    <div className=\"RelatedOrganizations-orgCol\">\n                        <OrganizationEntity organizationId={organizationId} />\n                    </div>\n                    <div className=\"RelatedOrganizations-controlCol\">\n                        {this.renderControls(organizationId)}\n                    </div>\n                </div>\n            )\n        });\n        return (\n            <div className=\"RelatedOrganizations-organizations\">\n                {relatedOrgs}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"RelatedOrganizations scrollable-flex-column\">\n                {/* <div className=\"RelatedOrganizations-toolbarRow\">\n                    {this.renderToolbar()}\n                </div> */}\n                <div className=\"RelatedOrganizations-bodyRow scrollable-flex-column\">\n                    {this.renderBody()}\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/relatedOrganizations'\nimport Component from './component'\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<orgModel.OrganizationID>\n    onManageRelatedOrgs: () => void\n\n}\n\ninterface StateProps {\n    searchMembersBy: string\n    sortMembersBy: string\n    members: Array<orgModel.Member>\n}\n\ninterface DispatchProps {\n    onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const { searchMembersBy, sortMembersBy, members } = viewModel\n    return {\n        searchMembersBy, sortMembersBy, members\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onRemoveRelatedOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\n\n// Add Org\n\n// export interface AddOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n// }\n\n// export interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//     organizationId: orgModel.OrganizationID\n// }\n\n// export interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n//     type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//     error: AnError\n// }\n\n// export function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n//     return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n//         dispatch({\n//             type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n//         } as AddOrganizationStart)\n\n//         const {\n//             auth: { authorization: { token, username } },\n//             app: { config },\n//             views: {\n//                 viewOrgView: { viewModel }\n//             }\n//         } = getState()\n//         if (viewModel === null) {\n//             throw new Error('view is not populated')\n//         }\n//         const orgClient = new orgModel.OrganizationModel({\n//             token, username,\n//             groupsServiceURL: config.services.Groups.url\n//         })\n//         try {\n//             await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n//                 organizationId\n//             })\n//         } catch (ex) {\n//             dispatch({\n//                 type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n//                 error: makeError({\n//                     code: 'error',\n//                     message: ex.message\n//                 })\n//             })\n//         }\n//     }\n// }\n\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport { BriefOrganization } from '../../../../../data/models/organization/model'\nimport './AvailableOrganization.css'\nimport OrgLogo from '../../../../OrgLogo'\nimport Owner from '../../../../entities/OwnerContainer'\nimport { SelectableRelatableOrganization } from '../../../../../types';\nimport { Icon } from 'antd';\n\nexport interface AvailableOrganizationProps {\n    selectableOrganization: SelectableRelatableOrganization\n    // onSelectOrganization: (org: BriefOrganization) => void\n    // onAddOrganization: (org: BriefOrganization) => void\n}\n\nexport interface AvailableOrganizationState {\n}\n\nexport default class AvailableOrganization extends React.Component<AvailableOrganizationProps, AvailableOrganizationState> {\n    constructor(props: AvailableOrganizationProps) {\n        super(props)\n    }\n\n    renderRelated() {\n        if (this.props.selectableOrganization.isRelated) {\n            return (\n                <Icon type=\"check\" style={{ color: \"green\" }} />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"AvailableOrganization\">\n                <div className=\"AvailableOrganization-relatedCol\">\n                    {this.renderRelated()}\n                </div>\n                <div className=\"AvailableOrganization-orgCol\">\n                    <div className=\"AvailableOrganization-logoCol\">\n                        <OrgLogo logoUrl={this.props.selectableOrganization.organization.logoUrl}\n                            size={30}\n                            organizationName={this.props.selectableOrganization.organization.name}\n                            organizationId={this.props.selectableOrganization.organization.id} />\n                    </div>\n                    <div className=\"AvailableOrganization-orgInfoCol\">\n                        <div className=\"AvailableOrganization-name\">{this.props.selectableOrganization.organization.name}</div>\n                        <div className=\"AvailableOrganization-owner\">\n                            <Owner username={this.props.selectableOrganization.organization.owner.username}\n                                avatarSize={20} showAvatar={false} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"AvailableOrganization-actionCol\"></div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n\nimport * as orgModel from '../../../../../data/models/organization/model'\nimport './component.css'\nimport { Button, Icon, Input, Alert } from 'antd';\nimport AvailableOrganization from './AvailableOrganization'\nimport BriefOrganization from '../../../organizationHeader/BriefOrganization';\nimport { SelectableRelatableOrganization } from '../../../../../types';\n\nexport interface ManageRelatedOrganizationsProps {\n    organization: orgModel.Organization\n    relatedOrganizations: Array<string>\n    // relation: orgModel.Relation\n    selectedOrganization: SelectableRelatableOrganization | null\n    organizations: Array<SelectableRelatableOrganization>\n    onFinish: () => void\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\ninterface ManageRelatedOrganizationsState {\n\n}\n\nexport default class ManageRelatedOrganizations extends React.Component<ManageRelatedOrganizationsProps, ManageRelatedOrganizationsState> {\n    constructor(props: ManageRelatedOrganizationsProps) {\n        super(props)\n    }\n\n    onAddSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onAddOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    onRemoveSelectedOrganization() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        this.props.onRemoveOrganization(this.props.organization.id, this.props.selectedOrganization.organization.id)\n    }\n\n    renderAvailableToolbar() {\n        return (\n            <div className=\"ManageRelatedOrganizations-available-toolbar\">\n                <Input placeholder=\"Filter Available Organizations\" />\n            </div>\n        )\n    }\n\n    renderAvailableOrgs() {\n        return this.props.organizations.map((org: SelectableRelatableOrganization) => {\n            const selectOrg = () => {\n                this.props.onSelectOrganization(org)\n            }\n            let classes = ['simpleCard', 'ManageRelatedOrganizations-availableOrganization']\n            if (org.isSelected) {\n                classes.push('ManageRelatedOrganizations-selected')\n            }\n            return (\n                <div className={classes.join(' ')} onClick={selectOrg} key={org.organization.id} >\n                    <AvailableOrganization selectableOrganization={org} />\n                </div>\n            )\n        })\n    }\n\n    renderSelectedOrg() {\n        if (!this.props.selectedOrganization) {\n            return\n        }\n        let relatedInfo\n        let button\n        if (this.props.selectedOrganization.isRelated) {\n            relatedInfo = (\n                <Alert type=\"warning\" message=\"This org is already associated\" />\n            )\n            button = (\n                <Button\n                    type=\"danger\"\n                    disabled={this.props.selectedOrganization === null}\n                    onClick={this.onRemoveSelectedOrganization.bind(this)}>\n                    Remove Organization\n                </Button>\n            )\n        } else {\n            button = (\n                <Button\n                    type=\"primary\"\n                    disabled={this.props.selectedOrganization === null}\n                    onClick={this.onAddSelectedOrganization.bind(this)}>\n                    Add Organization\n                </Button>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"ManageRelatedOrganizations-selectedOrganization\">\n                    <BriefOrganization organization={this.props.selectedOrganization.organization} openRequestsStatus={null} />\n                </div>\n                <div className=\"ManageRelatedOrganizations-buttonBar\">\n                    {button}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageRelatedOrganizations scrollable-flex-column\">\n                <div className=\"ManageRelatedOrganizations-toolbar\">\n                    <Button onClick={() => this.props.onFinish()} type=\"danger\">\n                        <Icon type=\"rollback\" />\n                        {' '}\n                        Done\n                    </Button>\n                </div>\n                <div className=\"ManageRelatedOrganizations-main scrollable-flex-column\">\n                    <div className=\"ManageRelatedOrganizations-availableOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Available Organizations</h3>\n                        {this.renderAvailableToolbar()}\n                        <div className=\"ManageRelatedOrganizations-organizations\">\n                            {this.renderAvailableOrgs()}\n                        </div>\n                    </div>\n                    <div className=\"ManageRelatedOrganizations-relatedOrgs\">\n                        <h3 style={{ textAlign: 'center' }}>Selected Organization</h3>\n                        {this.renderSelectedOrg()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport ManageRelatedOrganizations from './component'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../../../types';\nimport * as orgModel from '../../../../../data/models/organization/model'\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    organizations: Array<SelectableRelatableOrganization>\n    relatedOrganizations: Array<string>\n    selectedOrganization: SelectableRelatableOrganization | null\n}\n\ninterface DispatchProps {\n    onSelectOrganization: (org: SelectableRelatableOrganization) => void\n    onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n    onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    // if (viewModel.subViews.kind !== ViewOrgSubViewKind.MANAGE_RELATED_ORGS) {\n    //     throw new Error(\"argh, wrong org subview kind\")\n    // }\n    if (viewModel.subViews.manageRelatedOrganizationsView.viewModel === null) {\n        throw new Error(\"argh, null subview view model\")\n    }\n    const { organization, organizations, relatedOrganizations, selectedOrganization } = viewModel.subViews.manageRelatedOrganizationsView.viewModel\n\n    return {\n        organization, organizations, relatedOrganizations, selectedOrganization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onSelectOrganization: (org: SelectableRelatableOrganization) => {\n            dispatch(actions.selectOrganization(org) as any)\n        },\n        onAddOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.addOrganization(organizationId, relatedOrganizationId) as any)\n        },\n        onRemoveOrganization: (organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) => {\n            dispatch(actions.removeOrganization(organizationId, relatedOrganizationId) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ManageRelatedOrganizations)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from '../index'\nimport { AnError } from '../../../lib/error'\nimport { StoreState, ViewOrgViewModelKind, SelectableRelatableOrganization } from '../../../types'\nimport * as orgModel from '../../../data/models/organization/model'\nimport { makeError } from '../../../combo/error/api'\n\nexport interface Load extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n    organizations: Array<SelectableRelatableOrganization>\n}\n\nexport interface LoadError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR\n    error: AnError\n}\n\nexport interface Unload extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_START\n        } as LoadStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n            throw new Error('view is not normal')\n        }\n        const { organization } = viewModel\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const orgs = await orgClient.getAllOrgs2()\n            const selectableOrgs = orgs.map((org) => {\n                const isRelated = organization.relatedOrganizations.includes(org.id)\n                return {\n                    isRelated: isRelated,\n                    isSelected: false,\n                    organization: org\n                } as SelectableRelatableOrganization\n            })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_SUCCESS,\n                organizations: selectableOrgs\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_LOAD_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_UNLOAD\n    }\n}\n\nexport interface SelectOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n    selectedOrganization: SelectableRelatableOrganization\n}\n\nexport function selectOrganization(org: SelectableRelatableOrganization): SelectOrganization {\n    return {\n        type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_SELECT_ORGANIZATION,\n        selectedOrganization: org\n    }\n}\n\n// Add Org\n\nexport interface AddOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n}\n\nexport interface AddOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface AddOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function addOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_START\n        } as AddOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.addRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            })\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_ADD_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}\n\n// Remove Org\n\nexport interface RemoveOrganization extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationStart extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n}\n\nexport interface RemoveOrganizationSuccess extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n    organizationId: orgModel.OrganizationID\n}\n\nexport interface RemoveOrganizationError extends Action<ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR> {\n    type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n    error: AnError\n}\n\nexport function removeOrganization(organizationId: orgModel.OrganizationID, relatedOrganizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_START\n        } as RemoveOrganizationStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                viewOrgView: { viewModel }\n            }\n        } = getState()\n        if (viewModel === null) {\n            throw new Error('view is not populated')\n        }\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        try {\n            await orgClient.removeRelatedOrganization({ organizationId, relatedOrganizationId })\n            dispatch({\n                type: ActionFlag.VIEW_ORG_MANAGE_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_SUCCESS,\n                organizationId: relatedOrganizationId\n            } as RemoveOrganizationSuccess)\n            // dispatch(viewOrgActions.reload(organizationId))\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.VIEW_ORG_RELATED_ORGANIZATIONS_REMOVE_ORGANIZATION_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n    }\n}","import * as React from 'react'\nimport { Spin, Alert } from 'antd'\nimport Container from './reduxAdapter'\n\n\nexport interface Props {\n    view: types.View<types.ManageRelatedOrgsViewModel | types.NoneViewModel>\n    onLoad: () => void\n    onUnload: () => void\n    onFinish: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Related Organizations Manager...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                return this.renderLoading()\n            case types.ViewState.LOADING:\n                return this.renderLoading()\n            case types.ViewState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container onFinish={this.props.onFinish} />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.state) {\n            case types.ViewState.NONE:\n                this.props.onLoad()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../../../types'\nimport * as actions from '../../../../../redux/actions/viewOrganization/manageRelatedOrganizations'\nimport { OrganizationModel } from '../../../../../data/models/organization/model';\n\nexport interface OwnProps {\n    onFinish: () => void\n}\n\ninterface StateProps {\n    view: types.View<types.ManageRelatedOrgsViewModel>\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const v = state.views.viewOrgView\n    const vm1 = v.viewModel\n    if (vm1 === null) {\n        throw new Error('vm is null')\n    }\n    if (vm1.kind !== types.ViewOrgViewModelKind.NORMAL) {\n        throw new Error('not the right vm')\n    }\n    return {\n        view: vm1.subViews.manageRelatedOrganizationsView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport { Marked } from 'marked-ts'\nimport { NavLink, Redirect } from 'react-router-dom'\n\nimport './component.css'\n\nimport { ViewOrgViewModel } from '../../../../types'\nimport { Button, Modal, Icon, Tooltip, Card, Dropdown, Menu, Alert, Tabs, Input, Select } from 'antd'\nimport Header from '../../../Header'\nimport Member from '../../../entities/MemberContainer'\nimport OrganizationHeader from '../../organizationHeader/loader'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\nimport OrganizationNarrative from '../../../OrganizationNarrative'\nimport MainMenu from '../../../menu/component'\nimport Members from './members/reduxAdapter'\n\nimport Requests from './requests/container'\nimport BriefOrganization from '../../organizationHeader/BriefOrganization'\nimport RelatedOrganizations from './relatedOrgs/reduxAdapter'\nimport ManageRelatedOrganizations from './manageRelatedOrganizations/loader'\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE,\n    MANAGE_MEMBERSHIP,\n    VIEW_MEMBERS,\n    MANAGE_REQUESTS,\n    VIEW_ORGANIZATION,\n    EDIT_ORGANIZATION,\n    INVITE_USER\n}\n\nenum AccordionState {\n    UP = 0,\n    DOWN\n}\n\nenum SubViews {\n    NORMAL = 0,\n    MANAGE_RELATED_ORGS\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n    accordionState: AccordionState\n    subView: SubViews\n}\n\nexport interface ViewOrganizationProps {\n    viewModel: ViewOrgViewModel\n\n    // organization: orgModel.Organization\n    // relation: orgModel.Relation\n    // openRequest: orgModel.RequestStatus\n    // groupRequests: Array<requestModel.Request> | null\n    // groupInvitations: Array<requestModel.Request> | null\n    // requestOutbox: Array<requestModel.Request>\n    // requestInbox: Array<requestModel.Request>\n    // notifications: Array<feedsModel.OrganizationNotification>\n    // sortNarrativesBy: string\n    // searchNarrativesBy: string\n    // narratives: Array<orgModel.NarrativeResource>\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onReadNotification: (requestId: requestModel.RequestID) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            },\n            accordionState: AccordionState.UP,\n            subView: SubViews.NORMAL\n        }\n    }\n\n    onManageRelatedOrgs() {\n        this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n    }\n\n    onViewMembers() {\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        const relation = this.props.viewModel.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    onRequestAddNarrative() {\n        this.setState({ navigateTo: NavigateTo.REQUEST_ADD_NARRATIVE })\n    }\n\n    onRemoveNarrative(narrative: orgModel.NarrativeResource) {\n        this.props.onRemoveNarrative(narrative)\n    }\n\n    onNarrativeMenu(key: string, narrative: orgModel.NarrativeResource) {\n        switch (key) {\n            case 'removeNarrative':\n                this.props.onRemoveNarrative(narrative)\n                break\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    Organization help here...\n                </div>\n            )\n        })\n    }\n\n    onRequestShare(narrative: orgModel.NarrativeResource) {\n        // Drawer.\n        // Drawer.open({\n        //     title: 'Request Access to Narrative',\n        //     content: 'Are you sure?'\n        // })\n        this.setState({ requestAccess: { narrative: narrative } })\n        // alert('not yet implemented')\n    }\n\n    onCloseRequestAccess() {\n        this.setState({ requestAccess: { narrative: null } })\n    }\n\n    buildFooter() {\n        return (\n            <div>\n                {this.renderEditRow()}\n                {/* <p style={{ textAlign: 'center' }}>\n                    You may also  <NavLink to={`/organizations`}><Button type=\"danger\" icon=\"undo\">Return to Orgs</Button></NavLink> to the organizations browser.\n                </p> */}\n            </div>\n        )\n    }\n\n    renderEditRow() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <p style={{ textAlign: 'center' }}>\n                    As the owner of this group, you may <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit</Button></NavLink> it.\n                </p>\n            )\n        }\n    }\n\n    renderEditButton() {\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            return (\n                <NavLink to={`/editOrganization/${this.props.viewModel.organization!.id}`}><Button icon=\"edit\">Edit This Organization</Button></NavLink>\n            )\n        }\n    }\n\n    renderOrg() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <div className=\"ViewOrganization-org-description-org scrollable-flex-column\">\n                <div className=\"ViewOrganization-org-description\"\n                    dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.viewModel.organization.description || '') })}\n                />\n            </div>\n        )\n    }\n\n    // TODO: this should be a component, so we can pick up all the good stuff, which is now commented out...\n    renderOwnerInfo(org: orgModel.Organization) {\n        return (\n            <div className=\"ownerTable\">\n                <div className=\"proprietorCol\">\n\n                    <div className=\"owner\">\n                        <a href={\"/#people/\" + org.owner.username} target=\"_blank\">{org.owner.username}</a>\n                        {' '}\n                        ❨{org.owner.username}❩\n                                </div>\n                    {/* <div className=\"profileOrganization\">\n                        {org.owner.user.organization}\n                    </div>\n                    <div className=\"profileOrganization\">\n                        {org.owner.user.city}, {org.owner.user.state}, {org.owner.user.country}\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.viewModel.organization.id} />\n        )\n    }\n\n    renderRelation(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You are not a member of this org; you may request membership\"\n                    >\n                        <div><Icon type=\"eye\" style={{ marginRight: '4px' }} />You are not a member of this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button\n                                onClick={this.onJoinClick.bind(this)}>\n                                Join this Organization\n                            </Button>\n                        </div>\n                    </Tooltip>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'orange' }} spin={true} />Your membership <b>request</b> is pending</div>\n                        <div><Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button></div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <div><Icon type=\"user\" style={{ color: 'blue' }} />You have been <b>invited</b> to join this Organization</div>\n                        <div style={{ marginTop: '10px' }}>\n                            <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                            <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" />Member</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />Admin</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n                    <Tooltip\n                        placement=\"bottomRight\"\n                        mouseEnterDelay={0.5}\n                        title=\"You own this org\"\n                    >\n                        <span><Icon type=\"unlock\" theme=\"filled\" style={{ marginRight: '4px' }} />You own this organization</span>\n                    </Tooltip>\n                )\n        }\n    }\n\n    isMember(): boolean {\n        if (!this.props.viewModel.organization) {\n            return false\n        }\n        if (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.MEMBER) {\n            return true\n        }\n        return false\n    }\n\n    renderMembers() {\n        if (!this.isMember()) {\n            return (\n                <Alert message=\"Membership is only available to members\" type=\"info\" />\n            )\n        }\n        return (\n            <Members\n                organization={this.props.viewModel.organization}\n                relation={this.props.viewModel.relation}\n                onReloadOrg={this.props.onReloadOrg} />\n        )\n\n    }\n\n    renderInfo() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        return (\n            <Card\n                title={<span><Icon type=\"info-circle\"></Icon> info</span>}\n                headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                className=\"slimCard\">\n                <div>\n                    <div>\n                        <div className=\"label\">owner</div>\n                    </div>\n                    <div className=\"ViewOrganization-ownerTable\">\n                        <Member member={this.props.viewModel.organization.owner} avatarSize={50} />\n                        {/* TODO: fix avatar component */}\n                        {/* <div className=\"avatarCol\">\n                            <Avatar user={this.props.organization.owner.username} size={60} />\n                        </div>\n                        <div className=\"proprietorCol\">\n                            <div className=\"owner\">\n                                <a href={\"/#people/\" + this.props.organization.owner.user.username} target=\"_blank\">{this.props.organization.owner.user.realname}</a>\n                                {' '}\n                                ❨{this.props.organization.owner.user.username}❩\n                                        </div>\n                            <div className=\"profileOrganization\">\n                                {this.props.organization.owner.user.organization}\n                            </div>\n                            <div className=\"profileOrganization\">\n                                {this.props.organization.owner.user.city}, {this.props.organization.owner.user.state}, {this.props.organization.owner.user.country}\n                            </div>\n                        </div> */}\n                    </div>\n                    <div className='ViewOrganization-infoTable'>\n                        <div className=\"row\">\n                            <div className=\"col1\">\n                                <span className=\"label\">established</span>\n                            </div>\n                            <div className=\"col2\">\n                                <div className=\"createdAt\">\n                                    {Intl.DateTimeFormat('en-US', {\n                                        month: 'long',\n                                        day: 'numeric',\n                                        year: 'numeric'\n                                    }).format(this.props.viewModel.organization.createdAt)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col1\">\n                                <span className=\"label\">last updated</span>\n                            </div>\n                            <div className=\"col2\">\n                                <div className=\"modifiedAt\">\n                                    {Intl.DateTimeFormat('en-US', {\n                                        month: 'long',\n                                        day: 'numeric',\n                                        year: 'numeric'\n                                    }).format(this.props.viewModel.organization.modifiedAt)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n\n    renderGroupRequestsRow() {\n        const relation = this.props.viewModel.relation\n        const requests = this.props.viewModel.groupRequests\n        const invitations = this.props.viewModel.groupInvitations\n\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: bad. should not get here in this case...\n        if (requests === null || invitations === null) {\n            return\n        }\n        let inner\n        if (requests.length) {\n            inner = (\n                <div>\n                    group has no pending requests\n                </div>\n            )\n        } else {\n            inner = (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending request{invitations.length > 1 ? 's' : ''}\n\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"col1\">\n                    <span className=\"label\">admin</span>\n                </div>\n                <div className=\"col2\">\n                    <div className=\"relation\">\n                        {inner}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderGroupRequests(requests: Array<requestModel.Request>, invitations: Array<requestModel.Request>) {\n        if (!requests.length) {\n            return (\n                <div className=\"message\">\n                    No pending group requests\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div>\n                        <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> There\n                        {' '}\n                        {requests.length > 1 ? 'are' : 'is'}\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{requests.length}</span>\n                        {' '}\n                        pending request{requests.length > 1 ? 's' : ''}\n                        {' '}\n                        and\n                        {' '}\n                        <span style={{ fontWeight: 'bold' }}>{invitations.length}</span>\n                        {' '}\n                        pending invitation{invitations.length > 1 ? 's' : ''}\n                    </div>\n                    <div>\n                        <NavLink to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization!.id}>\n                            <Button>Manage Requests</Button>\n                        </NavLink>\n                    </div>\n                </div>\n            )\n        }\n        // return (\n        //     <div className=\"row\">\n        //         <div className=\"col1\">\n        //             <span className=\"label\">admin</span>\n        //         </div>\n        //         <div className=\"col2\">\n        //             <div className=\"relation\">\n        //                 {inner}\n        //             </div>\n        //         </div>\n        //     </div>\n\n        // )\n\n        // return (\n        //     <div>\n        //         <div>\n        //             <Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"orange\" /> group has\n        //             {' '}\n        //             <span style={{ fontWeight: 'bold' }}>{org.adminRequests.length}</span>\n        //             {' '}\n        //             pending request{org.adminRequests.length > 1 ? 's' : ''}\n        //         </div>\n        //         <div>\n        //             <NavLink to={\"/manageOrganizationRequests/\" + this.props.organization!.id}>\n        //                 <Button>Manage Requests</Button>\n        //             </NavLink>\n        //         </div>\n        //     </div>\n        // )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderUserRelationship() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        return (\n            <form className=\"infoTable\">\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <span className=\"label\">your relation</span>\n                    </div>\n                    <div className=\"col2\">\n                        <div className='relation'>\n                            {this.renderRelation(this.props.organization)}\n                        </div>\n                    </div>\n                </div> */}\n                {this.renderGroupRequestsRow()}\n            </form>\n        )\n    }\n\n    renderAdminTasks() {\n        const relation = this.props.viewModel.relation\n        if (!(relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            relation.type === orgModel.UserRelationToOrganization.OWNER)) {\n            return\n        }\n        // TODO: ditto -- silly to test both conditions (this is only to make TS happy btw)\n        const { groupRequests, groupInvitations } = this.props.viewModel\n        if (groupInvitations === null || groupRequests === null) {\n            return\n        }\n        const count = groupRequests.length + groupInvitations.length\n        const title = (\n            <span><Icon type=\"unlock\" />\n                {' '}\n                group requests\n                {' '}\n                <span className=\"ViewOrganization-titleCount\">({count})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-adminTasksBox\">\n                <Card\n                    className=\"slimCard ViewOrganization-adminTasksCard\"\n                    headStyle={{ backgroundColor: 'gray', color: 'white' }}\n                    title={title} >\n                    {this.renderGroupRequests(groupRequests, groupInvitations)}\n                </Card>\n            </div>\n        )\n    }\n\n    renderJoinButton() {\n        if (!this.props.viewModel.organization) {\n            return\n        }\n        if (this.props.viewModel.relation.type !== orgModel.UserRelationToOrganization.VIEW) {\n            return\n        }\n        return (\n            <Button\n                onClick={this.onJoinClick.bind(this)}\n            >\n                Join this Organization\n                </Button>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderMembersTab() {\n        return (\n            <div className=\"ViewOrganization-membersCol scrollable-flex-column\">\n                {this.renderMembersToolbar()}\n\n                {this.renderMembers()}\n            </div>\n        )\n    }\n\n    onAcceptRequest(request: requestModel.Request) {\n        this.props.onAcceptRequest(request.id)\n    }\n\n    renderNarrativeMenu(narrative: orgModel.NarrativeResource) {\n        const relation = this.props.viewModel.relation\n        const isAdmin = (relation.type === orgModel.UserRelationToOrganization.OWNER ||\n            relation.type === orgModel.UserRelationToOrganization.ADMIN)\n        let menu\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // should never occur\n                break;\n            case (orgModel.UserRelationToOrganization.VIEW):\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                break;\n            case (orgModel.UserRelationToOrganization.ADMIN):\n            case (orgModel.UserRelationToOrganization.OWNER):\n                menu = (\n                    <Menu onClick={({ key }) => { this.onNarrativeMenu(key, narrative) }}>\n                        <Menu.Item key=\"removeNarrative\">\n                            <Icon type=\"delete\" /> Remove Narrative from Organization\n                        </Menu.Item>\n                    </Menu>\n                )\n        }\n        if (!menu) {\n            return\n        }\n        return (\n            <Dropdown overlay={menu} trigger={['click']}>\n                <Icon type=\"ellipsis\" className=\"IconButton-hover\" />\n            </Dropdown>\n        )\n    }\n\n    renderNarratives() {\n        // if (!this.isMember()) {\n        //     return (\n        //         <Card\n        //             className=\"slimCard  narratives\"\n        //             title={<span><Icon type=\"folder-open\" /> Narratives ({this.props.organization.narrativeCount})</span>}\n        //         >\n        //             <Alert message=\"Narratives are only available to members\" type=\"info\" />\n        //         </Card>\n        //     )\n        // }\n\n        const extras = [\n        ]\n\n        if (this.props.viewModel.organization.isMember) {\n            extras.push((\n                <NavLink\n                    key=\"requestAddNarrative\"\n                    to={`/requestAddNarrative/${this.props.viewModel.organization!.id}`}>\n                    <Button\n                        onClick={this.onRequestAddNarrative.bind(this)}>\n                        <Icon type=\"plus\" /> Add a Narrative\n                    </Button>\n                </NavLink>\n            ))\n        }\n\n        let narrativesTable\n        if (this.props.viewModel.narratives.length === 0) {\n            narrativesTable = (\n                <div className=\"message\">\n                    No Narratives are yet associated with this Organization\n                </div>\n            )\n\n        } else {\n            narrativesTable = this.props.viewModel.narratives.map((narrative) => {\n                // create buttons or not, depending on being an admin\n                return (\n                    <div className=\"narrative simpleCard\" key={String(narrative.workspaceId)}>\n                        <div className=\"dataCol\">\n                            <OrganizationNarrative\n                                narrative={narrative}\n                                organization={this.props.viewModel.organization}\n                                onGetViewAccess={this.props.onGetViewAccess} />\n                        </div>\n                        <div className=\"buttonCol\">\n                            {this.renderNarrativeMenu(narrative)}\n                        </div>\n                    </div>\n                )\n            })\n        }\n\n        // const narrativeCount = this.props.narratives.length\n        const narrativeCount = this.props.viewModel.organization.narrativeCount\n        const title = (\n            <span className=\"ViewOrganization-narrativesTitle\">\n                <Icon type=\"folder-open\" style={{ marginRight: '8px' }} />\n                Narratives\n                {' '}\n                <span className=\"titleCount\">({narrativeCount})</span>\n            </span>\n        )\n        return (\n            <div className=\"ViewOrganization-narratives scrollable-flex-column\">\n                <div className=\"ViewOrganization-narrativesHeader\">\n                    <div className=\"ViewOrganization-narrativesHeaderCol1\">\n                        {title}\n                    </div>\n                    <div className=\"ViewOrganization-narrativesHeaderCol2\">\n                        {extras}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-narratives-toolbar\">\n                    <div className=\"ViewOrganization-narratives-toolbar-searchCol\">\n                        {this.renderSearchBar()}\n                    </div>\n                    <div className=\"ViewOrganization-narratives-toolbar-sortCol\">\n                        {this.renderSortBar()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-narrativesList\">\n                    <div className=\"narrativesTable\">\n                        {narrativesTable}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderSearchBar() {\n        const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            this.props.onSearchNarratives(e.target.value)\n        }\n        return (\n            <div style={{ paddingRight: '6px' }}>\n                <Input style={{ width: '100%', marginRight: '6px' }}\n                    placeholder=\"Filter narratives by title\"\n                    onChange={doChange} />\n                {/* <Button>\n                    <Icon type=\"search\" />\n                </Button> */}\n            </div>\n        )\n    }\n\n    renderSortBar() {\n        const handleSelect = (value: string) => {\n            this.props.onSortNarratives(value)\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"field-label\">sort</span>\n                <Select onChange={handleSelect}\n                    style={{ width: '11em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.viewModel.sortNarrativesBy}\n                >\n                    <Select.Option value=\"name\" key=\"name\">Name</Select.Option>\n                    <Select.Option value=\"added\" key=\"added\">Date Added</Select.Option>\n                    <Select.Option value=\"changed\" key=\"changed\">Last Changed</Select.Option>\n                </Select>\n            </React.Fragment>\n        )\n    }\n\n    renderMembersToolbar() {\n        switch (this.props.viewModel.relation.type) {\n            case orgModel.UserRelationToOrganization.NONE:\n                return\n            case orgModel.UserRelationToOrganization.MEMBER:\n                return\n            case orgModel.UserRelationToOrganization.ADMIN:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <NavLink to={\"/inviteUser/\" + this.props.viewModel.organization.id}>\n                            <Button size=\"small\"><Icon type=\"mail\" /> Invite a User</Button>\n                        </NavLink>\n                    </div>\n                )\n            case orgModel.UserRelationToOrganization.OWNER:\n                return (\n                    <div className=\"ViewOrganization-tabPaneToolbar\">\n                        <NavLink to={\"/inviteUser/\" + this.props.viewModel.organization.id}>\n                            <Button size=\"small\"><Icon type=\"mail\" /> Invite a User</Button>\n                        </NavLink>\n                    </div>\n                )\n        }\n    }\n\n    renderCombo() {\n        const isAdmin = (this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.viewModel.relation.type === orgModel.UserRelationToOrganization.OWNER)\n\n        const isMember = this.props.viewModel.organization.isMember\n\n        // if (!isMember) {\n        //     return (\n        //         <p style={{ fontStyle: 'italic' }}>\n        //             The membership list is only available to members.\n        //         </p>\n        //     )\n        // }\n\n        const tabs = []\n\n        let memberCount\n        if (this.props.viewModel.organization.memberCount - 1) {\n            memberCount = String(this.props.viewModel.organization.memberCount - 1)\n        } else {\n            memberCount = 'Ø'\n        }\n        tabs.push((\n            <Tabs.TabPane\n                tab={<span><Icon type=\"team\" />Members <span className=\"ViewOrganization-tabCount\">({memberCount})</span></span>}\n                key=\"members\"\n                style={{ flexDirection: 'column' }}>\n                {this.renderMembersTab()}\n            </Tabs.TabPane>\n        ))\n\n        if (isMember) {\n            if (isAdmin) {\n                const totalRequestCount = this.props.viewModel.requestInbox.length + this.props.viewModel.requestOutbox.length\n                const totalRequests = (\n                    <span className=\"ViewOrganization-tabCount\">\n                        ({totalRequestCount || 'Ø'})\n                    </span>\n                )\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests {totalRequests} </span>} key=\"inbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={this.props.viewModel.requestInbox} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            } else {\n                const outboxSize = this.props.viewModel.requestOutbox.length\n                let titleCount\n                if (outboxSize) {\n                    titleCount = String(outboxSize)\n                } else {\n                    titleCount = 'Ø'\n                }\n                tabs.push((\n                    <Tabs.TabPane tab={<span><Icon type=\"inbox\" />Requests <span className=\"ViewOrganization-tabCount\">({titleCount})</span></span>} key=\"outbox\" style={{ flexDirection: 'column' }}>\n                        <Requests inbox={[]} outbox={this.props.viewModel.requestOutbox} relation={this.props.viewModel.relation} />\n                    </Tabs.TabPane>\n                ))\n            }\n        }\n\n        const relatedOrgCount = this.props.viewModel.organization.relatedOrganizations.length\n        const relatedOrgTab = (\n            <span>\n                <Icon type=\"team\" />\n                Related Orgs <span className=\"ViewOrganization-tabCount\">({relatedOrgCount})</span>\n            </span>\n        )\n        tabs.push((\n            <Tabs.TabPane tab={relatedOrgTab} key=\"relatedorgs\" style={{ flexDirection: 'column' }}>\n                <RelatedOrganizations\n                    relatedOrganizations={this.props.viewModel.organization.relatedOrganizations}\n                    organization={this.props.viewModel.organization}\n                    onManageRelatedOrgs={() => { this.onManageRelatedOrgs() }} />\n            </Tabs.TabPane>\n        ))\n\n        return (\n            <Tabs\n                defaultActiveKey=\"members\"\n                className=\"ViewOrganization-tabs\"\n                animated={false}\n                size=\"small\"\n                tabPosition=\"top\"\n            >\n                {tabs}\n            </Tabs>\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    {this.renderOrgMenu()}\n                </span>\n\n                {/* <span className=\"ButtonSet-button\">\n                    <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n                </span> */}\n            </span>\n        )\n    }\n\n    onNavigateToMembership() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n    }\n\n    onNavigateToViewMembers() {\n        this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n    }\n\n    onNavigateToManageRequests() {\n        this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n    }\n\n    onNavigateToEditOrganization() {\n        this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n    }\n\n    onNavigateToInviteUser() {\n        this.setState({ navigateTo: NavigateTo.INVITE_USER })\n    }\n\n    onNavigateToViewOrganization() {\n        this.setState({ navigateTo: NavigateTo.VIEW_ORGANIZATION })\n    }\n\n    onMenuClick({ key }: { key: string }) {\n        switch (key) {\n            case 'manageMyMembership':\n                this.setState({ navigateTo: NavigateTo.MANAGE_MEMBERSHIP })\n                break\n            case 'viewMembers':\n                this.setState({ navigateTo: NavigateTo.VIEW_MEMBERS })\n                break\n            case 'editOrg':\n                this.setState({ navigateTo: NavigateTo.EDIT_ORGANIZATION })\n                break\n            case 'inviteUser':\n                this.setState({ navigateTo: NavigateTo.INVITE_USER })\n                break\n            case 'manageRequests':\n                this.setState({ navigateTo: NavigateTo.MANAGE_REQUESTS })\n                break\n            case 'addNarrative':\n                this.setState({ navigateTo: NavigateTo.REQUEST_ADD_NARRATIVE })\n                break\n            case 'manageRelatedOrgs':\n                this.setState({ subView: SubViews.MANAGE_RELATED_ORGS })\n                break\n        }\n    }\n\n    renderOrgMenu() {\n        const org = this.props.viewModel.organization\n        switch (this.props.viewModel.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                // return (\n                //     <span><Icon type=\"stop\" />None</span>\n                // )\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.onJoinClick.bind(this)}>\n                            Join this Organization\n                        </Button>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <span>\n                        <Tooltip\n                            placement=\"bottom\"\n                            mouseEnterDelay={0.5}\n                            title=\"You have requested to join this Org; you may cancel your join request with this button\"\n                        >\n                            <Button icon=\"delete\" type=\"danger\" onClick={this.onCancelJoinRequest.bind(this)}>Cancel Join Request</Button>\n                        </Tooltip>\n                    </span>\n\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div className=\"ViewOrganization-invitationPendingCard\">\n                        <span>You have been invited to this organization: </span>\n                        <Button icon=\"check\" type=\"default\" size=\"small\" onClick={this.onAcceptInvitation.bind(this)}>Accept</Button>\n                        <Button icon=\"stop\" type=\"danger\" size=\"small\" onClick={this.onRejectInvitation.bind(this)}>Reject</Button>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                const menu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={menu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                const adminMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\" >\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={adminMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n            case (orgModel.UserRelationToOrganization.OWNER):\n                const ownerMenu = (\n                    <Menu onClick={this.onMenuClick.bind(this)}>\n                        <Menu.Item key=\"manageMyMembership\">\n                            <Icon type=\"user\" />{' '}Manage My Membership\n                        </Menu.Item>\n                        <Menu.Item key=\"editOrg\">\n                            <Icon type=\"edit\" />{' '}Edit this Org\n                        </Menu.Item>\n                        <Menu.Item key=\"inviteUser\">\n                            <Icon type=\"mail\" />{' '}Invite User\n                        </Menu.Item>\n                        <Menu.Item key=\"addNarrative\">\n                            <Icon type=\"file\" />{' '}Add Narrative\n                        </Menu.Item>\n                        <Menu.Item key=\"manageRelatedOrgs\">\n                            <Icon type=\"team\" />{' '}Manage Related Orgs\n                        </Menu.Item>\n                    </Menu>\n                )\n                return (\n                    <span>\n                        <Dropdown overlay={ownerMenu} trigger={['click']}>\n                            <Button shape=\"circle\">\n                                <Icon type=\"setting\" theme=\"filled\" style={{ fontSize: '120%' }} />\n                            </Button>\n                        </Dropdown>\n                    </span>\n                )\n        }\n    }\n\n\n    toggleAccordion() {\n        this.setState({\n            accordionState: this.state.accordionState === AccordionState.UP ? AccordionState.DOWN : AccordionState.UP\n        })\n    }\n\n    renderAccordionControl() {\n        let iconType\n        if (this.state.accordionState === AccordionState.UP) {\n            iconType = 'caret-down'\n        } else {\n            iconType = 'caret-up'\n        }\n        return (\n            <div className=\"ViewOrganization-accordion\" onClick={this.toggleAccordion.bind(this)}>\n                <div className=\"ViewOrganization-accordionCol1\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-accordionCol2\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                        <Icon type={iconType} />\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                    {/* <div className=\"ViewOrganization-accordionIcon\">\n                        <Icon type={iconType} />\n                    </div> */}\n                </div>\n                <div className=\"ViewOrganization-accordionCol3\">\n                    <div className=\"ViewOrganization-accordionRow1\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow2\">\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow3\">\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n\n    renderNormalView() {\n        let orgRowClass\n        let narrativesRowClass\n        if (this.state.accordionState === AccordionState.UP) {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionClosed\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionOpen\"\n        } else {\n            orgRowClass = \"ViewOrganization-orgRow ViewOrganization-accordionOpen\"\n            narrativesRowClass = \"ViewOrganization-narrativesRow ViewOrganization-accordionClosed\"\n        }\n        orgRowClass += \" scrollable-flex-column\"\n        narrativesRowClass += \" scrollable-flex-column\"\n        return (\n            <div className=\"ViewOrganization-mainRow scrollable-flex-column\">\n                <div className=\"ViewOrganization-mainColumn  scrollable-flex-column\">\n                    <div className={orgRowClass} style={{ minHeight: '0px' }}>\n                        {this.renderOrg()}\n                    </div>\n                    <div className=\"ViewOrganization-accordionRow\">\n                        {this.renderAccordionControl()}\n                    </div>\n                    <div className={narrativesRowClass}>\n                        {this.renderNarratives()}\n                    </div>\n                </div>\n                <div className=\"ViewOrganization-infoColumn\">\n                    {this.renderCombo()}\n                </div>\n            </div>\n        )\n    }\n\n    renderManageRelatedOrgsView() {\n        const onFinish = () => {\n            this.setState({\n                subView: SubViews.NORMAL\n            })\n        }\n        return (\n            <ManageRelatedOrganizations\n                // organization={this.props.viewModel.organization}\n                // relatedOrganizations={[]}\n                // relation={this.props.viewModel.relation}\n                onFinish={onFinish} />\n        )\n    }\n\n    getSubView() {\n        switch (this.state.subView) {\n\n            case SubViews.MANAGE_RELATED_ORGS:\n                return this.renderManageRelatedOrgsView()\n            case SubViews.NORMAL:\n            default:\n                return this.renderNormalView()\n        }\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.REQUEST_ADD_NARRATIVE:\n                return <Redirect to={\"/requestAddNarrative/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.MANAGE_MEMBERSHIP:\n                return <Redirect push to={\"/membership/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.VIEW_MEMBERS:\n                return <Redirect push to={\"/viewMembers/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.EDIT_ORGANIZATION:\n                return <Redirect push to={\"/editOrganization/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.MANAGE_REQUESTS:\n                return <Redirect push to={\"/manageOrganizationRequests/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.INVITE_USER:\n                return <Redirect push to={\"/inviteUser/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.VIEW_ORGANIZATION:\n                return <Redirect push to={\"/viewOrganization/\" + this.props.viewModel.organization.id} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        const uorg = this.props.viewModel.organization as unknown\n        const borg = uorg as orgModel.BriefOrganization\n\n        return (\n            <div className=\"ViewOrganization  scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                <div style={{ borderBottom: '1px silver solid' }}>\n                    <BriefOrganization organization={borg} openRequestsStatus={this.props.viewModel.openRequest} />\n                </div>\n                {this.getSubView()}\n            </div>\n\n        )\n    }\n}\n\nexport default ViewOrganization","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind, ViewOrgViewModel } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\nimport * as acceptInboxRequestActions from '../../../../redux/actions/viewOrganization/acceptInboxRequest'\nimport * as notificationActions from '../../../../redux/actions/notifications'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\nimport * as feedsModel from '../../../../data/models/feeds'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    viewModel: ViewOrgViewModel\n    // organization: orgModel.Organization\n    // relation: orgModel.Relation\n    // openRequest: orgModel.RequestStatus\n    // groupRequests: Array<requestModel.Request> | null\n    // groupInvitations: Array<requestModel.Request> | null\n    // requestOutbox: Array<requestModel.Request>\n    // requestInbox: Array<requestModel.Request>\n    // notifications: Array<feedsModel.OrganizationNotification>\n    // sortNarrativesBy: string\n    // searchNarrativesBy: string\n    // narratives: Array<orgModel.NarrativeResource>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onViewOrg: (id: string) => void\n    onReloadOrg: (id: string) => void\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: requestModel.RequestID) => void\n    onAcceptInvitation: (requestId: requestModel.RequestID) => void\n    onRejectInvitation: (requestId: requestModel.RequestID) => void\n    onRemoveNarrative: (narrative: orgModel.NarrativeResource) => void\n    onGetViewAccess: (narrative: orgModel.NarrativeResource) => void\n    onAcceptRequest: (requestId: requestModel.RequestID) => void\n    onReadNotification: (notificationId: string) => void\n    onSortNarratives: (sortBy: string) => void\n    onSearchNarratives: (searchBy: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.NORMAL) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    // const {\n    //     organization, relation, openRequest, groupRequests, groupInvitations,\n    //     requestInbox, requestOutbox, sortNarrativesBy, narratives, searchNarrativesBy\n    // } = viewModel\n    // const {\n    //     db: {\n    //         notifications: { all }\n    //     }\n    // } = state\n\n    // const notifications = all.filter((notification) => {\n    //     return (notification.organizationId === viewModel.organization.id)\n    // })\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        viewModel\n        // organization, relation, openRequest, groupRequests, groupInvitations,\n        // requestInbox, requestOutbox, notifications, sortNarrativesBy,\n        // searchNarrativesBy,\n        // narratives\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onViewOrg: (id: string) => {\n            dispatch(actions.load(id) as any)\n        },\n        onReloadOrg: (id: string) => {\n            dispatch(actions.reload(id) as any)\n        },\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: requestModel.RequestID) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: requestModel.RequestID) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n        onRemoveNarrative: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.removeNarrative(narrative) as any)\n        },\n        onGetViewAccess: (narrative: orgModel.NarrativeResource) => {\n            dispatch(actions.accessNarrative(narrative) as any)\n        },\n        onAcceptRequest: (requestId: requestModel.RequestID) => {\n            dispatch(acceptInboxRequestActions.acceptRequest(requestId) as any)\n        },\n        onReadNotification: (notificationId: string) => {\n            dispatch(notificationActions.read(notificationId) as any)\n        },\n        onSortNarratives: (sortBy: string) => {\n            dispatch(actions.sortNarratives(sortBy) as any)\n        },\n        onSearchNarratives: (searchBy: string) => {\n            dispatch(actions.searchNarratives(searchBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ViewOrganization) \n\n","import * as React from 'react'\n\nimport './component.css'\n\nimport { Button, Modal, Icon, Alert } from 'antd'\nimport Header from '../../../Header'\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\nenum NavigateTo {\n    NONE = 0,\n    REQUEST_ADD_NARRATIVE\n}\n\nexport interface ViewOrganizationState {\n    showInfo: boolean\n    navigateTo: NavigateTo\n    requestAccess: {\n        narrative: orgModel.NarrativeResource | null\n    }\n}\n\nexport interface ViewOrganizationProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\nclass ViewOrganization extends React.Component<ViewOrganizationProps, ViewOrganizationState> {\n    constructor(props: ViewOrganizationProps) {\n        super(props)\n\n        this.state = {\n            showInfo: false,\n            navigateTo: NavigateTo.NONE,\n            requestAccess: {\n                narrative: null\n            }\n        }\n    }\n\n    onShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'View Organization Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This organization is <b>private</b>.</p>\n                    <p>Nothing about this organization may be revealed to non-members.</p>\n                    <p>You may request membership</p>\n                    <p>Upon requesting membership, the organization administrators may grant you membership</p>\n                    <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                </div>\n            )\n        })\n    }\n\n    onJoinClick() {\n        this.props.onJoinOrg()\n    }\n\n    onCancelJoinRequest() {\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onCancelJoinRequest(relation.requestId)\n    }\n\n    onAcceptInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onAcceptInvitation(relation.requestId)\n    }\n\n    onRejectInvitation() {\n        if (!this.props.organization) {\n            return\n        }\n        const relation = this.props.relation as orgModel.MembershipRequestPendingRelation\n        this.props.onRejectInvitation(relation.requestId)\n    }\n\n    renderMessage() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <React.Fragment>\n                        <p>This organization is <b>private</b> and you are not a member.</p>\n                        <p>Nothing about a private organization may be revealed to a non-member.</p>\n                        <p>However, you may request membership</p>\n                        <p>Upon requesting membership, the organization administrators will be notified.</p>\n                        <p>When your request is either accepted or denied, you will received a notification in your KBase Feed.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>Your membership request to this private organization is pending.</p>\n                    </React.Fragment>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <React.Fragment>\n                        <p>You have been invited to this private organization.</p>\n                    </React.Fragment>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderOrg() {\n        const message = (\n            <span>\n                Private Organization\n            </span>\n        )\n        const description = (\n            <React.Fragment>\n                {this.renderMessage()}\n                <div>\n                    {this.renderJoinButton()}\n                </div>\n            </React.Fragment>\n        )\n        return (\n            <Alert\n                message={message}\n                description={description}\n                type=\"info\"\n                showIcon={true}\n                icon={(<Icon type=\"lock\" />)}\n                style={{ width: '50em', margin: '20px auto' }}\n                className=\"ViewInaccessiblePrivateOrganization-message\" />\n        )\n    }\n\n    renderRelationClass(relation: orgModel.Relation) {\n        switch (relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return 'infoBox relationRequestPending'\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return 'infoBox relationInvitationPending'\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return 'infoBox'\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return 'infoBox'\n        }\n    }\n\n    renderJoinButton() {\n        switch (this.props.relation.type) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <Button\n                        onClick={this.onJoinClick.bind(this)}\n                    >\n                        Join this Organization\n                    </Button>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (\n                    <div>\n                        <div><Button\n                            icon=\"delete\"\n                            type=\"danger\"\n                            onClick={this.onCancelJoinRequest.bind(this)}>Cancel Request</Button>\n                        </div>\n                    </div>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (\n                    <div>\n                        <Button icon=\"check\" type=\"default\" onClick={this.onAcceptInvitation.bind(this)}>Accept Invitation</Button>\n                        {' '}\n                        <Button icon=\"stop\" type=\"danger\" onClick={this.onRejectInvitation.bind(this)}>Reject Invitation</Button>\n                    </div>\n                )\n            default:\n                return (\n                    <div>\n                        Weird, {this.props.relation.type}.\n                    </div>\n                )\n        }\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <div style={{ flex: '0 0 auto' }}>\n            </div>\n        )\n        const buttons = (\n            <React.Fragment>\n\n                <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ViewInaccessiblePrivateOrganization  scrollable-flex-column\">\n                {this.renderHeader()}\n                {this.renderOrg()}\n            </div>\n        )\n    }\n}\n\nexport default ViewOrganization","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types'\nimport * as feedsModel from '../../data/models/feeds';\n\nexport interface Load extends Action<ActionFlag.NOTIFICATIONS_LOAD> {\n    type: ActionFlag.NOTIFICATIONS_LOAD\n}\n\nexport interface LoadStart extends Action<ActionFlag.NOTIFICATIONS_LOAD_START> {\n    type: ActionFlag.NOTIFICATIONS_LOAD_START\n}\n\nexport interface LoadSuccess extends Action<ActionFlag.NOTIFICATIONS_LOAD_SUCCESS> {\n    type: ActionFlag.NOTIFICATIONS_LOAD_SUCCESS,\n    notifications: Array<feedsModel.OrganizationNotification>\n}\n\nexport interface LoadError extends Action<ActionFlag.NOTIFICATIONS_LOAD_ERROR> {\n    type: ActionFlag.NOTIFICATIONS_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.NOTIFICATIONS_UNLOAD> {\n    type: ActionFlag.NOTIFICATIONS_UNLOAD\n}\n\nexport interface Read extends Action<ActionFlag.NOTIFICATIONS_READ> {\n    type: ActionFlag.NOTIFICATIONS_READ,\n    notificationId: feedsModel.NotificationID\n}\n\nexport interface ReadStart extends Action<ActionFlag.NOTIFICATIONS_READ_START> {\n    type: ActionFlag.NOTIFICATIONS_READ_START\n}\n\nexport interface ReadSuccess extends Action<ActionFlag.NOTIFICATIONS_READ_SUCCESS> {\n    type: ActionFlag.NOTIFICATIONS_READ_SUCCESS,\n    notificationId: feedsModel.NotificationID\n}\n\nexport interface ReadError extends Action<ActionFlag.NOTIFICATIONS_READ_ERROR> {\n    type: ActionFlag.NOTIFICATIONS_READ_ERROR,\n    error: AppError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.NOTIFICATIONS_LOAD_START\n    }\n}\n\nexport function loadSuccess(notifications: Array<feedsModel.OrganizationNotification>): LoadSuccess {\n    return {\n        type: ActionFlag.NOTIFICATIONS_LOAD_SUCCESS,\n        notifications: notifications\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.NOTIFICATIONS_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.NOTIFICATIONS_UNLOAD\n    }\n}\n\nexport function load() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const feedsClient = new feedsModel.FeedsClient({\n            token, username,\n            feedsServiceURL: config.services.Feeds.url\n        })\n\n        try {\n            const notifications = await feedsClient.getOrganizationNotifications()\n            // const groupNotifications = notifications.filter((notification) => {\n            //     return (notification.source === 'groupsservice')\n            // })\n            dispatch(loadSuccess(notifications))\n        } catch (ex) {\n            console.error('error', ex)\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\nexport function read(notificationId: feedsModel.NotificationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.NOTIFICATIONS_READ_START\n        } as ReadStart)\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const feedsClient = new feedsModel.FeedsClient({\n            token, username,\n            feedsServiceURL: config.services.Feeds.url\n        })\n\n        try {\n            const notifications = await feedsClient.seeNotification(notificationId)\n            // const groupNotifications = notifications.filter((notification) => {\n            //     return (notification.source === 'groupsservice')\n            // })\n            dispatch({\n                type: ActionFlag.NOTIFICATIONS_READ_SUCCESS,\n                notificationId: notificationId\n            } as ReadSuccess)\n        } catch (ex) {\n            console.error('error', ex)\n            dispatch({\n                type: ActionFlag.NOTIFICATIONS_READ_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            } as ReadError)\n        }\n    }\n}\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, ViewOrgViewModelKind } from '../../../../types'\nimport * as actions from '../../../../redux/actions/viewOrg'\n\nimport ViewOrganization from './component'\n\nimport * as orgModel from '../../../../data/models/organization/model'\nimport * as requestModel from '../../../../data/models/requests'\n\n// Props for this component\n\n// The interface for this container component\nexport interface OwnProps {\n}\n\n// the interface for mapStateTo props\ninterface StateProps {\n    organization: orgModel.InaccessiblePrivateOrganization\n    relation: orgModel.Relation\n    requestOutbox: Array<requestModel.Request>\n}\n\n// the interface for mapDispatchToProps\ninterface DispatchProps {\n    onJoinOrg: () => void\n    onCancelJoinRequest: (requestId: string) => void\n    onAcceptInvitation: (requestId: string) => void\n    onRejectInvitation: (requestId: string) => void\n}\n\n// hmm this bit would be for the interface for the wrapped component.\n// can't really do that here, but _could_ export the interfaces above\n// and compose them thus in the wrapped component. But the wrapped component\n// should know nothing about this business\n// type Props = StateProps & DispatchProps & OwnProps\n\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const viewModel = state.views.viewOrgView.viewModel\n    if (!viewModel) {\n        throw new Error('argh, view model missing')\n    }\n    if (viewModel.kind !== ViewOrgViewModelKind.PRIVATE_INACCESSIBLE) {\n        throw new Error(\"argh, wrong org kind\")\n    }\n    const {\n        organization, relation, requestOutbox\n    } = viewModel\n    const {\n        db: {\n            notifications: { all }\n        }\n    } = state\n\n    const notifications = all.filter((notification) => {\n        return (notification.organizationId === organization.id)\n    })\n    // TODO: of course this really needs to be an async fetch of the org info!\n    return {\n        organization, relation, requestOutbox\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onJoinOrg: () => {\n            dispatch(actions.viewOrgJoinRequest() as any)\n        },\n        onCancelJoinRequest: (requestId: string) => {\n            dispatch(actions.viewOrgCancelJoinRequest(requestId) as any)\n        },\n        onAcceptInvitation: (requestId: string) => {\n            dispatch(actions.acceptJoinInvitation(requestId) as any)\n        },\n        onRejectInvitation: (requestId: string) => {\n            dispatch(actions.rejectJoinInvitation(requestId) as any)\n        },\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(ViewOrganization)\n","import * as React from 'react'\n\nimport AccessibleContainer from './accessible/container'\nimport InaccessibleContainer from './inaccessible/container'\nimport { Spin, Alert } from 'antd';\n\nexport interface Props {\n    organizationId: string\n    view: types.ViewOrgView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        const message = (\n            <div>\n                Loading your Organization...\n                {' '}\n                <Spin />\n            </div>\n        )\n        return (\n            <Alert type=\"info\" message={message} style={{\n                width: '20em',\n                padding: '20px',\n                margin: '20px auto'\n            }} />\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                if (this.props.view.viewModel === null) {\n                    return this.renderError({\n                        code: 'Null Error',\n                        message: 'The view model is missing, but should be available'\n                    })\n                }\n                if (this.props.view.viewModel.organization.kind === OrganizationKind.INACCESSIBLE_PRIVATE) {\n                    return (\n                        <InaccessibleContainer />\n                    )\n                    // return this.renderError({\n                    //     code: 'Unsupported',\n                    //     message: 'Private orgs are not currently supported'\n                    // })\n                }\n                return (\n                    <AccessibleContainer />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/viewOrg'\nimport { OrganizationKind } from '../../../data/models/organization/model';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.ViewOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.viewOrgView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport { StoreState, AppError, EditableOrganization, ValidationState, EditState, ValidationErrorType, SyncState } from '../../types'\nimport Validation from '../../data/models/organization/validation'\nimport * as orgModel from '../../data/models/organization/model'\n\n// ACTIONS\n\n// Loading the editor\nexport interface Load extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD,\n    organizationId: string\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface LoadError extends Action<ActionFlag.EDIT_ORG_LOAD_ERROR> {\n    type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action<ActionFlag.EDIT_ORG_UNLOAD> {\n    type: ActionFlag.EDIT_ORG_UNLOAD\n}\n\n// Evaluating state of form \n\nexport interface EditOrgEvaluate extends Action<ActionFlag.EDIT_ORG_EVALUATE> {\n    type: ActionFlag.EDIT_ORG_EVALUATE\n}\n\nexport interface EditOrgEvaluateOK extends Action<ActionFlag.EDIT_ORG_EVALUATE_OK> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_OK\n}\n\nexport interface EditOrgEvaluateErrors extends Action<ActionFlag.EDIT_ORG_EVALUATE_ERRORS> {\n    type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n}\n\n// Saving\n\nexport interface EditOrgSave extends Action<ActionFlag.EDIT_ORG_SAVE> {\n    type: ActionFlag.EDIT_ORG_SAVE\n}\n\nexport interface EditOrgSaveStart extends Action<ActionFlag.EDIT_ORG_SAVE_START> {\n    type: ActionFlag.EDIT_ORG_SAVE_START\n}\n\nexport interface EditOrgSaveSuccess extends Action<ActionFlag.EDIT_ORG_SAVE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n}\n\nexport interface EditOrgSaveError extends Action<ActionFlag.EDIT_ORG_SAVE_ERROR> {\n    type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n    error: AppError\n}\n\n// Updating name field\n\nexport interface EditOrgUpdateName extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME,\n    name: string\n}\n\nexport interface EditOrgUpdateNameSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n    name: string\n}\n\nexport interface EditOrgUpdateNameError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n    name: string,\n    error: ValidationState\n}\n\n// Updating logo url field\n\nexport interface EditOrgUpdateLogoUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL,\n    name: string | null\n}\n\nexport interface EditOrgUpdateLogoUrlSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n    logoUrl: string | null\n}\n\nexport interface EditOrgUpdateLogoUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n    logoUrl: string | null,\n    error: ValidationState\n}\n\n// Updating home url field\nexport interface UpdateHomeUrl extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS\n    homeUrl: string | null\n}\n\nexport interface UpdateHomeUrlError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR\n    homeUrl: string | null\n    error: ValidationState\n}\n\n// Updating research interests field\nexport interface UpdateResearchInterests extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsSuccess extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS\n    researchInterests: string\n}\n\nexport interface UpdateResearchInterestsError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR\n    researchInterests: string\n    error: ValidationState\n}\n\n// Updating description field\n\nexport interface EditOrgUpdateDescription extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionSuccess {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n    description: string\n}\n\nexport interface EditOrgUpdateDescriptionError extends Action {\n    type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n    description: string,\n    error: ValidationState\n}\n\nexport interface UpdateIsPrivate extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateSuccess extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n    isPrivate: boolean\n}\n\nexport interface UpdateIsPrivateError extends Action<ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR> {\n    type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_ERROR,\n    error: ValidationState\n}\n\n\n// ACTION CREATORS\n\n// export function editOrgStart(id: string): LoadStart {\n//     return {\n//         type: ActionFlag.EDIT_ORG_LOAD_START,\n//         id: id\n//     }\n// }\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_START\n    }\n}\n\nexport function loadSuccess(editedOrganization: EditableOrganization, organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_SUCCESS,\n        editedOrganization: editedOrganization,\n        organization: organization\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.EDIT_ORG_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.EDIT_ORG_UNLOAD\n    }\n}\n\n// Evaluate\n\nexport function editOrgEvaluateOk(): EditOrgEvaluateOK {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_OK\n    }\n}\n\nexport function editOrgEvaluateErrors(): EditOrgEvaluateErrors {\n    return {\n        type: ActionFlag.EDIT_ORG_EVALUATE_ERRORS\n    }\n}\n\n// Save\n\n// export function editOrgSave(): EditOrgSave {\n//     return {\n//         type: ActionFlag.EDIT_ORG_SAVE\n//     }\n// }\n\nexport function editOrgSaveStart(): EditOrgSaveStart {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_START\n    }\n}\n\nexport function editOrgSaveSuccess(): EditOrgSaveSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_SUCCESS\n    }\n}\n\nexport function editOrgSaveError(error: AppError): EditOrgSaveError {\n    return {\n        type: ActionFlag.EDIT_ORG_SAVE_ERROR,\n        error: error\n    }\n}\n\n// Update Name\n\nexport function editOrgUpdateNameSuccess(name: string): EditOrgUpdateNameSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_SUCCESS,\n        name: name\n    }\n}\n\nexport function editOrgUpdateNameError(name: string, error: ValidationState): EditOrgUpdateNameError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_NAME_ERROR,\n        name: name,\n        error: error\n    }\n}\n\n// export function editOrgUpdateIdSuccess(id: string): EditOrgUpdateIdSuccess {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_SUCCESS,\n//         id: id\n//     }\n// }\n\n// Update Logo Url\n\nexport function editOrgUpdateLogoUrlSuccess(logoUrl: string | null): EditOrgUpdateLogoUrlSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_SUCCESS,\n        logoUrl: logoUrl\n    }\n}\n\nexport function editOrgUpdateLogoUrlError(logoUrl: string | null, error: ValidationState): EditOrgUpdateLogoUrlError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_LOGO_URL_ERROR,\n        logoUrl: logoUrl,\n        error: error\n    }\n}\n\n\n// Update Id\n\n// export function editOrgUpdateIdError(id: string, error: UIError): EditOrgUpdateIdError {\n//     return {\n//         type: ActionFlag.EDIT_ORG_UPDATE_ID_ERROR,\n//         id: id,\n//         error: error\n//     }\n// }\n\nexport function editOrgUpdateDescriptionSuccess(description: string): EditOrgUpdateDescriptionSuccess {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_SUCCESS,\n        description: description\n    }\n}\n\nexport function editOrgUpdateDescriptionError(description: string, error: ValidationState): EditOrgUpdateDescriptionError {\n    return {\n        type: ActionFlag.EDIT_ORG_UPDATE_DESCRIPTION_ERROR,\n        description: description,\n        error: error\n    }\n}\n\n// ACTION THUNKS\n\nexport function load(organizationId: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        // const model = new Model({\n        //     token, username,\n        //     groupsServiceURL: config.services.Groups.url,\n        //     userProfileServiceURL: config.services.UserProfile.url,\n        //     workspaceServiceURL: config.services.Workspace.url,\n        //     serviceWizardURL: config.services.ServiceWizard.url\n        // })\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        return orgClient.getOrg(organizationId)\n            .then((org) => {\n                if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                    throw new Error('May not edit an inaccessible private org!')\n                }\n                const editableOrg: EditableOrganization = {\n                    id: {\n                        value: org.id,\n                        remoteValue: org.id,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgId(org.id)[1]\n                    },\n                    name: {\n                        value: org.name,\n                        remoteValue: org.name,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgName(org.name)[1]\n                    },\n                    logoUrl: {\n                        value: org.logoUrl,\n                        remoteValue: org.logoUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgLogoUrl(org.logoUrl)[1]\n                    },\n                    homeUrl: {\n                        value: org.homeUrl,\n                        remoteValue: org.homeUrl,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgHomeUrl(org.homeUrl)[1]\n                    },\n                    researchInterests: {\n                        value: org.researchInterests,\n                        remoteValue: org.researchInterests,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgResearchInterests(org.researchInterests)[1]\n                    },\n                    description: {\n                        value: org.description,\n                        remoteValue: org.description,\n                        syncState: SyncState.NEW,\n                        validationState: Validation.validateOrgDescription(org.description)[1]\n                    },\n                    isPrivate: {\n                        value: org.isPrivate,\n                        remoteValue: org.isPrivate,\n                        syncState: SyncState.NEW,\n                        validationState: {\n                            type: ValidationErrorType.OK,\n                            validatedAt: new Date()\n                        }\n                    }\n                }\n                dispatch(loadSuccess(editableOrg, org))\n            })\n            .catch((err) => {\n                console.error('load org error', err)\n                dispatch(loadError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function editOrgSave() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(editOrgSaveStart())\n\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                editOrgView: {\n                    viewModel: { organization, editedOrganization }\n                }\n            },\n            app: { config } } = state\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        if (!editedOrganization) {\n            dispatch(editOrgSaveError({\n                code: 'app',\n                message: 'The new organization data does not yet exist'\n            }))\n            return;\n        }\n\n        const update = {\n            name: editedOrganization.name.value,\n            logoUrl: editedOrganization.logoUrl.value,\n            description: editedOrganization.description.value,\n            isPrivate: editedOrganization.isPrivate.value,\n            homeUrl: editedOrganization.homeUrl.value,\n            researchInterests: editedOrganization.researchInterests.value\n        }\n\n        orgClient.updateOrg(organization.id, update)\n            .then(() => {\n                dispatch(editOrgSaveSuccess())\n            })\n            .catch((error) => {\n                console.error('error adding', editedOrganization, error)\n                dispatch(editOrgSaveError({\n                    code: 'invalid',\n                    message: error.message\n                }))\n            })\n    }\n}\n\nexport function editOrgEvaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.editOrgView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                editOrgView: {\n                    viewModel: {\n                        editedOrganization\n                    }\n                }\n            }\n        } = state\n\n        if (!editedOrganization) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.name.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.logoUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.homeUrl.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.researchInterests.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        if (editedOrganization.description.validationState.type !== ValidationErrorType.OK) {\n            dispatch(editOrgEvaluateErrors())\n            return\n        }\n\n        dispatch(editOrgEvaluateOk())\n    }\n}\n\nexport function updateName(name: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedName, error] = Validation.validateOrgName(name)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateNameError(validatedName, error))\n        } else {\n            dispatch(editOrgUpdateNameSuccess(validatedName))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateLogoUrl(logoUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedLogoUrl, error] = Validation.validateOrgLogoUrl(logoUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateLogoUrlError(validatedLogoUrl, error))\n        } else {\n            dispatch(editOrgUpdateLogoUrlSuccess(validatedLogoUrl))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateHomeUrl(homeUrl: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedHomeUrl, error] = Validation.validateOrgHomeUrl(homeUrl)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_ERROR,\n                homeUrl: validatedHomeUrl,\n                error: error\n            } as UpdateHomeUrlError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_HOME_URL_SUCCESS,\n                homeUrl: validatedHomeUrl\n            } as UpdateHomeUrlSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateResearchInterests(researchInterests: string | null) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedResearchInterests, error] = Validation.validateOrgHomeUrl(researchInterests)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_ERROR,\n                researchInterests: validatedResearchInterests,\n                error: error\n            } as UpdateResearchInterestsError)\n        } else {\n            dispatch({\n                type: ActionFlag.EDIT_ORG_UPDATE_RESEARCH_INTERESTS_SUCCESS,\n                researchInterests: validatedResearchInterests\n            } as UpdateResearchInterestsSuccess)\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateDescription(description: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>,\n        getState: () => StoreState) => {\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        const [validatedDescription, error] = Validation.validateOrgDescription(description)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch(editOrgUpdateDescriptionError(validatedDescription, error))\n        } else {\n            dispatch(editOrgUpdateDescriptionSuccess(validatedDescription))\n        }\n        dispatch(editOrgEvaluate())\n    }\n}\n\nexport function updateIsPrivate(isPrivate: boolean) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        // No validation for now.\n        dispatch({\n            type: ActionFlag.EDIT_ORG_UPDATE_IS_PRIVATE_SUCCESS,\n            isPrivate: isPrivate\n        })\n        dispatch(editOrgEvaluate())\n    }\n} ","import * as React from 'react'\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { Marked } from 'marked-ts';\nimport { Button, Icon, Modal, Checkbox, Input, Tooltip } from 'antd';\nimport md5 from 'md5'\n\nimport {\n    EditableOrganization, SaveState, ValidationState,\n    EditState, ValidationErrorType, Editable, SyncState\n} from '../../../types';\n\nimport './component.css'\n\nimport Header from '../../Header';\nimport OrganizationHeader from '../organizationHeader/loader';\nimport * as orgModel from '../../../data/models/organization/model'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport TextArea from 'antd/lib/input/TextArea';\nimport MainMenu from '../../menu/component';\n\nexport interface EditOrganizationProps {\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    editedOrganization: EditableOrganization\n    organization: orgModel.Organization\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateLogoUrl: (logoUrl: string) => void\n    onUpdateHomeUrl: (homeUrl: string) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\nexport interface EditOrganizationState {\n    cancelToBrowser: boolean;\n    cancelToViewer: boolean;\n    navigateTo: NavigateTo;\n}\n\nclass EditOrganization extends React.Component<EditOrganizationProps, EditOrganizationState> {\n\n    origin: string;\n\n    constructor(props: EditOrganizationProps) {\n        super(props)\n\n        this.state = {\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            navigateTo: NavigateTo.NONE\n        }\n\n        this.origin = document.location!.origin\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Organization Editor Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the organizations editor...</p>\n                </div>\n            )\n        })\n    }\n\n    onClickCancelToBrowser() {\n        if (!this.isModified()) {\n            this.setState({ cancelToBrowser: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToBrowser: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onClickCancelToViewer() {\n        if (!this.isModified()) {\n            this.setState({ cancelToViewer: true })\n            return\n        }\n\n        const confirm = () => {\n            this.setState({ cancelToViewer: true })\n        }\n        const cancel = () => {\n        }\n        Modal.confirm({\n            title: 'Leave the editor?',\n            content: (\n                <div>\n                    <p>You have made changes on this edit form.</p>\n\n                    <p>If you leave the editor without saving, any <i>changes they will be lost</i>.</p>\n\n                    <p><b>Continue to leave the editor?</b></p>\n                </div>\n            ),\n            onOk: confirm,\n            onCancel: cancel,\n            okText: 'Yes',\n            cancelText: 'No'\n        })\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onEditOrgSave()\n    }\n\n    onNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateName(e.target.value)\n    }\n\n    onDescriptionChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateDescription(e.target.value)\n    }\n\n    onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        console.warn('no updating id, naughty!')\n    }\n\n    onIsPrivateChange(e: CheckboxChangeEvent) {\n        this.props.onUpdateIsPrivate(e.target.checked)\n    }\n\n    onLogoUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateLogoUrl(e.target.value)\n    }\n\n    onHomeUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateHomeUrl(e.target.value)\n    }\n\n    onResearchInterestsChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\n        e.persist()\n        this.props.onUpdateResearchInterests(e.target.value)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    isModified() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY)\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'sync-dirty'\n            default:\n                return 'validation-ok'\n        }\n    }\n\n    renderFieldError(field: Editable) {\n        if (field.validationState.type !== ValidationErrorType.OK) {\n            if (field.syncState === SyncState.DIRTY) {\n                return (\n                    <span style={{ color: 'red' }}>\n                        {field.validationState.message}\n                    </span>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editOrganizationForm\" className=\"EditOrganization-editor\" onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div style={{ flex: '1 1 0px' }}>\n                            <h3>Edit Your Organization</h3>\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <h3>Preview</h3>\n                    </div>\n                </div>\n\n                {/* Org name */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            <Tooltip title=\"This is the name for your organization as you want KBase users to see it\">\n                                Name\n                            </Tooltip>\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <Input value={this.props.editedOrganization.name.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.name)}\n                                onChange={this.onNameChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.name)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-name\">\n                            {this.props.editedOrganization.name.value || ''}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Org ID */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            ID\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <Input value={this.props.editedOrganization.id.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.id)}\n                                onChange={this.onIdChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.id)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-id\">\n                            <span style={{ color: 'silver' }}>{this.origin}/#org/</span>\n                            {this.props.editedOrganization.id.value || (<span style={{ fontStyle: 'italic' }}>organization id here</span>)}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Logo URL */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            Logo URL\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <Input value={this.props.editedOrganization.logoUrl.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.logoUrl)}\n                                onChange={this.onLogoUrlChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.logoUrl)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-logo\">\n                            {this.renderLogoPreview()}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Home Page URL */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            Home Page URL\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <Input value={this.props.editedOrganization.homeUrl.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.homeUrl)}\n                                onChange={this.onHomeUrlChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.homeUrl)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-field-name\">\n                            <a href={this.props.editedOrganization.homeUrl.value || ''} target=\"_blank\">{this.props.editedOrganization.homeUrl.value || ''}</a>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Is Private? */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            Is Private?\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <Checkbox\n                                checked={this.props.editedOrganization.isPrivate.value}\n                                className={this.calcFieldClass(this.props.editedOrganization.isPrivate)}\n                                onChange={this.onIsPrivateChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.isPrivate)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-isPrivate\">\n                            {this.renderIsPrivate(this.props.editedOrganization.isPrivate.value)}\n                        </div>\n                    </div>\n                </div>\n\n\n                {/* Research Interests */}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                            Research Interests\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <TextArea value={this.props.editedOrganization.researchInterests.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.researchInterests) + ' EditOrganization-control-researchInterests'}\n                                autosize={{ minRows: 2, maxRows: 2 }}\n                                onChange={this.onResearchInterestsChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.researchInterests)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-researchInterests\">\n                            {this.props.editedOrganization.researchInterests.value || ''}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Description*/}\n                <div className=\"EditOrganization-row\">\n                    <div className=\"EditOrganization-col1\">\n                        <div className=\"EditOrganization-formLabel field-label\">\n                        </div>\n                        <div className=\"EditOrganization-formControl\">\n                            <TextArea value={this.props.editedOrganization.description.value || ''}\n                                className={this.calcFieldClass(this.props.editedOrganization.description) + ' EditOrganization-control-description'}\n                                autosize={{ minRows: 5, maxRows: 15 }}\n                                onChange={this.onDescriptionChange.bind(this)} />\n                            {this.renderFieldError(this.props.editedOrganization.description)}\n                        </div>\n                    </div>\n                    <div className=\"EditOrganization-col2\">\n                        <div className=\"EditOrganization-preview-description\"\n                            dangerouslySetInnerHTML={({ __html: Marked.parse(this.props.editedOrganization.description.value || '') })}\n                        />\n                    </div>\n                </div>\n            </form >\n        )\n    }\n\n    renderIsPrivate(isPrivate: boolean) {\n        if (isPrivate) {\n            return (\n                <span>\n                    <Icon type=\"lock\" />{' '}Private\n                </span>\n            )\n        }\n        return (\n            <span>\n                <Icon type=\"global\" />{' '}Public\n            </span>\n        )\n    }\n\n    renderLogoPreview() {\n        if (!this.props.editedOrganization.logoUrl.value) {\n            return this.renderDefaultLogo()\n        }\n        return (\n            <img src={this.props.editedOrganization.logoUrl.value} width={60} />\n        )\n    }\n\n    charAt(inString: string, position: number) {\n        const c1 = inString.charCodeAt(position)\n        if (c1 >= 0xD800 && c1 <= 0xDBFF && inString.length > position + 1) {\n            const c2 = inString.charCodeAt(position + 1)\n            if (c2 > 0xDC00 && c2 <= 0xDFFF) {\n                return inString.substring(position, 2)\n            }\n        }\n        return inString.substring(position, 1)\n    }\n\n    renderDefaultLogo() {\n        if (!(this.props.editedOrganization.name.value && this.props.editedOrganization.id.value)) {\n            return (\n                <div>\n                    Default logo preview available when the Organization name and id are completed\n                </div>\n            )\n        }\n        const initial = this.charAt(this.props.editedOrganization.name.value, 0).toUpperCase()\n        const hash = md5(this.props.editedOrganization.id.value)\n        const size = 60;\n        const color = hash.substr(0, 6)\n        return (\n            <svg width={size} height={size} style={{ border: '1px rgba(200, 200, 200, 0.5) solid' }}>\n                <text x=\"50%\" y=\"50%\" dy={4} textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize={size - 12} fill={'#' + color} fontFamily=\"sans-serif\">{initial}</text>\n            </svg>\n        )\n    }\n\n    renderState() {\n        const { editState, validationState, saveState } = this.props;\n        const label = 'edit: ' + editState + ', valid: ' + validationState + ', save: ' + saveState\n        return (\n            <span style={{ marginRight: '10px' }}>{label}</span>\n        )\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length === 0) {\n            return (\n                <span style={{ fontStyle: 'italic' }}>\n                    org name missing\n                </span>\n            )\n        }\n\n        let orgName = name\n        if (name.length >= maxLength) {\n            orgName = name.slice(0, 25) + '…'\n        }\n        return (\n            <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                <span style={{ fontWeight: 'bold' }}>\n                    {orgName}\n                </span>\n            </NavLink>\n        )\n    }\n\n    renderLoadingHeader() {\n        const breadcrumbs = (\n            <span>\n                Loading Org Editor...\n            </span>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} />\n        )\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    renderMenuButtons() {\n        return (\n            <span className=\"ButtonSet\">\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"save\"\n                        form=\"editOrganizationForm\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                    </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onClickCancelToViewer.bind(this)}>\n                        Back to Org\n                        </Button>\n                </span>\n                <span className=\"ButtonSet-button\">\n                    <Button shape=\"circle\" icon=\"info\" onClick={this.onShowInfo.bind(this)}></Button>\n                </span>\n            </span>\n        )\n    }\n\n    render() {\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        if (!this.props.editedOrganization) {\n            return (\n                <div className=\"EditOrganization\">\n                    {this.renderLoadingHeader()}\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"EditOrganization\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                {this.renderOrgHeader()}\n\n                {this.renderEditor()}\n            </div>\n        )\n    }\n}\n\nexport default EditOrganization","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { StoreState, EditableOrganization, EditState, SaveState, ValidationState } from '../../../types';\nimport {\n    editOrgSave,\n    updateName,\n    updateDescription, updateLogoUrl, updateIsPrivate, updateHomeUrl, updateResearchInterests\n} from '../../../redux/actions/editOrg';\nimport EditOrganization from './component';\nimport * as orgModel from '../../../data/models/organization/model'\n\ninterface OwnProps {\n}\n\nexport interface StateProps {\n    editState: EditState,\n    saveState: SaveState,\n    validationState: ValidationState,\n    editedOrganization: EditableOrganization,\n    organization: orgModel.Organization\n}\n\nexport interface DispatchProps {\n    onEditOrgSave: () => void\n    onUpdateName: (name: string) => void\n    onUpdateLogoUrl: (gravatarHash: string | null) => void\n    // onUpdateId: (id: string) => void,\n    onUpdateDescription: (description: string) => void\n    onUpdateIsPrivate: (isPrivate: boolean) => void\n    onUpdateHomeUrl: (homeUrl: string | null) => void\n    onUpdateResearchInterests: (researchInterests: string) => void\n}\n\nexport function mapStateToProps(state: StoreState): StateProps {\n    if (!state.views.editOrgView.viewModel) {\n        throw new Error('What, no view model??')\n    }\n    const {\n        views: {\n            editOrgView: {\n                viewModel: { editState, saveState, validationState, editedOrganization, organization }\n            }\n        }\n    } = state\n\n    return {\n        editState,\n        saveState,\n        validationState,\n        editedOrganization,\n        organization\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onEditOrgSave: () => {\n            dispatch(editOrgSave() as any)\n        },\n        onUpdateName: (name: string) => {\n            dispatch(updateName(name) as any)\n        },\n        onUpdateLogoUrl: (gravatarHash: string | null) => {\n            dispatch(updateLogoUrl(gravatarHash) as any)\n        },\n        // onUpdateId: (id) => {\n        //     dispatch(editOrgUpdateId(id) as any)\n        // },\n        onUpdateDescription: (description) => {\n            dispatch(updateDescription(description) as any)\n        },\n        onUpdateIsPrivate: (isPrivate: boolean) => {\n            dispatch(updateIsPrivate(isPrivate) as any)\n        },\n        onUpdateHomeUrl: (homeUrl: string | null) => {\n            dispatch(updateHomeUrl(homeUrl) as any)\n        },\n        onUpdateResearchInterests: (researchInterests: string) => {\n            dispatch(updateResearchInterests(researchInterests) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(EditOrganization)","import * as React from 'react'\nimport { ComponentLoadingState, StoreState, EditOrgView } from '../../../types';\nimport Container from './container'\nimport * as orgModel from '../../../data/models/organization/model'\n\n// First the loader component, which takes care of a loading view, error view, and the \n// container.\n\nexport interface LoaderProps {\n    organizationId: orgModel.OrganizationID\n    view: EditOrgView\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\ninterface LoaderState {\n\n}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    constructor(props: LoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Fetching your organizations and other stuff...\n            </div>\n        )\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return\n        }\n        return (\n            <div>\n                Error! {this.props.view.error.message}\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n// THe redux connection\n\nimport { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../redux/actions/editOrg'\n\nexport interface OwnProps {\n    organizationId: orgModel.OrganizationID\n}\n\ninterface StateProps {\n    view: EditOrgView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: orgModel.OrganizationID) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.editOrgView\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: (organizationId: orgModel.OrganizationID) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\nimport './Auth.css'\n\nimport * as types from '../types'\nimport { Button } from 'antd';\n\n\nexport interface AuthState {\n\n}\n\nclass Auth extends React.Component<types.AuthProps, AuthState> {\n\n    tokenRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: types.AuthProps) {\n        super(props)\n\n        this.tokenRef = React.createRef()\n\n        this.props.checkAuth()\n    }\n\n    onLogoutClick() {\n        this.props.onRemoveAuthorization()\n    }\n\n    onLoginClick() {\n        if (this.tokenRef.current === null) {\n            return\n        }\n        const token = this.tokenRef.current.value\n        if (token.length === 0) {\n            return\n        }\n        this.props.onAddAuthorization(token)\n    }\n\n    buildAuthForm() {\n        return (\n            <div className=\"Auth-form\">\n                Token: <input ref={this.tokenRef} style={{ width: '30em' }} />\n                <Button\n                    icon=\"save\"\n                    htmlType=\"submit\"\n                    onClick={this.onLoginClick.bind(this)} >\n                    Assign Token\n                </Button>\n            </div>\n        )\n    }\n\n    buildAuthToolbar() {\n        return (\n            <div className=\"Auth-toolbar\">\n                Logged in as <b><span>{this.props.authorization.authorization.realname}</span> (<span>{this.props.authorization.authorization.username}</span></b>)\n                {' '}\n                <Button icon=\"logout\" onClick={this.onLogoutClick.bind(this)}></Button>\n            </div>\n        )\n    }\n\n    buildAuthDev() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.buildAuthToolbar()}\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized! Enter a user token below</p>\n                        {this.buildAuthForm()}\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Error</p>\n                        {this.props.authorization.message}\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n    }\n\n    buildAuthProd() {\n        switch (this.props.authorization.status) {\n            case types.AuthState.NONE:\n            case types.AuthState.CHECKING:\n                return (\n                    <div></div>\n                )\n            case types.AuthState.AUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-authorized scrollable-flex-column\">\n                        {this.props.children}\n                    </div>\n                )\n            case types.AuthState.UNAUTHORIZED:\n                return (\n                    <div className=\"Auth Auth-unauthorized scrollable-flex-column\">\n                        <p>Not authorized!</p>\n                    </div>\n                )\n            case types.AuthState.ERROR:\n                return (\n                    <div className=\"Auth Auth-error scrollable-flex-column\">\n                        <p>Error: ??</p>\n                    </div>\n                )\n            default:\n                return (\n                    <div></div>\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"Auth scrollable-flex-column\">\n                {this.props.hosted ? this.buildAuthProd() : this.buildAuthDev()}\n            </div>\n        )\n\n    }\n}\n\nexport default Auth","\nexport interface RootInfo {\n    version: string,\n    servertime: number\n}\n\ninterface AuthEndpoints {\n    root: string,\n    tokenInfo: string,\n    apiMe: string,\n    me: string,\n    loginStart: string,\n    loginChoice: string,\n    loginCreate: string,\n    loginUsernameSuggest: string,\n    loginPick: string,\n    loginCancel: string,\n    logout: string,\n    linkStart: string,\n    linkCancel: string,\n    linkChoice: string,\n    linkPick: string,\n    linkRemove: string,\n    tokens: string,\n    tokensRevoke: string,\n    tokensRevokeAll: string,\n    userSearch: string,\n    adminUserSearch: string,\n    adminUser: string\n}\n\nconst endpoints: AuthEndpoints = {\n    root: '',\n    tokenInfo: 'api/V2/token',\n    apiMe: 'api/V2/me',\n    me: 'me',\n    loginStart: 'login/start',\n    logout: 'logout',\n    loginChoice: 'login/choice',\n    loginCreate: 'login/create',\n    loginUsernameSuggest: 'login/suggestname',\n    loginPick: 'login/pick',\n    loginCancel: 'login/cancel',\n    linkStart: 'link/start',\n    linkCancel: 'link/cancel',\n    linkChoice: 'link/choice',\n    linkPick: 'link/pick',\n    linkRemove: 'me/unlink',\n    tokens: 'tokens',\n    tokensRevoke: 'tokens/revoke',\n    tokensRevokeAll: 'tokens/revokeall',\n    userSearch: 'api/V2/users/search',\n    adminUserSearch: 'api/V2/admin/search',\n    adminUser: 'api/V2/admin/user'\n}\n\nexport interface TokenInfo {\n    created: number,\n    expires: number,\n    id: string,\n    name: string | null,\n    token: string,\n    type: string,\n    user: string,\n    cachefor: number\n}\n\nexport interface Identity {\n    id: string,\n    provider: string,\n    username: string\n}\n\nexport interface Role {\n    id: string,\n    desc: string\n}\n\nexport interface Account {\n    created: number,\n    customroles: Array<string>,\n    display: string,\n    email: string,\n    idents: Array<Identity>,\n    lastLogin: number,\n    local: boolean,\n    roles: Array<Role>,\n    user: string\n}\nexport class AuthClient {\n    url: string;\n\n    constructor({ url }: { url: string }) {\n        this.url = url\n    }\n\n    makePath(path: Array<string> | string): string {\n        if (typeof path === 'string') {\n            return [this.url].concat([path]).join('/');\n        }\n        return [this.url].concat(path).join('/');\n    }\n\n\n    root(): Promise<RootInfo> {\n        return fetch(this.makePath([endpoints.root]), {\n            headers: {\n                Accept: 'application/json'\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                return result as RootInfo\n            })\n    }\n\n    getTokenInfo(token: string): Promise<TokenInfo> {\n        return fetch(this.makePath([endpoints.tokenInfo]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as TokenInfo\n            })\n    }\n\n    getMe(token: string): Promise<Account> {\n        return fetch(this.makePath([endpoints.apiMe]), {\n            headers: {\n                Accept: 'application/json',\n                Authorization: token\n            },\n            mode: 'cors'\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    throw new Error(response.statusText)\n                }\n                return response.json()\n            })\n            .then((result) => {\n                return result as Account\n            })\n    }\n\n\n    // getInfo() : Promise<GroupsServiceInfo> {\n    //     return fetch(this.url + '/', {\n    //         headers: {\n    //             Authorization: this.token,\n    //             Accept: 'application/json'\n    //         },\n    //         mode: 'cors'\n    //     })\n    //         .then((response) => {\n    //             return response.json();\n    //         })\n    //         .then((result) => {\n    //             return result as GroupsServiceInfo;\n    //         });\n    // }\n\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport * as Cookies from 'es-cookie'\n\nimport { ActionFlag } from './index'\nimport { AppError, StoreState } from '../../types';\nimport { AuthClient, TokenInfo, Account } from '../../data/auth';\n\n// Action Definitions\n\nexport interface AuthCheck extends Action {\n    type: ActionFlag.AUTH_CHECK\n}\n\nexport interface AuthCheckStart extends Action {\n    type: ActionFlag.AUTH_CHECK_START\n}\n\nexport interface AuthCheckError extends Action {\n    type: ActionFlag.AUTH_CHECK_ERROR,\n    error: AppError\n}\n\nexport interface AuthAuthorized extends Action {\n    type: ActionFlag.AUTH_AUTHORIZED,\n    token: string\n    username: string,\n    realname: string,\n    roles: Array<string>\n}\n\nexport interface AuthUnauthorized extends Action {\n    type: ActionFlag.AUTH_UNAUTHORIZED\n}\n\nexport interface AuthRemoveAuthorization extends Action {\n    type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n}\n\nexport interface AuthAddAuthorization extends Action {\n    type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n    token: string\n}\n\n// Action Creators\n\n\nexport function authCheckStart(): AuthCheckStart {\n    return {\n        type: ActionFlag.AUTH_CHECK_START\n    }\n}\n\nexport function authCheckError(error: AppError): AuthCheckError {\n    return {\n        type: ActionFlag.AUTH_CHECK_ERROR,\n        error\n    }\n}\n\nexport function authAuthorized(token: string, username: string, realname: string, roles: Array<string>): AuthAuthorized {\n    return {\n        type: ActionFlag.AUTH_AUTHORIZED,\n        token, username, realname, roles\n    }\n}\n\nexport function authUnauthorized(): AuthUnauthorized {\n    return {\n        type: ActionFlag.AUTH_UNAUTHORIZED\n    }\n}\n\n// export function authRemoveAuthorization(): AuthRemoveAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_REMOVE_AUTHORIZATION\n//     }\n// }\n\n// export function authAddAuthorization(token: string): AuthAddAuthorization {\n//     return {\n//         type: ActionFlag.AUTH_ADD_AUTHORIZATION,\n//         token: token\n//     }\n// }\n\n// Action Thunks\n\nexport function checkAuth() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(authCheckStart())\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // TODO: get the auth from the kbase-ui integration api, perhaps a postmessage call\n\n        const token = Cookies.get('kbase_session')\n        if (!token) {\n            dispatch(authUnauthorized())\n            return\n        }\n\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n    }\n}\n\nexport function authRemoveAuthorization() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        // remove cookie\n        Cookies.remove('kbase_session')\n\n        // remove auth in state\n        dispatch(authUnauthorized())\n    }\n}\n\nexport function authAddAuthorization(token: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        Auth: { url }\n                    }\n                }\n            }\n        } = getState()\n\n        // add cookie\n        Cookies.set('kbase_session', token)\n\n        // TODO: get auth info\n        const auth = new AuthClient({ url: url })\n        Promise.all([\n            auth.getTokenInfo(token),\n            auth.getMe(token)\n        ])\n            .then(([tokenInfo, account]) => {\n                const roles = account.roles.map(({ id, desc }) => id)\n                dispatch(authAuthorized(token, account.user, account.display, roles))\n            })\n            .catch((err) => {\n                console.error('auth check error', err)\n                dispatch(authCheckError({\n                    code: 'error',\n                    message: err.message\n                }))\n            })\n\n    }\n}","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { StoreState, AuthState, Authorization } from '../types'\nimport Auth from '../components/Auth'\nimport * as actions from '../redux/actions/auth'\n\nexport interface OwnProps {\n    hosted: boolean\n}\n\ninterface StateProps {\n    authorization: Authorization\n    // authStatus: AuthState,\n    // token: string | null,\n    // username: string | null,\n    // realname: string | null,\n}\n\ninterface DispatchProps {\n    checkAuth: () => void,\n    onRemoveAuthorization: () => void,\n    onAddAuthorization: (token: string) => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const { auth } = state\n    return {\n        authorization: auth\n        // authStatus: status,\n        // token: authorization.token || null,\n        // username: authorization.username || null,\n        // realname: authorization.realname || null\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        checkAuth: () => {\n            dispatch(actions.checkAuth() as any)\n        },\n        onRemoveAuthorization: () => {\n            dispatch(actions.authRemoveAuthorization() as any)\n        },\n        onAddAuthorization: (token: string) => {\n            dispatch(actions.authAddAuthorization(token) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Auth)","\nimport uuidv4 from 'uuid/v4'\n\ninterface ListenerParams {\n    name: string,\n    onSuccess: (payload: Payload) => void,\n    onError: (error: Error) => void\n}\n\nclass Listener {\n    name: string;\n    onSuccess: (payload: Payload) => void;\n    onError: (error: Error) => void;\n\n    constructor({ name, onSuccess, onError }: ListenerParams) {\n        this.name = name;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n\ntype Payload = any;\n\ninterface WaitingListenerParams extends ListenerParams {\n    timeout?: number\n}\n\nclass WaitingListener extends Listener {\n    started: Date;\n    timeout: number;\n\n    constructor(params: WaitingListenerParams) {\n        super(params);\n        this.started = new Date();\n        this.timeout = params.timeout || 5000;\n    }\n}\n\ninterface Envelope {\n    channelId: string\n    id: string\n}\n\nclass Message {\n    name: string;\n    payload: any;\n    id: string;\n    created: Date;\n    channelId: string\n    envelope: Envelope | null\n\n    constructor({ name, payload, channelId }: { name: string, payload: any, channelId: any }) {\n        this.name = name\n        this.payload = payload\n        this.id = uuidv4()\n        this.created = new Date()\n        this.channelId = channelId\n        this.envelope = null;\n    }\n\n    getMessage() {\n        return {\n            envelope: {\n                id: this.id,\n                created: this.created,\n                channelId: this.channelId\n            },\n            name: this.name,\n            payload: this.payload\n        };\n    }\n}\n\ninterface Handler {\n    started: Date,\n    handler: (response: any) => any\n}\n\ninterface ChannelParams {\n    window?: Window,\n    host?: string,\n    channelId?: string\n}\n\nexport class Channel {\n    window: Window\n    host: string\n    id: string\n    awaitingResponse: Map<string, Handler>\n    waitingListeners: Map<string, Array<Listener>>\n    listeners: Map<string, Array<Listener>>\n    lastId: number\n    sentCount: number\n    receivedCount: number\n    unwelcomeReceivedCount: number\n    unwelcomeReceivedCountThreshhold: number\n    unwelcomeReceiptWarning: boolean\n    unwelcomeReceiptWarningCount: number\n    currentListener: ((message: MessageEvent) => void) | null\n\n    constructor(params: ChannelParams) {\n        // The given window upon which we will listen for messages.\n        this.window = params.window || window\n\n        // The host for the window; required for postmessage\n        if (this.window.document === null) {\n            throw new Error('No document')\n        }\n        if (this.window.document.location === null) {\n            throw new Error('No location')\n        }\n        this.host = params.host || this.window.document.location.origin;\n\n        // The channel id. Used to filter all messages received to\n        // this channel.\n        this.id = params.channelId || uuidv4()\n\n        this.awaitingResponse = new Map<string, Handler>()\n        this.waitingListeners = new Map<string, Array<Listener>>()\n        this.listeners = new Map<string, Array<Listener>>()\n\n        this.lastId = 0\n        this.sentCount = 0\n        this.receivedCount = 0\n\n        this.unwelcomeReceivedCount = 0\n        this.unwelcomeReceivedCountThreshhold = 100\n        this.unwelcomeReceiptWarning = true\n        this.unwelcomeReceiptWarningCount = 0\n        this.currentListener = null\n    }\n\n    genId() {\n        this.lastId += 1;\n        return 'msg_' + String(this.lastId);\n    }\n\n    receiveMessage(messageEvent: MessageEvent) {\n        const message = messageEvent.data as Message;\n        if (!message) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('TS No message data; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!message.envelope) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('No message envelope, not from KBase; message ignored', messageEvent);\n            }\n            return;\n        }\n        if (!(message.envelope.channelId === this.id)) {\n            this.unwelcomeReceivedCount++;\n            if (this.unwelcomeReceiptWarning) {\n                console.warn('Message envelope does not match this channel\\'s id', message.envelope, message.envelope.channelId, this.id);\n            }\n            return;\n        }\n        if (this.unwelcomeReceiptWarningCount > this.unwelcomeReceivedCountThreshhold) {\n            this.unwelcomeReceiptWarning = false;\n            console.warn('Unwelcome message warning disabled after ' + this.unwelcomeReceiptWarningCount + ' instances.');\n        }\n\n        // A message sent as a request will have registered a response handler\n        // in the awaitingResponse hash, using a generated id as the key.\n        // TODO: to to rethink using the message id here. Perhaps somehting like a\n        // chain of ids, the root of which is the origination id, which is the one\n        // known here when it it is sent; the message \"id\" should be assigned whenver\n        // a message is sent, but a response  message would include the original\n        // message in the \"chain\"...\n\n        // We can also have awaiting responses without an originating request.\n        // These are useful for, e.g., a promise which awaits a message to be sent\n        // within some window...\n        if (message.envelope.id && this.awaitingResponse.has(message.envelope.id)) {\n            try {\n                const response = this.awaitingResponse.get(message.envelope.id)\n                this.awaitingResponse.delete(message.envelope.id)\n                if (response) {\n                    response.handler(message.payload)\n                }\n            } catch (ex) {\n                console.error('Error handling response for message ', message, ex);\n            }\n        }\n\n        // and also awaiting by message name. Like a listener, but they are only used\n        // once.\n\n        if (this.waitingListeners.has(message.name)) {\n            const awaiting = this.waitingListeners.get(message.name)!\n            this.waitingListeners.delete(message.name)\n            awaiting.forEach((listener) => {\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n        // Otherwise, permanently registered handlers are found in the listeners for the\n        // message name.\n        if (this.listeners.has(message.name)) {\n            this.listeners.get(message.name)!.forEach((listener) => {\n                if (!listener.onSuccess) {\n                    console.warn('no handler for listener!', listener);\n                }\n                try {\n                    listener.onSuccess(message.payload);\n                } catch (ex) {\n                    console.error('Error handling listener for message', message, ex);\n                    if (listener.onError) {\n                        listener.onError(ex);\n                    }\n                }\n            });\n        }\n    }\n\n    listen(listener: Listener) {\n        if (!this.listeners.has(listener.name)) {\n            this.listeners.set(listener.name, [])\n        }\n        this.listeners.get(listener.name)!.push(listener)\n    }\n\n    on(messageId: string, success: (payload: any) => any, error: (error: Error) => void) {\n        this.listen(new Listener({\n            name: messageId,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    sendMessage(message: Message) {\n        this.window.postMessage(message.getMessage(), this.host)\n    }\n\n    send(name: string, payload: Payload) {\n        const message = new Message({ name, payload, channelId: this.id });\n        this.sendMessage(message);\n    }\n\n    sendRequest(message: Message, handler: (response: any) => any) {\n        this.awaitingResponse.set('message.id', {\n            started: new Date(),\n            handler: handler\n        })\n\n        this.sendMessage(message);\n    }\n\n    request(name: string, payload: Payload) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.sendRequest(new Message({ name, payload, channelId: this.id }), (response: any) => {\n                    resolve(response);\n                });\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    startMonitor() {\n        window.setTimeout(() => {\n            const now = new Date().getTime();\n\n            // first take care of listeners awaiting a message.\n            for (const [id, listeners] of this.waitingListeners.entries()) {\n                const newListeners = listeners.filter((listener) => {\n                    if (listener instanceof WaitingListener) {\n                        const elapsed = now - listener.started.getTime();\n                        if (elapsed > listener.timeout) {\n                            try {\n                                if (listener.onError) {\n                                    listener.onError(new Error('timout after ' + elapsed));\n                                }\n                            } catch (ex) {\n                                console.error('Error calling error handler', id, ex);\n                            }\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n                if (newListeners.length === 0) {\n                    this.waitingListeners.delete(id)\n                }\n            }\n\n            if (this.waitingListeners.size > 0) {\n                this.startMonitor()\n            }\n        }, 100);\n    }\n\n    listenOnce(listener: WaitingListener) {\n        if (!this.waitingListeners.has(listener.name)) {\n            this.waitingListeners.set(listener.name, [])\n        }\n        this.waitingListeners.get(listener.name)!.push(listener);\n        if (listener.timeout) {\n            this.startMonitor();\n        }\n    }\n\n    once(name: string, success: (payload: Payload) => void, error: (error: Error) => void) {\n        this.listenOnce(new WaitingListener({\n            name: name,\n            onSuccess: success,\n            onError: error\n        }));\n    }\n\n    when(name: string, timeout: number) {\n        return new Promise((resolve, reject) => {\n            return this.listenOnce(new WaitingListener({\n                name: name,\n                timeout: timeout,\n                onSuccess: (payload) => {\n                    resolve(payload);\n                },\n                onError: (error) => {\n                    reject(error);\n                }\n            }));\n        });\n    }\n\n    stats() {\n        return {\n            sent: this.sentCount,\n            received: this.receivedCount\n        };\n    }\n\n    attach(window: Window) {\n        this.window = window;\n    }\n\n    start() {\n        this.currentListener = (message: MessageEvent) => {\n            this.receiveMessage(message);\n        };\n        this.window.addEventListener('message', this.currentListener, false);\n    }\n\n    stop() {\n        if (this.currentListener) {\n            this.window.removeEventListener('message', this.currentListener, false);\n        }\n    }\n}\n","import uuid from 'uuid/v4'\nimport { Channel } from './windowChannel'\nimport { IFrameParams } from '../types'\n\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         feedsServiceURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n/*\n channelId: \"3b33179e-8a6d-4ae9-bc95-af4c0492eaa6\"\nframeId: \"frame_kb_html_be553ee5-645c-4737-80ba-dcb642632f0c\"\nhostId: \"host_kb_html_9a3b5d5d-bb92-43ff-a443-73267aa31323\"\nparams: {}\nparentHost: \"https://ci.kbase.us\"\n\n*/\n\n/*\nIFrameSimulator\nThis little doozey allows us to create a simulated iframe. We can query it for\n the params placed on the iframe, and talk to it via the window channel -- it has \n its own window channel.\n Good thing we designed the channel for multiple channels per window.\n*/\nclass IFrameSimulator {\n    params: IFrameParams | null\n    channel: Channel\n\n    constructor() {\n        this.params = null\n\n        // create a window channel.\n\n        this.channel = new Channel({\n            window: window,\n            host: document.location!.origin\n        })\n\n    }\n\n    getParamsFromIFrame(): IFrameParams {\n        return {\n            channelId: this.channel.id,\n            frameId: uuid(),\n            params: {\n                groupsServiceURL: '/services/groups',\n                userProfileServiceURL: '/services/user_profile/rpc',\n                workspaceServiceURL: '/services/ws',\n                serviceWizardURL: '/services/service_wizard',\n                feedsServiceURL: '/services/feeds',\n                authServiceURL: '/services/auth',\n                originalPath: '',\n                view: null,\n                viewParams: null\n                // view: 'org',\n                // viewParams: {\n                //     id: 'test'\n                // }\n            },\n            parentHost: document.location!.origin\n        }\n    }\n}\n\n\n\nexport default IFrameSimulator","import { IFrameParams } from '../types'\n// export interface IFrameParams {\n//     channelId: string\n//     frameId: string\n//     params: {\n//         groupsServiceURL: string\n//         userProfileServiceURL: string\n//         workspaceServiceURL: string\n//         serviceWizardURL: string\n//         feedsServiceURL: string\n//         authServiceURL: string\n//         originalPath: string | null,\n//         view: string | null,\n//         viewParams: any\n//     },\n//     parentHost: string\n// }\n\nexport class IFrameIntegration {\n    getParamsFromIFrame() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-params')) {\n            // throw new Error('No params found in window!!');\n            return null\n        }\n        const params = window.frameElement.getAttribute('data-params');\n        if (params === null) {\n            // throw new Error('No params found in window!')\n            return null\n        }\n        const iframeParams = JSON.parse(decodeURIComponent(params)) as IFrameParams\n        return iframeParams\n    }\n    getChannelID() {\n        if (!window.frameElement) {\n            return null\n        }\n        if (!window.frameElement.hasAttribute('data-channel')) {\n            return null\n        }\n        return window.frameElement.getAttribute('data-channel')\n    }\n    getIframeElement() {\n        return window.frameElement || null\n    }\n}","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\nimport * as types from '../../types'\nimport IFrameSimulator from '../../lib/IFrameSimulator';\nimport { IFrameIntegration } from '../../lib/IFrameIntegration';\n\nimport { } from 'react-router-dom';\n\n// Action Definitions\n\n// export interface AppStart extends Action {\n//     type: ActionFlag.APP_START,\n\n// }\n\nexport interface AppSuccess extends Action {\n    type: ActionFlag.APP_SUCCESS,\n    config: types.AppConfig\n}\n\nexport interface AppError extends Action {\n    type: ActionFlag.APP_ERROR,\n    error: AppError\n}\n\n// Action Creators\n\nexport function appSuccess(config: types.AppConfig): AppSuccess {\n    return {\n        type: ActionFlag.APP_SUCCESS,\n        config: config\n    }\n}\n\nexport function appError(error: AppError): AppError {\n    return {\n        type: ActionFlag.APP_ERROR,\n        error: error\n    }\n}\n\nexport function appStart() {\n    return (dispatch: ThunkDispatch<types.StoreState, void, Action>, getState: () => types.StoreState) => {\n        // check and see if we are in an iframe\n        let integration = new IFrameIntegration();\n        let iframeParams = integration.getParamsFromIFrame();\n\n\n        if (iframeParams) {\n            let defaultPath\n\n            // set up the message bus.\n            let channelId = iframeParams.channelId;\n\n            // route from paths passed in from kbase-ui\n            switch (iframeParams.params.view) {\n                case 'org':\n                    defaultPath = '/viewOrganization/' + iframeParams.params.viewParams.id\n                    window.history.pushState(null, 'test', defaultPath)\n                    break\n                default:\n                    defaultPath = '/organizations'\n                    window.history.pushState(null, 'organizations', '/organizations')\n                    break\n            }\n\n            // suck up all the params into our state.\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Feeds: {\n                        url: iframeParams.params.feedsServiceURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath,\n                channelId\n            }))\n\n        } else {\n            iframeParams = new IFrameSimulator().getParamsFromIFrame()\n            dispatch(appSuccess({\n                baseUrl: '',\n                services: {\n                    Groups: {\n                        url: iframeParams.params.groupsServiceURL\n                    },\n                    UserProfile: {\n                        url: iframeParams.params.userProfileServiceURL\n                    },\n                    Workspace: {\n                        url: iframeParams.params.workspaceServiceURL\n                    },\n                    ServiceWizard: {\n                        url: iframeParams.params.serviceWizardURL\n                    },\n                    Feeds: {\n                        url: iframeParams.params.feedsServiceURL\n                    },\n                    Auth: {\n                        url: iframeParams.params.authServiceURL\n                    }\n                },\n                defaultPath: '/organizations',\n                channelId: null\n            }))\n        }\n    }\n}\n","import * as React from 'react'\nimport './KBaseIntegration.css'\n\nimport { AppState } from '../types'\nimport { Channel } from '../lib/windowChannel';\nimport { IFrameIntegration } from '../lib/IFrameIntegration';\n\nexport interface KBaseIntegrationProps {\n    status: AppState\n    channelId: string | null\n    onAppStart: () => void\n}\nclass KBaseIntegration extends React.Component<KBaseIntegrationProps, object> {\n\n    channel: Channel | null\n\n    constructor(props: KBaseIntegrationProps) {\n        super(props)\n\n        // const params = this.getParamsFromIFrame()\n\n        // this.props.onAppStart()\n\n        this.channel = null\n    }\n\n    setupChannel() {\n        if (this.props.channelId) {\n            // let integration = new IFrameIntegration()\n            this.channel = new Channel({\n                channelId: this.props.channelId,\n            })\n\n            this.channel.on('navigate', ({ to, params }) => {\n                // switch (to) {\n                //     case 'orgs':\n\n                // }\n                console.log('NAVIGATE', to, params)\n            }, (err) => {\n                console.error('Error processing \"navigate\" message')\n            })\n\n            this.channel.start()\n\n            this.channel.send('ready', {\n                channelId: this.props.channelId,\n                greeting: 'heloooo'\n            })\n        }\n    }\n\n    teardownChannel() {\n\n    }\n\n    componentDidMount() {\n        this.props.onAppStart()\n    }\n\n    componentDidUpdate() {\n        this.setupChannel()\n    }\n\n    componentWillUnmount() {\n        this.teardownChannel()\n    }\n\n    render() {\n        if (this.props.status === AppState.NONE) {\n            return (\n                <div className=\"KBaseIntegration\">\n                    Loading...\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"KBaseIntegration scrollable-flex-column\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default KBaseIntegration","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../types'\nimport * as actions from '../redux/actions/app'\n\nimport KBaseIntegration from '../components/KBaseIntegration'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    status: types.AppState\n    defaultPath: string\n    channelId: string | null\n}\n\ninterface DispatchProps {\n    onAppStart: () => void\n}\n\nexport function mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    const { app: { status, config: { defaultPath, channelId } } } = state\n    // console.log('map state', status, defaultPath, channelId)\n    return {\n        status, defaultPath, channelId\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onAppStart: () => {\n            dispatch(actions.appStart() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(KBaseIntegration)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport { ActionFlag } from './index'\n\nimport { AppError, StoreState, User, InviteUserViewModel, ComponentLoadingState, RequestType, RequestResourceType, MemberType, OrganizationUser } from '../../types'\nimport { Model, UserQuery } from '../../data/model'\nimport * as orgModel from '../../data/models/organization/model'\nimport * as userModel from '../../data/models/user'\nimport * as requestModel from '../../data/models/requests'\n\n// View Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.INVITE_USER_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n    organization: orgModel.Organization,\n    users: Array<OrganizationUser> | null\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.INVITE_USER_LOAD_ERROR,\n    error: AppError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.INVITE_USER_UNLOAD\n}\n\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization): LoadSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_SUCCESS,\n        organization: organization,\n        users: null\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.INVITE_USER_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.INVITE_USER_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError({\n                    code: 'invalid state',\n                    message: 'Organization kind must be \"NORMAL\"'\n                }))\n                return\n            }\n            dispatch(loadSuccess(org))\n        } catch (ex) {\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// User Selection\n\n\n\nexport interface InviteUserSearchUsers extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS,\n    query: UserQuery\n}\n\ninterface SearchUsersStart extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n}\n\nexport interface SearchUsersSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n    users: Array<OrganizationUser> | null\n}\n\ninterface SearchUsersError extends Action {\n    type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n    error: AppError\n}\n\nfunction searchUsersStart(): SearchUsersStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_START\n    }\n}\n\nfunction searchUsersSuccess(users: Array<OrganizationUser> | null): SearchUsersSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_SUCCESS,\n        users: users\n    }\n}\n\nfunction searchUsersError(error: AppError): SearchUsersError {\n    return {\n        type: ActionFlag.INVITE_USER_SEARCH_USERS_ERROR,\n        error: error\n    }\n}\n\nexport function inviteUserSearchUsers(query: UserQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchUsersStart())\n\n        if (query.query.length === 0) {\n            dispatch(searchUsersSuccess(null))\n            return\n        }\n\n        const {\n            views: {\n                inviteUserView: { viewModel }\n            },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: better form of type narrowing? \n        if (viewModel === null) {\n            return\n        }\n        const org = viewModel.organization\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        let excludedUsers: Array<string> = []\n\n        // excludedUsers.push(org.owner.user.username)\n\n        let owner: string = org.owner.username\n        let adminUsers: Array<string> = []\n        let members: Array<string> = []\n        let invited: Array<string> = []\n        let requested: Array<string> = []\n\n        org.members.forEach((member) => {\n            switch (member.type) {\n                case MemberType.MEMBER:\n                    members.push(member.username)\n                case MemberType.ADMIN:\n                    adminUsers.push(member.username)\n            }\n        })\n\n        // excludedUsers = excludedUsers.concat(org.members.map((member) => {\n        //     return member.\n        // }))\n\n        // TODO revive\n        // org.adminRequests.forEach((request) => {\n        //     if (request.resourceType === RequestResourceType.USER) {\n        //         switch (request.type) {\n        //             case RequestType.INVITATION:\n        //                 invited.push((<UserInvitation>request).user.username)\n        //                 // excludedUsers.push((<UserInvitation>request).user.username)\n        //                 break\n        //             case RequestType.REQUEST:\n        //                 requested.push((<UserRequest>request).requester.username)\n        //             // excludedUsers.push((<UserRequest>request).requester.username)\n        //         }\n        //     }\n        // })\n\n        try {\n            const users = await userClient.searchUsers(query)\n\n\n            // const filteredUsers = users.filter((user) => {\n            //     return (excludedUsers.indexOf(user.username) === -1)\n            // })\n            const orgUsers: Array<OrganizationUser> = users.map(({ username, realname }) => {\n                let relation: orgModel.UserRelationToOrganization\n                if (username === owner) {\n                    relation = orgModel.UserRelationToOrganization.OWNER\n                } else if (adminUsers.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.ADMIN\n                } else if (invited.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING\n                } else if (requested.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING\n                } else if (members.indexOf(username) >= 0) {\n                    relation = orgModel.UserRelationToOrganization.MEMBER\n                } else {\n                    relation = orgModel.UserRelationToOrganization.NONE\n                }\n                return {\n                    username, realname,\n                    relation: relation\n                }\n            })\n            dispatch(searchUsersSuccess(orgUsers))\n        } catch (ex) {\n            dispatch(searchUsersError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n\n    }\n}\n\n// Select a user\n\nexport interface SelectUser extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER,\n    username: string\n}\n\nexport interface SelectUserStart extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_START\n}\n\nexport interface SelectUserSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n    user: User,\n    relation: orgModel.UserRelationToOrganization\n}\n\nexport interface SelectUserError extends Action {\n    type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n    error: AppError\n}\n\n\nfunction selectUserStart(): SelectUserStart {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_START\n    }\n}\n\nfunction selectUserSuccess(user: User, relation: orgModel.UserRelationToOrganization): SelectUserSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_SUCCESS,\n        user: user,\n        relation: relation\n    }\n}\n\nfunction selectUserError(error: AppError): SelectUserError {\n    return {\n        type: ActionFlag.INVITE_USER_SELECT_USER_ERROR,\n        error: error\n    }\n}\n\nfunction isUserRequest(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserRequest = <requestModel.UserRequest>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.REQUEST &&\n        req.requester === username) {\n        return true\n    }\n    return false\n}\n\nfunction isUserInvitation(request: requestModel.Request, username: string): request is requestModel.UserRequest {\n    const req: requestModel.UserInvitation = <requestModel.UserInvitation>request\n    if (req.resourceType === RequestResourceType.USER &&\n        req.type === RequestType.INVITATION &&\n        req.user &&\n        req.user === username) {\n        return true\n    }\n    return false\n}\n\nfunction getUserRelation(user: User, organization: orgModel.Organization): orgModel.UserRelationToOrganization {\n    if (user.username === organization.owner.username) {\n        return orgModel.UserRelationToOrganization.OWNER\n    }\n    const member = organization.members.find((member) => {\n        return member.username === user.username\n    })\n    if (member) {\n        switch (member.type) {\n            case MemberType.ADMIN:\n                return orgModel.UserRelationToOrganization.ADMIN\n            case MemberType.OWNER:\n                return orgModel.UserRelationToOrganization.OWNER\n            case MemberType.MEMBER:\n                return orgModel.UserRelationToOrganization.MEMBER\n        }\n    }\n\n    // TODO revive\n    // for (const request of organization.adminRequests) {\n    //     if (isUserInvitation(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_INVITATION_PENDING\n    //     } else if (isUserRequest(request, user.username)) {\n    //         return UserRelationToOrganization.MEMBER_REQUEST_PENDING\n    //     }\n    // }\n\n    return orgModel.UserRelationToOrganization.VIEW\n}\n\nexport function selectUser(selectedUsername: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectUserStart())\n\n        const {\n            views: {\n                inviteUserView: { viewModel }\n            },\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        if (!viewModel) {\n            dispatch(selectUserError({\n                code: 'invalid state',\n                message: 'select user invalid state -- no view value'\n            }))\n            return\n        }\n\n        const userClient = new userModel.UserModel({\n            token,\n            userProfileServiceURL: config.services.UserProfile.url\n        })\n\n        userClient.getUser(selectedUsername)\n            .then((user) => {\n                // TODO: use the new model getUserRelation, or even getUserWithRelation\n                const relation = getUserRelation(user, viewModel.organization)\n                dispatch(selectUserSuccess(user, relation))\n            })\n            .catch((err) => {\n                dispatch(selectUserError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}\n\n// Now send the invitation, whew!\n\nexport interface SendInvitation extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION\n}\n\nexport interface SendInvitationStart extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n}\n\nexport interface SendInvitationSuccess extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n}\n\nexport interface SendInvitationError extends Action {\n    type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n    error: AppError\n}\n\n\nexport function sendInvitationStart(): SendInvitationStart {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_START\n    }\n}\n\nexport function sendInvitationSuccess(): SendInvitationSuccess {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_SUCCESS\n    }\n}\n\nexport function sendInvitationError(error: AppError): SendInvitationError {\n    return {\n        type: ActionFlag.INVITE_USER_SEND_INVITATION_ERROR,\n        error: error\n    }\n}\n\nexport function sendInvitation() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendInvitationStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config },\n            views: {\n                inviteUserView: { loadingState, viewModel, error }\n            }\n        } = getState()\n\n        if (loadingState !== ComponentLoadingState.SUCCESS) {\n            return\n        }\n\n        if (viewModel === null) {\n            return\n        }\n\n        const { selectedUser, organization: { id } } = viewModel as InviteUserViewModel\n\n        if (!selectedUser) {\n            return\n        }\n\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        requestClient.inviteUserToJoinOrg(id, selectedUser.user.username)\n            .then((request) => {\n                dispatch(sendInvitationSuccess())\n            })\n            .catch((err) => {\n                dispatch(sendInvitationError({\n                    code: err.name,\n                    message: err.message\n                }))\n            })\n    }\n}","import * as React from 'react'\nimport './User.css'\n\nimport Avatar from './entities/Avatar'\nimport * as types from '../types';\n\nexport interface UserProps {\n    user: types.User\n    avatarSize?: number\n}\n\ninterface UserState {\n\n}\n\nclass User extends React.Component<UserProps, UserState> {\n    constructor(props: UserProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <div className=\"avatarCol\">\n                    <Avatar user={this.props.user} size={this.props.avatarSize || 30} />\n                </div>\n                <div className=\"infoCol\">\n                    <div className=\"name\">\n                        <a href={\"/#people/\" + this.props.user.username} target=\"_blank\">{this.props.user.realname}</a>\n                        {' '}\n                        ❨{this.props.user.username}❩\n                                </div>\n                    <div className=\"organization\">\n                        {this.props.user.organization || <i>no organization in user profile</i>}\n                    </div>\n                    <div className=\"location\">\n                        {[this.props.user.city, this.props.user.state, this.props.user.country].filter(x => x).join(', ') || <i>no location information in user profile</i>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User","import * as React from 'react'\n\nimport './component.css'\nimport { User, InviteUserViewState, OrganizationUser } from '../../../types';\nimport { Button, Icon, Modal, Alert } from 'antd';\nimport Header from '../../Header';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport OrganizationHeader from '../organizationHeader/loader';\nimport UserComponent from '../../User'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport MainMenu from '../../menu/component';\n\nexport interface InviteUserProps {\n    organization: orgModel.Organization,\n    selectedUser: {\n        user: User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: InviteUserViewState,\n    users: Array<OrganizationUser> | null\n    onSearchUsers: (query: userModel.UserQuery) => void,\n    onSelectUser: (username: string) => void,\n    onSendInvitation: () => void\n}\n\ninterface InviteUserState {\n    cancelToViewMembers: boolean\n    cancelToBrowser: boolean\n    cancelToViewer: boolean\n    autocompleteMessage: string\n}\n\nclass InviteUser extends React.Component<InviteUserProps, InviteUserState> {\n\n    lastSearchAt: Date | null\n\n    static searchDebounce: number = 200\n\n    searchInput: React.RefObject<HTMLInputElement>\n    searchButton: React.RefObject<Button>\n\n    constructor(props: InviteUserProps) {\n        super(props)\n\n        this.lastSearchAt = null\n        this.searchInput = React.createRef()\n        this.searchButton = React.createRef()\n\n        this.state = {\n            cancelToViewMembers: false,\n            cancelToBrowser: false,\n            cancelToViewer: false,\n            autocompleteMessage: ''\n        }\n    }\n\n    onClickCancelToViewMembers() {\n        this.setState({ cancelToViewMembers: true })\n    }\n\n    onClickCancelToBrowser() {\n        this.setState({ cancelToBrowser: true })\n    }\n\n    onClickCancelToViewer() {\n        this.setState({ cancelToViewer: true })\n    }\n\n    onSendInvitation() {\n        this.props.onSendInvitation()\n    }\n\n    canSave() {\n        if (this.props.selectedUser) {\n            return true\n        }\n        return false\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        this.doSearchUsers(currentSearchInputValue)\n    }\n\n    onSearchInputChange() {\n        let currentSearchInputValue;\n        if (this.searchInput.current) {\n            currentSearchInputValue = this.searchInput.current.value\n        } else {\n            currentSearchInputValue = ''\n        }\n        // this.doSearchUsers(currentSearchInputValue)\n    }\n\n    doSearchUsers(value: string) {\n        // if (value.length < 3) {\n        //     this.setState({ autocompleteMessage: 'Search begins after 3 or more characters' })\n        //     return\n        // }\n        // this.setState({ autocompleteMessage: '' })\n        // build up list of users already owning, members of, or with membership pending.\n        const excludedUsers: Array<string> = []\n\n        if (this.lastSearchAt === null ||\n            (new Date().getTime() - this.lastSearchAt.getTime() > InviteUser.searchDebounce)) {\n            this.lastSearchAt = new Date()\n            this.props.onSearchUsers({\n                query: value,\n                excludedUsers: []\n            })\n        }\n    }\n\n    onSelectUser(user: OrganizationUser) {\n        this.props.onSelectUser(user.username);\n    }\n\n    onShowInfo() {\n        Modal.info({\n            title: 'Invite User Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the invite user tool...</p>\n                </div>\n            )\n        })\n    }\n\n    // foundUsers() {\n    //     const users = this.props.users.map(({ username, realname }) => {\n    //         return {\n    //             value: username,\n    //             text: realname + ' (' + username + ')'\n    //         }\n    //     })\n    //     return users\n    // }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        let orgName: string\n        // if (this.props.manageGroupRequestsView && this.props.manageGroupRequestsView.view) {\n        //     orgName = this.props.manageGroupRequestsView.view.organization.name\n        // } else {\n        //     orgName = 'loading...'\n        // }\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"tool\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Invite a User to Join Org</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                {/* <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewMembers.bind(this)}>\n                    Return to Org Members\n            </Button>\n                <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.onClickCancelToViewer.bind(this)}>\n                    Return to this Org\n            </Button> */}\n\n\n                {/* <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.onShowInfo.bind(this)}>\n                </Button> */}\n            </React.Fragment>\n\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderUsers() {\n        if (!this.props.users) {\n            const message = 'Search for users by name or username to display a list of available users in this space.'\n            return (\n                <Alert type=\"info\" message={message} showIcon />\n            )\n        }\n        if (this.props.users.length === 0) {\n            return (\n                <Alert type=\"warning\" message=\"No users found\" showIcon />\n            )\n        }\n        return this.props.users.map((user) => {\n            if (user.relation === orgModel.UserRelationToOrganization.NONE) {\n                return (\n                    <div\n                        className=\"user notInOrganization \"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div\n                        className=\"user inOrganization\"\n                        key={user.username}\n                        onClick={() => { this.onSelectUser.call(this, user) }}>\n                        <div className=\"name \"\n                        >\n                            {user.realname} ({user.username})\n                        </div>\n                    </div>\n                )\n            }\n        })\n    }\n\n    renderOrgInfo() {\n        return (\n            <div className=\"orgInfo\">\n                <div className=\"name\">\n                    <span className=\"field-label\">name</span>\n                    <span>{this.props.organization.name}</span>\n                </div>\n                <div className=\"description\">\n                    <span className=\"field-label\">description</span>\n                    <span>{this.props.organization.description}</span>\n                </div>\n            </div>\n        )\n    }\n\n\n\n    renderInvitationForm() {\n        let button\n        let message\n        if (this.props.selectedUser) {\n            if (this.props.selectedUser.relation === orgModel.UserRelationToOrganization.VIEW) {\n                button = (\n                    <Button\n                        type=\"primary\"\n                        onClick={this.onSendInvitation.bind(this)}>Send Invitation</Button>\n                )\n            } else {\n                button = (\n                    <Button\n                        disabled\n                        type=\"primary\"\n                    >Send Invitation</Button>\n                )\n                // message = 'User is a member of this organization'\n                message = (\n                    <div>\n                        User may not be invited because:<br />\n                        {this.renderRelation(this.props.selectedUser.relation)}\n                    </div>\n                )\n                message = (\n                    <Alert\n                        type=\"warning\"\n                        message={message}\n                        showIcon\n                    />\n                )\n            }\n        } else {\n            button = (\n                <Button\n                    disabled\n                    type=\"primary\"\n                >Send Invitation</Button>\n            )\n            message = 'Please select a user'\n        }\n        return (\n            <div className=\"invitationForm\">\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {button}\n                </div>\n                <div style={{ textAlign: 'center', marginTop: '10px' }}>\n                    {message}\n                </div>\n            </div>\n        )\n    }\n\n    renderInvitationStatus() {\n        switch (this.props.editState) {\n            case InviteUserViewState.NONE:\n                return (\n                    <div>NONE</div>\n                )\n            case InviteUserViewState.EDITING:\n                return (\n                    <div>EDITING</div>\n                )\n            case InviteUserViewState.SENDABLE:\n                return (\n                    <div>SENDABLE</div>\n                )\n            case InviteUserViewState.SENDING:\n                return (\n                    <div>SENDING</div>\n                )\n            case InviteUserViewState.SUCCESS:\n                return (\n                    <div>SENT SUCCESSFULLY</div>\n                )\n            case InviteUserViewState.ERROR:\n                return (\n                    <div>ERROR SENDING</div>\n                )\n            default:\n                return (\n                    <div>Bad State</div>\n                )\n        }\n\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    renderRelation(relation: orgModel.UserRelationToOrganization) {\n        switch (relation) {\n            case (orgModel.UserRelationToOrganization.NONE):\n                return (\n                    <span><Icon type=\"stop\" />None</span>\n                )\n            case (orgModel.UserRelationToOrganization.VIEW):\n                return (\n                    <span><Icon type=\"stop\" /> Not a member</span>\n                )\n            case (orgModel.UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n                return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n            case (orgModel.UserRelationToOrganization.MEMBER):\n                return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.ADMIN):\n                return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n            case (orgModel.UserRelationToOrganization.OWNER):\n                return (\n\n                    <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n                )\n        }\n    }\n\n    // renderRelationText(relation: UserRelationToOrganization) {\n    //     switch (relation) {\n    //         case (UserRelationToOrganization.NONE):\n    //             return (\n    //                 <span><Icon type=\"stop\" />None</span>\n    //             )\n    //         case (UserRelationToOrganization.VIEW):\n    //             return (\n    //                 <span><Icon type=\"stop\" /> Not a member</span>\n    //             )\n    //         case (UserRelationToOrganization.MEMBER_REQUEST_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'orange' }} /> User's membership <b>request</b> is pending</span>)\n    //         case (UserRelationToOrganization.MEMBER_INVITATION_PENDING):\n    //             return (<span><Icon type=\"user\" style={{ color: 'blue' }} /> User has been <b>invited</b> to join</span>)\n    //         case (UserRelationToOrganization.MEMBER):\n    //             return (<span><Icon type=\"user\" /> User is a <b>member</b> of this organization</span>)\n    //         case (UserRelationToOrganization.ADMIN):\n    //             return (<span><Icon type=\"unlock\" />User is an <b>admin</b> of this organization</span>)\n    //         case (UserRelationToOrganization.OWNER):\n    //             return (\n    //                 <span><Icon type=\"crown\" /> User is the <b>owner</b> of this Organization</span>\n    //             )\n    //     }\n    // }\n\n    renderSelectedUser() {\n\n        if (this.props.selectedUser === null) {\n            return (\n                <div className=\"selectedUser\">\n                    <p className=\"noSelection\">\n                        No user yet selected\n                    </p>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"selectedUser\">\n                    <UserComponent user={this.props.selectedUser.user} />\n                    {this.renderRelation(this.props.selectedUser.relation)}\n                </div>\n            )\n        }\n    }\n\n    renderFooter() {\n        return (\n            <div className=\"footer\">\n            </div>\n        )\n    }\n\n    renderSearchButton() {\n        return (<Icon type=\"search\" />)\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.onClickCancelToViewer.bind(this)}>\n                        Back to Org\n                    </Button>\n                </div>\n                {/* <div className=\"ButtonSet-button\">\n                    <Button\n                        shape=\"circle\"\n                        icon=\"info\"\n                        onClick={this.onShowInfo.bind(this)}>\n                    </Button>\n                </div> */}\n            </div>\n        )\n    }\n\n    render() {\n\n        if (this.state.cancelToViewMembers) {\n            return <Redirect push to={\"/viewMembers/\" + this.props.organization.id} />\n        }\n\n        if (this.state.cancelToBrowser) {\n            return <Redirect push to=\"/organizations\" />\n        }\n\n        if (this.state.cancelToViewer) {\n            return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n        }\n\n        return (\n            <div className=\"InviteUser scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                {/* {this.renderHeader()} */}\n                {this.renderOrgHeader()}\n                <div className=\"row scrollable-flex-column\">\n                    <div className=\"col1 firstCol users scrollable-flex-column\">\n                        <h3>Select User to Invite</h3>\n                        <form id=\"searchForm\" className=\"searchBar\"\n                            onSubmit={this.onSubmit.bind(this)}>\n                            <input\n                                ref={this.searchInput}\n                                autoFocus\n                                onChange={this.onSearchInputChange.bind(this)}\n                                placeholder=\"Search for a user\"\n                            />\n                            <Button\n                                className=\"searchButton\"\n                                form=\"searchForm\"\n                                key=\"submit\"\n                                htmlType=\"submit\"\n                            >\n                                {this.renderSearchButton()}\n                            </Button>\n                        </form>\n                        <div className=\"usersTable\">\n                            {this.renderUsers()}\n                        </div>\n                        {/* <SelectUserComponent\n                            users={this.props.users}\n                            selectedUser={this.props.selectedUser}\n                            onSearchUsers={this.onSearchUsers.bind(this)}\n                            onSelectUser={this.onSelectUser.bind(this)}\n                        />\n                        {this.renderInvitationForm()}\n                        {this.renderInvitationStatus()} */}\n                    </div>\n                    <div className=\"col1 lastCol\">\n                        <h3>Selected User</h3>\n                        {this.renderSelectedUser()}\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n                {/* <div className=\"row\">\n                    <div className=\"col1\">\n                        <h3>Send Invitation</h3>\n                        {this.renderInvitationForm()}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col1\">\n                        <h3>Status</h3>\n                        {this.renderInvitationStatus()}\n                    </div>\n                </div> */}\n                {/* {this.renderUsers()} */}\n                {this.renderFooter()}\n            </div>\n        )\n\n        // return (\n        //     <div className=\"InviteUser\">\n        //         {this.renderHeader()}\n        //         {this.renderOrgHeader()}\n        //         <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Select User to Invite</h3>\n        //                 <SelectUserComponent\n        //                     users={this.props.users}\n        //                     selectedUser={this.props.selectedUser}\n        //                     onSearchUsers={this.onSearchUsers.bind(this)}\n        //                     onSelectUser={this.onSelectUser.bind(this)}\n        //                 />\n        //                 {this.renderInvitationForm()}\n        //                 {this.renderInvitationStatus()}\n        //             </div>\n        //         </div>\n        //         {/* <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Send Invitation</h3>\n        //                 {this.renderInvitationForm()}\n        //             </div>\n        //         </div>\n        //         <div className=\"row\">\n        //             <div className=\"col1\">\n        //                 <h3>Status</h3>\n        //                 {this.renderInvitationStatus()}\n        //             </div>\n        //         </div> */}\n        //         {/* {this.renderUsers()} */}\n        //     </div>\n        // )\n    }\n}\n\nexport default InviteUser","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/inviteUser'\nimport InviteUser from './component'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    users: Array<types.OrganizationUser> | null\n    selectedUser: {\n        user: types.User,\n        relation: orgModel.UserRelationToOrganization\n    } | null\n    editState: types.InviteUserViewState\n}\n\ninterface DispatchProps {\n    onSearchUsers: (query: userModel.UserQuery) => void\n    onSelectUser: (username: string) => void\n    onSendInvitation: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    if (!state.views.inviteUserView || (state.views.inviteUserView.viewModel === null)) {\n        throw new Error('Runtime Error - invite members view is not defined!')\n    }\n\n\n    const {\n        views: {\n            inviteUserView: {\n                viewModel: { organization, users, selectedUser, editState }\n            }\n        }\n    } = state\n\n    return { organization, users, selectedUser, editState }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onSearchUsers: ({ query, excludedUsers }) => {\n            dispatch(actions.inviteUserSearchUsers({ query, excludedUsers }) as any)\n        },\n        onSelectUser: (username: string) => {\n            dispatch(actions.selectUser(username) as any)\n        },\n        onSendInvitation: () => {\n            dispatch(actions.sendInvitation() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(InviteUser)","import * as React from 'react'\n\nimport Container from './container'\nimport { ComponentLoadingState, StoreState } from '../../../types';\n\nexport interface InviteUserLoaderProps {\n    loadingState: ComponentLoadingState\n    organizationId: string\n    onInviteUserLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface InviteUserLoaderState {\n}\n\nclass InviteUserLoader extends React.Component<InviteUserLoaderProps, InviteUserLoaderState> {\n    constructor(props: InviteUserLoaderProps) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading Users...\n            </div>\n        )\n    }\n\n    renderError() {\n        return (\n            <div>\n                Error!\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                return this.renderError()\n            case ComponentLoadingState.SUCCESS:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onInviteUserLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../redux/actions/inviteUser'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    loadingState: ComponentLoadingState\n}\n\ninterface DispatchProps {\n    onInviteUserLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        loadingState: state.views.inviteUserView.loadingState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onInviteUserLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(InviteUserLoader)","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport { StoreState, SyncState, ValidationErrorType } from '../../types'\nimport { AnError, makeError } from '../../lib/error'\nimport Validation from '../../data/models/organization/validation';\nimport { ActionFlag } from '.';\n\n// Loading\n\nexport interface Load extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n    error: AnError\n}\n\nexport interface Unload extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, editableMemberProfile: orgModel.EditableMemberProfile): LoadSuccess {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_SUCCESS,\n        organization: organization,\n        editableMemberProfile: editableMemberProfile\n    }\n}\n\nexport function loadError(error: AnError): LoadError {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function unload() {\n    return {\n        type: ActionFlag.MANAGE_MEMBERSHIP_UNLOAD\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        // TODO: here is where we would hook into the store state entities for groups\n        try {\n            const org = await orgClient.getOrg(organizationId)\n            if (org.kind !== orgModel.OrganizationKind.NORMAL) {\n                dispatch(loadError(makeError({\n                    code: 'invalid state',\n                    message: 'Organization must be of kind \"NORMAL\"'\n                })))\n                return\n            }\n\n            if (!org.isMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" is not a member of this org'\n                })))\n                return\n            }\n\n            const thisMember = org.members.find((member) => {\n                return member.username === username\n            })\n            if (!thisMember) {\n                dispatch(loadError(makeError({\n                    code: 'notfound',\n                    message: 'The user \"' + username + '\" was not found in the members list'\n                })))\n                return\n            }\n\n            const editableProfile: orgModel.EditableMemberProfile = {\n                title: {\n                    value: thisMember.title || '',\n                    remoteValue: thisMember.title,\n                    syncState: SyncState.NEW,\n                    validationState: {\n                        type: ValidationErrorType.OK,\n                        validatedAt: new Date()\n                    }\n                }\n            }\n            dispatch(loadSuccess(org, editableProfile))\n            // dispatch(evaluate())\n        } catch (ex) {\n            console.error('Error :(', ex)\n            dispatch(loadError(makeError({\n                code: ex.name,\n                message: ex.message\n            })))\n        }\n    }\n}\n\n// Leaving the Org\n\nexport interface LeaveOrg extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG\n    organizationId: orgModel.OrganizationID\n}\n\ninterface LeaveOrgSuccess extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n}\n\ninterface LeaveOrgError extends Action {\n    type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n    error: AnError\n}\n\nexport function leaveOrg(organizationId: orgModel.OrganizationID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(({\n            type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_START\n        }))\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            orgClient.removeMember(organizationId, username)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_SUCCESS\n            })\n        } catch (ex) {\n            console.error('ERROR leaving org', ex)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_LEAVE_ORG_ERROR,\n                error: {\n                    code: ex.name,\n                    message: ex.message\n                }\n            })\n        }\n\n\n    }\n}\n\n\n// Updating Profile\n\nexport interface UpdateTitle {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE,\n    title: string\n}\n\nexport interface UpdateTitleStart {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_START\n}\n\nexport interface UpdateTitleSuccess {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n    title: string\n}\n\nexport interface UpdateTitleError {\n    type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n    error: AnError\n}\n\nexport interface Save {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE,\n    memberProfile: orgModel.EditableMemberProfile\n}\n\nexport interface SaveStart {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR,\n    error: AnError\n}\n\nexport function updateTitle(title: string) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>) => {\n        const [validatedTitle, error] = Validation.validateMemberTitle(title)\n\n        if (error.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_ERROR,\n                error: makeError({\n                    code: 'invalid',\n                    message: error.message\n                })\n            })\n        } else {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_UPDATE_TITLE_SUCCESS,\n                title: validatedTitle\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n\nexport interface Evaluate extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE\n}\n\nexport interface EvaluateSuccess extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS,\n}\n\nexport interface EvaluateError extends Action<ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR\n}\n\nexport function evaluate() {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        const state = getState()\n        if (!state.views.manageMembershipView.viewModel) {\n            throw new Error('Argh, no view model')\n        }\n\n        const {\n            views: {\n                manageMembershipView: {\n                    viewModel: {\n                        editableMemberProfile\n                    }\n                }\n            }\n        } = state\n\n        if (editableMemberProfile.title.validationState.type !== ValidationErrorType.OK) {\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_ERROR\n            })\n            return\n        }\n\n        dispatch({\n            type: ActionFlag.MANAGE_MEMBERSHIP_EVALUATE_SUCCESS\n        })\n    }\n}\n\nexport interface Save extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE\n}\n\nexport interface SaveStart extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_START> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n}\n\nexport interface SaveSuccess extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n}\n\nexport interface SaveError extends Action<ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR> {\n    type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR\n}\n\nexport function save() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_START\n        })\n\n        const state = getState()\n        if (!state.views.manageMembershipView.viewModel) {\n            throw new Error('Argh, no view model?!?')\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            views: {\n                manageMembershipView: {\n                    viewModel: { organization, editableMemberProfile }\n                }\n            },\n            app: { config }\n        } = state\n\n        const update = {\n            title: editableMemberProfile.title.value\n        }\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            await orgClient.updateMember(organization.id, username, update)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_SUCCESS\n            })\n        } catch (ex) {\n            console.error('error saving member profile', ex)\n            dispatch({\n                type: ActionFlag.MANAGE_MEMBERSHIP_SAVE_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n        dispatch(evaluate())\n    }\n}\n","import * as React from 'react'\nimport Header from '../../Header';\nimport { Icon, Button, Modal, Input } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport './component.css'\nimport OrganizationHeader from '../organizationHeader/loader';\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\nimport { Editable, ValidationErrorType, SyncState, EditState, SaveState, ValidationState } from '../../../types';\n\nexport interface ManageMembershipProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n    onLeaveOrganization: (organizationId: string) => void\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n}\n\ninterface MangeMembershipState {\n}\n\nclass ManageMembership extends React.Component<ManageMembershipProps, MangeMembershipState> {\n    constructor(props: ManageMembershipProps) {\n        super(props)\n    }\n\n    doLeaveOrg() {\n        // alert('this will leave you the org')\n        // this.props.onLeaveOrganization(this.props.organization.id)\n        const confirmed = (() => {\n            this.doLeaveOrgConfirmed()\n        }).bind(this)\n        Modal.confirm({\n            title: 'Really leave this organization?',\n            content: (\n                <p>\n                    This is not reversible.\n                </p>\n            ),\n            width: '50em',\n            onOk: () => {\n                confirmed()\n            }\n        })\n    }\n\n    doLeaveOrgConfirmed() {\n        // alert('this will leave you the org')\n        this.props.onLeaveOrganization(this.props.organization.id)\n    }\n\n    canSave() {\n        return (\n            this.props.editState === EditState.EDITED &&\n            this.props.validationState.type === ValidationErrorType.OK &&\n            (this.props.saveState === SaveState.NEW ||\n                this.props.saveState === SaveState.READY ||\n                this.props.saveState === SaveState.SAVED)\n        )\n    }\n\n    onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        this.props.onSave()\n    }\n\n    onTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        e.persist()\n        this.props.onUpdateTitle(e.target.value)\n    }\n\n    doShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'Manage My Membership Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the view to help you manage your membership...</p>\n                </div>\n            )\n        })\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"user\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Manage your membership</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                {/* <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.doCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button> */}\n\n                <Button\n                    // shape=\"circle\"\n                    type=\"danger\"\n                    icon=\"frown\"\n                    onClick={this.doLeaveOrg.bind(this)}>\n                    Leave Organization...\n                </Button>\n                {' '}\n                {/* <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.doShowInfo.bind(this)}>\n                </Button> */}\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    calcFieldClass(field: Editable) {\n        switch (field.validationState.type) {\n            // case (ValidationErrorType.OK):\n            //     return 'validation-ok'\n            case (ValidationErrorType.ERROR):\n                return 'ManageMembership-validation-error'\n            case (ValidationErrorType.REQUIRED_MISSING):\n                return 'ManageMembership-validation-error'\n        }\n\n        switch (field.syncState) {\n            case (SyncState.DIRTY):\n                return 'ManageMembership-sync-dirty'\n            default:\n                return 'ManageMembership-validation-ok'\n        }\n    }\n\n    renderEditor() {\n        return (\n            <form id=\"editMembership\"\n                className=\"ManageMembership-editorTable\"\n                onSubmit={this.onSubmit.bind(this)}>\n                <div className=\"ManageMembership-headerRow\">\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Edit\n                    </div>\n                    <div className=\"ManageMembership-editCol ManageMembership-headerCol\">\n                        Preview\n                    </div>\n                </div>\n                <div className=\"ManageMembership-editorTable-row\">\n                    <div className=\"ManageMembership-editCol ManageMembership-editCell\">\n                        <div className=\"ManageMembership-editorTable-labelCol\">\n                            <span className=\"field-label ManageMembership-titleLabel\">\n                                title\n                            </span>\n                        </div>\n                        <div className=\"ManageMembership-editorTable-controlCol\">\n                            <Input value={this.props.editableMemberProfile.title.value || ''}\n                                className={this.calcFieldClass(this.props.editableMemberProfile.title)}\n                                onChange={this.onTitleChange.bind(this)} />\n                        </div>\n                    </div>\n                    <div className=\"ManageMembership-previewCol ManageMembership-previewCell\">\n                        <div className=\"ManageMembership-titlePreview\">\n                            {this.props.editableMemberProfile.title.value}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"ManageMembership-editorFooter\">\n                    <Button icon=\"save\"\n                        form=\"editMembership\"\n                        key=\"submit\"\n                        disabled={!this.canSave.call(this)}\n                        htmlType=\"submit\">\n                        Save\n                </Button>\n                </div>\n            </form>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"ManageMembership\">\n                {this.renderOrgHeader()}\n                {this.renderHeader()}\n                <h3>\n                    Edit Your Membership Profile\n                </h3>\n\n                <div className=\"ManageMembership-body\">\n                    {this.renderEditor()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ManageMembership","import { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../redux/actions/manageMembership'\n\nimport { StoreState, EditState, SaveState, ValidationState } from '../../../types';\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as userModel from '../../../data/models/user'\n\nimport Component from './component'\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    username: userModel.Username\n    organization: orgModel.Organization\n    editableMemberProfile: orgModel.EditableMemberProfile\n    editState: EditState\n    saveState: SaveState\n    validationState: ValidationState\n}\n\ninterface DispatchProps {\n    onLeaveOrganization: (organizationId: string) => void,\n    onUpdateTitle: (title: string) => void\n    onSave: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    if (!state.views.manageMembershipView.viewModel) {\n        throw new Error('View model missing')\n    }\n    const {\n        auth: { authorization: { username } },\n        views: {\n            manageMembershipView: {\n                viewModel: { organization, editableMemberProfile, editState, saveState, validationState }\n            }\n        }\n    } = state\n    return {\n        username, organization, editableMemberProfile,\n        editState, saveState, validationState\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLeaveOrganization: (organizationId: string) => {\n            dispatch(actions.leaveOrg(organizationId) as any)\n        },\n        onUpdateTitle: (title: string) => {\n            dispatch(actions.updateTitle(title) as any)\n        },\n        onSave: () => {\n            dispatch(actions.save() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\nimport { Alert, Collapse } from 'antd';\nimport './component.css'\nimport { AnError } from './api';\n\nexport interface ErrorProps {\n    error: AnError\n}\n\ninterface ErrorState {\n\n}\n\nexport default class Error extends React.Component<ErrorProps, ErrorState> {\n    constructor(props: ErrorProps) {\n        super(props)\n    }\n\n    renderDetail() {\n        return (\n            <table className='errorTable'>\n                <tbody>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">generated at</span>\n                        </th>\n                        <td>\n                            {\n                                Intl.DateTimeFormat('en-US', {\n                                    month: 'short',\n                                    day: 'numeric',\n                                    year: 'numeric'\n                                }).format(this.props.error.at)\n                            }\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">error id</span>\n                        </th>\n                        <td>\n                            <span style={{ fontFamily: 'monospace' }}>{this.props.error.id}</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>\n                            <span className=\"field-label\">explanation</span>\n                        </th>\n                        <td>\n                            {this.props.error.detail}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    renderInfo() {\n        if (!this.props.error.info) {\n            return (\n                <div style={{ textAlign: 'left', fontStyle: 'italic' }}>\n                    No additional information\n                </div>\n            )\n        }\n        return (\n            <div>\n                additional info here ...\n            </div>\n        )\n    }\n\n    render() {\n        const description = (\n            <div>\n                <p>\n                    {this.props.error.message}\n                </p>\n                <Collapse bordered={false} style={{ backgroundColor: 'transparent' }}>\n                    <Collapse.Panel header=\"detail\" key=\"1\" style={{ backgroundColor: 'transparent' }}>\n                        {this.renderDetail()}\n                    </Collapse.Panel>\n                </Collapse>\n                <Collapse bordered={false} style={{ backgroundColor: 'transparent' }}>\n                    <Collapse.Panel header=\"additional info\" key=\"1\" style={{ backgroundColor: 'transparent' }}>\n                        {this.renderInfo()}\n                    </Collapse.Panel>\n                </Collapse>\n            </div>\n        )\n\n        return (\n            <Alert\n                type=\"error\"\n                showIcon\n                message=\"Error\"\n                className=\"Error\"\n                description={description}\n            />\n        )\n    }\n}","import * as React from 'react'\nimport { ManageMembershipView, ComponentLoadingState, StoreState } from '../../../types'\nimport Container from './container'\nimport Error from '../../../combo/error/component'\n\nexport interface Props {\n    organizationId: string\n    view: ManageMembershipView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoadingNone() {\n        return (\n            <div>\n                Loading membership editor (none)...\n            </div>\n        )\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading membership editor...\n            </div>\n        )\n    }\n\n    renderError(error: AnError) {\n        return (\n            <Error error={error} />\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoadingNone()\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError(makeError({\n                        code: 'missing-error',\n                        message: 'The error appears to be missing'\n                    }))\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../redux/actions/manageMembership'\nimport { AnError, makeError } from '../../../combo/error/api';\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: ManageMembershipView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.manageMembershipView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import * as React from 'react'\n\nimport OrganizationHeader from '../organizationHeader/loader';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { NarrativeState } from '../../../types';\nimport Header from '../../Header';\nimport { Icon, Button, Modal, Alert, Select, Tooltip } from 'antd';\nimport './component.css'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as narrativeModel from '../../../data/models/narrative'\nimport MainMenu from '../../menu/component';\nimport { OrganizationNarrative, AccessibleNarrative } from '../../../data/models/narrative';\nimport NiceElapsedTime from '../../NiceElapsedTime';\n\n\nexport interface Props {\n    organization: orgModel.Organization\n    narratives: Array<OrganizationNarrative>\n    relation: orgModel.Relation\n    selectedNarrative: OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    // sortDirection: string\n    filter: string\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: OrganizationNarrative) => void\n}\n\nenum NavigateTo {\n    NONE = 0,\n    BROWSER,\n    VIEWER\n}\n\ninterface State {\n    navigateTo: NavigateTo,\n    // selectedNarrative: Narrative | null\n}\n\nexport class RequestAddNarrative extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            navigateTo: NavigateTo.NONE,\n            // selectedNarrative: null\n        }\n    }\n\n    doCancelToBrowser() {\n        this.setState({ navigateTo: NavigateTo.BROWSER })\n    }\n\n    doCancelToViewer() {\n        this.setState({ navigateTo: NavigateTo.VIEWER })\n    }\n\n    doSelectNarrative(narrative: OrganizationNarrative) {\n        this.props.doSelectNarrative(narrative)\n    }\n\n    doShowInfo() {\n        // this.setState({ showInfo: true })\n        Modal.info({\n            title: 'Request to Add Narrative Help',\n            width: '50em',\n            content: (\n                <div>\n                    <p>This is the view to help you request the addition of a narrative to this org...</p>\n                </div>\n            )\n        })\n    }\n\n    doSendRequest() {\n        if (this.props.selectedNarrative === null) {\n            console.warn('attempt to send request without selected narrative')\n            return\n        }\n        this.props.doSendRequest(this.props.organization.id, this.props.selectedNarrative.narrative.workspaceId)\n    }\n\n    canSendRequest() {\n        if (this.props.selectedNarrative) {\n            return true\n        }\n        return false\n    }\n\n    renderOrgHeader() {\n        // apparently TS is not smart enough to know this from the conditional branch in render()!\n        if (!this.props.organization) {\n            return\n        }\n        return (\n            <OrganizationHeader organizationId={this.props.organization.id} />\n        )\n    }\n\n    renderOrgName(name: string) {\n        const maxLength = 25\n        if (name.length < 25) {\n            return name\n        }\n        return (\n            <span>\n                {name.slice(0, 25)}\n                …\n            </span>\n        )\n    }\n\n    renderHeader() {\n        let orgName: string\n        const breadcrumbs = (\n            <React.Fragment>\n                <span>\n                    <NavLink to={`/viewOrganization/${this.props.organization.id}`}>\n                        <span style={{ fontWeight: 'bold' }}>\n                            {this.renderOrgName(this.props.organization.name)}\n                        </span>\n                    </NavLink>\n\n                    <Icon type=\"right\" style={{ verticalAlign: 'middle', marginLeft: '4px', marginRight: '4px' }} />\n\n                    <Icon type=\"plus\" />\n                    {' '}\n                    <span style={{ fontSize: '120%' }}>Add Narrative to Org</span>\n                </span>\n            </React.Fragment>\n        )\n        const buttons = (\n            <React.Fragment>\n                {/* <Button icon=\"undo\"\n                    type=\"danger\"\n                    onClick={this.doCancelToViewer.bind(this)}>\n                    Return to this Org\n                </Button> */}\n                <Button\n                    shape=\"circle\"\n                    icon=\"info\"\n                    onClick={this.doShowInfo.bind(this)}>\n                </Button>\n            </React.Fragment>\n        )\n        return (\n            <Header breadcrumbs={breadcrumbs} buttons={buttons} />\n        )\n    }\n\n    renderPermission(narrative: AccessibleNarrative) {\n        switch (narrative.access) {\n            case narrativeModel.NarrativeAccess.VIEW:\n                return (\n                    <span>\n                        <Icon type=\"eye\" /> View\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.EDIT:\n                return (\n                    <span>\n                        <Icon type=\"edit\" /> Edit\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.ADMIN:\n                return (\n                    <span>\n                        <Icon type=\"unlock\" /> Admin\n                    </span>\n                )\n            case narrativeModel.NarrativeAccess.OWNER:\n                return (\n                    <span>\n                        <Icon type=\"crown\" /> Owner\n                    </span>\n                )\n            default:\n                return (\n                    <span>\n                        ERROR\n                    </span>\n                )\n        }\n    }\n\n    renderPublicPermission(narrative: AccessibleNarrative) {\n        if (narrative.isPublic) {\n            return (\n                <span>\n                    <Icon type=\"global\" /> Public\n                </span>\n            )\n        } else {\n            return (\n                <span>\n                    <Icon type=\"lock\" /> Private\n                </span>\n            )\n        }\n    }\n\n    renderNarrative(narrative: AccessibleNarrative) {\n        return (\n            <React.Fragment>\n                <div className=\"RequestNarrative-title\">\n                    {narrative.title}\n                </div>\n                {/* <div className=\"RequestNarrative-owner\">\n                    <span className=\"field-label\">owner</span>\n                    <div style={{ display: 'inline-block' }}>\n                        <User userId={narrative.owner} avatarSize={20} />\n                    </div>\n                </div> */}\n                {/* <div className=\"RequestNarrative-permission\">\n                    {this.renderPermission(narrative)}\n                </div> */}\n                <div className=\"RequestNarrative-publicPermission\">\n                    {this.renderPublicPermission(narrative)}\n                </div>\n                <div className=\"RequestNarrative-modifiedAt\">\n                    <span className=\"field-label\">\n                        <Icon type=\"save\" />\n                    </span>\n                    {' '}\n                    <NiceElapsedTime time={narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderNarratives() {\n        if (this.props.narratives.length === 0) {\n            return (\n                <div className=\"message\">\n                    You do not have any Narratives\n                </div>\n            )\n        }\n        return this.props.narratives.map((orgNarrative, index) => {\n            const { status, narrative } = orgNarrative\n            let isSelected\n            if (this.props.selectedNarrative &&\n                narrative.workspaceId === this.props.selectedNarrative.narrative.workspaceId) {\n                isSelected = true\n            } else {\n                isSelected = false\n            }\n            let classNames = ['RequestNarrative-narrativeCell']\n            if (isSelected) {\n                classNames.push('RequestNarrative-selected')\n            }\n            let flag\n            switch (status) {\n                case NarrativeState.ASSOCIATED:\n                    classNames.push('RequestNarrative-narrativeInOrg')\n                    flag = (\n                        <Tooltip title=\"This narrative is already associated with this organization\">\n                            <Icon type=\"check\" style={{ color: 'green' }} />\n                        </Tooltip>\n                    )\n                    break\n                case NarrativeState.REQUESTED:\n                    classNames.push('RequestNarrative-narrativeInOrg')\n                    flag = (\n                        <Tooltip title=\"You have already requested that this narrative be added to this organization\">\n                            <Icon type=\"loading\" style={{ color: 'orange' }} />\n                        </Tooltip>\n                    )\n                    break\n                default:\n                    classNames.push('RequestNarrative-narrativeNotInOrg')\n            }\n\n            return (\n                <div\n                    className={classNames.join(' ')}\n                    onClick={() => { this.doSelectNarrative.call(this, orgNarrative) }}\n                    key={String(index)}>\n                    <div className=\"RequestNarrative-narrativeFlag\">\n                        {flag}\n                    </div>\n                    <div className=\"RequestNarrative-narrative\">\n                        {this.renderNarrative(orgNarrative.narrative)}\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    onSearchSubmit() {\n        console.log('searching...')\n        return\n    }\n\n    renderSearchIcon() {\n        if (this.props.searching) {\n            return (<Icon type=\"loading\" />)\n        }\n        return (<Icon type=\"search\" />)\n    }\n\n    renderSearchBar() {\n        return (\n            <form id=\"searchForm\"\n                className=\"RequestNarrative-searchBar\"\n                onSubmit={this.onSearchSubmit.bind(this)}>\n                <input\n                    placeholder=\"Search your Narratives\"\n                    // onChange={this.onSearchInputChange.bind(this)}\n                    autoFocus\n                // ref={this.searchInput}\n                />\n                {/* <Tooltip\n                    title=\"Enter one or more words to search organizations by name or owner\">\n                    <Icon type=\"info-circle\" theme=\"twoTone\" style={{ alignSelf: 'end' }} />\n                </Tooltip> */}\n                <Button\n                    // disabled={!this.haveSearchInput()}\n                    // ref={this.searchButton}\n                    className=\"RequestNarrative-button\"\n                    form=\"searchForm\"\n                    key=\"submit\"\n                    htmlType=\"submit\">\n                    {this.renderSearchIcon()}\n                    {/* Search */}\n                </Button>\n\n                {/* <div className=\"message\">\n                    {this.renderSearchFeedback()}\n                </div> */}\n            </form>\n        )\n    }\n\n    renderFeedbackBar() {\n        return (\n            <div>\n                Showing\n                {' '}\n                {\n                    Intl.NumberFormat('en-US', {\n                        style: 'decimal',\n                        useGrouping: true\n                    }).format(this.props.narratives.length)\n                }\n                {' '}\n                narratives\n            </div>\n        )\n    }\n\n    onSortByChange(value: string) {\n        switch (value) {\n            case 'title':\n                this.props.doSortBy(narrativeModel.Sort.TITLE)\n                break\n            case 'savedAt':\n                this.props.doSortBy(narrativeModel.Sort.LAST_SAVED)\n                break\n        }\n    }\n\n    onSortDirectionChange() {\n\n    }\n\n    onFilterChange() {\n\n    }\n\n    renderFilterSortBar() {\n        return (\n            <div className=\"RequestNarrative-filterSortBar\">\n                <span className=\"field-label\">sort by</span>\n                <Select onChange={this.onSortByChange.bind(this)}\n                    defaultValue={this.props.sortBy}\n                    style={{ width: '8em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"title\" key=\"title\">Title</Select.Option>\n                    <Select.Option value=\"savedAt\" key=\"savedAt\">Last saved</Select.Option>\n                </Select>\n                {/* <Select onChange={this.onSortDirectionChange.bind(this)}\n                    style={{ width: '4em' }}\n                    dropdownMatchSelectWidth={true}\n                    defaultValue={this.props.sortDirection}>\n                    <Select.Option value={SortDirection.ASCENDING} key=\"name\"><Icon type=\"sort-ascending\" /></Select.Option>\n                    <Select.Option value={SortDirection.DESCENDING} key=\"owner\"><Icon type=\"sort-descending\" /></Select.Option>\n                </Select> */}\n                {/* <span className=\"field-label\" style={{ marginLeft: '10px' }}>filter</span>\n                <Select onChange={this.onFilterChange.bind(this)}\n                    defaultValue={this.props.filter}\n                    style={{ width: '10em' }}\n                    dropdownMatchSelectWidth={true}>\n                    <Select.Option value=\"all\" key=\"all\">All</Select.Option>\n                    <Select.Option value=\"notAssociatedPending\" key=\"notAssociatedPending\">Not Associated/Pending</Select.Option>\n                    <Select.Option value=\"associatedPending\" key=\"associatedPending\">Only Associated/Pending</Select.Option>\n                </Select> */}\n            </div>\n        )\n    }\n\n    renderNarrativeSelector() {\n        return (\n            <div className=\"RequestNarrative-narrativeSelector scrollable-flex-column\">\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {/* <div style={{ flex: '0 0 10em' }}>\n                        {this.renderSearchBar()}\n                    </div> */}\n                    <div style={{ flex: '1 1 0px' }}>\n                        {this.renderFilterSortBar()}\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-feedbackBar\">\n                    {this.renderFeedbackBar()}\n                </div>\n                <div className=\"RequestNarrative-narratives scrollable-flex-column\">\n                    <div className=\"RequestNarrative-narrativesTable\">\n                        {this.renderNarratives()}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n    renderSelectedNarrativeButton() {\n        if (!this.props.selectedNarrative) {\n            return\n        }\n        if (this.props.selectedNarrative.status === NarrativeState.ASSOCIATED) {\n            return (\n                <Alert type=\"info\" message=\"This Narrative is associated with this Organization\" />\n            )\n        } else if (this.props.selectedNarrative.status === NarrativeState.REQUESTED) {\n            return (\n                <Alert type=\"warning\" message=\"You have requested to associate this Narrative with this Organization\" />\n            )\n        }\n        let buttonLabel\n        if (this.props.relation.type === orgModel.UserRelationToOrganization.ADMIN ||\n            this.props.relation.type === orgModel.UserRelationToOrganization.OWNER) {\n            buttonLabel = 'Add Selected Narrative to Organization'\n        } else {\n            buttonLabel = 'Request Association of Selected Narrative to Organization'\n        }\n        return (\n            <Button\n                type=\"primary\"\n                onClick={this.doSendRequest.bind(this)}\n                disabled={!this.canSendRequest.call(this)}\n            >{buttonLabel}</Button>\n        )\n\n    }\n\n    renderSelectedNarrative() {\n        if (this.props.selectedNarrative) {\n            return (\n                <div className=\"RequestNarrative-selectedNarrative\">\n                    <div className=\"RequestNarrative-title\">\n                        {this.props.selectedNarrative.narrative.title}\n                    </div>\n                    <div>\n                        <span className=\"field-label\">\n                            <Icon type=\"save\" />\n                        </span>\n                        {' '}\n                        <NiceElapsedTime time={this.props.selectedNarrative.narrative.lastSavedAt} tooltipPrefix=\"last saved \" />\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <Alert type=\"info\" message=\"Select a narrative on the left to show it here and be able to add it to this organization.\" />\n            )\n        }\n    }\n\n    renderMenuButtons() {\n        return (\n            <div className=\"ButtonSet\">\n                <div className=\"ButtonSet-button\">\n                    <Button icon=\"rollback\"\n                        type=\"danger\"\n                        onClick={this.doCancelToViewer.bind(this)}>\n                        Back to Org\n                </Button>\n                </div>\n                <div className=\"ButtonSet-button\">\n                    <Button\n                        shape=\"circle\"\n                        icon=\"info\"\n                        onClick={this.doShowInfo.bind(this)}>\n                    </Button>\n                </div>\n            </div >\n        )\n    }\n\n    render() {\n        switch (this.state.navigateTo) {\n            case NavigateTo.BROWSER:\n                return <Redirect push to=\"/organizations\" />\n            case NavigateTo.VIEWER:\n                return <Redirect push to={\"/viewOrganization/\" + this.props.organization.id} />\n            case NavigateTo.NONE:\n            default:\n            // do nothing.\n        }\n\n        // let buttonLabel\n        // if (this.props.organization.relation.type === UserRelationToOrganization.ADMIN ||\n        //     this.props.organization.relation.type === UserRelationToOrganization.OWNER) {\n        //     buttonLabel = 'Add Selected Narrative to Organization'\n        // } else {\n        //     buttonLabel = 'Request Addition of Selected Narrative to Organization'\n        // }\n\n        return (\n            <div className=\"RequestNarrative scrollable-flex-column\">\n                <MainMenu buttons={this.renderMenuButtons()} />\n                {/* {this.renderHeader()} */}\n                {this.renderOrgHeader()}\n                <div className=\"RequestNarrative-body scrollable-flex-column\">\n                    <div className=\"RequestNarrative-selectNarrativeCol scrollable-flex-column\">\n                        <h3>Select a Narrative</h3>\n                        {this.renderNarrativeSelector()}\n                    </div>\n                    <div className=\"RequestNarrative-selectedNarrativeCol\">\n                        <h3>Selected Narrative</h3>\n                        {this.renderSelectedNarrative()}\n                        <div className=\"RequestNarrative-selectedNarrativeButtonBar\">\n                            {this.renderSelectedNarrativeButton()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"RequestNarrative-footer\">\n                    {/* <Button\n                        type=\"primary\"\n                        onClick={this.doSendRequest.bind(this)}\n                        disabled={!this.canSendRequest.call(this)}\n                    >{buttonLabel}</Button> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RequestAddNarrative","import { Action } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ActionFlag } from './index'\nimport { AppError, StoreState, Narrative } from '../../types'\n\nimport * as orgModel from '../../data/models/organization/model'\nimport * as narrativeModel from '../../data/models/narrative'\nimport * as requestModel from '../../data/models/requests'\nimport { AnError } from '../../lib/error';\nimport { makeError } from '../../combo/error/api';\nimport { OrganizationNarrative } from '../../data/models/narrative';\n\nexport interface Load extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD\n}\n\nexport interface LoadStart extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n}\n\nexport interface LoadSuccess extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS\n    organization: orgModel.Organization\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    relation: orgModel.Relation\n}\n\nexport interface LoadError extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR\n    error: AppError\n}\n\nexport function loadStart(): LoadStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_START\n    }\n}\n\nexport function loadSuccess(organization: orgModel.Organization, narratives: Array<narrativeModel.OrganizationNarrative>, relation: orgModel.Relation): LoadSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_SUCCESS,\n        organization, narratives, relation\n    }\n}\n\nexport function loadError(error: AppError): LoadError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_LOAD_ERROR,\n        error: error\n    }\n}\n\nexport function load(organizationId: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(loadStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n        const requestClient = new requestModel.RequestsModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const [org, narratives, request, invitation] = await Promise.all([\n                orgClient.getOrganization(organizationId),\n                narrativeClient.getOwnNarratives(organizationId),\n                requestClient.getUserRequestForOrg(organizationId),\n                requestClient.getUserInvitationForOrg(organizationId)\n            ])\n\n            const relation = orgModel.determineRelation(org, username, request, invitation)\n            dispatch(loadSuccess(org, narratives, relation))\n        } catch (ex) {\n            console.error('loading error', ex)\n            dispatch(loadError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Selecting narrative\nexport interface SelectNarrative {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE,\n    narrative: Narrative\n}\n\nexport interface SelectNarrativeStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n}\n\nexport interface SelectNarrativeSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS\n    narrative: narrativeModel.OrganizationNarrative\n}\n\nexport interface SelectNarrativeError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR\n    error: AppError\n}\n\nexport function selectNarrativeStart(): SelectNarrativeStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_START\n    }\n}\n\nexport function selectNarrativeSuccess(narrative: OrganizationNarrative): SelectNarrativeSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_SUCCESS,\n        narrative: narrative\n    }\n}\n\nexport function selectNarrativeError(error: AppError): SelectNarrativeError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SELECT_NARRATIVE_ERROR,\n        error: error\n    }\n}\n\nexport function selectNarrative(narrative: OrganizationNarrative) {\n    return (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(selectNarrativeStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        // TODO: fetch narrative and populate the selected narrative accordingly...\n\n\n        dispatch(selectNarrativeSuccess(narrative))\n    }\n}\n\n// Sending Request\nexport interface SendRequest {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND\n}\n\nexport interface SendRequestStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n}\n\nexport interface SendRequestSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n    request: requestModel.Request | boolean\n}\n\nexport interface SendRequestError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n    error: AppError\n}\n\n\nexport function sendRequestStart(): SendRequestStart {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_START\n    }\n}\n\nexport function sendRequestSuccess(request: requestModel.Request | boolean): SendRequestSuccess {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_SUCCESS,\n        request: request\n    }\n}\n\nexport function sendRequestError(error: AppError): SendRequestError {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_SEND_ERROR,\n        error: error\n    }\n}\n\nexport function sendRequest(groupId: string, workspaceId: number) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(sendRequestStart())\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config } } = getState()\n\n        const orgClient = new orgModel.OrganizationModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url\n        })\n\n        try {\n            const request = await orgClient.addOrRequestNarrativeToGroup(groupId, workspaceId)\n            dispatch(sendRequestSuccess(request))\n        } catch (ex) {\n            dispatch(sendRequestError({\n                code: ex.name,\n                message: ex.message\n            }))\n        }\n    }\n}\n\n// Unloading\n\nexport interface Unload extends Action {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n}\n\nexport function unload(): Unload {\n    return {\n        type: ActionFlag.REQUEST_ADD_NARRATIVE_UNLOAD\n    }\n}\n\n// SORTING\n\nexport interface Sort {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT\n    sort: narrativeModel.Sort\n}\n\nexport interface SortStart {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n}\n\nexport interface SortSuccess {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS\n    narratives: Array<narrativeModel.OrganizationNarrative>\n}\n\nexport interface SortError {\n    type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR\n    error: AnError\n}\n\nexport function sort(sort: narrativeModel.Sort) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch({\n            type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_START\n        } as SortStart)\n\n        const state = getState()\n\n        const viewModel = state.views.requestNarrativeView.viewModel\n\n        if (viewModel === null) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: 'viewmodel missing'\n                })\n            })\n            return\n        }\n\n        const {\n            auth: { authorization: { token, username } },\n            app: { config }\n        } = state\n\n        const narrativeClient = new narrativeModel.NarrativeModel({\n            token, username,\n            groupsServiceURL: config.services.Groups.url,\n            serviceWizardURL: config.services.ServiceWizard.url,\n            workspaceServiceURL: config.services.Workspace.url\n        })\n\n        try {\n            const sorted = narrativeClient.sortOrganizationNarratives(viewModel.narratives, sort)\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_SUCCESS,\n                narratives: sorted\n            } as SortSuccess)\n        } catch (ex) {\n            dispatch({\n                type: ActionFlag.REQUEST_ADD_NARRATIVE_SORT_ERROR,\n                error: makeError({\n                    code: 'error',\n                    message: ex.message\n                })\n            })\n        }\n\n    }\n}","import { Dispatch, Action } from 'redux'\n\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\n\nimport Component from './component'\nimport * as actions from '../../../redux/actions/requestAddNarrative'\nimport * as orgModel from '../../../data/models/organization/model'\nimport * as narrativeModel from '../../../data/models/narrative'\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    organization: orgModel.Organization\n    relation: orgModel.Relation\n    narratives: Array<narrativeModel.OrganizationNarrative>\n    selectedNarrative: narrativeModel.OrganizationNarrative | null\n    searching: boolean\n    sortBy: string\n    // sortDirection: types.SortDirection\n    filter: string\n}\n\ninterface DispatchProps {\n    doSendRequest: (groupId: string, workspaceId: number) => void\n    doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => void\n    doSortBy: (sortBy: narrativeModel.Sort) => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    if (state.views.requestNarrativeView.viewModel === null) {\n        throw new Error('view value is not defined!')\n    }\n\n    const {\n        views: {\n            requestNarrativeView: {\n                viewModel: {\n                    organization, relation, narratives, selectedNarrative,\n                }\n            }\n        }\n    } = state\n\n    return {\n        organization, relation, narratives, selectedNarrative,\n        searching: false,\n        sortBy: 'title',\n        // sortDirection: types.SortDirection.ASCENDING,\n        filter: ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        doSendRequest: (groupId: string, workspaceId: number) => {\n            dispatch(actions.sendRequest(groupId, workspaceId) as any)\n        },\n        doSelectNarrative: (narrative: narrativeModel.OrganizationNarrative) => {\n            dispatch(actions.selectNarrative(narrative) as any)\n        },\n        doSortBy: (sortBy: narrativeModel.Sort) => {\n            dispatch(actions.sort(sortBy) as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nimport Container from './container'\n\nexport interface Props {\n    organizationId: string\n    view: types.RequestNarrativeView\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\ninterface State {\n}\n\nclass Loader extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading Your Narratives...\n            </div>\n        )\n    }\n\n    renderError(error: types.AppError) {\n        return (\n            <div>\n                Error!\n                <div>\n                    {error.message}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                return this.renderLoading()\n            case types.ComponentLoadingState.LOADING:\n                return this.renderLoading()\n            case types.ComponentLoadingState.ERROR:\n                if (this.props.view.error) {\n                    return this.renderError(this.props.view.error)\n                } else {\n                    return this.renderError({\n                        code: 'Missing Error',\n                        message: 'The error appears to be missing'\n                    })\n                }\n            default:\n                return (\n                    <Container />\n                )\n        }\n    }\n\n    componentDidMount() {\n        switch (this.props.view.loadingState) {\n            case types.ComponentLoadingState.NONE:\n                this.props.onLoad(this.props.organizationId)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n}\n\n//\n\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as types from '../../../types'\nimport * as actions from '../../../redux/actions/requestAddNarrative'\n\nexport interface OwnProps {\n    organizationId: string\n}\n\ninterface StateProps {\n    view: types.RequestNarrativeView\n}\n\ninterface DispatchProps {\n    onLoad: (organizationId: string) => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: types.StoreState, props: OwnProps): StateProps {\n    return {\n        view: state.views.requestNarrativeView\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch<actions.Load>): DispatchProps {\n    return {\n        onLoad: (organizationId: string) => {\n            dispatch(actions.load(organizationId) as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, types.StoreState>(mapStateToProps, mapDispatchToProps)(Loader)","import {\n    StoreState, SortDirection, AuthState, AppState,\n    EditState, SaveState, ValidationState, BrowseOrgsState, ComponentLoadingState\n} from \"../types\"\n\nimport * as orgModel from '../data/models/organization/model'\n\n// rawOrganizations: [],\n//                         organizations: [],\n//                         totalCount: 0,\n//                         filteredCount: 0,\n//                         sortBy: 'name',\n//                         sortDirection: SortDirection.ASCENDING,\n//                         filter: 'all',\n//                         searchTerms: [],\n//                         selectedOrganizationId: null,\n//                         searching: false\nexport class StateInstances {\n    static makeInitialState(): StoreState {\n        return {\n            entities: {\n                users: {\n                    byId: new Map(),\n                    all: []\n                },\n                orgs: {\n                    byId: new Map(),\n                    all: []\n                },\n                requests: {\n                    byId: new Map(),\n                    all: []\n                },\n                narratives: {\n                    byId: new Map()\n                },\n                organizations: {\n                    byId: new Map()\n                }\n            },\n            db: {\n                notifications: {\n                    all: [],\n                    byId: new Map(),\n                    // collections: {\n                    //     byGroup: new Map()\n                    // }\n                }\n            },\n            views: {\n                browseOrgsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                organizationCentricView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                addOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                editOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                    // organizationId: '',\n                    // editState: EditState.NONE,\n                    // saveState: SaveState.NONE,\n                    // validationState: ValidationState.NONE,\n                    // editedOrganization: StaticData.makeEmptyEditableOrganization(),\n                    // organization: null\n                },\n                manageOrganizationRequestsView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewMembersView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                inviteUserView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                manageMembershipView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                requestNarrativeView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n                viewOrgView: {\n                    loadingState: ComponentLoadingState.NONE,\n                    error: null,\n                    viewModel: null\n                },\n            },\n\n\n            auth: {\n                status: AuthState.NONE,\n                message: '',\n                authorization: {\n                    token: '',\n                    username: '',\n                    realname: '',\n                    roles: []\n                }\n            },\n            error: null,\n\n            app: {\n                status: AppState.NONE,\n                config: {\n                    baseUrl: '',\n                    services: {\n                        Groups: {\n                            url: ''\n                        },\n                        UserProfile: {\n                            url: ''\n                        },\n                        Workspace: {\n                            url: ''\n                        },\n                        ServiceWizard: {\n                            url: ''\n                        },\n                        Feeds: {\n                            url: ''\n                        },\n                        Auth: {\n                            url: ''\n                        }\n                    },\n                    defaultPath: '',\n                    channelId: null\n                }\n            },\n\n            updateOrg: {\n                pending: false\n            },\n\n\n        }\n    }\n}","import * as React from 'react'\n\nexport interface Props {\n    onLoad: () => void\n    onUnload: () => void\n}\n\ninterface State {\n\n}\n\nexport default class DataServices extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n    }\n\n    componentWillMount() {\n        this.props.onLoad()\n    }\n\n    componentWillUnmount() {\n        this.props.onUnload()\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\n","import { Dispatch, Action } from 'redux'\nimport { connect } from 'react-redux'\nimport { StoreState } from '../../types';\n// import * as actions from '../../redux/actions/notifications'\nimport * as actions from '../../redux/actions/dataServices'\nimport Component from './component'\n\nexport interface OwnProps {\n\n}\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n    onLoad: () => void\n    onUnload: () => void\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    return {\n\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(actions.load() as any)\n        },\n        onUnload: () => {\n            dispatch(actions.unload() as any)\n        }\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Component)","import * as React from 'react'\n\nexport interface AppContext {\n    test: string\n}\n\nconst context = React.createContext<AppContext | null>(null)\n\nexport const AppContextProvider = context.Provider\nexport const AppContextConsumer = context.Consumer","import React, { Component } from 'react'\nimport { Route, Switch, Redirect } from 'react-router'\nimport { BrowserRouter } from 'react-router-dom'\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport theReducer from './redux/reducers'\n\n// the app and subcomponents\nimport './App.css';\n\n// fontawesome setup\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSearch, faGlobe, faUserLock } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSpinner, faSearch, faGlobe, faUserLock)\n\nimport OrganizationsBrowser from './components/views/browseOrgs/loader'\nimport NewOrganization from './components/views/newOrganization/loader'\nimport ViewOrganization from './components/views/viewOrganization/loader'\nimport EditOrganization from './components/views/editOrganization/loader'\nimport Auth from './containers/Auth'\nimport KBaseIntegration from './containers/KBaseIntegration'\nimport InviteUser from './components/views/inviteUser/loader'\nimport ManageMembership from './components/views/manageMembership/loader'\nimport RequestAddNarrative from './components/views/requestAddNarrative/loader'\nimport { StateInstances } from './redux/state';\nimport DataServices from './components/dataServices/storeAdapter'\nimport { AppContextProvider } from './AppContext'\nimport { Marked, Renderer, MarkedOptions } from 'marked-ts'\n\nclass DescriptionRenderer extends Renderer {\n  constructor(options?: MarkedOptions) {\n    super(options)\n  }\n  link(href: string, title: string, text: string) {\n    if (this.options.sanitize) {\n      let prot: string;\n\n      try {\n        prot = decodeURIComponent(this.options.unescape!(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      }\n      catch (e) {\n        return text\n      }\n\n      if\n        (\n        prot.indexOf('javascript:') === 0\n        || prot.indexOf('vbscript:') === 0\n        || prot.indexOf('data:') === 0\n      ) {\n        return text\n      }\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += ' target=\"_blank\">' + text + '</a>';\n\n    return out;\n  }\n}\n\nlet options = new MarkedOptions()\noptions.renderer = new DescriptionRenderer()\nMarked.setOptions({ renderer: new DescriptionRenderer() })\n\n// Put the redux store together\n// Just for prototyping --- This is super naive and will change!\n// import {organizations} from './data/temp';\n\n// TODO: determine the environment\n\nconst hosted = window.frameElement ? true : false\n\n// Set up initial state \n// TODO: move to own file\nconst initialState = StateInstances.makeInitialState()\n\n// TODO: remove the cast of reducer to any...\n// const middleware = [thunk]\n// const store = createStore<StoreState, SortOrgs, null, null>(theReducer as any, initialState, applyMiddleware(thunk));\nconst store = createStore(theReducer as any, initialState as any, compose(applyMiddleware(thunk)))\n\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <AppContextProvider value={{ test: 'ok' }}>\n        <Provider store={store}>\n\n          <KBaseIntegration>\n            <Auth hosted={hosted}>\n              <DataServices>\n                <BrowserRouter basename=\"/\" >\n                  <div className=\"App scrollable-flex-column\">\n                    <div className=\"App-body scrollable-flex-column\">\n                      {/* <MainMenu /> */}\n                      <Switch>\n                        <Route path=\"/organizations\" component={OrganizationsBrowser} />\n                        <Route path=\"/newOrganization\" component={NewOrganization} />\n                        {/* The destructuring below is ugly, but effective */}\n                        <Route path=\"/viewOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <ViewOrganization organizationId={id} />} />\n                        <Route path=\"/editOrganization/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => <EditOrganization organizationId={id} />} />\n                        <Route path=\"/inviteUser/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<InviteUser organizationId={id} />)} />\n                        <Route path=\"/membership/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<ManageMembership organizationId={id} />)} />\n                        <Route path=\"/requestAddNarrative/:id\" component={({ match: { params: { id } } }: { match: { params: { id: string } } }) => (<RequestAddNarrative organizationId={id} />)} />\n                        <Redirect from=\"/\" to=\"/organizations\" exact={true} />\n                      </Switch>\n                    </div>\n                  </div>\n                </BrowserRouter>\n              </DataServices>\n            </Auth>\n          </KBaseIntegration>\n\n        </Provider>\n      </AppContextProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport 'typeface-oxygen';\nimport 'normalize.css';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}